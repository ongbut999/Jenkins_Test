/** @file     Rte_ComM.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.8.0 
  */

#ifndef RTE_COMM_H
#define RTE_COMM_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_ComM_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_GetCurrentComMode)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#elif defined(RTE_RUNNABLEAPI_GetInhibitionStatus)
#elif defined(RTE_RUNNABLEAPI_GetMaxComMode)
#elif defined(RTE_RUNNABLEAPI_GetRequestedComMode)
#elif defined(RTE_RUNNABLEAPI_LimitChannelToNoComMode)
#elif defined(RTE_RUNNABLEAPI_LimitECUToNoComMode)
#elif defined(RTE_RUNNABLEAPI_MainFunction_ComMChannel_Can_Network_Channel)
#elif defined(RTE_RUNNABLEAPI_MainFunction_ComMChannel_Can_Network_XCP_Channel)
#elif defined(RTE_RUNNABLEAPI_ReadInhibitCounter)
#elif defined(RTE_RUNNABLEAPI_RequestComMode)
#elif defined(RTE_RUNNABLEAPI_ResetInhibitCounter)
#elif defined(RTE_RUNNABLEAPI_SetECUGroupClassification)
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_ComM_ChannelLimitation_E_NOT_OK ((Std_ReturnType)1)
#define RTE_E_ComM_ECUModeLimitation_E_NOT_OK ((Std_ReturnType)1)
#define RTE_E_ComM_UserRequest_E_MODE_LIMITATION ((Std_ReturnType)2)
#define RTE_E_ComM_UserRequest_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_ComM {
   uint8 Rte_Dummy;
};
typedef struct Rte_CDS_ComM Rte_CDS_ComM;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_ComM, RTE_CONST) Rte_Inst_ComM;
#define RTE_STOP_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_ComM, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define RTE_COMM_START_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, RTE_CODE) Rte_Switch_ComM_UM_ComMUser_Can_Network_Channel_currentMode(VAR(uint8, AUTOMATIC) data);
#define RTE_COMM_STOP_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_GetCurrentComMode)
#define Rte_Switch_UM_ComMUser_Can_Network_Channel_currentMode( data ) (Rte_Switch_ComM_UM_ComMUser_Can_Network_Channel_currentMode(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_GetCurrentComMode)
/* Inline read optimization; Rte_Switch_UM_ComMUser_Can_Network_XCP_Channel_currentMode to direct read */
#define Rte_Switch_UM_ComMUser_Can_Network_XCP_Channel_currentMode( data )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define ComM_START_SEC_CODE
#include "ComM_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, ComM_CODE) ComM_GetCurrentComMode(VAR(ComM_UserHandleType, AUTOMATIC) Rte_PDAV0,
                                                       CONSTP2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);
FUNC(Std_ReturnType, ComM_CODE) ComM_GetInhibitionStatus(VAR(NetworkHandleType, AUTOMATIC) Rte_PDAV0,
                                                         CONSTP2VAR(ComM_InhibitionStatusType, AUTOMATIC, RTE_APPL_DATA) Status);
FUNC(Std_ReturnType, ComM_CODE) ComM_GetMaxComMode(VAR(ComM_UserHandleType, AUTOMATIC) Rte_PDAV0,
                                                   CONSTP2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);
FUNC(Std_ReturnType, ComM_CODE) ComM_GetRequestedComMode(VAR(ComM_UserHandleType, AUTOMATIC) Rte_PDAV0,
                                                         CONSTP2VAR(ComM_ModeType, AUTOMATIC, RTE_APPL_DATA) ComMode);
FUNC(Std_ReturnType, ComM_CODE) ComM_LimitChannelToNoComMode(VAR(NetworkHandleType, AUTOMATIC) Rte_PDAV0,
                                                             VAR(boolean, AUTOMATIC) Status);
FUNC(Std_ReturnType, ComM_CODE) ComM_LimitECUToNoComMode(VAR(boolean, AUTOMATIC) Status);
FUNC(Std_ReturnType, ComM_CODE) ComM_ReadInhibitCounter(CONSTP2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) CounterValue);
FUNC(Std_ReturnType, ComM_CODE) ComM_RequestComMode(VAR(ComM_UserHandleType, AUTOMATIC) Rte_PDAV0,
                                                    VAR(ComM_ModeType, AUTOMATIC) ComMode);
FUNC(Std_ReturnType, ComM_CODE) ComM_ResetInhibitCounter(void);
FUNC(Std_ReturnType, ComM_CODE) ComM_SetECUGroupClassification(VAR(ComM_InhibitionStatusType, AUTOMATIC) Status);
#define ComM_STOP_SEC_CODE
#include "ComM_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_COMM_H */
