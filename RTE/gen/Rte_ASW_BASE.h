/** @file     Rte_ASW_BASE.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.8.0 
  */

#ifndef RTE_ASW_BASE_H
#define RTE_ASW_BASE_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_ASW_BASE_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_Base_SWC)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#elif defined(RTE_RUNNABLEAPI_RE_OsShell_TriggerBg)
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_EcuM_BootTarget_E_NOT_OK ((Std_ReturnType)1)
#define RTE_E_EcuM_ShutdownTarget_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_ASW_BASE {
   uint8 Rte_Dummy;
};
typedef struct Rte_CDS_ASW_BASE Rte_CDS_ASW_BASE;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_ASW_BASE, RTE_CONST) Rte_Inst_ASW_BASE;
#define RTE_STOP_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_ASW_BASE, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define EcuM_START_SEC_CODE
#include "EcuM_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, EcuM_CODE) EcuM_GetBootTarget(CONSTP2VAR(EcuM_BootTargetType, AUTOMATIC, RTE_APPL_DATA) target);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_GetLastShutdownTarget(CONSTP2VAR(EcuM_ShutdownTargetType, AUTOMATIC, RTE_APPL_DATA) shutdownTarget,
                                                           CONSTP2VAR(EcuM_ShutdownModeType, AUTOMATIC, RTE_APPL_DATA) shutdownMode);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_GetShutdownCause(CONSTP2VAR(EcuM_ShutdownCauseType, AUTOMATIC, RTE_APPL_DATA) shutdownCause);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_GetShutdownTarget(CONSTP2VAR(EcuM_ShutdownTargetType, AUTOMATIC, RTE_APPL_DATA) shutdownTarget,
                                                       CONSTP2VAR(EcuM_ShutdownModeType, AUTOMATIC, RTE_APPL_DATA) shutdownMode);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_SelectBootTarget(VAR(EcuM_BootTargetType, AUTOMATIC) target);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_SelectShutdownCause(VAR(EcuM_ShutdownCauseType, AUTOMATIC) shutdownCause);

FUNC(Std_ReturnType, EcuM_CODE) EcuM_SelectShutdownTarget(VAR(EcuM_ShutdownTargetType, AUTOMATIC) shutdownTarget,
                                                          VAR(EcuM_ShutdownModeType, AUTOMATIC) shutdownMode);

#define EcuM_STOP_SEC_CODE
#include "EcuM_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(Rte_SelfType_EcuM, RTE_CONST) Rte_Self_CPT_EcuM;
#define RTE_STOP_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_ASW_BASE_START_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ASW_BASE_PPort_SwcModeRequest_AppMode(VAR(uint8, AUTOMATIC) data);
FUNC(uint8, RTE_CODE) Rte_Mode_ASW_BASE_RPort_CurrentMode_CAN0_currentMode(void);
#define RTE_ASW_BASE_STOP_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_BootTarget_GetBootTarget to EcuM_GetBootTarget */
#define Rte_Call_RPort_BootTarget_GetBootTarget( target ) EcuM_GetBootTarget(target)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_BootTarget_SelectBootTarget to EcuM_SelectBootTarget */
#define Rte_Call_RPort_BootTarget_SelectBootTarget( target ) EcuM_SelectBootTarget(target)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_SelectShutdownTarget_GetLastShutdownTarget to EcuM_GetLastShutdownTarget */
#define Rte_Call_RPort_SelectShutdownTarget_GetLastShutdownTarget( shutdownTarget, shutdownMode ) EcuM_GetLastShutdownTarget(shutdownTarget, shutdownMode)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_SelectShutdownTarget_GetShutdownCause to EcuM_GetShutdownCause */
#define Rte_Call_RPort_SelectShutdownTarget_GetShutdownCause( shutdownCause ) EcuM_GetShutdownCause(shutdownCause)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_SelectShutdownTarget_GetShutdownTarget to EcuM_GetShutdownTarget */
#define Rte_Call_RPort_SelectShutdownTarget_GetShutdownTarget( shutdownTarget, shutdownMode ) EcuM_GetShutdownTarget(shutdownTarget, shutdownMode)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_SelectShutdownTarget_SelectShutdownCause to EcuM_SelectShutdownCause */
#define Rte_Call_RPort_SelectShutdownTarget_SelectShutdownCause( shutdownCause ) EcuM_SelectShutdownCause(shutdownCause)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
/* Inline function call optimization; Rte_Call_RPort_SelectShutdownTarget_SelectShutdownTarget to EcuM_SelectShutdownTarget */
#define Rte_Call_RPort_SelectShutdownTarget_SelectShutdownTarget( shutdownTarget, shutdownMode ) EcuM_SelectShutdownTarget(shutdownTarget, shutdownMode)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
#define Rte_Mode_RPort_CurrentMode_CAN0_currentMode() (Rte_Mode_ASW_BASE_RPort_CurrentMode_CAN0_currentMode())
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Base_SWC)
#define Rte_Write_PPort_SwcModeRequest_AppMode( data ) (Rte_Write_ASW_BASE_PPort_SwcModeRequest_AppMode(data))
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define ASW_BASE_START_SEC_CODE
#include "ASW_BASE_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(void, ASW_BASE_CODE) RE_Base_SWC_func(void);
FUNC(void, ASW_BASE_CODE) RE_OsShell_TriggerBg_func(void);
#define ASW_BASE_STOP_SEC_CODE
#include "ASW_BASE_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_ASW_BASE_H */
