/** @file     Rte_ASW_COM.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.8.0 
  */

#ifndef RTE_ASW_COM_H
#define RTE_ASW_COM_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_ASW_COM_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_COM_SWC)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/


/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_ASW_COM {
   uint8 Rte_Dummy;
};
typedef struct Rte_CDS_ASW_COM Rte_CDS_ASW_COM;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_ASW_COM, RTE_CONST) Rte_Inst_ASW_COM;
#define RTE_STOP_SEC_EcucPartition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_ASW_COM, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define RTE_ASW_COM_START_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ASW_COM_PPort_MCU01_EmergShutDown_MCU01_EmergShutDown(VAR(boolean, AUTOMATIC) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ASW_COM_PPort_MCU02_MaxTor_MCU02_MaxTor(VAR(uint16, AUTOMATIC) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ASW_COM_PPort_MCU03_NRF_IdcSamp_MCU03_NRF_IdcSamp(VAR(boolean, AUTOMATIC) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ASW_COM_PPort_MCU04_Test_MCU04_Test(VAR(boolean, AUTOMATIC) data);
#define RTE_ASW_COM_STOP_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(uint8, RTE_DATA) Rte_Rx_000000;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000000_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_16
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(sint16, RTE_DATA) Rte_Rx_000001;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_16
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000001_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000002;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000002_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000003;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000003_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000004;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000004_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000005;
#define RTE_STOP_SEC_EcucPartition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Std_ReturnType, RTE_DATA) Rte_Rx_000005_status;
#define RTE_STOP_SEC_VAR_CLEARED_8
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPort_HCU01_Shift_HCU01_Shift to direct access */
#define Rte_Read_RPort_HCU01_Shift_HCU01_Shift( data )  ( ((*(data)) = Rte_Rx_000000),Rte_Rx_000000_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPort_HCU01_TqCmd_HCU01_Tq_Cmd to direct access */
#define Rte_Read_RPort_HCU01_TqCmd_HCU01_Tq_Cmd( data )  ( ((*(data)) = Rte_Rx_000001),Rte_Rx_000001_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPort_HCU02_Poweroff_HCU02_Poweroff to direct access */
#define Rte_Read_RPort_HCU02_Poweroff_HCU02_Poweroff( data )  ( ((*(data)) = Rte_Rx_000002),Rte_Rx_000002_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPort_HCU04_Poweroff_HCU04_Poweroff to direct access */
#define Rte_Read_RPort_HCU04_Poweroff_HCU04_Poweroff( data )  ( ((*(data)) = Rte_Rx_000004),Rte_Rx_000004_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPort_HCU05_Poweroff_HCU05_Poweroff to direct access */
#define Rte_Read_RPort_HCU05_Poweroff_HCU05_Poweroff( data )  ( ((*(data)) = Rte_Rx_000005),Rte_Rx_000005_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
/* Inline read optimization; Rte_Read_RPott_HCU03_Poweroff_HCU03_Poweroff to direct access */
#define Rte_Read_RPott_HCU03_Poweroff_HCU03_Poweroff( data )  ( ((*(data)) = Rte_Rx_000003),Rte_Rx_000003_status )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
#define Rte_Write_PPort_MCU01_EmergShutDown_MCU01_EmergShutDown( data ) (Rte_Write_ASW_COM_PPort_MCU01_EmergShutDown_MCU01_EmergShutDown(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
#define Rte_Write_PPort_MCU02_MaxTor_MCU02_MaxTor( data ) (Rte_Write_ASW_COM_PPort_MCU02_MaxTor_MCU02_MaxTor(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
#define Rte_Write_PPort_MCU03_NRF_IdcSamp_MCU03_NRF_IdcSamp( data ) (Rte_Write_ASW_COM_PPort_MCU03_NRF_IdcSamp_MCU03_NRF_IdcSamp(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_COM_SWC)
#define Rte_Write_PPort_MCU04_Test_MCU04_Test( data ) (Rte_Write_ASW_COM_PPort_MCU04_Test_MCU04_Test(data))
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define ASW_COM_START_SEC_CODE
#include "ASW_COM_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(void, ASW_COM_CODE) RE_COM_SWC_func(void);
#define ASW_COM_STOP_SEC_CODE
#include "ASW_COM_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_ASW_COM_H */
