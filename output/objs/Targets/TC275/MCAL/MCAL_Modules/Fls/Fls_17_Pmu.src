	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc19072a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\Fls_17_Pmu.src Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c"
	.compiler_name		"ctc"
	;source	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c'

	
$TC16X
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Init',code,cluster('Fls_17_Pmu_Init')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Init'
	.align	2
	
	.global	Fls_17_Pmu_Init

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     1  /******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     2  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     3  ** Copyright (C) Infineon Technologies (2013)                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     4  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     5  ** All rights reserved.                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     6  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     7  ** This document contains proprietary information belonging to Infineon      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     8  ** Technologies. Passing on and copying of this document, and communication  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	     9  ** of its contents is not permitted without prior written authorization.     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    10  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    11  *******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    12  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    13  **  $FILENAME   : Fls_17_Pmu.c $                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    14  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    15  **  $CC VERSION : \main\120 $                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    16  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    17  **  $DATE       : 2017-12-14 $                                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    18  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    19  **  AUTHOR      : DL-AUTOSAR-Engineering                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    20  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    21  **  VENDOR      : Infineon Technologies                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    22  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    23  **  DESCRIPTION  : This file contains                                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    24  **                 - functionality of Flash driver                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    25  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    26  **  MAY BE CHANGED BY USER [yes/no]: No                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    27  **                                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    28  ******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    29  /******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    30     Traceability:
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    31                   [cover parentID=SAS_AS_FLS107_FLS159,DS_AS_FLS208,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    32                    DS_AS_FLS267,DS_AS_FLS006_FLS260_FLS261,DS_NAS_FLS_PR912_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    33                    DS_NAS_FLS_PR912_2,DS_NAS_FLS_PR912_3,DS_NAS_FLS_PR228,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    34                    DS_NAS_FLS_PR624_PR759_PR760_PR761,DS_NAS_FLS_PR919,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    35                    DS_NAS_FLS_PR915,DS_AS_FLS002,DS_AS_FLS003,SAS_NAS_ALL_PR749,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    36                    SAS_NAS_ALL_PR630_PR631,SAS_NAS_ALL_PR470,SAS_NAS_ALL_PR70,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    37                    SAS_NAS_ALL_PR1652]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    38                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    39  ******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    40  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    41  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    42  **                      Includes                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    43  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    44  #include "IfxFlash_reg.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    45  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    46  #include "IfxSrc_reg.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    47  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    48  /* Inclusion of Mcal Specific Global Header File */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    49  #include "Mcal.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    50  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    51  /* Inclusion of Flash header file */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    52  #include "Fls_17_Pmu.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    53  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    54  /* Inclusion of Flash command cycles file */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    55  #include "Fls_17_Pmu_ac.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    56  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    57  /* Inclusion of Fls_17_Pmu module's local header file */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    58  #include "Fls_17_Pmu_Local.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    59  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    60  /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    61   the macro FLS_RAM_EMULATION_TEST should be defined
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    62   in Fls_17_Pmu_Cfg.h
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    63   */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    64  #if (defined FLS_RAM_EMULATION_TEST)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    65  #if (FLS_RAM_EMULATION_TEST == 1U) 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    66  #include "FlsEmulation.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    67  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    68  #elif (defined FLS_17_PMU_VERIFYERASE_TEST)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    69  #if (FLS_17_PMU_VERIFYERASE_TEST == 1U) 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    70  #include "FlsEmulation.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    71  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    72  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    73  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    74  **                      Imported Compiler Switch Check                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    75  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    76  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    77  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    78  **                      Private Macro Definitions                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    79  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    80  /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    81  For internal debugging, this macro maps the FSR bitfields to RAM for error
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    82  simulation
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    83  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    84  #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    85    extern volatile uint32 TestFls_DebugMask;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    86  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    87  #ifdef IFX_FLS_DEBUG03
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    88    extern volatile uint32 TestFls_DebugMask03;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    89  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    90  #ifdef IFX_FLS_DEBUG04
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    91    extern volatile uint32 TestFls_DebugMask04;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    92  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    93  #ifdef IFX_FLS_DEBUG07
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    94    extern volatile uint32 TestFls_DebugMask07;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    95  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    96  #ifdef IFX_FLS_DEBUG08
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    97    extern volatile uint32 TestFls_DebugMask08;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    98  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	    99  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   100  #define ZERO_VALUE               (0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   101  #define TWO_VALUE                (2U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   102  #define THREE_VALUE              (3U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   103  #define FOUR_VALUE               (4U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   104  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   105  #define FLS_OPER_BIT_POSITION    (11U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   106  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   107  /* Linear Adress for data flash bank 0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   108  #define DFLASH_BANK0_LINEAR      (FLS_BASE_ADDRESS + FLS_SECTOR_STARTADDRESS)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   109  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   110  /* Linear Adress for data flash bank 1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   111  #define DFLASH_BANK1_LINEAR      (DFLASH_BANK0_LINEAR + FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   112  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   113  /* Page size mask used for checking if address is page aligned*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   114  /* ASSUMPTIONS : Page size is of the format 2^y ; y is a whole number */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   115  #define PAGE_SIZE_MASK        (FLS_PAGE_SIZE-1U)  /* MOD_128 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   116  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   117  /* Protection and sequence errors */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   118  #define FLS_PROER_SQER_ERROR   (0x00003000U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   119  /* Protection and sequence errors */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   120  #define FLS_PVER_ERROR         (0x02000000U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   121  /* Operational error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   122  #define FLS_OPER_ERROR         (0x00000800U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   123  /* Uncorrectable bit error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   124  #define FLS_BIT_ERROR          (0x00200000U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   125  /* Dflash busy status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   126  #define FLS_D0BUSY             (0x00000002U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   127  /* FCON register setting */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   128  #define FLS_FCON_SETTING       (0xFFFF803FU)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   129  /* FCON register reset setting */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   130  #define FLS_FCON_RESET_SETTING (0x78FF803FU)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   131  /* Disable traps on Uncorrectable errors */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   132  #define FLS_MARD_TRAP          (0x00008000U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   133  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   134  /* SPND bit in MARD register */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   135  #define FLS_MARD_SPND          (0x00000008U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   136  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   137  /* Word size - 4 bytes */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   138  #define FLS_WORD_SIZE          (4U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   139  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   140  **                      Private Type Definitions                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   141  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   142  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   143  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   144  **                      Private Function Declarations                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   145  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   146  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   147  #define FLS_17_PMU_START_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   148  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   149  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   150  static void Fls_lMainErase(uint8 BankType);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   151  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   152  static void Fls_lMainWrite(uint8 BankType);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   153  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   154  static void Fls_lMainRead(uint8 BankType);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   155  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   156  static void Fls_lMainCompare(uint8 BankType);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   157  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   158  static void Fls_lErrorHandler(uint8 JobType);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   159  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   160  #if(FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   161  static void Fls_lLoadAccessCode(uint8 JobRequest);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   162  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   163  static void Fls_lUnLoadAccessCode(uint8 JobRequest);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   164  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   165  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   166  IFX_LOCAL_INLINE boolean Fls_lSpndTimeout(uint32 TimeOutCount);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   167  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   168  IFX_LOCAL_INLINE boolean Fls_lResmErTimeout(uint32 TimeOutCount);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   169  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   170  static void Fls_lMainWriteJobStart(uint32 PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   171  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   172  static void Fls_lMainEraseJobStart(uint32 PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   173  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   174  IFX_LOCAL_INLINE boolean Fls_lPverChk(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   175  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   176  #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   177  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Read(const Fls_17_Pmu_StateType* StatePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   178  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   179  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Write(const Fls_17_Pmu_StateType* StatePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   180  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   181  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Erase(const Fls_17_Pmu_StateType* StatePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   182  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   183  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Compare(const Fls_17_Pmu_StateType* 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   184                                                                       StatePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   185  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   186  static uint8 Fls_lUninitDET(const uint8 ServiceID);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   187  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   188  static uint8 Fls_lTimeOutDET(const uint8 ServiceID);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   189  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   190  IFX_LOCAL_INLINE void Fls_lCalculateWriteTimeoutCount(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   191  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   192  IFX_LOCAL_INLINE Std_ReturnType Fls_lPageEraseCheck(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   193                                                     const uint32 * AddrCheckPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   194                                                     uint32 Length,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   195                                                     const uint8 ServiceID);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   196  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   197  IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckEraseDet(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   198                                                 Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   199                                                 Fls_LengthType Length);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   200  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   201  IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckWriteDet(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   202                                                   Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   203                                                   const uint8 *SourceAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   204                                                   Fls_LengthType Length);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   205  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   206  #if (FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   207  IFX_LOCAL_INLINE boolean Fls_lCheckWrittenPage(uint32 PageLength);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   208  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   209  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   210  #endif /* End of FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   211  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   212  /*Check for command sequence error and protection error*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   213  IFX_LOCAL_INLINE uint32 Fls_lChkSeqProtErrors(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   214  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   215  /*Check for operational error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   216  IFX_LOCAL_INLINE uint32 Fls_lChkOperError(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   217  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   218  /*Check for operational error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   219  IFX_LOCAL_INLINE uint32 Fls_lChkOperError_initmode(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   220  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   221  /*Check for double bit errors (DBER) */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   222  IFX_LOCAL_INLINE uint32 Fls_lChkBitErrors(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   223  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   224  /* Return the Busy status of the Data Flash Bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   225  /* FLASH0_FSR.U & (1U<< (1U + (Bank) ) */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   226  IFX_LOCAL_INLINE uint32 Fls_lHWBusyCheck(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   227  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   228  /* get the write mode , page mode or burst mode */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   229  IFX_LOCAL_INLINE uint8 Fls_lGetWriteMode(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   230  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   231  /* Get max read length according to the FLS mode */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   232  IFX_LOCAL_INLINE Fls_LengthType Fls_lGetReadModeLength(void);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   233  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   234  #define FLS_17_PMU_STOP_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   235  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   236   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   237  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   238  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   239  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   240  **                      Global Constant Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   241  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   242  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   243  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   244  **                      Global Variable Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   245  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   246  #if (FLS_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   247  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   248  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   249  #define FLS_17_PMU_START_SEC_VAR_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   250  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   251   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   252  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   253  const Fls_17_Pmu_ConfigType *Fls_ConfigPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   254  #define FLS_17_PMU_STOP_SEC_VAR_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   255  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   256   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   257  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   258  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   259  #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   260  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   261  #define FLS_17_PMU_START_SEC_CONST_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   262  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   263   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   264  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   265  const Fls_17_Pmu_ConfigType * const Fls_ConfigPtr = &Fls_17_Pmu_ConfigRoot[0];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   266  #define FLS_17_PMU_STOP_SEC_CONST_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   267  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   268   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   269  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   270  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   271  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   272  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   273  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   274  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   275  **                      Private Constant Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   276  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   277  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   278  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   279  **                      Private Variable Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   280  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   281  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   282  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   283  **                      Global Function Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   284  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   285  #define FLS_17_PMU_START_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   286  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   287   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   288  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   289  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   290  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   291  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   292  ** Traceability : [cover parentID=DS_AS_FLS249,DS_AS_FLS351,DS_AS_FLS014,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   293     DS_AS_FLS191,DS_AS_FLS086,DS_AS_FLS323_FLS324,DS_AS_FLS268,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   294     DS_NAS_FLS_PR913,DS_NAS_FLS_PR734_1,DS_AS403_FLS310_1_FLS312_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   295     DS_NAS_HE2_FLS_PR3018,DS_NAS_EP_FLS_PR3018][/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   296  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   297  ** Syntax : void Fls_17_Pmu_Init(const Fls_17_Pmu_ConfigType* ConfigPtr)      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   298  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   299  ** Service ID:  0                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   300  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   301  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   302  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   303  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   304  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   305  ** Parameters (in) :  ConfigPtr - Pointer to configuration set                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   306  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   307  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   308  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   309  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   310  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   311  ** Description : Driver Module Initialization function                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   312  ** Service for FLASH initialization. The Initialization function shall        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   313  ** initialize all Flash relevant registers with the values of the structure   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   314  ** referenced by the parameter ConfigPtr.                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   315  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   316  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   317  void Fls_17_Pmu_Init(const Fls_17_Pmu_ConfigType* ConfigPtr)
; Function Fls_17_Pmu_Init
.L381:
Fls_17_Pmu_Init:	.type	func
	mov.aa	a15,a4
.L930:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   318  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   319    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   320    uint32 FconReg;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   321    uint32 DummyRetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   322  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   323    #if( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   324    /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   325    FLS015: ConfigPtr shall not be NULL pointer
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   326    */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   327    #if (FLS_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   328    if (ConfigPtr == NULL_PTR)
	jnz.a	a15,.L2
.L1237:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   329    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   330    if (ConfigPtr != &Fls_17_Pmu_ConfigRoot[0])
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   331    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   332    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   333      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
	mov	d4,#92
.L1238:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   334                       FLS_17_PMU_INSTANCE_ID,FLS_SID_INIT,
	mov	d5,#0
.L1239:
	mov	d6,#0
.L1240:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   335                        FLS_E_PARAM_CONFIG);/* Report to DET */
	mov	d7,#1
	call	Det_ReportError
.L929:
	j	.L3
.L2:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   336    }   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   337    /* Check if the driver is BUSY */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   338    else if( ( ConfigPtr->FlsStateVarPtr->FlsJobType[0] != FLS_NONE) ||
	ld.a	a2,[a15]
.L1241:
	ld.bu	d15,[a2]42
.L1242:
	jne	d15,#0,.L4
.L1243:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   339           ( ConfigPtr->FlsStateVarPtr->FlsJobType[1] != FLS_NONE ) )
	ld.bu	d15,[a2]43
.L1244:
	jeq	d15,#0,.L5
.L4:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   340    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   341      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
	mov	d4,#92
.L1245:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   342                       FLS_17_PMU_INSTANCE_ID,FLS_SID_INIT,
	mov	d5,#0
.L1246:
	mov	d6,#0
.L1247:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   343                        FLS_E_BUSY);/* Report to DET */
	mov	d7,#6
	call	Det_ReportError
.L932:
	j	.L6
.L5:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   344    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   345    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   346    /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   347    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   348  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   349    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   350      /*  ------------------------------------------------------------------ **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   351      **                 Flash Module Initialization                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   352      **  ------------------------------------------------------------------ */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   353      /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   354      FLS014: Initialization of flash driver and its relevant registers
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   355      */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   356      /* Store the configuration pointer */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   357      #if (FLS_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   358      Fls_ConfigPtr = ConfigPtr;
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
.L1248:
	st.a	[a12],a15
.L1249:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   359      #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   360      Fls_ConfigPtr->FlsStateVarPtr->DriverInitialised = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   361      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   362  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   363      /* Clears error flags of FSR register */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   364      Fls_ResetReadCmdCycle();
	call	Fls_ResetReadCmdCycle
.L933:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   365      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   366      /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   367      Fls_lSchMEnter_Init();
	call	Fls_lSchMEnter_Init
.L1250:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   368   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   369      /* Reset EndInit protection to access EndInit protected registers */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   370      FLS_SFR_INIT_RESETENDINIT();                                         
	call	Mcal_ResetENDINIT
.L1251:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   371   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   372      /* Clear the wait state setting for DFLash and Set Dflash Waitstates
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   373         according to configuration  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   374      FconReg = (uint32)FLS_SFR_INIT_USER_MODE_READ32(FLASH0_FCON.U);
	movh.a	a2,#63488
	lea	a2,[a2]@los(0xf8002014)
	ld.w	d15,[a2]
.L934:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   375  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   376      #if (FLS_RESET_SFR_INIT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   377      /* Clear EOBM, PROERM, SQERM, VOPERM and DFlash wait state setting */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   378      FconReg &= FLS_FCON_RESET_SETTING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   379      /* Clear SELD0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   380      FLS_SFR_INIT_USER_MODE_MODIFY32(FLASH0_MARD.U,FLS_MARD_SELDO_CLEARMASK, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   381                                      FLS_WRITE_ZERO_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   382      /* Disable interrupt. Reserve bit access is ensured for SRC_PMU00 register*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   383      FLS_SFR_INIT_MODIFY32(SRC_PMU00.U,FLS_SRC_SRE_CLEARMASK, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   384                            FLS_WRITE_ZERO_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   385      #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   386      /* Clear DFlash Wait states */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   387      FconReg &= FLS_FCON_SETTING;
	insert	d0,d15,#0,#6,#9
.L935:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   388      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   389  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   390      /* Set DFlash Wait states according to configuration. Reserve bit access 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   391      is ensured for FLASH0_FCON register */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   392      FconReg |= ((unsigned_int)(ConfigPtr->FlsWaitStates));
	ld.w	d15,[a15]24
.L1252:
	or	d0,d15
.L1253:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   393      FLS_SFR_INIT_WRITE32(FLASH0_FCON.U,(unsigned_int)FconReg) ;
	st.w	[a2],d0
.L569:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   394   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   395      #if( FLS_USE_INTERRUPTS == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   396      /* Enable End of Busy Interrupt Mask. Reserve bit access is ensured for 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   397      FLASH0_FCON register*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   398      FLS_SFR_INIT_MODIFY32(FLASH0_FCON.U,FLS_FCON_EOBM_CLEARMASK, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   399                                            FLS_FCON_EOBM_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   400      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   401   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   402      /* Disable traps on Uncorrectable errors */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   403      /* If SPNDERR is set, it will get cleared by writing 1 to itself */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   404      FLS_SFR_INIT_MODIFY32(FLASH0_MARD.U,FLS_WRITE_ONE_CLEARMASK, FLS_MARD_TRAP)
	movh.a	a2,#63488
	lea	a2,[a2]@los(0xf80020ac)
	ld.w	d15,[a2]
.L937:
	insert	d15,d15,#1,#15,#1
	st.w	[a2],d15
.L570:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   405   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   406       /* Set End Init Protection */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   407      FLS_SFR_INIT_SETENDINIT();
	call	Mcal_SetENDINIT
.L936:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   408   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   409      /* Exit Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   410      Fls_lSchMExit_Init(); 
	call	Fls_lSchMExit_Init
.L1254:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   411   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   412      #if( FLS_USE_INTERRUPTS == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   413      /*Enable interrupt. Reserve bit access is ensured for SRC_PMU00 register*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   414      FLS_SFR_INIT_MODIFY32(SRC_PMU00.U,FLS_SRC_SRE_CLEARMASK, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   415                                        FLS_SRC_SRE_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   416      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   417      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   418      /*  ------------------------------------------------------------------ **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   419      **                 Global Variable Initialization                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   420      **  ------------------------------------------------------------------ */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   421      /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   422       After having finished the module initialization,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   423       the Flash Driver state shall be set to FLS_IDLE and and the jobs result
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   424       shall be set to FLS_JOB_OK.
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   425      */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   426      StatePtr = ConfigPtr->FlsStateVarPtr;
	ld.a	a15,[a15]
.L931:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   427   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   428      /*Set JobResult to ok  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   429      StatePtr->FlsJobResult = MEMIF_JOB_OK;
	mov	d15,#0
.L938:
	st.w	[a15]32,d15
.L1255:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   430   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   431      /* Setting the Jobtype of bank0,1 to none */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   432      StatePtr->FlsJobType[BANK0] = FLS_NONE;
	mov	d15,#0
.L1256:
	st.b	[a15]42,d15
.L1257:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   433      StatePtr->FlsJobType[BANK1] = FLS_NONE;
	mov	d15,#0
.L1258:
	st.b	[a15]43,d15
.L1259:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   434  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   435      /* Initialize Job Status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   436      StatePtr->JobStarted.Write = 0U;
	ld.bu	d15,[a15]41
.L1260:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]41,d15
.L1261:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   437      StatePtr->JobStarted.Erase = 0U;
	ld.bu	d15,[a15]41
.L1262:
	insert	d15,d15,#0,#2,#1
	st.b	[a15]41,d15
.L1263:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   438      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   439      /* Assign default mode */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   440      StatePtr->FlsMode = Fls_lSetDefaultMode();
	call	Fls_lSetDefaultMode
.L1264:
	st.w	[a15]36,d2
.L1265:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   441  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   442      /* Initialize OPER status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   443      StatePtr->FlsOper = 0U;
	mov	d15,#0
.L1266:
	st.b	[a15]44,d15
.L1267:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   444  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   445      #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   446      /* Enable timeout handling */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   447      StatePtr->FlsTimeoutControl = 1U;
	mov	d15,#1
.L1268:
	st.b	[a15]46,d15
.L573:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   448      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   449  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   450      /* Check for OPER */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   451      DummyRetVal = Fls_lChkOperError_initmode();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   452  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   453      /* FlsOper will be updated by Fls_lChkOperError() */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   454      UNUSED_PARAMETER(DummyRetVal)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   455    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   456  }/* End of Function: Fls_Init */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   457  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   458  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   459  ** Traceability : [cover parentID=DS_AS_FLS250_FLS001_1,DS_AS_FLS218_221,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   460     DS_AS_FLS327,DS_AS_FLS328_FLS329,DS_AS_FLS330,DS_AS_FLS145,DS_AS_FLS209_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   461     DS_AS_FLS020_FLS021_FLS065_FLS023,DS_NAS_FLS_PR734_2,DS_NAS_FLS_PR1058_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   462     DS_AS403_FLS310_2_FLS311_1_FLS312_2]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   463                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   464  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   465  ** Syntax : Std_ReturnType Fls_17_Pmu_Erase( Fls_AddressType TargetAddress,   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   466  **                                    Fls_LengthType Length                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   467  **                                  )                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   468  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   469  ** Service ID:  1                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   470  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   471  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   472  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   473  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   474  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   475  ** Parameters (in) :  TargetAddress and Length                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   476  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   477  ** Parameters (out): E_OK: command has been accepted                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   478  **                   E_NOT_OK: command has not been accepted                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   479  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   480  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   481  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   482  ** Description : This API Erases Flash. It copies the given parameters to     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   483  ** driver internal variables, initiates the erase job, sets the driver status **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   484  ** to MEMIF_BUSY and job result to MEMIF_JOB_PENDING.                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   485  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   486  Std_ReturnType Fls_17_Pmu_Erase( Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   487                            Fls_LengthType Length
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   488                          )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   489  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   490    Fls_17_Pmu_StateType*   StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   491    volatile uint32  PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   492    uint8            JobType[2U];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   493    Std_ReturnType   ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   494  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   495    /* check for development error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   496    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   497    if(Fls_lCheckEraseDet(TargetAddress, Length) == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   498    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   499      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   500    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   501    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   502    /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   503    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   504  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   505    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   506      /* Check for OPER error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   507      if(Fls_lChkOperError() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   508      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   509        ReturnValue = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   510      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   511        /* Initialise Local variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   512        StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   513  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   514        /* By Default set the physical address to bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   515        PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   516      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   517        JobType[0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   518        JobType[1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   519      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   520        /* Check for the bank type */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   521        if((TargetAddress + Length) <= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   522        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   523          /* Set the job type of Bank0 to Flash erase */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   524          JobType[0] = FLS_ERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   525        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   526        else if(TargetAddress == FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   527        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   528          /* Set the job type of Bank1 to Flash erase */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   529          JobType[1] = FLS_ERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   530          /*Set the physical address to bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   531          PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   532        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   533        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   534        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   535          /* Set the job type of both the Bank's to Flash erase */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   536          JobType[0] = FLS_ERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   537          JobType[1] = FLS_ERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   538        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   539       
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   540        #if(FLS_AC_LOAD_ON_JOB_START == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   541        Fls_lLoadAccessCode(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   542        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   543         
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   544        /* Set the flash job result to job pending */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   545        StatePtr->FlsJobResult = MEMIF_JOB_PENDING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   546         
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   547        /* Update the new job on affected banks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   548        /* The Bit OR operation is used as either s->FlsJobType[x] or */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   549        /* NewJobType[x] must be FLS_NONE else BUSY DET would have occured*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   550        StatePtr->FlsJobType[0] |= JobType[0];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   551        StatePtr->FlsJobType[1] |= JobType[1];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   552      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   553        #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   554        if (StatePtr->FlsTimeoutControl != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   555        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   556          /* Update Timeout count for erase */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   557          StatePtr->FlsEraseTimeoutCycleCount = 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   558            (uint32)(FLS_17_PMU_ERASE_TIME / Fls_ConfigPtr->FlsCallCycle);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   559          if((FLS_17_PMU_ERASE_TIME % Fls_ConfigPtr->FlsCallCycle) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   560          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   561            StatePtr->FlsEraseTimeoutCycleCount++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   562          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   563          /* for erasing 2 sectors the count has to be doubled */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   564          if((JobType[0] == FLS_ERASE) && (JobType[1] == FLS_ERASE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   565          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   566            StatePtr->FlsEraseTimeoutCycleCount *= 2U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   567          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   568        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   569        #endif /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   570  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   571        /* Check for hardware status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   572        if(Fls_lHWBusyCheck() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   573        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   574          /* Indicate that the ERASE Job has been started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   575          StatePtr->JobStarted.Erase = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   576      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   577          /* FLS_RAM_EMULATION_TEST */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   578          #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   579          #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   580          if(FlsEmulation_EraseSyncError() != 0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   581          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   582            (void) FlsEmulation_Erase(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   583          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   584          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   585          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   586          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   587          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   588            /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   589            Fls_lSchMEnter_Erase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   590            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   591            /* Execute the ERASE COMMAND CYCLES */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   592            Fls_CallEraseCommand(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   593            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   594            /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   595            Fls_lSchMExit_Erase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   596          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   597      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   598          /* Check for Sequence error,Protection error  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   599          if(Fls_lChkSeqProtErrors() != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   600          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   601            ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   602    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   603            /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   604            Fls_lDemReportError_Erase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   605     
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   606            Fls_lErrorHandler(FLS_ERASE);    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   607          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   608          /* Check for command sequence Timeout */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   609          else if (StatePtr->FlsTimeoutErr == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   610          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   611            ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   612            /* As per AI00157728 - timeout error need not be reported to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   613            Fls_lErrorHandler(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   614          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   615          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   616          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   617            /* dummy else */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   618          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   619        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   620      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   621      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   622      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   623        /* Job cannot be started because of OPER error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   624        ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   625      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   626    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   627  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   628    return(ReturnValue);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   629  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   630  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   631  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   632  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   633  ** Traceability : [cover parentID=DS_AS_FLS223,DS_AS_FLS226,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   634  DS_AS_FLS251_FLS001_2, DS_AS_FLS331_FLS332_FLS333,DS_AS_FLS334,DS_AS_FLS146,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   635  DS_AS_FLS026_FLS027_FLS030_FLS066_FLS157,DS_AS_FLS209_2,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   636  DS_NAS_FLS_PR734_3,DS_NAS_FLS_PR1058_2,DS_NAS_FLS_PR1068_1,DS_NAS_FLS_PR1068_2,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   637  DS_AS403_FLS310_3_FLS311_2_FLS312_3]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   638                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   639  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   640  ** Syntax : Std_ReturnType Fls_17_Pmu_Write( Fls_AddressType TargetAddress,   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   641  **                                    const uint8 *SourceAddressPtr,          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   642  **                                    Fls_LengthType Length                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   643  **                                  )                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   644  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   645  ** Service ID:  2                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   646  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   647  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   648  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   649  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   650  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   651  ** Parameters (in) :SourceAddressPtr,TargetAddress and Length                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   652  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   653  ** Parameters (out): E_OK: command has been accepted                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   654  **                   E_NOT_OK: command has not been accepted                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   655  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   656  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   657  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   658  ** Description : Writing to given flash address.                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   659  ** Service for writing one or more flash pages. This service copies the given **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   660  ** parameters to driver internal variables, initiate a Write job, set driver  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   661  ** status to MEMIF_BUSY and job result to MEMIF_JOB_PENDING.                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   662  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   663  Std_ReturnType Fls_17_Pmu_Write( Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   664                            const uint8 *SourceAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   665                            Fls_LengthType Length
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   666                          )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   667  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   668    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   669    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   670    uint32          *PageStartAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   671    Std_ReturnType  RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   672    uint8           WriteMode;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   673    uint8           JobType[2];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   674  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   675    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   676  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   677    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   678    if(Fls_lCheckWriteDet(TargetAddress,SourceAddressPtr,Length) == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   679    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   680      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   681    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   682    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   683    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   684    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   685      /* Initialise Local variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   686      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   687      JobType[0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   688      JobType[1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   689  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   690      /* PVER check for IFX FEE, clear FlsPver */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   691      #if(FLS_VER_ERROR_CHECK == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   692      #if(FLS_IFX_FEE_USED == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   693      StatePtr->FlsPver = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   694      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   695      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   696  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   697      /* Check for whether write operation is only for Data Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   698      if((TargetAddress + Length) <= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   699      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   700        /*Assign jobtype of Data Bank0 to write */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   701        JobType[0] = FLS_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   702    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   703        /* Determine the page start address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   704        /*IFX_MISRA_RULE_11_01_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   705        /*IFX_MISRA_RULE_11_03_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   706        PageStartAddressPtr = (uint32*)(FLS_BASE_ADDRESS + TargetAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   707    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   708        /* Setting the PhysicalAddress to DataBank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   709        PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   710      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   711      /* Check for whether write operation is only for Data Bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   712      else if((TargetAddress) >= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   713      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   714        /*Assign jobtype of Data Bank1 to write */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   715        JobType[BANK1] = FLS_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   716        /* Setting the PageStartAddress to DataBank1 PageAddress */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   717        /*IFX_MISRA_RULE_11_01_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   718        /*IFX_MISRA_RULE_11_03_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   719        PageStartAddressPtr = (uint32*)( FLS_BASE_ADDRESS +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   720                                     (TargetAddress - FLS_SECTOR_SIZE) +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   721                                     FLS_OFFSET );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   722    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   723        /* Setting the PhysicalAddress to DataBank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   724        PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   725      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   726      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   727      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   728        /* Assign jobtype of both the banks to write */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   729        JobType[BANK0] = FLS_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   730        JobType[BANK1] = FLS_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   731    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   732        /* Determine the page start address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   733        /*IFX_MISRA_RULE_11_01_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   734        /*IFX_MISRA_RULE_11_03_STATUS=TargetAddress is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   735        PageStartAddressPtr = (uint32*)(FLS_BASE_ADDRESS + TargetAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   736    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   737        /* Setting the PhysicalAddress to DataBank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   738        PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   739      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   740    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   741    /************************* DET **********************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   742      /* Check for the BUSY DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   743      #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   744      /*If DET occurred then return without executing the routine.*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   745      if(Fls_lBusyDET_Write(StatePtr) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   746      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   747        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   748      } 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   749      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   750      #endif /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   751    /***************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   752      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   753        /* Check OPER error status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   754        if(Fls_lChkOperError() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   755        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   756          #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   757          Fls_lLoadAccessCode(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   758          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   759        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   760          /* 1. Set the flash job result to job pending */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   761          StatePtr->FlsJobResult = MEMIF_JOB_PENDING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   762        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   763          /* By Default Setting the PageStartAddress to DataBank0 PageAddress */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   764          /*IFX_MISRA_RULE_11_01_STATUS=Pointer to Flash location is stored in 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   765            global uint32 variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   766          /*IFX_MISRA_RULE_11_03_STATUS=Pointer to Flash location is stored in 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   767            global uint32 variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   768          StatePtr->FlsWriteAddress = (uint32)PageStartAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   769        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   770          /* Assigning Length to global variable FlsWriteLength*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   771          StatePtr->FlsWriteLength = Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   772        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   773          /* Assigning SourceAddressPtr to Global variable FlsWriteBufferPtr */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   774          StatePtr->FlsWriteBufferPtr = SourceAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   775        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   776          /* 2. Update the new job on affected banks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   777          /* The Bit OR operation is used as either s->FlsJobType[x] */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   778          /*  or NewJobType[x] must be FLS_NONE (0) else BUSY DET would have 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   779              occured */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   780          StatePtr->FlsJobType[0] |= JobType[0];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   781          StatePtr->FlsJobType[1] |= JobType[1];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   782      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   783          #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   784          if (StatePtr->FlsTimeoutControl != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   785          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   786            Fls_lCalculateWriteTimeoutCount();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   787          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   788          #endif /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   789  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   790          if(Fls_lHWBusyCheck() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   791          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   792            #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   793            #if (FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   794            if(Fls_lPageEraseCheck(PageStartAddressPtr,Length,FLS_SID_WRITE) == 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   795                                                                   E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   796            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   797              Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   798              RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   799            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   800            else  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   801            #endif /*FLS_IFX_FEE_USED*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   802            #endif /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   803            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   804              /* Indicate that the WRITE Job has started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   805              StatePtr->JobStarted.Write = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   806              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   807              /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   808              Fls_lSchMEnter_Write(); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   809              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   810              /* Execute the Write command sequence */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   811              WriteMode = Fls_lGetWriteMode();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   812              Fls_CallWriteCommand(PhysicalAddress,StatePtr,WriteMode);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   813              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   814              /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   815              Fls_lSchMExit_Write(); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   816              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   817              #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   818              #if  (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   819              (void) FlsEmulation_Write(StatePtr->FlsWriteAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   820                                 StatePtr->FlsWriteBufferPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   821              #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   822              #endif /* FLS_RAM_EMULATION_TEST */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   823              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   824              /* Check for Sequence error,Protection error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   825              if(Fls_lChkSeqProtErrors() != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   826              {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   827               /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   828                Fls_lDemReportError_Write();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   829                /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   830                Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   831                RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   832              }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   833              /* Check for command cycle Timeout */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   834              else if (StatePtr->FlsTimeoutErr == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   835              {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   836              /* As per AI00157728 - timeout error need not be reported to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   837                /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   838                Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   839                RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   840              } 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   841              else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   842              {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   843                /* dummy else */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   844              }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   845            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   846          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   847        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   848        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   849        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   850          RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   851        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   852      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   853    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   854    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   855  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   856  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   857  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   858  #if (FLS_COMPARE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   859  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   860  ** Traceability : [cover parentID=DS_AS_FLS257,DS_AS_FLS241,DS_AS_FLS244,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   861  DS_AS_FLS150_FLS151_FLS152_FLS153_FLS273,DS_NAS_FLS_PR734_4,DS_AS_FLS209_3,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   862  DS_AS403_FLS341_FLS342_FLS343,DS_AS403_FLS344,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   863  DS_AS403_FLS310_4_FLS311_3_FLS312_4]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   864                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   865  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   866  ** Syntax : Std_ReturnType Fls_17_Pmu_Compare( Fls_AddressType SourceAddress, **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   867  **                                      const uint8 *TargetAddressPtr,        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   868  **                                      Fls_LengthType Length                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   869  **                                    );                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   870  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   871  ** Service ID:  8                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   872  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   873  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   874  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   875  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   876  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   877  ** Parameters (in) :SourceAddressPtr,TargetAddress and Length                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   878  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   879  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   880  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   881  ** Return value    :  E_OK: command has been accepted                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   882  **                    E_NOT_OK: command has not been accepted                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   883  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   884  ** Description : Service for comparing the contents of an area of flash memory**
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   885  ** with that of an application data buffer. This service shall copy the given **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   886  ** parameters to driver internal variables, initiate a compare job, set the   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   887  ** driver status to MEMIF_BUSY, set the job result to MEMIF_JOB_PENDING       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   888  ** and return with E_OK.                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   889  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   890  Std_ReturnType Fls_17_Pmu_Compare( Fls_AddressType SourceAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   891                              const uint8 *TargetAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   892                              Fls_LengthType Length
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   893                             )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   894  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   895    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   896    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   897    uint8           JobType[2];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   898    Std_ReturnType  ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   899    /* Initialise Local variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   900  /****************************** DET *******************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   901    #if( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   902    /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   903    FLS015: API  called before initialization
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   904    */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   905    if(Fls_lUninitDET(FLS_SID_COMPARE) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   906    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   907      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   908    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   909  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   910    /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   911    FLS026: Checking whether given SourceAddress is valid or not
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   912    */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   913    else if( SourceAddress >= FLS_TOTAL_SIZE )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   914    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   915      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   916                       FLS_SID_COMPARE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   917                       FLS_E_PARAM_ADDRESS
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   918                     );/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   919  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   920      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   921    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   922  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   923    /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   924    FLS004: Check for Pointer to an application buffer
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   925    */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   926    else if(TargetAddressPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   927    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   928      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   929                     FLS_SID_COMPARE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   930                     FLS_E_PARAM_DATA
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   931                   );/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   932  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   933      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   934    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   935    /*
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   936    FLS027: Checking whether given Length is valid or not
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   937    */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   938    else if((Length == 0U) || ((SourceAddress + Length) > FLS_TOTAL_SIZE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   939    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   940      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   941                       FLS_SID_COMPARE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   942                       FLS_E_PARAM_LENGTH
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   943                     );/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   944  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   945      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   946    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   947    /* Checking whether FLS is Busy */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   948    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   949   #endif /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   950  /******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   951    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   952      /* Initialise Local variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   953      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   954      JobType[0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   955      JobType[1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   956      ReturnValue = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   957    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   958      /* Check for whether read operation is only for Data Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   959      if((SourceAddress + Length) <= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   960      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   961        /*Assign jobtype of Data Bank0 to Compare */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   962        JobType[0] = FLS_COMPARE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   963        PhysicalAddress = (uint32)(FLS_BASE_ADDRESS + SourceAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   964      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   965      /* Check for whether read operation is only for Data Bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   966      else if(SourceAddress >= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   967      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   968        /*Assign jobtype of Data Bank1 to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   969        JobType[1] = FLS_COMPARE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   970        PhysicalAddress = (uint32)( FLS_BASE_ADDRESS +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   971                                    (SourceAddress - FLS_SECTOR_SIZE) +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   972                                    FLS_OFFSET
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   973                                  );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   974      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   975      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   976      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   977        /*Assign jobtype of both the banks to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   978        JobType[0] = FLS_COMPARE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   979        JobType[1] = FLS_COMPARE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   980        PhysicalAddress = (uint32)(FLS_BASE_ADDRESS + SourceAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   981    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   982      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   983    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   984    /************************* DET *******************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   985    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   986      /* Check for the BUSY DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   987      #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   988      /*If DET occurred then return without executing the routine.*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   989      if(Fls_lBusyDET_Compare(StatePtr) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   990      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   991        ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   992      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   993      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   994      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   995    /****************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   996      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   997        /* 1. Set the flash job result to job pending */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   998        StatePtr->FlsJobResult = MEMIF_JOB_PENDING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	   999      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1000        /*IFX_MISRA_RULE_11_05_STATUS=The Read Buffer is also used for Compare 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1001          as parallel READ and COMPARE operations are NOT supported. 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1002          Hence TargetAddressPtr is typecasted to uint8* and assigned to 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1003          FlsReadBufferPtr. It is ensured that the contents pointed by 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1004          TargetAddressPtr are not modified*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1005        StatePtr->FlsReadBufferPtr = (uint8 *)(void*)TargetAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1006      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1007        /* Assigning Length to Global variable FlsReadLength*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1008        StatePtr->FlsReadLength = Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1009      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1010        StatePtr->FlsReadAddress = PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1011      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1012        /*3. Update the new job on affected banks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1013        /* The Bit OR operation is used as either s->FlsJobType[x] */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1014        /*  or NewJobType[x] must be FLS_NONE (0) else 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1015           BUSY DET would have occured */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1016        StatePtr->FlsJobType[0] |= JobType[0];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1017        StatePtr->FlsJobType[1] |= JobType[1];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1018      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1019    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1020    return(ReturnValue);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1021  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1022  /* FLS_COMPARE_API == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1023  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1024  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1025  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1026  #if  (FLS_CANCEL_API  ==  STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1027  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1028  ** Traceability : [cover parentID=DS_AS_FLS252,DS_AS_FLS229,DS_AS_FLS230,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1029  DS_AS_FLS335,DS_AS_FLS336,DS_AS_FLS033,DS_AS_FLS147,DS_AS_FLS348,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1030  DS_NAS_FLS_PR734_6,DS_AS403_FLS356]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1031                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1032  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1033  ** Syntax : void Fls_17_Pmu_Cancel(Void)                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1034  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1035  ** Service ID:  3                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1036  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1037  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1038  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1039  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1040  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1041  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1042  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1043  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1044  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1045  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1046  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1047  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1048  ** Service for Canceling an ongoing flash job.                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1049  ** Read and Compare jobs will be cancelled immediately. Write and Erase jobs  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1050  ** will be cancelled in driver immediately but hardware might still be busy   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1051  ** until the ongoing operation is completed for the already issued commands   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1052  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1053  void Fls_17_Pmu_Cancel(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1054  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1055    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1056    uint8* ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1057    boolean JobCanceled;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1058  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1059    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1060    /*FLS015: API called before initialization */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1061    if (Fls_lUninitDET(FLS_SID_CANCEL) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1062    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1063    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1064      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1065      ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1066      JobCanceled = (boolean)FALSE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1067    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1068      /* Cancel WRITE Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1069      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1070        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1071        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1072      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1073        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1074        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1075      if((FLS_WRITE == ArrPtr[0U]) || (FLS_WRITE == ArrPtr[1U]))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1076      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1077        /* Set the JobType to NONE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1078           This shall be done before calling Fls_lUnLoadAccessCode() */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1079        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1080          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1081          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1082        ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1083        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1084          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1085          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1086        ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1087  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1088        #if (FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1089        Fls_lUnLoadAccessCode(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1090        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1091  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1092        StatePtr->FlsJobResult = MEMIF_JOB_CANCELED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1093  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1094        JobCanceled = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1095      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1096      /* Cancel ERASE Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1097      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1098        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1099        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1100      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1101        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1102        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1103      else if((FLS_ERASE == ArrPtr[0U]) || (FLS_ERASE == ArrPtr[1U]))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1104      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1105        /* Set the JobType to NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1106           This shall be done before calling Fls_lUnLoadAccessCode() */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1107        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1108          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1109          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1110        ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1111        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1112          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1113          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1114        ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1115  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1116        #if (FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1117        Fls_lUnLoadAccessCode(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1118        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1119  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1120        StatePtr->FlsJobResult = MEMIF_JOB_CANCELED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1121  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1122        JobCanceled = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1123      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1124      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1125        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1126        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1127      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1128        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1129        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1130      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1131        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1132        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1133      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1134        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1135        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1136      else if((FLS_READ == ArrPtr[0U])    || (FLS_READ == ArrPtr[1U])  ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1137              (FLS_COMPARE == ArrPtr[0U]) || (FLS_COMPARE == ArrPtr[1U]))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1138      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1139        /* Cancel READ / COMPARE Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1140        /* Set the JobType to NONE */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1141        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1142        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1143        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1144        ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1145        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1146          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1147          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1148        ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1149  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1150        StatePtr->FlsJobResult = MEMIF_JOB_CANCELED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1151  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1152        JobCanceled = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1153      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1154      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1155      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1156        /* Set the JobType to NONE */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1157        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1158          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1159          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1160        ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1161        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1162          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1163          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1164        ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1165      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1166    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1167      /* Reset JobStartStatus */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1168      StatePtr->JobStarted.Write = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1169      StatePtr->JobStarted.Erase = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1170    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1171      StatePtr->NotifCaller = FLS_CANCEL_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1172    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1173      if((JobCanceled == (boolean)TRUE) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1174         (Fls_ConfigPtr->FlsJobErrorNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1175        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1176      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1177        /* FlsJobErrorNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1178        (Fls_ConfigPtr->FlsJobErrorNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1179      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1180    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1181      StatePtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1182    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1183  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1184  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1185  #endif /* #if (FLS_CANCEL_API == STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1186  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1187  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1188  ** Traceability : [cover parentID=DS_NAS_FLS_PR1084_PR123_7]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1189                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1190  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1191  ** Syntax : void Fls_17_Pmu_CancelNonEraseJobs(void)                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1192  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1193  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1194  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1195  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1196  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1197  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1198  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1199  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1200  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1201  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1202  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1203  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1204  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1205  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1206  ** Service for Canceling an ongoing flash jobs except the erase job.          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1207  ** Read and Compare jobs will be cancelled immediately. Write job             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1208  ** will be cancelled in driver immediately but hardware might still be busy   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1209  ** until the ongoing operation is completed for the already issued commands   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1210  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1211  void Fls_17_Pmu_CancelNonEraseJobs(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1212  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1213    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1214    uint8* ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1215    boolean JobCanceled;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1216  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1217    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1218    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1219    JobCanceled = (boolean)FALSE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1220  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1221    /* Cancel non-erase job on Bank 0 & 1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1222  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1223    /* Cancel WRITE Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1224    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1225      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1226      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1227    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1228      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1229      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1230    if((FLS_WRITE == ArrPtr[0U]) || (FLS_WRITE == ArrPtr[1U]))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1231    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1232      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1233        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1234        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1235      ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1236      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1237        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1238        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1239      ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1240      #if (FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1241      Fls_lUnLoadAccessCode(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1242      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1243  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1244      StatePtr->FlsJobResult = MEMIF_JOB_CANCELED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1245  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1246      JobCanceled = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1247  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1248      /* Reset JobStart Status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1249      StatePtr->JobStarted.Write = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1250  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1251    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1252    /* Cancel READ / COMPARE Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1253    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1254      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1255      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1256    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1257      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1258      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1259    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1260      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1261      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1262    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1263      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1264      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1265    else if((FLS_READ == ArrPtr[0U])    || (FLS_READ == ArrPtr[1U]) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1266            (FLS_COMPARE == ArrPtr[0U]) || (FLS_COMPARE == ArrPtr[1U]))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1267    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1268        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1269      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1270        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1271        contents*/  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1272      ArrPtr[0U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1273      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1274        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1275        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1276      ArrPtr[1U] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1277  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1278      StatePtr->FlsJobResult = MEMIF_JOB_CANCELED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1279  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1280      JobCanceled = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1281    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1282    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1283    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1284      /* Reset JobType of Non-Erase Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1285      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1286        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1287        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1288      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1289        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1290        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1291      ArrPtr[0] = ((ArrPtr[0] == FLS_ERASE) ? FLS_ERASE : FLS_NONE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1292      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1293        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1294        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1295      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1296        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1297        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1298      ArrPtr[1] = ((ArrPtr[1] == FLS_ERASE) ? FLS_ERASE : FLS_NONE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1299    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1300  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1301    /* Set the NotifCaller to Cancel Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1302    Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_CANCEL_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1303  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1304    if((JobCanceled == (boolean)TRUE) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1305       (Fls_ConfigPtr->FlsJobErrorNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1306      )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1307    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1308      /* FlsJobErrorNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1309      (Fls_ConfigPtr->FlsJobErrorNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1310    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1311    Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1312  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1313  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1314  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1315  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1316  ** Traceability : [cover parentID=DS_AS_FLS258,DS_AS_FLS156,DS_AS_FLS155,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1317  DS_NAS_FLS_PR734_7]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1318                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1319  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1320  ** Syntax : void Fls_17_Pmu_SetMode(MemIf_ModeType Mode)                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1321  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1322  ** Service ID:  9                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1323  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1324  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1325  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1326  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1327  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1328  ** Parameters (in) : Mode MEMIF_MODE_SLOW:                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1329  **                        Slow read access                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1330  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1331  **                        MEMIF_MODE_FAST:                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1332  **                        Fast read access                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1333  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1334  ** Parameters (out): : None                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1335  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1336  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1337  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1338  ** Description : This API sets the Flash driver's operation mode.             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1339  **               FAST or SLOW mode impacts only Read/Compare operations.      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1340  **               Based on the currently active mode, the number of bytes to be**
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1341  **               read from Flash in each call of Fls_17_Pmu_MainFunction is   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1342  **               taken from the configuration                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1343  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1344  #if  (FLS_SET_MODE_API  ==  STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1345  void Fls_17_Pmu_SetMode(MemIf_ModeType Mode)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1346  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1347    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1348    uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1349    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1350    ArrPtr = Fls_ConfigPtr->FlsStateVarPtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1351  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1352    /* Check if the driver is BUSY */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1353    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1354      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1355      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1356    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1357      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1358      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1359    if( (ArrPtr[0] != FLS_NONE) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1360        (ArrPtr[1] != FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1361      )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1362    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1363      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1364                               FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1365                               FLS_SID_SETMODE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1366                               FLS_E_BUSY);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1367    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1368    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1369    #endif 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1370    {  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1371      Fls_ConfigPtr->FlsStateVarPtr->FlsMode = Mode;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1372    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1373  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1374  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1375  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1376  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1377  ** Traceability : [cover parentID=DS_AS_FLS269,DS_AS_FLS255,DS_AS_FLS038,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1378  DS_AS_FLS037_FLS212,DS_AS_FLS040,DS_AS_FLS345,DS_AS_FLS346,DS_AS_FLS039,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1379  DS_AS_FLS117,DS_AS_FLS272_FLS359_FLS360,DS_AS403_FLS361,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1380  DS_AS_FLS196,DS_AS_FLS220_FLS225_FLS238_FLS243,DS_NAS_FLS_PR734_8]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1381                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1382  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1383  ** Syntax : void Fls_17_Pmu_MainFunction(void)                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1384  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1385  ** Service ID:  6                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1386  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1387  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1388  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1389  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1390  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1391  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1392  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1393  ** Parameters (out): : None                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1394  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1395  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1396  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1397  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1398  ** This service shall perform the processing of the flash read,write          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1399  **         and erase jobs                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1400  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1401  void Fls_17_Pmu_MainFunction(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1402  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1403    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1404    uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1405  #if(FLS_USE_INTERRUPTS == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1406    uint32 FlashFsrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1407  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1408    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1409    uint8 ErrorUninitFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1410    uint8 ErrorTimeoutFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1411    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1412    /*FLS015: API  called before initialization */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1413    ErrorUninitFlag = Fls_lUninitDET(FLS_SID_MAIN);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1414    if (ErrorUninitFlag == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1415    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1416      ErrorTimeoutFlag = Fls_lTimeOutDET(FLS_SID_MAIN);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1417      if (ErrorTimeoutFlag == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1418    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1419      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1420        StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1421        ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1422  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1423        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1424          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1425          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1426        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1427          FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1428          contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1429        if( (ArrPtr[BANK0] != FLS_NONE) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1430            (ArrPtr[BANK1] != FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1431          )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1432        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1433        #if(FLS_USE_INTERRUPTS == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1434   /******************************** ERASE *************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1435               /* Read the FSR.SPND bit of status register */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1436           FlashFsrStatus = (uint32)(((unsigned_int)FLASH0_FSR.U & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1437                                        FLS_FSR_SPND_MASK) >> \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1438                                                  FLS_FSR_SPND_BITPOS);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1439          /* Check for erase operation is pending in either of the bank  and 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1440               Flash is not in suspended state */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1441          if((Fls_lHWBusyCheck() == 0U) && (FlashFsrStatus == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1442          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1443            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1444              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1445              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1446            if(ArrPtr[BANK0] == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1447            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1448              /* Fls_Main_Erase operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1449              Fls_lMainErase((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1450            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1451            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1452              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1453              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1454            else if(ArrPtr[BANK1] == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1455            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1456              /* Fls_Main_Erase operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1457              Fls_lMainErase((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1458            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1459            else{/* To avoid MISRA warning */}
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1460          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1461   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1462   /******************************** WRITE ************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1463          /* Check for write operation is pending in either of the bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1464          if( Fls_lHWBusyCheck() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1465          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1466            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1467              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1468              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1469            if(ArrPtr[BANK0] == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1470            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1471              /* Fls_Main_Write operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1472              Fls_lMainWrite((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1473            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1474            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1475              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1476              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1477            else if(ArrPtr[BANK1] == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1478            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1479              /* Fls_Main_Write operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1480              Fls_lMainWrite((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1481            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1482            else{/* To avoid MISRA warning */}
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1483          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1484   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1485        /* FLS_USE_INTERRUPTS == STD_OFF */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1486        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1487   /******************************** READ **************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1488          /* Check for read operation is pending in either of the bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1489          if( Fls_lHWBusyCheck() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1490          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1491            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1492              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1493              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1494            if(ArrPtr[BANK0] == FLS_READ)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1495            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1496              /* Fls_Main_Read operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1497              Fls_lMainRead((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1498            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1499            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1500              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1501              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1502            else if(ArrPtr[BANK1] == FLS_READ)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1503            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1504              /* Fls_Main_Read operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1505              Fls_lMainRead((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1506            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1507            else{/* To avoid MISRA warning */}            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1508          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1509   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1510   /****************************** COMPARE ************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1511          /* Check for Compare operation is pending in bank 0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1512          if( Fls_lHWBusyCheck() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1513          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1514            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1515              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1516              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1517            if(ArrPtr[BANK0] == FLS_COMPARE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1518            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1519              /* Fls_Main_Compare operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1520              Fls_lMainCompare((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1521            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1522            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1523              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1524              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1525            else if(ArrPtr[BANK1] == FLS_COMPARE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1526            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1527              /* Fls_Main_Compare operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1528              Fls_lMainCompare((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1529            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1530            else{/* To avoid MISRA warning */}
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1531          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1532        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1533      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1534    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1535    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1536    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1537  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1538  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1539  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1540  ** Traceability : [cover parentID=DS_AS_FLS236,DS_AS_FLS239,DS_AS_FLS209_4,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1541  DS_AS_FLS097_FLS098_FLS099_FLS100_FLS158,DS_NAS_FLS_PR734_5,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1542  DS_AS_FLS256_FLS001_3,DS_AS403_FLS337_FLS338_FLS339,DS_AS403_FLS340,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1543  DS_AS403_FLS310_5_FLS311_4_FLS312_5]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1544                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1545  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1546  ** Syntax : Std_ReturnType Fls_17_Pmu_Read( Fls_AddressType SourceAddress,    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1547  **                                   uint8 *TargetAddressPtr,                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1548  **                                   Fls_LengthType Length                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1549  **                                 );                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1550  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1551  ** Service ID:  7                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1552  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1553  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1554  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1555  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1556  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1557  ** Parameters (in) : SourceAddress,TargetAddressPtr and Length                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1558  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1559  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1560  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1561  ** Return value    :  E_OK: command has been accepted                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1562  **                    E_NOT_OK: command has not been accepted                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1563  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1564  ** Description : Service for reading from flash memory. This service copies   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1565  ** the given parameters to driver internal variables, set driver status to    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1566  ** MEMIF_BUSY and job result to MEMIF_JOB_PENDING.                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1567  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1568  Std_ReturnType Fls_17_Pmu_Read(Fls_AddressType SourceAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1569                                 uint8 *TargetAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1570                                 Fls_LengthType Length
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1571                                )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1572  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1573    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1574    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1575    Std_ReturnType ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1576    uint8 JobType[2];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1577  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1578  /**************************** DET *********************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1579    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1580    /* FLS015: API  called before initialization */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1581    if(Fls_lUninitDET(FLS_SID_READ) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1582    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1583      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1584    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1585   /* FLS097: Checking whether given SourceAddress is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1586    else if(SourceAddress >= (FLS_TOTAL_SIZE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1587    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1588      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1589                       FLS_17_PMU_INSTANCE_ID,FLS_SID_READ,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1590                       FLS_E_PARAM_ADDRESS);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1591  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1592      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1593    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1594    /*Check for Pointer to an application buffer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1595    else if(TargetAddressPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1596    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1597      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1598                      FLS_17_PMU_INSTANCE_ID,FLS_SID_READ,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1599                       FLS_E_PARAM_DATA);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1600  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1601      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1602    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1603    /* FLS098: Checking whether given Length is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1604    else if((Length == 0U) || ((SourceAddress+Length) > (FLS_TOTAL_SIZE)))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1605    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1606      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1607                       FLS_17_PMU_INSTANCE_ID, FLS_SID_READ,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1608                       FLS_E_PARAM_LENGTH);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1609  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1610      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1611    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1612    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1613    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1614  /*****************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1615    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1616      /* Initialise Local variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1617      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1618      ReturnValue = (Std_ReturnType)E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1619    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1620      JobType[0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1621      JobType[1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1622    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1623      /* Check for whether read operation is only for Data Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1624      if((SourceAddress + Length) <= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1625      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1626        /*Assign jobtype of Data Bank0 to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1627        JobType[BANK0] = FLS_READ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1628        PhysicalAddress = (uint32)(FLS_BASE_ADDRESS + SourceAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1629    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1630      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1631      /* Check for whether read operation is only for Data Bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1632      else if(SourceAddress >= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1633      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1634         /*Assign jobtype of Data Bank1 to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1635        JobType[BANK1] = FLS_READ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1636        PhysicalAddress = (uint32)( FLS_BASE_ADDRESS +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1637                                    (SourceAddress - FLS_SECTOR_SIZE) +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1638                                    FLS_OFFSET
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1639                                  );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1640      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1641      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1642      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1643        /*Assign jobtype of both the banks to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1644        JobType[BANK0] = FLS_READ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1645        JobType[BANK1] = FLS_READ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1646        PhysicalAddress = (uint32)(FLS_BASE_ADDRESS + SourceAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1647      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1648    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1649    /*************************** DET ********************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1650    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1651      /* Check for the BUSY DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1652      #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1653      /*If DET occurred then return without executing the routine.*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1654      if(Fls_lBusyDET_Read(StatePtr) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1655      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1656        ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1657      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1658      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1659      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1660    /****************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1661      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1662        /* 2. Set the flash job result to job pending */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1663        StatePtr->FlsJobResult = MEMIF_JOB_PENDING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1664      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1665        /* Assigning TargetAddressPtr to Global variable FlsReadBufferPtr */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1666        StatePtr->FlsReadBufferPtr = TargetAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1667      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1668        /* Assigning Length to Global variable FlsReadLength*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1669        StatePtr->FlsReadLength = Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1670      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1671        StatePtr->FlsReadAddress = PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1672      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1673        /*3. Update the new job on affected banks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1674        /* The Bit OR operation is used as either s->FlsJobType[x] */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1675        /*  or NewJobType[x] must be FLS_NONE (0) 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1676            else BUSY DET would have occured */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1677        StatePtr->FlsJobType[0] |= JobType[0];
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1678        StatePtr->FlsJobType[1] |= JobType[1];    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1679      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1680    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1681    return(ReturnValue);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1682  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1683  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1684  /*********************** AUTOSAR SPECIFIC IMPLEMENTATION **********************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1685  #if (FLS_GET_STATUS_API  ==  STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1686  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1687  ** Traceability : [cover parentID=DS_AS_FLS253,DS_AS_FLS034,DS_NAS_FLS_PR734_11,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1688                                    DS_AS403_FLS357]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1689                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1690  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1691  ** Syntax : MemIf_StatusType Fls_17_Pmu_GetStatus(void)                       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1692  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1693  ** Service ID:  4                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1694  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1695  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1696  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1697  ** Reentrancy:  Re-entrant                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1698  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1699  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1700  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1701  ** Parameters (out): : None                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1702  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1703  ** Return value    :  MemIf_StatusType                                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1704  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1705  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1706  ** This service shall return the driver state synchronously                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1707  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1708  MemIf_StatusType Fls_17_Pmu_GetStatus(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1709  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1710    MemIf_StatusType ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1711    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1712  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1713    #if (FLS_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1714    if(Fls_ConfigPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1715    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1716    if(Fls_ConfigPtr->FlsStateVarPtr->DriverInitialised == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1717    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1718    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1719      ReturnValue = MEMIF_UNINIT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1720    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1721    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1722    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1723      JobTypePtr = Fls_ConfigPtr->FlsStateVarPtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1724  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1725      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1726        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1727        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1728      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1729        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1730        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1731      if((JobTypePtr[0] != FLS_NONE) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1732         (JobTypePtr[1] != FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1733        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1734      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1735        ReturnValue = MEMIF_BUSY;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1736      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1737      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1738      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1739        ReturnValue = MEMIF_IDLE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1740      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1741    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1742    /* FLS034: Service shall return driver state synchronously. */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1743    return(ReturnValue);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1744  } /* End of Function: Fls_GetStatus */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1745  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1746  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1747  #if (FLS_GET_STATUS_API  ==  STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1748  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1749  ** Traceability : [cover parentID=DS_NAS_FLS_PR1085_PR123_6]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1750                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1751  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1752  ** Syntax : MemIf_StatusType Fls_17_Pmu_GetBankStatus(uint32 BankNum)         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1753  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1754  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1755  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1756  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1757  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1758  ** Reentrancy:  Re-entrant                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1759  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1760  ** Parameters (in) :  BankNum                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1761  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1762  ** Parameters (out): : None                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1763  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1764  ** Return value    :  MemIf_StatusType                                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1765  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1766  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1767  **         This service shall return the driver state synchronously           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1768  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1769  MemIf_StatusType Fls_17_Pmu_GetBankStatus(uint32 BankNum)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1770  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1771    MemIf_StatusType ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1772    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1773  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1774    #if (FLS_PB_FIXEDADDR == OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1775    if(Fls_ConfigPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1776    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1777    if(Fls_ConfigPtr->FlsStateVarPtr->DriverInitialised == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1778    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1779    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1780      ReturnValue = MEMIF_UNINIT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1781    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1782    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1783    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1784      JobTypePtr = Fls_ConfigPtr->FlsStateVarPtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1785  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1786      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1787        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1788        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1789      if(JobTypePtr[BankNum] != FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1790      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1791        ReturnValue = MEMIF_BUSY;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1792      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1793      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1794      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1795        ReturnValue = MEMIF_IDLE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1796      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1797    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1798    /* FLS034: Service shall return driver state synchronously. */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1799    return(ReturnValue);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1800  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1801  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1802  /* FLS_GET_STATUS_API  ==  STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1803  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1804  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1805  #if  (FLS_GET_JOB_RESULT_API  ==  STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1806  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1807  ** Traceability : [cover parentID=DS_AS_FLS254,DS_AS_FLS035,DS_NAS_FLS_PR734_12,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1808  DS_AS_FLS036,DS_AS403_FLS358]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1809                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1810  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1811  ** Syntax : MemIf_JobResultType Fls_17_Pmu_GetJobResult(void)                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1812  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1813  ** Service ID:  5                                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1814  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1815  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1816  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1817  ** Reentrancy:  Re-entrant                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1818  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1819  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1820  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1821  ** Parameters (out): : None                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1822  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1823  ** Return value    :  MemIf_JobResultType                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1824  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1825  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1826  **         This service shall return the result of the last job synchronously **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1827  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1828  MemIf_JobResultType Fls_17_Pmu_GetJobResult(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1829  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1830    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1831    MemIf_JobResultType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1832  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1833    #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1834    /* FLS015: API  called before initialization */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1835    if (Fls_lUninitDET(FLS_SID_GETJOBRESULT) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1836    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1837       RetVal = MEMIF_JOB_FAILED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1838    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1839    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1840    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1841    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1842      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1843      RetVal = StatePtr->FlsJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1844    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1845  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1846    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1847  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1848  #endif/*FLS_GET_JOB_RESULT_API == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1849  #if ((FLS_VERIFY_ERASE_API  ==  STD_ON) || (FLS_IFX_FEE_USED  ==  STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1850  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1851  ** Traceability : [cover parentID=DS_NAS_FLS_PR1145_PR123_3,DS_AS403_FLS007_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1852                     DS_AS321_FLS007_1][/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1853  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1854  ** Syntax : Std_ReturnType Fls_17_Pmu_VerifyErase( uint32 BankNum,            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1855                                   uint32 * const UnerasedWordlineAddressPtr    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1856                                   uint8 * const UnerasedWordlineCountPtr       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1857  **                               );                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1858  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1859  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1860  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1861  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1862  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1863  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1864  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1865  ** Parameters (in) : BankNum                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1866  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1867  ** Parameters (out): UnerasedWordlineAddressPtr,UnerasedWordlineCountPtr      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1868  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1869  ** Return value    :  E_OK: Erase verification successful                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1870  **                    E_NOT_OK: HW busy or erase verification failed          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1871  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1872  ** Description : Service for verifying erase of a sector                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1873  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1874  Std_ReturnType Fls_17_Pmu_VerifyErase( uint32 BankNum,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1875                                     uint32 * UnerasedWordlineAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1876                                     uint8 * const UnerasedWordlineCountPtr)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1877  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1878    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1879    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1880    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1881    volatile uint32 *SrcPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1882    uint32 Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1883    uint32 UnerasableWLAddr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1884    uint8 FailCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1885    uint8 CompareFail;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1886    uint32 TempVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1887    uint32 TempVal1;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1888    uint32 TempVal2;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1889    uint32 TempVal3;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1890    uint32 TempVal4;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1891    Std_ReturnType RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1892    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1893    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1894  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1895    FailCount = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1896    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1897    if(BankNum == BANK0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1898    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1899      PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1900    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1901    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1902    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1903      PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1904    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1905     /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1906     /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1907    SrcPtr = (volatile uint32*)PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1908    /* Check if no operation ongoing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1909     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1910      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1911      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1912    if(JobTypePtr[BankNum] == FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1913    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1914      /* For verify erase testing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1915      #ifdef FLS_17_PMU_VERIFYERASE_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1916      #if (FLS_17_PMU_VERIFYERASE_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1917      RetVal = FlsEmulation_VerifyErase(PhysicalAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1918                                        UnerasedWordlineAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1919                                        UnerasedWordlineCountPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1920      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1921      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1922  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1923      /* Modify the GlobalVar JobType so that no new requests can be accepted on *
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1924       * the Bank till VerifyErase is finished */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1925      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1926         FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1927         contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1928      JobTypePtr[BankNum] = FLS_VERIFYERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1929      Length = FLS_SECTOR_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1930      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1931      do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1932      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1933        CompareFail = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1934        TempVal1 =(*SrcPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1935        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic on a pointer to 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1936         Flash location*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1937        TempVal2= *(SrcPtr + 1U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1938        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic on a pointer to 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1939         Flash location*/  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1940        TempVal3= *(SrcPtr + 2U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1941        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic on a pointer to 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1942         Flash location*/  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1943        TempVal4= *(SrcPtr + 3U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1944        /* COMPARE THE FLASH DATA WITH zero (first 16 Bytes of the Wordline)*/ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1945        TempVal = ((TempVal1) | (TempVal2) | (TempVal3) | (TempVal4)); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1946        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1947        if(TempVal !=0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1948        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1949          CompareFail = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1950        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1951        if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1952        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1953          CompareFail = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1954          /*Execute Clear Status command*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1955          Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1956          /*Erase verification fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1957            /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1958          Fls_lDemReportError_VerifyErase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1959           /* Call Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1960          Fls_lErrorHandler(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1961        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1962        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1963        if(CompareFail == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1964        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1965          FailCount++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1966          if(FailCount > FLS_WL_FAIL_COUNT)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1967          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1968             RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1969          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1970          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1971          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1972            /* Update the Unerasable WL address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1973            /*IFX_MISRA_RULE_11_01_STATUS=Pointer to Flash location is stored in 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1974            global uint32 variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1975          /*IFX_MISRA_RULE_11_03_STATUS=Pointer to Flash location is stored in 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1976            global uint32 variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1977            UnerasableWLAddr = (uint32)SrcPtr - PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1978                      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1979            if(PhysicalAddress == DFLASH_BANK1_PHYSICAL)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1980            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1981              UnerasableWLAddr += FLS_SECTOR_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1982            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1983            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1984            *UnerasedWordlineAddressPtr = UnerasableWLAddr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1985            /* increment SrcPtr to next wordline, divide by 4 for SrcPtr is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1986             uint32 ptr*/ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1987            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used on Flash
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1988            pointer to access Flash locations efficiently*/          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1989            SrcPtr += (FLS_WORDLINE_SIZE/FLS_WORD_SIZE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1990            Length -= FLS_WORDLINE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1991            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used on Flash
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1992            pointer to access Flash locations efficiently*/ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1993            UnerasedWordlineAddressPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1994          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1995        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1996        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1997        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1998          /* increment SrcPtr to next wordline, divide by 4 for SrcPtr is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  1999             uint32 ptr*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2000          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used on Flash
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2001            pointer to access Flash locations efficiently*/   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2002          SrcPtr += (FLS_WORDLINE_SIZE/FLS_WORD_SIZE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2003          Length -= FLS_WORDLINE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2004        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2005      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2006      }while((Length != 0U) && (FailCount <= FLS_WL_FAIL_COUNT) );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2007      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2008      *UnerasedWordlineCountPtr = FailCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2009  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2010      /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2011      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2012         FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2013         contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2014      JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2015    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2016    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2017    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2018      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2019    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2020  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2021    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2022  } 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2023  #endif/*#if ((FLS_VERIFY_ERASE_API==STD_ON)||(FLS_IFX_FEE_USED == STD_ON))*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2024  #if (FLS_IFX_FEE_USED == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2025  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2026  ** Traceability : [cover parentID=DS_NAS_FLS_PR734_10,DS_NAS_FLS_PR1147_PR123_1]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2027                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2028  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2029  ** Syntax : Std_ReturnType Fls_17_Pmu_ReadWordsSync( 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2030                                               Fls_AddressType SourceAddress,**
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2031  **                                           const uint32 *TargetAddressPtr,  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2032  **                                           uint32 Length                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2033  **                                         );                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2034  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2035  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2036  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2037  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2038  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2039  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2040  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2041  ** Parameters (in) : SourceAddress, TargetAddressPtr and Length               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2042  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2043  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2044  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2045  ** Return value    : E_OK: Read successful                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2046  **                   E_NOT_OK: if HW busy                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2047  **                   E_ECC_NOK: Return  if uncorrectable ECC error occured    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2048  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2049  ** Description : Service for reading word data from flash bank synchronously  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2050  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2051  Std_ReturnType Fls_17_Pmu_ReadWordsSync(Fls_AddressType SourceAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2052                                          const uint32 *TargetAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2053                                          uint32 Length)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2054  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2055    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2056    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2057    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2058    Std_ReturnType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2059    uint32 *SrcPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2060    uint32 *DestPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2061    uint32 BankNum;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2062  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2063    #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2064    #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2065    uint32 EmulationLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2066    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2067    /* Convert to byte read for emulation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2068    EmulationLength = Length << 2U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2069    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2070    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2071    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2072  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2073    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2074    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2075    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2076  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2077  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2078    if(SourceAddress >= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2079    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2080      PhysicalAddress = (uint32)( FLS_BASE_ADDRESS +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2081                                  (SourceAddress - FLS_SECTOR_SIZE) +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2082                                  FLS_OFFSET
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2083                                );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2084      BankNum = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2085    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2086    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2087    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2088      PhysicalAddress = (uint32)( FLS_BASE_ADDRESS + SourceAddress );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2089      BankNum = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2090    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2091  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2092    SrcPtr = (uint32*)PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2093    DestPtr = (uint32*)(void *)TargetAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2094    /* Check if no operation ongoing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2095    if(JobTypePtr[BankNum] == FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2096    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2097      /* Modify the GlobalVar JobType so that no new requests can be accepted on *
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2098       * the Bank till ReadSync is finished */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2099      JobTypePtr[BankNum] = FLS_READSYNC;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2100     
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2101     do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2102      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2103        *DestPtr = *SrcPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2104        /* Point to the next word */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2105        DestPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2106         /* Increment by one word */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2107        SrcPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2108        Length--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2109      }while(Length > 0U);  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2110         
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2111      #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2112      #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2113      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2114        Std_ReturnType EmulationRetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2115  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2116        FlsEmulation_ReadRequest.FlashAddress = PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2117        FlsEmulation_ReadRequest.Buffer = (uint8*)(void*)TargetAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2118        FlsEmulation_ReadRequest.Length = (uint32)EmulationLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2119  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2120        EmulationRetVal = FlsEmulation_Read(FlsEmulation_ReadRequest.FlashAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2121                                      FlsEmulation_ReadRequest.Buffer,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2122                                      FlsEmulation_ReadRequest.Length);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2123  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2124        if (EmulationRetVal == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2125        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2126          /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2127          JobTypePtr[BankNum] = FLS_NONE;   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2128          /* Report Dem */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2129          Fls_lDemReportError_Read();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2130  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2131          RetVal = EmulationRetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2132        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2133      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2134      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2135      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2136  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2137      /* Read the data */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2138  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2139      /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2140      JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2141  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2142      /* Check for uncorrectable bit error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2143      if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2144      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2145        /* FLS106: Read Job fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2146        /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2147        Fls_lDemReportError_Read();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2148       
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2149        /* Return E_ECC_NOK if uncorrectable ECC error occured */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2150        RetVal = E_ECC_NOK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2151      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2152    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2153    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2154    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2155      /* returns E_NOT_OK when FLS driver is busy */ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2156      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2157    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2158  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2159     /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2160    if( (StatePtr->FlsJobType[0] == FLS_NONE) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2161         (StatePtr->FlsJobType[1] == FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2162      )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2163    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2164      Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2165    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2166  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2167    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2168  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2169  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2170  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2171  ** Traceability : [cover parentID=DS_NAS_FLS_PR1146_PR123_2]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2172                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2173  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2174  ** Syntax : Std_ReturnType Fls_17_Pmu_CompareWordsSync(                       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2175                                               Fls_AddressType SourceAddress,   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2176  **                                           const uint32 *TargetAddressPtr,  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2177  **                                           uint32 Length);                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2178  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2179  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2180  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2181  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2182  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2183  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2184  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2185  ** Parameters (in) : SourceAddress, TargetAddressPtr and Length               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2186  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2187  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2188  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2189  ** Return value    : E_OK: Compare successful                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2190  **                   E_NOT_OK: HW busy or compare failed or ECC error         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2191  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2192  ** Description : Service for comparing data from flash bank synchronously     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2193  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2194  Std_ReturnType Fls_17_Pmu_CompareWordsSync(Fls_AddressType SourceAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2195                                             const uint32 *TargetAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2196                                             uint32 Length)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2197  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2198    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2199    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2200    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2201    Std_ReturnType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2202    uint32 *SrcPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2203    uint32 BankNum;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2204  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2205    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2206    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2207    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2208  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2209    if(SourceAddress >= FLS_SECTOR_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2210    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2211      PhysicalAddress = (uint32)( FLS_BASE_ADDRESS +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2212                                  (SourceAddress - FLS_SECTOR_SIZE) +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2213                                   FLS_OFFSET
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2214                                );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2215      BankNum = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2216    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2217    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2218    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2219      PhysicalAddress = (uint32)( FLS_BASE_ADDRESS + SourceAddress );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2220      BankNum = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2221    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2222  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2223    SrcPtr = (uint32*)PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2224    /* Check if no operation ongoing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2225    if( (JobTypePtr[BankNum] == FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2226          #if(FLS_VER_ERROR_CHECK == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2227          #if(FLS_IFX_FEE_USED == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2228          && (StatePtr->FlsPver == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2229          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2230          #endif        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2231       )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2232    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2233      /* Modify the GlobalVar JobType so that no new requests can be accepted on *
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2234       * the Bank till CompareSync is finished */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2235      JobTypePtr[BankNum] = FLS_COMPARESYNC;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2236  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2237      #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2238      #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2239      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2240        Std_ReturnType EmulationRetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2241  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2242        FlsEmulation_ReadRequest.FlashAddress = PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2243        FlsEmulation_ReadRequest.Buffer = (uint8*)(void*)TargetAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2244        FlsEmulation_ReadRequest.Length = (uint32)Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2245  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2246        EmulationRetVal = FlsEmulation_CompareSync(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2247                                      FlsEmulation_ReadRequest.FlashAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2248                                      FlsEmulation_ReadRequest.Buffer,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2249                                      FlsEmulation_ReadRequest.Length);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2250  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2251        if (EmulationRetVal == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2252        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2253          /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2254          JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2255          RetVal = EmulationRetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2256        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2257      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2258      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2259      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2260  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2261      do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2262      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2263        /* COMPARE THE FLASH DATA WITH THE BUFFER DATA (word Compare)*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2264        if( *TargetAddressPtr != *SrcPtr )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2265        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2266          RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2267          Length = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2268        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2269        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2270        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2271          TargetAddressPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2272          SrcPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2273          Length--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2274        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2275      }while(Length > 0U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2276  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2277      /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2278      JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2279    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2280      /* Check for uncorrectable bit error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2281      if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2282      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2283        /* Return E_NOT_OK */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2284        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2285      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2286    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2287    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2288    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2289      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2290    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2291  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2292    /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2293    if( (StatePtr->FlsJobType[0U] == FLS_NONE) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2294       (StatePtr->FlsJobType[1U] == FLS_NONE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2295    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2296      Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2297    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2298  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2299    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2300  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2301  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2302  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2303  ** Traceability : [cover parentID=DS_NAS_HE2_FLS_PR3046]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2304  ..................[cover parentID=DS_NAS_EP_FLS_PR3046]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2305  ..................[cover parentID=SAS_NAS_HE2_FLS_PR3046]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2306  ..................[cover parentID=SAS_NAS_EP_FLS_PR3046]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2307                    [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2308  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2309  ** Syntax : Std_ReturnType Fls_17_Pmu_VerifySectorErase( uint32 BankNum,      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2310  **                                 uint32 * const UnerasedWordlineAddressPtr  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2311  **                                 uint8 * const UnerasedWordlineCountPtr     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2312  **                               uint8 Sector);                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2313  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2314  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2315  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2316  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2317  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2318  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2319  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2320  ** Parameters (in) : BankNum,Sector                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2321  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2322  ** Parameters (out): UnerasedWordlineAddressPtr,UnerasedWordlineCountPtr      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2323  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2324  ** Return value    :  E_OK: Erase verification successful                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2325  **                    E_NOT_OK: HW busy or erase verification failed          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2326  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2327  ** Description : Service for verifying erase of a sector                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2328  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2329  Std_ReturnType Fls_17_Pmu_VerifySectorErase( uint32 BankNum,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2330                                     uint32 * UnerasedWordlineAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2331                                     uint8 * const UnerasedWordlineCountPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2332                                     uint8 Sector)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2333  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2334    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2335    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2336    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2337    volatile uint32 *SrcPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2338    uint32 Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2339    uint32 UnerasableWLAddr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2340    uint8 FailCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2341    uint8 CompareFail;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2342    uint32 TempVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2343    Std_ReturnType RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2344    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2345    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2346    FailCount = *UnerasedWordlineCountPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2347  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2348    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2349    if(BankNum == BANK0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2350    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2351      PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2352    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2353    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2354    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2355      PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2356    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2357  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2358    SrcPtr = (volatile uint32*)(PhysicalAddress + (FLS_SUBSECTOR_SIZE * Sector));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2359    /* Check if no operation ongoing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2360    if(JobTypePtr[BankNum] == FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2361    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2362      /* For verify erase testing */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2363      #ifdef FLS_17_PMU_VERIFYERASE_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2364      #if (FLS_17_PMU_VERIFYERASE_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2365      RetVal = FlsEmulation_VerifyErase(PhysicalAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2366                                        UnerasedWordlineAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2367                                        UnerasedWordlineCountPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2368      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2369      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2370  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2371      /* Modify the GlobalVar JobType so that no new requests can be accepted on *
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2372       * the Bank till VerifyErase is finished */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2373      JobTypePtr[BankNum] = FLS_VERIFYERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2374      Length = FLS_SUBSECTOR_SIZE;/*FLS_SECTOR_SIZE;*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2375      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2376      do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2377      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2378        CompareFail = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2379        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2380        /* COMPARE THE FLASH DATA WITH zero (first 16 Bytes of the Wordline)*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2381        TempVal = ((*SrcPtr) | *(SrcPtr + 1U) | *(SrcPtr + 2U)| *(SrcPtr + 3U));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2382        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2383        if(TempVal !=0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2384        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2385          CompareFail = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2386        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2387        if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2388        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2389          CompareFail = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2390          Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2391        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2392        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2393        if(CompareFail == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2394        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2395          FailCount++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2396          if(FailCount > FLS_WL_FAIL_COUNT)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2397          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2398             RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2399          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2400          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2401          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2402            /* Update the Unerasable WL address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2403            UnerasableWLAddr = (uint32)SrcPtr - PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2404                      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2405            if(PhysicalAddress == DFLASH_BANK1_PHYSICAL)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2406            {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2407              UnerasableWLAddr += FLS_SECTOR_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2408            }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2409            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2410            *UnerasedWordlineAddressPtr = UnerasableWLAddr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2411            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2412            /* increment SrcPtr to next wordline, divide by 4 for SrcPtr is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2413             uint32 ptr*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2414            SrcPtr += (FLS_WORDLINE_SIZE/FLS_WORD_SIZE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2415            Length -= FLS_WORDLINE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2416            UnerasedWordlineAddressPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2417          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2418        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2419        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2420        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2421          /* increment SrcPtr to next wordline, divide by 4 for SrcPtr is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2422             uint32 ptr*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2423          SrcPtr += (FLS_WORDLINE_SIZE/FLS_WORD_SIZE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2424          Length -= FLS_WORDLINE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2425        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2426      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2427      }while((Length != 0U) && (FailCount <= FLS_WL_FAIL_COUNT) );
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2428      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2429      *UnerasedWordlineCountPtr = FailCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2430      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2431      /* Restore the JobType with previous tasks */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2432      JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2433    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2434    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2435    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2436      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2437    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2438  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2439    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2440  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2441  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2442  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2443  ** Traceability : [cover parentID=DS_NAS_FLS_PR1148_PR123_8]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2444                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2445  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2446  ** Syntax : Fls_17_Pmu_Job_Type Fls_17_Pmu_GetNotifCaller(void)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2447  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2448  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2449  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2450  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2451  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2452  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2453  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2454  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2455  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2456  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2457  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2458  ** Return value    :  FLS Job that raised the notification                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2459  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2460  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2461  ** Ths function returns the FLS Job that raised the notification              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2462  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2463  Fls_17_Pmu_Job_Type Fls_17_Pmu_GetNotifCaller(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2464  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2465    return(Fls_ConfigPtr->FlsStateVarPtr->NotifCaller);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2466  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2467  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2468  #endif /* FLS_IFX_FEE_USED == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2469  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2470  #if (FLS_USE_ERASESUSPEND == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2471  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2472  ** Traceability : [cover parentID=DS_NAS_FLS_PR1149_PR123_4]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2473                    [cover parentID=DS_NAS_FLS_PR3158_1]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2474                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2475  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2476  ** Syntax : Std_ReturnType Fls_17_Pmu_SuspendErase(uint32 BankNum)            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2477  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2478  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2479  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2480  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2481  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2482  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2483  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2484  ** Parameters (in) :  BankNum - Sector on which erase is to be suspended      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2485  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2486  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2487  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2488  ** Return value    :  E_OK - Erase suspend successful                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2489  **                    E_NOT_OK - Erase suspend failed                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2490  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2491  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2492  ** Ths function suspends an ongoing erase of a sector.                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2493  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2494  Std_ReturnType Fls_17_Pmu_SuspendErase(uint32 BankNum)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2495  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2496    Std_ReturnType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2497    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2498    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2499    uint32 TimeOutCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2500    uint32 CheckSpndBit;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2501    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2502    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2503    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2504    CheckSpndBit = FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2505    /*Check if SPND of FSR is equal to 1U */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2506    if(((CheckSpndBit & FLS_FSR_SPND_MASK) >> FLS_FSR_SPND_BITPOS)==1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2507    {  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2508      RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2509      /* Set job status for the bank to None */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2510      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2511        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2512        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2513      JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2514      /* Reset JobStartStatus */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2515      StatePtr->JobStarted.Erase = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2516    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2517    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2518    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2519      #ifdef IFX_FLS_DEBUG03
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2520      if (TestFls_DebugMask03 != 1)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2521      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2522      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2523        /* Update SPND bit of MARD */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2524      FLS_SFR_RUNTIME_USER_MODE_MODIFY32(FLASH0_MARD.U,FLS_WRITE_ONE_CLEARMASK, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2525                                         FLS_MARD_SPND)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2526      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2527      TimeOutCount = FLS_ERASESUSPEND_TIMEOUT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2528      do 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2529      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2530        TimeOutCount-- ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2531      }while(((((FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2532                 FLS_FSR_SPND_MASK) >> FLS_FSR_SPND_BITPOS)) == 0U) && \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2533                                                            (TimeOutCount > 0U));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2534               
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2535    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2536      if ((boolean)TRUE == Fls_lSpndTimeout(TimeOutCount))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2537      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2538        /* Clear the SPNDERR bit by writing 1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2539        FLS_SFR_RUNTIME_USER_MODE_MODIFY32(FLASH0_MARD.U, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2540              FLS_WRITE_ONE_CLEARMASK,FLS_MARD_SPNDERR_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2541        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2542   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2543       /* If suspend operation not completed within a configured time duration\ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2544          report DEM */ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2545       if(ZERO_VALUE == TimeOutCount)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2546       { 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2547          Fls_lDemReportError_SpndResme();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2548       }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2549      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2550      else if(FLS_D0BUSY == Fls_lHWBusyCheck())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2551      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2552        /* If hardware is still busy, Clear the SPNDERR bit by writing 1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2553        FLS_SFR_RUNTIME_USER_MODE_MODIFY32(FLASH0_MARD.U, \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2554                     FLS_WRITE_ONE_CLEARMASK,FLS_MARD_SPNDERR_SETMASK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2555        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2556      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2557      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2558      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2559        RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2560        /* Set job status for the bank to None */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2561        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2562        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2563        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2564        JobTypePtr[BankNum] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2565        /* Reset JobStartStatus */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2566        StatePtr->JobStarted.Erase = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2567        /* Set the flash job result to job ok */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2568        StatePtr->FlsJobResult = MEMIF_JOB_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2569      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2570    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2571    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2572    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2573  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2574  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2575  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2576  ** Traceability : [cover parentID=DS_NAS_FLS_PR1150_PR123_5]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2577                    [cover parentID=DS_NAS_FLS_PR3158_2]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2578                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2579  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2580  ** Syntax : Std_ReturnType Fls_17_Pmu_ResumeErase (uint32 BankNum )           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2581  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2582  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2583  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2584  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2585  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2586  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2587  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2588  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2589  ** Parameters (in) :  BankNum - Sector on which erase is to be resumed        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2590  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2591  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2592  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2593  ** Return value    :  E_OK - Erase suspend successful                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2594  **                    E_NOT_OK - Erase suspend failed                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2595  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2596  ** Description :                                                              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2597  ** This function suspends an ongoing erase of a sector.                       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2598  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2599  Std_ReturnType Fls_17_Pmu_ResumeErase (uint32 BankNum)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2600  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2601    Std_ReturnType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2602    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2603    uint8* JobTypePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2604    volatile uint32 PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2605    uint32 TimeOutCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2606    uint32 CheckSpndBit;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2607    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2608    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2609    JobTypePtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2610    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2611    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2612    /* Check if SPND bit of MARD is equal to 1U */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2613    CheckSpndBit = FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2614    CheckSpndBit = CheckSpndBit & FLS_FSR_SPND_MASK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2615    if((CheckSpndBit >> FLS_FSR_SPND_BITPOS)==1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2616    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2617      if(Fls_lChkOperError() == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2618      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2619        if(BankNum == BANK0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2620        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2621          PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2622        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2623        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2624        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2625          PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2626        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2627        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2628        #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2629        Fls_lLoadAccessCode(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2630        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2631        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2632        #ifdef IFX_FLS_DEBUG04
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2633        if (TestFls_DebugMask04 != 0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2634        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2635        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2636          /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2637          Fls_lSchMEnter_ResumeErase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2638              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2639          /* Execute the Resume ERASE COMMAND CYCLES */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2640          Fls_ResumeEraseCmdCycle(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2641              
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2642          /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2643          Fls_lSchMExit_ResumeErase(); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2644        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2645        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2646        if(Fls_lChkSeqProtErrors() != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2647        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2648          /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2649          Fls_lSchMEnter_ResumeErase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2650          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2651          Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2652          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2653          /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2654          Fls_lSchMExit_ResumeErase(); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2655          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2656          RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2657        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2658        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2659        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2660          TimeOutCount = FLS_ERASESUSPEND_TIMEOUT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2661          do 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2662          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2663            TimeOutCount-- ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2664          }while((((FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2665                    FLS_FSR_SPND_MASK) >> FLS_FSR_SPND_BITPOS)==1U) && \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2666                                                          (TimeOutCount > 0U));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2667            
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2668          if(0U != Fls_lChkOperError())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2669          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2670            /* OPER error occured */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2671            RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2672          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2673          else if((boolean)TRUE == Fls_lResmErTimeout(TimeOutCount))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2674          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2675            /* If timeout happens and Suspend bit is not cleared return E_NOT_OK*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2676            RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2677            /* If resume operation not completed within a configured time 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2678            duration report DEM */ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2679              Fls_lDemReportError_SpndResme();          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2680          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2681          else if(0U == Fls_lHWBusyCheck())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2682          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2683            /* If hardware is still not busy i.e., if erase did not resume, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2684               then return E_NOT_OK */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2685            RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2686          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2687          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2688          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2689            /* Restore the JobType with previous erase */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2690            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2691              FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2692              contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2693            JobTypePtr[BankNum] = FLS_ERASE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2694            /* 1. Set the flash job result to job pending */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2695            StatePtr->FlsJobResult = MEMIF_JOB_PENDING;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2696            /*Indicate that the ERASE Job has been started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2697            StatePtr->JobStarted.Erase = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2698          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2699        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2700      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2701      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2702      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2703        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2704      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2705    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2706  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2707    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2708  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2709  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2710  #endif /* FLS_USE_ERASESUSPEND == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2711  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2712  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2713  ** Syntax : Std_ReturnType Fls_17_Pmu_GetOperStatus(void)                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2714  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2715  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2716  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2717  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2718  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2719  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2720  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2721  ** Parameters (in) :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2722  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2723  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2724  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2725  ** Return value    :  E_OK - No OPER error                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2726  **                    E_NOT_OK - OPER error has occurred                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2727  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2728  ** Description : This function provides the OPER error status                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2729  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2730  Std_ReturnType Fls_17_Pmu_GetOperStatus(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2731  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2732    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2733    uint32 OPER_Status;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2734    Std_ReturnType RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2735  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2736    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2737    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2738  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2739    #ifndef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2740    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2741    OPER_Status = (((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2742                                             TestFls_DebugMask) & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2743    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2744    OPER_Status = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2745                                                              FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2746    #endif 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2747    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2748    OPER_Status = (FlsEmulation_ReadStatusRegister() & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2749    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2750    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2751    if((0U != OPER_Status) || (0U != StatePtr->FlsOper))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2752    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2753      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2754    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2755    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2756    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2757  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2758  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2759  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2760  ** Traceability : [cover parentID=DS_NAS_HE2_FLS_PR2939,DS_NAS_EP_FLS_PR2939]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2761                    [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2762  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2763  ** Syntax : void Fls_17_Pmu_ControlTimeoutDet(uint8 Param)                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2764  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2765  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2766  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2767  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2768  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2769  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2770  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2771  ** Parameters (in) :  Param                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2772  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2773  ** Parameters (out):  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2774  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2775  ** Return value    :  None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2776  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2777  ** Description : This is the function to disable and re-enable detection /    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2778  **               reporting of time-out DET                                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2779  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2780  void Fls_17_Pmu_ControlTimeoutDet(uint8 Param)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2781  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2782  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2783  #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2784  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2785    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2786  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2787    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2788  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2789    StatePtr->FlsTimeoutControl = Param;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2790  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2791  #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2792  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2793    UNUSED_PARAMETER(Param)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2794  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2795  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2796  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2797  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2798  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2799  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2800  **                      Private Function Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2801  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2802  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2803  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2804  ** Traceability : [cover parentID=DS_AS_FLS104,DS_AS_FLS022,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2805  DS_AS403_FLS313,DS_AS403_FLS315,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2806  DS_AS_FLS167_1,DS_AS_FLS347_1,DS_AS_FLS140_FLS_143_1,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2807  DS_NAS_FLS_PR1058_3]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2808                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2809  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2810  ** Syntax : static void Fls_lMainErase(uint8 BankType)                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2811  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2812  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2813  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2814  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2815  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2816  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2817  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2818  ** Parameters (in) : BankType    DFlash Bank                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2819  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2820  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2821  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2822  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2823  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2824  ** Description : Performs the erase operation during Interrupt/Cyclic         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2825  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2826  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2827  static void Fls_lMainErase(uint8 BankType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2828  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2829    Fls_17_Pmu_StateType       *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2830    MemIf_JobResultType LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2831    volatile uint32     PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2832    Std_ReturnType      RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2833    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2834    #if ( FLS_IFX_FEE_USED ==  STD_OFF )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2835    #if ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2836    uint32              *ErasePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2837    uint32 Count;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2838    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2839    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2840  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2841    /******************* Initialise the global variables ***************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2842    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2843    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2844  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2845    LastJobResult = StatePtr->FlsJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2846  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2847    /* Obtain the physical address for the write operations */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2848    if(BankType == BANK0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2849    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2850      PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2851    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2852    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2853    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2854      PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2855    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2856  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2857    if(StatePtr->JobStarted.Erase == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2858    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2859      /* Erase job has to be started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2860      Fls_lMainEraseJobStart(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2861    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2862    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2863    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2864      /* Erase job has already been started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2865      if(Fls_lChkOperError() != 0U) /* Check for operational error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2866      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2867        /* FLS104: Erase Job fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2868        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2869            /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2870            Fls_lDemReportError_Erase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2871     
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2872        /* Call Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2873        Fls_lErrorHandler(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2874        RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2875      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2876      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2877      /******************************** DET *************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2878      #if ( FLS_IFX_FEE_USED ==  STD_OFF )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2879      #if ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2880      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2881      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2882        /********* Check for DFlash Sector content equal to zero *****/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2883        /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2884        /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2885        ErasePtr = (uint32 *)PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2886        Count = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2887        do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2888        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2889          if((*ErasePtr)== 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2890          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2891            Count++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2892            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic on a pointer to 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2893              Flash location*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2894            ErasePtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2895          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2896          else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2897          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2898            /* FLS022: If block is not completely erased error should be */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2899            /* reported                                                  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2900            /* Call Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2901            Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2902                             FLS_17_PMU_INSTANCE_ID,FLS_SID_MAIN,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2903                             FLS_E_VERIFY_ERASE_FAILED);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2904            Fls_lErrorHandler(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2905            RetVal = E_NOT_OK; /*return from function*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2906            break;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2907          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2908        } while(Count < (FLS_SECTOR_SIZE / FLS_WORD_SIZE));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2909        /*(FLS_SECTOR_SIZE / 4U) is used since it is a word comparison */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2910        /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2911      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2912      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2913      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2914      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2915      if(RetVal == E_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2916      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2917        StatePtr->FlsJobType[BankType] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2918      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2919        /* Update the JobResult */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2920        StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2921      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2922        /* Set the Bank type to the next bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2923        BankType = BANK1;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2924        PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2925  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2926        if(StatePtr->FlsJobType[BankType] == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2927        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2928          /* Start Erase operation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2929          Fls_lMainEraseJobStart(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2930        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2931        else /* Job completed successfully */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2932        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2933          /* Set to JOB_OK if no warnings  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2934          LastJobResult = MEMIF_JOB_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2935           
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2936          #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2937          Fls_lUnLoadAccessCode(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2938          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2939      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2940          /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2941          Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2942      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2943          Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_ERASE_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2944      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2945          if(Fls_ConfigPtr->FlsJobEndNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2946          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2947            /* FlsJobEndNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2948            (Fls_ConfigPtr->FlsJobEndNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2949          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2950      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2951          Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2952      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2953          /* Update the global status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2954          StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2955      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2956          /* Clear JobStarted bit for operation JobType */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2957          StatePtr->JobStarted.Erase = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2958      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2959        }/* End of Job evaluation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2960      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2961    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2962  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2963  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2964  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2965  ** Syntax : static void Fls_lMainEraseJobStart(uint32 PhysicalAddress)        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2966  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2967  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2968  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2969  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2970  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2971  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2972  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2973  ** Parameters (in) : Physical Address - Physical address for Erase            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2974  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2975  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2976  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2977  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2978  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2979  ** Description : Performs the erase operation during Interrupt/Cyclic         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2980  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2981  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2982  static void Fls_lMainEraseJobStart(uint32 PhysicalAddress)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2983  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2984    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2985    uint32                  SeqProtErr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2986  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2987    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2988  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2989    /* Indicate that the ERASE Job has been started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2990    StatePtr->JobStarted.Erase = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2991    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2992    /* Enter Critical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2993    Fls_lSchMEnter_Main();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2994    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2995    /* Execute ACCESS CODE for erase operation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2996    Fls_CallEraseCommand(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2997    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2998    /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  2999    Fls_lSchMExit_Main();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3000    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3001    #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3002    #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3003    (void) FlsEmulation_Erase(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3004    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3005    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3006    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3007    SeqProtErr = Fls_lChkSeqProtErrors();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3008    /* Check for Sequence error,Protection error bit */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3009    if(SeqProtErr != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3010    {    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3011            /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3012            Fls_lDemReportError_Erase();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3013       
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3014      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3015      Fls_lErrorHandler(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3016    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3017    /* Check for command cycle Timeout */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3018    else if (StatePtr->FlsTimeoutErr == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3019    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3020      /* As per AI00157728 - timeout error need not be reported to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3021      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3022      Fls_lErrorHandler(FLS_ERASE); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3023    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3024    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3025    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3026      /* dummy else */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3027    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3028  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3029  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3030  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3031  ** Traceability : [cover parentID=DS_AS_FLS106,DS_AS_FLS167_4,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3032     DS_AS_FLS347_4,DS_NAS_FLS_PR1057,DS_AS403_FLS317]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3033                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3034  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3035  ** Syntax : static void Fls_lMainRead(uint8  BankType)                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3036  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3037  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3038  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3039  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3040  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3041  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3042  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3043  ** Parameters (in) : uint8   DFlash Bank                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3044  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3045  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3046  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3047  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3048  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3049  ** Description : Performs the Read operation during Interrupt/Cyclic          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3050  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3051  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3052  static void Fls_lMainRead(uint8  BankType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3053  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3054    Fls_17_Pmu_StateType       *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3055    Fls_LengthType      ReadCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3056    MemIf_JobResultType LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3057    uint8               *SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3058    Fls_LengthType      MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3059  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3060    /************* Initialise Local Variables *****************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3061    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3062  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3063    /* Get max read length according to the FLS mode */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3064     MaxRead = Fls_lGetReadModeLength();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3065      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3066    /* Check whether the given length is greater than MAX_READ */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3067    if(StatePtr->FlsReadLength > MaxRead)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3068    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3069      /* Load Max Byte to read in one cycle */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3070      ReadCount = MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3071      /* Decrement the count from the total count to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3072      StatePtr->FlsReadLength = StatePtr->FlsReadLength - ReadCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3073    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3074    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3075    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3076      ReadCount = StatePtr->FlsReadLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3077      StatePtr->FlsReadLength = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3078    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3079  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3080    /* Obtain the Read Address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3081    /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3082    /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3083    SourcePtr = (uint8 *)(StatePtr->FlsReadAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3084  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3085    /**********************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3086    #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3087    #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3088    FlsEmulation_ReadRequest.FlashAddress = StatePtr->FlsReadAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3089    FlsEmulation_ReadRequest.Buffer = StatePtr->FlsReadBufferPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3090    FlsEmulation_ReadRequest.Length = ReadCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3091    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3092    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3093  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3094    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3095    {  /* Determine the physical address for reading */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3096       /* Check whether sourceptr reached end of Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3097      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3098      /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3099      if( (SourcePtr == (uint8 *)(DFLASH_BANK0_PHYSICAL + FLS_SECTOR_SIZE)) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3100          ((BankType != BANK1) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3101          (StatePtr->FlsJobType[BANK1] == FLS_READ))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3102        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3103      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3104        StatePtr->FlsReadAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3105        /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3106        /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3107        SourcePtr = (uint8 *)(StatePtr->FlsReadAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3108        BankType = BANK1;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3109        StatePtr->FlsJobType[BANK0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3110  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3111      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3112  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3113      /* READ DATA AND STORE THE DATA AT DESTINATION */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3114      /*IFX_MISRA_RULE_11_01_STATUS=Buffer address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3115      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3116      /*IFX_MISRA_RULE_11_03_STATUS=Buffer address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3117      /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3118      if( (ReadCount >= FLS_WORD_SIZE) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3119          ( (((uint32)SourcePtr & THREE_VALUE) == 0U) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3120           (((uint32)(StatePtr->FlsReadBufferPtr) & THREE_VALUE) == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3121        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3122      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3123        /* Perform Word Read to save runtime */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3124        *(uint32*)(void*)(StatePtr->FlsReadBufferPtr) = 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3125                                             *(uint32*)(void*)SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3126        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3127          user buffer efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3128        (StatePtr->FlsReadBufferPtr)+= FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3129        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used on Flash
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3130          pointer to access Flash locations efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3131        SourcePtr+= FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3132        ReadCount -= FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3133      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3134      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3135      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3136        *(StatePtr->FlsReadBufferPtr) = *SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3137        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3138          user buffer efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3139        (StatePtr->FlsReadBufferPtr)++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3140        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used on Flash
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3141          pointer to access Flash locations efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3142        SourcePtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3143        ReadCount--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3144      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3145  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3146    }while(((ReadCount)) > 0U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3147  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3148    #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3149    #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3150    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3151      uint32 x;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3152      x = FlsEmulation_Read(FlsEmulation_ReadRequest.FlashAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3153                      FlsEmulation_ReadRequest.Buffer,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3154                      FlsEmulation_ReadRequest.Length);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3155      if (x == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3156      {    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3157        /* Report Dem */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3158        Fls_lDemReportError_Read();    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3159        /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3160        Fls_lErrorHandler(FLS_READ);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3161      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3162    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3163    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3164    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3165  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3166    /* Update the Read Address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3167    /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3168    /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3169    StatePtr->FlsReadAddress = (uint32)SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3170  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3171    /* Check for single bit or double bit error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3172  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3173    if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3174    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3175      /* FLS106: Read Job fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3176      /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3177      Fls_lDemReportError_Read();  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3178      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3179      Fls_lErrorHandler(FLS_READ);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3180    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3181    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3182    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3183  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3184      if(StatePtr->FlsReadLength == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3185      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3186        /* Set Job Result to JOB OK if no warnings */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3187        LastJobResult = MEMIF_JOB_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3188        /* 1. Clear the Job request */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3189        StatePtr->FlsJobType[BankType] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3190  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3191        /* 2. Update the global status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3192        StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3193  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3194        Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_READ_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3195  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3196        if(Fls_ConfigPtr->FlsJobEndNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3197        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3198           /* FlsJobEndNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3199           (Fls_ConfigPtr->FlsJobEndNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3200        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3201  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3202        Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3203  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3204      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3205    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3206  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3207  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3208  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3209  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3210  ** Traceability : [cover parentID=DS_AS_FLS154,DS_AS_FLS200,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3211     DS_AS_FLS167_3,DS_AS_FLS347_3_FLS349,DS_NAS_FLS_PR1057,DS_AS403_FLS318]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3212                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3213  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3214  ** Syntax : static void Fls_lMainCompare(uint8  BankType)                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3215  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3216  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3217  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3218  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3219  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3220  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3221  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3222  ** Parameters (in) : uint8   DFlash Bank                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3223  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3224  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3225  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3226  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3227  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3228  ** Description : Performs the Compare operation during Interrupt/Cyclic       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3229  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3230  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3231  static void Fls_lMainCompare(uint8  BankType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3232  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3233    Fls_17_Pmu_StateType       *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3234    Fls_LengthType      ReadCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3235    MemIf_JobResultType LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3236    uint8               *SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3237    Fls_LengthType      MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3238    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3239    /************ Initialise Local variables ****************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3240    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3241  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3242    LastJobResult = StatePtr->FlsJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3243  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3244    /* Get max read length according to the FLS mode */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3245    MaxRead = Fls_lGetReadModeLength();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3246    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3247    /* Check whether the given length is greater than MAX_READ */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3248    if(StatePtr->FlsReadLength > MaxRead)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3249    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3250      /* Load Max Byte to read in one cycle */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3251      ReadCount = MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3252      /* Decrement the count from the totalcount to read */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3253      StatePtr->FlsReadLength = StatePtr->FlsReadLength - ReadCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3254    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3255    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3256    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3257      ReadCount = StatePtr->FlsReadLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3258      StatePtr->FlsReadLength = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3259    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3260  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3261    /* Obtain the address for the compare operation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3262    /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3263    /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3264    SourcePtr = (uint8 *)(StatePtr->FlsReadAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3265    /**********************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3266    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3267    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3268      /* Get the actual physical address when BankType changes */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3269      /* Check whether source ptr reached to end of Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3270      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3271      /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3272      if((SourcePtr == (uint8 *)(DFLASH_BANK0_PHYSICAL + FLS_SECTOR_SIZE)) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3273         ( (BankType != BANK1) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3274           (StatePtr->FlsJobType[BANK1] == FLS_COMPARE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3275        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3276      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3277        /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3278        /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3279        SourcePtr = (uint8 *)(DFLASH_BANK1_PHYSICAL);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3280        BankType = BANK1;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3281        StatePtr->FlsJobType[BANK0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3282      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3283      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3284      /* Check if Address is word aligned */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3285      /*IFX_MISRA_RULE_11_01_STATUS=Pointer is typecasted to uint32 for 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3286        performing bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3287      /*IFX_MISRA_RULE_11_01_STATUS=Pointer is typecasted to uint32 for 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3288        performing bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3289      /*IFX_MISRA_RULE_11_03_STATUS=Pointer is typecasted to uint32 for 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3290        performing bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3291      /*IFX_MISRA_RULE_11_03_STATUS=Pointer is typecasted to uint32 for 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3292        performing bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3293      if( (((uint32)SourcePtr & (FLS_WORD_SIZE - 1U)) == 0U) && 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3294         ((((uint32)(StatePtr->FlsReadBufferPtr) & (FLS_WORD_SIZE - 1U)) == 0U) &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3295             (ReadCount >= FLS_WORD_SIZE)  )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3296        )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3297      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3298        /* COMPARE THE FLASH DATA WITH THE BUFFER DATA (Word Compare) */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3299        if( *(uint32*)(void*)(StatePtr->FlsReadBufferPtr) != 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3300            *(uint32*)(void*)SourcePtr )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3301        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3302          LastJobResult = MEMIF_BLOCK_INCONSISTENT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3303          /* No need to compare any more data */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3304          ReadCount = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3305        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3306        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3307        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3308          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3309            user buffer efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3310          StatePtr->FlsReadBufferPtr += FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3311          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3312            Flash location efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3313          SourcePtr += FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3314          ReadCount -= FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3315        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3316      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3317      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3318      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3319        /* COMPARE THE FLASH DATA WITH THE BUFFER DATA (Byte Compare)*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3320        if( *(StatePtr->FlsReadBufferPtr) != *SourcePtr )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3321        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3322          LastJobResult = MEMIF_BLOCK_INCONSISTENT;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3323          /* No need to compare any more data */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3324          ReadCount = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3325  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3326        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3327        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3328        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3329          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3330            user buffer efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3331          StatePtr->FlsReadBufferPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3332          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3333            Flash location efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3334          SourcePtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3335          ReadCount--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3336        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3337      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3338    }while(ReadCount > 0U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3339  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3340    /* Update the compare address */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3341    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is stored in address variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3342    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is stored in address variable*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3343    StatePtr->FlsReadAddress = (uint32)SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3344  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3345    /* Check if Non-correctable ECC error was present thus leading to failure */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3346    if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3347    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3348      /* FLS154: Compare Job fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3349      /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3350      Fls_lDemReportError_Compare();  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3351      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3352      Fls_lErrorHandler(FLS_COMPARE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3353    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3354    /* Check if block was inconsistent */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3355    else if(LastJobResult == MEMIF_BLOCK_INCONSISTENT)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3356    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3357      /* Update the global status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3358      StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3359  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3360      /* Clear the failed Job from Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3361      if(StatePtr->FlsJobType[BANK0] == FLS_COMPARE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3362      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3363        StatePtr->FlsJobType[BANK0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3364      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3365      /* Clear the failed Job from Bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3366      if(StatePtr->FlsJobType[BANK1] == FLS_COMPARE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3367      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3368        StatePtr->FlsJobType[BANK1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3369      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3370  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3371      /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3372      Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3373  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3374      Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_COMPARE_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3375  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3376      if(Fls_ConfigPtr->FlsJobErrorNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3377      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3378        /* FlsJobErrorNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3379        (Fls_ConfigPtr->FlsJobErrorNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3380      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3381      Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3382    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3383    /* No failures detected */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3384    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3385    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3386      /* Job completed */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3387      if ( StatePtr->FlsReadLength == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3388      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3389        /* Update the result to JOB_OK if no warnings */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3390        LastJobResult = MEMIF_JOB_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3391  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3392        /* 1. Update the Global Status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3393        StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3394  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3395        /* 2. Clear the Job request */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3396        StatePtr->FlsJobType[BankType] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3397  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3398        Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_COMPARE_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3399  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3400        if(Fls_ConfigPtr->FlsJobEndNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3401        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3402           /* FlsJobEndNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3403           (Fls_ConfigPtr->FlsJobEndNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3404        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3405  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3406        Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3407  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3408      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3409      /* Job not yet completed */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3410      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3411      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3412        /* Avoid MISRA error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3413      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3414    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3415  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3416  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3417  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3418  ** Traceability : [cover parentID=DS_AS_FLS105,DS_AS_FLS055,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3419  DS_AS_FLS056,DS_AS_FLS167_2,DS_AS_FLS347_2,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3420  DS_AS_FLS141_FLS_143_2,DS_NAS_FLS_PR1058_4,DS_NAS_FLS_PR1059,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3421  DS_AS403_FLS316,DS_AS403_FLS314]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3422                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3423  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3424  ** Syntax : static void Fls_lMainWrite(uint8 BankType)                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3425  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3426  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3427  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3428  ** Sync/Async:  Asynchronous                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3429  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3430  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3431  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3432  ** Parameters (in) : BankType   DFlash Bank                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3433  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3434  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3435  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3436  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3437  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3438  ** Description : Performs the Write operation during Interrupt/Cyclic         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3439  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3440  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3441  static void Fls_lMainWrite(uint8 BankType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3442  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3443    Fls_17_Pmu_StateType       *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3444    MemIf_JobResultType LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3445    volatile uint32     PhysicalAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3446    boolean             Error;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3447    uint8               PageLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3448  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3449    /******************* Initialise local variables ********************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3450    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3451  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3452    /* Obtain the physical address for the write operations */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3453    if(BankType == BANK0)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3454    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3455      PhysicalAddress = DFLASH_BANK0_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3456    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3457    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3458    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3459      PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3460    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3461  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3462    if(StatePtr->JobStarted.Write == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3463    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3464      #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3465      #if (FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3466      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is typecased to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3467      /*IFX_MISRA_RULE_11_03_STATUS=Flash address is typecased to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3468      if(Fls_lPageEraseCheck((uint32 *)(void*)(StatePtr->FlsWriteAddress),
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3469                             StatePtr->FlsWriteLength,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3470                             FLS_SID_WRITE) == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3471      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3472        Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3473      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3474      else  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3475      #endif /*FLS_IFX_FEE_USED*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3476      #endif /* FLS_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3477      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3478        /* Start Write operation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3479        Fls_lMainWriteJobStart(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3480      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3481    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3482    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3483    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3484      /* Check for operational error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3485      if(Fls_lChkOperError() != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3486      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3487        /* FLS105: Write Job fails due to hardware error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3488        /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3489        Fls_lDemReportError_Write();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3490        
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3491        Error = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3492      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3493      /* Check for Program verification error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3494      #if(FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3495      #if(FLS_VER_ERROR_CHECK == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3496      else if((boolean)TRUE == Fls_lPverChk())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3497      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3498        Error = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3499        /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3500        Fls_lDemReportError_Write();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3501      }     
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3502      #endif  /* FLS_VER_ERROR_CHECK == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3503      #endif  /* FLS_IFX_FEE_USED == STD_OFF */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3504      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3505      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3506        if( Fls_lGetWriteMode() == PAGE_WRITE )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3507        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3508          PageLength = FLS_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3509        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3510        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3511        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3512          PageLength = FLS_BURST_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3513        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3514    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3515        #if (FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3516        #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3517        /* Check for DFLASHx Page content equal to Source value */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3518        Error = Fls_lCheckWrittenPage((uint32)PageLength);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3519        #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3520        Error = (boolean)FALSE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3521        #endif /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3522        #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3523        Error = (boolean)FALSE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3524        #endif /* FLS_IFX_FEE_USED == STD_OFF */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3525    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3526        /* PageStartAddress is incremented by PageLength bytes */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3527        StatePtr->FlsWriteAddress += PageLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3528        /* length is decremented by PageLength */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3529        StatePtr->FlsWriteLength -= PageLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3530        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to access
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3531          user buffer efficiently*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3532        StatePtr->FlsWriteBufferPtr = (StatePtr->FlsWriteBufferPtr +
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3533                                     PageLength);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3534    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3535      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3536    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3537      if(Error == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3538      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3539        /* Check for Program verification error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3540        #if(FLS_IFX_FEE_USED == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3541        #if(FLS_VER_ERROR_CHECK == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3542        if ((boolean)TRUE == Fls_lPverChk())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3543        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3544            /* update FlsPver to be used in CompareWordsSync */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3545          StatePtr->FlsPver = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3546        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3547        #endif  /* FLS_VER_ERROR_CHECK == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3548        #endif  /* FLS_IFX_FEE_USED == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3549          
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3550        /* Check for Flash write Job is finished completely  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3551        if(StatePtr->FlsWriteLength == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3552        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3553          #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3554          Fls_lUnLoadAccessCode(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3555          #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3556    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3557          /* Indicate Job successfully completed if no warnings seen till now */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3558          LastJobResult = MEMIF_JOB_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3559          /* 1. Update the global status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3560          StatePtr->FlsJobResult = LastJobResult;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3561          /* 2. Clear the Write Job */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3562          StatePtr->FlsJobType[BankType] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3563          /* 3. Clear the Write Job Started Status bit */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3564          StatePtr->JobStarted.Write = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3565    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3566          /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3567          Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3568    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3569          Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_WRITE_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3570    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3571          if(Fls_ConfigPtr->FlsJobEndNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3572          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3573            /* FlsJobEndNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3574            (Fls_ConfigPtr->FlsJobEndNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3575          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3576          Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3577    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3578        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3579        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3580        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3581          /* Update the physical address if end of Bank0 is reached */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3582          /* Check whether PageStartAddress is reached to end of Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3583          if((StatePtr->FlsWriteAddress ==
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3584                                (DFLASH_BANK0_PHYSICAL + FLS_SECTOR_SIZE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3585              &&
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3586             (BankType != BANK1)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3587            )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3588          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3589            StatePtr->FlsWriteAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3590            PhysicalAddress = DFLASH_BANK1_PHYSICAL;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3591            StatePtr->FlsJobType[BANK0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3592          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3593    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3594          #if (FLS_IFX_FEE_USED == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3595          #if  ( FLS_DEV_ERROR_DETECT == STD_ON )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3596          /* CHECK FOR DFLASHx PAGE IS ERASED */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3597          /*IFX_MISRA_RULE_11_01_STATUS=Flash address is typecased to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3598          /*IFX_MISRA_RULE_11_03_STATUS=Flash address is typecased to a pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3599          if(Fls_lPageEraseCheck((uint32 *)(void*)(StatePtr->FlsWriteAddress),
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3600                               StatePtr->FlsWriteLength,FLS_SID_MAIN) == E_NOT_OK)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3601          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3602            Error = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3603            Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3604          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3605          /* Check needed only when DET is STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3606          if(Error == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3607          #endif /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3608          #endif /* FLS_IFX_FEE_USED == STD_OFF */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3609    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3610          {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3611            /* Start Write operation */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3612            Fls_lMainWriteJobStart(PhysicalAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3613          }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3614        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3615      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3616      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3617      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3618        /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3619        Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3620      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3621    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3622  }/* end of Fls_lMainWrite */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3623  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3624  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3625  ** Syntax : static void Fls_lMainWriteJobStart(uint32 PhysicalAddress)        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3626  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3627  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3628  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3629  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3630  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3631  ** Reentrancy:  Non-reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3632  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3633  ** Parameters (in) : Physical Address - Physical address for Write            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3634  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3635  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3636  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3637  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3638  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3639  ** Description : Performs the Write operation during Interrupt/Cyclic         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3640  **               Job handling                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3641  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3642  static void Fls_lMainWriteJobStart(uint32 PhysicalAddress)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3643  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3644    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3645    uint32                  SeqProtErr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3646    uint8                   WriteMode;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3647  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3648    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3649  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3650    /* Mark that the Job has been started */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3651    StatePtr->JobStarted.Write = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3652  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3653    /*Enter Critical Section*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3654    Fls_lSchMEnter_Main();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3655  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3656    /************* Call Write command sequence *************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3657    WriteMode = Fls_lGetWriteMode();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3658    Fls_CallWriteCommand(PhysicalAddress,StatePtr,WriteMode);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3659    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3660    /* Exit Crtical Section */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3661    Fls_lSchMExit_Main();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3662  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3663    #ifdef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3664    #if (FLS_RAM_EMULATION_TEST == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3665    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3666      (void) FlsEmulation_Write(StatePtr->FlsWriteAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3667                                StatePtr->FlsWriteBufferPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3668    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3669    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3670    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3671  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3672    SeqProtErr = Fls_lChkSeqProtErrors();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3673  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3674    /* Check for Sequence error,Protection error bit */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3675    if(SeqProtErr != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3676    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3677      /* Report Production errors to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3678      Fls_lDemReportError_Write();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3679      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3680      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3681      Fls_lErrorHandler(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3682    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3683      /* Check for Command Cycle Timeout Error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3684    else if (StatePtr->FlsTimeoutErr == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3685    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3686      /* As per AI00157728 - timeout error need not be reported to DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3687      /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3688      Fls_lErrorHandler(FLS_WRITE); 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3689    } 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3690    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3691    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3692      /* dummy else */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3693    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3694  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3695  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3696  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3697  ** Traceability : [cover parentID=DS_AS_FLS234,DS_AS_FLS233,DS_AS_FLS235]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3698                   [/cover]
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3699  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3700  ** Syntax : void Fls_17_Pmu_Isr(void)                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3701  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3702  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3703  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3704  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3705  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3706  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3707  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3708  ** Parameters (in) : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3709  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3710  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3711  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3712  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3713  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3714  ** Description : This routine is used instead of Main function if configured  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3715  ** for Erase and Write Jobs.                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3716  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3717  #if( FLS_USE_INTERRUPTS == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3718  void Fls_17_Pmu_Isr(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3719  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3720    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3721    uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3722    uint32 FlashFsrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3723  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3724    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3725    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3726  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3727    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3728      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3729      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3730    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3731      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3732      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3733    if( (ArrPtr[BANK0] != FLS_NONE) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3734        (ArrPtr[BANK1] != FLS_NONE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3735      )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3736    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3737  /************************** ERASE *********************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3738      /* Check for erase operation is pending in either of the bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3739      FlashFsrStatus = (uint32)(((unsigned_int)FLASH0_FSR.U & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3740                                                      FLS_FSR_SPND_MASK) >> \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3741                                                         FLS_FSR_SPND_BITPOS);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3742  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3743      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3744        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3745        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3746      if(ArrPtr[BANK0] == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3747      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3748        if((Fls_lHWBusyCheck() == 0U) && (FlashFsrStatus == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3749        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3750          /* Fls_Main_Erase operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3751          Fls_lMainErase((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3752        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3753      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3754      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3755        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3756        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3757      else if(ArrPtr[BANK1] == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3758      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3759        if((Fls_lHWBusyCheck() == 0U) && (FlashFsrStatus == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3760        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3761          /* Fls_Main_Erase operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3762          Fls_lMainErase((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3763        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3764      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3765      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3766      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3767        /* Avoid MISRA error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3768      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3769  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3770  /************************** WRITE *********************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3771      /* Check for write operation is pending in either of the bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3772      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3773        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3774        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3775      if(ArrPtr[BANK0] == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3776      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3777        /* Fls_Main_Write operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3778        Fls_lMainWrite((uint8)BANK0);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3779      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3780      /* Check for write operation is pending in either of the bank */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3781      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3782        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3783        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3784      else if(ArrPtr[BANK1] == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3785      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3786        /* Fls_Main_Write operation should be called  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3787        Fls_lMainWrite((uint8)BANK1);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3788      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3789      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3790      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3791        /* Avoid MISRA error */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3792      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3793    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3794  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3795  /* FLS_USE_INTERRUPTS == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3796  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3797  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3798  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3799  ** Syntax : static void Fls_lErrorHandler(uint8 JobType)                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3800  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3801  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3802  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3803  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3804  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3805  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3806  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3807  ** Parameters (in) : JobType                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3808  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3809  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3810  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3811  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3812  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3813  ** Description : This routine is called when error occurred during            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3814  **               flash operations                                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3815  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3816  static void Fls_lErrorHandler(uint8 JobType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3817  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3818    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3819    uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3820  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3821    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3822    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3823  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3824    if(JobType == FLS_ERASE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3825    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3826      #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3827      Fls_lUnLoadAccessCode(FLS_ERASE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3828      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3829      StatePtr->JobStarted.Erase = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3830    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3831    else if(JobType == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3832    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3833      #if( FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3834      Fls_lUnLoadAccessCode(FLS_WRITE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3835      #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3836      StatePtr->JobStarted.Write = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3837    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3838    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3839    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3840      /* Avoid MISRA 60 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3841    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3842  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3843    /* Clear the failed Job from Bank0 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3844    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3845      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3846      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3847    if(ArrPtr[BANK0] == JobType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3848    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3849      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3850        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3851        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3852      ArrPtr[BANK0] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3853    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3854    /* Clear the failed Job from Bank1 */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3855    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3856      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3857      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3858    if(ArrPtr[BANK1] == JobType)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3859    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3860      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3861        FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3862        contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3863      ArrPtr[BANK1] = FLS_NONE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3864    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3865  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3866    /* Update the global status variables */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3867    StatePtr->FlsJobResult = MEMIF_JOB_FAILED;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3868  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3869    /* Execute Clear Status command */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3870    #ifndef IFX_FLS_DEBUG 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3871    Fls_ClearStatusCmdCycle();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3872    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3873  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3874    Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = JobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3875  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3876    if(Fls_ConfigPtr->FlsJobErrorNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3877    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3878      /* FlsJobErrorNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3879      (Fls_ConfigPtr->FlsJobErrorNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3880    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3881  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3882    Fls_ConfigPtr->FlsStateVarPtr->NotifCaller = FLS_NO_JOB;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3883  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3884  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3885  #if(FLS_AC_LOAD_ON_JOB_START == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3886  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3887  ** Syntax : static void Fls_lLoadAccessCode(uint8 JobRequest)                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3888  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3889  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3890  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3891  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3892  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3893  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3894  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3895  ** Parameters (in) : JobRequest                                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3896  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3897  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3898  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3899  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3900  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3901  ** Description : This routine is called to load the flash access code         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3902  **               in to RAM.                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3903  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3904  static void Fls_lLoadAccessCode(uint8 JobRequest)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3905  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3906    uint32* SrcStartPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3907    uint32* DestPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3908    uint32* SrcEndPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3909    volatile uint32 Size;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3910  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3911    /* Loading Write Access Code */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3912    if(JobRequest == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3913    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3914      SrcStartPtr = (uint32*)(void*)(&FLS_AC_WRITE_SOURCE_START);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3915      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3916      DestPtr = (uint32*)(void*)(Fls_ConfigPtr->FlsAccessCodeWritePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3917      SrcEndPtr = (uint32*)(void*)(&FLS_AC_WRITE_SOURCE_END);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3918    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3919    /* Loading Erase Access Code */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3920    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3921    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3922      SrcStartPtr = (uint32*)(void*)(&FLS_AC_ERASE_SOURCE_START);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3923      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3924      DestPtr = (uint32*)(void*)(Fls_ConfigPtr->FlsAccessCodeErasePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3925      SrcEndPtr = (uint32*)(void*)(&FLS_AC_ERASE_SOURCE_END);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3926    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3927  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3928    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3929      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3930    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3931      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3932    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3933      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3934    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3935      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3936    Size = (uint32)SrcEndPtr - (uint32)SrcStartPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3937  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3938    /* Copy one more word for cases where actual size is not divisible by 4*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3939    if((Size & THREE_VALUE) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3940    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3941      Size = Size + FOUR_VALUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3942    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3943  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3944    /* Divide the Size by 4 to get Size in words */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3945    Size = Size >> (uint32)TWO_VALUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3946  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3947    /* Copy access code to RAM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3948    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3949    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3950      *DestPtr = *SrcStartPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3951      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used for efficient
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3952        access of memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3953      DestPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3954      /*IFX_MISRA_RULE_17_01_STATUS=Pointer arithmetic is used for efficient
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3955        access of memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3956      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used for efficient
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3957        access of memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3958      SrcStartPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3959      Size--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3960    }while(Size != 0U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3961  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3962  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3963  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3964  ** Syntax : static void Fls_lUnLoadAccessCode(uint8 JobRequest)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3965  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3966  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3967  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3968  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3969  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3970  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3971  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3972  ** Parameters (in) : JobRequest                                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3973  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3974  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3975  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3976  ** Return value    : void                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3977  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3978  ** Description : This routine is called to unload the flash access code.      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3979  **               Basically sets the RAM code area to 0                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3980  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3981  static void Fls_lUnLoadAccessCode(uint8 JobRequest)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3982  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3983    uint32* SrcStartPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3984    uint32* DestPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3985    uint32* SrcEndPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3986    volatile uint32 Size;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3987  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3988    /* UnLoading Write Access Code */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3989    if(JobRequest == FLS_WRITE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3990    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3991      SrcStartPtr = (uint32*)(void*)(&FLS_AC_WRITE_SOURCE_START);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3992      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3993      DestPtr = (uint32*)(void*)(Fls_ConfigPtr->FlsAccessCodeWritePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3994      SrcEndPtr = (uint32*)(void*)(&FLS_AC_WRITE_SOURCE_END);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3995    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3996    /* UnLoading Erase Access Code */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3997    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3998    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  3999      SrcStartPtr = (uint32*)(void*)(&FLS_AC_ERASE_SOURCE_START);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4000      /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pinter*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4001      DestPtr = (uint32*)(void*)(Fls_ConfigPtr->FlsAccessCodeErasePtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4002      SrcEndPtr = (uint32*)(void*)(&FLS_AC_ERASE_SOURCE_END);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4003    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4004  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4005    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is converted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4006      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4007    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is converted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4008      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4009    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is converted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4010      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4011    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is converted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4012      arithmetic operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4013    Size = (uint32)SrcEndPtr - (uint32)SrcStartPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4014  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4015    /* Copy one more word for cases where actual size is not divisible by 4*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4016    if((Size & THREE_VALUE) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4017    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4018      Size = Size + FOUR_VALUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4019    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4020    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4021    /* Divide the Size by 4 to get Size in words */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4022    Size = Size >> (uint32)TWO_VALUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4023  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4024    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4025    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4026      *DestPtr = ZERO_VALUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4027      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used for efficient
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4028        access of memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4029      DestPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4030      Size--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4031    }while(Size != 0U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4032  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4033  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4034  /* End of FLS_AC_LOAD_ON_JOB_START == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4035  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4036  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4037  ** Syntax: IFX_LOCAL_INLINE boolean Fls_lSpndTimeout(uint32 TimeOutCount)     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4038  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4039  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4040  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4041  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4042  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4043  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4044  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4045  ** Parameters (in) : TimeOutCount - Timeout count                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4046  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4047  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4048  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4049  ** Return value    : boolean                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4050  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4051  ** Description : This routine checks if erase suspend error or timeout error  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4052  **               occured                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4053  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4054  IFX_LOCAL_INLINE boolean Fls_lSpndTimeout(uint32 TimeOutCount)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4055  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4056    boolean RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4057    uint32 Checkspnderrbit;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4058    Checkspnderrbit =  FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_MARD.U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4059    Checkspnderrbit =  Checkspnderrbit & FLS_MARD_SPNDERR_MASK ;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4060    Checkspnderrbit = Checkspnderrbit >> FLS_MARD_SPNDERR_BITPOS ; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4061    #ifdef IFX_FLS_DEBUG03
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4062    if (((( Checkspnderrbit) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4063             TestFls_DebugMask03) == 1U) || (TimeOutCount == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4064                                     
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4065    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4066    if ((Checkspnderrbit == 1U) || (TimeOutCount == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4067    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4068    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4069      RetVal = (boolean)TRUE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4070    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4071    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4072    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4073      RetVal = (boolean)FALSE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4074    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4075    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4076  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4077  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4078  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4079  ** Syntax: IFX_LOCAL_INLINE boolean Fls_lResmErTimeout(uint32 TimeOutCount)   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4080  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4081  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4082  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4083  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4084  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4085  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4086  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4087  ** Parameters (in) : TimeOutCount - Timeout count                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4088  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4089  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4090  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4091  ** Return value    : boolean                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4092  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4093  ** Description : This routine checks if erase resume timeout error occured    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4094  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4095  IFX_LOCAL_INLINE boolean Fls_lResmErTimeout(uint32 TimeOutCount)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4096  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4097    boolean RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4098    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4099    #ifdef IFX_FLS_DEBUG04
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4100    TimeOutCount = TimeOutCount & TestFls_DebugMask04;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4101    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4102  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4103    if (TimeOutCount == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4104    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4105      RetVal = (boolean)TRUE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4106    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4107    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4108    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4109      RetVal = (boolean)FALSE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4110    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4111    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4112  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4113  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4114  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4115  ** Syntax: IFX_LOCAL_INLINE boolean Fls_lPverChk(void)                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4116  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4117  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4118  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4119  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4120  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4121  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4122  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4123  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4124  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4125  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4126  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4127  ** Return value    : boolean                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4128  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4129  ** Description : This routine checks if PVER error occured                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4130  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4131  IFX_LOCAL_INLINE boolean Fls_lPverChk(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4132  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4133    uint32 TempFSR;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4134    boolean RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4135    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4136    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4137    TempFSR = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4138                                                       TestFls_DebugMask);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4139    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4140    TempFSR = (uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4141    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4142  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4143    if ((TempFSR & FLS_PVER_ERROR) == FLS_PVER_ERROR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4144    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4145      RetVal = (boolean)TRUE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4146    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4147    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4148    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4149      RetVal = (boolean)FALSE; 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4150    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4151    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4152  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4153  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4154  #if(FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4155  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4156  ** Syntax: IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Read                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4157  **                                ( const Fls_17_Pmu_StateType* StatePtr)     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4158  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4159  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4160  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4161  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4162  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4163  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4164  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4165  ** Parameters (in) : StatePtr : FLS Global variable structure                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4166  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4167  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4168  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4169  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4170  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4171  ** Description : This routine detects if the new Read job can be accepted     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4172  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4173  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Read( const Fls_17_Pmu_StateType* StatePtr )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4174  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4175    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4176  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4177    const uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4178    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4179    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4180  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4181    /* No other job has been accepted */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4182    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4183      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4184      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4185    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4186      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4187      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4188    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4189    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4190      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4191                       FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4192                       FLS_SID_READ,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4193                       FLS_E_BUSY);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4194      ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4195    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4196  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4197    return(ErrorFlag);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4198  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4199  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4200  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4201  ** Syntax: IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Compare                        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4202  **                                   ( const Fls_17_Pmu_StateType* StatePtr)  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4203  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4204  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4205  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4206  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4207  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4208  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4209  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4210  ** Parameters (in) : StatePtr : FLS Global variable structure                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4211  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4212  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4213  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4214  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4215  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4216  ** Description : This routine detects if the new Compare job can be accepted  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4217  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4218  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Compare( 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4219                                           const Fls_17_Pmu_StateType* StatePtr )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4220  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4221    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4222    const uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4223    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4224    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4225  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4226    /* No other job has been accepted */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4227    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4228      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4229      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4230    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4231      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4232      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4233    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4234    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4235      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4236                       FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4237                       FLS_SID_COMPARE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4238                       FLS_E_BUSY);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4239      ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4240    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4241  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4242    return(ErrorFlag);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4243  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4244  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4245  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4246  ** Syntax: IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Write                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4247  **                                 ( const Fls_17_Pmu_StateType* StatePtr )   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4248  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4249  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4250  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4251  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4252  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4253  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4254  ** Parameters (in) : StatePtr : FLS Global variable structure                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4255  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4256  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4257  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4258  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4259  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4260  ** Description : This routine detects if the new Write job can be accepted    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4261  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4262  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Write(const Fls_17_Pmu_StateType* StatePtr)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4263  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4264    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4265    const uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4266    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4267    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4268  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4269    /* No other job has been accepted */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4270    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4271      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4272      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4273    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4274      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4275      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4276    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4277    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4278      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4279                       FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4280                       FLS_SID_WRITE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4281                       FLS_E_BUSY);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4282      ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4283    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4284  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4285    return(ErrorFlag);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4286  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4287  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4288  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4289  ** Syntax: IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Erase                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4290  **                                 ( const Fls_17_Pmu_StateType* StatePtr)    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4291  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4292  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4293  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4294  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4295  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4296  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4297  ** Parameters (in) : StatePtr : FLS Global variable structure                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4298  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4299  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4300  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4301  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4302  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4303  ** Description : This routine detects if the new Erase job can be accepted    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4304  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4305  IFX_LOCAL_INLINE uint8 Fls_lBusyDET_Erase(const Fls_17_Pmu_StateType* StatePtr)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4306  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4307    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4308  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4309    const uint8 *ArrPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4310    ArrPtr = StatePtr->FlsJobType;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4311    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4312  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4313    /* No other job has been accepted */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4314    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4315      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4316      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4317    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used within 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4318      FlsJobType[FLS_NUMBER_OF_SECTORS] to efficiently access its 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4319      contents*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4320    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4321    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4322      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4323                       FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4324                       FLS_SID_ERASE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4325                       FLS_E_BUSY);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4326      ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4327    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4328  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4329    return(ErrorFlag);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4330  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4331  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4332  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4333  ** Syntax: static uint8 Fls_lUninitDET( const uint8 ServiceID )               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4334  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4335  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4336  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4337  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4338  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4339  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4340  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4341  ** Parameters (in) : JobResult                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4342  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4343  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4344  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4345  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4346  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4347  ** Description : This routine performs the UNINIT DET check                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4348  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4349  static uint8 Fls_lUninitDET( const uint8 ServiceID )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4350  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4351    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4352  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4353    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4354    #if (FLS_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4355    if(Fls_ConfigPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4356    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4357    if(Fls_ConfigPtr->FlsStateVarPtr->DriverInitialised == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4358    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4359    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4360       /* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4361       Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4362                         FLS_17_PMU_INSTANCE_ID,ServiceID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4363                        FLS_E_UNINIT);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4364  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4365       ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4366    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4367  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4368    return (ErrorFlag);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4369  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4370  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4371  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4372  ** Syntax: static uint8 Fls_lTimeOutDET( const uint8 ServiceID )              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4373  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4374  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4375  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4376  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4377  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4378  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4379  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4380  ** Parameters (in) : ServiceID                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4381  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4382  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4383  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4384  ** Return value    : ErrorFlag - DET has occured (1) or not (0)               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4385  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4386  ** Description : This routine performs the TIMEOUT DET check                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4387  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4388  static uint8 Fls_lTimeOutDET(const uint8 ServiceID)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4389  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4390    Fls_17_Pmu_StateType  *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4391    uint8 ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4392    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4393    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4394  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4395    ErrorFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4396    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4397    if (StatePtr->FlsTimeoutControl != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4398    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4399      if(StatePtr->JobStarted.Erase != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4400      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4401        if(StatePtr->FlsEraseTimeoutCycleCount == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4402        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4403          ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4404        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4405        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4406        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4407          StatePtr->FlsEraseTimeoutCycleCount--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4408        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4409      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4410      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4411      if(StatePtr->JobStarted.Write != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4412      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4413        if(StatePtr->FlsWriteTimeoutCycleCount == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4414        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4415          ErrorFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4416        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4417        else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4418        {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4419          StatePtr->FlsWriteTimeoutCycleCount--;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4420        }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4421      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4422      
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4423      if(ErrorFlag == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4424      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4425        /* Report timeout DEM */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4426        Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4427                       FLS_17_PMU_INSTANCE_ID,ServiceID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4428                       FLS_E_TIMEOUT);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4429      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4430    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4431    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4432    return ErrorFlag;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4433  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4434  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4435  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4436  ** Syntax: IFX_LOCAL_INLINE boolean Fls_lCheckWrittenPage(uint32 PageLength)  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4437  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4438  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4439  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4440  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4441  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4442  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4443  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4444  ** Parameters (in) : PageLength                                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4445  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4446  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4447  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4448  ** Return value    : TRUE - programing error , FALSE - No programming error   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4449  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4450  ** Description : Checks if the page was written without errors                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4451  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4452  IFX_LOCAL_INLINE boolean Fls_lCheckWrittenPage(uint32 PageLength)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4453  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4454    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4455    uint32          *PageStartAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4456    const uint32    *SourcePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4457    uint32          Count;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4458    boolean         Error;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4459    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4460    Count = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4461    Error = (boolean)FALSE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4462    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4463    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4464    SourcePtr = (const uint32 *)(const void *)(StatePtr->FlsWriteBufferPtr);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4465    /*IFX_MISRA_RULE_11_01_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4466    /*IFX_MISRA_RULE_11_03_STATUS=Flash address is converted to pointer*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4467    PageStartAddressPtr = (uint32 *)(void*)(StatePtr->FlsWriteAddress);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4468    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4469    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4470      if(*(PageStartAddressPtr)== *(SourcePtr))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4471      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4472        Count++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4473        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to efficiently
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4474          access the memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4475        PageStartAddressPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4476        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to efficiently
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4477          access the memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4478        SourcePtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4479      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4480      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4481      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4482        /* FLS056: If the block has been not completely reprogrammed  */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4483        /*         after Writing a Flash block.                       */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4484        #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4485        Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4486                         FLS_17_PMU_INSTANCE_ID,FLS_SID_MAIN,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4487                         FLS_E_VERIFY_WRITE_FAILED);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4488        #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4489        /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4490        Error = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4491        /*Nothing more to compare */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4492        Count = (PageLength/FLS_WORD_SIZE);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4493      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4494    }while(Count < (PageLength/FLS_WORD_SIZE));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4495    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4496    if(Error == (boolean)FALSE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4497    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4498      /* Check for Non-correctable ECC errors during the above check */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4499      if(Fls_lChkBitErrors())
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4500      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4501         /* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4502         #if (FLS_DEV_ERROR_DETECT == STD_ON)           
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4503         Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID,FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4504                          FLS_SID_MAIN,FLS_E_VERIFY_WRITE_FAILED);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4505         #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4506         Error = (boolean)TRUE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4507      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4508    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4509    return Error;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4510  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4511  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4512  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4513  ** Syntax: IFX_LOCAL_INLINE void Fls_lCalculateWriteTimeoutCount(void)        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4514  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4515  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4516  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4517  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4518  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4519  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4520  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4521  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4522  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4523  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4524  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4525  ** Return value    : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4526  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4527  ** Description : Calculates the write timeout count                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4528  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4529  IFX_LOCAL_INLINE void Fls_lCalculateWriteTimeoutCount(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4530  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4531    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4532    uint32          Length;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4533    uint32          WriteTimeOutCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4534    uint32          PageStartAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4535  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4536    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4537    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4538    PageStartAddress = StatePtr->FlsWriteAddress;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4539    Length = StatePtr->FlsWriteLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4540    /* Update Timeout count for write */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4541    WriteTimeOutCount =
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4542          (uint32)(FLS_17_PMU_WRITE_TIME / Fls_ConfigPtr->FlsCallCycle);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4543    if(WriteTimeOutCount == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4544    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4545      WriteTimeOutCount = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4546    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4547    else 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4548    { 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4549      if((FLS_17_PMU_WRITE_TIME % Fls_ConfigPtr->FlsCallCycle) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4550      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4551        WriteTimeOutCount++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4552      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4553    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4554  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4555    StatePtr->FlsWriteTimeoutCycleCount = WriteTimeOutCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4556  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4557    while(Length > FLS_PAGE_SIZE)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4558    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4559      if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4560          ((PageStartAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4561      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4562        Length -= FLS_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4563        PageStartAddress += FLS_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4564      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4565      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4566      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4567        Length -= FLS_BURST_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4568        PageStartAddress += FLS_BURST_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4569      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4570      StatePtr->FlsWriteTimeoutCycleCount += WriteTimeOutCount;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4571    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4572    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4573    /* Add one extra count since MainFunction needs to be called once after
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4574       all the data is written for checking errors and to set status */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4575    StatePtr->FlsWriteTimeoutCycleCount += 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4576  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4577  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4578  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4579  ** Syntax: IFX_LOCAL_INLINE Std_ReturnType Fls_lPageEraseCheck(               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4580  **                                            const uint32* AddrCheckPtr,     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4581  **                                                  uint32  Length,           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4582  **                                            const uint8   ServiceID)        **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4583  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4584  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4585  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4586  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4587  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4588  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4589  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4590  ** Parameters (in) : AddrCheckPtr - address of the page, Length - page length **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4591  **                   ServiceID - Service ID of the API for the DET            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4592  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4593  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4594  ** Return value    : E_OK - page was erased correctly                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4595  **                   E_NOT_OK - Page was not erased correctly                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4596  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4597  ** Description : Checks if the page was erased correctly                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4598  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4599  IFX_LOCAL_INLINE Std_ReturnType Fls_lPageEraseCheck(const uint32 * AddrCheckPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4600                                                      uint32 Length,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4601                                                      const uint8 ServiceID)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4602  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4603    Std_ReturnType  RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4604    uint8           Loop;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4605    uint8           PageLength;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4606    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4607    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4608    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4609    Loop = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4610    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4611    /*IFX_MISRA_RULE_11_01_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4612      bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4613    /*IFX_MISRA_RULE_11_03_STATUS=Pointer is typecasted to uint32 for performing
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4614      bit-wise operation*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4616        ((((uint32)AddrCheckPtr) & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4617    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4618      PageLength = FLS_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4619    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4620    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4621    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4622      PageLength = FLS_BURST_PAGE_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4623    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4624    /* convert page length in bytes to Word Length */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4625    PageLength = PageLength/FLS_WORD_SIZE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4626    do
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4627    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4629      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4630         Loop++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4631         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to efficiently
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4632           access the memory*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4633         AddrCheckPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4634      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4635      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4636      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4637         /* FLS055: Before Writing if block is not completely erased.*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4638         /* Call to Fls_lErrorHandler local function */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4639         #if (FLS_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4640         Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4641                          FLS_17_PMU_INSTANCE_ID,ServiceID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4642                          FLS_E_VERIFY_ERASE_FAILED);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4643         #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4644  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4645         RetVal = E_NOT_OK; /* Return from FSunction */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4646      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4648    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4649    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4650  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4651  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4652  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4653  ** Syntax : IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckEraseDet(               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4654  **                                         Fls_AddressType TargetAddress,     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4655  **                                         Fls_LengthType Length)             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4656  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4657  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4658  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4659  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4660  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4661  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4662  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4663  ** Parameters (in) :  TargetAddress and Length                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4664  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4665  ** Parameters (out): E_OK: No development Error detected                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4666  **                   E_NOT_OK: development Error is detected                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4667  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4668  ** Return value    :  Std_ReturnType                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4669  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4670  ** Description : This routine checks for development error for                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4671  **               Fls_17_Pmu_Erase API                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4672  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4673  IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckEraseDet(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4674                                                  Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4675                                                  Fls_LengthType Length)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4676  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4677    Fls_17_Pmu_StateType*   StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4678    Std_ReturnType   ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4679  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4680    /* API called before initialization? */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4681    if(Fls_lUninitDET(FLS_SID_ERASE) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4682    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4683      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4684    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4685  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4686    /* Checking whether given TargetAddress is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4687    else if(!(((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK0_LINEAR) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4688          ((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK1_LINEAR)))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4689    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4690      /* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4691      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4692                       FLS_17_PMU_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4693                       FLS_SID_ERASE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4694                       FLS_E_PARAM_ADDRESS);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4695  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4696      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4697    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4698  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4699    /* Checking whether given Length is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4700    else if( (Length == (Fls_LengthType)0) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4701        (!(((TargetAddress + Length) == FLS_SECTOR_SIZE) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4702         ((TargetAddress + Length) == FLS_TOTAL_SIZE))))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4703    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4704      /* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4705      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4706                        FLS_17_PMU_INSTANCE_ID,FLS_SID_ERASE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4707                        FLS_E_PARAM_LENGTH);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4708  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4709      ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4710    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4711    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4712    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4713      StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4714  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4715      if(Fls_lBusyDET_Erase(StatePtr) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4716      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4717        ReturnValue = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4718      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4719      else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4720      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4721        ReturnValue = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4722      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4723    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4724  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4725    return ReturnValue;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4726  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4727  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4728  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4729  ** Syntax : IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckWriteDet(               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4730  **                                         Fls_AddressType TargetAddress,     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4731  **                                         const uint8 *SourceAddressPtr,     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4732  **                                         Fls_LengthType Length)             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4733  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4734  ** Service ID:  None                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4735  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4736  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4737  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4738  ** Reentrancy:  Non reentrant                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4739  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4740  ** Parameters (in) :  TargetAddress, SourceAddressPtr and Length              **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4741  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4742  ** Parameters (out): E_OK: No development Error detected                      **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4743  **                   E_NOT_OK: development Error is detected                  **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4744  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4745  ** Return value    :  Std_ReturnType                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4746  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4747  ** Description : This routine checks for development error for                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4748  **               Fls_17_Pmu_Write API                                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4749  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4750  IFX_LOCAL_INLINE Std_ReturnType Fls_lCheckWriteDet(
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4751                                                   Fls_AddressType TargetAddress,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4752                                                   const uint8 *SourceAddressPtr,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4753                                                   Fls_LengthType Length)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4754  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4755    Std_ReturnType  RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4756  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4757    RetVal = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4758  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4759    /* API called before initialization */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4760    if(Fls_lUninitDET(FLS_SID_WRITE) == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4761    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4762      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4763    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4764    /* Checking whether given TargetAddress is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4765    else if( (TargetAddress > (FLS_TOTAL_SIZE - FLS_PAGE_SIZE)) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4766           ((TargetAddress & PAGE_SIZE_MASK) != 0U) )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4767    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4768      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4769                       FLS_17_PMU_INSTANCE_ID,FLS_SID_WRITE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4770                       FLS_E_PARAM_ADDRESS);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4771  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4772      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4773    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4774    /* Checking whether given Length is valid or not */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4776            || ((TargetAddress + Length) > FLS_TOTAL_SIZE)))
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4777    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4778      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4779                       FLS_17_PMU_INSTANCE_ID,FLS_SID_WRITE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4780                       FLS_E_PARAM_LENGTH);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4781  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4782      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4783    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4784    /* Check for Pointer to an application buffer */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4785    else if(SourceAddressPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4786    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4787      Det_ReportError( (uint16)FLS_17_PMU_MODULE_ID, 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4788                        FLS_17_PMU_INSTANCE_ID,FLS_SID_WRITE,
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4789                       FLS_E_PARAM_DATA);/* Report to DET */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4790  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4791      RetVal = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4792    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4793    else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4794    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4795      /* dummy else */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4796    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4797  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4798    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4799  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4800  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4801  #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4802  /* FLS_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4803  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4804  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4805  ** Syntax:IFX_LOCAL_INLINE uint8 Fls_lGetWriteMode(void);                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4806  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4807  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4808  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4809  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4810  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4811  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4812  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4813  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4814  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4815  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4816  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4817  ** Return value    : PAGE_WRITE - Page write to be done                       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4818  **                   BURST_WRITE - Burst write to be done                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4819  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4820  ** Description : This function checks whether Burst Write can be performed or **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4821  **               Page Write has to be performed                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4822  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4823  IFX_LOCAL_INLINE uint8 Fls_lGetWriteMode(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4824  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4825    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4826    uint8           RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4827   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4828    RetVal = BURST_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4829    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4830    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4832         ((StatePtr->FlsWriteAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4833    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4834      RetVal = PAGE_WRITE;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4835    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4836    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4837    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4838  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4839  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4840  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4841  ** Syntax:IFX_LOCAL_INLINE Fls_LengthType Fls_lGetReadModeLength(void);       **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4842  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4843  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4844  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4845  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4846  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4847  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4848  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4849  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4850  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4851  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4852  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4853  ** Return value    : max read length as per read mode                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4854  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4855  ** Description : Get max read length according to the FLS mode                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4856  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4857  IFX_LOCAL_INLINE Fls_LengthType Fls_lGetReadModeLength(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4858  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4859    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4860    Fls_LengthType  MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4861   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4862    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4863    MaxRead = Fls_ConfigPtr->FlsFastRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4864    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4865    if(StatePtr->FlsMode == MEMIF_MODE_SLOW)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4866    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4867      MaxRead = Fls_ConfigPtr->FlsSlowRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4868    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4869    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4870    return MaxRead;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4871  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4872  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4873  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4874  ** Syntax: IFX_LOCAL_INLINE uint32 Fls_lChkSeqProtErrors(void)                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4875  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4876  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4877  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4878  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4879  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4880  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4881  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4882  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4883  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4884  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4885  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4886  ** Return value    : Seq and protection bits of FSR                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4887  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4888  ** Description : Checks for seq and protection errors                         **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4889  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4890  IFX_LOCAL_INLINE uint32 Fls_lChkSeqProtErrors(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4891  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4892    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4893    #ifndef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4894    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4895    RetVal =(((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4896                                TestFls_DebugMask) & FLS_PROER_SQER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4897    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4898    RetVal = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4899                                                     FLS_PROER_SQER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4900    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4901    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4902    RetVal = (FlsEmulation_ReadStatusRegister() & FLS_PROER_SQER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4903    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4904   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4905   return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4906  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4907  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4908  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4909  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4910  ** Syntax: IFX_LOCAL_INLINE uint32 Fls_lChkOperError(void)                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4911  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4912  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4913  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4914  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4915  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4916  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4917  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4918  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4919  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4920  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4921  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4922  ** Return value    : operational error bit of FSR                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4923  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4924  ** Description : Checks for operational error                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4925  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4926  IFX_LOCAL_INLINE uint32 Fls_lChkOperError(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4927  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4928    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4929    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4930    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4931    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4932  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4933    #ifndef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4934    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4935    RetVal = (( (uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4936                                       TestFls_DebugMask) & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4937    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4938    RetVal = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4939                                                          FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4940    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4941    #else 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4942    RetVal = (FlsEmulation_ReadStatusRegister() & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4943    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4944    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4946    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4947      StatePtr->FlsOper = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4948    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4949    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4951    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4952      RetVal = FLS_OPER_ERROR;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4954      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4955         /* FlsIllegalStateNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4956         (Fls_ConfigPtr->FlsIllegalStateNotificationPtr)();
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4957      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4958    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4959    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4960    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4961  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4962  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4963  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4964  ** Syntax: IFX_LOCAL_INLINE uint32 Fls_lChkOperError_initmode(void)           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4965  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4966  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4967  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4968  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4969  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4970  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4971  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4972  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4973  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4974  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4975  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4976  ** Return value    : operational error bit of FSR                             **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4977  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4978  ** Description : Checks for operational error in init stage                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4979  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4980  IFX_LOCAL_INLINE uint32 Fls_lChkOperError_initmode(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4981  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4982    Fls_17_Pmu_StateType   *StatePtr;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4983    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4984    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4985    StatePtr = Fls_ConfigPtr->FlsStateVarPtr;
	ld.a	a15,[a12]
.L939:
	ld.a	a15,[a15]
.L940:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4986  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4987    #ifndef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4988    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4989    RetVal = (( (uint32)FLS_SFR_INIT_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4990                                       TestFls_DebugMask) & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4991    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4992    RetVal = ((uint32)FLS_SFR_INIT_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4993                                                          FLS_OPER_ERROR);
	mov	d0,#2048
.L1269:
	movh.a	a2,#63488
	ld.w	d15,[a2]@los(0xf8002010)
.L942:
	and	d15,d0
.L1270:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4999    if(RetVal != 0U)      (inlined)
	jeq	d15,#0,.L7
.L1271:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4994    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4995    #else 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4996    RetVal = (FlsEmulation_ReadStatusRegister() & FLS_OPER_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4997    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4998    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4999    if(RetVal != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5000    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5001      StatePtr->FlsOper = 1U;
	mov	d1,#1
.L1272:
	st.b	[a15]44,d1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4999    if(RetVal != 0U)      (inlined)
.L7:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5002    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5003    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5004    if(StatePtr->FlsOper != 0U)
	ld.bu	d1,[a15]44
.L1273:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5004    if(StatePtr->FlsOper != 0U)      (inlined)
	jeq	d1,#0,.L8
.L1274:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5005    {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5006      RetVal = FLS_OPER_ERROR;
	mov	d15,d0
.L1275:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5007      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)
	ld.a	a15,[a12]
.L941:
	ld.a	a15,[a15]20
.L1276:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5007      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
	jz.a	a15,.L9
.L1277:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5008      {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5009         /* FlsIllegalStateNotificationPtr should be called */
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5010         (Fls_ConfigPtr->FlsIllegalStateNotificationPtr)();
	calli	a15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5007      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
.L9:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5004    if(StatePtr->FlsOper != 0U)      (inlined)
.L8:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5014    return (RetVal);      (inlined)
	j	.L10

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5015  }      (inlined)
.L10:
	jeq	d15,#0,.L11
.L11:
.L6:
.L3:
	ret
.L561:
	
__Fls_17_Pmu_Init_function_end:
	.size	Fls_17_Pmu_Init,__Fls_17_Pmu_Init_function_end-Fls_17_Pmu_Init
.L438:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Erase',code,cluster('Fls_17_Pmu_Erase')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Erase'
	.align	2
	
	.global	Fls_17_Pmu_Erase
; Function Fls_17_Pmu_Erase
.L383:
Fls_17_Pmu_Erase:	.type	func
	sub.a	a10,#8
.L943:
	mov	e8,d5,d4
.L588:
	mov	d4,#1
.L945:
	call	Fls_lUninitDET
.L944:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4681    if(Fls_lUninitDET(FLS_SID_ERASE) == 1U)      (inlined)
	jne	d2,#1,.L12
.L1282:
	mov	d15,#1
.L946:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4683      ReturnValue = E_NOT_OK;      (inlined)
	j	.L13

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4681    if(Fls_lUninitDET(FLS_SID_ERASE) == 1U)      (inlined)
.L12:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4687    else if(!(((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK0_LINEAR) ||      (inlined)
	jeq	d8,#0,.L14
.L947:
	mov	d15,#16384
.L948:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4688          ((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK1_LINEAR)))      (inlined)
	jeq	d15,d8,.L15
.L949:
	mov	d4,#92
.L1283:
	mov	d5,#0
.L1284:
	mov	d6,#1
.L1285:
	mov	d7,#2
	call	Det_ReportError
.L1286:
	mov	d15,#1
.L950:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4694                       FLS_E_PARAM_ADDRESS);      (inlined)
	j	.L16

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4687    else if(!(((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK0_LINEAR) ||      (inlined)
.L15:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4688          ((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK1_LINEAR)))      (inlined)
.L14:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4700    else if( (Length == (Fls_LengthType)0) ||      (inlined)
	jeq	d9,#0,.L17
.L951:
	mov	d0,#16384
.L952:
	add	d15,d8,d9
.L953:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4701        (!(((TargetAddress + Length) == FLS_SECTOR_SIZE) ||      (inlined)
	jeq	d15,d0,.L18
.L1287:
	mov.u	d0,#32768
.L1288:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4702         ((TargetAddress + Length) == FLS_TOTAL_SIZE))))      (inlined)
	jeq	d15,d0,.L19

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4700    else if( (Length == (Fls_LengthType)0) ||      (inlined)
.L17:
	mov	d4,#92
.L1289:
	mov	d5,#0
.L1290:
	mov	d6,#1
.L1291:
	mov	d7,#3
	call	Det_ReportError
.L1292:
	mov	d15,#1
.L954:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4707                        FLS_E_PARAM_LENGTH);      (inlined)
	j	.L20

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4700    else if( (Length == (Fls_LengthType)0) ||      (inlined)
.L19:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4702         ((TargetAddress + Length) == FLS_TOTAL_SIZE))))      (inlined)
.L18:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1293:
	ld.a	a15,[a15]
.L598:
	lea	a2,[a15]42
.L955:
	mov	d0,#0
.L957:
	ld.bu	d15,[a2]
.L1294:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4320    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jne	d15,#0,.L21
.L1295:
	ld.bu	d15,[a15]43
.L1296:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4320    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jeq	d15,#0,.L22
.L21:
	mov	d4,#92
.L1297:
	mov	d5,#0
.L1298:
	mov	d6,#1
.L1299:
	mov	d7,#6
	call	Det_ReportError
.L956:
	mov	d0,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4320    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
.L22:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4329    return(ErrorFlag);      (inlined)
	j	.L23

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4330  }      (inlined)
.L23:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4715      if(Fls_lBusyDET_Erase(StatePtr) == 1U)      (inlined)
	eq	d15,d0,#1
.L599:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4717        ReturnValue = E_NOT_OK;      (inlined)
	j	.L25

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4715      if(Fls_lBusyDET_Erase(StatePtr) == 1U)      (inlined)
.L24:
	mov	d15,#0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4719      else      (inlined)
.L25:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4711    else      (inlined)
.L20:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4700    else if( (Length == (Fls_LengthType)0) ||      (inlined)
.L16:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4687    else if(!(((FLS_BASE_ADDRESS+(uint32)TargetAddress) == DFLASH_BANK0_LINEAR) ||      (inlined)
.L13:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4725    return ReturnValue;      (inlined)
	j	.L26

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4726  }      (inlined)
.L26:
	jne	d15,#1,.L27
.L589:
	mov	d10,#1
.L959:
	j	.L28
.L27:
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a15,[a12]
.L1300:
	ld.a	a15,[a15]
.L960:
	mov	d0,#2048
.L1301:
	movh.a	a13,#63488
	lea	a13,[a13]@los(0xf8002010)
	ld.w	d10,[a13]
.L962:
	and	d10,d0
.L1302:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
	jeq	d10,#0,.L29
.L1303:
	mov	d15,#1
.L958:
	st.b	[a15]44,d15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
.L29:
	ld.bu	d15,[a15]44
.L1304:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
	jeq	d15,#0,.L30
.L1305:
	mov	d10,d0
.L1306:
	ld.a	a15,[a12]
.L961:
	ld.a	a15,[a15]20
.L1307:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
	jz.a	a15,.L31
.L1308:
	calli	a15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
.L31:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
.L30:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4960    return (RetVal);      (inlined)
	j	.L32

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4961  }      (inlined)
.L32:
	jne	d10,#0,.L33
.L607:
	mov	d10,#0
.L963:
	ld.a	a15,[a12]
.L1309:
	ld.a	a15,[a15]
.L964:
	movh	d15,#44800
.L1310:
	st.w	[a10],d15
.L1311:
	mov	d15,#0
.L965:
	insert	d11,d11,d15,#0,#8
.L1312:
	mov	d15,#0
.L1313:
	insert	d11,d11,d15,#8,#8
.L1314:
	mov	d15,#16384
.L966:
	add	d9,d8
.L967:
	jlt.u	d15,d9,.L34
.L1315:
	mov	d15,#2
.L1316:
	insert	d11,d11,d15,#0,#8
.L1317:
	j	.L35
.L34:
	jne	d15,d8,.L36
.L968:
	mov	d15,#2
.L1318:
	insert	d11,d11,d15,#8,#8
.L1319:
	mov	d15,#16384
	addih	d15,d15,#44800
.L1320:
	st.w	[a10],d15
.L1321:
	j	.L37
.L36:
	mov	d15,#2
.L1322:
	insert	d11,d11,d15,#0,#8
.L1323:
	mov	d15,#2
.L1324:
	insert	d11,d11,d15,#8,#8
.L37:
.L35:
	mov	d4,#2
	call	Fls_lLoadAccessCode
.L1325:
	mov	d15,#2
.L1326:
	st.w	[a15]32,d15
.L1327:
	ld.bu	d15,[a15]42
.L1328:
	extr.u	d0,d11,#0,#8
.L1329:
	or	d15,d0
	st.b	[a15]42,d15
.L1330:
	ld.bu	d15,[a15]43
.L1331:
	extr.u	d0,d11,#8,#8
.L1332:
	or	d15,d0
	st.b	[a15]43,d15
.L1333:
	ld.bu	d15,[a15]46
.L1334:
	jeq	d15,#0,.L38
.L1335:
	ld.a	a2,[a12]
.L1336:
	lea	a2,[a2]36
.L1337:
	mov	d15,#15625
	sh	d15,#6
.L1338:
	ld.w	d0,[a2]
.L1339:
	div.u	e0,d15,d0
.L1340:
	st.w	[a15]8,d0
.L1341:
	ld.w	d0,[a2]
.L1342:
	div.u	e0,d15,d0
.L1343:
	jeq	d1,#0,.L39
.L1344:
	ld.w	d15,[a15]8
.L1345:
	add	d15,#1
	st.w	[a15]8,d15
.L39:
	extr.u	d15,d11,#0,#8
.L1346:
	jne	d15,#2,.L40
.L1347:
	extr.u	d15,d11,#8,#8
.L1348:
	jne	d15,#2,.L41
.L1349:
	ld.w	d15,[a15]8
	sh	d15,#1
.L1350:
	st.w	[a15]8,d15
.L41:
.L40:
.L38:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5011      }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5012    }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5013    
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5014    return (RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5015  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5016  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5017  ** Syntax: IFX_LOCAL_INLINE uint32 Fls_lChkBitErrors(void)                    **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5018  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5019  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5020  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5021  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5022  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5023  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5024  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5025  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5026  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5027  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5028  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5029  ** Return value    : Non correctable bit of FSR                               **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5030  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5031  ** Description : Checks for double ECC errors                                 **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5032  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5033  IFX_LOCAL_INLINE uint32 Fls_lChkBitErrors(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5034  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5035    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5036    #ifndef FLS_RAM_EMULATION_TEST
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5037    #ifdef IFX_FLS_DEBUG
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5038    RetVal = (( (uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5039                                       TestFls_DebugMask ) & FLS_BIT_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5040    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5041    RetVal = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5042                                                             FLS_BIT_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5043    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5044    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5045    RetVal = (FlsEmulation_ReadStatusRegister() & FLS_BIT_ERROR);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5046    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5047   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5048   return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5049  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5050  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5051  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5052  ** Syntax: IFX_LOCAL_INLINE uint32 Fls_lHWBusyCheck(void)                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5053  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5054  ** Service ID: None                                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5055  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5056  ** Sync/Async:  Synchronous                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5057  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5058  ** Reentrancy:  Non Re-entrant                                                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5059  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5060  ** Parameters (in) : None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5061  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5062  ** Parameters (out): None                                                     **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5063  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5064  ** Return value    : Busy bit of FSR                                          **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5065  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5066  ** Description : Checks for Busy status of the Data Flash Bank                **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5067  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5068  IFX_LOCAL_INLINE uint32 Fls_lHWBusyCheck(void)
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5069  {
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5070    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5071  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5072    #ifdef IFX_FLS_DEBUG07
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5073    RetVal = (( (uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) | \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5074                                          TestFls_DebugMask07 ) & FLS_D0BUSY);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5075    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5076    #ifdef IFX_FLS_DEBUG08
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5077    RetVal = (( (uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5078                                       TestFls_DebugMask08 ) & FLS_D0BUSY);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5079    #else
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5080    RetVal = ((uint32)FLS_SFR_RUNTIME_USER_MODE_READ32(FLASH0_FSR.U) & \ 
	ld.w	d15,[a13]
.L969:
	and	d15,#2
.L1351:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L42

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L42:
	jne	d15,#0,.L43
.L612:
	ld.bu	d15,[a15]41
.L970:
	or	d15,#4
	st.b	[a15]41,d15
.L1352:
	call	Fls_lSchMEnter_Erase
.L1353:
	ld.w	d4,[a10]
	call	Fls_CallEraseCommand
.L1354:
	call	Fls_lSchMExit_Erase
.L616:
	ld.w	d15,[a13]
.L1355:
	mov	d0,#12288
.L971:
	and	d15,d0
.L1356:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4905   return RetVal;      (inlined)
	j	.L44

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4906  }      (inlined)
.L44:
	jeq	d15,#0,.L45
.L617:
	mov	d10,#1
.L1357:
	call	Fls_lDemReportError_Erase
.L1358:
	mov	d4,#2
	call	Fls_lErrorHandler
.L1359:
	j	.L46
.L45:
	ld.bu	d15,[a15]45
.L972:
	jne	d15,#2,.L47
.L1360:
	mov	d10,#1
.L1361:
	mov	d4,#2
	call	Fls_lErrorHandler
.L1362:
	j	.L48
.L47:
.L48:
.L46:
.L43:
	j	.L49
.L33:
	mov	d10,#1
.L49:
.L28:
	mov	d2,d10
.L973:
	j	.L50
.L50:
	ret
.L578:
	
__Fls_17_Pmu_Erase_function_end:
	.size	Fls_17_Pmu_Erase,__Fls_17_Pmu_Erase_function_end-Fls_17_Pmu_Erase
.L443:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Write',code,cluster('Fls_17_Pmu_Write')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Write'
	.align	2
	
	.global	Fls_17_Pmu_Write
; Function Fls_17_Pmu_Write
.L385:
Fls_17_Pmu_Write:	.type	func
	sub.a	a10,#16
.L974:
	mov	d8,d4
.L977:
	st.a	[a10]8,a4
.L979:
	mov	d9,d5
.L980:
	mov	d10,#0
.L633:
	mov	d11,#0
.L981:
	mov	d4,#2
.L976:
	call	Fls_lUninitDET
.L975:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4760    if(Fls_lUninitDET(FLS_SID_WRITE) == 1U)      (inlined)
	jne	d2,#1,.L51
.L1367:
	mov	d11,#1
.L1368:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4762      RetVal = E_NOT_OK;      (inlined)
	j	.L52

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4760    if(Fls_lUninitDET(FLS_SID_WRITE) == 1U)      (inlined)
.L51:
	mov	d0,#32760
.L1369:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4765    else if( (TargetAddress > (FLS_TOTAL_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jlt.u	d0,d8,.L53
.L1370:
	and	d15,d8,#7
.L1371:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4766           ((TargetAddress & PAGE_SIZE_MASK) != 0U) )      (inlined)
	jeq	d15,#0,.L54

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4765    else if( (TargetAddress > (FLS_TOTAL_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L53:
	mov	d4,#92
.L1372:
	mov	d5,#0
.L1373:
	mov	d6,#2
.L1374:
	mov	d7,#2
	call	Det_ReportError
.L1375:
	mov	d11,#1
.L1376:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4770                       FLS_E_PARAM_ADDRESS);/* Report to DET */      (inlined)
	j	.L55

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4765    else if( (TargetAddress > (FLS_TOTAL_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L54:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)      (inlined)
	jeq	d9,#0,.L56
.L1377:
	and	d15,d9,#7
.L1378:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)      (inlined)
	jne	d15,#0,.L57
.L1379:
	add	d15,d8,d9
.L1380:
	mov.u	d0,#32768
.L1381:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4776            || ((TargetAddress + Length) > FLS_TOTAL_SIZE)))      (inlined)
	jge.u	d0,d15,.L58
.L57:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)      (inlined)
.L56:
	mov	d4,#92
.L1382:
	mov	d5,#0
.L1383:
	mov	d6,#2
.L1384:
	mov	d7,#3
	call	Det_ReportError
.L1385:
	mov	d11,#1
.L1386:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4780                       FLS_E_PARAM_LENGTH);/* Report to DET */      (inlined)
	j	.L59

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)      (inlined)
.L58:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4785    else if(SourceAddressPtr == NULL_PTR)      (inlined)
	ld.a	a15,[a10]8
.L983:
	jnz.a	a15,.L60
.L1387:
	mov	d4,#92
.L1388:
	mov	d5,#0
.L1389:
	mov	d6,#2
.L1390:
	mov	d7,#4
	call	Det_ReportError
.L1391:
	mov	d11,#1
.L1392:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4789                       FLS_E_PARAM_DATA);/* Report to DET */      (inlined)
	j	.L61

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4785    else if(SourceAddressPtr == NULL_PTR)      (inlined)
.L60:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4793    else      (inlined)
.L61:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4785    else if(SourceAddressPtr == NULL_PTR)      (inlined)
.L59:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4775    else if((Length == 0U) || (((Length & PAGE_SIZE_MASK) != 0U)      (inlined)
.L55:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4765    else if( (TargetAddress > (FLS_TOTAL_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L52:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4798    return RetVal;      (inlined)
	j	.L62

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4799  }      (inlined)
.L62:
	jne	d11,#1,.L63
.L634:
	mov	d10,#1
.L1393:
	j	.L64
.L63:
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a15,[a12]
.L1394:
	ld.a	a13,[a15]
.L984:
	mov	d15,#0
.L985:
	insert	d11,d11,d15,#0,#8
.L982:
	mov	d15,#0
.L1395:
	insert	d11,d11,d15,#8,#8
.L1396:
	movh	d0,#44800
.L1397:
	add	d12,d8,d0
.L1398:
	mov	d1,#16384
.L1399:
	add	d15,d8,d9
.L1400:
	jlt.u	d1,d15,.L65
.L1401:
	mov	d15,#1
.L1402:
	insert	d11,d11,d15,#0,#8
.L1403:
	mov.a	a15,d12
.L986:
	st.a	[a10]4,a15
.L987:
	st.w	[a10],d0
.L1404:
	j	.L66
.L65:
	jlt.u	d8,d1,.L67
.L1405:
	mov	d15,#1
.L1406:
	insert	d11,d11,d15,#8,#8
.L1407:
	mov.a	a15,d12
.L988:
	st.a	[a10]4,a15
.L989:
	mov	d15,#16384
	addih	d15,d15,#44800
.L1408:
	st.w	[a10],d15
.L1409:
	j	.L68
.L67:
	mov	d15,#1
.L1410:
	insert	d11,d11,d15,#0,#8
.L1411:
	mov	d15,#1
.L1412:
	insert	d11,d11,d15,#8,#8
.L1413:
	mov.a	a15,d12
.L990:
	st.a	[a10]4,a15
.L991:
	st.w	[a10],d0
.L68:
.L66:
	lea	a15,[a13]42
.L992:
	mov	d0,#0
.L994:
	ld.bu	d15,[a15]
.L1414:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4276    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jne	d15,#0,.L69
.L1415:
	ld.bu	d15,[a13]43
.L1416:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4276    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jeq	d15,#0,.L70
.L69:
	mov	d4,#92
.L1417:
	mov	d5,#0
.L1418:
	mov	d6,#2
.L1419:
	mov	d7,#6
	call	Det_ReportError
.L995:
	mov	d0,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4276    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
.L70:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4285    return(ErrorFlag);      (inlined)
	j	.L71

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4286  }      (inlined)
.L71:
	jne	d0,#1,.L72
.L644:
	mov	d10,#1
.L1420:
	j	.L73
.L72:
	ld.a	a15,[a12]
.L993:
	ld.a	a15,[a15]
.L997:
	mov	d0,#2048
.L996:
	movh.a	a14,#63488
	lea	a14,[a14]@los(0xf8002010)
	ld.w	d8,[a14]
.L978:
	and	d8,d0
.L1421:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
	jeq	d8,#0,.L74
.L1422:
	mov	d15,#1
.L1423:
	st.b	[a15]44,d15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
.L74:
	ld.bu	d15,[a15]44
.L1424:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
	jeq	d15,#0,.L75
.L1425:
	mov	d8,d0
.L1426:
	ld.a	a15,[a12]
.L998:
	ld.a	a15,[a15]20
.L1427:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
	jz.a	a15,.L76
.L1428:
	calli	a15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
.L76:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
.L75:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4960    return (RetVal);      (inlined)
	j	.L77

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4961  }      (inlined)
.L77:
	jne	d8,#0,.L78
.L650:
	mov	d4,#1
	call	Fls_lLoadAccessCode
.L1429:
	mov	d15,#2
.L1430:
	st.w	[a13]32,d15
.L1431:
	st.w	[a13]4,d12
.L1432:
	st.w	[a13]20,d9
.L1433:
	ld.a	a15,[a10]8
.L1000:
	st.a	[a13]28,a15
.L1434:
	ld.bu	d15,[a13]42
.L1435:
	extr.u	d0,d11,#0,#8
.L1436:
	or	d15,d0
	st.b	[a13]42,d15
.L1437:
	ld.bu	d15,[a13]43
.L1438:
	extr.u	d0,d11,#8,#8
.L1439:
	or	d15,d0
	st.b	[a13]43,d15
.L1440:
	ld.bu	d15,[a13]46
.L1441:
	jeq	d15,#0,.L79
.L654:
	ld.a	a2,[a12]
.L1442:
	ld.a	a15,[a2]
.L1001:
	ld.w	d0,[a15]4
.L1002:
	ld.w	d1,[a15]20
.L1003:
	ld.w	d2,[a2]36
.L1443:
	mov	d15,#150
.L1444:
	div.u	e4,d15,d2
.L1004:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4543    if(WriteTimeOutCount == 0U)      (inlined)
	jne	d4,#0,.L80
.L1445:
	mov	d4,#1
.L1446:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4545      WriteTimeOutCount = 1U;      (inlined)
	j	.L81

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4543    if(WriteTimeOutCount == 0U)      (inlined)
.L80:
	mov	d15,#150
.L1447:
	div.u	e2,d15,d2
.L1448:
	cadd	d4,d3,d4,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4549      if((FLS_17_PMU_WRITE_TIME % Fls_ConfigPtr->FlsCallCycle) != 0U)      (inlined)
.L82:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4547    else       (inlined)
.L81:
	st.w	[a15]12,d4
.L1449:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4557    while(Length > FLS_PAGE_SIZE)      (inlined)
	j	.L83
.L84:
	mov	d15,#24
.L1450:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4559      if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d15,d1,.L85
.L1451:
	and	d15,d0,#31
.L1452:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4560          ((PageStartAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L86

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4559      if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L85:
	add	d1,#-8
.L1453:
	add	d0,d0,#8
.L1454:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4562        Length -= FLS_PAGE_SIZE;      (inlined)
	j	.L87

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4559      if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L86:
	add	d1,d1,#-32
.L1455:
	add	d0,d0,#32

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4565      else      (inlined)
.L87:
	ld.w	d15,[a15]12
.L1456:
	add	d15,d4
	st.w	[a15]12,d15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4557    while(Length > FLS_PAGE_SIZE)      (inlined)
.L83:
	jge.u	d1,#9,.L84
.L1457:
	ld.w	d15,[a15]12
.L1458:
	add	d15,#1
	st.w	[a15]12,d15
.L79:
	ld.w	d15,[a14]
.L1005:
	and	d15,#2
.L1459:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L88

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L88:
	jne	d15,#0,.L89
.L660:
	mov.a	a15,d12
.L1460:
	mov	d11,#2
.L663:
	mov	d0,#0
.L1007:
	mov	d8,#0
.L999:
	mov	d15,#24
.L1006:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d15,d9,.L90
.L1461:
	ld.a	a2,[a10]4
.L1010:
	mov.d	d15,a2
.L1011:
	and	d15,#31
.L1012:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4616        ((((uint32)AddrCheckPtr) & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L91

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L90:
	mov	d15,#8
.L1013:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4618      PageLength = FLS_PAGE_SIZE;      (inlined)
	j	.L92

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L91:
	mov	d15,#32

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4620    else      (inlined)
.L92:
	sh	d9,d15,#-2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
.L93:
	ld.w	d15,[a15]
.L1462:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
	jne	d15,#0,.L94
.L1463:
	add	d8,#1
.L1009:
	extr.u	d8,d8,#0,#8
.L1014:
	add.a	a15,#4
.L1464:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4630         Loop++;      (inlined)
	j	.L95

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
.L94:
	mov	d4,#92
.L1465:
	mov	d5,#0
.L1466:
	mov	d7,#7
	mov	d6,d11
	call	Det_ReportError
.L1008:
	mov	d0,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4635      else      (inlined)
.L95:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
	jne	d0,#0,.L96
.L1467:
	jlt.u	d8,d9,.L93
.L96:
	mov	d15,d0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4649    return RetVal;      (inlined)
	j	.L97

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4650  }      (inlined)
.L97:
	jne	d15,#1,.L98
.L1468:
	mov	d4,#1
	call	Fls_lErrorHandler
.L1015:
	mov	d10,#1
.L1469:
	j	.L99
.L98:
	ld.bu	d15,[a13]41
.L1470:
	or	d15,#2
	st.b	[a13]41,d15
.L1471:
	call	Fls_lSchMEnter_Write
.L675:
	mov	d5,#1
.L1016:
	ld.a	a15,[a12]
.L1472:
	ld.a	a15,[a15]
.L1017:
	ld.w	d15,[a15]20
.L1473:
	mov	d0,#24
.L1474:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d0,d15,.L100
.L1475:
	ld.w	d15,[a15]4
.L1476:
	and	d15,#31
.L1477:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4832         ((StatePtr->FlsWriteAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L101

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L100:
	mov	d5,#0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L101:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4837    return RetVal;      (inlined)
	j	.L102

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4838  }      (inlined)
.L102:
	ld.w	d4,[a10]
.L1478:
	mov.aa	a4,a13
.L678:
	call	Fls_CallWriteCommand
.L679:
	call	Fls_lSchMExit_Write
.L682:
	ld.w	d15,[a14]
.L1479:
	mov	d0,#12288
.L1018:
	and	d15,d0
.L1480:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4905   return RetVal;      (inlined)
	j	.L103

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4906  }      (inlined)
.L103:
	jeq	d15,#0,.L104
.L683:
	call	Fls_lDemReportError_Write
.L1481:
	mov	d4,#1
	call	Fls_lErrorHandler
.L1482:
	mov	d10,#1
.L1483:
	j	.L105
.L104:
	ld.bu	d15,[a13]45
.L1019:
	jne	d15,#1,.L106
.L1484:
	mov	d4,#1
	call	Fls_lErrorHandler
.L1485:
	mov	d10,#1
.L1486:
	j	.L107
.L106:
.L107:
.L105:
.L99:
.L89:
	j	.L108
.L78:
	mov	d10,#1
.L108:
.L73:
.L64:
	mov	d2,d10
.L1020:
	j	.L109
.L109:
	ret
.L620:
	
__Fls_17_Pmu_Write_function_end:
	.size	Fls_17_Pmu_Write,__Fls_17_Pmu_Write_function_end-Fls_17_Pmu_Write
.L448:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Compare',code,cluster('Fls_17_Pmu_Compare')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Compare'
	.align	2
	
	.global	Fls_17_Pmu_Compare
; Function Fls_17_Pmu_Compare
.L387:
Fls_17_Pmu_Compare:	.type	func
	sub.a	a10,#8
.L1021:
	mov	d8,d4
.L1024:
	mov.aa	a12,a4
.L1025:
	mov	d9,d5
.L1026:
	mov	d4,#8
.L1023:
	call	Fls_lUninitDET
.L1022:
	jne	d2,#1,.L110
.L1491:
	mov	d11,#1
.L1027:
	j	.L111
.L110:
	mov.u	d0,#32768
.L1492:
	jlt.u	d8,d0,.L112
.L1493:
	mov	d4,#92
.L1494:
	mov	d5,#0
.L1495:
	mov	d6,#8
.L1496:
	mov	d7,#2
	call	Det_ReportError
.L1497:
	mov	d11,#1
.L1028:
	j	.L113
.L112:
	jnz.a	a12,.L114
.L1498:
	mov	d4,#92
.L1499:
	mov	d5,#0
.L1500:
	mov	d6,#8
.L1501:
	mov	d7,#4
	call	Det_ReportError
.L1502:
	mov	d11,#1
.L1029:
	j	.L115
.L114:
	jeq	d9,#0,.L116
.L1503:
	add	d15,d8,d9
.L1504:
	jge.u	d0,d15,.L117
.L116:
	mov	d4,#92
.L1505:
	mov	d5,#0
.L1506:
	mov	d6,#8
.L1507:
	mov	d7,#3
	call	Det_ReportError
.L1508:
	mov	d11,#1
.L1030:
	j	.L118
.L117:
	movh.a	a2,#@his(Fls_ConfigPtr)
	lea	a2,[a2]@los(Fls_ConfigPtr)
	ld.a	a2,[a2]
.L1509:
	ld.a	a15,[a2]
.L1031:
	mov	d0,#0
.L1032:
	insert	d10,d10,d0,#0,#8
.L1510:
	mov	d0,#0
.L1511:
	insert	d10,d10,d0,#8,#8
.L1512:
	mov	d11,#0
.L1033:
	movh	d0,#44800
.L1513:
	add	d0,d8
.L1514:
	mov	d1,#16384
.L1515:
	jlt.u	d1,d15,.L119
.L1516:
	mov	d15,#4
.L1517:
	insert	d10,d10,d15,#0,#8
.L1518:
	st.w	[a10],d0
.L1519:
	j	.L120
.L119:
	jlt.u	d8,d1,.L121
.L1520:
	mov	d15,#4
.L1521:
	insert	d10,d10,d15,#8,#8
.L1522:
	st.w	[a10],d0
.L1523:
	j	.L122
.L121:
	mov	d15,#4
.L1524:
	insert	d10,d10,d15,#0,#8
.L1525:
	mov	d15,#4
.L1526:
	insert	d10,d10,d15,#8,#8
.L1527:
	st.w	[a10],d0
.L122:
.L120:
	lea	a2,[a15]42
.L1034:
	mov	d0,#0
.L1036:
	ld.bu	d15,[a2]
.L1528:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4233    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jne	d15,#0,.L123
.L1529:
	ld.bu	d15,[a15]43
.L1530:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4233    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jeq	d15,#0,.L124
.L123:
	mov	d4,#92
.L1531:
	mov	d5,#0
.L1532:
	mov	d6,#8
.L1533:
	mov	d7,#6
	call	Det_ReportError
.L1035:
	mov	d0,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4233    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
.L124:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4242    return(ErrorFlag);      (inlined)
	j	.L125

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4243  }      (inlined)
.L125:
	jne	d0,#1,.L126
.L695:
	mov	d11,#1
.L1534:
	j	.L127
.L126:
	mov	d15,#2
.L1535:
	st.w	[a15]32,d15
.L1536:
	st.a	[a15]24,a12
.L1537:
	st.w	[a15]16,d9
.L1538:
	ld.w	d15,[a10]
.L1539:
	st.w	[a15],d15
.L1540:
	ld.bu	d15,[a15]42
.L1541:
	extr.u	d0,d10,#0,#8
.L1037:
	or	d15,d0
	st.b	[a15]42,d15
.L1542:
	ld.bu	d15,[a15]43
.L1543:
	extr.u	d0,d10,#8,#8
.L1544:
	or	d15,d0
	st.b	[a15]43,d15
.L127:
.L118:
.L115:
.L113:
.L111:
	mov	d2,d11
.L1038:
	j	.L128
.L128:
	ret
.L685:
	
__Fls_17_Pmu_Compare_function_end:
	.size	Fls_17_Pmu_Compare,__Fls_17_Pmu_Compare_function_end-Fls_17_Pmu_Compare
.L453:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Cancel',code,cluster('Fls_17_Pmu_Cancel')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Cancel'
	.align	2
	
	.global	Fls_17_Pmu_Cancel
; Function Fls_17_Pmu_Cancel
.L389:
Fls_17_Pmu_Cancel:	.type	func
	mov	d4,#3
	call	Fls_lUninitDET
.L1549:
	jne	d2,#0,.L129
.L1550:
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a15,[a12]
.L1551:
	ld.a	a15,[a15]
.L1039:
	lea	a2,[a15]42
.L1040:
	mov	d0,#0
.L1042:
	ld.bu	d15,[a2]
.L1552:
	jeq	d15,#1,.L130
.L1553:
	ld.bu	d1,[a15]43
.L1554:
	jne	d1,#1,.L131
.L130:
	mov	d15,#0
.L1555:
	st.b	[a2],d15
.L1556:
	mov	d15,#0
.L1557:
	st.b	[a15]43,d15
.L1558:
	mov	d4,#1
	call	Fls_lUnLoadAccessCode
.L1041:
	mov	d15,#3
.L1559:
	st.w	[a15]32,d15
.L1560:
	mov	d0,#1
.L1043:
	j	.L132
.L131:
	jeq	d15,#2,.L133
.L1561:
	jne	d1,#2,.L134
.L133:
	mov	d15,#0
.L1562:
	st.b	[a2],d15
.L1563:
	mov	d15,#0
.L1564:
	st.b	[a15]43,d15
.L1565:
	mov	d4,#2
	call	Fls_lUnLoadAccessCode
.L1044:
	mov	d15,#3
.L1566:
	st.w	[a15]32,d15
.L1567:
	mov	d0,#1
.L1045:
	j	.L135
.L134:
	jeq	d15,#3,.L136
.L1568:
	jeq	d1,#3,.L137
.L1569:
	jeq	d15,#4,.L138
.L1570:
	jne	d1,#4,.L139
.L138:
.L137:
.L136:
	mov	d15,#0
.L1571:
	st.b	[a2],d15
.L1572:
	mov	d15,#0
.L1573:
	st.b	[a15]43,d15
.L1574:
	mov	d15,#3
.L1575:
	st.w	[a15]32,d15
.L1576:
	mov	d0,#1
.L1577:
	j	.L140
.L139:
	mov	d15,#0
.L1578:
	st.b	[a2],d15
.L1579:
	mov	d15,#0
.L1580:
	st.b	[a15]43,d15
.L140:
.L135:
.L132:
	ld.bu	d15,[a15]41
.L1581:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]41,d15
.L1582:
	ld.bu	d15,[a15]41
.L1583:
	insert	d15,d15,#0,#2,#1
	st.b	[a15]41,d15
.L1584:
	mov	d15,#6
.L1585:
	st.b	[a15]40,d15
.L1586:
	jne	d0,#1,.L141
.L1587:
	ld.a	a2,[a12]
.L1588:
	ld.a	a2,[a2]16
.L1589:
	jz.a	a2,.L142
.L1590:
	calli	a2
.L142:
.L141:
	mov	d15,#0
.L1591:
	st.b	[a15]40,d15
.L129:
	ret
.L701:
	
__Fls_17_Pmu_Cancel_function_end:
	.size	Fls_17_Pmu_Cancel,__Fls_17_Pmu_Cancel_function_end-Fls_17_Pmu_Cancel
.L458:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_CancelNonEraseJobs',code,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_CancelNonEraseJobs'
	.align	2
	
	.global	Fls_17_Pmu_CancelNonEraseJobs
; Function Fls_17_Pmu_CancelNonEraseJobs
.L391:
Fls_17_Pmu_CancelNonEraseJobs:	.type	func
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a15,[a12]
.L1596:
	ld.a	a15,[a15]
.L1046:
	lea	a2,[a15]42
.L1047:
	mov	d0,#0
.L1049:
	ld.bu	d15,[a2]
.L1597:
	jeq	d15,#1,.L143
.L1598:
	ld.bu	d1,[a15]43
.L1599:
	jne	d1,#1,.L144
.L143:
	mov	d15,#0
.L1600:
	st.b	[a2],d15
.L1601:
	mov	d15,#0
.L1602:
	st.b	[a15]43,d15
.L1603:
	mov	d4,#1
	call	Fls_lUnLoadAccessCode
.L1048:
	mov	d15,#3
.L1604:
	st.w	[a15]32,d15
.L1605:
	mov	d0,#1
.L1050:
	ld.bu	d15,[a15]41
.L1606:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]41,d15
.L1607:
	j	.L145
.L144:
	jeq	d15,#3,.L146
.L1608:
	jeq	d1,#3,.L147
.L1609:
	jeq	d15,#4,.L148
.L1610:
	jne	d1,#4,.L149
.L148:
.L147:
.L146:
	mov	d15,#0
.L1611:
	st.b	[a2],d15
.L1612:
	mov	d15,#0
.L1613:
	st.b	[a15]43,d15
.L1614:
	mov	d15,#3
.L1615:
	st.w	[a15]32,d15
.L1616:
	mov	d0,#1
.L1617:
	j	.L150
.L149:
	eq	d15,d15,#2
.L1618:
	mov	d1,#2
	cmovn	d1,d15,#0
.L1619:
	j	.L152
.L151:
	mov	d1,#0
.L152:
	st.b	[a2],d1
.L1620:
	ld.bu	d15,[a15]43
.L1621:
	eq	d15,d15,#2
.L1622:
	mov	d1,#2
	cmovn	d1,d15,#0
.L1623:
	j	.L154
.L153:
	mov	d1,#0
.L154:
	st.b	[a15]43,d1
.L150:
.L145:
	ld.a	a15,[a12]
.L1051:
	ld.a	a2,[a15]
.L1624:
	mov	d15,#6
.L1625:
	st.b	[a2]40,d15
.L1626:
	jne	d0,#1,.L155
.L1627:
	ld.a	a15,[a15]16
.L1628:
	jz.a	a15,.L156
.L1629:
	calli	a15
.L156:
.L155:
	ld.a	a15,[a12]
.L1630:
	ld.a	a15,[a15]
.L1631:
	mov	d15,#0
.L1632:
	st.b	[a15]40,d15
.L1633:
	ret
.L706:
	
__Fls_17_Pmu_CancelNonEraseJobs_function_end:
	.size	Fls_17_Pmu_CancelNonEraseJobs,__Fls_17_Pmu_CancelNonEraseJobs_function_end-Fls_17_Pmu_CancelNonEraseJobs
.L463:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_SetMode',code,cluster('Fls_17_Pmu_SetMode')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_SetMode'
	.align	2
	
	.global	Fls_17_Pmu_SetMode
; Function Fls_17_Pmu_SetMode
.L393:
Fls_17_Pmu_SetMode:	.type	func
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1698:
	ld.a	a15,[a15]
.L1699:
	lea	a2,[a15]42
.L1053:
	ld.bu	d15,[a2]
.L1700:
	jne	d15,#0,.L157
.L1701:
	ld.bu	d15,[a15]43
.L1702:
	jeq	d15,#0,.L158
.L157:
	mov	d4,#92
.L1052:
	mov	d5,#0
.L1703:
	mov	d6,#9
.L1704:
	mov	d7,#6
	call	Det_ReportError
.L1054:
	j	.L159
.L158:
	st.w	[a15]36,d4
.L159:
	ret
.L737:
	
__Fls_17_Pmu_SetMode_function_end:
	.size	Fls_17_Pmu_SetMode,__Fls_17_Pmu_SetMode_function_end-Fls_17_Pmu_SetMode
.L488:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_MainFunction',code,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_MainFunction'
	.align	2
	
	.global	Fls_17_Pmu_MainFunction
; Function Fls_17_Pmu_MainFunction
.L395:
Fls_17_Pmu_MainFunction:	.type	func
	mov	d4,#6
	call	Fls_lUninitDET
.L1055:
	jne	d2,#0,.L160
.L1664:
	mov	d4,#6
	call	Fls_lTimeOutDET
.L1056:
	jne	d2,#0,.L161
.L1665:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1666:
	ld.a	a15,[a15]
.L1058:
	lea	a12,[a15]42
.L1059:
	ld.bu	d15,[a12]
.L1667:
	jne	d15,#0,.L162
.L1668:
	ld.bu	d15,[a15]43
.L1669:
	jeq	d15,#0,.L163
.L162:
	movh.a	a13,#63488
	lea	a13,[a13]@los(0xf8002010)
	ld.w	d15,[a13]
.L1670:
	extr.u	d0,d15,#27,#1
.L728:
	ld.w	d15,[a13]
.L1060:
	and	d15,#2
.L1671:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L164

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L164:
	jne	d15,#0,.L165
.L729:
	jne	d0,#0,.L166
.L1672:
	ld.bu	d15,[a12]
.L1061:
	jne	d15,#2,.L167
.L1673:
	mov	d4,#0
	call	Fls_lMainErase
.L1057:
	j	.L168
.L167:
	ld.bu	d15,[a15]43
.L1674:
	jne	d15,#2,.L169
.L1675:
	mov	d4,#1
	call	Fls_lMainErase
.L1062:
	j	.L170
.L169:
.L170:
.L168:
.L166:
.L165:
	ld.w	d15,[a13]
.L1063:
	and	d15,#2
.L1676:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L171

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L171:
	jne	d15,#0,.L172
.L731:
	ld.bu	d15,[a12]
.L1064:
	jne	d15,#1,.L173
.L1677:
	mov	d4,#0
	call	Fls_lMainWrite
.L1678:
	j	.L174
.L173:
	ld.bu	d15,[a15]43
.L1679:
	jne	d15,#1,.L175
.L1680:
	mov	d4,#1
	call	Fls_lMainWrite
.L1681:
	j	.L176
.L175:
.L176:
.L174:
.L172:
	ld.w	d15,[a13]
.L1065:
	and	d15,#2
.L1682:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L177

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L177:
	jne	d15,#0,.L178
.L733:
	ld.bu	d15,[a12]
.L1066:
	jne	d15,#3,.L179
.L1683:
	mov	d4,#0
	call	Fls_lMainRead
.L1684:
	j	.L180
.L179:
	ld.bu	d15,[a15]43
.L1685:
	jne	d15,#3,.L181
.L1686:
	mov	d4,#1
	call	Fls_lMainRead
.L1687:
	j	.L182
.L181:
.L182:
.L180:
.L178:
	ld.w	d15,[a13]
.L1067:
	and	d15,#2
.L1688:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;      (inlined)
	j	.L183

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }      (inlined)
.L183:
	jne	d15,#0,.L184
.L735:
	ld.bu	d15,[a12]
.L1068:
	jne	d15,#4,.L185
.L1689:
	mov	d4,#0
	call	Fls_lMainCompare
.L1690:
	j	.L186
.L185:
	ld.bu	d15,[a15]43
.L1691:
	jne	d15,#4,.L187
.L1692:
	mov	d4,#1
	call	Fls_lMainCompare
.L1693:
	j	.L188
.L187:
.L188:
.L186:
.L184:
.L163:
.L161:
.L160:
	ret
.L722:
	
__Fls_17_Pmu_MainFunction_function_end:
	.size	Fls_17_Pmu_MainFunction,__Fls_17_Pmu_MainFunction_function_end-Fls_17_Pmu_MainFunction
.L483:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_Read',code,cluster('Fls_17_Pmu_Read')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_Read'
	.align	2
	
	.global	Fls_17_Pmu_Read
; Function Fls_17_Pmu_Read
.L397:
Fls_17_Pmu_Read:	.type	func
	sub.a	a10,#8
.L1069:
	mov	d8,d4
.L1072:
	mov.aa	a12,a4
.L1073:
	mov	d9,d5
.L1074:
	mov	d4,#7
.L1071:
	call	Fls_lUninitDET
.L1070:
	jne	d2,#1,.L189
.L1709:
	mov	d10,#1
.L1075:
	j	.L190
.L189:
	mov.u	d0,#32768
.L1710:
	jlt.u	d8,d0,.L191
.L1711:
	mov	d4,#92
.L1712:
	mov	d5,#0
.L1713:
	mov	d6,#7
.L1714:
	mov	d7,#2
	call	Det_ReportError
.L1715:
	mov	d10,#1
.L1076:
	j	.L192
.L191:
	jnz.a	a12,.L193
.L1716:
	mov	d4,#92
.L1717:
	mov	d5,#0
.L1718:
	mov	d6,#7
.L1719:
	mov	d7,#4
	call	Det_ReportError
.L1720:
	mov	d10,#1
.L1077:
	j	.L194
.L193:
	jeq	d9,#0,.L195
.L1721:
	add	d15,d8,d9
.L1722:
	jge.u	d0,d15,.L196
.L195:
	mov	d4,#92
.L1723:
	mov	d5,#0
.L1724:
	mov	d6,#7
.L1725:
	mov	d7,#3
	call	Det_ReportError
.L1726:
	mov	d10,#1
.L1078:
	j	.L197
.L196:
	movh.a	a2,#@his(Fls_ConfigPtr)
	lea	a2,[a2]@los(Fls_ConfigPtr)
	ld.a	a2,[a2]
.L1727:
	ld.a	a15,[a2]
.L1079:
	mov	d10,#0
.L1080:
	mov	d0,#0
.L1081:
	insert	d11,d11,d0,#0,#8
.L1728:
	mov	d0,#0
.L1729:
	insert	d11,d11,d0,#8,#8
.L1730:
	movh	d0,#44800
.L1731:
	add	d0,d8
.L1732:
	mov	d1,#16384
.L1733:
	jlt.u	d1,d15,.L198
.L1734:
	mov	d15,#3
.L1735:
	insert	d11,d11,d15,#0,#8
.L1736:
	st.w	[a10],d0
.L1737:
	j	.L199
.L198:
	jlt.u	d8,d1,.L200
.L1738:
	mov	d15,#3
.L1739:
	insert	d11,d11,d15,#8,#8
.L1740:
	st.w	[a10],d0
.L1741:
	j	.L201
.L200:
	mov	d15,#3
.L1742:
	insert	d11,d11,d15,#0,#8
.L1743:
	mov	d15,#3
.L1744:
	insert	d11,d11,d15,#8,#8
.L1745:
	st.w	[a10],d0
.L201:
.L199:
	lea	a2,[a15]42
.L1082:
	mov	d0,#0
.L1084:
	ld.bu	d15,[a2]
.L1746:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4188    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jne	d15,#0,.L202
.L1747:
	ld.bu	d15,[a15]43
.L1748:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4188    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
	jeq	d15,#0,.L203
.L202:
	mov	d4,#92
.L1749:
	mov	d5,#0
.L1750:
	mov	d6,#7
.L1751:
	mov	d7,#6
	call	Det_ReportError
.L1083:
	mov	d0,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4188    if((ArrPtr[0] != FLS_NONE) || (ArrPtr[1] != FLS_NONE))      (inlined)
.L203:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4197    return(ErrorFlag);      (inlined)
	j	.L204

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4198  }      (inlined)
.L204:
	jne	d0,#1,.L205
.L751:
	mov	d10,#1
.L1752:
	j	.L206
.L205:
	mov	d15,#2
.L1753:
	st.w	[a15]32,d15
.L1754:
	st.a	[a15]24,a12
.L1755:
	st.w	[a15]16,d9
.L1756:
	ld.w	d15,[a10]
.L1757:
	st.w	[a15],d15
.L1758:
	ld.bu	d15,[a15]42
.L1759:
	extr.u	d0,d11,#0,#8
.L1085:
	or	d15,d0
	st.b	[a15]42,d15
.L1760:
	ld.bu	d15,[a15]43
.L1761:
	extr.u	d0,d11,#8,#8
.L1762:
	or	d15,d0
	st.b	[a15]43,d15
.L206:
.L197:
.L194:
.L192:
.L190:
	mov	d2,d10
.L1086:
	j	.L207
.L207:
	ret
.L741:
	
__Fls_17_Pmu_Read_function_end:
	.size	Fls_17_Pmu_Read,__Fls_17_Pmu_Read_function_end-Fls_17_Pmu_Read
.L493:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_GetStatus',code,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_GetStatus'
	.align	2
	
	.global	Fls_17_Pmu_GetStatus
; Function Fls_17_Pmu_GetStatus
.L399:
Fls_17_Pmu_GetStatus:	.type	func
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1638:
	jnz.a	a15,.L208
.L1639:
	mov	d2,#0
.L1087:
	j	.L209
.L208:
	ld.a	a15,[a15]
.L1640:
	lea	a15,[a15]42
.L1088:
	ld.bu	d15,[a15]
.L1641:
	jne	d15,#0,.L210
.L1642:
	ld.bu	d15,[a15]1
.L1643:
	jeq	d15,#0,.L211
.L210:
	mov	d2,#2
.L1089:
	j	.L212
.L211:
	mov	d2,#1
.L212:
.L209:
	j	.L213
.L213:
	ret
.L711:
	
__Fls_17_Pmu_GetStatus_function_end:
	.size	Fls_17_Pmu_GetStatus,__Fls_17_Pmu_GetStatus_function_end-Fls_17_Pmu_GetStatus
.L468:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_GetBankStatus',code,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_GetBankStatus'
	.align	2
	
	.global	Fls_17_Pmu_GetBankStatus
; Function Fls_17_Pmu_GetBankStatus
.L401:
Fls_17_Pmu_GetBankStatus:	.type	func
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1648:
	jnz.a	a15,.L214
.L1649:
	mov	d2,#0
.L1090:
	j	.L215
.L214:
	ld.a	a15,[a15]
.L1650:
	lea	a15,[a15]42
.L1091:
	addsc.a	a15,a15,d4,#0
.L1092:
	ld.bu	d15,[a15]
.L1651:
	mov	d2,#2
.L1093:
	cmovn	d2,d15,#1
.L1652:
	j	.L217
.L216:
	mov	d2,#1
.L217:
.L215:
	j	.L218
.L218:
	ret
.L714:
	
__Fls_17_Pmu_GetBankStatus_function_end:
	.size	Fls_17_Pmu_GetBankStatus,__Fls_17_Pmu_GetBankStatus_function_end-Fls_17_Pmu_GetBankStatus
.L473:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_GetJobResult',code,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_GetJobResult'
	.align	2
	
	.global	Fls_17_Pmu_GetJobResult
; Function Fls_17_Pmu_GetJobResult
.L403:
Fls_17_Pmu_GetJobResult:	.type	func
	mov	d4,#5
	call	Fls_lUninitDET
.L1657:
	jeq	d2,#0,.L219
.L1658:
	mov	d2,#1
.L1094:
	j	.L220
.L219:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1659:
	ld.a	a15,[a15]
.L1095:
	ld.w	d2,[a15]32
.L220:
	j	.L221
.L221:
	ret
.L719:
	
__Fls_17_Pmu_GetJobResult_function_end:
	.size	Fls_17_Pmu_GetJobResult,__Fls_17_Pmu_GetJobResult_function_end-Fls_17_Pmu_GetJobResult
.L478:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_GetOperStatus',code,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_GetOperStatus'
	.align	2
	
	.global	Fls_17_Pmu_GetOperStatus
; Function Fls_17_Pmu_GetOperStatus
.L405:
Fls_17_Pmu_GetOperStatus:	.type	func
	mov	d2,#0
.L1096:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1767:
	ld.a	a15,[a15]
.L1097:
	movh.a	a2,#63488
	ld.w	d15,[a2]@los(0xf8002010)
.L1768:
	mov	d0,#2048
.L1098:
	and	d15,d0
.L1769:
	jne	d15,#0,.L222
.L1770:
	ld.bu	d15,[a15]44
.L1099:
	jeq	d15,#0,.L223
.L222:
	mov	d2,#1
.L223:
	j	.L224
.L224:
	ret
.L757:
	
__Fls_17_Pmu_GetOperStatus_function_end:
	.size	Fls_17_Pmu_GetOperStatus,__Fls_17_Pmu_GetOperStatus_function_end-Fls_17_Pmu_GetOperStatus
.L498:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_17_Pmu_ControlTimeoutDet',code,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.text.Fls_17_Pmu.Fls_17_Pmu_ControlTimeoutDet'
	.align	2
	
	.global	Fls_17_Pmu_ControlTimeoutDet
; Function Fls_17_Pmu_ControlTimeoutDet
.L407:
Fls_17_Pmu_ControlTimeoutDet:	.type	func
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L1775:
	ld.a	a15,[a15]
.L1100:
	st.b	[a15]46,d4
.L1776:
	ret
.L761:
	
__Fls_17_Pmu_ControlTimeoutDet_function_end:
	.size	Fls_17_Pmu_ControlTimeoutDet,__Fls_17_Pmu_ControlTimeoutDet_function_end-Fls_17_Pmu_ControlTimeoutDet
.L503:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainErase',code,cluster('Fls_lMainErase')
	.sect	'.text.Fls_17_Pmu.Fls_lMainErase'
	.align	2
	
; Function Fls_lMainErase
.L409:
Fls_lMainErase:	.type	func
	sub.a	a10,#8
.L1101:
	mov	d8,d4
.L1103:
	mov	d9,#0
.L1104:
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a15,[a12]
.L1781:
	ld.a	a15,[a15]
.L1105:
	ld.w	d10,[a15]32
.L1106:
	jne	d8,#0,.L225
.L1782:
	movh	d0,#44800
.L1783:
	st.w	[a10],d0
.L1784:
	j	.L226
.L225:
	mov	d0,#16384
	addih	d0,d0,#44800
.L1785:
	st.w	[a10],d0
.L226:
	ld.bu	d15,[a15]41
.L1786:
	jnz.t	d15:2,.L227
.L1787:
	ld.w	d4,[a10]
.L1102:
	call	Fls_lMainEraseJobStart
	j	.L228
.L227:
	ld.a	a2,[a12]
.L1788:
	ld.a	a2,[a2]
.L1108:
	mov	d1,#2048
.L1789:
	movh.a	a4,#63488
	ld.w	d0,[a4]@los(0xf8002010)
.L1790:
	and	d11,d0,d1
.L1110:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
	jeq	d11,#0,.L229
.L1791:
	mov	d15,#1
.L1792:
	st.b	[a2]44,d15

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
.L229:
	ld.bu	d15,[a2]44
.L1793:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
	jeq	d15,#0,.L230
.L1794:
	mov	d11,d1
.L1795:
	ld.a	a2,[a12]
.L1109:
	ld.a	a2,[a2]20
.L1796:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
	jz.a	a2,.L231
.L1797:
	calli	a2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
.L231:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
.L230:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4960    return (RetVal);      (inlined)
	j	.L232

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4961  }      (inlined)
.L232:
	jeq	d11,#0,.L233
.L773:
	call	Fls_lDemReportError_Erase
.L1798:
	mov	d4,#2
	call	Fls_lErrorHandler
.L1799:
	mov	d9,#1
.L1800:
	j	.L234
.L233:
	ld.w	d15,[a10]
.L1111:
	mov.a	a2,d15
.L1112:
	mov	d0,#0
.L235:
	ld.w	d15,[a2]
.L1801:
	jne	d15,#0,.L236
.L1802:
	add	d0,#1
.L1803:
	add.a	a2,#4
.L1804:
	j	.L237
.L236:
	mov	d4,#92
.L1805:
	mov	d5,#0
.L1806:
	mov	d6,#6
.L1807:
	mov	d7,#7
	call	Det_ReportError
.L1113:
	mov	d4,#2
	call	Fls_lErrorHandler
.L1808:
	mov	d9,#1
.L1809:
	j	.L238
.L237:
	mov	d15,#4096
.L1810:
	jlt.u	d0,d15,.L235
.L238:
.L234:
	jne	d9,#0,.L239
.L1811:
	addsc.a	a2,a15,d8,#0
.L1812:
	mov	d15,#0
.L1813:
	st.b	[a2]42,d15
.L1814:
	st.w	[a15]32,d10
.L1815:
	mov	d15,#16384
	addih	d15,d15,#44800
.L1816:
	st.w	[a10],d15
.L1817:
	lea	a2,[a15]42
.L1818:
	add.a	a2,#1
	ld.bu	d15,[a2]
.L1819:
	jne	d15,#2,.L240
.L1820:
	ld.w	d4,[a10]
	call	Fls_lMainEraseJobStart
	j	.L241
.L240:
	mov	d15,#0
.L1107:
	mov	d4,#2
	call	Fls_lUnLoadAccessCode
.L1821:
	call	Fls_ClearStatusCmdCycle
.L1822:
	ld.a	a2,[a12]
.L1823:
	ld.a	a4,[a2]
.L1824:
	mov	d0,#2
.L1825:
	st.b	[a4]40,d0
.L1826:
	ld.a	a2,[a2]12
.L1827:
	jz.a	a2,.L242
.L1828:
	calli	a2
.L242:
	ld.a	a2,[a12]
.L1829:
	ld.a	a2,[a2]
.L1830:
	mov	d0,#0
.L1831:
	st.b	[a2]40,d0
.L1832:
	st.w	[a15]32,d15
.L1833:
	ld.bu	d15,[a15]41
.L1114:
	insert	d15,d15,#0,#2,#1
	st.b	[a15]41,d15
.L241:
.L239:
.L228:
	ret
.L764:
	
__Fls_lMainErase_function_end:
	.size	Fls_lMainErase,__Fls_lMainErase_function_end-Fls_lMainErase
.L508:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainEraseJobStart',code,cluster('Fls_lMainEraseJobStart')
	.sect	'.text.Fls_17_Pmu.Fls_lMainEraseJobStart'
	.align	2
	
; Function Fls_lMainEraseJobStart
.L411:
Fls_lMainEraseJobStart:	.type	func
	mov	d8,d4
.L1116:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L2151:
	ld.a	a15,[a15]
.L1117:
	ld.bu	d15,[a15]41
.L2152:
	or	d15,#4
	st.b	[a15]41,d15
.L2153:
	call	Fls_lSchMEnter_Main
.L1115:
	mov	d4,d8
.L1118:
	call	Fls_CallEraseCommand
.L1119:
	call	Fls_lSchMExit_Main
.L917:
	movh.a	a2,#63488
	ld.w	d15,[a2]@los(0xf8002010)
.L2154:
	mov	d0,#12288
.L1120:
	and	d15,d0
.L2155:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4905   return RetVal;      (inlined)
	j	.L243

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4906  }      (inlined)
.L243:
	jeq	d15,#0,.L244
.L918:
	call	Fls_lDemReportError_Erase
.L2156:
	mov	d4,#2
	call	Fls_lErrorHandler
.L2157:
	j	.L245
.L244:
	ld.bu	d15,[a15]45
.L1121:
	jne	d15,#2,.L246
.L2158:
	mov	d4,#2
	call	Fls_lErrorHandler
.L2159:
	j	.L247
.L246:
.L247:
.L245:
	ret
.L913:
	
__Fls_lMainEraseJobStart_function_end:
	.size	Fls_lMainEraseJobStart,__Fls_lMainEraseJobStart_function_end-Fls_lMainEraseJobStart
.L548:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainRead',code,cluster('Fls_lMainRead')
	.sect	'.text.Fls_17_Pmu.Fls_lMainRead'
	.align	2
	
; Function Fls_lMainRead
.L413:
Fls_lMainRead:	.type	func
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a2,[a12]
.L1944:
	ld.a	a15,[a2]
.L839:
	ld.w	d1,[a2]4
.L1123:
	ld.w	d15,[a15]36
.L1945:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4865    if(StatePtr->FlsMode == MEMIF_MODE_SLOW)      (inlined)
	jne	d15,#0,.L248
.L1946:
	ld.w	d1,[a2]8

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4865    if(StatePtr->FlsMode == MEMIF_MODE_SLOW)      (inlined)
.L248:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4870    return MaxRead;      (inlined)
	j	.L249

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4871  }      (inlined)
.L249:
	ld.w	d15,[a15]16
.L842:
	jge.u	d1,d15,.L250
.L1947:
	sub	d0,d15,d1
.L843:
	st.w	[a15]16,d0
.L1948:
	j	.L251
.L250:
	mov	d1,d15
.L844:
	mov	d15,#0
.L1949:
	st.w	[a15]16,d15
.L251:
	ld.w	d0,[a15]
.L1124:
	mov.a	a2,d0
.L252:
	movh.a	a4,#44800
	lea	a4,[a4]@los(0xaf004000)
.L1950:
	jne.a	a2,a4,.L253
.L1951:
	jeq	d4,#1,.L254
.L1952:
	ld.bu	d15,[a15]43
.L1953:
	jne	d15,#3,.L255
.L1954:
	mov	d0,#16384
	addih	d0,d0,#44800
.L1955:
	st.w	[a15],d0
.L1956:
	ld.w	d0,[a15]
.L1125:
	mov.a	a2,d0
.L1127:
	mov	d4,#1
.L1957:
	mov	d0,#0
.L1126:
	st.b	[a15]42,d0
.L255:
.L253:
.L254:
	jlt.u	d1,#4,.L256
.L845:
	mov.d	d15,a2
.L1129:
	and	d15,#3
.L1130:
	jne	d15,#0,.L257
.L1958:
	ld.w	d15,[a15]24
.L1959:
	and	d15,#3
.L1960:
	jne	d15,#0,.L258
.L1961:
	ld.a	a4,[a15]24
.L1962:
	ld.w	d0,[a2]
.L1963:
	st.w	[a4],d0
.L1964:
	ld.a	a4,[a15]24
.L1965:
	add.a	a4,#4
	st.a	[a15]24,a4
.L1966:
	add.a	a2,#4
.L846:
	add	d1,#-4
.L847:
	j	.L259
.L258:
.L256:
.L257:
	ld.a	a4,[a15]24
.L1967:
	ld.bu	d15,[a2]
.L1968:
	st.b	[a4],d15
.L1969:
	ld.a	a4,[a15]24
.L1970:
	add.a	a4,#1
	st.a	[a15]24,a4
.L1971:
	add.a	a2,#1
.L848:
	add	d1,#-1
.L259:
	jne	d1,#0,.L252
.L849:
	mov.d	d15,a2
.L1131:
	st.w	[a15],d15
.L852:
	movh.a	a2,#63488
.L1128:
	ld.w	d15,[a2]@los(0xf8002010)
.L1132:
	movh	d0,#32
.L1133:
	and	d15,d0
.L1972:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5048   return RetVal;      (inlined)
	j	.L260

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5049  }      (inlined)
.L260:
	jeq	d15,#0,.L261
.L853:
	call	Fls_lDemReportError_Read
.L1122:
	mov	d4,#3
	call	Fls_lErrorHandler
.L1973:
	j	.L262
.L261:
	ld.w	d15,[a15]16
.L1134:
	jne	d15,#0,.L263
.L1974:
	mov	d15,#0
.L1135:
	addsc.a	a2,a15,d4,#0
.L1975:
	mov	d0,#0
.L1976:
	st.b	[a2]42,d0
.L1977:
	st.w	[a15]32,d15
.L1978:
	ld.a	a15,[a12]
.L1979:
	ld.a	a2,[a15]
.L1980:
	mov	d15,#3
.L1136:
	st.b	[a2]40,d15
.L1981:
	ld.a	a15,[a15]12
.L1982:
	jz.a	a15,.L264
.L1983:
	calli	a15
.L264:
	ld.a	a15,[a12]
.L1984:
	ld.a	a15,[a15]
.L1985:
	mov	d15,#0
.L1986:
	st.b	[a15]40,d15
.L263:
.L262:
	ret
.L831:
	
__Fls_lMainRead_function_end:
	.size	Fls_lMainRead,__Fls_lMainRead_function_end-Fls_lMainRead
.L518:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainCompare',code,cluster('Fls_lMainCompare')
	.sect	'.text.Fls_17_Pmu.Fls_lMainCompare'
	.align	2
	
; Function Fls_lMainCompare
.L415:
Fls_lMainCompare:	.type	func
	movh.a	a12,#@his(Fls_ConfigPtr)
	lea	a12,[a12]@los(Fls_ConfigPtr)
	ld.a	a2,[a12]
.L1991:
	ld.a	a15,[a2]
.L1992:
	ld.w	d1,[a15]32
.L862:
	ld.w	d2,[a2]4
.L1138:
	ld.w	d15,[a15]36
.L1993:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4865    if(StatePtr->FlsMode == MEMIF_MODE_SLOW)      (inlined)
	jne	d15,#0,.L265
.L1994:
	ld.w	d2,[a2]8

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4865    if(StatePtr->FlsMode == MEMIF_MODE_SLOW)      (inlined)
.L265:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4870    return MaxRead;      (inlined)
	j	.L266

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4871  }      (inlined)
.L266:
	ld.w	d15,[a15]16
.L864:
	jge.u	d2,d15,.L267
.L1995:
	sub	d0,d15,d2
.L865:
	st.w	[a15]16,d0
.L1996:
	j	.L268
.L267:
	mov	d2,d15
.L866:
	mov	d15,#0
.L1997:
	st.w	[a15]16,d15
.L268:
	ld.w	d0,[a15]
.L1139:
	mov.a	a2,d0
.L1140:
	movh.a	a4,#44800
	lea	a4,[a4]@los(0xaf004000)
.L269:
	jne.a	a2,a4,.L270
.L1998:
	jeq	d4,#1,.L271
.L1999:
	ld.bu	d15,[a15]43
.L2000:
	jne	d15,#4,.L272
.L2001:
	mov.aa	a2,a4
.L2002:
	mov	d4,#1
.L2003:
	mov	d0,#0
.L2004:
	st.b	[a15]42,d0
.L272:
.L270:
.L271:
	mov.d	d15,a2
.L1142:
	and	d15,#3
.L1143:
	jne	d15,#0,.L273
.L2005:
	ld.a	a5,[a15]24
	mov.d	d15,a5
.L2006:
	and	d15,#3
.L2007:
	jne	d15,#0,.L274
.L867:
	jlt.u	d2,#4,.L275
.L868:
	ld.w	d0,[a5]
.L2008:
	ld.w	d15,[a2]
.L2009:
	jeq	d15,d0,.L276
.L2010:
	mov	d1,#4
.L869:
	mov	d2,#0
.L870:
	j	.L277
.L276:
	add.a	a5,#4
	st.a	[a15]24,a5
.L2011:
	add.a	a2,#4
.L871:
	add	d2,#-4
.L277:
	j	.L278
.L275:
.L273:
	ld.a	a5,[a15]24
.L274:
	ld.bu	d0,[a5]
.L2012:
	ld.bu	d15,[a2]
.L2013:
	jeq	d15,d0,.L279
.L2014:
	mov	d1,#4
.L872:
	mov	d2,#0
.L873:
	j	.L280
.L279:
	add.a	a5,#1
	st.a	[a15]24,a5
.L2015:
	add.a	a2,#1
.L874:
	add	d2,#-1
.L280:
.L278:
	jne	d2,#0,.L269
.L875:
	mov.d	d15,a2
.L1144:
	st.w	[a15],d15
.L878:
	movh.a	a2,#63488
.L1141:
	ld.w	d15,[a2]@los(0xf8002010)
.L1145:
	movh	d0,#32
.L1146:
	and	d15,d0
.L2016:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5048   return RetVal;      (inlined)
	j	.L281

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5049  }      (inlined)
.L281:
	jeq	d15,#0,.L282
.L879:
	call	Fls_lDemReportError_Compare
.L1137:
	mov	d4,#4
	call	Fls_lErrorHandler
.L2017:
	j	.L283
.L282:
	jne	d1,#4,.L284
.L2018:
	st.w	[a15]32,d1
.L2019:
	ld.bu	d15,[a15]42
.L1147:
	jne	d15,#4,.L285
.L2020:
	mov	d15,#0
.L2021:
	st.b	[a15]42,d15
.L285:
	ld.bu	d15,[a15]43
.L2022:
	jne	d15,#4,.L286
.L2023:
	mov	d15,#0
.L2024:
	st.b	[a15]43,d15
.L286:
	call	Fls_ClearStatusCmdCycle
.L1148:
	ld.a	a15,[a12]
.L2025:
	ld.a	a2,[a15]
.L2026:
	mov	d15,#4
.L2027:
	st.b	[a2]40,d15
.L2028:
	ld.a	a15,[a15]16
.L2029:
	jz.a	a15,.L287
.L2030:
	calli	a15
.L287:
	ld.a	a15,[a12]
.L2031:
	ld.a	a15,[a15]
.L2032:
	mov	d15,#0
.L2033:
	st.b	[a15]40,d15
.L2034:
	j	.L288
.L284:
	ld.w	d15,[a15]16
.L1150:
	jne	d15,#0,.L289
.L2035:
	mov	d15,#0
.L1149:
	st.w	[a15]32,d15
.L2036:
	addsc.a	a15,a15,d4,#0
.L2037:
	mov	d15,#0
.L1151:
	st.b	[a15]42,d15
.L2038:
	ld.a	a15,[a12]
.L2039:
	ld.a	a2,[a15]
.L2040:
	mov	d15,#4
.L2041:
	st.b	[a2]40,d15
.L2042:
	ld.a	a15,[a15]12
.L2043:
	jz.a	a15,.L290
.L2044:
	calli	a15
.L290:
	ld.a	a15,[a12]
.L2045:
	ld.a	a15,[a15]
.L2046:
	mov	d15,#0
.L2047:
	st.b	[a15]40,d15
.L2048:
	j	.L291
.L289:
.L291:
.L288:
.L283:
	ret
.L855:
	
__Fls_lMainCompare_function_end:
	.size	Fls_lMainCompare,__Fls_lMainCompare_function_end-Fls_lMainCompare
.L523:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainWrite',code,cluster('Fls_lMainWrite')
	.sect	'.text.Fls_17_Pmu.Fls_lMainWrite'
	.align	2
	
; Function Fls_lMainWrite
.L417:
Fls_lMainWrite:	.type	func
	sub.a	a10,#8
.L1152:
	mov	d9,d4
.L1153:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	st.a	[a10]4,a15
	ld.a	a15,[a15]
.L1838:
	ld.a	a15,[a15]
.L1154:
	jne	d9,#0,.L292
.L1839:
	movh	d0,#44800
.L1840:
	st.w	[a10],d0
.L1841:
	j	.L293
.L292:
	mov	d0,#16384
	addih	d0,d0,#44800
.L1842:
	st.w	[a10],d0
.L293:
	ld.bu	d0,[a15]41
.L1843:
	jnz.t	d0:1,.L294
.L1844:
	ld.w	d15,[a15]4
.L1845:
	mov.a	a12,d15
.L1846:
	ld.w	d0,[a15]20
.L1847:
	mov	d9,#2
.L784:
	mov	d1,#0
.L1155:
	mov	d8,#0
.L1157:
	mov	d15,#24
.L1848:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d15,d0,.L295
.L1849:
	mov.d	d15,a12
.L1850:
	and	d15,#31
.L1851:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4616        ((((uint32)AddrCheckPtr) & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L296

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L295:
	mov	d15,#8
.L1159:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4618      PageLength = FLS_PAGE_SIZE;      (inlined)
	j	.L297

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L296:
	mov	d15,#32

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4620    else      (inlined)
.L297:
	sh	d10,d15,#-2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
.L298:
	ld.w	d15,[a12]
.L1852:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
	jne	d15,#0,.L299
.L1853:
	add	d8,#1
.L1158:
	extr.u	d8,d8,#0,#8
.L1160:
	add.a	a12,#4
.L1854:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4630         Loop++;      (inlined)
	j	.L300

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
.L299:
	mov	d4,#92
.L1855:
	mov	d5,#0
.L1856:
	mov	d7,#7
	mov	d6,d9
	call	Det_ReportError
.L1156:
	mov	d1,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4635      else      (inlined)
.L300:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
	jne	d1,#0,.L301
.L1857:
	jlt.u	d8,d10,.L298
.L301:
	mov	d15,d1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4649    return RetVal;      (inlined)
	j	.L302

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4650  }      (inlined)
.L302:
	jne	d15,#1,.L303
.L1858:
	mov	d4,#1
	call	Fls_lErrorHandler
.L1161:
	j	.L304
.L303:
	ld.w	d4,[a10]
	call	Fls_lMainWriteJobStart
.L304:
	j	.L305
.L294:
	ld.a	a2,[a10]4
	ld.a	a2,[a2]
.L1859:
	ld.a	a2,[a2]
.L1162:
	mov	d1,#2048
.L1860:
	movh.a	a12,#63488
	lea	a12,[a12]@los(0xf8002010)
	ld.w	d0,[a12]
.L1861:
	and	d8,d0,d1
.L1164:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
	jeq	d8,#0,.L306
.L1862:
	mov	d0,#1
.L1863:
	st.b	[a2]44,d0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4945    if(RetVal != 0U)      (inlined)
.L306:
	ld.bu	d15,[a2]44
.L1864:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
	jeq	d15,#0,.L307
.L1865:
	mov	d8,d1
.L1866:
	ld.a	a2,[a10]4
.L1163:
	ld.a	a2,[a2]
.L1867:
	ld.a	a2,[a2]20
.L1868:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
	jz.a	a2,.L308
.L1869:
	calli	a2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4953      if(Fls_ConfigPtr->FlsIllegalStateNotificationPtr != NULL_PTR)      (inlined)
.L308:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4950    if(StatePtr->FlsOper != 0U)      (inlined)
.L307:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4960    return (RetVal);      (inlined)
	j	.L309

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4961  }      (inlined)
.L309:
	jeq	d8,#0,.L310
.L791:
	call	Fls_lDemReportError_Write
.L795:
	mov	d10,#1
.L796:
	j	.L311
.L310:
	ld.w	d15,[a12]
.L1165:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4143    if ((TempFSR & FLS_PVER_ERROR) == FLS_PVER_ERROR)      (inlined)
	jz.t	d15:25,.L312
.L1870:
	mov	d15,#1
.L1166:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4145      RetVal = (boolean)TRUE;       (inlined)
	j	.L313

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4143    if ((TempFSR & FLS_PVER_ERROR) == FLS_PVER_ERROR)      (inlined)
.L312:
	mov	d15,#0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4147    else      (inlined)
.L313:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4151    return (RetVal);      (inlined)
	j	.L314

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4152  }      (inlined)
.L314:
	jne	d15,#1,.L315
.L801:
	mov	d10,#1
.L802:
	call	Fls_lDemReportError_Write
.L1871:
	j	.L316
.L315:
	mov	d0,#1
.L1168:
	ld.a	a2,[a10]4
	ld.a	a2,[a2]
.L1872:
	ld.a	a2,[a2]
.L1873:
	ld.w	d1,[a2]20
.L1874:
	mov	d15,#24
.L1167:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d15,d1,.L317
.L1875:
	ld.w	d15,[a2]4
.L1876:
	and	d15,#31
.L1877:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4832         ((StatePtr->FlsWriteAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L318

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L317:
	mov	d0,#0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L318:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4837    return RetVal;      (inlined)
	j	.L319

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4838  }      (inlined)
.L319:
	mov	d15,#8
.L818:
	seln	d11,d0,d15,#32
.L819:
	j	.L321
.L320:
	mov	d11,#32
.L321:
	mov	d0,#0
.L1169:
	mov	d10,#0
.L1172:
	ld.a	a13,[a2]28
.L1173:
	ld.w	d15,[a2]4
.L1174:
	mov.a	a14,d15
.L1175:
	sh	d8,d11,#-2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4494    }while(Count < (PageLength/FLS_WORD_SIZE));      (inlined)
.L322:
	ld.w	d1,[a14]
.L1878:
	ld.w	d15,[a13]
.L1879:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4470      if(*(PageStartAddressPtr)== *(SourcePtr))      (inlined)
	jne	d15,d1,.L323
.L1880:
	add	d0,#1
.L1881:
	add.a	a14,#4
.L1882:
	add.a	a13,#4
.L1883:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4472        Count++;      (inlined)
	j	.L324

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4470      if(*(PageStartAddressPtr)== *(SourcePtr))      (inlined)
.L323:
	mov	d4,#92
.L1884:
	mov	d5,#0
.L1885:
	mov	d6,#6
.L1886:
	mov	d7,#8
	call	Det_ReportError
.L1171:
	mov	d10,#1
.L1887:
	mov	d0,d8

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4480      else      (inlined)
.L324:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4494    }while(Count < (PageLength/FLS_WORD_SIZE));      (inlined)
	jlt.u	d0,d8,.L322
.L1888:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4496    if(Error == (boolean)FALSE)      (inlined)
	jne	d10,#0,.L325
.L823:
	ld.w	d15,[a12]
.L1889:
	movh	d0,#32
.L1176:
	and	d15,d0
.L1890:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5048   return RetVal;      (inlined)
	j	.L326

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5049  }      (inlined)
.L326:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4499      if(Fls_lChkBitErrors())      (inlined)
	jeq	d15,#0,.L327
.L824:
	mov	d4,#92
.L1891:
	mov	d5,#0
.L1892:
	mov	d6,#6
.L1893:
	mov	d7,#8
	call	Det_ReportError
.L1894:
	mov	d10,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4499      if(Fls_lChkBitErrors())      (inlined)
.L327:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4496    if(Error == (boolean)FALSE)      (inlined)
.L325:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4509    return Error;      (inlined)
	j	.L328

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4510  }      (inlined)
.L328:
	ld.w	d15,[a15]4
.L1895:
	add	d15,d11
	st.w	[a15]4,d15
.L1896:
	ld.w	d15,[a15]20
.L1897:
	sub	d15,d11
	st.w	[a15]20,d15
.L1898:
	ld.a	a2,[a15]28
.L1899:
	addsc.a	a2,a2,d11,#0
.L1900:
	st.a	[a15]28,a2
.L316:
.L311:
	jne	d10,#0,.L329
.L803:
	ld.w	d15,[a15]20
.L1901:
	jne	d15,#0,.L330
.L1902:
	mov	d4,#1
	call	Fls_lUnLoadAccessCode
.L1903:
	mov	d15,#0
.L1177:
	st.w	[a15]32,d15
.L1904:
	addsc.a	a2,a15,d9,#0
.L1905:
	mov	d15,#0
.L1178:
	st.b	[a2]42,d15
.L1906:
	ld.bu	d15,[a15]41
.L1907:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]41,d15
.L1908:
	call	Fls_ClearStatusCmdCycle
.L1909:
	ld.a	a15,[a10]4
.L1170:
	ld.a	a15,[a15]
.L1910:
	ld.a	a2,[a15]
.L1911:
	mov	d15,#1
.L1912:
	st.b	[a2]40,d15
.L1913:
	ld.a	a15,[a15]12
.L1914:
	jz.a	a15,.L331
.L1915:
	calli	a15
.L331:
	ld.a	a15,[a10]4
	ld.a	a15,[a15]
.L1916:
	ld.a	a15,[a15]
.L1917:
	mov	d15,#0
.L1918:
	st.b	[a15]40,d15
.L1919:
	j	.L332
.L330:
	mov	d0,#16384
	addih	d0,d0,#44800
.L1920:
	ld.w	d15,[a15]4
.L1921:
	jne	d15,d0,.L333
.L1922:
	jeq	d9,#1,.L334
.L1923:
	st.w	[a15]4,d0
.L1924:
	st.w	[a10],d0
.L1925:
	mov	d15,#0
.L1926:
	st.b	[a15]42,d15
.L334:
.L333:
	ld.w	d15,[a15]4
.L1927:
	mov.a	a12,d15
.L1928:
	ld.w	d0,[a15]20
.L1929:
	mov	d9,#6
.L827:
	mov	d1,#0
.L1179:
	mov	d8,#0
.L1181:
	mov	d15,#24
.L1930:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d15,d0,.L335
.L1931:
	mov.d	d15,a12
.L1932:
	and	d15,#31
.L1933:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4616        ((((uint32)AddrCheckPtr) & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L336

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L335:
	mov	d15,#8
.L1183:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4618      PageLength = FLS_PAGE_SIZE;      (inlined)
	j	.L337

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4615    if( (Length <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L336:
	mov	d15,#32

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4620    else      (inlined)
.L337:
	sh	d11,d15,#-2

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
.L338:
	ld.w	d15,[a12]
.L1934:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
	jne	d15,#0,.L339
.L1935:
	add	d8,#1
.L1182:
	extr.u	d8,d8,#0,#8
.L1184:
	add.a	a12,#4
.L1936:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4630         Loop++;      (inlined)
	j	.L340

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4628      if((*(AddrCheckPtr)) == 0U)      (inlined)
.L339:
	mov	d4,#92
.L1937:
	mov	d5,#0
.L1938:
	mov	d7,#7
	mov	d6,d9
	call	Det_ReportError
.L1180:
	mov	d1,#1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4635      else      (inlined)
.L340:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4647    } while((RetVal == E_OK) && (Loop < PageLength));      (inlined)
	jne	d1,#0,.L341
.L1939:
	jlt.u	d8,d11,.L338
.L341:
	mov	d15,d1

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4649    return RetVal;      (inlined)
	j	.L342

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4650  }      (inlined)
.L342:
	jne	d15,#1,.L343
.L804:
	mov	d10,#1
.L805:
	mov	d4,#1
	call	Fls_lErrorHandler
.L343:
	jne	d10,#0,.L344
.L806:
	ld.w	d4,[a10]
	call	Fls_lMainWriteJobStart
.L344:
.L332:
	j	.L345
.L329:
	mov	d4,#1
	call	Fls_lErrorHandler
.L345:
.L305:
	ret
.L776:
	
__Fls_lMainWrite_function_end:
	.size	Fls_lMainWrite,__Fls_lMainWrite_function_end-Fls_lMainWrite
.L513:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lMainWriteJobStart',code,cluster('Fls_lMainWriteJobStart')
	.sect	'.text.Fls_17_Pmu.Fls_lMainWriteJobStart'
	.align	2
	
; Function Fls_lMainWriteJobStart
.L419:
Fls_lMainWriteJobStart:	.type	func
	mov	d8,d4
.L1185:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a2,[a15]
.L2132:
	ld.a	a12,[a2]
.L1186:
	ld.bu	d15,[a12]41
.L2133:
	or	d15,#2
	st.b	[a12]41,d15
.L2134:
	call	Fls_lSchMEnter_Main
.L904:
	mov	d5,#1
.L1187:
	ld.a	a15,[a15]
.L2135:
	ld.a	a15,[a15]
.L1188:
	ld.w	d15,[a15]20
.L2136:
	mov	d0,#24
.L2137:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
	jge.u	d0,d15,.L346
.L2138:
	ld.w	d15,[a15]4
.L2139:
	and	d15,#31
.L2140:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4832         ((StatePtr->FlsWriteAddress & (FLS_BURST_PAGE_SIZE - 1U)) != 0U) )      (inlined)
	jeq	d15,#0,.L347

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L346:
	mov	d5,#0

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4831    if( (StatePtr->FlsWriteLength <= (FLS_BURST_PAGE_SIZE - FLS_PAGE_SIZE)) ||      (inlined)
.L347:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4837    return RetVal;      (inlined)
	j	.L348

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4838  }      (inlined)
.L348:
	mov	d4,d8
.L1190:
	mov.aa	a4,a12
.L906:
	call	Fls_CallWriteCommand
.L907:
	call	Fls_lSchMExit_Main
.L910:
	movh.a	a15,#63488
.L1189:
	ld.w	d15,[a15]@los(0xf8002010)
.L2141:
	mov	d0,#12288
.L1191:
	and	d15,d0
.L2142:

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4905   return RetVal;      (inlined)
	j	.L349

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  4906  }      (inlined)
.L349:
	jeq	d15,#0,.L350
.L911:
	call	Fls_lDemReportError_Write
.L2143:
	mov	d4,#1
	call	Fls_lErrorHandler
.L2144:
	j	.L351
.L350:
	ld.bu	d15,[a12]45
.L1192:
	jne	d15,#1,.L352
.L2145:
	mov	d4,#1
	call	Fls_lErrorHandler
.L2146:
	j	.L353
.L352:
.L353:
.L351:
	ret
.L899:
	
__Fls_lMainWriteJobStart_function_end:
	.size	Fls_lMainWriteJobStart,__Fls_lMainWriteJobStart_function_end-Fls_lMainWriteJobStart
.L543:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lErrorHandler',code,cluster('Fls_lErrorHandler')
	.sect	'.text.Fls_17_Pmu.Fls_lErrorHandler'
	.align	2
	
; Function Fls_lErrorHandler
.L421:
Fls_lErrorHandler:	.type	func
	mov	d8,d4
.L1194:
	movh.a	a13,#@his(Fls_ConfigPtr)
	lea	a13,[a13]@los(Fls_ConfigPtr)
	ld.a	a15,[a13]
.L2053:
	ld.a	a15,[a15]
.L1195:
	lea	a12,[a15]42
.L1197:
	jne	d8,#2,.L354
.L2054:
	mov	d4,#2
.L1193:
	call	Fls_lUnLoadAccessCode
.L2055:
	ld.bu	d0,[a15]41
.L2056:
	insert	d0,d0,#0,#2,#1
	st.b	[a15]41,d0
.L2057:
	j	.L355
.L354:
	jne	d8,#1,.L356
.L2058:
	mov	d4,#1
.L1198:
	call	Fls_lUnLoadAccessCode
.L2059:
	ld.bu	d0,[a15]41
.L2060:
	insert	d0,d0,#0,#1,#1
	st.b	[a15]41,d0
.L2061:
	j	.L357
.L356:
.L357:
.L355:
	ld.bu	d15,[a12]
.L2062:
	jne	d15,d8,.L358
.L2063:
	mov	d0,#0
.L2064:
	st.b	[a12],d0
.L358:
	ld.bu	d15,[a15]43
.L2065:
	jne	d15,d8,.L359
.L2066:
	mov	d15,#0
.L2067:
	st.b	[a15]43,d15
.L359:
	mov	d15,#1
.L2068:
	st.w	[a15]32,d15
.L2069:
	call	Fls_ClearStatusCmdCycle
.L2070:
	ld.a	a15,[a13]
.L1196:
	ld.a	a2,[a15]
.L2071:
	st.b	[a2]40,d8
.L2072:
	ld.a	a15,[a15]16
.L2073:
	jz.a	a15,.L360
.L2074:
	calli	a15
.L360:
	ld.a	a15,[a13]
.L2075:
	ld.a	a15,[a15]
.L2076:
	mov	d15,#0
.L2077:
	st.b	[a15]40,d15
.L2078:
	ret
.L881:
	
__Fls_lErrorHandler_function_end:
	.size	Fls_lErrorHandler,__Fls_lErrorHandler_function_end-Fls_lErrorHandler
.L528:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lLoadAccessCode',code,cluster('Fls_lLoadAccessCode')
	.sect	'.text.Fls_17_Pmu.Fls_lLoadAccessCode'
	.align	2
	
; Function Fls_lLoadAccessCode
.L423:
Fls_lLoadAccessCode:	.type	func
	sub.a	a10,#8
.L1199:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L2083:
	jne	d4,#1,.L361
.L2084:
	movh.a	a2,#@his(_lc_gb_FLS_AC_WRITE_SOURCE)
.L1200:
	lea	a2,[a2]@los(_lc_gb_FLS_AC_WRITE_SOURCE)
.L2085:
	ld.a	a15,[a15]28
.L1201:
	movh.a	a4,#@his(_lc_ge_FLS_AC_WRITE_SOURCE)
.L1202:
	lea	a4,[a4]@los(_lc_ge_FLS_AC_WRITE_SOURCE)
.L2086:
	j	.L362
.L361:
	movh.a	a2,#@his(_lc_gb_FLS_AC_ERASE_SOURCE)
.L1203:
	lea	a2,[a2]@los(_lc_gb_FLS_AC_ERASE_SOURCE)
.L2087:
	ld.a	a15,[a15]32
.L1204:
	movh.a	a4,#@his(_lc_ge_FLS_AC_ERASE_SOURCE)
.L1205:
	lea	a4,[a4]@los(_lc_ge_FLS_AC_ERASE_SOURCE)
.L362:
	mov.d	d15,a4
.L1206:
	mov.d	d0,a2
.L1208:
	sub	d15,d0
.L1207:
	st.w	[a10],d15
.L2088:
	ld.w	d15,[a10]
.L2089:
	and	d15,#3
.L2090:
	jeq	d15,#0,.L363
.L2091:
	ld.w	d15,[a10]
.L2092:
	add	d15,#4
.L2093:
	st.w	[a10],d15
.L363:
	ld.w	d15,[a10]
.L2094:
	sh	d15,#-2
.L2095:
	st.w	[a10],d15
.L364:
	ld.w	d15,[a2]
.L2096:
	st.w	[a15],d15
.L2097:
	add.a	a15,#4
.L2098:
	add.a	a2,#4
.L2099:
	ld.w	d15,[a10]
.L2100:
	add	d15,#-1
	st.w	[a10],d15
.L2101:
	ld.w	d15,[a10]
.L2102:
	jne	d15,#0,.L364
.L2103:
	ret
.L885:
	
__Fls_lLoadAccessCode_function_end:
	.size	Fls_lLoadAccessCode,__Fls_lLoadAccessCode_function_end-Fls_lLoadAccessCode
.L533:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lUnLoadAccessCode',code,cluster('Fls_lUnLoadAccessCode')
	.sect	'.text.Fls_17_Pmu.Fls_lUnLoadAccessCode'
	.align	2
	
; Function Fls_lUnLoadAccessCode
.L425:
Fls_lUnLoadAccessCode:	.type	func
	sub.a	a10,#8
.L1209:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L2108:
	jne	d4,#1,.L365
.L2109:
	movh.a	a2,#@his(_lc_gb_FLS_AC_WRITE_SOURCE)
.L1210:
	lea	a2,[a2]@los(_lc_gb_FLS_AC_WRITE_SOURCE)
.L2110:
	ld.a	a15,[a15]28
.L1211:
	movh.a	a4,#@his(_lc_ge_FLS_AC_WRITE_SOURCE)
.L1212:
	lea	a4,[a4]@los(_lc_ge_FLS_AC_WRITE_SOURCE)
.L2111:
	j	.L366
.L365:
	movh.a	a2,#@his(_lc_gb_FLS_AC_ERASE_SOURCE)
.L1213:
	lea	a2,[a2]@los(_lc_gb_FLS_AC_ERASE_SOURCE)
.L2112:
	ld.a	a15,[a15]32
.L1214:
	movh.a	a4,#@his(_lc_ge_FLS_AC_ERASE_SOURCE)
.L1215:
	lea	a4,[a4]@los(_lc_ge_FLS_AC_ERASE_SOURCE)
.L366:
	mov.d	d15,a4
.L1216:
	mov.d	d0,a2
.L1218:
	sub	d15,d0
.L1217:
	st.w	[a10],d15
.L2113:
	ld.w	d15,[a10]
.L2114:
	and	d15,#3
.L2115:
	jeq	d15,#0,.L367
.L2116:
	ld.w	d15,[a10]
.L2117:
	add	d15,#4
.L2118:
	st.w	[a10],d15
.L367:
	ld.w	d15,[a10]
.L2119:
	sh	d15,#-2
.L2120:
	st.w	[a10],d15
.L368:
	mov	d15,#0
.L2121:
	st.w	[a15],d15
.L2122:
	add.a	a15,#4
.L2123:
	ld.w	d15,[a10]
.L2124:
	add	d15,#-1
	st.w	[a10],d15
.L2125:
	ld.w	d15,[a10]
.L2126:
	jne	d15,#0,.L368
.L2127:
	ret
.L892:
	
__Fls_lUnLoadAccessCode_function_end:
	.size	Fls_lUnLoadAccessCode,__Fls_lUnLoadAccessCode_function_end-Fls_lUnLoadAccessCode
.L538:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lUninitDET',code,cluster('Fls_lUninitDET')
	.sect	'.text.Fls_17_Pmu.Fls_lUninitDET'
	.align	2
	
; Function Fls_lUninitDET
.L427:
Fls_lUninitDET:	.type	func
	mov	d6,d4
.L1220:
	mov	d2,#0
.L1222:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.w	d15,[a15]
.L2164:
	jne	d15,#0,.L369
.L2165:
	mov	d4,#92
.L1219:
	mov	d5,#0
.L2166:
	mov	d7,#5
	call	Det_ReportError
.L1221:
	mov	d2,#1
.L369:
	j	.L370
.L370:
	ret
.L920:
	
__Fls_lUninitDET_function_end:
	.size	Fls_lUninitDET,__Fls_lUninitDET_function_end-Fls_lUninitDET
.L553:
	; End of function
	
	.sdecl	'.text.Fls_17_Pmu.Fls_lTimeOutDET',code,cluster('Fls_lTimeOutDET')
	.sect	'.text.Fls_17_Pmu.Fls_lTimeOutDET'
	.align	2
	
; Function Fls_lTimeOutDET
.L429:
Fls_lTimeOutDET:	.type	func
	mov	d6,d4
.L1224:
	movh.a	a15,#@his(Fls_ConfigPtr)
	lea	a15,[a15]@los(Fls_ConfigPtr)
	ld.a	a15,[a15]
.L2171:
	ld.a	a15,[a15]
.L1225:
	mov	d8,#0
.L1226:
	ld.bu	d15,[a15]46
.L2172:
	jeq	d15,#0,.L371
.L2173:
	ld.bu	d15,[a15]41
.L2174:
	jz.t	d15:2,.L372
.L2175:
	ld.w	d15,[a15]8
.L2176:
	jne	d15,#0,.L373
.L2177:
	mov	d8,#1
.L2178:
	j	.L374
.L373:
	add	d15,#-1
	st.w	[a15]8,d15
.L374:
.L372:
	ld.bu	d15,[a15]41
.L2179:
	jz.t	d15:1,.L375
.L2180:
	ld.w	d15,[a15]12
.L2181:
	jne	d15,#0,.L376
.L2182:
	mov	d8,#1
.L2183:
	j	.L377
.L376:
	add	d15,#-1
	st.w	[a15]12,d15
.L377:
.L375:
	jne	d8,#1,.L378
.L2184:
	mov	d4,#92
.L1223:
	mov	d5,#0
.L2185:
	mov	d7,#9
	call	Det_ReportError
.L378:
.L371:
	mov	d2,d8
.L1227:
	j	.L379
.L379:
	ret
.L924:
	
__Fls_lTimeOutDET_function_end:
	.size	Fls_lTimeOutDET,__Fls_lTimeOutDET_function_end-Fls_lTimeOutDET
.L558:
	; End of function
	
	.sdecl	'.bss.Fls_17_Pmu.Fls_ConfigPtr',data,cluster('Fls_ConfigPtr')
	.sect	'.bss.Fls_17_Pmu.Fls_ConfigPtr'
	.global	Fls_ConfigPtr
	.align	4
Fls_ConfigPtr:	.type	object
	.size	Fls_ConfigPtr,4
	.space	4
	.calls	'Fls_17_Pmu_Init','Det_ReportError'
	.calls	'Fls_17_Pmu_Init','Fls_ResetReadCmdCycle'
	.calls	'Fls_17_Pmu_Init','Fls_lSchMEnter_Init'
	.calls	'Fls_17_Pmu_Init','Mcal_ResetENDINIT'
	.calls	'Fls_17_Pmu_Init','Mcal_SetENDINIT'
	.calls	'Fls_17_Pmu_Init','Fls_lSchMExit_Init'
	.calls	'Fls_17_Pmu_Init','Fls_lSetDefaultMode'
	.calls	'Fls_17_Pmu_Init','__INDIRECT__'
	.calls	'Fls_17_Pmu_Erase','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_Erase','Det_ReportError'
	.calls	'Fls_17_Pmu_Erase','__INDIRECT__'
	.calls	'Fls_17_Pmu_Erase','Fls_lLoadAccessCode'
	.calls	'Fls_17_Pmu_Erase','Fls_lSchMEnter_Erase'
	.calls	'Fls_17_Pmu_Erase','Fls_CallEraseCommand'
	.calls	'Fls_17_Pmu_Erase','Fls_lSchMExit_Erase'
	.calls	'Fls_17_Pmu_Erase','Fls_lDemReportError_Erase'
	.calls	'Fls_17_Pmu_Erase','Fls_lErrorHandler'
	.calls	'Fls_17_Pmu_Write','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_Write','Det_ReportError'
	.calls	'Fls_17_Pmu_Write','__INDIRECT__'
	.calls	'Fls_17_Pmu_Write','Fls_lLoadAccessCode'
	.calls	'Fls_17_Pmu_Write','Fls_lErrorHandler'
	.calls	'Fls_17_Pmu_Write','Fls_lSchMEnter_Write'
	.calls	'Fls_17_Pmu_Write','Fls_CallWriteCommand'
	.calls	'Fls_17_Pmu_Write','Fls_lSchMExit_Write'
	.calls	'Fls_17_Pmu_Write','Fls_lDemReportError_Write'
	.calls	'Fls_17_Pmu_Compare','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_Compare','Det_ReportError'
	.calls	'Fls_17_Pmu_Cancel','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_Cancel','Fls_lUnLoadAccessCode'
	.calls	'Fls_17_Pmu_Cancel','__INDIRECT__'
	.calls	'Fls_17_Pmu_CancelNonEraseJobs','Fls_lUnLoadAccessCode'
	.calls	'Fls_17_Pmu_CancelNonEraseJobs','__INDIRECT__'
	.calls	'Fls_17_Pmu_SetMode','Det_ReportError'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lTimeOutDET'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lMainErase'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lMainWrite'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lMainRead'
	.calls	'Fls_17_Pmu_MainFunction','Fls_lMainCompare'
	.calls	'Fls_17_Pmu_Read','Fls_lUninitDET'
	.calls	'Fls_17_Pmu_Read','Det_ReportError'
	.calls	'Fls_17_Pmu_GetJobResult','Fls_lUninitDET'
	.calls	'Fls_lMainErase','Fls_lMainEraseJobStart'
	.calls	'Fls_lMainErase','__INDIRECT__'
	.calls	'Fls_lMainErase','Fls_lDemReportError_Erase'
	.calls	'Fls_lMainErase','Fls_lErrorHandler'
	.calls	'Fls_lMainErase','Det_ReportError'
	.calls	'Fls_lMainErase','Fls_lUnLoadAccessCode'
	.calls	'Fls_lMainErase','Fls_ClearStatusCmdCycle'
	.calls	'Fls_lMainEraseJobStart','Fls_lSchMEnter_Main'
	.calls	'Fls_lMainEraseJobStart','Fls_CallEraseCommand'
	.calls	'Fls_lMainEraseJobStart','Fls_lSchMExit_Main'
	.calls	'Fls_lMainEraseJobStart','Fls_lDemReportError_Erase'
	.calls	'Fls_lMainEraseJobStart','Fls_lErrorHandler'
	.calls	'Fls_lMainRead','Fls_lDemReportError_Read'
	.calls	'Fls_lMainRead','Fls_lErrorHandler'
	.calls	'Fls_lMainRead','__INDIRECT__'
	.calls	'Fls_lMainCompare','Fls_lDemReportError_Compare'
	.calls	'Fls_lMainCompare','Fls_lErrorHandler'
	.calls	'Fls_lMainCompare','Fls_ClearStatusCmdCycle'
	.calls	'Fls_lMainCompare','__INDIRECT__'
	.calls	'Fls_lMainWrite','Det_ReportError'
	.calls	'Fls_lMainWrite','Fls_lErrorHandler'
	.calls	'Fls_lMainWrite','Fls_lMainWriteJobStart'
	.calls	'Fls_lMainWrite','__INDIRECT__'
	.calls	'Fls_lMainWrite','Fls_lDemReportError_Write'
	.calls	'Fls_lMainWrite','Fls_lUnLoadAccessCode'
	.calls	'Fls_lMainWrite','Fls_ClearStatusCmdCycle'
	.calls	'Fls_lMainWriteJobStart','Fls_lSchMEnter_Main'
	.calls	'Fls_lMainWriteJobStart','Fls_CallWriteCommand'
	.calls	'Fls_lMainWriteJobStart','Fls_lSchMExit_Main'
	.calls	'Fls_lMainWriteJobStart','Fls_lDemReportError_Write'
	.calls	'Fls_lMainWriteJobStart','Fls_lErrorHandler'
	.calls	'Fls_lErrorHandler','Fls_lUnLoadAccessCode'
	.calls	'Fls_lErrorHandler','Fls_ClearStatusCmdCycle'
	.calls	'Fls_lErrorHandler','__INDIRECT__'
	.calls	'Fls_lUninitDET','Det_ReportError'
	.calls	'Fls_lTimeOutDET','Det_ReportError'
	.calls	'Fls_17_Pmu_Init','',0
	.calls	'Fls_17_Pmu_Erase','',8
	.calls	'Fls_17_Pmu_Write','',16
	.calls	'Fls_17_Pmu_Compare','',8
	.calls	'Fls_17_Pmu_Cancel','',0
	.calls	'Fls_17_Pmu_CancelNonEraseJobs','',0
	.calls	'Fls_17_Pmu_SetMode','',0
	.calls	'Fls_17_Pmu_MainFunction','',0
	.calls	'Fls_17_Pmu_Read','',8
	.calls	'Fls_17_Pmu_GetStatus','',0
	.calls	'Fls_17_Pmu_GetBankStatus','',0
	.calls	'Fls_17_Pmu_GetJobResult','',0
	.calls	'Fls_17_Pmu_GetOperStatus','',0
	.calls	'Fls_17_Pmu_ControlTimeoutDet','',0
	.calls	'Fls_lMainErase','',8
	.calls	'Fls_lMainEraseJobStart','',0
	.calls	'Fls_lMainRead','',0
	.calls	'Fls_lMainCompare','',0
	.calls	'Fls_lMainWrite','',8
	.calls	'Fls_lMainWriteJobStart','',0
	.calls	'Fls_lErrorHandler','',0
	.calls	'Fls_lLoadAccessCode','',8
	.calls	'Fls_lUnLoadAccessCode','',8
	.calls	'Fls_lUninitDET','',0
	.extern	_lc_gb_FLS_AC_WRITE_SOURCE
	.extern	_lc_ge_FLS_AC_WRITE_SOURCE
	.extern	_lc_gb_FLS_AC_ERASE_SOURCE
	.extern	_lc_ge_FLS_AC_ERASE_SOURCE
	.extern	Mcal_ResetENDINIT
	.extern	Mcal_SetENDINIT
	.extern	Det_ReportError
	.extern	Fls_ResetReadCmdCycle
	.extern	Fls_ClearStatusCmdCycle
	.extern	Fls_CallEraseCommand
	.extern	Fls_CallWriteCommand
	.extern	Fls_lDemReportError_Erase
	.extern	Fls_lDemReportError_Read
	.extern	Fls_lDemReportError_Write
	.extern	Fls_lDemReportError_Compare
	.extern	Fls_lSchMEnter_Init
	.extern	Fls_lSchMExit_Init
	.extern	Fls_lSchMEnter_Erase
	.extern	Fls_lSchMExit_Erase
	.extern	Fls_lSchMEnter_Write
	.extern	Fls_lSchMExit_Write
	.extern	Fls_lSchMEnter_Main
	.extern	Fls_lSchMExit_Main
	.extern	Fls_lSetDefaultMode
	.extern	__INDIRECT__
	.calls	'Fls_lTimeOutDET','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L431:
	.word	30254
	.half	3
	.word	.L432
	.byte	4
.L430:
	.byte	1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L433
.L577:
	.byte	2
	.byte	'unsigned char',0,1,8
.L813:
	.byte	3
	.byte	'Fls_lPverChk',0,3,1,163,32,26
	.word	152
	.byte	1,1
.L814:
	.byte	4,0
.L566:
	.byte	2
	.byte	'unsigned int',0,4,7
.L703:
	.byte	5
	.word	152
	.byte	6
	.word	152
.L604:
	.byte	5
	.word	217
.L718:
	.byte	7,3,31,9,4,8
	.byte	'MEMIF_JOB_OK',0,0,8
	.byte	'MEMIF_JOB_FAILED',0,1,8
	.byte	'MEMIF_JOB_PENDING',0,2,8
	.byte	'MEMIF_JOB_CANCELED',0,3,8
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,8
	.byte	'MEMIF_BLOCK_INVALID',0,5,0
.L738:
	.byte	7,3,41,9,4,8
	.byte	'MEMIF_MODE_SLOW',0,0,8
	.byte	'MEMIF_MODE_FAST',0,1,0,9
	.byte	'Fls_JobStartType',0,2,175,3,16,1,10
	.byte	'Reserved1',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'Write',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'Erase',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'Read',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'Compare',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'Reserved2',0,1
	.word	152
	.byte	3,0,2,35,0,0
.L584:
	.byte	11,2
	.word	152
	.byte	12,1,0,9
	.byte	'Fls_17_Pmu_StateType',0,2,198,3,16,48,13
	.byte	'FlsReadAddress',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'FlsWriteAddress',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	196
	.byte	4,2,35,8,13
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	196
	.byte	4,2,35,12,13
	.byte	'FlsReadLength',0
	.word	196
	.byte	4,2,35,16,13
	.byte	'FlsWriteLength',0
	.word	196
	.byte	4,2,35,20,13
	.byte	'FlsReadBufferPtr',0
	.word	212
	.byte	4,2,35,24,13
	.byte	'FlsWriteBufferPtr',0
	.word	222
	.byte	4,2,35,28,13
	.byte	'FlsJobResult',0
	.word	227
	.byte	4,2,35,32,13
	.byte	'FlsMode',0
	.word	357
	.byte	4,2,35,36,13
	.byte	'NotifCaller',0
	.word	152
	.byte	1,2,35,40,13
	.byte	'JobStarted',0
	.word	399
	.byte	1,2,35,41,13
	.byte	'FlsJobType',0
	.word	534
	.byte	2,2,35,42,13
	.byte	'FlsOper',0
	.word	152
	.byte	1,2,35,44,13
	.byte	'FlsTimeoutErr',0
	.word	152
	.byte	1,2,35,45,13
	.byte	'FlsTimeoutControl',0
	.word	152
	.byte	1,2,35,46,0,6
	.word	543
	.byte	5
	.word	957
.L750:
	.byte	3
	.byte	'Fls_lBusyDET_Read',0,3,1,205,32,24
	.word	152
	.byte	1,1
.L752:
	.byte	14
	.byte	'StatePtr',0,1,205,32,71
	.word	962
.L754:
	.byte	4,0
.L643:
	.byte	3
	.byte	'Fls_lBusyDET_Write',0,3,1,166,33,24
	.word	152
	.byte	1,1
.L645:
	.byte	14
	.byte	'StatePtr',0,1,166,33,71
	.word	962
.L647:
	.byte	4,0
.L597:
	.byte	3
	.byte	'Fls_lBusyDET_Erase',0,3,1,209,33,24
	.word	152
	.byte	1,1
.L600:
	.byte	14
	.byte	'StatePtr',0,1,209,33,71
	.word	962
.L602:
	.byte	4,0
.L694:
	.byte	3
	.byte	'Fls_lBusyDET_Compare',0,3,1,250,32,24
	.word	152
	.byte	1,1
.L696:
	.byte	14
	.byte	'StatePtr',0,1,251,32,70
	.word	962
.L698:
	.byte	4,0
.L653:
	.byte	15
	.byte	'Fls_lCalculateWriteTimeoutCount',0,3,1,177,35,23,1,1
.L655:
	.byte	4,0,6
	.word	196
.L809:
	.byte	5
	.word	1214
	.byte	6
	.word	152
.L662:
	.byte	3
	.byte	'Fls_lPageEraseCheck',0,3,1,247,35,33
	.word	152
	.byte	1,1
.L664:
	.byte	14
	.byte	'AddrCheckPtr',0,1,247,35,68
	.word	1219
.L666:
	.byte	14
	.byte	'Length',0,1,248,35,60
	.word	196
.L668:
	.byte	14
	.byte	'ServiceID',0,1,249,35,65
	.word	1224
.L670:
	.byte	4,0
.L587:
	.byte	3
	.byte	'Fls_lCheckEraseDet',0,3,1,193,36,33
	.word	152
	.byte	1,1
.L590:
	.byte	14
	.byte	'TargetAddress',0,1,194,36,65
	.word	196
.L592:
	.byte	14
	.byte	'Length',0,1,195,36,64
	.word	196
.L594:
	.byte	16,4,0,0
.L632:
	.byte	3
	.byte	'Fls_lCheckWriteDet',0,3,1,142,37,33
	.word	152
	.byte	1,1
.L635:
	.byte	14
	.byte	'TargetAddress',0,1,143,37,66
	.word	196
.L637:
	.byte	14
	.byte	'SourceAddressPtr',0,1,144,37,63
	.word	222
.L639:
	.byte	14
	.byte	'Length',0,1,145,37,65
	.word	196
.L641:
	.byte	4,0
.L794:
	.byte	3
	.byte	'Fls_lCheckWrittenPage',0,3,1,228,34,26
	.word	152
	.byte	1,1
.L797:
	.byte	14
	.byte	'PageLength',0,1,228,34,55
	.word	196
.L799:
	.byte	16,4,0,0
.L615:
	.byte	3
	.byte	'Fls_lChkSeqProtErrors',0,3,1,154,38,25
	.word	196
	.byte	1,1
.L618:
	.byte	4,0
.L606:
	.byte	3
	.byte	'Fls_lChkOperError',0,3,1,190,38,25
	.word	196
	.byte	1,1
.L608:
	.byte	4,0
.L572:
	.byte	3
	.byte	'Fls_lChkOperError_initmode',0,3,1,244,38,25
	.word	196
	.byte	1,1
.L574:
	.byte	4,0
.L822:
	.byte	3
	.byte	'Fls_lChkBitErrors',0,3,1,169,39,25
	.word	196
	.byte	1,1
.L825:
	.byte	4,0
.L611:
	.byte	3
	.byte	'Fls_lHWBusyCheck',0,3,1,204,39,25
	.word	196
	.byte	1,1
.L613:
	.byte	4,0
.L674:
	.byte	3
	.byte	'Fls_lGetWriteMode',0,3,1,215,37,24
	.word	152
	.byte	1,1
.L676:
	.byte	4,0
.L838:
	.byte	3
	.byte	'Fls_lGetReadModeLength',0,3,1,249,37,33
	.word	196
	.byte	1,1
.L840:
	.byte	4,0,17
	.byte	'Mcal_ResetENDINIT',0,4,115,13,1,1,1,1,17
	.byte	'Mcal_SetENDINIT',0,4,142,1,13,1,1,1,1,2
	.byte	'unsigned short int',0,2,7,18
	.byte	'Det_ReportError',0,5,112,16
	.word	152
	.byte	1,1,1,1,14
	.byte	'ModuleId',0,5,112,39
	.word	1842
	.byte	14
	.byte	'InstanceId',0,5,112,55
	.word	152
	.byte	14
	.byte	'ApiId',0,5,112,73
	.word	152
	.byte	14
	.byte	'ErrorId',0,5,112,86
	.word	152
	.byte	0
.L564:
	.byte	5
	.word	543
	.byte	19,1,1,5
	.word	1964
	.byte	20
	.byte	'Fls_NotifFunctionPtrType',0,2,137,4,16
	.word	1967
	.byte	6
	.word	196
	.byte	5
	.word	2006
	.byte	21,1,1,22
	.word	196
	.byte	22
	.word	196
	.byte	22
	.word	2011
	.byte	22
	.word	152
	.byte	0,5
	.word	2016
	.byte	20
	.byte	'Fls_WriteCmdPtrType',0,2,139,4,16
	.word	2040
	.byte	21,1,1,22
	.word	196
	.byte	0,5
	.word	2074
	.byte	20
	.byte	'Fls_EraseCmdPtrType',0,2,144,4,16
	.word	2083
	.byte	9
	.byte	'Fls_17_Pmu_ConfigType',0,2,149,4,16,44,13
	.byte	'FlsStateVarPtr',0
	.word	1959
	.byte	4,2,35,0,13
	.byte	'FlsFastRead',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'FlsSlowRead',0
	.word	196
	.byte	4,2,35,8,13
	.byte	'FlsJobEndNotificationPtr',0
	.word	1972
	.byte	4,2,35,12,13
	.byte	'FlsJobErrorNotificationPtr',0
	.word	1972
	.byte	4,2,35,16,13
	.byte	'FlsIllegalStateNotificationPtr',0
	.word	1972
	.byte	4,2,35,20,13
	.byte	'FlsWaitStates',0
	.word	196
	.byte	4,2,35,24,13
	.byte	'FlsAccessCodeWritePtr',0
	.word	2045
	.byte	4,2,35,28,13
	.byte	'FlsAccessCodeErasePtr',0
	.word	2088
	.byte	4,2,35,32,13
	.byte	'FlsCallCycle',0
	.word	196
	.byte	4,2,35,36,13
	.byte	'FlsDefaultMode',0
	.word	357
	.byte	4,2,35,40,0,6
	.word	2117
.L562:
	.byte	5
	.word	2453
	.byte	5
	.word	1964
	.byte	5
	.word	2016
	.byte	5
	.word	2074
.L582:
	.byte	23
	.word	196
.L625:
	.byte	23
	.word	196
.L627:
	.byte	5
	.word	196
.L690:
	.byte	23
	.word	196
.L710:
	.byte	7,3,23,9,4,8
	.byte	'MEMIF_UNINIT',0,0,8
	.byte	'MEMIF_IDLE',0,1,8
	.byte	'MEMIF_BUSY',0,2,8
	.byte	'MEMIF_BUSY_INTERNAL',0,3,0
.L746:
	.byte	23
	.word	196
	.byte	17
	.byte	'Fls_ResetReadCmdCycle',0,6,108,6,1,1,1,1,17
	.byte	'Fls_ClearStatusCmdCycle',0,6,110,6,1,1,1,1,23
	.word	196
	.byte	24
	.byte	'Fls_CallEraseCommand',0,6,112,6,1,1,1,1,14
	.byte	'PhysicalAddress',0,6,112,43
	.word	2634
	.byte	0,23
	.word	196
	.byte	24
	.byte	'Fls_CallWriteCommand',0,6,113,6,1,1,1,1,14
	.byte	'PhysicalAddress',0,6,113,43
	.word	2693
	.byte	14
	.byte	's_ptr',0,6,114,55
	.word	962
	.byte	14
	.byte	'WriteMode',0,6,115,33
	.word	152
	.byte	0,25
	.byte	'Fls_lDemReportError_Erase',0,2,7,62,24,1,1,1,1,25
	.byte	'Fls_lDemReportError_Read',0,2,7,63,24,1,1,1,1,25
	.byte	'Fls_lDemReportError_Write',0,2,7,64,24,1,1,1,1,25
	.byte	'Fls_lDemReportError_Compare',0,2,7,65,24,1,1,1,1,25
	.byte	'Fls_lSchMEnter_Init',0,2,7,68,24,1,1,1,1,25
	.byte	'Fls_lSchMExit_Init',0,2,7,69,24,1,1,1,1,25
	.byte	'Fls_lSchMEnter_Erase',0,2,7,71,24,1,1,1,1,25
	.byte	'Fls_lSchMExit_Erase',0,2,7,72,24,1,1,1,1,25
	.byte	'Fls_lSchMEnter_Write',0,2,7,74,24,1,1,1,1,25
	.byte	'Fls_lSchMExit_Write',0,2,7,75,24,1,1,1,1,25
	.byte	'Fls_lSchMEnter_Main',0,2,7,80,24,1,1,1,1,25
	.byte	'Fls_lSchMExit_Main',0,2,7,81,24,1,1,1,1,26
	.byte	'Fls_lSetDefaultMode',0,2,7,83,34
	.word	357
	.byte	1,1,1,1
.L768:
	.byte	23
	.word	196
.L780:
	.byte	23
	.word	196
.L890:
	.byte	23
	.word	196
.L897:
	.byte	23
	.word	196
	.byte	27
	.word	169
	.byte	4,0,27
	.word	967
	.byte	28
	.word	997
	.byte	4,0,27
	.word	1017
	.byte	28
	.word	1048
	.byte	4,0,27
	.word	1068
	.byte	28
	.word	1099
	.byte	4,0,27
	.word	1119
	.byte	28
	.word	1152
	.byte	4,0
.L921:
	.byte	6
	.word	152
.L925:
	.byte	6
	.word	152
	.byte	27
	.word	1172
	.byte	4,0,27
	.word	1229
	.byte	28
	.word	1261
	.byte	28
	.word	1283
	.byte	28
	.word	1299
	.byte	4,0,27
	.word	1320
	.byte	28
	.word	1351
	.byte	28
	.word	1374
	.byte	16,29
	.word	1068
	.byte	28
	.word	1099
	.byte	30
	.word	1117
	.byte	0,4,0,0,27
	.word	1394
	.byte	28
	.word	1425
	.byte	28
	.word	1448
	.byte	28
	.word	1474
	.byte	4,0,27
	.word	1492
	.byte	28
	.word	1526
	.byte	16,29
	.word	1659
	.byte	30
	.word	1689
	.byte	0,4,0,0,27
	.word	1550
	.byte	4,0,27
	.word	1586
	.byte	4,0,27
	.word	1618
	.byte	4,0,27
	.word	1659
	.byte	4,0,27
	.word	1691
	.byte	4,0,27
	.word	1722
	.byte	4,0,27
	.word	1754
	.byte	4,0,31
	.byte	'__INDIRECT__',0,1,1,1,1,1,1,32,1,5
	.word	3455
	.byte	20
	.byte	'__codeptr',0,1,1,1
	.word	3457
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,8,45,16,4,10
	.byte	'EN0',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'EN1',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'EN2',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'EN3',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'EN4',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'EN5',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'EN6',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'EN7',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'EN8',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'EN9',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'EN10',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'EN11',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'EN12',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'EN13',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'EN14',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'EN15',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'EN16',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'EN17',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'EN18',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'EN19',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'EN20',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'EN21',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'EN22',0,1
	.word	152
	.byte	1,1,2,35,2,10
	.byte	'EN23',0,1
	.word	152
	.byte	1,0,2,35,2,10
	.byte	'EN24',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'EN25',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'EN26',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'EN27',0,1
	.word	152
	.byte	1,4,2,35,3,10
	.byte	'EN28',0,1
	.word	152
	.byte	1,3,2,35,3,10
	.byte	'EN29',0,1
	.word	152
	.byte	1,2,2,35,3,10
	.byte	'EN30',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'EN31',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,8,79,3
	.word	3480
	.byte	9
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,8,82,16,4,10
	.byte	'reserved_0',0,4
	.word	196
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,8,85,3
	.word	4041
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,8,88,16,4,10
	.byte	'SEL',0,1
	.word	152
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	152
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	196
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,8,95,3
	.word	4122
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,8,98,16,4,10
	.byte	'VLD0',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'VLD1',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'VLD2',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'VLD3',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'VLD4',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'VLD5',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'VLD6',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'VLD7',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'VLD8',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'VLD9',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	196
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,8,111,3
	.word	4275
	.byte	9
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,8,114,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	196
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	152
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,8,121,3
	.word	4523
	.byte	9
	.byte	'_Ifx_FLASH_COMM0_Bits',0,8,124,16,4,10
	.byte	'STATUS',0,1
	.word	152
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,4
	.word	196
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_FLASH_COMM0_Bits',0,8,128,1,3
	.word	4669
	.byte	9
	.byte	'_Ifx_FLASH_COMM1_Bits',0,8,131,1,16,4,10
	.byte	'STATUS',0,1
	.word	152
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	152
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_COMM1_Bits',0,8,136,1,3
	.word	4767
	.byte	9
	.byte	'_Ifx_FLASH_COMM2_Bits',0,8,139,1,16,4,10
	.byte	'STATUS',0,1
	.word	152
	.byte	8,0,2,35,0,10
	.byte	'DATA',0,1
	.word	152
	.byte	8,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_COMM2_Bits',0,8,144,1,3
	.word	4883
	.byte	9
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,8,147,1,16,4,10
	.byte	'RCODE',0,4
	.word	196
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	1842
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_ECCRD_Bits',0,8,153,1,3
	.word	4999
	.byte	9
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,8,156,1,16,4,10
	.byte	'RCODE',0,4
	.word	196
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	1842
	.byte	8,2,2,35,2,10
	.byte	'EDCERRINJ',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'ECCORDIS',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_ECCRP_Bits',0,8,162,1,3
	.word	5139
	.byte	9
	.byte	'_Ifx_FLASH_ECCW_Bits',0,8,165,1,16,4,10
	.byte	'WCODE',0,4
	.word	196
	.byte	22,10,2,35,0,10
	.byte	'reserved_22',0,2
	.word	1842
	.byte	8,2,2,35,2,10
	.byte	'DECENCDIS',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'PECENCDIS',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_ECCW_Bits',0,8,171,1,3
	.word	5279
	.byte	9
	.byte	'_Ifx_FLASH_FCON_Bits',0,8,174,1,16,4,10
	.byte	'WSPFLASH',0,1
	.word	152
	.byte	4,4,2,35,0,10
	.byte	'WSECPF',0,1
	.word	152
	.byte	2,2,2,35,0,10
	.byte	'WSDFLASH',0,2
	.word	1842
	.byte	6,4,2,35,0,10
	.byte	'WSECDF',0,1
	.word	152
	.byte	3,1,2,35,1,10
	.byte	'IDLE',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'ESLDIS',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'SLEEP',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'NSAFECC',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'STALL',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'RES21',0,1
	.word	152
	.byte	2,2,2,35,2,10
	.byte	'RES23',0,1
	.word	152
	.byte	2,0,2,35,2,10
	.byte	'VOPERM',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'PROERM',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	152
	.byte	3,2,2,35,3,10
	.byte	'PR5V',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_FCON_Bits',0,8,193,1,3
	.word	5418
	.byte	9
	.byte	'_Ifx_FLASH_FPRO_Bits',0,8,196,1,16,4,10
	.byte	'PROINP',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'PRODISP',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'PROIND',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'PRODISD',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'PROINHSMCOTP',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'PROINOTP',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'RES7',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'PROINDBG',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'PRODISDBG',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'PROINHSM',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'reserved_11',0,1
	.word	152
	.byte	5,0,2,35,1,10
	.byte	'DCFP',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'DDFP',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'DDFPX',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'reserved_19',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'DDFD',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'reserved_21',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'ENPE',0,1
	.word	152
	.byte	2,0,2,35,2,10
	.byte	'reserved_24',0,1
	.word	152
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_FLASH_FPRO_Bits',0,8,218,1,3
	.word	5780
	.byte	9
	.byte	'_Ifx_FLASH_FSR_Bits',0,8,221,1,16,4,10
	.byte	'FABUSY',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'D0BUSY',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'P0BUSY',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'P1BUSY',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'RES5',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'RES6',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'PROG',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'PFPAGE',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'PROER',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'PFSBER',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'PFDBER',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'PFMBER',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'RES17',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'DFSBER',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'DFDBER',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'DFTBER',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'DFMBER',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'SRIADDERR',0,1
	.word	152
	.byte	1,1,2,35,2,10
	.byte	'reserved_23',0,2
	.word	1842
	.byte	2,7,2,35,2,10
	.byte	'PVER',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	152
	.byte	1,4,2,35,3,10
	.byte	'SLM',0,1
	.word	152
	.byte	1,3,2,35,3,10
	.byte	'reserved_29',0,1
	.word	152
	.byte	1,2,2,35,3,10
	.byte	'ORIER',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_FSR_Bits',0,8,254,1,3
	.word	6221
	.byte	9
	.byte	'_Ifx_FLASH_HSMFCON_Bits',0,8,129,2,16,4,10
	.byte	'LCKHSMUCB',0,1
	.word	152
	.byte	2,6,2,35,0,10
	.byte	'reserved_2',0,4
	.word	196
	.byte	22,8,2,35,0,10
	.byte	'VOPERM',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'SQERM',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'reserved_26',0,1
	.word	152
	.byte	5,1,2,35,3,10
	.byte	'EOBM',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_HSMFCON_Bits',0,8,137,2,3
	.word	6829
	.byte	9
	.byte	'_Ifx_FLASH_HSMFSR_Bits',0,8,140,2,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	2,6,2,35,0,10
	.byte	'D1BUSY',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'reserved_3',0,1
	.word	152
	.byte	4,1,2,35,0,10
	.byte	'PROG',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'ERASE',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'DFPAGE',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'OPER',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'SQER',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'reserved_13',0,4
	.word	196
	.byte	12,7,2,35,0,10
	.byte	'PVER',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'EVER',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'SPND',0,1
	.word	152
	.byte	1,4,2,35,3,10
	.byte	'reserved_28',0,1
	.word	152
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_FLASH_HSMFSR_Bits',0,8,156,2,3
	.word	7009
	.byte	9
	.byte	'_Ifx_FLASH_HSMMARD_Bits',0,8,159,2,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'SELD1',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,4
	.word	196
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMMARD_Bits',0,8,167,2,3
	.word	7331
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRAD_Bits',0,8,170,2,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	196
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRAD_Bits',0,8,174,2,3
	.word	7512
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRCT_Bits',0,8,177,2,16,4,10
	.byte	'STRT',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	152
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	152
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_HSMRRCT_Bits',0,8,188,2,3
	.word	7612
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD0_Bits',0,8,191,2,16,4,10
	.byte	'DATA',0,4
	.word	196
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRD0_Bits',0,8,194,2,3
	.word	7828
	.byte	9
	.byte	'_Ifx_FLASH_HSMRRD1_Bits',0,8,197,2,16,4,10
	.byte	'DATA',0,4
	.word	196
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRD1_Bits',0,8,200,2,3
	.word	7907
	.byte	9
	.byte	'_Ifx_FLASH_ID_Bits',0,8,203,2,16,4,10
	.byte	'MOD_REV',0,1
	.word	152
	.byte	8,0,2,35,0,10
	.byte	'MOD_TYPE',0,1
	.word	152
	.byte	8,0,2,35,1,10
	.byte	'MODNUMBER',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_ID_Bits',0,8,208,2,3
	.word	7986
	.byte	9
	.byte	'_Ifx_FLASH_MARD_Bits',0,8,211,2,16,4,10
	.byte	'HMARGIN',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'SELD0',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'reserved_2',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'SPND',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'SPNDERR',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,2
	.word	1842
	.byte	10,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_MARD_Bits',0,8,221,2,3
	.word	8099
	.byte	9
	.byte	'_Ifx_FLASH_MARP_Bits',0,8,224,2,16,4,10
	.byte	'SELP0',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'SELP1',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'RES2',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'RES3',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'reserved_4',0,2
	.word	1842
	.byte	11,1,2,35,0,10
	.byte	'TRAPDIS',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'reserved_16',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_MARP_Bits',0,8,233,2,3
	.word	8313
	.byte	9
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,8,236,2,16,4,10
	.byte	'L',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'NSAFECC',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'RAMIN',0,1
	.word	152
	.byte	2,4,2,35,0,10
	.byte	'RAMINSEL',0,1
	.word	152
	.byte	4,0,2,35,0,10
	.byte	'OSCCFG',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'MODE',0,1
	.word	152
	.byte	2,5,2,35,1,10
	.byte	'APREN',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'CAP0EN',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'CAP1EN',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'CAP2EN',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'CAP3EN',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'ESR0CNT',0,2
	.word	1842
	.byte	12,4,2,35,2,10
	.byte	'RES29',0,1
	.word	152
	.byte	2,2,2,35,3,10
	.byte	'RES30',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_PROCOND_Bits',0,8,253,2,3
	.word	8500
	.byte	9
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,8,128,3,16,4,10
	.byte	'OCDSDIS',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'EDM',0,1
	.word	152
	.byte	2,4,2,35,0,10
	.byte	'reserved_4',0,4
	.word	196
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,8,134,3,3
	.word	8824
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,8,137,3,16,4,10
	.byte	'HSMDBGDIS',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'DBGIFLCK',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'TSTIFLCK',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'HSMTSTDIS',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'RES15',0,2
	.word	1842
	.byte	12,0,2,35,0,10
	.byte	'reserved_16',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,8,145,3,3
	.word	8967
	.byte	9
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,8,148,3,16,4,10
	.byte	'HSMBOOTEN',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'SSWWAIT',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'HSMDX',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'HSM6X',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'HSM16X',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'HSM17X',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'HSMENPINS',0,2
	.word	1842
	.byte	2,7,2,35,0,10
	.byte	'HSMENRES',0,1
	.word	152
	.byte	2,5,2,35,1,10
	.byte	'DESTDBG',0,1
	.word	152
	.byte	2,3,2,35,1,10
	.byte	'BLKFLAN',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'reserved_14',0,1
	.word	152
	.byte	2,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'reserved_18',0,2
	.word	1842
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,8,165,3,3
	.word	9156
	.byte	9
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,8,168,3,16,4,10
	.byte	'S0ROM',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'S1ROM',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'S2ROM',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'S3ROM',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'S4ROM',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'S5ROM',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'S6ROM',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'S7ROM',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'S8ROM',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'S9ROM',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'S10ROM',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'S11ROM',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'S12ROM',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'S13ROM',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'S14ROM',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'S15ROM',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'S16ROM',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'S17ROM',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'S18ROM',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'S19ROM',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'S20ROM',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'S21ROM',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'S22ROM',0,1
	.word	152
	.byte	1,1,2,35,2,10
	.byte	'S23ROM',0,1
	.word	152
	.byte	1,0,2,35,2,10
	.byte	'S24ROM',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'S25ROM',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'S26ROM',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	152
	.byte	2,3,2,35,3,10
	.byte	'BML',0,1
	.word	152
	.byte	2,1,2,35,3,10
	.byte	'TP',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,8,200,3,3
	.word	9519
	.byte	9
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,8,203,3,16,4,10
	.byte	'S0L',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'S1L',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'S2L',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'S3L',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'S4L',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'S5L',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'S6L',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'S7L',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'S8L',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'S9L',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'S10L',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'S11L',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'S12L',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'S13L',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'S14L',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'S15L',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'S16L',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'S17L',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'S18L',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'S19L',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'S20L',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'S21L',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'S22L',0,1
	.word	152
	.byte	1,1,2,35,2,10
	.byte	'S23L',0,1
	.word	152
	.byte	1,0,2,35,2,10
	.byte	'S24L',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'S25L',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'S26L',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	152
	.byte	4,1,2,35,3,10
	.byte	'RPRO',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_PROCONP_Bits',0,8,234,3,3
	.word	10114
	.byte	9
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,8,237,3,16,4,10
	.byte	'S0WOP',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'S1WOP',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'S2WOP',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'S3WOP',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'S4WOP',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'S5WOP',0,1
	.word	152
	.byte	1,2,2,35,0,10
	.byte	'S6WOP',0,1
	.word	152
	.byte	1,1,2,35,0,10
	.byte	'S7WOP',0,1
	.word	152
	.byte	1,0,2,35,0,10
	.byte	'S8WOP',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'S9WOP',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'S10WOP',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'S11WOP',0,1
	.word	152
	.byte	1,4,2,35,1,10
	.byte	'S12WOP',0,1
	.word	152
	.byte	1,3,2,35,1,10
	.byte	'S13WOP',0,1
	.word	152
	.byte	1,2,2,35,1,10
	.byte	'S14WOP',0,1
	.word	152
	.byte	1,1,2,35,1,10
	.byte	'S15WOP',0,1
	.word	152
	.byte	1,0,2,35,1,10
	.byte	'S16WOP',0,1
	.word	152
	.byte	1,7,2,35,2,10
	.byte	'S17WOP',0,1
	.word	152
	.byte	1,6,2,35,2,10
	.byte	'S18WOP',0,1
	.word	152
	.byte	1,5,2,35,2,10
	.byte	'S19WOP',0,1
	.word	152
	.byte	1,4,2,35,2,10
	.byte	'S20WOP',0,1
	.word	152
	.byte	1,3,2,35,2,10
	.byte	'S21WOP',0,1
	.word	152
	.byte	1,2,2,35,2,10
	.byte	'S22WOP',0,1
	.word	152
	.byte	1,1,2,35,2,10
	.byte	'S23WOP',0,1
	.word	152
	.byte	1,0,2,35,2,10
	.byte	'S24WOP',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'S25WOP',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'S26WOP',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'reserved_27',0,1
	.word	152
	.byte	4,1,2,35,3,10
	.byte	'DATM',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,8,140,4,3
	.word	10638
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,8,143,4,16,4,10
	.byte	'TAG',0,1
	.word	152
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	196
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,8,147,4,3
	.word	11220
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,8,150,4,16,4,10
	.byte	'TAG',0,1
	.word	152
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	196
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,8,154,4,3
	.word	11322
	.byte	9
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,8,157,4,16,4,10
	.byte	'TAG',0,1
	.word	152
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,4
	.word	196
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,8,161,4,3
	.word	11424
	.byte	9
	.byte	'_Ifx_FLASH_RRAD_Bits',0,8,164,4,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	3,5,2,35,0,10
	.byte	'ADD',0,4
	.word	196
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RRAD_Bits',0,8,168,4,3
	.word	11526
	.byte	9
	.byte	'_Ifx_FLASH_RRCT_Bits',0,8,171,4,16,4,10
	.byte	'STRT',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'STP',0,1
	.word	152
	.byte	1,6,2,35,0,10
	.byte	'BUSY',0,1
	.word	152
	.byte	1,5,2,35,0,10
	.byte	'DONE',0,1
	.word	152
	.byte	1,4,2,35,0,10
	.byte	'ERR',0,1
	.word	152
	.byte	1,3,2,35,0,10
	.byte	'reserved_5',0,1
	.word	152
	.byte	3,0,2,35,0,10
	.byte	'EOBM',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'reserved_9',0,1
	.word	152
	.byte	7,0,2,35,1,10
	.byte	'CNT',0,2
	.word	1842
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_FLASH_RRCT_Bits',0,8,182,4,3
	.word	11620
	.byte	9
	.byte	'_Ifx_FLASH_RRD0_Bits',0,8,185,4,16,4,10
	.byte	'DATA',0,4
	.word	196
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RRD0_Bits',0,8,188,4,3
	.word	11830
	.byte	9
	.byte	'_Ifx_FLASH_RRD1_Bits',0,8,191,4,16,4,10
	.byte	'DATA',0,4
	.word	196
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_FLASH_RRD1_Bits',0,8,194,4,3
	.word	11903
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,8,197,4,16,4,10
	.byte	'SEL',0,1
	.word	152
	.byte	6,2,2,35,0,10
	.byte	'reserved_6',0,1
	.word	152
	.byte	2,0,2,35,0,10
	.byte	'CLR',0,1
	.word	152
	.byte	1,7,2,35,1,10
	.byte	'DIS',0,1
	.word	152
	.byte	1,6,2,35,1,10
	.byte	'reserved_10',0,4
	.word	196
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,8,204,4,3
	.word	11976
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,8,207,4,16,4,10
	.byte	'VLD0',0,1
	.word	152
	.byte	1,7,2,35,0,10
	.byte	'reserved_1',0,4
	.word	196
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,8,211,4,3
	.word	12131
	.byte	9
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,8,214,4,16,4,10
	.byte	'reserved_0',0,1
	.word	152
	.byte	5,3,2,35,0,10
	.byte	'ADDR',0,4
	.word	196
	.byte	19,8,2,35,0,10
	.byte	'ERR',0,1
	.word	152
	.byte	6,2,2,35,3,10
	.byte	'VLD',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'CLR',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,8,221,4,3
	.word	12236
	.byte	2
	.byte	'int',0,4,5,33,8,229,4,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3480
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ACCEN0',0,8,234,4,3
	.word	12391
	.byte	33,8,237,4,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4041
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ACCEN1',0,8,242,4,3
	.word	12457
	.byte	33,8,245,4,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4122
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_CBAB_CFG',0,8,250,4,3
	.word	12523
	.byte	33,8,253,4,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4275
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_CBAB_STAT',0,8,130,5,3
	.word	12591
	.byte	33,8,133,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4523
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_CBAB_TOP',0,8,138,5,3
	.word	12660
	.byte	33,8,141,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4669
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_COMM0',0,8,146,5,3
	.word	12728
	.byte	33,8,149,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4767
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_COMM1',0,8,154,5,3
	.word	12793
	.byte	33,8,157,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4883
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_COMM2',0,8,162,5,3
	.word	12858
	.byte	33,8,165,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4999
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ECCRD',0,8,170,5,3
	.word	12923
	.byte	33,8,173,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5139
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ECCRP',0,8,178,5,3
	.word	12988
	.byte	33,8,181,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5279
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ECCW',0,8,186,5,3
	.word	13053
	.byte	33,8,189,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5418
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_FCON',0,8,194,5,3
	.word	13117
	.byte	33,8,197,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5780
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_FPRO',0,8,202,5,3
	.word	13181
	.byte	33,8,205,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6221
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_FSR',0,8,210,5,3
	.word	13245
	.byte	33,8,213,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6829
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMFCON',0,8,218,5,3
	.word	13308
	.byte	33,8,221,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7009
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMFSR',0,8,226,5,3
	.word	13375
	.byte	33,8,229,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7331
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMMARD',0,8,234,5,3
	.word	13441
	.byte	33,8,237,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7512
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRAD',0,8,242,5,3
	.word	13508
	.byte	33,8,245,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7612
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRCT',0,8,250,5,3
	.word	13575
	.byte	33,8,253,5,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7828
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRD0',0,8,130,6,3
	.word	13642
	.byte	33,8,133,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7907
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_HSMRRD1',0,8,138,6,3
	.word	13709
	.byte	33,8,141,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7986
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_ID',0,8,146,6,3
	.word	13776
	.byte	33,8,149,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8099
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_MARD',0,8,154,6,3
	.word	13838
	.byte	33,8,157,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8313
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_MARP',0,8,162,6,3
	.word	13902
	.byte	33,8,165,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8500
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCOND',0,8,170,6,3
	.word	13966
	.byte	33,8,173,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8824
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONDBG',0,8,178,6,3
	.word	14033
	.byte	33,8,181,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8967
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONHSM',0,8,186,6,3
	.word	14102
	.byte	33,8,189,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9156
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,8,194,6,3
	.word	14171
	.byte	33,8,197,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9519
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONOTP',0,8,202,6,3
	.word	14244
	.byte	33,8,205,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10114
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONP',0,8,210,6,3
	.word	14313
	.byte	33,8,213,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10638
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_PROCONWOP',0,8,218,6,3
	.word	14380
	.byte	33,8,221,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11220
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG0',0,8,226,6,3
	.word	14449
	.byte	33,8,229,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11322
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG1',0,8,234,6,3
	.word	14517
	.byte	33,8,237,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11424
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RDB_CFG2',0,8,242,6,3
	.word	14585
	.byte	33,8,245,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11526
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RRAD',0,8,250,6,3
	.word	14653
	.byte	33,8,253,6,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11620
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RRCT',0,8,130,7,3
	.word	14717
	.byte	33,8,133,7,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11830
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RRD0',0,8,138,7,3
	.word	14781
	.byte	33,8,141,7,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11903
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_RRD1',0,8,146,7,3
	.word	14845
	.byte	33,8,149,7,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11976
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_UBAB_CFG',0,8,154,7,3
	.word	14909
	.byte	33,8,157,7,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12131
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_UBAB_STAT',0,8,162,7,3
	.word	14977
	.byte	33,8,165,7,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12236
	.byte	4,2,35,0,0,20
	.byte	'Ifx_FLASH_UBAB_TOP',0,8,170,7,3
	.word	15046
	.byte	9
	.byte	'_Ifx_FLASH_CBAB',0,8,181,7,25,12,13
	.byte	'CFG',0
	.word	12523
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	12591
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	12660
	.byte	4,2,35,8,0,23
	.word	15114
	.byte	20
	.byte	'Ifx_FLASH_CBAB',0,8,186,7,3
	.word	15177
	.byte	9
	.byte	'_Ifx_FLASH_RDB',0,8,189,7,25,12,13
	.byte	'CFG0',0
	.word	14449
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	14517
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	14585
	.byte	4,2,35,8,0,23
	.word	15206
	.byte	20
	.byte	'Ifx_FLASH_RDB',0,8,194,7,3
	.word	15270
	.byte	9
	.byte	'_Ifx_FLASH_UBAB',0,8,197,7,25,12,13
	.byte	'CFG',0
	.word	14909
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	14977
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	15046
	.byte	4,2,35,8,0,23
	.word	15298
	.byte	20
	.byte	'Ifx_FLASH_UBAB',0,8,202,7,3
	.word	15361
	.byte	9
	.byte	'_Ifx_SRC_SRCR_Bits',0,9,45,16,4,10
	.byte	'SRPN',0,1
	.word	152
	.byte	8,0,2,35,0,10
	.byte	'reserved_8',0,1
	.word	152
	.byte	2,6,2,35,1,10
	.byte	'SRE',0,1
	.word	152
	.byte	1,5,2,35,1,10
	.byte	'TOS',0,1
	.word	152
	.byte	2,3,2,35,1,10
	.byte	'reserved_13',0,1
	.word	152
	.byte	3,0,2,35,1,10
	.byte	'ECC',0,1
	.word	152
	.byte	6,2,2,35,2,10
	.byte	'reserved_22',0,1
	.word	152
	.byte	2,0,2,35,2,10
	.byte	'SRR',0,1
	.word	152
	.byte	1,7,2,35,3,10
	.byte	'CLRR',0,1
	.word	152
	.byte	1,6,2,35,3,10
	.byte	'SETR',0,1
	.word	152
	.byte	1,5,2,35,3,10
	.byte	'IOV',0,1
	.word	152
	.byte	1,4,2,35,3,10
	.byte	'IOVCLR',0,1
	.word	152
	.byte	1,3,2,35,3,10
	.byte	'SWS',0,1
	.word	152
	.byte	1,2,2,35,3,10
	.byte	'SWSCLR',0,1
	.word	152
	.byte	1,1,2,35,3,10
	.byte	'reserved_31',0,1
	.word	152
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SRC_SRCR_Bits',0,9,62,3
	.word	15390
	.byte	33,9,70,9,4,13
	.byte	'U',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	12384
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15390
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SRC_SRCR',0,9,75,3
	.word	15706
	.byte	9
	.byte	'_Ifx_SRC_AGBT',0,9,86,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	15766
	.byte	20
	.byte	'Ifx_SRC_AGBT',0,9,89,3
	.word	15798
	.byte	9
	.byte	'_Ifx_SRC_ASCLIN',0,9,92,25,12,13
	.byte	'TX',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	15706
	.byte	4,2,35,8,0,23
	.word	15824
	.byte	20
	.byte	'Ifx_SRC_ASCLIN',0,9,97,3
	.word	15883
	.byte	9
	.byte	'_Ifx_SRC_BCUSPB',0,9,100,25,4,13
	.byte	'SBSRC',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	15911
	.byte	20
	.byte	'Ifx_SRC_BCUSPB',0,9,103,3
	.word	15948
	.byte	11,64
	.word	15706
	.byte	12,15,0,9
	.byte	'_Ifx_SRC_CAN',0,9,106,25,64,13
	.byte	'INT',0
	.word	15976
	.byte	64,2,35,0,0,23
	.word	15985
	.byte	20
	.byte	'Ifx_SRC_CAN',0,9,109,3
	.word	16017
	.byte	9
	.byte	'_Ifx_SRC_CCU6',0,9,112,25,16,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	15706
	.byte	4,2,35,12,0,23
	.word	16042
	.byte	20
	.byte	'Ifx_SRC_CCU6',0,9,118,3
	.word	16114
	.byte	11,8
	.word	15706
	.byte	12,1,0,9
	.byte	'_Ifx_SRC_CERBERUS',0,9,121,25,8,13
	.byte	'SR',0
	.word	16140
	.byte	8,2,35,0,0,23
	.word	16149
	.byte	20
	.byte	'Ifx_SRC_CERBERUS',0,9,124,3
	.word	16185
	.byte	9
	.byte	'_Ifx_SRC_CIF',0,9,127,25,16,13
	.byte	'MI',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	15706
	.byte	4,2,35,12,0,23
	.word	16215
	.byte	20
	.byte	'Ifx_SRC_CIF',0,9,133,1,3
	.word	16288
	.byte	9
	.byte	'_Ifx_SRC_CPU',0,9,136,1,25,4,13
	.byte	'SBSRC',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	16314
	.byte	20
	.byte	'Ifx_SRC_CPU',0,9,139,1,3
	.word	16349
	.byte	11,24
	.word	15706
	.byte	12,5,0,9
	.byte	'_Ifx_SRC_DAM',0,9,142,1,25,24,13
	.byte	'SR',0
	.word	16375
	.byte	24,2,35,0,0,23
	.word	16384
	.byte	20
	.byte	'Ifx_SRC_DAM',0,9,145,1,3
	.word	16416
	.byte	11,12
	.word	152
	.byte	12,11,0,11,128,2
	.word	15706
	.byte	12,63,0,9
	.byte	'_Ifx_SRC_DMA',0,9,148,1,25,144,2,13
	.byte	'ERR',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	16442
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	16451
	.byte	128,2,2,35,16,0,23
	.word	16461
	.byte	20
	.byte	'Ifx_SRC_DMA',0,9,153,1,3
	.word	16528
	.byte	9
	.byte	'_Ifx_SRC_DSADC',0,9,156,1,25,8,13
	.byte	'SRM',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	15706
	.byte	4,2,35,4,0,23
	.word	16554
	.byte	20
	.byte	'Ifx_SRC_DSADC',0,9,160,1,3
	.word	16602
	.byte	9
	.byte	'_Ifx_SRC_EMEM',0,9,163,1,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	16630
	.byte	20
	.byte	'Ifx_SRC_EMEM',0,9,166,1,3
	.word	16663
	.byte	11,40
	.word	152
	.byte	12,39,0,9
	.byte	'_Ifx_SRC_ERAY',0,9,169,1,25,80,13
	.byte	'INT',0
	.word	16140
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	16140
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	16140
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	16140
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	15706
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	15706
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	16690
	.byte	40,2,35,40,0,23
	.word	16699
	.byte	20
	.byte	'Ifx_SRC_ERAY',0,9,178,1,3
	.word	16826
	.byte	9
	.byte	'_Ifx_SRC_ETH',0,9,181,1,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	16853
	.byte	20
	.byte	'Ifx_SRC_ETH',0,9,184,1,3
	.word	16885
	.byte	9
	.byte	'_Ifx_SRC_FCE',0,9,187,1,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	16911
	.byte	20
	.byte	'Ifx_SRC_FCE',0,9,190,1,3
	.word	16943
	.byte	11,16
	.word	152
	.byte	12,15,0,9
	.byte	'_Ifx_SRC_GPSR',0,9,193,1,25,32,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	15706
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	16969
	.byte	16,2,35,16,0,23
	.word	16978
	.byte	20
	.byte	'Ifx_SRC_GPSR',0,9,200,1,3
	.word	17072
	.byte	11,24
	.word	152
	.byte	12,23,0,9
	.byte	'_Ifx_SRC_GPT12',0,9,203,1,25,48,13
	.byte	'CIRQ',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	15706
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	15706
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	15706
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	17099
	.byte	24,2,35,24,0,23
	.word	17108
	.byte	20
	.byte	'Ifx_SRC_GPT12',0,9,212,1,3
	.word	17225
	.byte	11,12
	.word	15706
	.byte	12,2,0,11,4
	.word	152
	.byte	12,3,0,11,8
	.word	152
	.byte	12,7,0,11,32
	.word	15706
	.byte	12,7,0,11,32
	.word	17280
	.byte	12,0,0,11,88
	.word	152
	.byte	12,87,0,11,108
	.word	15706
	.byte	12,26,0,11,96
	.word	152
	.byte	12,95,0,11,128,1
	.word	17280
	.byte	12,3,0,11,128,3
	.word	152
	.byte	12,255,2,0,11,96
	.word	17280
	.byte	12,2,0,11,160,3
	.word	152
	.byte	12,159,3,0,11,16
	.word	15706
	.byte	12,3,0,11,80
	.word	17366
	.byte	12,4,0,11,176,2
	.word	152
	.byte	12,175,2,0,11,48
	.word	152
	.byte	12,47,0,9
	.byte	'_Ifx_SRC_GTM',0,9,215,1,25,208,18,13
	.byte	'AEIIRQ',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	17253
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	17262
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	15706
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	15706
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	16140
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	17271
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	17289
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	17298
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	17307
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	17316
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	15706
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	16442
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	17325
	.byte	128,1,3,35,128,3,13
	.byte	'reserved_200',0
	.word	17335
	.byte	128,3,3,35,128,4,13
	.byte	'MCS',0
	.word	17325
	.byte	128,1,3,35,128,7,13
	.byte	'reserved_400',0
	.word	17335
	.byte	128,3,3,35,128,8,13
	.byte	'TOM',0
	.word	17346
	.byte	96,3,35,128,11,13
	.byte	'reserved_5E0',0
	.word	17355
	.byte	160,3,3,35,224,11,13
	.byte	'ATOM',0
	.word	17375
	.byte	80,3,35,128,15,13
	.byte	'reserved_7D0',0
	.word	17384
	.byte	176,2,3,35,208,15,13
	.byte	'MCSW0',0
	.word	17366
	.byte	16,3,35,128,18,13
	.byte	'reserved_910',0
	.word	17395
	.byte	48,3,35,144,18,13
	.byte	'MCSW1',0
	.word	17366
	.byte	16,3,35,192,18,0,23
	.word	17404
	.byte	20
	.byte	'Ifx_SRC_GTM',0,9,241,1,3
	.word	17866
	.byte	9
	.byte	'_Ifx_SRC_HSCT',0,9,244,1,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	17892
	.byte	20
	.byte	'Ifx_SRC_HSCT',0,9,247,1,3
	.word	17925
	.byte	9
	.byte	'_Ifx_SRC_HSM',0,9,250,1,25,8,13
	.byte	'HSM',0
	.word	16140
	.byte	8,2,35,0,0,23
	.word	17952
	.byte	20
	.byte	'Ifx_SRC_HSM',0,9,253,1,3
	.word	17985
	.byte	9
	.byte	'_Ifx_SRC_HSSL',0,9,128,2,25,16,13
	.byte	'COK',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	15706
	.byte	4,2,35,12,0,23
	.word	18011
	.byte	20
	.byte	'Ifx_SRC_HSSL',0,9,134,2,3
	.word	18084
	.byte	11,56
	.word	152
	.byte	12,55,0,9
	.byte	'_Ifx_SRC_I2C',0,9,137,2,25,80,13
	.byte	'BREQ',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	15706
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	15706
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	15706
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	18111
	.byte	56,2,35,24,0,23
	.word	18120
	.byte	20
	.byte	'Ifx_SRC_I2C',0,9,146,2,3
	.word	18243
	.byte	9
	.byte	'_Ifx_SRC_LMU',0,9,149,2,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	18269
	.byte	20
	.byte	'Ifx_SRC_LMU',0,9,152,2,3
	.word	18301
	.byte	9
	.byte	'_Ifx_SRC_MSC',0,9,155,2,25,20,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	15706
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	15706
	.byte	4,2,35,16,0,23
	.word	18327
	.byte	20
	.byte	'Ifx_SRC_MSC',0,9,162,2,3
	.word	18412
	.byte	9
	.byte	'_Ifx_SRC_PMU',0,9,165,2,25,4,13
	.byte	'SR',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	18438
	.byte	20
	.byte	'Ifx_SRC_PMU',0,9,168,2,3
	.word	18470
	.byte	9
	.byte	'_Ifx_SRC_PSI5',0,9,171,2,25,32,13
	.byte	'SR',0
	.word	17280
	.byte	32,2,35,0,0,23
	.word	18496
	.byte	20
	.byte	'Ifx_SRC_PSI5',0,9,174,2,3
	.word	18529
	.byte	9
	.byte	'_Ifx_SRC_PSI5S',0,9,177,2,25,32,13
	.byte	'SR',0
	.word	17280
	.byte	32,2,35,0,0,23
	.word	18556
	.byte	20
	.byte	'Ifx_SRC_PSI5S',0,9,180,2,3
	.word	18590
	.byte	9
	.byte	'_Ifx_SRC_QSPI',0,9,183,2,25,24,13
	.byte	'TX',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	15706
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	17262
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	15706
	.byte	4,2,35,20,0,23
	.word	18618
	.byte	20
	.byte	'Ifx_SRC_QSPI',0,9,191,2,3
	.word	18720
	.byte	9
	.byte	'_Ifx_SRC_SCU',0,9,194,2,25,20,13
	.byte	'DTS',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	17366
	.byte	16,2,35,4,0,23
	.word	18747
	.byte	20
	.byte	'Ifx_SRC_SCU',0,9,198,2,3
	.word	18793
	.byte	11,40
	.word	15706
	.byte	12,9,0,9
	.byte	'_Ifx_SRC_SENT',0,9,201,2,25,40,13
	.byte	'SR',0
	.word	18819
	.byte	40,2,35,0,0,23
	.word	18828
	.byte	20
	.byte	'Ifx_SRC_SENT',0,9,204,2,3
	.word	18861
	.byte	9
	.byte	'_Ifx_SRC_SMU',0,9,207,2,25,12,13
	.byte	'SR',0
	.word	17253
	.byte	12,2,35,0,0,23
	.word	18888
	.byte	20
	.byte	'Ifx_SRC_SMU',0,9,210,2,3
	.word	18920
	.byte	9
	.byte	'_Ifx_SRC_STM',0,9,213,2,25,8,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,0,23
	.word	18946
	.byte	20
	.byte	'Ifx_SRC_STM',0,9,217,2,3
	.word	18992
	.byte	9
	.byte	'_Ifx_SRC_VADCCG',0,9,220,2,25,16,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	15706
	.byte	4,2,35,12,0,23
	.word	19018
	.byte	20
	.byte	'Ifx_SRC_VADCCG',0,9,226,2,3
	.word	19093
	.byte	9
	.byte	'_Ifx_SRC_VADCG',0,9,229,2,25,16,13
	.byte	'SR0',0
	.word	15706
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	15706
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	15706
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	15706
	.byte	4,2,35,12,0,23
	.word	19122
	.byte	20
	.byte	'Ifx_SRC_VADCG',0,9,235,2,3
	.word	19196
	.byte	9
	.byte	'_Ifx_SRC_XBAR',0,9,238,2,25,4,13
	.byte	'SRC',0
	.word	15706
	.byte	4,2,35,0,0,23
	.word	19224
	.byte	20
	.byte	'Ifx_SRC_XBAR',0,9,241,2,3
	.word	19258
	.byte	11,4
	.word	15766
	.byte	12,0,0,23
	.word	19285
	.byte	9
	.byte	'_Ifx_SRC_GAGBT',0,9,254,2,25,4,13
	.byte	'AGBT',0
	.word	19294
	.byte	4,2,35,0,0,23
	.word	19299
	.byte	20
	.byte	'Ifx_SRC_GAGBT',0,9,129,3,3
	.word	19335
	.byte	11,48
	.word	15824
	.byte	12,3,0,23
	.word	19363
	.byte	9
	.byte	'_Ifx_SRC_GASCLIN',0,9,132,3,25,48,13
	.byte	'ASCLIN',0
	.word	19372
	.byte	48,2,35,0,0,23
	.word	19377
	.byte	20
	.byte	'Ifx_SRC_GASCLIN',0,9,135,3,3
	.word	19417
	.byte	23
	.word	15911
	.byte	9
	.byte	'_Ifx_SRC_GBCU',0,9,138,3,25,4,13
	.byte	'SPB',0
	.word	19447
	.byte	4,2,35,0,0,23
	.word	19452
	.byte	20
	.byte	'Ifx_SRC_GBCU',0,9,141,3,3
	.word	19486
	.byte	11,64
	.word	15985
	.byte	12,0,0,23
	.word	19513
	.byte	9
	.byte	'_Ifx_SRC_GCAN',0,9,144,3,25,64,13
	.byte	'CAN',0
	.word	19522
	.byte	64,2,35,0,0,23
	.word	19527
	.byte	20
	.byte	'Ifx_SRC_GCAN',0,9,147,3,3
	.word	19561
	.byte	11,32
	.word	16042
	.byte	12,1,0,23
	.word	19588
	.byte	9
	.byte	'_Ifx_SRC_GCCU6',0,9,150,3,25,32,13
	.byte	'CCU6',0
	.word	19597
	.byte	32,2,35,0,0,23
	.word	19602
	.byte	20
	.byte	'Ifx_SRC_GCCU6',0,9,153,3,3
	.word	19638
	.byte	23
	.word	16149
	.byte	9
	.byte	'_Ifx_SRC_GCERBERUS',0,9,156,3,25,8,13
	.byte	'CERBERUS',0
	.word	19666
	.byte	8,2,35,0,0,23
	.word	19671
	.byte	20
	.byte	'Ifx_SRC_GCERBERUS',0,9,159,3,3
	.word	19715
	.byte	11,16
	.word	16215
	.byte	12,0,0,23
	.word	19747
	.byte	9
	.byte	'_Ifx_SRC_GCIF',0,9,162,3,25,16,13
	.byte	'CIF',0
	.word	19756
	.byte	16,2,35,0,0,23
	.word	19761
	.byte	20
	.byte	'Ifx_SRC_GCIF',0,9,165,3,3
	.word	19795
	.byte	11,12
	.word	16314
	.byte	12,2,0,23
	.word	19822
	.byte	9
	.byte	'_Ifx_SRC_GCPU',0,9,168,3,25,12,13
	.byte	'CPU',0
	.word	19831
	.byte	12,2,35,0,0,23
	.word	19836
	.byte	20
	.byte	'Ifx_SRC_GCPU',0,9,171,3,3
	.word	19870
	.byte	11,24
	.word	16384
	.byte	12,0,0,23
	.word	19897
	.byte	9
	.byte	'_Ifx_SRC_GDAM',0,9,174,3,25,24,13
	.byte	'DAM',0
	.word	19906
	.byte	24,2,35,0,0,23
	.word	19911
	.byte	20
	.byte	'Ifx_SRC_GDAM',0,9,177,3,3
	.word	19945
	.byte	11,144,2
	.word	16461
	.byte	12,0,0,23
	.word	19972
	.byte	9
	.byte	'_Ifx_SRC_GDMA',0,9,180,3,25,144,2,13
	.byte	'DMA',0
	.word	19982
	.byte	144,2,2,35,0,0,23
	.word	19987
	.byte	20
	.byte	'Ifx_SRC_GDMA',0,9,183,3,3
	.word	20023
	.byte	11,48
	.word	16554
	.byte	12,5,0,23
	.word	20050
	.byte	9
	.byte	'_Ifx_SRC_GDSADC',0,9,186,3,25,48,13
	.byte	'DSADC',0
	.word	20059
	.byte	48,2,35,0,0,23
	.word	20064
	.byte	20
	.byte	'Ifx_SRC_GDSADC',0,9,189,3,3
	.word	20102
	.byte	11,4
	.word	16630
	.byte	12,0,0,23
	.word	20131
	.byte	9
	.byte	'_Ifx_SRC_GEMEM',0,9,192,3,25,4,13
	.byte	'EMEM',0
	.word	20140
	.byte	4,2,35,0,0,23
	.word	20145
	.byte	20
	.byte	'Ifx_SRC_GEMEM',0,9,195,3,3
	.word	20181
	.byte	11,80
	.word	16699
	.byte	12,0,0,23
	.word	20209
	.byte	9
	.byte	'_Ifx_SRC_GERAY',0,9,198,3,25,80,13
	.byte	'ERAY',0
	.word	20218
	.byte	80,2,35,0,0,23
	.word	20223
	.byte	20
	.byte	'Ifx_SRC_GERAY',0,9,201,3,3
	.word	20259
	.byte	11,4
	.word	16853
	.byte	12,0,0,23
	.word	20287
	.byte	9
	.byte	'_Ifx_SRC_GETH',0,9,204,3,25,4,13
	.byte	'ETH',0
	.word	20296
	.byte	4,2,35,0,0,23
	.word	20301
	.byte	20
	.byte	'Ifx_SRC_GETH',0,9,207,3,3
	.word	20335
	.byte	11,4
	.word	16911
	.byte	12,0,0,23
	.word	20362
	.byte	9
	.byte	'_Ifx_SRC_GFCE',0,9,210,3,25,4,13
	.byte	'FCE',0
	.word	20371
	.byte	4,2,35,0,0,23
	.word	20376
	.byte	20
	.byte	'Ifx_SRC_GFCE',0,9,213,3,3
	.word	20410
	.byte	11,96
	.word	16978
	.byte	12,2,0,23
	.word	20437
	.byte	9
	.byte	'_Ifx_SRC_GGPSR',0,9,216,3,25,96,13
	.byte	'GPSR',0
	.word	20446
	.byte	96,2,35,0,0,23
	.word	20451
	.byte	20
	.byte	'Ifx_SRC_GGPSR',0,9,219,3,3
	.word	20487
	.byte	11,48
	.word	17108
	.byte	12,0,0,23
	.word	20515
	.byte	9
	.byte	'_Ifx_SRC_GGPT12',0,9,222,3,25,48,13
	.byte	'GPT12',0
	.word	20524
	.byte	48,2,35,0,0,23
	.word	20529
	.byte	20
	.byte	'Ifx_SRC_GGPT12',0,9,225,3,3
	.word	20567
	.byte	11,208,18
	.word	17404
	.byte	12,0,0,23
	.word	20596
	.byte	9
	.byte	'_Ifx_SRC_GGTM',0,9,228,3,25,208,18,13
	.byte	'GTM',0
	.word	20606
	.byte	208,18,2,35,0,0,23
	.word	20611
	.byte	20
	.byte	'Ifx_SRC_GGTM',0,9,231,3,3
	.word	20647
	.byte	11,4
	.word	17892
	.byte	12,0,0,23
	.word	20674
	.byte	9
	.byte	'_Ifx_SRC_GHSCT',0,9,234,3,25,4,13
	.byte	'HSCT',0
	.word	20683
	.byte	4,2,35,0,0,23
	.word	20688
	.byte	20
	.byte	'Ifx_SRC_GHSCT',0,9,237,3,3
	.word	20724
	.byte	11,8
	.word	17952
	.byte	12,0,0,23
	.word	20752
	.byte	9
	.byte	'_Ifx_SRC_GHSM',0,9,240,3,25,8,13
	.byte	'HSM',0
	.word	20761
	.byte	8,2,35,0,0,23
	.word	20766
	.byte	20
	.byte	'Ifx_SRC_GHSM',0,9,243,3,3
	.word	20800
	.byte	11,64
	.word	18011
	.byte	12,3,0,23
	.word	20827
	.byte	9
	.byte	'_Ifx_SRC_GHSSL',0,9,246,3,25,68,13
	.byte	'HSSL',0
	.word	20836
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	15706
	.byte	4,2,35,64,0,23
	.word	20841
	.byte	20
	.byte	'Ifx_SRC_GHSSL',0,9,250,3,3
	.word	20890
	.byte	11,80
	.word	18120
	.byte	12,0,0,23
	.word	20918
	.byte	9
	.byte	'_Ifx_SRC_GI2C',0,9,253,3,25,80,13
	.byte	'I2C',0
	.word	20927
	.byte	80,2,35,0,0,23
	.word	20932
	.byte	20
	.byte	'Ifx_SRC_GI2C',0,9,128,4,3
	.word	20966
	.byte	11,4
	.word	18269
	.byte	12,0,0,23
	.word	20993
	.byte	9
	.byte	'_Ifx_SRC_GLMU',0,9,131,4,25,4,13
	.byte	'LMU',0
	.word	21002
	.byte	4,2,35,0,0,23
	.word	21007
	.byte	20
	.byte	'Ifx_SRC_GLMU',0,9,134,4,3
	.word	21041
	.byte	11,40
	.word	18327
	.byte	12,1,0,23
	.word	21068
	.byte	9
	.byte	'_Ifx_SRC_GMSC',0,9,137,4,25,40,13
	.byte	'MSC',0
	.word	21077
	.byte	40,2,35,0,0,23
	.word	21082
	.byte	20
	.byte	'Ifx_SRC_GMSC',0,9,140,4,3
	.word	21116
	.byte	11,8
	.word	18438
	.byte	12,1,0,23
	.word	21143
	.byte	9
	.byte	'_Ifx_SRC_GPMU',0,9,143,4,25,8,13
	.byte	'PMU',0
	.word	21152
	.byte	8,2,35,0,0,23
	.word	21157
	.byte	20
	.byte	'Ifx_SRC_GPMU',0,9,146,4,3
	.word	21191
	.byte	11,32
	.word	18496
	.byte	12,0,0,23
	.word	21218
	.byte	9
	.byte	'_Ifx_SRC_GPSI5',0,9,149,4,25,32,13
	.byte	'PSI5',0
	.word	21227
	.byte	32,2,35,0,0,23
	.word	21232
	.byte	20
	.byte	'Ifx_SRC_GPSI5',0,9,152,4,3
	.word	21268
	.byte	11,32
	.word	18556
	.byte	12,0,0,23
	.word	21296
	.byte	9
	.byte	'_Ifx_SRC_GPSI5S',0,9,155,4,25,32,13
	.byte	'PSI5S',0
	.word	21305
	.byte	32,2,35,0,0,23
	.word	21310
	.byte	20
	.byte	'Ifx_SRC_GPSI5S',0,9,158,4,3
	.word	21348
	.byte	11,96
	.word	18618
	.byte	12,3,0,23
	.word	21377
	.byte	9
	.byte	'_Ifx_SRC_GQSPI',0,9,161,4,25,96,13
	.byte	'QSPI',0
	.word	21386
	.byte	96,2,35,0,0,23
	.word	21391
	.byte	20
	.byte	'Ifx_SRC_GQSPI',0,9,164,4,3
	.word	21427
	.byte	23
	.word	18747
	.byte	9
	.byte	'_Ifx_SRC_GSCU',0,9,167,4,25,20,13
	.byte	'SCU',0
	.word	21455
	.byte	20,2,35,0,0,23
	.word	21460
	.byte	20
	.byte	'Ifx_SRC_GSCU',0,9,170,4,3
	.word	21494
	.byte	11,40
	.word	18828
	.byte	12,0,0,23
	.word	21521
	.byte	9
	.byte	'_Ifx_SRC_GSENT',0,9,173,4,25,40,13
	.byte	'SENT',0
	.word	21530
	.byte	40,2,35,0,0,23
	.word	21535
	.byte	20
	.byte	'Ifx_SRC_GSENT',0,9,176,4,3
	.word	21571
	.byte	11,12
	.word	18888
	.byte	12,0,0,23
	.word	21599
	.byte	9
	.byte	'_Ifx_SRC_GSMU',0,9,179,4,25,12,13
	.byte	'SMU',0
	.word	21608
	.byte	12,2,35,0,0,23
	.word	21613
	.byte	20
	.byte	'Ifx_SRC_GSMU',0,9,182,4,3
	.word	21647
	.byte	11,24
	.word	18946
	.byte	12,2,0,23
	.word	21674
	.byte	9
	.byte	'_Ifx_SRC_GSTM',0,9,185,4,25,24,13
	.byte	'STM',0
	.word	21683
	.byte	24,2,35,0,0,23
	.word	21688
	.byte	20
	.byte	'Ifx_SRC_GSTM',0,9,188,4,3
	.word	21722
	.byte	11,128,1
	.word	19122
	.byte	12,7,0,23
	.word	21749
	.byte	11,160,1
	.word	152
	.byte	12,159,1,0,11,32
	.word	19018
	.byte	12,1,0,23
	.word	21775
	.byte	9
	.byte	'_Ifx_SRC_GVADC',0,9,191,4,25,192,2,13
	.byte	'G',0
	.word	21759
	.byte	128,1,2,35,0,13
	.byte	'reserved_80',0
	.word	21764
	.byte	160,1,3,35,128,1,13
	.byte	'CG',0
	.word	21784
	.byte	32,3,35,160,2,0,23
	.word	21789
	.byte	20
	.byte	'Ifx_SRC_GVADC',0,9,196,4,3
	.word	21860
	.byte	23
	.word	19224
	.byte	9
	.byte	'_Ifx_SRC_GXBAR',0,9,199,4,25,4,13
	.byte	'XBAR',0
	.word	21888
	.byte	4,2,35,0,0,23
	.word	21893
	.byte	20
	.byte	'Ifx_SRC_GXBAR',0,9,202,4,3
	.word	21929
	.byte	2
	.byte	'char',0,1,6,20
	.byte	'sint8',0,10,76,25
	.word	21957
	.byte	20
	.byte	'uint8',0,10,81,25
	.word	152
	.byte	20
	.byte	'uint16',0,10,91,25
	.word	1842
	.byte	20
	.byte	'uint32',0,10,106,24
	.word	196
	.byte	2
	.byte	'unsigned long long int',0,8,7,20
	.byte	'uint64',0,10,111,30
	.word	22023
	.byte	20
	.byte	'boolean',0,10,127,25
	.word	152
	.byte	20
	.byte	'StatusType',0,11,191,1,27
	.word	152
	.byte	20
	.byte	'Std_ReturnType',0,11,199,1,15
	.word	152
	.byte	34,11,206,1,9,8,13
	.byte	'vendorID',0
	.word	1842
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	1842
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	152
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	152
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	152
	.byte	1,2,35,6,0,20
	.byte	'Std_VersionInfoType',0,11,213,1,3
	.word	22124
	.byte	35
	.byte	'_lc_gb_FLS_AC_WRITE_SOURCE',0,12,213,10,16
	.word	2488
	.byte	1,1,35
	.byte	'_lc_ge_FLS_AC_WRITE_SOURCE',0,12,215,10,16
	.word	2488
	.byte	1,1,35
	.byte	'_lc_gb_FLS_AC_ERASE_SOURCE',0,12,217,10,16
	.word	2488
	.byte	1,1,35
	.byte	'_lc_ge_FLS_AC_ERASE_SOURCE',0,12,219,10,16
	.word	2488
	.byte	1,1,34,13,93,9,8,13
	.byte	'Class',0
	.word	152
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	152
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	196
	.byte	4,2,35,4,0,20
	.byte	'OsTrapInfoType',0,13,97,3
	.word	22426
	.byte	11,68
	.word	196
	.byte	12,16,0,34,13,154,1,9,68,13
	.byte	'store',0
	.word	22506
	.byte	68,2,35,0,0,11,68
	.word	22515
	.byte	12,0,0,20
	.byte	'Os_JumpBufType',0,13,156,1,3
	.word	22537
	.byte	20
	.byte	'Os_StackTraceType',0,13,174,1,18
	.word	196
	.byte	34,13,175,1,9,8,13
	.byte	'sp',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	196
	.byte	4,2,35,4,0,20
	.byte	'Os_StackValueType',0,13,175,1,63
	.word	22597
	.byte	20
	.byte	'Os_StackSizeType',0,13,176,1,27
	.word	22597
	.byte	20
	.byte	'Os_VoidVoidFunctionType',0,13,179,1,16
	.word	1967
	.byte	20
	.byte	'ApplicationType',0,13,193,1,23
	.word	152
	.byte	9
	.byte	'Os_ApplicationConfigurationType_s',0,13,198,1,16,2,13
	.byte	'app_id',0
	.word	152
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,1,0,20
	.byte	'Os_ApplicationConfigurationType',0,13,201,1,3
	.word	22740
	.byte	20
	.byte	'Os_CoreStateType',0,13,203,1,16
	.word	196
	.byte	20
	.byte	'AreaIdType',0,13,204,1,16
	.word	1842
	.byte	20
	.byte	'Os_PeripheralAddressType',0,13,212,1,22
	.word	196
	.byte	20
	.byte	'TickType',0,13,221,1,22
	.word	196
	.byte	20
	.byte	'Os_StopwatchTickType',0,13,225,1,22
	.word	196
	.byte	20
	.byte	'Os_Lockable',0,13,234,1,18
	.word	2488
	.byte	20
	.byte	'CoreIdType',0,13,236,1,16
	.word	1842
	.byte	20
	.byte	'SpinlockIdType',0,13,237,1,16
	.word	1842
	.byte	7,13,239,1,9,4,8
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,8
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,20
	.byte	'TryToGetSpinlockType',0,13,239,1,74
	.word	23047
	.byte	7,13,174,2,9,4,8
	.byte	'APPLICATION_ACCESSIBLE',0,0,8
	.byte	'APPLICATION_RESTARTING',0,1,8
	.byte	'APPLICATION_TERMINATED',0,2,0,20
	.byte	'ApplicationStateType',0,13,174,2,92
	.word	23140
	.byte	36
	.byte	'void',0,5
	.word	23252
	.byte	21,1,1,22
	.word	152
	.byte	22
	.word	23258
	.byte	0,5
	.word	23263
	.byte	20
	.byte	'Os_FunctionEntryType',0,13,183,2,16
	.word	23277
	.byte	9
	.byte	'Os_MeterInfoType_s',0,13,193,2,16,48,13
	.byte	'elapsed',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	196
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	196
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	22597
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	22597
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	22597
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	22597
	.byte	8,2,35,40,0,20
	.byte	'Os_MeterInfoType',0,13,202,2,3
	.word	23312
	.byte	5
	.word	23312
	.byte	20
	.byte	'Os_MeterInfoRefType',0,13,203,2,50
	.word	23510
	.byte	20
	.byte	'EventMaskType',0,13,206,2,15
	.word	152
	.byte	20
	.byte	'Os_imaskType',0,13,211,2,16
	.word	196
	.byte	9
	.byte	'Os_ISRDynType_s',0,13,213,2,16,48,13
	.byte	'meter',0
	.word	23312
	.byte	48,2,35,0,0,20
	.byte	'Os_ISRDynType',0,13,215,2,3
	.word	23589
	.byte	5
	.word	23589
	.byte	6
	.word	23650
	.byte	9
	.byte	'Os_ISRType_s',0,13,216,2,16,24,13
	.byte	'entry_function',0
	.word	22682
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	23655
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	196
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	22597
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	152
	.byte	1,2,35,21,0,20
	.byte	'Os_ISRType',0,13,223,2,3
	.word	23660
	.byte	5
	.word	1964
	.byte	6
	.word	23660
	.byte	5
	.word	23819
	.byte	20
	.byte	'ISRType',0,13,224,2,46
	.word	23824
	.byte	20
	.byte	'Os_bitmask',0,13,239,2,22
	.word	196
	.byte	20
	.byte	'Os_pset0Type',0,13,240,2,20
	.word	196
	.byte	20
	.byte	'Os_pset1Type',0,13,241,2,20
	.word	196
	.byte	20
	.byte	'Os_pset2Type',0,13,242,2,20
	.word	196
	.byte	33,13,243,2,9,4,13
	.byte	'p0',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	196
	.byte	4,2,35,0,0,20
	.byte	'Os_psetType',0,13,247,2,3
	.word	23932
	.byte	33,13,249,2,9,4,13
	.byte	't0',0
	.word	196
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	196
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	196
	.byte	4,2,35,0,0,20
	.byte	'Os_tpmaskType',0,13,253,2,3
	.word	23996
	.byte	20
	.byte	'Os_ActivationCountType',0,13,254,2,23
	.word	152
	.byte	9
	.byte	'Os_TaskDynType_s',0,13,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	22546
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	23312
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	152
	.byte	1,2,35,116,0,20
	.byte	'Os_TaskDynType',0,13,132,3,3
	.word	24094
	.byte	11,68
	.word	22515
	.byte	12,0,0,5
	.word	24094
	.byte	6
	.word	24220
	.byte	9
	.byte	'Os_TaskType_s',0,13,134,3,16,40,13
	.byte	'dynamic',0
	.word	24225
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	22682
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	23932
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	23996
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	23996
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	1842
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	196
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	22597
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	152
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	152
	.byte	1,2,35,38,0,20
	.byte	'Os_TaskType',0,13,146,3,3
	.word	24230
	.byte	6
	.word	24230
	.byte	5
	.word	24480
	.byte	20
	.byte	'TaskType',0,13,147,3,47
	.word	24485
	.byte	37
	.byte	'Os_TaskStateType',0,13,155,3,6,4,8
	.byte	'SUSPENDED',0,0,8
	.byte	'READY',0,1,8
	.byte	'WAITING',0,2,8
	.byte	'RUNNING',0,3,0,20
	.byte	'TaskStateType',0,13,156,3,31
	.word	24508
	.byte	33,13,167,3,3,4,13
	.byte	'tpmask',0
	.word	23996
	.byte	4,2,35,0,0,9
	.byte	'Os_ResourceDynType_s',0,13,166,3,16,4,13
	.byte	'saved_priority',0
	.word	24595
	.byte	4,2,35,0,0,20
	.byte	'Os_ResourceDynType',0,13,170,3,3
	.word	24618
	.byte	5
	.word	24618
	.byte	6
	.word	24698
	.byte	9
	.byte	'Os_ResourceType_s',0,13,171,3,16,12,13
	.byte	'dynamic',0
	.word	24703
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	23996
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,8,0,20
	.byte	'Os_ResourceType',0,13,175,3,3
	.word	24708
	.byte	34,13,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	196
	.byte	4,2,35,8,0,20
	.byte	'AlarmBaseType',0,13,185,3,3
	.word	24807
	.byte	34,13,206,3,9,8,13
	.byte	'Running',0
	.word	152
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	152
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	196
	.byte	4,2,35,4,0,20
	.byte	'Os_CounterStatusType',0,13,210,3,3
	.word	24902
	.byte	38
	.word	152
	.byte	1,1,5
	.word	24988
	.byte	20
	.byte	'Os_CounterIncrAdvType',0,13,217,3,22
	.word	24995
	.byte	9
	.byte	's_swd',0,13,222,3,12,4,13
	.byte	'count',0
	.word	196
	.byte	4,2,35,0,0,33,13,221,3,3,4,13
	.byte	'sw',0
	.word	25031
	.byte	4,2,35,0,0,9
	.byte	'Os_CounterDynType_s',0,13,220,3,16,4,13
	.byte	'type_dependent',0
	.word	25059
	.byte	4,2,35,0,0,20
	.byte	'Os_CounterDynType',0,13,226,3,3
	.word	25078
	.byte	5
	.word	25078
	.byte	6
	.word	25156
	.byte	9
	.byte	'Os_CounterType_s',0,13,227,3,16,28,13
	.byte	'dynamic',0
	.word	25161
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	25000
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	24807
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	23258
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	152
	.byte	1,2,35,25,0,20
	.byte	'Os_CounterType',0,13,234,3,3
	.word	25166
	.byte	5
	.word	24988
	.byte	6
	.word	25166
	.byte	5
	.word	25318
	.byte	20
	.byte	'CounterType',0,13,235,3,52
	.word	25323
	.byte	37
	.byte	'Os_ScheduleTableStatusType',0,13,240,3,6,4,8
	.byte	'SCHEDULETABLE_STOPPED',0,0,8
	.byte	'SCHEDULETABLE_NEXT',0,1,8
	.byte	'SCHEDULETABLE_WAITING',0,2,8
	.byte	'SCHEDULETABLE_RUNNING',0,3,8
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,20
	.byte	'ScheduleTableStatusType',0,13,241,3,41
	.word	25349
	.byte	6
	.word	.L1228-.L431
	.byte	5
	.word	25549
	.byte	20
	.byte	'ScheduleTableType',0,13,128,4,58
	.word	25554
	.byte	9
	.byte	'Os_ScheduleTableDynType_s',0,13,130,4,16,16,13
	.byte	'match',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	25559
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	25349
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	1842
	.byte	2,2,35,12,0,5
	.word	25586
	.byte	6
	.word	25679
.L1228:
	.byte	9
	.byte	'Os_ScheduleTableType_s',0,13,247,3,16,16,13
	.byte	'dynamic',0
	.word	25684
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	25328
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	152
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	1842
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	152
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	152
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	152
	.byte	1,2,35,14,0,20
	.byte	'Os_ScheduleTableType',0,13,255,3,3
	.word	25689
	.byte	6
	.word	25689
	.byte	5
	.word	25869
	.byte	6
	.word	25166
	.byte	5
	.word	25879
	.byte	23
	.word	22982
	.byte	23
	.word	23932
	.byte	23
	.word	23829
	.byte	23
	.word	24490
	.byte	23
	.word	23996
	.byte	23
	.word	152
	.byte	23
	.word	24490
	.byte	9
	.byte	'Os_ControlledCoreType_s',0,13,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	22426
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	25889
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	25894
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	25899
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	25904
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	25909
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	23515
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	23312
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	152
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	25914
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	22597
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	152
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	25919
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	22597
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	152
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	152
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	152
	.byte	1,2,35,110,0,20
	.byte	'Os_ControlledCoreType',0,13,141,7,3
	.word	25924
	.byte	5
	.word	196
	.byte	6
	.word	23660
	.byte	5
	.word	26380
	.byte	6
	.word	24230
	.byte	5
	.word	26390
	.byte	5
	.word	23312
	.byte	9
	.byte	'Os_AnyCoreType_s',0,13,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	196
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	196
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	196
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	196
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	22546
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	152
	.byte	1,2,35,92,0,20
	.byte	'Os_AnyCoreType',0,13,160,7,3
	.word	26405
	.byte	20
	.byte	'unsigned_int',0,14,116,22
	.word	196
	.byte	20
	.byte	'MemIf_StatusType',0,3,29,2
	.word	2498
	.byte	20
	.byte	'MemIf_JobResultType',0,3,39,2
	.word	227
	.byte	20
	.byte	'MemIf_ModeType',0,3,45,2
	.word	357
	.byte	20
	.byte	'PduIdType',0,15,22,19
	.word	1842
	.byte	20
	.byte	'PduLengthType',0,15,26,19
	.word	1842
	.byte	7,16,113,9,4,8
	.byte	'TP_DATACONF',0,0,8
	.byte	'TP_DATARETRY',0,1,8
	.byte	'TP_CONFPENDING',0,2,0,20
	.byte	'TpDataStateType',0,16,118,3
	.word	26783
	.byte	20
	.byte	'Can_IdType',0,17,32,16
	.word	196
	.byte	20
	.byte	'Can_HwHandleType',0,17,43,16
	.word	1842
	.byte	20
	.byte	'Can_TxObjPriorityClassType',0,18,219,3,16
	.word	196
	.byte	9
	.byte	'Can_TxHwObjectConfigType',0,18,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	152
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	152
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	196
	.byte	4,2,35,4,0,20
	.byte	'Can_TxHwObjectConfigType',0,18,252,3,3
	.word	26939
	.byte	9
	.byte	'Can_RxHwObjectConfigType',0,18,129,4,16,12,13
	.byte	'MaskRef',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	152
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	152
	.byte	1,2,35,9,0,20
	.byte	'Can_RxHwObjectConfigType',0,18,147,4,3
	.word	27075
	.byte	11,4
	.word	152
	.byte	12,3,0,9
	.byte	'Can_ControllerMOMapConfigType',0,18,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	27215
	.byte	4,2,35,0,0,20
	.byte	'Can_ControllerMOMapConfigType',0,18,184,4,3
	.word	27224
	.byte	9
	.byte	'Can_NPCRValueType',0,18,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	1842
	.byte	2,2,35,0,0,20
	.byte	'Can_NPCRValueType',0,18,191,4,3
	.word	27325
	.byte	9
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,18,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	1842
	.byte	2,2,35,4,0,20
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,18,198,4,3
	.word	27400
	.byte	6
	.word	27400
	.byte	5
	.word	27565
	.byte	9
	.byte	'Can_BaudrateConfigPtrType',0,18,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	27570
	.byte	4,2,35,0,0,20
	.byte	'Can_BaudrateConfigPtrType',0,18,204,4,3
	.word	27575
	.byte	9
	.byte	'Can_EventHandlingType',0,18,226,4,16,4,13
	.byte	'CanEventType',0
	.word	27215
	.byte	4,2,35,0,0,20
	.byte	'Can_EventHandlingType',0,18,229,4,3
	.word	27675
	.byte	20
	.byte	'Rte_TransformerErrorCode',0,19,130,1,15
	.word	152
	.byte	20
	.byte	'Rte_TransformerClass',0,19,131,1,15
	.word	152
	.byte	34,19,168,1,9,12,13
	.byte	'in',0
	.word	23258
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	23258
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	1842
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	152
	.byte	1,2,35,10,0,20
	.byte	'Rte_QDynType',0,19,173,1,3
	.word	27821
	.byte	7,19,175,1,9,4,8
	.byte	'RTE_DRA',0,0,8
	.byte	'RTE_WOWP',0,1,8
	.byte	'RTE_TASK',0,2,8
	.byte	'RTE_ARE',0,3,8
	.byte	'RTE_EV',0,4,8
	.byte	'RTE_MSI',0,5,0,20
	.byte	'Rte_NotificationType',0,19,182,1,3
	.word	27908
	.byte	11,128,8
	.word	152
	.byte	12,255,7,0,20
	.byte	'Impl_NVM_DstPtrType_1024',0,20,50,15
	.word	28006
	.byte	20
	.byte	'CanIf_u32_impl',0,20,69,16
	.word	196
	.byte	20
	.byte	'CanIf_u16_impl',0,20,71,16
	.word	1842
	.byte	20
	.byte	'CanIf_u8_impl',0,20,73,15
	.word	152
	.byte	20
	.byte	'CanIf_ControllerModeType_Enum_impl',0,20,88,15
	.word	152
	.byte	20
	.byte	'CanIf_PduModeType_Enum_impl',0,20,90,15
	.word	152
	.byte	34,20,92,9,2,13
	.byte	'DeviceMode',0
	.word	152
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	152
	.byte	1,2,35,1,0,20
	.byte	'CanIf_ControllerStateType_struct_impl',0,20,95,3
	.word	28197
	.byte	20
	.byte	'CanIf_NotifStatusType_Enum_impl',0,20,100,15
	.word	152
	.byte	20
	.byte	'CanSM_boolean_Impl',0,20,120,15
	.word	152
	.byte	20
	.byte	'CanSM_u8_Impl',0,20,123,15
	.word	152
	.byte	20
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,20,128,1,15
	.word	152
	.byte	20
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,20,132,1,15
	.word	152
	.byte	20
	.byte	'CanSM_u16_Impl',0,20,136,1,16
	.word	1842
	.byte	20
	.byte	'CanSM_TimerStateType_Enum_impl',0,20,138,1,15
	.word	152
	.byte	34,20,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	1842
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	152
	.byte	1,2,35,2,0,20
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,20,143,1,3
	.word	28538
	.byte	20
	.byte	'Com_impl_u16',0,20,154,1,16
	.word	1842
	.byte	20
	.byte	'Com_impl_u8',0,20,157,1,15
	.word	152
	.byte	20
	.byte	'ComM_uint32_Impl',0,20,173,1,16
	.word	196
	.byte	20
	.byte	'ComM_uint16_Impl',0,20,175,1,16
	.word	1842
	.byte	20
	.byte	'ComM_uint8_Impl',0,20,177,1,15
	.word	152
	.byte	20
	.byte	'ComM_bool_Impl',0,20,179,1,15
	.word	152
	.byte	34,20,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	196
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	196
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	1842
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	152
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	152
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	152
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	152
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	152
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	152
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	152
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	152
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	152
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	152
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	152
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	152
	.byte	1,2,35,21,0,20
	.byte	'ComM_ChannelStruct_Impl',0,20,197,1,3
	.word	28770
	.byte	34,20,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	1842
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	1842
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	152
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	152
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	152
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	152
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	152
	.byte	1,2,35,8,0,20
	.byte	'ComM_UserStruct_Impl',0,20,214,1,3
	.word	29274
	.byte	20
	.byte	'Dcm_IOOperationResponseType',0,20,252,1,15
	.word	152
	.byte	20
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	20,138,2,15
	.word	152
	.byte	20
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,20,146,2,15
	.word	152
	.byte	20
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,20,150,2,15
	.word	152
	.byte	20
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,20,154,2,15
	.word	152
	.byte	20
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,20,243,3,34
	.word	28017
	.byte	11,128,8
	.word	152
	.byte	12,255,7,0,20
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,20,246,3,34
	.word	28017
	.byte	20
	.byte	'Fls_AddressType',0,2,171,3,16
	.word	196
	.byte	20
	.byte	'Fls_LengthType',0,2,173,3,16
	.word	196
	.byte	20
	.byte	'Fls_JobStartType',0,2,183,3,3
	.word	399
	.byte	20
	.byte	'Fls_17_Pmu_Job_Type',0,2,187,3,15
	.word	152
	.byte	20
	.byte	'Fls_17_Pmu_StateType',0,2,130,4,3
	.word	543
	.byte	20
	.byte	'Fls_17_Pmu_ConfigType',0,2,218,4,3
	.word	2117
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L432:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,11,0,0,0,5,15,0,73,19,0,0,6,38,0,73,19,0,0,7,4,1,58,15,59,15,57,15,11,15
	.byte	0,0,8,40,0,3,8,28,13,0,0,9,19,1,3,8,58,15,59,15,57,15,11,15,0,0,10,13,0,3,8,11,15,73,19,13,15,12,15,56
	.byte	9,0,0,11,1,1,11,15,73,19,0,0,12,33,0,47,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,5,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,15,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,16,11,1,0,0,17,46,0,3,8,58,15,59,15
	.byte	57,15,54,15,39,12,63,12,60,12,0,0,18,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,19,21
	.byte	0,54,15,39,12,0,0,20,22,0,3,8,58,15,59,15,57,15,73,19,0,0,21,21,1,54,15,39,12,0,0,22,5,0,73,19,0,0,23
	.byte	53,0,73,19,0,0,24,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,25,46,0,3,8,32,13,58,15,59,15
	.byte	57,15,54,15,39,12,63,12,60,12,0,0,26,46,0,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0
	.byte	0,27,46,1,49,19,0,0,28,5,0,49,19,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,0,3,8,58,15,59,15,57,15
	.byte	54,15,63,12,60,12,0,0,32,21,0,54,15,0,0,33,23,1,58,15,59,15,57,15,11,15,0,0,34,19,1,58,15,59,15,57,15
	.byte	11,15,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,36,59,0,3,8,0,0,37,4,1,3,8,58,15,59,15,57
	.byte	15,11,15,0,0,38,21,0,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L433:
	.word	.L1230-.L1229
.L1229:
	.half	3
	.word	.L1232-.L1231
.L1231:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_WdgLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu_ac.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu_Local.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxFlash_regdef.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxSrc_regdef.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_Compiler.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0,0
.L1232:
.L1230:
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_info'
.L434:
	.word	393
	.half	3
	.word	.L435
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L437,.L436
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Init',0,1,189,2,6,1,1,1
	.word	.L381,.L561,.L380
	.byte	4
	.byte	'ConfigPtr',0,1,189,2,51
	.word	.L562,.L563
	.byte	5
	.word	.L381,.L561
	.byte	6
	.byte	'StatePtr',0,1,191,2,26
	.word	.L564,.L565
	.byte	6
	.byte	'FconReg',0,1,192,2,10
	.word	.L566,.L567
	.byte	6
	.byte	'DummyRetVal',0,1,193,2,10
	.word	.L566,.L568
	.byte	5
	.word	.L569,.L570
	.byte	6
	.byte	'val',0,1,148,3,5
	.word	.L566,.L571
	.byte	0,7
	.word	.L572,.L573,.L3
	.byte	8
	.word	.L574,.L573,.L3
	.byte	6
	.byte	'StatePtr',0,1,246,38,27
	.word	.L564,.L575
	.byte	6
	.byte	'RetVal',0,1,247,38,10
	.word	.L566,.L576
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_abbrev'
.L435:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_line'
.L436:
	.word	.L1234-.L1233
.L1233:
	.half	3
	.word	.L1236-.L1235
.L1235:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1236:
	.byte	5,6,7,0,5,2
	.word	.L381
	.byte	3,188,2,1,5,3,9
	.half	.L930-.L381
	.byte	3,11,1,5,30,7,9
	.half	.L1237-.L930
	.byte	3,5,1,5,22,9
	.half	.L1238-.L1237
	.byte	3,1,1,5,45,9
	.half	.L1239-.L1238
	.byte	1,5,23,9
	.half	.L1240-.L1239
	.byte	3,1,1,5,42,9
	.half	.L929-.L1240
	.byte	1,5,23,9
	.half	.L2-.L929
	.byte	3,3,1,5,51,9
	.half	.L1241-.L2
	.byte	1,5,12,9
	.half	.L1242-.L1241
	.byte	1,5,49,7,9
	.half	.L1243-.L1242
	.byte	3,1,1,5,53,9
	.half	.L1244-.L1243
	.byte	1,5,30,7,9
	.half	.L4-.L1244
	.byte	3,2,1,5,22,9
	.half	.L1245-.L4
	.byte	3,1,1,5,45,9
	.half	.L1246-.L1245
	.byte	1,5,23,9
	.half	.L1247-.L1246
	.byte	3,1,1,5,34,9
	.half	.L932-.L1247
	.byte	1,5,5,9
	.half	.L5-.L932
	.byte	3,15,1,5,19,9
	.half	.L1248-.L5
	.byte	1,5,26,9
	.half	.L1249-.L1248
	.byte	3,6,1,5,24,9
	.half	.L933-.L1249
	.byte	3,3,1,5,5,9
	.half	.L1250-.L933
	.byte	3,3,1,5,23,9
	.half	.L1251-.L1250
	.byte	3,4,1,5,13,9
	.half	.L934-.L1251
	.byte	3,13,1,5,41,9
	.half	.L935-.L934
	.byte	3,5,1,5,13,9
	.half	.L1252-.L935
	.byte	1,5,5,9
	.half	.L1253-.L1252
	.byte	3,1,1,9
	.half	.L569-.L1253
	.byte	3,11,1,9
	.half	.L570-.L569
	.byte	3,3,1,5,23,9
	.half	.L936-.L570
	.byte	3,3,1,5,25,9
	.half	.L1254-.L936
	.byte	3,16,1,5,30,9
	.half	.L931-.L1254
	.byte	3,3,1,5,28,9
	.half	.L938-.L931
	.byte	1,5,35,9
	.half	.L1255-.L938
	.byte	3,3,1,5,33,9
	.half	.L1256-.L1255
	.byte	1,5,35,9
	.half	.L1257-.L1256
	.byte	3,1,1,5,33,9
	.half	.L1258-.L1257
	.byte	1,5,25,9
	.half	.L1259-.L1258
	.byte	3,3,1,5,32,9
	.half	.L1260-.L1259
	.byte	1,5,25,9
	.half	.L1261-.L1260
	.byte	3,1,1,5,32,9
	.half	.L1262-.L1261
	.byte	1,5,44,9
	.half	.L1263-.L1262
	.byte	3,3,1,5,23,9
	.half	.L1264-.L1263
	.byte	1,5,25,9
	.half	.L1265-.L1264
	.byte	3,3,1,5,23,9
	.half	.L1266-.L1265
	.byte	1,5,35,9
	.half	.L1267-.L1266
	.byte	3,4,1,5,33,9
	.half	.L1268-.L1267
	.byte	1,5,14,9
	.half	.L573-.L1268
	.byte	3,186,35,1,5,27,9
	.half	.L939-.L573
	.byte	1,5,57,9
	.half	.L940-.L939
	.byte	3,8,1,5,21,9
	.half	.L1269-.L940
	.byte	3,127,1,5,65,9
	.half	.L942-.L1269
	.byte	1,5,3,9
	.half	.L1270-.L942
	.byte	3,7,1,5,25,7,9
	.half	.L1271-.L1270
	.byte	3,2,1,5,23,9
	.half	.L1272-.L1271
	.byte	1,5,14,9
	.half	.L7-.L1272
	.byte	3,3,1,5,3,9
	.half	.L1273-.L7
	.byte	1,5,12,7,9
	.half	.L1274-.L1273
	.byte	3,2,1,5,8,9
	.half	.L1275-.L1274
	.byte	3,1,1,5,21,9
	.half	.L941-.L1275
	.byte	1,5,5,9
	.half	.L1276-.L941
	.byte	1,5,55,7,9
	.half	.L1277-.L1276
	.byte	3,3,1,5,3,9
	.half	.L8-.L1277
	.byte	3,4,1,5,5,9
	.half	.L10-.L8
	.byte	3,176,92,1,5,1,7,9
	.half	.L3-.L10
	.byte	3,2,1,7,9
	.half	.L438-.L3
	.byte	0,1,1
.L1234:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_ranges'
.L437:
	.word	-1,.L381,0,.L438-.L381,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_info'
.L439:
	.word	693
	.half	3
	.word	.L440
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L442,.L441
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Erase',0,1,230,3,16
	.word	.L577
	.byte	1,1,1
	.word	.L383,.L578,.L382
	.byte	4
	.byte	'TargetAddress',0,1,230,3,50
	.word	.L566,.L579
	.byte	4
	.byte	'Length',0,1,231,3,42
	.word	.L566,.L580
	.byte	5
	.word	.L383,.L578
	.byte	6
	.byte	'StatePtr',0,1,234,3,27
	.word	.L564,.L581
	.byte	6
	.byte	'PhysicalAddress',0,1,235,3,20
	.word	.L582,.L583
	.byte	6
	.byte	'JobType',0,1,236,3,20
	.word	.L584,.L585
	.byte	6
	.byte	'ReturnValue',0,1,237,3,20
	.word	.L577,.L586
	.byte	7
	.word	.L587,.L588,.L589
	.byte	8
	.word	.L590,.L591
	.byte	8
	.word	.L592,.L593
	.byte	9
	.word	.L594,.L588,.L589
	.byte	6
	.byte	'StatePtr',0,1,197,36,27
	.word	.L564,.L595
	.byte	6
	.byte	'ReturnValue',0,1,198,36,20
	.word	.L577,.L596
	.byte	7
	.word	.L597,.L598,.L599
	.byte	8
	.word	.L600,.L601
	.byte	9
	.word	.L602,.L598,.L599
	.byte	6
	.byte	'ErrorFlag',0,1,211,33,9
	.word	.L577,.L603
	.byte	6
	.byte	'ArrPtr',0,1,213,33,16
	.word	.L604,.L605
	.byte	0,0,0,0,7
	.word	.L606,.L27,.L607
	.byte	9
	.word	.L608,.L27,.L607
	.byte	6
	.byte	'StatePtr',0,1,192,38,27
	.word	.L564,.L609
	.byte	6
	.byte	'RetVal',0,1,193,38,10
	.word	.L566,.L610
	.byte	0,0,7
	.word	.L611,.L38,.L612
	.byte	9
	.word	.L613,.L38,.L612
	.byte	6
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L614
	.byte	0,0,7
	.word	.L615,.L616,.L617
	.byte	9
	.word	.L618,.L616,.L617
	.byte	6
	.byte	'RetVal',0,1,156,38,10
	.word	.L566,.L619
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_abbrev'
.L440:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_line'
.L441:
	.word	.L1279-.L1278
.L1278:
	.half	3
	.word	.L1281-.L1280
.L1280:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1281:
	.byte	5,16,7,0,5,2
	.word	.L383
	.byte	3,229,3,1,5,21,9
	.half	.L588-.L383
	.byte	3,227,32,1,5,3,9
	.half	.L944-.L588
	.byte	1,5,17,7,9
	.half	.L1282-.L944
	.byte	3,2,1,5,27,9
	.half	.L946-.L1282
	.byte	1,5,13,9
	.half	.L12-.L946
	.byte	3,4,1,5,51,7,9
	.half	.L947-.L12
	.byte	3,1,1,5,30,9
	.half	.L949-.L947
	.byte	3,3,1,5,22,9
	.half	.L1283-.L949
	.byte	3,1,1,9
	.half	.L1284-.L1283
	.byte	3,1,1,9
	.half	.L1285-.L1284
	.byte	3,1,1,5,17,9
	.half	.L1286-.L1285
	.byte	3,2,1,5,42,9
	.half	.L950-.L1286
	.byte	3,126,1,5,12,9
	.half	.L14-.L950
	.byte	3,6,1,5,39,7,9
	.half	.L951-.L14
	.byte	3,1,1,5,26,9
	.half	.L952-.L951
	.byte	1,5,10,9
	.half	.L953-.L952
	.byte	1,5,37,7,9
	.half	.L1287-.L953
	.byte	3,1,1,5,34,9
	.half	.L1288-.L1287
	.byte	1,5,30,7,9
	.half	.L17-.L1288
	.byte	3,3,1,5,23,9
	.half	.L1289-.L17
	.byte	3,1,1,5,46,9
	.half	.L1290-.L1289
	.byte	1,5,23,9
	.half	.L1291-.L1290
	.byte	3,1,1,5,17,9
	.half	.L1292-.L1291
	.byte	3,2,1,5,42,9
	.half	.L954-.L1292
	.byte	3,126,1,5,16,9
	.half	.L18-.L954
	.byte	3,6,1,5,29,9
	.half	.L1293-.L18
	.byte	1,5,20,9
	.half	.L598-.L1293
	.byte	3,237,124,1,5,13,9
	.half	.L955-.L598
	.byte	3,1,1,9
	.half	.L957-.L955
	.byte	3,9,1,5,6,9
	.half	.L1294-.L957
	.byte	1,5,40,7,9
	.half	.L1295-.L1294
	.byte	1,5,44,9
	.half	.L1296-.L1295
	.byte	1,5,30,7,9
	.half	.L21-.L1296
	.byte	3,2,1,5,22,9
	.half	.L1297-.L21
	.byte	3,1,1,9
	.half	.L1298-.L1297
	.byte	3,1,1,9
	.half	.L1299-.L1298
	.byte	3,1,1,5,15,9
	.half	.L956-.L1299
	.byte	3,1,1,5,3,9
	.half	.L22-.L956
	.byte	3,3,1,5,5,9
	.half	.L23-.L22
	.byte	3,130,3,1,5,29,9
	.half	.L599-.L23
	.byte	3,2,1,5,19,9
	.half	.L24-.L599
	.byte	3,4,1,5,3,9
	.half	.L13-.L24
	.byte	3,4,1,9
	.half	.L26-.L13
	.byte	3,252,94,1,5,17,7,9
	.half	.L589-.L26
	.byte	3,2,1,5,27,9
	.half	.L959-.L589
	.byte	1,5,14,9
	.half	.L27-.L959
	.byte	3,208,34,1,5,27,9
	.half	.L1300-.L27
	.byte	1,5,57,9
	.half	.L960-.L1300
	.byte	3,8,1,5,21,9
	.half	.L1301-.L960
	.byte	3,127,1,5,68,9
	.half	.L962-.L1301
	.byte	1,5,3,9
	.half	.L1302-.L962
	.byte	3,7,1,5,25,7,9
	.half	.L1303-.L1302
	.byte	3,2,1,5,23,9
	.half	.L958-.L1303
	.byte	1,5,14,9
	.half	.L29-.L958
	.byte	3,3,1,5,3,9
	.half	.L1304-.L29
	.byte	1,5,12,7,9
	.half	.L1305-.L1304
	.byte	3,2,1,5,8,9
	.half	.L1306-.L1305
	.byte	3,1,1,5,21,9
	.half	.L961-.L1306
	.byte	1,5,5,9
	.half	.L1307-.L961
	.byte	1,5,55,7,9
	.half	.L1308-.L1307
	.byte	3,3,1,5,3,9
	.half	.L30-.L1308
	.byte	3,4,1,5,5,9
	.half	.L32-.L30
	.byte	3,155,93,1,5,19,7,9
	.half	.L607-.L32
	.byte	3,2,1,5,18,9
	.half	.L963-.L607
	.byte	3,3,1,5,31,9
	.half	.L1309-.L963
	.byte	1,5,25,9
	.half	.L964-.L1309
	.byte	3,3,1,5,23,9
	.half	.L1310-.L964
	.byte	1,5,20,9
	.half	.L1311-.L1310
	.byte	3,2,1,5,18,9
	.half	.L965-.L1311
	.byte	1,5,20,9
	.half	.L1312-.L965
	.byte	3,1,1,5,18,9
	.half	.L1313-.L1312
	.byte	1,5,38,9
	.half	.L1314-.L1313
	.byte	3,3,1,5,25,9
	.half	.L966-.L1314
	.byte	1,5,7,9
	.half	.L967-.L966
	.byte	1,5,22,7,9
	.half	.L1315-.L967
	.byte	3,3,1,5,20,9
	.half	.L1316-.L1315
	.byte	1,5,31,9
	.half	.L1317-.L1316
	.byte	1,5,12,9
	.half	.L34-.L1317
	.byte	3,2,1,5,22,7,9
	.half	.L968-.L34
	.byte	3,3,1,5,20,9
	.half	.L1318-.L968
	.byte	1,5,27,9
	.half	.L1319-.L1318
	.byte	3,2,1,5,25,9
	.half	.L1320-.L1319
	.byte	1,5,31,9
	.half	.L1321-.L1320
	.byte	3,126,1,5,22,9
	.half	.L36-.L1321
	.byte	3,7,1,5,20,9
	.half	.L1322-.L36
	.byte	1,5,22,9
	.half	.L1323-.L1322
	.byte	3,1,1,5,20,9
	.half	.L1324-.L1323
	.byte	1,5,27,9
	.half	.L35-.L1324
	.byte	3,4,1,5,32,9
	.half	.L1325-.L35
	.byte	3,4,1,5,30,9
	.half	.L1326-.L1325
	.byte	1,5,27,9
	.half	.L1327-.L1326
	.byte	3,5,1,5,41,9
	.half	.L1328-.L1327
	.byte	1,5,31,9
	.half	.L1329-.L1328
	.byte	1,5,27,9
	.half	.L1330-.L1329
	.byte	3,1,1,5,41,9
	.half	.L1331-.L1330
	.byte	1,5,31,9
	.half	.L1332-.L1331
	.byte	1,5,19,9
	.half	.L1333-.L1332
	.byte	3,3,1,5,7,9
	.half	.L1334-.L1333
	.byte	1,5,44,7,9
	.half	.L1335-.L1334
	.byte	3,4,1,5,57,9
	.half	.L1336-.L1335
	.byte	1,5,20,9
	.half	.L1337-.L1336
	.byte	1,5,57,9
	.half	.L1338-.L1337
	.byte	1,5,42,9
	.half	.L1339-.L1338
	.byte	1,5,45,9
	.half	.L1340-.L1339
	.byte	3,127,1,5,50,9
	.half	.L1341-.L1340
	.byte	3,2,1,5,35,9
	.half	.L1342-.L1341
	.byte	1,5,9,9
	.half	.L1343-.L1342
	.byte	1,5,19,7,9
	.half	.L1344-.L1343
	.byte	3,2,1,5,46,9
	.half	.L1345-.L1344
	.byte	1,5,20,9
	.half	.L39-.L1345
	.byte	3,3,1,5,12,9
	.half	.L1346-.L39
	.byte	1,5,49,7,9
	.half	.L1347-.L1346
	.byte	1,5,53,9
	.half	.L1348-.L1347
	.byte	1,5,19,7,9
	.half	.L1349-.L1348
	.byte	3,2,1,5,47,9
	.half	.L1350-.L1349
	.byte	1,5,21,9
	.half	.L38-.L1350
	.byte	3,162,35,1,5,68,9
	.half	.L969-.L38
	.byte	1,5,3,9
	.half	.L1351-.L969
	.byte	3,5,1,5,7,9
	.half	.L42-.L1351
	.byte	3,223,92,1,5,29,7,9
	.half	.L612-.L42
	.byte	3,3,1,5,36,9
	.half	.L970-.L612
	.byte	1,5,31,9
	.half	.L1352-.L970
	.byte	3,14,1,5,32,9
	.half	.L1353-.L1352
	.byte	3,3,1,5,30,9
	.half	.L1354-.L1353
	.byte	3,3,1,5,21,9
	.half	.L616-.L1354
	.byte	3,207,33,1,5,52,9
	.half	.L1355-.L616
	.byte	3,1,1,5,68,9
	.half	.L971-.L1355
	.byte	3,127,1,5,2,9
	.half	.L1356-.L971
	.byte	3,7,1,5,9,9
	.half	.L44-.L1356
	.byte	3,174,94,1,5,23,7,9
	.half	.L617-.L44
	.byte	3,2,1,5,36,9
	.half	.L1357-.L617
	.byte	3,3,1,5,29,9
	.half	.L1358-.L1357
	.byte	3,2,1,5,33,9
	.half	.L1359-.L1358
	.byte	3,123,1,5,26,9
	.half	.L45-.L1359
	.byte	3,8,1,5,14,9
	.half	.L972-.L45
	.byte	1,5,23,7,9
	.half	.L1360-.L972
	.byte	3,2,1,5,29,9
	.half	.L1361-.L1360
	.byte	3,2,1,5,33,9
	.half	.L1362-.L1361
	.byte	3,126,1,5,7,9
	.half	.L43-.L1362
	.byte	3,89,1,5,19,9
	.half	.L33-.L43
	.byte	3,52,1,5,3,9
	.half	.L28-.L33
	.byte	3,4,1,5,1,9
	.half	.L50-.L28
	.byte	3,1,1,7,9
	.half	.L443-.L50
	.byte	0,1,1
.L1279:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_ranges'
.L442:
	.word	-1,.L383,0,.L443-.L383,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_info'
.L444:
	.word	1083
	.half	3
	.word	.L445
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L447,.L446
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Write',0,1,151,5,16
	.word	.L577
	.byte	1,1,1
	.word	.L385,.L620,.L384
	.byte	4
	.byte	'TargetAddress',0,1,151,5,50
	.word	.L566,.L621
	.byte	4
	.byte	'SourceAddressPtr',0,1,152,5,40
	.word	.L604,.L622
	.byte	4
	.byte	'Length',0,1,153,5,42
	.word	.L566,.L623
	.byte	5
	.word	.L385,.L620
	.byte	6
	.byte	'StatePtr',0,1,156,5,27
	.word	.L564,.L624
	.byte	6
	.byte	'PhysicalAddress',0,1,157,5,19
	.word	.L625,.L626
	.byte	6
	.byte	'PageStartAddressPtr',0,1,158,5,20
	.word	.L627,.L628
	.byte	6
	.byte	'RetVal',0,1,159,5,19
	.word	.L577,.L629
	.byte	6
	.byte	'WriteMode',0,1,160,5,19
	.word	.L577,.L630
	.byte	6
	.byte	'JobType',0,1,161,5,19
	.word	.L584,.L631
	.byte	7
	.word	.L632,.L633,.L634
	.byte	8
	.word	.L635,.L636
	.byte	8
	.word	.L637,.L638
	.byte	8
	.word	.L639,.L640
	.byte	9
	.word	.L641,.L633,.L634
	.byte	6
	.byte	'RetVal',0,1,147,37,19
	.word	.L577,.L642
	.byte	0,0,7
	.word	.L643,.L66,.L644
	.byte	8
	.word	.L645,.L646
	.byte	9
	.word	.L647,.L66,.L644
	.byte	6
	.byte	'ErrorFlag',0,1,168,33,9
	.word	.L577,.L648
	.byte	6
	.byte	'ArrPtr',0,1,169,33,16
	.word	.L604,.L649
	.byte	0,0,7
	.word	.L606,.L72,.L650
	.byte	9
	.word	.L608,.L72,.L650
	.byte	6
	.byte	'StatePtr',0,1,192,38,27
	.word	.L564,.L651
	.byte	6
	.byte	'RetVal',0,1,193,38,10
	.word	.L566,.L652
	.byte	0,0,7
	.word	.L653,.L654,.L79
	.byte	9
	.word	.L655,.L654,.L79
	.byte	6
	.byte	'StatePtr',0,1,179,35,27
	.word	.L564,.L656
	.byte	6
	.byte	'Length',0,1,180,35,19
	.word	.L566,.L657
	.byte	6
	.byte	'WriteTimeOutCount',0,1,181,35,19
	.word	.L566,.L658
	.byte	6
	.byte	'PageStartAddress',0,1,182,35,19
	.word	.L566,.L659
	.byte	0,0,7
	.word	.L611,.L79,.L660
	.byte	9
	.word	.L613,.L79,.L660
	.byte	6
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L661
	.byte	0,0,7
	.word	.L662,.L663,.L97
	.byte	8
	.word	.L664,.L665
	.byte	8
	.word	.L666,.L667
	.byte	8
	.word	.L668,.L669
	.byte	9
	.word	.L670,.L663,.L97
	.byte	6
	.byte	'RetVal',0,1,251,35,19
	.word	.L577,.L671
	.byte	6
	.byte	'Loop',0,1,252,35,19
	.word	.L577,.L672
	.byte	6
	.byte	'PageLength',0,1,253,35,19
	.word	.L577,.L673
	.byte	0,0,7
	.word	.L674,.L675,.L102
	.byte	10
	.word	.L676,.L677
	.byte	6
	.byte	'StatePtr',0,1,217,37,27
	.word	.L564,.L680
	.byte	6
	.byte	'RetVal',0,1,218,37,19
	.word	.L577,.L681
	.byte	0,0,11
	.word	.L674,.L678,.L679
	.byte	7
	.word	.L615,.L682,.L683
	.byte	9
	.word	.L618,.L682,.L683
	.byte	6
	.byte	'RetVal',0,1,156,38,10
	.word	.L566,.L684
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_abbrev'
.L445:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,85,6,0,0,11,29,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_line'
.L446:
	.word	.L1364-.L1363
.L1363:
	.half	3
	.word	.L1366-.L1365
.L1365:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1366:
	.byte	5,16,7,0,5,2
	.word	.L385
	.byte	3,150,5,1,5,10,9
	.half	.L980-.L385
	.byte	3,12,1,9
	.half	.L633-.L980
	.byte	3,242,31,1,5,21,9
	.half	.L981-.L633
	.byte	3,3,1,5,3,9
	.half	.L975-.L981
	.byte	1,5,12,7,9
	.half	.L1367-.L975
	.byte	3,2,1,5,22,9
	.half	.L1368-.L1367
	.byte	1,5,45,9
	.half	.L51-.L1368
	.byte	3,3,1,5,12,9
	.half	.L1369-.L51
	.byte	1,5,26,7,9
	.half	.L1370-.L1369
	.byte	3,1,1,5,44,9
	.half	.L1371-.L1370
	.byte	1,5,30,7,9
	.half	.L53-.L1371
	.byte	3,2,1,5,22,9
	.half	.L1372-.L53
	.byte	3,1,1,5,45,9
	.half	.L1373-.L1372
	.byte	1,5,22,9
	.half	.L1374-.L1373
	.byte	3,1,1,5,12,9
	.half	.L1375-.L1374
	.byte	3,2,1,5,42,9
	.half	.L1376-.L1375
	.byte	3,126,1,5,11,9
	.half	.L54-.L1376
	.byte	3,5,1,5,39,7,9
	.half	.L1377-.L54
	.byte	1,5,30,9
	.half	.L1378-.L1377
	.byte	1,7,9
	.half	.L1379-.L1378
	.byte	3,1,1,5,42,9
	.half	.L1380-.L1379
	.byte	1,5,40,9
	.half	.L1381-.L1380
	.byte	1,5,30,7,9
	.half	.L56-.L1381
	.byte	3,2,1,5,22,9
	.half	.L1382-.L56
	.byte	3,1,1,5,45,9
	.half	.L1383-.L1382
	.byte	1,5,22,9
	.half	.L1384-.L1383
	.byte	3,1,1,5,12,9
	.half	.L1385-.L1384
	.byte	3,2,1,5,41,9
	.half	.L1386-.L1385
	.byte	3,126,1,5,8,9
	.half	.L58-.L1386
	.byte	3,5,1,5,30,9
	.half	.L1387-.L58
	.byte	3,2,1,5,23,9
	.half	.L1388-.L1387
	.byte	3,1,1,5,46,9
	.half	.L1389-.L1388
	.byte	1,5,22,9
	.half	.L1390-.L1389
	.byte	3,1,1,5,12,9
	.half	.L1391-.L1390
	.byte	3,2,1,5,39,9
	.half	.L1392-.L1391
	.byte	3,126,1,5,3,9
	.half	.L52-.L1392
	.byte	3,9,1,9
	.half	.L62-.L52
	.byte	3,232,95,1,5,12,7,9
	.half	.L634-.L62
	.byte	3,2,1,5,22,9
	.half	.L1393-.L634
	.byte	1,5,16,9
	.half	.L63-.L1393
	.byte	3,6,1,5,29,9
	.half	.L1394-.L63
	.byte	1,5,18,9
	.half	.L984-.L1394
	.byte	3,1,1,5,16,9
	.half	.L985-.L984
	.byte	1,5,18,9
	.half	.L982-.L985
	.byte	3,1,1,5,16,9
	.half	.L1395-.L982
	.byte	1,5,39,9
	.half	.L1396-.L1395
	.byte	3,18,1,5,56,9
	.half	.L1397-.L1396
	.byte	1,5,36,9
	.half	.L1398-.L1397
	.byte	3,120,1,5,23,9
	.half	.L1399-.L1398
	.byte	1,5,5,9
	.half	.L1400-.L1399
	.byte	1,5,20,7,9
	.half	.L1401-.L1400
	.byte	3,3,1,5,18,9
	.half	.L1402-.L1401
	.byte	1,5,27,9
	.half	.L1403-.L1402
	.byte	3,5,1,5,23,9
	.half	.L987-.L1403
	.byte	3,3,1,5,29,9
	.half	.L1404-.L987
	.byte	3,120,1,5,10,9
	.half	.L65-.L1404
	.byte	3,11,1,5,24,7,9
	.half	.L1405-.L65
	.byte	3,3,1,5,22,9
	.half	.L1406-.L1405
	.byte	1,5,27,9
	.half	.L1407-.L1406
	.byte	3,4,1,5,25,9
	.half	.L989-.L1407
	.byte	3,5,1,5,23,9
	.half	.L1408-.L989
	.byte	1,5,33,9
	.half	.L1409-.L1408
	.byte	3,119,1,5,24,9
	.half	.L67-.L1409
	.byte	3,14,1,5,22,9
	.half	.L1410-.L67
	.byte	1,5,24,9
	.half	.L1411-.L1410
	.byte	3,1,1,5,22,9
	.half	.L1412-.L1411
	.byte	1,5,27,9
	.half	.L1413-.L1412
	.byte	3,5,1,5,23,9
	.half	.L991-.L1413
	.byte	3,3,1,5,20,9
	.half	.L66-.L991
	.byte	3,200,27,1,5,13,9
	.half	.L992-.L66
	.byte	3,1,1,9
	.half	.L994-.L992
	.byte	3,9,1,5,6,9
	.half	.L1414-.L994
	.byte	1,5,40,7,9
	.half	.L1415-.L1414
	.byte	1,5,44,9
	.half	.L1416-.L1415
	.byte	1,5,30,7,9
	.half	.L69-.L1416
	.byte	3,2,1,5,22,9
	.half	.L1417-.L69
	.byte	3,1,1,9
	.half	.L1418-.L1417
	.byte	3,1,1,9
	.half	.L1419-.L1418
	.byte	3,1,1,5,15,9
	.half	.L995-.L1419
	.byte	3,1,1,5,3,9
	.half	.L70-.L995
	.byte	3,3,1,5,5,9
	.half	.L71-.L70
	.byte	3,172,100,1,5,14,7,9
	.half	.L644-.L71
	.byte	3,2,1,5,24,9
	.half	.L1420-.L644
	.byte	1,5,14,9
	.half	.L72-.L1420
	.byte	3,216,32,1,5,27,9
	.half	.L993-.L72
	.byte	1,5,57,9
	.half	.L997-.L993
	.byte	3,8,1,5,21,9
	.half	.L996-.L997
	.byte	3,127,1,5,68,9
	.half	.L978-.L996
	.byte	1,5,3,9
	.half	.L1421-.L978
	.byte	3,7,1,5,25,7,9
	.half	.L1422-.L1421
	.byte	3,2,1,5,23,9
	.half	.L1423-.L1422
	.byte	1,5,14,9
	.half	.L74-.L1423
	.byte	3,3,1,5,3,9
	.half	.L1424-.L74
	.byte	1,5,12,7,9
	.half	.L1425-.L1424
	.byte	3,2,1,5,8,9
	.half	.L1426-.L1425
	.byte	3,1,1,5,21,9
	.half	.L998-.L1426
	.byte	1,5,5,9
	.half	.L1427-.L998
	.byte	1,5,55,7,9
	.half	.L1428-.L1427
	.byte	3,3,1,5,3,9
	.half	.L75-.L1428
	.byte	3,4,1,5,7,9
	.half	.L77-.L75
	.byte	3,146,95,1,5,29,7,9
	.half	.L650-.L77
	.byte	3,3,1,5,34,9
	.half	.L1429-.L650
	.byte	3,4,1,5,32,9
	.half	.L1430-.L1429
	.byte	1,5,35,9
	.half	.L1431-.L1430
	.byte	3,7,1,5,34,9
	.half	.L1432-.L1431
	.byte	3,3,1,5,37,9
	.half	.L1433-.L1432
	.byte	3,3,1,5,29,9
	.half	.L1434-.L1433
	.byte	3,6,1,5,43,9
	.half	.L1435-.L1434
	.byte	1,5,33,9
	.half	.L1436-.L1435
	.byte	1,5,29,9
	.half	.L1437-.L1436
	.byte	3,1,1,5,43,9
	.half	.L1438-.L1437
	.byte	1,5,33,9
	.half	.L1439-.L1438
	.byte	1,5,21,9
	.half	.L1440-.L1439
	.byte	3,3,1,5,9,9
	.half	.L1441-.L1440
	.byte	1,5,14,7,9
	.half	.L654-.L1441
	.byte	3,168,29,1,5,27,9
	.half	.L1442-.L654
	.byte	1,5,30,9
	.half	.L1001-.L1442
	.byte	3,2,1,5,20,9
	.half	.L1002-.L1001
	.byte	3,1,1,5,55,9
	.half	.L1003-.L1002
	.byte	3,3,1,5,18,9
	.half	.L1443-.L1003
	.byte	1,5,40,9
	.half	.L1444-.L1443
	.byte	1,5,3,9
	.half	.L1004-.L1444
	.byte	3,1,1,5,23,7,9
	.half	.L1445-.L1004
	.byte	3,2,1,5,27,9
	.half	.L1446-.L1445
	.byte	1,5,9,9
	.half	.L80-.L1446
	.byte	3,4,1,5,31,9
	.half	.L1447-.L80
	.byte	1,5,24,9
	.half	.L1448-.L1447
	.byte	3,2,1,5,39,9
	.half	.L81-.L1448
	.byte	3,4,1,5,31,9
	.half	.L1449-.L81
	.byte	3,2,1,5,41,9
	.half	.L84-.L1449
	.byte	3,2,1,5,9,9
	.half	.L1450-.L84
	.byte	1,5,28,7,9
	.half	.L1451-.L1450
	.byte	3,1,1,5,58,9
	.half	.L1452-.L1451
	.byte	1,5,14,7,9
	.half	.L85-.L1452
	.byte	3,2,1,5,24,9
	.half	.L1453-.L85
	.byte	3,1,1,5,30,9
	.half	.L1454-.L1453
	.byte	3,127,1,5,14,9
	.half	.L86-.L1454
	.byte	3,5,1,5,24,9
	.half	.L1455-.L86
	.byte	3,1,1,5,13,9
	.half	.L87-.L1455
	.byte	3,2,1,5,41,9
	.half	.L1456-.L87
	.byte	1,5,31,9
	.half	.L83-.L1456
	.byte	3,115,1,5,11,7,9
	.half	.L1457-.L83
	.byte	3,18,1,5,39,9
	.half	.L1458-.L1457
	.byte	1,5,21,9
	.half	.L79-.L1458
	.byte	3,249,3,1,5,68,9
	.half	.L1005-.L79
	.byte	1,5,3,9
	.half	.L1459-.L1005
	.byte	3,5,1,5,9,9
	.half	.L88-.L1459
	.byte	3,185,94,1,5,34,7,9
	.half	.L660-.L88
	.byte	3,4,1,5,61,9
	.half	.L1460-.L660
	.byte	1,5,10,9
	.half	.L663-.L1460
	.byte	3,229,29,1,5,8,9
	.half	.L1007-.L663
	.byte	3,2,1,5,39,9
	.half	.L999-.L1007
	.byte	3,6,1,5,7,9
	.half	.L1006-.L999
	.byte	1,5,18,7,9
	.half	.L1461-.L1006
	.byte	3,1,1,5,32,9
	.half	.L1011-.L1461
	.byte	1,5,62,9
	.half	.L1012-.L1011
	.byte	1,5,16,7,9
	.half	.L90-.L1012
	.byte	3,2,1,5,31,9
	.half	.L1013-.L90
	.byte	1,5,16,9
	.half	.L91-.L1013
	.byte	3,4,1,9
	.half	.L92-.L91
	.byte	3,3,1,5,9,9
	.half	.L93-.L92
	.byte	3,3,1,5,5,9
	.half	.L1462-.L93
	.byte	1,5,12,7,9
	.half	.L1463-.L1462
	.byte	3,2,1,5,20,9
	.half	.L1014-.L1463
	.byte	3,3,1,5,14,9
	.half	.L1464-.L1014
	.byte	3,125,1,5,33,9
	.half	.L94-.L1464
	.byte	3,10,1,5,25,9
	.half	.L1465-.L94
	.byte	3,1,1,9
	.half	.L1466-.L1465
	.byte	3,1,1,5,15,9
	.half	.L1008-.L1466
	.byte	3,3,1,5,11,9
	.half	.L95-.L1008
	.byte	3,2,1,5,37,7,9
	.half	.L1467-.L95
	.byte	1,5,3,7,9
	.half	.L96-.L1467
	.byte	3,2,1,5,11,9
	.half	.L97-.L96
	.byte	3,241,97,1,5,31,7,9
	.half	.L1468-.L97
	.byte	3,3,1,5,20,9
	.half	.L1015-.L1468
	.byte	3,1,1,5,41,9
	.half	.L1469-.L1015
	.byte	3,127,1,5,33,9
	.half	.L98-.L1469
	.byte	3,8,1,5,40,9
	.half	.L1470-.L98
	.byte	1,5,33,9
	.half	.L1471-.L1470
	.byte	3,3,1,5,10,9
	.half	.L675-.L1471
	.byte	3,180,31,1,5,14,9
	.half	.L1016-.L675
	.byte	3,1,1,5,27,9
	.half	.L1472-.L1016
	.byte	1,5,16,9
	.half	.L1017-.L1472
	.byte	3,2,1,5,57,9
	.half	.L1473-.L1017
	.byte	1,5,7,9
	.half	.L1474-.L1473
	.byte	1,5,18,7,9
	.half	.L1475-.L1474
	.byte	3,1,1,5,36,9
	.half	.L1476-.L1475
	.byte	1,5,66,9
	.half	.L1477-.L1476
	.byte	1,5,12,7,9
	.half	.L100-.L1477
	.byte	3,2,1,5,3,9
	.half	.L101-.L100
	.byte	3,3,1,5,34,9
	.half	.L102-.L101
	.byte	3,199,96,1,5,59,9
	.half	.L1478-.L102
	.byte	1,5,32,9
	.half	.L679-.L1478
	.byte	3,3,1,5,21,9
	.half	.L682-.L679
	.byte	3,243,31,1,5,52,9
	.half	.L1479-.L682
	.byte	3,1,1,5,68,9
	.half	.L1018-.L1479
	.byte	3,127,1,5,2,9
	.half	.L1480-.L1018
	.byte	3,7,1,5,13,9
	.half	.L103-.L1480
	.byte	3,144,96,1,5,40,7,9
	.half	.L683-.L103
	.byte	3,3,1,5,33,9
	.half	.L1481-.L683
	.byte	3,2,1,5,22,9
	.half	.L1482-.L1481
	.byte	3,1,1,5,42,9
	.half	.L1483-.L1482
	.byte	3,125,1,5,30,9
	.half	.L104-.L1483
	.byte	3,6,1,5,18,9
	.half	.L1019-.L104
	.byte	1,5,33,7,9
	.half	.L1484-.L1019
	.byte	3,4,1,5,22,9
	.half	.L1485-.L1484
	.byte	3,1,1,5,43,9
	.half	.L1486-.L1485
	.byte	3,127,1,5,9,9
	.half	.L89-.L1486
	.byte	3,80,1,5,16,9
	.half	.L78-.L89
	.byte	3,60,1,5,3,9
	.half	.L64-.L78
	.byte	3,4,1,5,1,9
	.half	.L109-.L64
	.byte	3,1,1,7,9
	.half	.L448-.L109
	.byte	0,1,1
.L1364:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_ranges'
.L447:
	.word	-1,.L385,0,.L448-.L385,0,0
.L677:
	.word	-1,.L385,.L675-.L385,.L102-.L385,.L678-.L385,.L679-.L385,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_info'
.L449:
	.word	466
	.half	3
	.word	.L450
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L452,.L451
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Compare',0,1,250,6,16
	.word	.L577
	.byte	1,1,1
	.word	.L387,.L685,.L386
	.byte	4
	.byte	'SourceAddress',0,1,250,6,52
	.word	.L566,.L686
	.byte	4
	.byte	'TargetAddressPtr',0,1,251,6,42
	.word	.L604,.L687
	.byte	4
	.byte	'Length',0,1,252,6,44
	.word	.L566,.L688
	.byte	5
	.word	.L387,.L685
	.byte	6
	.byte	'StatePtr',0,1,255,6,27
	.word	.L564,.L689
	.byte	6
	.byte	'PhysicalAddress',0,1,128,7,19
	.word	.L690,.L691
	.byte	6
	.byte	'JobType',0,1,129,7,19
	.word	.L584,.L692
	.byte	6
	.byte	'ReturnValue',0,1,130,7,19
	.word	.L577,.L693
	.byte	7
	.word	.L694,.L120,.L695
	.byte	8
	.word	.L696,.L697
	.byte	9
	.word	.L698,.L120,.L695
	.byte	6
	.byte	'ErrorFlag',0,1,253,32,9
	.word	.L577,.L699
	.byte	6
	.byte	'ArrPtr',0,1,254,32,16
	.word	.L604,.L700
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_abbrev'
.L450:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_line'
.L451:
	.word	.L1488-.L1487
.L1487:
	.half	3
	.word	.L1490-.L1489
.L1489:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1490:
	.byte	5,16,7,0,5,2
	.word	.L387
	.byte	3,249,6,1,5,21,9
	.half	.L1026-.L387
	.byte	3,15,1,5,3,9
	.half	.L1022-.L1026
	.byte	1,5,17,7,9
	.half	.L1491-.L1022
	.byte	3,2,1,5,27,9
	.half	.L1027-.L1491
	.byte	1,5,29,9
	.half	.L110-.L1027
	.byte	3,6,1,5,8,9
	.half	.L1492-.L110
	.byte	1,5,30,7,9
	.half	.L1493-.L1492
	.byte	3,2,1,5,52,9
	.half	.L1494-.L1493
	.byte	1,5,22,9
	.half	.L1495-.L1494
	.byte	3,1,1,9
	.half	.L1496-.L1495
	.byte	3,1,1,5,17,9
	.half	.L1497-.L1496
	.byte	3,3,1,5,21,9
	.half	.L1028-.L1497
	.byte	3,126,1,5,8,9
	.half	.L112-.L1028
	.byte	3,8,1,5,30,7,9
	.half	.L1498-.L112
	.byte	3,2,1,5,52,9
	.half	.L1499-.L1498
	.byte	1,5,20,9
	.half	.L1500-.L1499
	.byte	3,1,1,9
	.half	.L1501-.L1500
	.byte	3,1,1,5,17,9
	.half	.L1502-.L1501
	.byte	3,3,1,5,19,9
	.half	.L1029-.L1502
	.byte	3,126,1,5,11,9
	.half	.L114-.L1029
	.byte	3,7,1,5,45,7,9
	.half	.L1503-.L114
	.byte	1,5,55,9
	.half	.L1504-.L1503
	.byte	1,5,30,7,9
	.half	.L116-.L1504
	.byte	3,2,1,5,52,9
	.half	.L1505-.L116
	.byte	1,5,22,9
	.half	.L1506-.L1505
	.byte	3,1,1,9
	.half	.L1507-.L1506
	.byte	3,1,1,5,17,9
	.half	.L1508-.L1507
	.byte	3,3,1,5,21,9
	.half	.L1030-.L1508
	.byte	3,126,1,5,16,9
	.half	.L117-.L1030
	.byte	3,10,1,5,29,9
	.half	.L1509-.L117
	.byte	1,5,18,9
	.half	.L1031-.L1509
	.byte	3,1,1,5,16,9
	.half	.L1032-.L1031
	.byte	1,5,18,9
	.half	.L1510-.L1032
	.byte	3,1,1,5,16,9
	.half	.L1511-.L1510
	.byte	1,5,17,9
	.half	.L1512-.L1511
	.byte	3,1,1,5,34,9
	.half	.L1033-.L1512
	.byte	3,7,1,5,51,9
	.half	.L1513-.L1033
	.byte	1,5,36,9
	.half	.L1514-.L1513
	.byte	3,124,1,5,5,9
	.half	.L1515-.L1514
	.byte	1,5,20,7,9
	.half	.L1516-.L1515
	.byte	3,3,1,5,18,9
	.half	.L1517-.L1516
	.byte	1,5,23,9
	.half	.L1518-.L1517
	.byte	3,1,1,5,31,9
	.half	.L1519-.L1518
	.byte	3,127,1,5,10,9
	.half	.L119-.L1519
	.byte	3,4,1,5,20,7,9
	.half	.L1520-.L119
	.byte	3,3,1,5,18,9
	.half	.L1521-.L1520
	.byte	1,5,23,9
	.half	.L1522-.L1521
	.byte	3,1,1,5,31,9
	.half	.L1523-.L1522
	.byte	3,127,1,5,20,9
	.half	.L121-.L1523
	.byte	3,9,1,5,18,9
	.half	.L1524-.L121
	.byte	1,5,20,9
	.half	.L1525-.L1524
	.byte	3,1,1,5,18,9
	.half	.L1526-.L1525
	.byte	1,5,23,9
	.half	.L1527-.L1526
	.byte	3,1,1,5,20,9
	.half	.L120-.L1527
	.byte	3,171,25,1,5,13,9
	.half	.L1034-.L120
	.byte	3,1,1,9
	.half	.L1036-.L1034
	.byte	3,9,1,5,6,9
	.half	.L1528-.L1036
	.byte	1,5,40,7,9
	.half	.L1529-.L1528
	.byte	1,5,44,9
	.half	.L1530-.L1529
	.byte	1,5,30,7,9
	.half	.L123-.L1530
	.byte	3,2,1,5,22,9
	.half	.L1531-.L123
	.byte	3,1,1,9
	.half	.L1532-.L1531
	.byte	3,1,1,9
	.half	.L1533-.L1532
	.byte	3,1,1,5,15,9
	.half	.L1035-.L1533
	.byte	3,1,1,5,3,9
	.half	.L124-.L1035
	.byte	3,3,1,5,5,9
	.half	.L125-.L124
	.byte	3,203,102,1,5,19,7,9
	.half	.L695-.L125
	.byte	3,2,1,5,29,9
	.half	.L1534-.L695
	.byte	1,5,32,9
	.half	.L126-.L1534
	.byte	3,7,1,5,30,9
	.half	.L1535-.L126
	.byte	1,5,34,9
	.half	.L1536-.L1535
	.byte	3,7,1,5,31,9
	.half	.L1537-.L1536
	.byte	3,3,1,5,34,9
	.half	.L1538-.L1537
	.byte	3,2,1,5,32,9
	.half	.L1539-.L1538
	.byte	1,5,27,9
	.half	.L1540-.L1539
	.byte	3,6,1,5,41,9
	.half	.L1541-.L1540
	.byte	1,5,31,9
	.half	.L1037-.L1541
	.byte	1,5,27,9
	.half	.L1542-.L1037
	.byte	3,1,1,5,41,9
	.half	.L1543-.L1542
	.byte	1,5,31,9
	.half	.L1544-.L1543
	.byte	1,5,3,9
	.half	.L111-.L1544
	.byte	3,3,1,5,1,9
	.half	.L128-.L111
	.byte	3,1,1,7,9
	.half	.L453-.L128
	.byte	0,1,1
.L1488:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_ranges'
.L452:
	.word	-1,.L387,0,.L453-.L387,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_info'
.L454:
	.word	274
	.half	3
	.word	.L455
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L457,.L456
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Cancel',0,1,157,8,6,1,1,1
	.word	.L389,.L701,.L388
	.byte	4
	.word	.L389,.L701
	.byte	5
	.byte	'StatePtr',0,1,159,8,26
	.word	.L564,.L702
	.byte	5
	.byte	'ArrPtr',0,1,160,8,10
	.word	.L703,.L704
	.byte	5
	.byte	'JobCanceled',0,1,161,8,11
	.word	.L577,.L705
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_abbrev'
.L455:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_line'
.L456:
	.word	.L1546-.L1545
.L1545:
	.half	3
	.word	.L1548-.L1547
.L1547:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1548:
	.byte	5,22,7,0,5,2
	.word	.L389
	.byte	3,164,8,1,5,3,9
	.half	.L1549-.L389
	.byte	1,5,16,7,9
	.half	.L1550-.L1549
	.byte	3,3,1,5,29,9
	.half	.L1551-.L1550
	.byte	1,5,22,9
	.half	.L1039-.L1551
	.byte	3,1,1,5,17,9
	.half	.L1040-.L1039
	.byte	3,1,1,5,28,9
	.half	.L1042-.L1040
	.byte	3,9,1,5,8,9
	.half	.L1552-.L1042
	.byte	1,5,57,7,9
	.half	.L1553-.L1552
	.byte	1,5,48,9
	.half	.L1554-.L1553
	.byte	1,5,20,7,9
	.half	.L130-.L1554
	.byte	3,7,1,5,18,9
	.half	.L1555-.L130
	.byte	1,5,20,9
	.half	.L1556-.L1555
	.byte	3,4,1,5,18,9
	.half	.L1557-.L1556
	.byte	1,5,29,9
	.half	.L1558-.L1557
	.byte	3,3,1,5,32,9
	.half	.L1041-.L1558
	.byte	3,3,1,5,30,9
	.half	.L1559-.L1041
	.byte	1,5,19,9
	.half	.L1560-.L1559
	.byte	3,2,1,5,28,9
	.half	.L1043-.L1560
	.byte	3,116,1,5,13,9
	.half	.L131-.L1043
	.byte	3,21,1,5,53,7,9
	.half	.L1561-.L131
	.byte	1,5,20,7,9
	.half	.L133-.L1561
	.byte	3,7,1,5,18,9
	.half	.L1562-.L133
	.byte	1,5,20,9
	.half	.L1563-.L1562
	.byte	3,4,1,5,18,9
	.half	.L1564-.L1563
	.byte	1,5,29,9
	.half	.L1565-.L1564
	.byte	3,3,1,5,32,9
	.half	.L1044-.L1565
	.byte	3,3,1,5,30,9
	.half	.L1566-.L1044
	.byte	1,5,19,9
	.half	.L1567-.L1566
	.byte	3,2,1,5,28,9
	.half	.L1045-.L1567
	.byte	3,116,1,5,13,9
	.half	.L134-.L1045
	.byte	3,26,1,5,54,7,9
	.half	.L1568-.L134
	.byte	1,5,26,7,9
	.half	.L1569-.L1568
	.byte	3,1,1,5,57,7,9
	.half	.L1570-.L1569
	.byte	1,5,20,7,9
	.half	.L136-.L1570
	.byte	3,7,1,5,18,9
	.half	.L1571-.L136
	.byte	1,5,20,9
	.half	.L1572-.L1571
	.byte	3,4,1,5,18,9
	.half	.L1573-.L1572
	.byte	1,5,32,9
	.half	.L1574-.L1573
	.byte	3,2,1,5,30,9
	.half	.L1575-.L1574
	.byte	1,5,19,9
	.half	.L1576-.L1575
	.byte	3,2,1,5,28,9
	.half	.L1577-.L1576
	.byte	3,120,1,5,20,9
	.half	.L139-.L1577
	.byte	3,16,1,5,18,9
	.half	.L1578-.L139
	.byte	1,5,20,9
	.half	.L1579-.L1578
	.byte	3,4,1,5,18,9
	.half	.L1580-.L1579
	.byte	1,5,25,9
	.half	.L132-.L1580
	.byte	3,4,1,5,32,9
	.half	.L1581-.L132
	.byte	1,5,25,9
	.half	.L1582-.L1581
	.byte	3,1,1,5,32,9
	.half	.L1583-.L1582
	.byte	1,5,29,9
	.half	.L1584-.L1583
	.byte	3,2,1,5,27,9
	.half	.L1585-.L1584
	.byte	1,5,8,9
	.half	.L1586-.L1585
	.byte	3,2,1,5,9,7,9
	.half	.L1587-.L1586
	.byte	3,1,1,5,22,9
	.half	.L1588-.L1587
	.byte	1,5,51,9
	.half	.L1589-.L1588
	.byte	1,5,50,7,9
	.half	.L1590-.L1589
	.byte	3,4,1,5,29,9
	.half	.L141-.L1590
	.byte	3,3,1,5,27,9
	.half	.L1591-.L141
	.byte	1,5,1,9
	.half	.L129-.L1591
	.byte	3,2,1,7,9
	.half	.L458-.L129
	.byte	0,1,1
.L1546:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_ranges'
.L457:
	.word	-1,.L389,0,.L458-.L389,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_info'
.L459:
	.word	286
	.half	3
	.word	.L460
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L462,.L461
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_CancelNonEraseJobs',0,1,187,9,6,1,1,1
	.word	.L391,.L706,.L390
	.byte	4
	.word	.L391,.L706
	.byte	5
	.byte	'StatePtr',0,1,189,9,26
	.word	.L564,.L707
	.byte	5
	.byte	'ArrPtr',0,1,190,9,10
	.word	.L703,.L708
	.byte	5
	.byte	'JobCanceled',0,1,191,9,11
	.word	.L577,.L709
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_abbrev'
.L460:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_line'
.L461:
	.word	.L1593-.L1592
.L1592:
	.half	3
	.word	.L1595-.L1594
.L1594:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1595:
	.byte	5,14,7,0,5,2
	.word	.L391
	.byte	3,192,9,1,5,27,9
	.half	.L1596-.L391
	.byte	1,5,20,9
	.half	.L1046-.L1596
	.byte	3,1,1,5,15,9
	.half	.L1047-.L1046
	.byte	3,1,1,5,26,9
	.half	.L1049-.L1047
	.byte	3,11,1,5,6,9
	.half	.L1597-.L1049
	.byte	1,5,55,7,9
	.half	.L1598-.L1597
	.byte	1,5,46,9
	.half	.L1599-.L1598
	.byte	1,5,18,7,9
	.half	.L143-.L1599
	.byte	3,5,1,5,16,9
	.half	.L1600-.L143
	.byte	1,5,18,9
	.half	.L1601-.L1600
	.byte	3,4,1,5,16,9
	.half	.L1602-.L1601
	.byte	1,5,27,9
	.half	.L1603-.L1602
	.byte	3,2,1,5,30,9
	.half	.L1048-.L1603
	.byte	3,3,1,5,28,9
	.half	.L1604-.L1048
	.byte	1,5,17,9
	.half	.L1605-.L1604
	.byte	3,2,1,5,25,9
	.half	.L1050-.L1605
	.byte	3,3,1,5,32,9
	.half	.L1606-.L1050
	.byte	1,5,26,9
	.half	.L1607-.L1606
	.byte	3,114,1,5,11,9
	.half	.L144-.L1607
	.byte	3,30,1,5,52,7,9
	.half	.L1608-.L144
	.byte	1,5,24,7,9
	.half	.L1609-.L1608
	.byte	3,1,1,5,55,7,9
	.half	.L1610-.L1609
	.byte	1,5,18,7,9
	.half	.L146-.L1610
	.byte	3,6,1,5,16,9
	.half	.L1611-.L146
	.byte	1,5,18,9
	.half	.L1612-.L1611
	.byte	3,4,1,5,16,9
	.half	.L1613-.L1612
	.byte	1,5,30,9
	.half	.L1614-.L1613
	.byte	3,2,1,5,28,9
	.half	.L1615-.L1614
	.byte	1,5,17,9
	.half	.L1616-.L1615
	.byte	3,2,1,5,26,9
	.half	.L1617-.L1616
	.byte	3,120,1,5,18,9
	.half	.L149-.L1617
	.byte	3,19,1,5,43,9
	.half	.L1618-.L149
	.byte	1,5,55,9
	.half	.L1619-.L1618
	.byte	1,5,43,9
	.half	.L151-.L1619
	.byte	1,5,15,9
	.half	.L152-.L151
	.byte	1,5,25,9
	.half	.L1620-.L152
	.byte	3,7,1,5,18,9
	.half	.L1621-.L1620
	.byte	1,5,43,9
	.half	.L1622-.L1621
	.byte	1,5,55,9
	.half	.L1623-.L1622
	.byte	1,5,43,9
	.half	.L153-.L1623
	.byte	1,5,15,9
	.half	.L154-.L153
	.byte	1,5,3,9
	.half	.L145-.L154
	.byte	3,4,1,5,16,9
	.half	.L1051-.L145
	.byte	1,5,48,9
	.half	.L1624-.L1051
	.byte	1,5,46,9
	.half	.L1625-.L1624
	.byte	1,5,6,9
	.half	.L1626-.L1625
	.byte	3,2,1,5,20,7,9
	.half	.L1627-.L1626
	.byte	3,1,1,5,49,9
	.half	.L1628-.L1627
	.byte	1,5,48,7,9
	.half	.L1629-.L1628
	.byte	3,4,1,5,3,9
	.half	.L155-.L1629
	.byte	3,2,1,5,16,9
	.half	.L1630-.L155
	.byte	1,5,48,9
	.half	.L1631-.L1630
	.byte	1,5,46,9
	.half	.L1632-.L1631
	.byte	1,5,1,9
	.half	.L1633-.L1632
	.byte	3,2,1,7,9
	.half	.L463-.L1633
	.byte	0,1,1
.L1593:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_ranges'
.L462:
	.word	-1,.L391,0,.L463-.L391,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_info'
.L464:
	.word	263
	.half	3
	.word	.L465
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L467,.L466
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_GetStatus',0,1,172,13,18
	.word	.L710
	.byte	1,1,1
	.word	.L399,.L711,.L398
	.byte	4
	.word	.L399,.L711
	.byte	5
	.byte	'ReturnValue',0,1,174,13,20
	.word	.L710,.L712
	.byte	5
	.byte	'JobTypePtr',0,1,175,13,10
	.word	.L703,.L713
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_abbrev'
.L465:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_line'
.L466:
	.word	.L1635-.L1634
.L1634:
	.half	3
	.word	.L1637-.L1636
.L1636:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1637:
	.byte	5,6,7,0,5,2
	.word	.L399
	.byte	3,177,13,1,5,3,9
	.half	.L1638-.L399
	.byte	1,5,17,7,9
	.half	.L1639-.L1638
	.byte	3,5,1,5,31,9
	.half	.L1087-.L1639
	.byte	1,9
	.half	.L208-.L1087
	.byte	3,4,1,5,47,9
	.half	.L1640-.L208
	.byte	1,5,19,9
	.half	.L1088-.L1640
	.byte	3,8,1,5,8,9
	.half	.L1641-.L1088
	.byte	1,5,19,7,9
	.half	.L1642-.L1641
	.byte	3,1,1,5,23,9
	.half	.L1643-.L1642
	.byte	1,5,19,7,9
	.half	.L210-.L1643
	.byte	3,3,1,5,31,9
	.half	.L1089-.L210
	.byte	1,5,19,9
	.half	.L211-.L1089
	.byte	3,4,1,5,3,9
	.half	.L209-.L211
	.byte	3,4,1,5,1,9
	.half	.L213-.L209
	.byte	3,1,1,7,9
	.half	.L468-.L213
	.byte	0,1,1
.L1635:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_ranges'
.L467:
	.word	-1,.L399,0,.L468-.L399,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_info'
.L469:
	.word	288
	.half	3
	.word	.L470
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L472,.L471
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_GetBankStatus',0,1,233,13,18
	.word	.L710
	.byte	1,1,1
	.word	.L401,.L714,.L400
	.byte	4
	.byte	'BankNum',0,1,233,13,50
	.word	.L566,.L715
	.byte	5
	.word	.L401,.L714
	.byte	6
	.byte	'ReturnValue',0,1,235,13,20
	.word	.L710,.L716
	.byte	6
	.byte	'JobTypePtr',0,1,236,13,10
	.word	.L703,.L717
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_abbrev'
.L470:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_line'
.L471:
	.word	.L1645-.L1644
.L1644:
	.half	3
	.word	.L1647-.L1646
.L1646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1647:
	.byte	5,6,7,0,5,2
	.word	.L401
	.byte	3,238,13,1,5,3,9
	.half	.L1648-.L401
	.byte	1,5,17,7,9
	.half	.L1649-.L1648
	.byte	3,5,1,5,31,9
	.half	.L1090-.L1649
	.byte	1,9
	.half	.L214-.L1090
	.byte	3,4,1,5,47,9
	.half	.L1650-.L214
	.byte	1,5,18,9
	.half	.L1091-.L1650
	.byte	3,5,1,5,19,9
	.half	.L1651-.L1091
	.byte	3,2,1,5,31,9
	.half	.L1652-.L1651
	.byte	1,5,19,9
	.half	.L216-.L1652
	.byte	3,4,1,5,3,9
	.half	.L215-.L216
	.byte	3,4,1,5,1,9
	.half	.L218-.L215
	.byte	3,1,1,7,9
	.half	.L473-.L218
	.byte	0,1,1
.L1645:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_ranges'
.L472:
	.word	-1,.L401,0,.L473-.L401,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_info'
.L474:
	.word	259
	.half	3
	.word	.L475
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L477,.L476
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_GetJobResult',0,1,164,14,21
	.word	.L718
	.byte	1,1,1
	.word	.L403,.L719,.L402
	.byte	4
	.word	.L403,.L719
	.byte	5
	.byte	'StatePtr',0,1,166,14,26
	.word	.L564,.L720
	.byte	5
	.byte	'RetVal',0,1,167,14,23
	.word	.L718,.L721
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_abbrev'
.L475:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_line'
.L476:
	.word	.L1654-.L1653
.L1653:
	.half	3
	.word	.L1656-.L1655
.L1655:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1656:
	.byte	5,22,7,0,5,2
	.word	.L403
	.byte	3,170,14,1,5,3,9
	.half	.L1657-.L403
	.byte	1,5,13,7,9
	.half	.L1658-.L1657
	.byte	3,2,1,5,31,9
	.half	.L1094-.L1658
	.byte	1,5,16,9
	.half	.L219-.L1094
	.byte	3,5,1,5,29,9
	.half	.L1659-.L219
	.byte	1,5,22,9
	.half	.L1095-.L1659
	.byte	3,1,1,5,3,9
	.half	.L220-.L1095
	.byte	3,3,1,5,1,9
	.half	.L221-.L220
	.byte	3,1,1,7,9
	.half	.L478-.L221
	.byte	0,1,1
.L1654:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_ranges'
.L477:
	.word	-1,.L403,0,.L478-.L403,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_info'
.L479:
	.word	534
	.half	3
	.word	.L480
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L482,.L481
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_MainFunction',0,1,249,10,6,1,1,1
	.word	.L395,.L722,.L394
	.byte	4
	.word	.L395,.L722
	.byte	5
	.byte	'StatePtr',0,1,251,10,26
	.word	.L564,.L723
	.byte	5
	.byte	'ArrPtr',0,1,252,10,10
	.word	.L703,.L724
	.byte	5
	.byte	'FlashFsrStatus',0,1,254,10,10
	.word	.L566,.L725
	.byte	5
	.byte	'ErrorUninitFlag',0,1,129,11,9
	.word	.L577,.L726
	.byte	5
	.byte	'ErrorTimeoutFlag',0,1,130,11,9
	.word	.L577,.L727
	.byte	6
	.word	.L611,.L728,.L729
	.byte	7
	.word	.L613,.L728,.L729
	.byte	5
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L730
	.byte	0,0,6
	.word	.L611,.L165,.L731
	.byte	7
	.word	.L613,.L165,.L731
	.byte	5
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L732
	.byte	0,0,6
	.word	.L611,.L172,.L733
	.byte	7
	.word	.L613,.L172,.L733
	.byte	5
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L734
	.byte	0,0,6
	.word	.L611,.L178,.L735
	.byte	7
	.word	.L613,.L178,.L735
	.byte	5
	.byte	'RetVal',0,1,206,39,10
	.word	.L566,.L736
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_abbrev'
.L480:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_line'
.L481:
	.word	.L1661-.L1660
.L1660:
	.half	3
	.word	.L1663-.L1662
.L1662:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1663:
	.byte	5,36,7,0,5,2
	.word	.L395
	.byte	3,132,11,1,5,3,9
	.half	.L1055-.L395
	.byte	3,1,1,5,40,7,9
	.half	.L1664-.L1055
	.byte	3,2,1,5,5,9
	.half	.L1056-.L1664
	.byte	3,1,1,5,18,7,9
	.half	.L1665-.L1056
	.byte	3,3,1,5,31,9
	.half	.L1666-.L1665
	.byte	1,5,24,9
	.half	.L1058-.L1666
	.byte	3,1,1,5,18,9
	.half	.L1059-.L1058
	.byte	3,8,1,5,11,9
	.half	.L1667-.L1059
	.byte	1,5,18,7,9
	.half	.L1668-.L1667
	.byte	3,1,1,5,26,9
	.half	.L1669-.L1668
	.byte	1,5,61,7,9
	.half	.L162-.L1669
	.byte	3,6,1,5,64,9
	.half	.L1670-.L162
	.byte	1,5,21,9
	.half	.L728-.L1670
	.byte	3,188,28,1,5,68,9
	.half	.L1060-.L728
	.byte	1,5,3,9
	.half	.L1671-.L1060
	.byte	3,5,1,5,12,9
	.half	.L164-.L1671
	.byte	3,196,99,1,5,58,7,9
	.half	.L729-.L164
	.byte	1,5,20,7,9
	.half	.L1672-.L729
	.byte	3,5,1,5,11,9
	.half	.L1061-.L1672
	.byte	1,5,28,7,9
	.half	.L1673-.L1061
	.byte	3,3,1,5,41,9
	.half	.L1057-.L1673
	.byte	1,5,25,9
	.half	.L167-.L1057
	.byte	3,5,1,5,16,9
	.half	.L1674-.L167
	.byte	1,5,28,7,9
	.half	.L1675-.L1674
	.byte	3,3,1,5,41,9
	.half	.L1062-.L1675
	.byte	1,5,21,9
	.half	.L165-.L1062
	.byte	3,167,28,1,5,68,9
	.half	.L1063-.L165
	.byte	1,5,3,9
	.half	.L1676-.L1063
	.byte	3,5,1,5,9,9
	.half	.L171-.L1676
	.byte	3,219,99,1,5,20,7,9
	.half	.L731-.L171
	.byte	3,5,1,5,11,9
	.half	.L1064-.L731
	.byte	1,5,28,7,9
	.half	.L1677-.L1064
	.byte	3,3,1,5,41,9
	.half	.L1678-.L1677
	.byte	1,5,25,9
	.half	.L173-.L1678
	.byte	3,5,1,5,16,9
	.half	.L1679-.L173
	.byte	1,5,28,7,9
	.half	.L1680-.L1679
	.byte	3,3,1,5,41,9
	.half	.L1681-.L1680
	.byte	1,5,21,9
	.half	.L172-.L1681
	.byte	3,144,28,1,5,68,9
	.half	.L1065-.L172
	.byte	1,5,3,9
	.half	.L1682-.L1065
	.byte	3,5,1,5,9,9
	.half	.L177-.L1682
	.byte	3,244,99,1,5,20,7,9
	.half	.L733-.L177
	.byte	3,5,1,5,11,9
	.half	.L1066-.L733
	.byte	1,5,27,7,9
	.half	.L1683-.L1066
	.byte	3,3,1,5,40,9
	.half	.L1684-.L1683
	.byte	1,5,25,9
	.half	.L179-.L1684
	.byte	3,5,1,5,16,9
	.half	.L1685-.L179
	.byte	1,5,27,7,9
	.half	.L1686-.L1685
	.byte	3,3,1,5,40,9
	.half	.L1687-.L1686
	.byte	1,5,21,9
	.half	.L178-.L1687
	.byte	3,247,27,1,5,68,9
	.half	.L1067-.L178
	.byte	1,5,3,9
	.half	.L1688-.L1067
	.byte	3,5,1,5,9,9
	.half	.L183-.L1688
	.byte	3,139,100,1,5,20,7,9
	.half	.L735-.L183
	.byte	3,5,1,5,11,9
	.half	.L1068-.L735
	.byte	1,5,30,7,9
	.half	.L1689-.L1068
	.byte	3,3,1,5,43,9
	.half	.L1690-.L1689
	.byte	1,5,25,9
	.half	.L185-.L1690
	.byte	3,5,1,5,16,9
	.half	.L1691-.L185
	.byte	1,5,30,7,9
	.half	.L1692-.L1691
	.byte	3,3,1,5,43,9
	.half	.L1693-.L1692
	.byte	1,5,1,9
	.half	.L160-.L1693
	.byte	3,9,1,7,9
	.half	.L483-.L160
	.byte	0,1,1
.L1661:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_ranges'
.L482:
	.word	-1,.L395,0,.L483-.L395,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_info'
.L484:
	.word	246
	.half	3
	.word	.L485
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L487,.L486
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_SetMode',0,1,193,10,6,1,1,1
	.word	.L393,.L737,.L392
	.byte	4
	.byte	'Mode',0,1,193,10,40
	.word	.L738,.L739
	.byte	5
	.word	.L393,.L737
	.byte	6
	.byte	'ArrPtr',0,1,196,10,10
	.word	.L703,.L740
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_abbrev'
.L485:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_line'
.L486:
	.word	.L1695-.L1694
.L1694:
	.half	3
	.word	.L1697-.L1696
.L1696:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1697:
	.byte	5,12,7,0,5,2
	.word	.L393
	.byte	3,197,10,1,5,25,9
	.half	.L1698-.L393
	.byte	1,5,41,9
	.half	.L1699-.L1698
	.byte	1,5,14,9
	.half	.L1053-.L1699
	.byte	3,9,1,5,7,9
	.half	.L1700-.L1053
	.byte	1,5,14,7,9
	.half	.L1701-.L1700
	.byte	3,1,1,5,18,9
	.half	.L1702-.L1701
	.byte	1,5,30,7,9
	.half	.L157-.L1702
	.byte	3,3,1,9
	.half	.L1052-.L157
	.byte	3,1,1,9
	.half	.L1703-.L1052
	.byte	3,1,1,9
	.half	.L1704-.L1703
	.byte	3,1,1,5,41,9
	.half	.L1054-.L1704
	.byte	1,5,44,9
	.half	.L158-.L1054
	.byte	3,5,1,5,1,9
	.half	.L159-.L158
	.byte	3,2,1,7,9
	.half	.L488-.L159
	.byte	0,1,1
.L1695:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_ranges'
.L487:
	.word	-1,.L393,0,.L488-.L393,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_info'
.L489:
	.word	463
	.half	3
	.word	.L490
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L492,.L491
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_Read',0,1,160,12,16
	.word	.L577
	.byte	1,1,1
	.word	.L397,.L741,.L396
	.byte	4
	.byte	'SourceAddress',0,1,160,12,48
	.word	.L566,.L742
	.byte	4
	.byte	'TargetAddressPtr',0,1,161,12,39
	.word	.L703,.L743
	.byte	4
	.byte	'Length',0,1,162,12,47
	.word	.L566,.L744
	.byte	5
	.word	.L397,.L741
	.byte	6
	.byte	'StatePtr',0,1,165,12,26
	.word	.L564,.L745
	.byte	6
	.byte	'PhysicalAddress',0,1,166,12,19
	.word	.L746,.L747
	.byte	6
	.byte	'ReturnValue',0,1,167,12,18
	.word	.L577,.L748
	.byte	6
	.byte	'JobType',0,1,168,12,9
	.word	.L584,.L749
	.byte	7
	.word	.L750,.L199,.L751
	.byte	8
	.word	.L752,.L753
	.byte	9
	.word	.L754,.L199,.L751
	.byte	6
	.byte	'ErrorFlag',0,1,207,32,9
	.word	.L577,.L755
	.byte	6
	.byte	'ArrPtr',0,1,209,32,16
	.word	.L604,.L756
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_abbrev'
.L490:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_line'
.L491:
	.word	.L1706-.L1705
.L1705:
	.half	3
	.word	.L1708-.L1707
.L1707:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1708:
	.byte	5,16,7,0,5,2
	.word	.L397
	.byte	3,159,12,1,5,21,9
	.half	.L1074-.L397
	.byte	3,13,1,5,3,9
	.half	.L1070-.L1074
	.byte	1,5,17,7,9
	.half	.L1709-.L1070
	.byte	3,2,1,5,27,9
	.half	.L1075-.L1709
	.byte	1,5,29,9
	.half	.L189-.L1075
	.byte	3,3,1,5,8,9
	.half	.L1710-.L189
	.byte	1,5,30,7,9
	.half	.L1711-.L1710
	.byte	3,2,1,5,22,9
	.half	.L1712-.L1711
	.byte	3,1,1,5,45,9
	.half	.L1713-.L1712
	.byte	1,5,22,9
	.half	.L1714-.L1713
	.byte	3,1,1,5,17,9
	.half	.L1715-.L1714
	.byte	3,2,1,5,42,9
	.half	.L1076-.L1715
	.byte	3,126,1,5,8,9
	.half	.L191-.L1076
	.byte	3,5,1,5,30,7,9
	.half	.L1716-.L191
	.byte	3,2,1,5,21,9
	.half	.L1717-.L1716
	.byte	3,1,1,5,44,9
	.half	.L1718-.L1717
	.byte	1,5,22,9
	.half	.L1719-.L1718
	.byte	3,1,1,5,17,9
	.half	.L1720-.L1719
	.byte	3,2,1,5,39,9
	.half	.L1077-.L1720
	.byte	3,126,1,5,11,9
	.half	.L193-.L1077
	.byte	3,5,1,5,44,7,9
	.half	.L1721-.L193
	.byte	1,5,53,9
	.half	.L1722-.L1721
	.byte	1,5,30,7,9
	.half	.L195-.L1722
	.byte	3,2,1,5,22,9
	.half	.L1723-.L195
	.byte	3,1,1,5,46,9
	.half	.L1724-.L1723
	.byte	1,5,22,9
	.half	.L1725-.L1724
	.byte	3,1,1,5,17,9
	.half	.L1726-.L1725
	.byte	3,2,1,5,41,9
	.half	.L1078-.L1726
	.byte	3,126,1,5,16,9
	.half	.L196-.L1078
	.byte	3,9,1,5,29,9
	.half	.L1727-.L196
	.byte	1,5,17,9
	.half	.L1079-.L1727
	.byte	3,1,1,5,18,9
	.half	.L1080-.L1079
	.byte	3,2,1,5,16,9
	.half	.L1081-.L1080
	.byte	1,5,18,9
	.half	.L1728-.L1081
	.byte	3,1,1,5,16,9
	.half	.L1729-.L1728
	.byte	1,5,34,9
	.half	.L1730-.L1729
	.byte	3,7,1,5,51,9
	.half	.L1731-.L1730
	.byte	1,5,36,9
	.half	.L1732-.L1731
	.byte	3,124,1,5,5,9
	.half	.L1733-.L1732
	.byte	1,5,24,7,9
	.half	.L1734-.L1733
	.byte	3,3,1,5,22,9
	.half	.L1735-.L1734
	.byte	1,5,23,9
	.half	.L1736-.L1735
	.byte	3,1,1,5,32,9
	.half	.L1737-.L1736
	.byte	3,127,1,5,10,9
	.half	.L198-.L1737
	.byte	3,5,1,5,24,7,9
	.half	.L1738-.L198
	.byte	3,3,1,5,22,9
	.half	.L1739-.L1738
	.byte	1,5,23,9
	.half	.L1740-.L1739
	.byte	3,1,1,5,32,9
	.half	.L1741-.L1740
	.byte	3,127,1,5,24,9
	.half	.L200-.L1741
	.byte	3,9,1,5,22,9
	.half	.L1742-.L200
	.byte	1,5,24,9
	.half	.L1743-.L1742
	.byte	3,1,1,5,22,9
	.half	.L1744-.L1743
	.byte	1,5,23,9
	.half	.L1745-.L1744
	.byte	3,1,1,5,20,9
	.half	.L199-.L1745
	.byte	3,228,19,1,5,13,9
	.half	.L1082-.L199
	.byte	3,1,1,9
	.half	.L1084-.L1082
	.byte	3,9,1,5,6,9
	.half	.L1746-.L1084
	.byte	1,5,40,7,9
	.half	.L1747-.L1746
	.byte	1,5,44,9
	.half	.L1748-.L1747
	.byte	1,5,30,7,9
	.half	.L202-.L1748
	.byte	3,2,1,5,22,9
	.half	.L1749-.L202
	.byte	3,1,1,9
	.half	.L1750-.L1749
	.byte	3,1,1,9
	.half	.L1751-.L1750
	.byte	3,1,1,5,15,9
	.half	.L1083-.L1751
	.byte	3,1,1,5,3,9
	.half	.L203-.L1083
	.byte	3,3,1,5,5,9
	.half	.L204-.L203
	.byte	3,145,108,1,5,19,7,9
	.half	.L751-.L204
	.byte	3,2,1,5,29,9
	.half	.L1752-.L751
	.byte	1,5,32,9
	.half	.L205-.L1752
	.byte	3,7,1,5,30,9
	.half	.L1753-.L205
	.byte	1,5,34,9
	.half	.L1754-.L1753
	.byte	3,3,1,5,31,9
	.half	.L1755-.L1754
	.byte	3,3,1,5,34,9
	.half	.L1756-.L1755
	.byte	3,2,1,5,32,9
	.half	.L1757-.L1756
	.byte	1,5,27,9
	.half	.L1758-.L1757
	.byte	3,6,1,5,41,9
	.half	.L1759-.L1758
	.byte	1,5,31,9
	.half	.L1085-.L1759
	.byte	1,5,27,9
	.half	.L1760-.L1085
	.byte	3,1,1,5,41,9
	.half	.L1761-.L1760
	.byte	1,5,31,9
	.half	.L1762-.L1761
	.byte	1,5,3,9
	.half	.L190-.L1762
	.byte	3,3,1,5,1,9
	.half	.L207-.L190
	.byte	3,1,1,7,9
	.half	.L493-.L207
	.byte	0,1,1
.L1706:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_ranges'
.L492:
	.word	-1,.L397,0,.L493-.L397,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_info'
.L494:
	.word	285
	.half	3
	.word	.L495
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L497,.L496
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_GetOperStatus',0,1,170,21,16
	.word	.L577
	.byte	1,1,1
	.word	.L405,.L757,.L404
	.byte	4
	.word	.L405,.L757
	.byte	5
	.byte	'StatePtr',0,1,172,21,27
	.word	.L564,.L758
	.byte	5
	.byte	'OPER_Status',0,1,173,21,10
	.word	.L566,.L759
	.byte	5
	.byte	'RetVal',0,1,174,21,18
	.word	.L577,.L760
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_abbrev'
.L495:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_line'
.L496:
	.word	.L1764-.L1763
.L1763:
	.half	3
	.word	.L1766-.L1765
.L1765:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1766:
	.byte	5,10,7,0,5,2
	.word	.L405
	.byte	3,175,21,1,5,14,9
	.half	.L1096-.L405
	.byte	3,1,1,5,27,9
	.half	.L1767-.L1096
	.byte	1,5,26,9
	.half	.L1097-.L1767
	.byte	3,7,1,5,61,9
	.half	.L1768-.L1097
	.byte	3,1,1,5,73,9
	.half	.L1098-.L1768
	.byte	3,127,1,5,6,9
	.half	.L1769-.L1098
	.byte	3,7,1,5,44,7,9
	.half	.L1770-.L1769
	.byte	1,5,33,9
	.half	.L1099-.L1770
	.byte	1,5,12,7,9
	.half	.L222-.L1099
	.byte	3,2,1,5,3,9
	.half	.L223-.L222
	.byte	3,3,1,5,1,9
	.half	.L224-.L223
	.byte	3,1,1,7,9
	.half	.L498-.L224
	.byte	0,1,1
.L1764:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_ranges'
.L497:
	.word	-1,.L405,0,.L498-.L405,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_info'
.L499:
	.word	259
	.half	3
	.word	.L500
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L502,.L501
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_17_Pmu_ControlTimeoutDet',0,1,220,21,6,1,1,1
	.word	.L407,.L761,.L406
	.byte	4
	.byte	'Param',0,1,220,21,41
	.word	.L577,.L762
	.byte	5
	.word	.L407,.L761
	.byte	6
	.byte	'StatePtr',0,1,225,21,27
	.word	.L564,.L763
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_abbrev'
.L500:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_line'
.L501:
	.word	.L1772-.L1771
.L1771:
	.half	3
	.word	.L1774-.L1773
.L1773:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1774:
	.byte	5,14,7,0,5,2
	.word	.L407
	.byte	3,226,21,1,5,27,9
	.half	.L1775-.L407
	.byte	1,5,31,9
	.half	.L1100-.L1775
	.byte	3,2,1,5,1,9
	.half	.L1776-.L1100
	.byte	3,8,1,7,9
	.half	.L503-.L1776
	.byte	0,1,1
.L1772:
	.sdecl	'.debug_ranges',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_ranges'
.L502:
	.word	-1,.L407,0,.L503-.L407,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainErase')
	.sect	'.debug_info'
.L504:
	.word	434
	.half	3
	.word	.L505
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L507,.L506
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainErase',0,1,139,22,13,1,1
	.word	.L409,.L764,.L408
	.byte	4
	.byte	'BankType',0,1,139,22,34
	.word	.L577,.L765
	.byte	5
	.word	.L409,.L764
	.byte	6
	.byte	'StatePtr',0,1,141,22,31
	.word	.L564,.L766
	.byte	6
	.byte	'LastJobResult',0,1,142,22,23
	.word	.L718,.L767
	.byte	6
	.byte	'PhysicalAddress',0,1,143,22,23
	.word	.L768,.L769
	.byte	6
	.byte	'RetVal',0,1,144,22,23
	.word	.L577,.L770
	.byte	6
	.byte	'ErasePtr',0,1,148,22,24
	.word	.L627,.L771
	.byte	6
	.byte	'Count',0,1,149,22,10
	.word	.L566,.L772
	.byte	7
	.word	.L606,.L227,.L773
	.byte	8
	.word	.L608,.L227,.L773
	.byte	6
	.byte	'StatePtr',0,1,192,38,27
	.word	.L564,.L774
	.byte	6
	.byte	'RetVal',0,1,193,38,10
	.word	.L566,.L775
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainErase')
	.sect	'.debug_abbrev'
.L505:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainErase')
	.sect	'.debug_line'
.L506:
	.word	.L1778-.L1777
.L1777:
	.half	3
	.word	.L1780-.L1779
.L1779:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1780:
	.byte	5,13,7,0,5,2
	.word	.L409
	.byte	3,138,22,1,5,10,9
	.half	.L1103-.L409
	.byte	3,15,1,5,14,9
	.half	.L1104-.L1103
	.byte	3,1,1,5,27,9
	.half	.L1781-.L1104
	.byte	1,9
	.half	.L1105-.L1781
	.byte	3,2,1,5,3,9
	.half	.L1106-.L1105
	.byte	3,3,1,5,23,7,9
	.half	.L1782-.L1106
	.byte	3,2,1,5,21,9
	.half	.L1783-.L1782
	.byte	1,5,44,9
	.half	.L1784-.L1783
	.byte	1,5,23,9
	.half	.L225-.L1784
	.byte	3,4,1,5,21,9
	.half	.L1785-.L225
	.byte	1,5,26,9
	.half	.L226-.L1785
	.byte	3,3,1,5,3,9
	.half	.L1786-.L226
	.byte	1,5,28,7,9
	.half	.L1787-.L1786
	.byte	3,3,1,5,14,9
	.half	.L227-.L1787
	.byte	3,151,16,1,5,27,9
	.half	.L1788-.L227
	.byte	1,5,57,9
	.half	.L1108-.L1788
	.byte	3,8,1,5,21,9
	.half	.L1789-.L1108
	.byte	3,127,1,5,68,9
	.half	.L1790-.L1789
	.byte	1,5,3,9
	.half	.L1110-.L1790
	.byte	3,7,1,5,25,7,9
	.half	.L1791-.L1110
	.byte	3,2,1,5,23,9
	.half	.L1792-.L1791
	.byte	1,5,14,9
	.half	.L229-.L1792
	.byte	3,3,1,5,3,9
	.half	.L1793-.L229
	.byte	1,5,12,7,9
	.half	.L1794-.L1793
	.byte	3,2,1,5,8,9
	.half	.L1795-.L1794
	.byte	3,1,1,5,21,9
	.half	.L1109-.L1795
	.byte	1,5,5,9
	.half	.L1796-.L1109
	.byte	1,5,55,7,9
	.half	.L1797-.L1796
	.byte	3,3,1,5,3,9
	.half	.L230-.L1797
	.byte	3,4,1,5,5,9
	.half	.L232-.L230
	.byte	3,209,111,1,5,36,7,9
	.half	.L773-.L232
	.byte	3,5,1,5,25,9
	.half	.L1798-.L773
	.byte	3,3,1,5,14,9
	.half	.L1799-.L1798
	.byte	3,1,1,5,38,9
	.half	.L1800-.L1799
	.byte	3,124,1,5,28,9
	.half	.L233-.L1800
	.byte	3,15,1,5,16,9
	.half	.L1111-.L233
	.byte	1,5,13,9
	.half	.L1112-.L1111
	.byte	3,1,1,9
	.half	.L235-.L1112
	.byte	3,3,1,5,9,9
	.half	.L1801-.L235
	.byte	1,5,16,7,9
	.half	.L1802-.L1801
	.byte	3,2,1,5,19,9
	.half	.L1803-.L1802
	.byte	3,3,1,5,18,9
	.half	.L1804-.L1803
	.byte	3,125,1,5,36,9
	.half	.L236-.L1804
	.byte	3,10,1,5,28,9
	.half	.L1805-.L236
	.byte	3,1,1,5,51,9
	.half	.L1806-.L1805
	.byte	1,5,28,9
	.half	.L1807-.L1806
	.byte	3,1,1,5,29,9
	.half	.L1113-.L1807
	.byte	3,1,1,5,18,9
	.half	.L1808-.L1113
	.byte	3,1,1,5,11,9
	.half	.L1809-.L1808
	.byte	3,1,1,5,40,9
	.half	.L237-.L1809
	.byte	3,2,1,5,57,9
	.half	.L1810-.L237
	.byte	1,5,5,7,9
	.half	.L234-.L1810
	.byte	3,7,1,5,27,7,9
	.half	.L1811-.L234
	.byte	3,2,1,5,40,9
	.half	.L1812-.L1811
	.byte	1,5,38,9
	.half	.L1813-.L1812
	.byte	1,5,30,9
	.half	.L1814-.L1813
	.byte	3,3,1,5,25,9
	.half	.L1815-.L1814
	.byte	3,4,1,5,23,9
	.half	.L1816-.L1815
	.byte	1,5,18,9
	.half	.L1817-.L1816
	.byte	3,2,1,5,30,9
	.half	.L1818-.L1817
	.byte	1,5,7,9
	.half	.L1819-.L1818
	.byte	1,5,32,7,9
	.half	.L1820-.L1819
	.byte	3,3,1,5,23,9
	.half	.L240-.L1820
	.byte	3,5,1,5,31,9
	.half	.L1107-.L240
	.byte	3,3,1,5,32,9
	.half	.L1821-.L1107
	.byte	3,4,1,5,9,9
	.half	.L1822-.L1821
	.byte	3,2,1,5,22,9
	.half	.L1823-.L1822
	.byte	1,5,54,9
	.half	.L1824-.L1823
	.byte	1,5,52,9
	.half	.L1825-.L1824
	.byte	1,5,25,9
	.half	.L1826-.L1825
	.byte	3,2,1,5,9,9
	.half	.L1827-.L1826
	.byte	1,5,52,7,9
	.half	.L1828-.L1827
	.byte	3,3,1,5,9,9
	.half	.L242-.L1828
	.byte	3,3,1,5,22,9
	.half	.L1829-.L242
	.byte	1,5,54,9
	.half	.L1830-.L1829
	.byte	1,5,52,9
	.half	.L1831-.L1830
	.byte	1,5,32,9
	.half	.L1832-.L1831
	.byte	3,3,1,5,29,9
	.half	.L1833-.L1832
	.byte	3,3,1,5,36,9
	.half	.L1114-.L1833
	.byte	1,5,1,9
	.half	.L228-.L1114
	.byte	3,5,1,7,9
	.half	.L508-.L228
	.byte	0,1,1
.L1778:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainErase')
	.sect	'.debug_ranges'
.L507:
	.word	-1,.L409,0,.L508-.L409,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_info'
.L509:
	.word	1110
	.half	3
	.word	.L510
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L512,.L511
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainWrite',0,1,241,26,13,1,1
	.word	.L417,.L776,.L416
	.byte	4
	.byte	'BankType',0,1,241,26,34
	.word	.L577,.L777
	.byte	5
	.word	.L417,.L776
	.byte	6
	.byte	'StatePtr',0,1,243,26,31
	.word	.L564,.L778
	.byte	6
	.byte	'LastJobResult',0,1,244,26,23
	.word	.L718,.L779
	.byte	6
	.byte	'PhysicalAddress',0,1,245,26,23
	.word	.L780,.L781
	.byte	6
	.byte	'Error',0,1,246,26,23
	.word	.L577,.L782
	.byte	6
	.byte	'PageLength',0,1,247,26,23
	.word	.L577,.L783
	.byte	7
	.word	.L662,.L784,.L302
	.byte	8
	.word	.L664,.L785
	.byte	8
	.word	.L666,.L786
	.byte	8
	.word	.L668,.L787
	.byte	9
	.word	.L670,.L784,.L302
	.byte	6
	.byte	'RetVal',0,1,251,35,19
	.word	.L577,.L788
	.byte	6
	.byte	'Loop',0,1,252,35,19
	.word	.L577,.L789
	.byte	6
	.byte	'PageLength',0,1,253,35,19
	.word	.L577,.L790
	.byte	0,0,7
	.word	.L606,.L294,.L791
	.byte	9
	.word	.L608,.L294,.L791
	.byte	6
	.byte	'StatePtr',0,1,192,38,27
	.word	.L564,.L792
	.byte	6
	.byte	'RetVal',0,1,193,38,10
	.word	.L566,.L793
	.byte	0,0,7
	.word	.L794,.L795,.L796
	.byte	8
	.word	.L797,.L798
	.byte	10
	.word	.L799,.L800
	.byte	6
	.byte	'StatePtr',0,1,230,34,27
	.word	.L564,.L807
	.byte	6
	.byte	'PageStartAddressPtr',0,1,231,34,20
	.word	.L627,.L808
	.byte	6
	.byte	'SourcePtr',0,1,232,34,20
	.word	.L809,.L810
	.byte	6
	.byte	'Count',0,1,233,34,19
	.word	.L566,.L811
	.byte	6
	.byte	'Error',0,1,234,34,19
	.word	.L577,.L812
	.byte	7
	.word	.L822,.L823,.L824
	.byte	9
	.word	.L825,.L823,.L824
	.byte	6
	.byte	'RetVal',0,1,171,39,10
	.word	.L566,.L826
	.byte	0,0,0,0,7
	.word	.L813,.L310,.L801
	.byte	9
	.word	.L814,.L310,.L801
	.byte	6
	.byte	'TempFSR',0,1,165,32,10
	.word	.L566,.L815
	.byte	6
	.byte	'RetVal',0,1,166,32,11
	.word	.L577,.L816
	.byte	0,0,7
	.word	.L794,.L801,.L802
	.byte	8
	.word	.L797,.L798
	.byte	0,7
	.word	.L674,.L315,.L319
	.byte	10
	.word	.L676,.L817
	.byte	6
	.byte	'StatePtr',0,1,217,37,27
	.word	.L564,.L820
	.byte	6
	.byte	'RetVal',0,1,218,37,19
	.word	.L577,.L821
	.byte	0,0,11
	.word	.L674,.L818,.L819
	.byte	7
	.word	.L794,.L321,.L328
	.byte	8
	.word	.L797,.L798
	.byte	0,7
	.word	.L794,.L311,.L803
	.byte	8
	.word	.L797,.L798
	.byte	0,7
	.word	.L662,.L827,.L342
	.byte	8
	.word	.L664,.L785
	.byte	8
	.word	.L666,.L786
	.byte	8
	.word	.L668,.L787
	.byte	9
	.word	.L670,.L827,.L342
	.byte	6
	.byte	'RetVal',0,1,251,35,19
	.word	.L577,.L828
	.byte	6
	.byte	'Loop',0,1,252,35,19
	.word	.L577,.L829
	.byte	6
	.byte	'PageLength',0,1,253,35,19
	.word	.L577,.L830
	.byte	0,0,7
	.word	.L794,.L804,.L805
	.byte	8
	.word	.L797,.L798
	.byte	0,7
	.word	.L794,.L343,.L806
	.byte	8
	.word	.L797,.L798
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_abbrev'
.L510:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,1,49,16,85,6,0,0,11,29,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_line'
.L511:
	.word	.L1835-.L1834
.L1834:
	.half	3
	.word	.L1837-.L1836
.L1836:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1837:
	.byte	5,13,7,0,5,2
	.word	.L417
	.byte	3,240,26,1,5,14,9
	.half	.L1153-.L417
	.byte	3,9,1,5,27,9
	.half	.L1838-.L1153
	.byte	1,5,3,9
	.half	.L1154-.L1838
	.byte	3,3,1,5,23,7,9
	.half	.L1839-.L1154
	.byte	3,2,1,5,21,9
	.half	.L1840-.L1839
	.byte	1,5,44,9
	.half	.L1841-.L1840
	.byte	1,5,23,9
	.half	.L292-.L1841
	.byte	3,4,1,5,21,9
	.half	.L1842-.L292
	.byte	1,5,26,9
	.half	.L293-.L1842
	.byte	3,3,1,5,3,9
	.half	.L1843-.L293
	.byte	1,5,54,7,9
	.half	.L1844-.L1843
	.byte	3,6,1,5,28,9
	.half	.L1845-.L1844
	.byte	1,5,36,9
	.half	.L1846-.L1845
	.byte	3,1,1,5,28,9
	.half	.L1847-.L1846
	.byte	3,1,1,5,10,9
	.half	.L784-.L1847
	.byte	3,241,8,1,5,8,9
	.half	.L1155-.L784
	.byte	3,2,1,5,39,9
	.half	.L1157-.L1155
	.byte	3,6,1,5,7,9
	.half	.L1848-.L1157
	.byte	1,5,18,7,9
	.half	.L1849-.L1848
	.byte	3,1,1,5,32,9
	.half	.L1850-.L1849
	.byte	1,5,62,9
	.half	.L1851-.L1850
	.byte	1,5,16,7,9
	.half	.L295-.L1851
	.byte	3,2,1,5,31,9
	.half	.L1159-.L295
	.byte	1,5,16,9
	.half	.L296-.L1159
	.byte	3,4,1,9
	.half	.L297-.L296
	.byte	3,3,1,5,9,9
	.half	.L298-.L297
	.byte	3,3,1,5,5,9
	.half	.L1852-.L298
	.byte	1,5,12,7,9
	.half	.L1853-.L1852
	.byte	3,2,1,5,20,9
	.half	.L1160-.L1853
	.byte	3,3,1,5,14,9
	.half	.L1854-.L1160
	.byte	3,125,1,5,33,9
	.half	.L299-.L1854
	.byte	3,10,1,5,25,9
	.half	.L1855-.L299
	.byte	3,1,1,9
	.half	.L1856-.L1855
	.byte	3,1,1,5,15,9
	.half	.L1156-.L1856
	.byte	3,3,1,5,11,9
	.half	.L300-.L1156
	.byte	3,2,1,5,37,7,9
	.half	.L1857-.L300
	.byte	1,5,3,7,9
	.half	.L301-.L1857
	.byte	3,2,1,5,5,9
	.half	.L302-.L301
	.byte	3,227,118,1,5,25,7,9
	.half	.L1858-.L302
	.byte	3,4,1,5,35,9
	.half	.L1161-.L1858
	.byte	1,5,30,9
	.half	.L303-.L1161
	.byte	3,7,1,5,5,9
	.half	.L304-.L303
	.byte	3,123,1,5,14,9
	.half	.L294-.L304
	.byte	3,177,11,1,5,27,9
	.half	.L1859-.L294
	.byte	1,5,57,9
	.half	.L1162-.L1859
	.byte	3,8,1,5,21,9
	.half	.L1860-.L1162
	.byte	3,127,1,5,68,9
	.half	.L1861-.L1860
	.byte	1,5,3,9
	.half	.L1164-.L1861
	.byte	3,7,1,5,25,7,9
	.half	.L1862-.L1164
	.byte	3,2,1,5,23,9
	.half	.L1863-.L1862
	.byte	1,5,14,9
	.half	.L306-.L1863
	.byte	3,3,1,5,3,9
	.half	.L1864-.L306
	.byte	1,5,12,7,9
	.half	.L1865-.L1864
	.byte	3,2,1,5,8,9
	.half	.L1866-.L1865
	.byte	3,1,1,5,21,9
	.half	.L1867-.L1866
	.byte	1,5,5,9
	.half	.L1868-.L1867
	.byte	1,5,55,7,9
	.half	.L1869-.L1868
	.byte	3,3,1,5,3,9
	.half	.L307-.L1869
	.byte	3,4,1,5,5,9
	.half	.L309-.L307
	.byte	3,189,116,1,5,32,7,9
	.half	.L791-.L309
	.byte	3,4,1,5,13,9
	.half	.L795-.L791
	.byte	3,2,1,5,34,9
	.half	.L796-.L795
	.byte	3,126,1,5,21,9
	.half	.L310-.L796
	.byte	3,139,5,1,5,3,9
	.half	.L1165-.L310
	.byte	3,3,1,5,12,7,9
	.half	.L1870-.L1165
	.byte	3,2,1,5,27,9
	.half	.L1166-.L1870
	.byte	1,5,12,9
	.half	.L312-.L1166
	.byte	3,4,1,5,3,9
	.half	.L313-.L312
	.byte	3,2,1,5,10,9
	.half	.L314-.L313
	.byte	3,241,122,1,5,13,7,9
	.half	.L801-.L314
	.byte	3,2,1,5,32,9
	.half	.L802-.L801
	.byte	3,2,1,5,28,9
	.half	.L1871-.L802
	.byte	3,126,1,5,10,9
	.half	.L315-.L1871
	.byte	3,178,10,1,5,14,9
	.half	.L1168-.L315
	.byte	3,1,1,5,27,9
	.half	.L1872-.L1168
	.byte	1,5,16,9
	.half	.L1873-.L1872
	.byte	3,2,1,5,57,9
	.half	.L1874-.L1873
	.byte	1,5,7,9
	.half	.L1167-.L1874
	.byte	1,5,18,7,9
	.half	.L1875-.L1167
	.byte	3,1,1,5,36,9
	.half	.L1876-.L1875
	.byte	1,5,66,9
	.half	.L1877-.L1876
	.byte	1,5,12,7,9
	.half	.L317-.L1877
	.byte	3,2,1,5,3,9
	.half	.L318-.L317
	.byte	3,3,1,5,20,9
	.half	.L319-.L318
	.byte	3,207,117,1,5,35,9
	.half	.L819-.L319
	.byte	1,5,20,9
	.half	.L320-.L819
	.byte	3,4,1,5,9,9
	.half	.L321-.L320
	.byte	3,180,7,1,9
	.half	.L1169-.L321
	.byte	3,1,1,5,54,9
	.half	.L1172-.L1169
	.byte	3,3,1,5,51,9
	.half	.L1173-.L1172
	.byte	3,3,1,5,23,9
	.half	.L1174-.L1173
	.byte	1,5,16,9
	.half	.L1175-.L1174
	.byte	3,25,1,5,8,9
	.half	.L322-.L1175
	.byte	3,106,1,5,33,9
	.half	.L1878-.L322
	.byte	1,5,5,9
	.half	.L1879-.L1878
	.byte	1,5,12,7,9
	.half	.L1880-.L1879
	.byte	3,2,1,5,26,9
	.half	.L1881-.L1880
	.byte	3,3,1,5,16,9
	.half	.L1882-.L1881
	.byte	3,3,1,5,14,9
	.half	.L1883-.L1882
	.byte	3,122,1,5,32,9
	.half	.L323-.L1883
	.byte	3,13,1,5,24,9
	.half	.L1884-.L323
	.byte	3,1,1,5,47,9
	.half	.L1885-.L1884
	.byte	1,5,24,9
	.half	.L1886-.L1885
	.byte	3,1,1,5,13,9
	.half	.L1171-.L1886
	.byte	3,3,1,9
	.half	.L1887-.L1171
	.byte	3,2,1,5,45,9
	.half	.L324-.L1887
	.byte	3,2,1,5,3,7,9
	.half	.L1888-.L324
	.byte	3,2,1,5,21,7,9
	.half	.L823-.L1888
	.byte	3,161,4,1,5,60,9
	.half	.L1889-.L823
	.byte	3,1,1,5,68,9
	.half	.L1176-.L1889
	.byte	3,127,1,5,2,9
	.half	.L1890-.L1176
	.byte	3,7,1,5,5,9
	.half	.L326-.L1890
	.byte	3,219,123,1,5,33,7,9
	.half	.L824-.L326
	.byte	3,4,1,5,54,9
	.half	.L1891-.L824
	.byte	1,5,25,9
	.half	.L1892-.L1891
	.byte	3,1,1,5,38,9
	.half	.L1893-.L1892
	.byte	1,5,14,9
	.half	.L1894-.L1893
	.byte	3,2,1,5,3,9
	.half	.L325-.L1894
	.byte	3,3,1,5,15,9
	.half	.L328-.L325
	.byte	3,170,120,1,5,33,9
	.half	.L1895-.L328
	.byte	1,5,15,9
	.half	.L1896-.L1895
	.byte	3,2,1,5,32,9
	.half	.L1897-.L1896
	.byte	1,5,46,9
	.half	.L1898-.L1897
	.byte	3,3,1,5,66,9
	.half	.L1899-.L1898
	.byte	1,5,35,9
	.half	.L1900-.L1899
	.byte	1,5,5,9
	.half	.L311-.L1900
	.byte	3,5,1,5,18,7,9
	.half	.L803-.L311
	.byte	3,14,1,5,7,9
	.half	.L1901-.L803
	.byte	1,5,31,7,9
	.half	.L1902-.L1901
	.byte	3,3,1,5,23,9
	.half	.L1903-.L1902
	.byte	3,4,1,5,32,9
	.half	.L1177-.L1903
	.byte	3,2,1,5,29,9
	.half	.L1904-.L1177
	.byte	3,2,1,5,42,9
	.half	.L1905-.L1904
	.byte	1,5,40,9
	.half	.L1178-.L1905
	.byte	1,5,29,9
	.half	.L1906-.L1178
	.byte	3,2,1,5,36,9
	.half	.L1907-.L1906
	.byte	1,5,32,9
	.half	.L1908-.L1907
	.byte	3,3,1,5,9,9
	.half	.L1909-.L1908
	.byte	3,2,1,5,22,9
	.half	.L1910-.L1909
	.byte	1,5,54,9
	.half	.L1911-.L1910
	.byte	1,5,52,9
	.half	.L1912-.L1911
	.byte	1,5,25,9
	.half	.L1913-.L1912
	.byte	3,2,1,5,9,9
	.half	.L1914-.L1913
	.byte	1,5,52,7,9
	.half	.L1915-.L1914
	.byte	3,3,1,5,9,9
	.half	.L331-.L1915
	.byte	3,2,1,5,22,9
	.half	.L1916-.L331
	.byte	1,5,54,9
	.half	.L1917-.L1916
	.byte	1,5,52,9
	.half	.L1918-.L1917
	.byte	1,5,64,9
	.half	.L1919-.L1918
	.byte	1,5,54,9
	.half	.L330-.L1919
	.byte	3,8,1,5,21,9
	.half	.L1920-.L330
	.byte	3,127,1,5,12,9
	.half	.L1921-.L1920
	.byte	1,5,22,7,9
	.half	.L1922-.L1921
	.byte	3,3,1,5,37,7,9
	.half	.L1923-.L1922
	.byte	3,3,1,5,27,9
	.half	.L1924-.L1923
	.byte	3,1,1,5,41,9
	.half	.L1925-.L1924
	.byte	3,1,1,5,39,9
	.half	.L1926-.L1925
	.byte	1,5,58,9
	.half	.L333-.L1926
	.byte	3,8,1,5,32,9
	.half	.L1927-.L333
	.byte	1,5,38,9
	.half	.L1928-.L1927
	.byte	3,1,1,5,55,9
	.half	.L1929-.L1928
	.byte	1,5,10,9
	.half	.L827-.L1929
	.byte	3,239,7,1,5,8,9
	.half	.L1179-.L827
	.byte	3,2,1,5,39,9
	.half	.L1181-.L1179
	.byte	3,6,1,5,7,9
	.half	.L1930-.L1181
	.byte	1,5,18,7,9
	.half	.L1931-.L1930
	.byte	3,1,1,5,32,9
	.half	.L1932-.L1931
	.byte	1,5,62,9
	.half	.L1933-.L1932
	.byte	1,5,16,7,9
	.half	.L335-.L1933
	.byte	3,2,1,5,31,9
	.half	.L1183-.L335
	.byte	1,5,16,9
	.half	.L336-.L1183
	.byte	3,4,1,9
	.half	.L337-.L336
	.byte	3,3,1,5,9,9
	.half	.L338-.L337
	.byte	3,3,1,5,5,9
	.half	.L1934-.L338
	.byte	1,5,12,7,9
	.half	.L1935-.L1934
	.byte	3,2,1,5,20,9
	.half	.L1184-.L1935
	.byte	3,3,1,5,14,9
	.half	.L1936-.L1184
	.byte	3,125,1,5,33,9
	.half	.L339-.L1936
	.byte	3,10,1,5,25,9
	.half	.L1937-.L339
	.byte	3,1,1,9
	.half	.L1938-.L1937
	.byte	3,1,1,5,15,9
	.half	.L1180-.L1938
	.byte	3,3,1,5,11,9
	.half	.L340-.L1180
	.byte	3,2,1,5,37,7,9
	.half	.L1939-.L340
	.byte	1,5,3,7,9
	.half	.L341-.L1939
	.byte	3,2,1,5,9,9
	.half	.L342-.L341
	.byte	3,230,119,1,5,17,7,9
	.half	.L804-.L342
	.byte	3,3,1,5,29,9
	.half	.L805-.L804
	.byte	3,1,1,5,9,9
	.half	.L343-.L805
	.byte	3,3,1,5,34,7,9
	.half	.L806-.L343
	.byte	3,6,1,5,7,9
	.half	.L332-.L806
	.byte	3,95,1,5,25,9
	.half	.L329-.L332
	.byte	3,40,1,5,1,9
	.half	.L305-.L329
	.byte	3,3,1,7,9
	.half	.L513-.L305
	.byte	0,1,1
.L1835:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_ranges'
.L512:
	.word	-1,.L417,0,.L513-.L417,0,0
.L800:
	.word	-1,.L417,.L795-.L417,.L796-.L417,.L801-.L417,.L802-.L417,.L321-.L417,.L328-.L417,.L311-.L417,.L803-.L417
	.word	.L804-.L417,.L805-.L417,.L343-.L417,.L806-.L417,0,0
.L817:
	.word	-1,.L417,.L315-.L417,.L319-.L417,.L818-.L417,.L819-.L417,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainRead')
	.sect	'.debug_info'
.L514:
	.word	520
	.half	3
	.word	.L515
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L517,.L516
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainRead',0,1,236,23,13,1,1
	.word	.L413,.L831,.L412
	.byte	4
	.byte	'BankType',0,1,236,23,34
	.word	.L577,.L832
	.byte	5
	.word	.L413,.L831
	.byte	6
	.byte	'StatePtr',0,1,238,23,31
	.word	.L564,.L833
	.byte	6
	.byte	'ReadCount',0,1,239,23,23
	.word	.L566,.L834
	.byte	6
	.byte	'LastJobResult',0,1,240,23,23
	.word	.L718,.L835
	.byte	6
	.byte	'SourcePtr',0,1,241,23,24
	.word	.L703,.L836
	.byte	6
	.byte	'MaxRead',0,1,242,23,23
	.word	.L566,.L837
	.byte	7
	.word	.L838,.L839,.L249
	.byte	8
	.word	.L840,.L841
	.byte	6
	.byte	'StatePtr',0,1,251,37,27
	.word	.L564,.L850
	.byte	6
	.byte	'MaxRead',0,1,252,37,19
	.word	.L566,.L851
	.byte	0,0,9
	.word	.L838,.L842,.L843
	.byte	9
	.word	.L838,.L250,.L844
	.byte	9
	.word	.L838,.L254,.L845
	.byte	9
	.word	.L838,.L846,.L847
	.byte	9
	.word	.L838,.L848,.L849
	.byte	7
	.word	.L822,.L852,.L853
	.byte	10
	.word	.L825,.L852,.L853
	.byte	6
	.byte	'RetVal',0,1,171,39,10
	.word	.L566,.L854
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainRead')
	.sect	'.debug_abbrev'
.L515:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,29,0,49,16,17,1,18,1,0
	.byte	0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainRead')
	.sect	'.debug_line'
.L516:
	.word	.L1941-.L1940
.L1940:
	.half	3
	.word	.L1943-.L1942
.L1942:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1943:
	.byte	5,14,7,0,5,2
	.word	.L413
	.byte	3,244,23,1,5,27,9
	.half	.L1944-.L413
	.byte	1,5,26,9
	.half	.L839-.L1944
	.byte	3,138,14,1,5,14,9
	.half	.L1123-.L839
	.byte	3,2,1,5,3,9
	.half	.L1945-.L1123
	.byte	1,5,28,7,9
	.half	.L1946-.L1945
	.byte	3,2,1,5,3,9
	.half	.L248-.L1946
	.byte	3,3,1,5,14,9
	.half	.L249-.L248
	.byte	3,245,113,1,5,3,9
	.half	.L842-.L249
	.byte	1,5,55,7,9
	.half	.L1947-.L842
	.byte	3,5,1,5,29,9
	.half	.L843-.L1947
	.byte	1,5,24,9
	.half	.L1948-.L843
	.byte	3,126,1,5,15,9
	.half	.L250-.L1948
	.byte	3,6,1,5,31,9
	.half	.L844-.L250
	.byte	3,1,1,5,29,9
	.half	.L1949-.L844
	.byte	1,5,33,9
	.half	.L251-.L1949
	.byte	3,6,1,5,13,9
	.half	.L1124-.L251
	.byte	1,5,23,9
	.half	.L252-.L1124
	.byte	3,16,1,5,9,9
	.half	.L1950-.L252
	.byte	1,5,10,7,9
	.half	.L1951-.L1950
	.byte	3,1,1,5,30,7,9
	.half	.L1952-.L1951
	.byte	3,1,1,5,38,9
	.half	.L1953-.L1952
	.byte	1,5,34,7,9
	.half	.L1954-.L1953
	.byte	3,3,1,5,32,9
	.half	.L1955-.L1954
	.byte	1,5,37,9
	.half	.L1956-.L1955
	.byte	3,3,1,5,17,9
	.half	.L1125-.L1956
	.byte	1,5,16,9
	.half	.L1127-.L1125
	.byte	3,1,1,5,37,9
	.half	.L1957-.L1127
	.byte	3,1,1,5,35,9
	.half	.L1126-.L1957
	.byte	1,5,9,9
	.half	.L254-.L1126
	.byte	3,9,1,5,21,7,9
	.half	.L845-.L254
	.byte	3,1,1,5,31,9
	.half	.L1129-.L845
	.byte	1,5,11,9
	.half	.L1130-.L1129
	.byte	1,5,29,7,9
	.half	.L1958-.L1130
	.byte	3,1,1,5,49,9
	.half	.L1959-.L1958
	.byte	1,5,64,9
	.half	.L1960-.L1959
	.byte	1,5,33,7,9
	.half	.L1961-.L1960
	.byte	3,4,1,5,44,9
	.half	.L1962-.L1961
	.byte	3,1,1,5,53,9
	.half	.L1963-.L1962
	.byte	3,127,1,5,16,9
	.half	.L1964-.L1963
	.byte	3,4,1,5,35,9
	.half	.L1965-.L1964
	.byte	1,5,16,9
	.half	.L1966-.L1965
	.byte	3,3,1,5,17,9
	.half	.L846-.L1966
	.byte	3,1,1,5,70,9
	.half	.L847-.L846
	.byte	3,121,1,5,17,9
	.half	.L257-.L847
	.byte	3,11,1,5,39,9
	.half	.L1967-.L257
	.byte	1,5,37,9
	.half	.L1968-.L1967
	.byte	1,5,16,9
	.half	.L1969-.L1968
	.byte	3,3,1,5,35,9
	.half	.L1970-.L1969
	.byte	1,5,16,9
	.half	.L1971-.L1970
	.byte	3,3,1,9
	.half	.L848-.L1971
	.byte	3,1,1,5,29,9
	.half	.L259-.L848
	.byte	3,3,1,5,38,7,9
	.half	.L849-.L259
	.byte	3,23,1,5,28,9
	.half	.L1131-.L849
	.byte	1,5,21,9
	.half	.L852-.L1131
	.byte	3,208,14,1,5,60,9
	.half	.L1132-.L852
	.byte	3,1,1,5,68,9
	.half	.L1133-.L1132
	.byte	3,127,1,5,2,9
	.half	.L1972-.L1133
	.byte	3,7,1,5,3,9
	.half	.L260-.L1972
	.byte	3,173,113,1,5,29,7,9
	.half	.L853-.L260
	.byte	3,4,1,5,23,9
	.half	.L1122-.L853
	.byte	3,2,1,5,31,9
	.half	.L1973-.L1122
	.byte	3,126,1,5,16,9
	.half	.L261-.L1973
	.byte	3,7,1,5,5,9
	.half	.L1134-.L261
	.byte	1,5,21,7,9
	.half	.L1974-.L1134
	.byte	3,3,1,5,27,9
	.half	.L1135-.L1974
	.byte	3,2,1,5,40,9
	.half	.L1975-.L1135
	.byte	1,5,38,9
	.half	.L1976-.L1975
	.byte	1,5,30,9
	.half	.L1977-.L1976
	.byte	3,3,1,5,7,9
	.half	.L1978-.L1977
	.byte	3,2,1,5,20,9
	.half	.L1979-.L1978
	.byte	1,5,52,9
	.half	.L1980-.L1979
	.byte	1,5,50,9
	.half	.L1136-.L1980
	.byte	1,5,23,9
	.half	.L1981-.L1136
	.byte	3,2,1,5,7,9
	.half	.L1982-.L1981
	.byte	1,5,51,7,9
	.half	.L1983-.L1982
	.byte	3,3,1,5,7,9
	.half	.L264-.L1983
	.byte	3,3,1,5,20,9
	.half	.L1984-.L264
	.byte	1,5,52,9
	.half	.L1985-.L1984
	.byte	1,5,50,9
	.half	.L1986-.L1985
	.byte	1,5,1,9
	.half	.L262-.L1986
	.byte	3,4,1,7,9
	.half	.L518-.L262
	.byte	0,1,1
.L1941:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainRead')
	.sect	'.debug_ranges'
.L517:
	.word	-1,.L413,0,.L518-.L413,0,0
.L841:
	.word	-1,.L413,.L839-.L413,.L249-.L413,.L842-.L413,.L843-.L413,.L250-.L413,.L844-.L413,.L254-.L413,.L845-.L413
	.word	.L846-.L413,.L847-.L413,.L848-.L413,.L849-.L413,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_info'
.L519:
	.word	549
	.half	3
	.word	.L520
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L522,.L521
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainCompare',0,1,159,25,13,1,1
	.word	.L415,.L855,.L414
	.byte	4
	.byte	'BankType',0,1,159,25,37
	.word	.L577,.L856
	.byte	5
	.word	.L415,.L855
	.byte	6
	.byte	'StatePtr',0,1,161,25,31
	.word	.L564,.L857
	.byte	6
	.byte	'ReadCount',0,1,162,25,23
	.word	.L566,.L858
	.byte	6
	.byte	'LastJobResult',0,1,163,25,23
	.word	.L718,.L859
	.byte	6
	.byte	'SourcePtr',0,1,164,25,24
	.word	.L703,.L860
	.byte	6
	.byte	'MaxRead',0,1,165,25,23
	.word	.L566,.L861
	.byte	7
	.word	.L838,.L862,.L266
	.byte	8
	.word	.L840,.L863
	.byte	6
	.byte	'StatePtr',0,1,251,37,27
	.word	.L564,.L876
	.byte	6
	.byte	'MaxRead',0,1,252,37,19
	.word	.L566,.L877
	.byte	0,0,9
	.word	.L838,.L864,.L865
	.byte	9
	.word	.L838,.L267,.L866
	.byte	9
	.word	.L838,.L867,.L868
	.byte	9
	.word	.L838,.L869,.L870
	.byte	9
	.word	.L838,.L871,.L277
	.byte	9
	.word	.L838,.L872,.L873
	.byte	9
	.word	.L838,.L874,.L875
	.byte	7
	.word	.L822,.L878,.L879
	.byte	10
	.word	.L825,.L878,.L879
	.byte	6
	.byte	'RetVal',0,1,171,39,10
	.word	.L566,.L880
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_abbrev'
.L520:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,29,0,49,16,17,1,18,1,0
	.byte	0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_line'
.L521:
	.word	.L1988-.L1987
.L1987:
	.half	3
	.word	.L1990-.L1989
.L1989:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L1990:
	.byte	5,14,7,0,5,2
	.word	.L415
	.byte	3,167,25,1,5,27,9
	.half	.L1991-.L415
	.byte	1,9
	.half	.L1992-.L1991
	.byte	3,2,1,5,26,9
	.half	.L862-.L1992
	.byte	3,213,12,1,5,14,9
	.half	.L1138-.L862
	.byte	3,2,1,5,3,9
	.half	.L1993-.L1138
	.byte	1,5,28,7,9
	.half	.L1994-.L1993
	.byte	3,2,1,5,3,9
	.half	.L265-.L1994
	.byte	3,3,1,5,14,9
	.half	.L266-.L265
	.byte	3,170,115,1,5,3,9
	.half	.L864-.L266
	.byte	1,5,55,7,9
	.half	.L1995-.L864
	.byte	3,5,1,5,29,9
	.half	.L865-.L1995
	.byte	1,5,24,9
	.half	.L1996-.L865
	.byte	3,126,1,5,15,9
	.half	.L267-.L1996
	.byte	3,6,1,5,31,9
	.half	.L866-.L267
	.byte	3,1,1,5,29,9
	.half	.L1997-.L866
	.byte	1,5,33,9
	.half	.L268-.L1997
	.byte	3,6,1,5,13,9
	.half	.L1139-.L268
	.byte	1,5,22,9
	.half	.L1140-.L1139
	.byte	3,8,1,5,8,9
	.half	.L269-.L1140
	.byte	1,5,10,7,9
	.half	.L1998-.L269
	.byte	3,1,1,5,31,7,9
	.half	.L1999-.L1998
	.byte	3,1,1,5,39,9
	.half	.L2000-.L1999
	.byte	1,5,17,7,9
	.half	.L2001-.L2000
	.byte	3,5,1,5,16,9
	.half	.L2002-.L2001
	.byte	3,1,1,5,37,9
	.half	.L2003-.L2002
	.byte	3,1,1,5,35,9
	.half	.L2004-.L2003
	.byte	1,5,19,9
	.half	.L271-.L2004
	.byte	3,12,1,5,29,9
	.half	.L1142-.L271
	.byte	1,5,9,9
	.half	.L1143-.L1142
	.byte	1,5,28,7,9
	.half	.L2005-.L1143
	.byte	3,1,1,5,48,9
	.half	.L2006-.L2005
	.byte	1,5,9,9
	.half	.L2007-.L2006
	.byte	1,5,23,7,9
	.half	.L867-.L2007
	.byte	3,1,1,5,11,7,9
	.half	.L868-.L867
	.byte	3,4,1,9
	.half	.L2008-.L868
	.byte	3,1,1,5,7,9
	.half	.L2009-.L2008
	.byte	3,127,1,5,23,7,9
	.half	.L2010-.L2009
	.byte	3,3,1,5,19,9
	.half	.L869-.L2010
	.byte	3,2,1,5,49,9
	.half	.L870-.L869
	.byte	3,126,1,5,36,9
	.half	.L276-.L870
	.byte	3,8,1,5,19,9
	.half	.L2011-.L276
	.byte	3,3,1,9
	.half	.L871-.L2011
	.byte	3,1,1,5,7,9
	.half	.L277-.L871
	.byte	3,120,1,5,28,9
	.half	.L273-.L277
	.byte	3,116,1,5,11,9
	.half	.L274-.L273
	.byte	3,26,1,5,44,9
	.half	.L2012-.L274
	.byte	1,5,7,9
	.half	.L2013-.L2012
	.byte	1,5,23,7,9
	.half	.L2014-.L2013
	.byte	3,2,1,5,19,9
	.half	.L872-.L2014
	.byte	3,2,1,5,49,9
	.half	.L873-.L872
	.byte	3,126,1,5,35,9
	.half	.L279-.L873
	.byte	3,9,1,5,18,9
	.half	.L2015-.L279
	.byte	3,3,1,9
	.half	.L874-.L2015
	.byte	3,1,1,5,25,9
	.half	.L278-.L874
	.byte	3,3,1,5,38,7,9
	.half	.L875-.L278
	.byte	3,5,1,5,28,9
	.half	.L1144-.L875
	.byte	1,5,21,9
	.half	.L878-.L1144
	.byte	3,162,13,1,5,60,9
	.half	.L1145-.L878
	.byte	3,1,1,5,68,9
	.half	.L1146-.L1145
	.byte	3,127,1,5,2,9
	.half	.L2016-.L1146
	.byte	3,7,1,5,3,9
	.half	.L281-.L2016
	.byte	3,218,114,1,5,32,7,9
	.half	.L879-.L281
	.byte	3,4,1,5,23,9
	.half	.L1137-.L879
	.byte	3,2,1,5,34,9
	.half	.L2017-.L1137
	.byte	3,126,1,5,8,9
	.half	.L282-.L2017
	.byte	3,5,1,5,28,7,9
	.half	.L2018-.L282
	.byte	3,3,1,9
	.half	.L2019-.L2018
	.byte	3,3,1,5,5,9
	.half	.L1147-.L2019
	.byte	1,5,37,7,9
	.half	.L2020-.L1147
	.byte	3,2,1,5,35,9
	.half	.L2021-.L2020
	.byte	1,5,28,9
	.half	.L285-.L2021
	.byte	3,3,1,5,5,9
	.half	.L2022-.L285
	.byte	1,5,37,7,9
	.half	.L2023-.L2022
	.byte	3,2,1,5,35,9
	.half	.L2024-.L2023
	.byte	1,5,28,9
	.half	.L286-.L2024
	.byte	3,4,1,5,5,9
	.half	.L1148-.L286
	.byte	3,2,1,5,18,9
	.half	.L2025-.L1148
	.byte	1,5,50,9
	.half	.L2026-.L2025
	.byte	1,5,48,9
	.half	.L2027-.L2026
	.byte	1,5,21,9
	.half	.L2028-.L2027
	.byte	3,2,1,5,5,9
	.half	.L2029-.L2028
	.byte	1,5,50,7,9
	.half	.L2030-.L2029
	.byte	3,3,1,5,5,9
	.half	.L287-.L2030
	.byte	3,2,1,5,18,9
	.half	.L2031-.L287
	.byte	1,5,50,9
	.half	.L2032-.L2031
	.byte	1,5,48,9
	.half	.L2033-.L2032
	.byte	1,5,60,9
	.half	.L2034-.L2033
	.byte	1,5,18,9
	.half	.L284-.L2034
	.byte	3,6,1,5,5,9
	.half	.L1150-.L284
	.byte	1,5,21,7,9
	.half	.L2035-.L1150
	.byte	3,3,1,5,30,9
	.half	.L1149-.L2035
	.byte	3,3,1,5,27,9
	.half	.L2036-.L1149
	.byte	3,3,1,5,40,9
	.half	.L2037-.L2036
	.byte	1,5,38,9
	.half	.L1151-.L2037
	.byte	1,5,7,9
	.half	.L2038-.L1151
	.byte	3,2,1,5,20,9
	.half	.L2039-.L2038
	.byte	1,5,52,9
	.half	.L2040-.L2039
	.byte	1,5,50,9
	.half	.L2041-.L2040
	.byte	1,5,23,9
	.half	.L2042-.L2041
	.byte	3,2,1,5,7,9
	.half	.L2043-.L2042
	.byte	1,5,51,7,9
	.half	.L2044-.L2043
	.byte	3,3,1,5,7,9
	.half	.L290-.L2044
	.byte	3,3,1,5,20,9
	.half	.L2045-.L290
	.byte	1,5,52,9
	.half	.L2046-.L2045
	.byte	1,5,50,9
	.half	.L2047-.L2046
	.byte	1,5,62,9
	.half	.L2048-.L2047
	.byte	1,5,1,9
	.half	.L283-.L2048
	.byte	3,9,1,7,9
	.half	.L523-.L283
	.byte	0,1,1
.L1988:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_ranges'
.L522:
	.word	-1,.L415,0,.L523-.L415,0,0
.L863:
	.word	-1,.L415,.L862-.L415,.L266-.L415,.L864-.L415,.L865-.L415,.L267-.L415,.L866-.L415,.L867-.L415,.L868-.L415
	.word	.L869-.L415,.L870-.L415,.L871-.L415,.L277-.L415,.L872-.L415,.L873-.L415,.L874-.L415,.L875-.L415,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_info'
.L524:
	.word	269
	.half	3
	.word	.L525
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L527,.L526
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lErrorHandler',0,1,232,29,13,1,1
	.word	.L421,.L881,.L420
	.byte	4
	.byte	'JobType',0,1,232,29,37
	.word	.L577,.L882
	.byte	5
	.word	.L421,.L881
	.byte	6
	.byte	'StatePtr',0,1,234,29,26
	.word	.L564,.L883
	.byte	6
	.byte	'ArrPtr',0,1,235,29,10
	.word	.L703,.L884
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_abbrev'
.L525:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_line'
.L526:
	.word	.L2050-.L2049
.L2049:
	.half	3
	.word	.L2052-.L2051
.L2051:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2052:
	.byte	5,13,7,0,5,2
	.word	.L421
	.byte	3,231,29,1,5,14,9
	.half	.L1194-.L421
	.byte	3,5,1,5,27,9
	.half	.L2053-.L1194
	.byte	1,5,20,9
	.half	.L1195-.L2053
	.byte	3,1,1,5,3,9
	.half	.L1197-.L1195
	.byte	3,2,1,5,27,7,9
	.half	.L2054-.L1197
	.byte	3,3,1,5,25,9
	.half	.L2055-.L2054
	.byte	3,2,1,5,32,9
	.half	.L2056-.L2055
	.byte	1,5,37,9
	.half	.L2057-.L2056
	.byte	3,126,1,5,8,9
	.half	.L354-.L2057
	.byte	3,4,1,5,27,7,9
	.half	.L2058-.L354
	.byte	3,3,1,5,25,9
	.half	.L2059-.L2058
	.byte	3,2,1,5,32,9
	.half	.L2060-.L2059
	.byte	1,5,37,9
	.half	.L2061-.L2060
	.byte	3,126,1,5,12,9
	.half	.L355-.L2061
	.byte	3,13,1,5,3,9
	.half	.L2062-.L355
	.byte	1,5,21,7,9
	.half	.L2063-.L2062
	.byte	3,5,1,5,19,9
	.half	.L2064-.L2063
	.byte	1,5,12,9
	.half	.L358-.L2064
	.byte	3,6,1,5,3,9
	.half	.L2065-.L358
	.byte	1,5,21,7,9
	.half	.L2066-.L2065
	.byte	3,5,1,5,19,9
	.half	.L2067-.L2066
	.byte	1,5,28,9
	.half	.L359-.L2067
	.byte	3,4,1,5,26,9
	.half	.L2068-.L359
	.byte	1,9
	.half	.L2069-.L2068
	.byte	3,4,1,5,3,9
	.half	.L2070-.L2069
	.byte	3,3,1,5,16,9
	.half	.L1196-.L2070
	.byte	1,5,46,9
	.half	.L2071-.L1196
	.byte	1,5,19,9
	.half	.L2072-.L2071
	.byte	3,2,1,5,3,9
	.half	.L2073-.L2072
	.byte	1,5,48,7,9
	.half	.L2074-.L2073
	.byte	3,3,1,5,3,9
	.half	.L360-.L2074
	.byte	3,3,1,5,16,9
	.half	.L2075-.L360
	.byte	1,5,48,9
	.half	.L2076-.L2075
	.byte	1,5,46,9
	.half	.L2077-.L2076
	.byte	1,5,1,9
	.half	.L2078-.L2077
	.byte	3,1,1,7,9
	.half	.L528-.L2078
	.byte	0,1,1
.L2050:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_ranges'
.L527:
	.word	-1,.L421,0,.L528-.L421,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_info'
.L529:
	.word	319
	.half	3
	.word	.L530
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L532,.L531
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lLoadAccessCode',0,1,192,30,13,1,1
	.word	.L423,.L885,.L422
	.byte	4
	.byte	'JobRequest',0,1,192,30,39
	.word	.L577,.L886
	.byte	5
	.word	.L423,.L885
	.byte	6
	.byte	'SrcStartPtr',0,1,194,30,11
	.word	.L627,.L887
	.byte	6
	.byte	'DestPtr',0,1,195,30,11
	.word	.L627,.L888
	.byte	6
	.byte	'SrcEndPtr',0,1,196,30,11
	.word	.L627,.L889
	.byte	6
	.byte	'Size',0,1,197,30,19
	.word	.L890,.L891
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_abbrev'
.L530:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_line'
.L531:
	.word	.L2080-.L2079
.L2079:
	.half	3
	.word	.L2082-.L2081
.L2081:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2082:
	.byte	5,13,7,0,5,2
	.word	.L423
	.byte	3,191,30,1,5,32,9
	.half	.L1199-.L423
	.byte	3,12,1,5,3,9
	.half	.L2083-.L1199
	.byte	3,124,1,5,37,7,9
	.half	.L2084-.L2083
	.byte	3,2,1,5,45,9
	.half	.L2085-.L2084
	.byte	3,2,1,5,35,9
	.half	.L1201-.L2085
	.byte	3,1,1,5,63,9
	.half	.L2086-.L1201
	.byte	3,125,1,5,37,9
	.half	.L361-.L2086
	.byte	3,8,1,5,45,9
	.half	.L2087-.L361
	.byte	3,2,1,5,35,9
	.half	.L1204-.L2087
	.byte	3,1,1,5,18,9
	.half	.L362-.L1204
	.byte	3,11,1,5,38,9
	.half	.L1206-.L362
	.byte	1,5,28,9
	.half	.L1208-.L1206
	.byte	1,5,8,9
	.half	.L1207-.L1208
	.byte	1,5,7,9
	.half	.L2088-.L1207
	.byte	3,3,1,5,12,9
	.half	.L2089-.L2088
	.byte	1,5,3,9
	.half	.L2090-.L2089
	.byte	1,5,12,7,9
	.half	.L2091-.L2090
	.byte	3,2,1,5,17,9
	.half	.L2092-.L2091
	.byte	1,5,10,9
	.half	.L2093-.L2092
	.byte	1,9
	.half	.L363-.L2093
	.byte	3,4,1,5,15,9
	.half	.L2094-.L363
	.byte	1,5,8,9
	.half	.L2095-.L2094
	.byte	1,5,16,9
	.half	.L364-.L2095
	.byte	3,5,1,5,14,9
	.half	.L2096-.L364
	.byte	1,5,12,9
	.half	.L2097-.L2096
	.byte	3,3,1,5,16,9
	.half	.L2098-.L2097
	.byte	3,5,1,5,5,9
	.half	.L2099-.L2098
	.byte	3,1,1,5,9,9
	.half	.L2100-.L2099
	.byte	1,5,10,9
	.half	.L2101-.L2100
	.byte	3,1,1,5,21,9
	.half	.L2102-.L2101
	.byte	1,5,1,7,9
	.half	.L2103-.L2102
	.byte	3,1,1,7,9
	.half	.L533-.L2103
	.byte	0,1,1
.L2080:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_ranges'
.L532:
	.word	-1,.L423,0,.L533-.L423,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_info'
.L534:
	.word	321
	.half	3
	.word	.L535
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L537,.L536
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lUnLoadAccessCode',0,1,141,31,13,1,1
	.word	.L425,.L892,.L424
	.byte	4
	.byte	'JobRequest',0,1,141,31,41
	.word	.L577,.L893
	.byte	5
	.word	.L425,.L892
	.byte	6
	.byte	'SrcStartPtr',0,1,143,31,11
	.word	.L627,.L894
	.byte	6
	.byte	'DestPtr',0,1,144,31,11
	.word	.L627,.L895
	.byte	6
	.byte	'SrcEndPtr',0,1,145,31,11
	.word	.L627,.L896
	.byte	6
	.byte	'Size',0,1,146,31,19
	.word	.L897,.L898
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_abbrev'
.L535:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_line'
.L536:
	.word	.L2105-.L2104
.L2104:
	.half	3
	.word	.L2107-.L2106
.L2106:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2107:
	.byte	5,13,7,0,5,2
	.word	.L425
	.byte	3,140,31,1,5,32,9
	.half	.L1209-.L425
	.byte	3,12,1,5,3,9
	.half	.L2108-.L1209
	.byte	3,124,1,5,37,7,9
	.half	.L2109-.L2108
	.byte	3,2,1,5,45,9
	.half	.L2110-.L2109
	.byte	3,2,1,5,35,9
	.half	.L1211-.L2110
	.byte	3,1,1,5,63,9
	.half	.L2111-.L1211
	.byte	3,125,1,5,37,9
	.half	.L365-.L2111
	.byte	3,8,1,5,45,9
	.half	.L2112-.L365
	.byte	3,2,1,5,35,9
	.half	.L1214-.L2112
	.byte	3,1,1,5,18,9
	.half	.L366-.L1214
	.byte	3,11,1,5,38,9
	.half	.L1216-.L366
	.byte	1,5,28,9
	.half	.L1218-.L1216
	.byte	1,5,8,9
	.half	.L1217-.L1218
	.byte	1,5,7,9
	.half	.L2113-.L1217
	.byte	3,3,1,5,12,9
	.half	.L2114-.L2113
	.byte	1,5,3,9
	.half	.L2115-.L2114
	.byte	1,5,12,7,9
	.half	.L2116-.L2115
	.byte	3,2,1,5,17,9
	.half	.L2117-.L2116
	.byte	1,5,10,9
	.half	.L2118-.L2117
	.byte	1,9
	.half	.L367-.L2118
	.byte	3,4,1,5,15,9
	.half	.L2119-.L367
	.byte	1,5,8,9
	.half	.L2120-.L2119
	.byte	1,5,16,9
	.half	.L368-.L2120
	.byte	3,4,1,5,14,9
	.half	.L2121-.L368
	.byte	1,5,12,9
	.half	.L2122-.L2121
	.byte	3,3,1,5,5,9
	.half	.L2123-.L2122
	.byte	3,1,1,5,9,9
	.half	.L2124-.L2123
	.byte	1,5,10,9
	.half	.L2125-.L2124
	.byte	3,1,1,5,21,9
	.half	.L2126-.L2125
	.byte	1,5,1,7,9
	.half	.L2127-.L2126
	.byte	3,1,1,7,9
	.half	.L538-.L2127
	.byte	0,1,1
.L2105:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_ranges'
.L537:
	.word	-1,.L425,0,.L538-.L425,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_info'
.L539:
	.word	436
	.half	3
	.word	.L540
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L542,.L541
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainWriteJobStart',0,1,186,28,13,1,1
	.word	.L419,.L899,.L418
	.byte	4
	.byte	'PhysicalAddress',0,1,186,28,43
	.word	.L566,.L900
	.byte	5
	.word	.L419,.L899
	.byte	6
	.byte	'StatePtr',0,1,188,28,27
	.word	.L564,.L901
	.byte	6
	.byte	'SeqProtErr',0,1,189,28,27
	.word	.L566,.L902
	.byte	6
	.byte	'WriteMode',0,1,190,28,27
	.word	.L577,.L903
	.byte	7
	.word	.L674,.L904,.L348
	.byte	8
	.word	.L676,.L905
	.byte	6
	.byte	'StatePtr',0,1,217,37,27
	.word	.L564,.L908
	.byte	6
	.byte	'RetVal',0,1,218,37,19
	.word	.L577,.L909
	.byte	0,0,9
	.word	.L674,.L906,.L907
	.byte	7
	.word	.L615,.L910,.L911
	.byte	10
	.word	.L618,.L910,.L911
	.byte	6
	.byte	'RetVal',0,1,156,38,10
	.word	.L566,.L912
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_abbrev'
.L540:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,85,6,0,0,9,29,0,49,16,17,1,18,1,0
	.byte	0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_line'
.L541:
	.word	.L2129-.L2128
.L2128:
	.half	3
	.word	.L2131-.L2130
.L2130:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2131:
	.byte	5,13,7,0,5,2
	.word	.L419
	.byte	3,185,28,1,5,14,9
	.half	.L1185-.L419
	.byte	3,6,1,5,27,9
	.half	.L2132-.L1185
	.byte	1,5,23,9
	.half	.L1186-.L2132
	.byte	3,3,1,5,30,9
	.half	.L2133-.L1186
	.byte	1,5,22,9
	.half	.L2134-.L2133
	.byte	3,3,1,5,10,9
	.half	.L904-.L2134
	.byte	3,150,9,1,5,14,9
	.half	.L1187-.L904
	.byte	3,1,1,5,27,9
	.half	.L2135-.L1187
	.byte	1,5,16,9
	.half	.L1188-.L2135
	.byte	3,2,1,5,57,9
	.half	.L2136-.L1188
	.byte	1,5,7,9
	.half	.L2137-.L2136
	.byte	1,5,18,7,9
	.half	.L2138-.L2137
	.byte	3,1,1,5,36,9
	.half	.L2139-.L2138
	.byte	1,5,66,9
	.half	.L2140-.L2139
	.byte	1,5,12,7,9
	.half	.L346-.L2140
	.byte	3,2,1,5,3,9
	.half	.L347-.L346
	.byte	3,3,1,5,49,9
	.half	.L348-.L347
	.byte	3,229,118,1,5,21,9
	.half	.L907-.L348
	.byte	3,3,1,9
	.half	.L910-.L907
	.byte	3,213,9,1,5,52,9
	.half	.L2141-.L910
	.byte	3,1,1,5,68,9
	.half	.L1191-.L2141
	.byte	3,127,1,5,2,9
	.half	.L2142-.L1191
	.byte	3,7,1,5,3,9
	.half	.L349-.L2142
	.byte	3,178,118,1,5,30,7,9
	.half	.L911-.L349
	.byte	3,3,1,5,23,9
	.half	.L2143-.L911
	.byte	3,3,1,5,32,9
	.half	.L2144-.L2143
	.byte	3,125,1,5,20,9
	.half	.L350-.L2144
	.byte	3,6,1,5,8,9
	.half	.L1192-.L350
	.byte	1,5,23,7,9
	.half	.L2145-.L1192
	.byte	3,4,1,5,33,9
	.half	.L2146-.L2145
	.byte	1,5,1,9
	.half	.L351-.L2146
	.byte	3,6,1,7,9
	.half	.L543-.L351
	.byte	0,1,1
.L2129:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_ranges'
.L542:
	.word	-1,.L419,0,.L543-.L419,0,0
.L905:
	.word	-1,.L419,.L904-.L419,.L348-.L419,.L906-.L419,.L907-.L419,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_info'
.L544:
	.word	334
	.half	3
	.word	.L545
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L547,.L546
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lMainEraseJobStart',0,1,166,23,13,1,1
	.word	.L411,.L913,.L410
	.byte	4
	.byte	'PhysicalAddress',0,1,166,23,43
	.word	.L566,.L914
	.byte	5
	.word	.L411,.L913
	.byte	6
	.byte	'StatePtr',0,1,168,23,27
	.word	.L564,.L915
	.byte	6
	.byte	'SeqProtErr',0,1,169,23,27
	.word	.L566,.L916
	.byte	7
	.word	.L615,.L917,.L918
	.byte	8
	.word	.L618,.L917,.L918
	.byte	6
	.byte	'RetVal',0,1,156,38,10
	.word	.L566,.L919
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_abbrev'
.L545:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_line'
.L546:
	.word	.L2148-.L2147
.L2147:
	.half	3
	.word	.L2150-.L2149
.L2149:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2150:
	.byte	5,13,7,0,5,2
	.word	.L411
	.byte	3,165,23,1,5,14,9
	.half	.L1116-.L411
	.byte	3,5,1,5,27,9
	.half	.L2151-.L1116
	.byte	1,5,23,9
	.half	.L1117-.L2151
	.byte	3,3,1,5,30,9
	.half	.L2152-.L1117
	.byte	1,5,22,9
	.half	.L2153-.L2152
	.byte	3,3,1,5,24,9
	.half	.L1115-.L2153
	.byte	3,3,1,5,21,9
	.half	.L1119-.L1115
	.byte	3,3,1,9
	.half	.L917-.L1119
	.byte	3,235,14,1,5,52,9
	.half	.L2154-.L917
	.byte	3,1,1,5,68,9
	.half	.L1120-.L2154
	.byte	3,127,1,5,2,9
	.half	.L2155-.L1120
	.byte	3,7,1,5,3,9
	.half	.L243-.L2155
	.byte	3,152,113,1,5,36,7,9
	.half	.L918-.L243
	.byte	3,3,1,5,23,9
	.half	.L2156-.L918
	.byte	3,3,1,5,38,9
	.half	.L2157-.L2156
	.byte	3,125,1,5,20,9
	.half	.L244-.L2157
	.byte	3,6,1,5,8,9
	.half	.L1121-.L244
	.byte	1,5,23,7,9
	.half	.L2158-.L1121
	.byte	3,4,1,5,33,9
	.half	.L2159-.L2158
	.byte	1,5,1,9
	.half	.L245-.L2159
	.byte	3,6,1,7,9
	.half	.L548-.L245
	.byte	0,1,1
.L2148:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_ranges'
.L547:
	.word	-1,.L411,0,.L548-.L411,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_info'
.L549:
	.word	253
	.half	3
	.word	.L550
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L552,.L551
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lUninitDET',0,1,253,33,14
	.word	.L577
	.byte	1,1
	.word	.L427,.L920,.L426
	.byte	4
	.byte	'ServiceID',0,1,253,33,42
	.word	.L921,.L922
	.byte	5
	.word	.L427,.L920
	.byte	6
	.byte	'ErrorFlag',0,1,255,33,9
	.word	.L577,.L923
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_abbrev'
.L550:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_line'
.L551:
	.word	.L2161-.L2160
.L2160:
	.half	3
	.word	.L2163-.L2162
.L2162:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2163:
	.byte	5,14,7,0,5,2
	.word	.L427
	.byte	3,252,33,1,5,13,9
	.half	.L1220-.L427
	.byte	3,4,1,5,6,9
	.half	.L1222-.L1220
	.byte	3,2,1,5,3,9
	.half	.L2164-.L1222
	.byte	1,5,31,7,9
	.half	.L2165-.L2164
	.byte	3,6,1,5,24,9
	.half	.L1219-.L2165
	.byte	3,1,1,5,23,9
	.half	.L2166-.L1219
	.byte	3,1,1,5,16,9
	.half	.L1221-.L2166
	.byte	3,2,1,5,3,9
	.half	.L369-.L1221
	.byte	3,3,1,5,1,9
	.half	.L370-.L369
	.byte	3,1,1,7,9
	.half	.L553-.L370
	.byte	0,1,1
.L2161:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_ranges'
.L552:
	.word	-1,.L427,0,.L553-.L427,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_info'
.L554:
	.word	276
	.half	3
	.word	.L555
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L557,.L556
	.byte	2
	.word	.L430
	.byte	3
	.byte	'Fls_lTimeOutDET',0,1,164,34,14
	.word	.L577
	.byte	1,1
	.word	.L429,.L924,.L428
	.byte	4
	.byte	'ServiceID',0,1,164,34,42
	.word	.L925,.L926
	.byte	5
	.word	.L429,.L924
	.byte	6
	.byte	'StatePtr',0,1,166,34,26
	.word	.L564,.L927
	.byte	6
	.byte	'ErrorFlag',0,1,167,34,9
	.word	.L577,.L928
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_abbrev'
.L555:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_line'
.L556:
	.word	.L2168-.L2167
.L2167:
	.half	3
	.word	.L2170-.L2169
.L2169:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0,0,0,0,0
.L2170:
	.byte	5,14,7,0,5,2
	.word	.L429
	.byte	3,163,34,1,9
	.half	.L1224-.L429
	.byte	3,5,1,5,27,9
	.half	.L2171-.L1224
	.byte	1,5,13,9
	.half	.L1225-.L2171
	.byte	3,2,1,5,15,9
	.half	.L1226-.L1225
	.byte	3,2,1,5,3,9
	.half	.L2172-.L1226
	.byte	1,5,28,7,9
	.half	.L2173-.L2172
	.byte	3,2,1,5,5,9
	.half	.L2174-.L2173
	.byte	1,5,18,7,9
	.half	.L2175-.L2174
	.byte	3,2,1,5,7,9
	.half	.L2176-.L2175
	.byte	1,5,19,7,9
	.half	.L2177-.L2176
	.byte	3,2,1,5,23,9
	.half	.L2178-.L2177
	.byte	1,5,44,9
	.half	.L373-.L2178
	.byte	3,4,1,5,28,9
	.half	.L372-.L373
	.byte	3,4,1,5,5,9
	.half	.L2179-.L372
	.byte	1,5,18,7,9
	.half	.L2180-.L2179
	.byte	3,2,1,5,7,9
	.half	.L2181-.L2180
	.byte	1,5,19,7,9
	.half	.L2182-.L2181
	.byte	3,2,1,5,23,9
	.half	.L2183-.L2182
	.byte	1,5,44,9
	.half	.L376-.L2183
	.byte	3,4,1,5,5,9
	.half	.L375-.L376
	.byte	3,4,1,5,32,7,9
	.half	.L2184-.L375
	.byte	3,3,1,5,22,9
	.half	.L1223-.L2184
	.byte	3,1,1,9
	.half	.L2185-.L1223
	.byte	3,1,1,5,3,9
	.half	.L371-.L2185
	.byte	3,4,1,5,1,9
	.half	.L379-.L371
	.byte	3,1,1,7,9
	.half	.L558-.L379
	.byte	0,1,1
.L2168:
	.sdecl	'.debug_ranges',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_ranges'
.L557:
	.word	-1,.L429,0,.L558-.L429,0,0
	.sdecl	'.debug_info',debug,cluster('Fls_ConfigPtr')
	.sect	'.debug_info'
.L559:
	.word	180
	.half	3
	.word	.L560
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\src\\Fls_17_Pmu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L430
	.byte	3
	.byte	'Fls_ConfigPtr',0,1,253,1,30
	.word	.L562
	.byte	1,5,3
	.word	Fls_ConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Fls_ConfigPtr')
	.sect	'.debug_abbrev'
.L560:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_loc'
.L704:
	.word	-1,.L389,.L1040-.L389,.L1041-.L389
	.half	1
	.byte	98
	.word	.L131-.L389,.L1044-.L389
	.half	1
	.byte	98
	.word	.L134-.L389,.L132-.L389
	.half	1
	.byte	98
	.word	0,0
.L388:
	.word	-1,.L389,0,.L701-.L389
	.half	2
	.byte	138,0
	.word	0,0
.L705:
	.word	-1,.L389,.L1042-.L389,.L1041-.L389
	.half	5
	.byte	144,32,157,32,0
	.word	.L1043-.L389,.L1044-.L389
	.half	5
	.byte	144,32,157,32,0
	.word	.L1045-.L389,.L141-.L389
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L702:
	.word	-1,.L389,.L1039-.L389,.L129-.L389
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_loc'
.L708:
	.word	-1,.L391,.L1047-.L391,.L1048-.L391
	.half	1
	.byte	98
	.word	.L144-.L391,.L151-.L391
	.half	1
	.byte	98
	.word	.L152-.L391,.L153-.L391
	.half	1
	.byte	98
	.word	.L154-.L391,.L145-.L391
	.half	1
	.byte	98
	.word	0,0
.L390:
	.word	-1,.L391,0,.L706-.L391
	.half	2
	.byte	138,0
	.word	0,0
.L709:
	.word	-1,.L391,.L1049-.L391,.L1048-.L391
	.half	5
	.byte	144,32,157,32,0
	.word	.L1050-.L391,.L151-.L391
	.half	5
	.byte	144,32,157,32,0
	.word	.L152-.L391,.L153-.L391
	.half	5
	.byte	144,32,157,32,0
	.word	.L154-.L391,.L155-.L391
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L707:
	.word	-1,.L391,.L1046-.L391,.L151-.L391
	.half	1
	.byte	111
	.word	.L152-.L391,.L153-.L391
	.half	1
	.byte	111
	.word	.L154-.L391,.L1051-.L391
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_loc'
.L700:
	.word	-1,.L387,.L1034-.L387,.L1035-.L387
	.half	1
	.byte	98
	.word	0,0
.L699:
	.word	-1,.L387,.L1036-.L387,.L1035-.L387
	.half	5
	.byte	144,32,157,32,0
	.word	.L124-.L387,.L1037-.L387
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L386:
	.word	-1,.L387,0,.L1021-.L387
	.half	2
	.byte	138,0
	.word	.L1021-.L387,.L685-.L387
	.half	2
	.byte	138,8
	.word	.L685-.L387,.L685-.L387
	.half	2
	.byte	138,0
	.word	0,0
.L692:
	.word	-1,.L387,.L1032-.L387,.L111-.L387
	.half	1
	.byte	90
	.word	0,0
.L688:
	.word	-1,.L387,0,.L1022-.L387
	.half	1
	.byte	85
	.word	.L1026-.L387,.L685-.L387
	.half	1
	.byte	89
	.word	0,0
.L691:
	.word	-1,.L387,0,.L685-.L387
	.half	2
	.byte	145,120
	.word	0,0
.L693:
	.word	-1,.L387,.L1027-.L387,.L110-.L387
	.half	1
	.byte	91
	.word	.L1028-.L387,.L112-.L387
	.half	1
	.byte	91
	.word	.L1029-.L387,.L114-.L387
	.half	1
	.byte	91
	.word	.L1030-.L387,.L117-.L387
	.half	1
	.byte	91
	.word	.L1033-.L387,.L685-.L387
	.half	1
	.byte	91
	.word	.L1038-.L387,.L685-.L387
	.half	1
	.byte	82
	.word	0,0
.L686:
	.word	-1,.L387,0,.L1023-.L387
	.half	1
	.byte	84
	.word	.L1024-.L387,.L685-.L387
	.half	1
	.byte	88
	.word	0,0
.L689:
	.word	-1,.L387,.L1031-.L387,.L111-.L387
	.half	1
	.byte	111
	.word	0,0
.L697:
	.word	0,0
.L687:
	.word	-1,.L387,0,.L1022-.L387
	.half	1
	.byte	100
	.word	.L1025-.L387,.L685-.L387
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_loc'
.L406:
	.word	-1,.L407,0,.L761-.L407
	.half	2
	.byte	138,0
	.word	0,0
.L762:
	.word	-1,.L407,0,.L761-.L407
	.half	1
	.byte	84
	.word	0,0
.L763:
	.word	-1,.L407,.L1100-.L407,.L761-.L407
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_loc'
.L605:
	.word	-1,.L383,.L955-.L383,.L956-.L383
	.half	1
	.byte	98
	.word	0,0
.L603:
	.word	-1,.L383,.L957-.L383,.L956-.L383
	.half	5
	.byte	144,32,157,32,0
	.word	.L22-.L383,.L24-.L383
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L382:
	.word	-1,.L383,0,.L943-.L383
	.half	2
	.byte	138,0
	.word	.L943-.L383,.L578-.L383
	.half	2
	.byte	138,8
	.word	.L578-.L383,.L578-.L383
	.half	2
	.byte	138,0
	.word	0,0
.L585:
	.word	-1,.L383,.L965-.L383,.L33-.L383
	.half	1
	.byte	91
	.word	0,0
.L580:
	.word	-1,.L383,0,.L944-.L383
	.half	1
	.byte	85
	.word	.L14-.L383,.L951-.L383
	.half	1
	.byte	89
	.word	.L952-.L383,.L953-.L383
	.half	1
	.byte	89
	.word	0,0
.L593:
	.word	0,0
.L583:
	.word	-1,.L383,0,.L24-.L383
	.half	2
	.byte	145,120
	.word	.L13-.L383,.L578-.L383
	.half	2
	.byte	145,120
	.word	0,0
.L619:
	.word	-1,.L383,.L971-.L383,.L972-.L383
	.half	1
	.byte	95
	.word	0,0
.L610:
	.word	-1,.L383,.L962-.L383,.L963-.L383
	.half	1
	.byte	90
	.word	.L33-.L383,.L28-.L383
	.half	1
	.byte	90
	.word	0,0
.L614:
	.word	-1,.L383,.L969-.L383,.L970-.L383
	.half	1
	.byte	95
	.word	0,0
.L586:
	.word	-1,.L383,.L959-.L383,.L27-.L383
	.half	1
	.byte	90
	.word	.L963-.L383,.L33-.L383
	.half	1
	.byte	90
	.word	.L28-.L383,.L578-.L383
	.half	1
	.byte	90
	.word	.L973-.L383,.L578-.L383
	.half	1
	.byte	82
	.word	0,0
.L596:
	.word	-1,.L383,.L946-.L383,.L12-.L383
	.half	1
	.byte	95
	.word	.L950-.L383,.L14-.L383
	.half	1
	.byte	95
	.word	.L954-.L383,.L18-.L383
	.half	1
	.byte	95
	.word	.L599-.L383,.L24-.L383
	.half	1
	.byte	95
	.word	.L13-.L383,.L958-.L383
	.half	1
	.byte	95
	.word	0,0
.L581:
	.word	-1,.L383,.L964-.L383,.L33-.L383
	.half	1
	.byte	111
	.word	0,0
.L601:
	.word	0,0
.L595:
	.word	-1,.L383,.L598-.L383,.L24-.L383
	.half	1
	.byte	111
	.word	0,0
.L609:
	.word	-1,.L383,.L960-.L383,.L961-.L383
	.half	1
	.byte	111
	.word	0,0
.L579:
	.word	-1,.L383,0,.L945-.L383
	.half	1
	.byte	84
	.word	.L12-.L383,.L947-.L383
	.half	1
	.byte	88
	.word	.L948-.L383,.L949-.L383
	.half	1
	.byte	88
	.word	.L952-.L383,.L953-.L383
	.half	1
	.byte	88
	.word	.L966-.L383,.L967-.L383
	.half	1
	.byte	88
	.word	.L34-.L383,.L968-.L383
	.half	1
	.byte	88
	.word	0,0
.L591:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_loc'
.L715:
	.word	-1,.L401,0,.L216-.L401
	.half	1
	.byte	84
	.word	.L215-.L401,.L714-.L401
	.half	1
	.byte	84
	.word	0,0
.L400:
	.word	-1,.L401,0,.L714-.L401
	.half	2
	.byte	138,0
	.word	0,0
.L717:
	.word	-1,.L401,.L1091-.L401,.L1092-.L401
	.half	1
	.byte	111
	.word	0,0
.L716:
	.word	-1,.L401,.L1090-.L401,.L214-.L401
	.half	1
	.byte	82
	.word	.L1093-.L401,.L216-.L401
	.half	1
	.byte	82
	.word	.L215-.L401,.L714-.L401
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_loc'
.L402:
	.word	-1,.L403,0,.L719-.L403
	.half	2
	.byte	138,0
	.word	0,0
.L721:
	.word	-1,.L403,.L1094-.L403,.L219-.L403
	.half	1
	.byte	82
	.word	.L220-.L403,.L719-.L403
	.half	1
	.byte	82
	.word	0,0
.L720:
	.word	-1,.L403,.L1095-.L403,.L220-.L403
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_loc'
.L404:
	.word	-1,.L405,0,.L757-.L405
	.half	2
	.byte	138,0
	.word	0,0
.L759:
	.word	-1,.L405,.L1098-.L405,.L1099-.L405
	.half	1
	.byte	95
	.word	0,0
.L760:
	.word	-1,.L405,.L1096-.L405,.L757-.L405
	.half	1
	.byte	82
	.word	0,0
.L758:
	.word	-1,.L405,.L1097-.L405,.L757-.L405
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_loc'
.L398:
	.word	-1,.L399,0,.L711-.L399
	.half	2
	.byte	138,0
	.word	0,0
.L713:
	.word	-1,.L399,.L1088-.L399,.L209-.L399
	.half	1
	.byte	111
	.word	0,0
.L712:
	.word	-1,.L399,.L1087-.L399,.L208-.L399
	.half	1
	.byte	82
	.word	.L1089-.L399,.L211-.L399
	.half	1
	.byte	82
	.word	.L209-.L399,.L711-.L399
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_loc'
.L563:
	.word	-1,.L381,0,.L929-.L381
	.half	1
	.byte	100
	.word	.L930-.L381,.L931-.L381
	.half	1
	.byte	111
	.word	.L2-.L381,.L932-.L381
	.half	1
	.byte	100
	.word	.L5-.L381,.L933-.L381
	.half	1
	.byte	100
	.word	0,0
.L568:
	.word	0,0
.L567:
	.word	-1,.L381,.L934-.L381,.L935-.L381
	.half	1
	.byte	95
	.word	.L935-.L381,.L936-.L381
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L380:
	.word	-1,.L381,0,.L561-.L381
	.half	2
	.byte	138,0
	.word	0,0
.L576:
	.word	-1,.L381,.L942-.L381,.L3-.L381
	.half	1
	.byte	95
	.word	0,0
.L565:
	.word	-1,.L381,.L931-.L381,.L939-.L381
	.half	1
	.byte	111
	.word	0,0
.L575:
	.word	-1,.L381,.L940-.L381,.L941-.L381
	.half	1
	.byte	111
	.word	0,0
.L571:
	.word	-1,.L381,.L937-.L381,.L938-.L381
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_loc'
.L724:
	.word	-1,.L395,.L1059-.L395,.L160-.L395
	.half	1
	.byte	108
	.word	0,0
.L727:
	.word	-1,.L395,.L1056-.L395,.L1057-.L395
	.half	1
	.byte	82
	.word	.L167-.L395,.L1062-.L395
	.half	1
	.byte	82
	.word	0,0
.L726:
	.word	-1,.L395,.L1055-.L395,.L1056-.L395
	.half	1
	.byte	82
	.word	0,0
.L725:
	.word	-1,.L395,.L728-.L395,.L1057-.L395
	.half	5
	.byte	144,32,157,32,0
	.word	.L167-.L395,.L1062-.L395
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L394:
	.word	-1,.L395,0,.L722-.L395
	.half	2
	.byte	138,0
	.word	0,0
.L732:
	.word	-1,.L395,.L1063-.L395,.L1064-.L395
	.half	1
	.byte	95
	.word	0,0
.L734:
	.word	-1,.L395,.L1065-.L395,.L1066-.L395
	.half	1
	.byte	95
	.word	0,0
.L730:
	.word	-1,.L395,.L1060-.L395,.L1061-.L395
	.half	1
	.byte	95
	.word	0,0
.L736:
	.word	-1,.L395,.L1067-.L395,.L1068-.L395
	.half	1
	.byte	95
	.word	0,0
.L723:
	.word	-1,.L395,.L1058-.L395,.L160-.L395
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_loc'
.L756:
	.word	-1,.L397,.L1082-.L397,.L1083-.L397
	.half	1
	.byte	98
	.word	0,0
.L755:
	.word	-1,.L397,.L1084-.L397,.L1083-.L397
	.half	5
	.byte	144,32,157,32,0
	.word	.L203-.L397,.L1085-.L397
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L396:
	.word	-1,.L397,0,.L1069-.L397
	.half	2
	.byte	138,0
	.word	.L1069-.L397,.L741-.L397
	.half	2
	.byte	138,8
	.word	.L741-.L397,.L741-.L397
	.half	2
	.byte	138,0
	.word	0,0
.L749:
	.word	-1,.L397,.L1081-.L397,.L190-.L397
	.half	1
	.byte	91
	.word	0,0
.L744:
	.word	-1,.L397,0,.L1070-.L397
	.half	1
	.byte	85
	.word	.L1074-.L397,.L741-.L397
	.half	1
	.byte	89
	.word	0,0
.L747:
	.word	-1,.L397,0,.L741-.L397
	.half	2
	.byte	145,120
	.word	0,0
.L748:
	.word	-1,.L397,.L1075-.L397,.L189-.L397
	.half	1
	.byte	90
	.word	.L1076-.L397,.L191-.L397
	.half	1
	.byte	90
	.word	.L1077-.L397,.L193-.L397
	.half	1
	.byte	90
	.word	.L1078-.L397,.L196-.L397
	.half	1
	.byte	90
	.word	.L1080-.L397,.L741-.L397
	.half	1
	.byte	90
	.word	.L1086-.L397,.L741-.L397
	.half	1
	.byte	82
	.word	0,0
.L742:
	.word	-1,.L397,0,.L1071-.L397
	.half	1
	.byte	84
	.word	.L1072-.L397,.L741-.L397
	.half	1
	.byte	88
	.word	0,0
.L745:
	.word	-1,.L397,.L1079-.L397,.L190-.L397
	.half	1
	.byte	111
	.word	0,0
.L753:
	.word	0,0
.L743:
	.word	-1,.L397,0,.L1070-.L397
	.half	1
	.byte	100
	.word	.L1073-.L397,.L741-.L397
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_loc'
.L740:
	.word	-1,.L393,.L1053-.L393,.L1054-.L393
	.half	1
	.byte	98
	.word	.L158-.L393,.L159-.L393
	.half	1
	.byte	98
	.word	0,0
.L392:
	.word	-1,.L393,0,.L737-.L393
	.half	2
	.byte	138,0
	.word	0,0
.L739:
	.word	-1,.L393,0,.L1052-.L393
	.half	1
	.byte	84
	.word	.L158-.L393,.L159-.L393
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_loc'
.L665:
	.word	0,0
.L649:
	.word	-1,.L385,.L992-.L385,.L993-.L385
	.half	1
	.byte	111
	.word	0,0
.L648:
	.word	-1,.L385,.L994-.L385,.L995-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	.L70-.L385,.L996-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L384:
	.word	-1,.L385,0,.L974-.L385
	.half	2
	.byte	138,0
	.word	.L974-.L385,.L620-.L385
	.half	2
	.byte	138,16
	.word	.L620-.L385,.L620-.L385
	.half	2
	.byte	138,0
	.word	0,0
.L631:
	.word	-1,.L385,.L985-.L385,.L663-.L385
	.half	1
	.byte	91
	.word	.L78-.L385,.L64-.L385
	.half	1
	.byte	91
	.word	0,0
.L623:
	.word	-1,.L385,0,.L975-.L385
	.half	1
	.byte	85
	.word	.L980-.L385,.L93-.L385
	.half	1
	.byte	89
	.word	.L78-.L385,.L64-.L385
	.half	1
	.byte	89
	.word	0,0
.L657:
	.word	-1,.L385,.L1003-.L385,.L79-.L385
	.half	1
	.byte	81
	.word	0,0
.L667:
	.word	0,0
.L640:
	.word	0,0
.L672:
	.word	-1,.L385,.L999-.L385,.L1009-.L385
	.half	1
	.byte	88
	.word	.L1014-.L385,.L89-.L385
	.half	1
	.byte	88
	.word	0,0
.L673:
	.word	-1,.L385,.L1013-.L385,.L91-.L385
	.half	1
	.byte	95
	.word	.L92-.L385,.L93-.L385
	.half	1
	.byte	95
	.word	.L93-.L385,.L89-.L385
	.half	1
	.byte	89
	.word	0,0
.L659:
	.word	-1,.L385,.L1002-.L385,.L79-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L628:
	.word	-1,.L385,.L986-.L385,.L65-.L385
	.half	1
	.byte	111
	.word	.L987-.L385,.L65-.L385
	.half	2
	.byte	145,116
	.word	.L988-.L385,.L67-.L385
	.half	1
	.byte	111
	.word	.L989-.L385,.L67-.L385
	.half	2
	.byte	145,116
	.word	.L990-.L385,.L66-.L385
	.half	1
	.byte	111
	.word	.L991-.L385,.L64-.L385
	.half	2
	.byte	145,116
	.word	.L1010-.L385,.L90-.L385
	.half	1
	.byte	98
	.word	.L1011-.L385,.L1012-.L385
	.half	1
	.byte	95
	.word	.L91-.L385,.L92-.L385
	.half	1
	.byte	98
	.word	0,0
.L626:
	.word	-1,.L385,0,.L620-.L385
	.half	2
	.byte	145,112
	.word	0,0
.L629:
	.word	-1,.L385,.L633-.L385,.L620-.L385
	.half	1
	.byte	90
	.word	.L1020-.L385,.L620-.L385
	.half	1
	.byte	82
	.word	0,0
.L671:
	.word	-1,.L385,.L1007-.L385,.L1008-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	.L95-.L385,.L1015-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	.L98-.L385,.L675-.L385
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L642:
	.word	-1,.L385,.L981-.L385,.L982-.L385
	.half	1
	.byte	91
	.word	0,0
.L681:
	.word	-1,.L385,.L1016-.L385,.L679-.L385
	.half	1
	.byte	85
	.word	0,0
.L684:
	.word	-1,.L385,.L1018-.L385,.L1019-.L385
	.half	1
	.byte	95
	.word	0,0
.L652:
	.word	-1,.L385,.L978-.L385,.L999-.L385
	.half	1
	.byte	88
	.word	.L78-.L385,.L64-.L385
	.half	1
	.byte	88
	.word	0,0
.L661:
	.word	-1,.L385,.L1005-.L385,.L1006-.L385
	.half	1
	.byte	95
	.word	0,0
.L669:
	.word	0,0
.L622:
	.word	-1,.L385,0,.L975-.L385
	.half	1
	.byte	100
	.word	.L979-.L385,.L620-.L385
	.half	2
	.byte	145,120
	.word	.L983-.L385,.L52-.L385
	.half	1
	.byte	111
	.word	.L1000-.L385,.L1001-.L385
	.half	1
	.byte	111
	.word	0,0
.L638:
	.word	0,0
.L624:
	.word	-1,.L385,.L984-.L385,.L64-.L385
	.half	1
	.byte	109
	.word	.L678-.L385,.L679-.L385
	.half	1
	.byte	100
	.word	0,0
.L646:
	.word	0,0
.L656:
	.word	-1,.L385,.L1001-.L385,.L79-.L385
	.half	1
	.byte	111
	.word	0,0
.L680:
	.word	-1,.L385,.L1017-.L385,.L89-.L385
	.half	1
	.byte	111
	.word	0,0
.L651:
	.word	-1,.L385,.L997-.L385,.L998-.L385
	.half	1
	.byte	111
	.word	0,0
.L621:
	.word	-1,.L385,0,.L976-.L385
	.half	1
	.byte	84
	.word	.L977-.L385,.L978-.L385
	.half	1
	.byte	88
	.word	0,0
.L636:
	.word	0,0
.L630:
	.word	0,0
.L658:
	.word	-1,.L385,.L1004-.L385,.L79-.L385
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_loc'
.L884:
	.word	-1,.L421,.L1197-.L421,.L881-.L421
	.half	1
	.byte	108
	.word	0,0
.L420:
	.word	-1,.L421,0,.L881-.L421
	.half	2
	.byte	138,0
	.word	0,0
.L882:
	.word	-1,.L421,0,.L1193-.L421
	.half	1
	.byte	84
	.word	.L1194-.L421,.L881-.L421
	.half	1
	.byte	88
	.word	.L354-.L421,.L1198-.L421
	.half	1
	.byte	84
	.word	0,0
.L883:
	.word	-1,.L421,.L1195-.L421,.L1196-.L421
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_loc'
.L888:
	.word	-1,.L423,.L1201-.L423,.L361-.L423
	.half	1
	.byte	111
	.word	.L1204-.L423,.L885-.L423
	.half	1
	.byte	111
	.word	0,0
.L422:
	.word	-1,.L423,0,.L1199-.L423
	.half	2
	.byte	138,0
	.word	.L1199-.L423,.L885-.L423
	.half	2
	.byte	138,8
	.word	.L885-.L423,.L885-.L423
	.half	2
	.byte	138,0
	.word	0,0
.L886:
	.word	-1,.L423,0,.L885-.L423
	.half	1
	.byte	84
	.word	0,0
.L891:
	.word	-1,.L423,0,.L885-.L423
	.half	2
	.byte	145,120
	.word	0,0
.L889:
	.word	-1,.L423,.L1202-.L423,.L361-.L423
	.half	1
	.byte	100
	.word	.L1205-.L423,.L885-.L423
	.half	1
	.byte	100
	.word	.L1206-.L423,.L1207-.L423
	.half	1
	.byte	95
	.word	0,0
.L887:
	.word	-1,.L423,.L1200-.L423,.L361-.L423
	.half	1
	.byte	98
	.word	.L1203-.L423,.L885-.L423
	.half	1
	.byte	98
	.word	.L1208-.L423,.L364-.L423
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_loc'
.L856:
	.word	-1,.L415,0,.L1137-.L415
	.half	1
	.byte	84
	.word	.L282-.L415,.L1148-.L415
	.half	1
	.byte	84
	.word	.L284-.L415,.L290-.L415
	.half	1
	.byte	84
	.word	0,0
.L414:
	.word	-1,.L415,0,.L855-.L415
	.half	2
	.byte	138,0
	.word	0,0
.L859:
	.word	-1,.L415,.L862-.L415,.L1137-.L415
	.half	1
	.byte	81
	.word	.L282-.L415,.L1148-.L415
	.half	1
	.byte	81
	.word	.L284-.L415,.L1149-.L415
	.half	1
	.byte	81
	.word	.L1149-.L415,.L1151-.L415
	.half	1
	.byte	95
	.word	0,0
.L861:
	.word	0,0
.L877:
	.word	-1,.L415,.L1138-.L415,.L1137-.L415
	.half	1
	.byte	82
	.word	.L282-.L415,.L1148-.L415
	.half	1
	.byte	82
	.word	.L284-.L415,.L290-.L415
	.half	1
	.byte	82
	.word	0,0
.L858:
	.word	0,0
.L880:
	.word	-1,.L415,.L1146-.L415,.L1147-.L415
	.half	1
	.byte	95
	.word	.L284-.L415,.L1150-.L415
	.half	1
	.byte	95
	.word	0,0
.L860:
	.word	-1,.L415,.L1139-.L415,.L269-.L415
	.half	5
	.byte	144,32,157,32,0
	.word	.L1140-.L415,.L1141-.L415
	.half	1
	.byte	98
	.word	.L1142-.L415,.L1143-.L415
	.half	1
	.byte	95
	.word	.L1144-.L415,.L1145-.L415
	.half	1
	.byte	95
	.word	0,0
.L857:
	.word	0,0
.L876:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainErase')
	.sect	'.debug_loc'
.L765:
	.word	-1,.L409,0,.L1102-.L409
	.half	1
	.byte	84
	.word	.L1103-.L409,.L764-.L409
	.half	1
	.byte	88
	.word	.L227-.L409,.L230-.L409
	.half	1
	.byte	84
	.word	0,0
.L772:
	.word	-1,.L409,.L235-.L409,.L1113-.L409
	.half	5
	.byte	144,32,157,32,0
	.word	.L237-.L409,.L234-.L409
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L771:
	.word	-1,.L409,.L1111-.L409,.L235-.L409
	.half	1
	.byte	95
	.word	.L1112-.L409,.L1113-.L409
	.half	1
	.byte	98
	.word	.L237-.L409,.L234-.L409
	.half	1
	.byte	98
	.word	0,0
.L408:
	.word	-1,.L409,0,.L1101-.L409
	.half	2
	.byte	138,0
	.word	.L1101-.L409,.L764-.L409
	.half	2
	.byte	138,8
	.word	.L764-.L409,.L764-.L409
	.half	2
	.byte	138,0
	.word	0,0
.L767:
	.word	-1,.L409,.L1106-.L409,.L1107-.L409
	.half	1
	.byte	90
	.word	.L1107-.L409,.L1114-.L409
	.half	1
	.byte	95
	.word	0,0
.L769:
	.word	-1,.L409,0,.L764-.L409
	.half	2
	.byte	145,120
	.word	0,0
.L770:
	.word	-1,.L409,.L1104-.L409,.L764-.L409
	.half	1
	.byte	89
	.word	0,0
.L775:
	.word	-1,.L409,.L1110-.L409,.L228-.L409
	.half	1
	.byte	91
	.word	0,0
.L766:
	.word	-1,.L409,.L1105-.L409,.L764-.L409
	.half	1
	.byte	111
	.word	0,0
.L774:
	.word	-1,.L409,.L1108-.L409,.L1109-.L409
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_loc'
.L410:
	.word	-1,.L411,0,.L913-.L411
	.half	2
	.byte	138,0
	.word	0,0
.L914:
	.word	-1,.L411,0,.L1115-.L411
	.half	1
	.byte	84
	.word	.L1116-.L411,.L913-.L411
	.half	1
	.byte	88
	.word	.L1118-.L411,.L1119-.L411
	.half	1
	.byte	84
	.word	0,0
.L919:
	.word	-1,.L411,.L1120-.L411,.L1121-.L411
	.half	1
	.byte	95
	.word	0,0
.L916:
	.word	0,0
.L915:
	.word	-1,.L411,.L1117-.L411,.L913-.L411
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainRead')
	.sect	'.debug_loc'
.L832:
	.word	-1,.L413,0,.L1122-.L413
	.half	1
	.byte	84
	.word	.L261-.L413,.L264-.L413
	.half	1
	.byte	84
	.word	0,0
.L412:
	.word	-1,.L413,0,.L831-.L413
	.half	2
	.byte	138,0
	.word	0,0
.L835:
	.word	-1,.L413,.L1135-.L413,.L1136-.L413
	.half	1
	.byte	95
	.word	0,0
.L837:
	.word	0,0
.L851:
	.word	-1,.L413,.L1123-.L413,.L1122-.L413
	.half	1
	.byte	81
	.word	.L261-.L413,.L264-.L413
	.half	1
	.byte	81
	.word	0,0
.L834:
	.word	0,0
.L854:
	.word	-1,.L413,.L1133-.L413,.L1134-.L413
	.half	1
	.byte	95
	.word	0,0
.L836:
	.word	-1,.L413,.L1124-.L413,.L252-.L413
	.half	5
	.byte	144,32,157,32,0
	.word	.L252-.L413,.L1125-.L413
	.half	1
	.byte	98
	.word	.L1125-.L413,.L1126-.L413
	.half	5
	.byte	144,32,157,32,0
	.word	.L1127-.L413,.L1128-.L413
	.half	1
	.byte	98
	.word	.L1129-.L413,.L1130-.L413
	.half	1
	.byte	95
	.word	.L1131-.L413,.L1132-.L413
	.half	1
	.byte	95
	.word	0,0
.L833:
	.word	0,0
.L850:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_loc'
.L785:
	.word	0,0
.L777:
	.word	-1,.L417,0,.L298-.L417
	.half	1
	.byte	84
	.word	.L1153-.L417,.L784-.L417
	.half	1
	.byte	89
	.word	.L294-.L417,.L307-.L417
	.half	1
	.byte	84
	.word	.L294-.L417,.L320-.L417
	.half	1
	.byte	89
	.word	.L321-.L417,.L827-.L417
	.half	1
	.byte	89
	.word	.L329-.L417,.L305-.L417
	.half	1
	.byte	89
	.word	0,0
.L811:
	.word	-1,.L417,.L1169-.L417,.L1171-.L417
	.half	5
	.byte	144,32,157,32,0
	.word	.L324-.L417,.L1176-.L417
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L782:
	.word	0,0
.L812:
	.word	-1,.L417,.L796-.L417,.L310-.L417
	.half	1
	.byte	90
	.word	.L802-.L417,.L315-.L417
	.half	1
	.byte	90
	.word	.L1172-.L417,.L305-.L417
	.half	1
	.byte	90
	.word	0,0
.L416:
	.word	-1,.L417,0,.L1152-.L417
	.half	2
	.byte	138,0
	.word	.L1152-.L417,.L776-.L417
	.half	2
	.byte	138,8
	.word	.L776-.L417,.L776-.L417
	.half	2
	.byte	138,0
	.word	0,0
.L779:
	.word	-1,.L417,.L1177-.L417,.L1178-.L417
	.half	1
	.byte	95
	.word	0,0
.L786:
	.word	0,0
.L789:
	.word	-1,.L417,.L1157-.L417,.L1158-.L417
	.half	1
	.byte	88
	.word	.L1160-.L417,.L294-.L417
	.half	1
	.byte	88
	.word	0,0
.L829:
	.word	-1,.L417,.L1181-.L417,.L1182-.L417
	.half	1
	.byte	88
	.word	.L1184-.L417,.L332-.L417
	.half	1
	.byte	88
	.word	0,0
.L783:
	.word	-1,.L417,.L819-.L417,.L320-.L417
	.half	1
	.byte	91
	.word	.L321-.L417,.L311-.L417
	.half	1
	.byte	91
	.word	0,0
.L798:
	.word	0,0
.L790:
	.word	-1,.L417,.L1159-.L417,.L296-.L417
	.half	1
	.byte	95
	.word	.L297-.L417,.L298-.L417
	.half	1
	.byte	95
	.word	.L298-.L417,.L294-.L417
	.half	1
	.byte	90
	.word	0,0
.L830:
	.word	-1,.L417,.L1183-.L417,.L336-.L417
	.half	1
	.byte	95
	.word	.L337-.L417,.L338-.L417
	.half	1
	.byte	95
	.word	.L338-.L417,.L332-.L417
	.half	1
	.byte	91
	.word	0,0
.L808:
	.word	-1,.L417,.L1174-.L417,.L322-.L417
	.half	1
	.byte	95
	.word	.L1175-.L417,.L311-.L417
	.half	1
	.byte	110
	.word	0,0
.L781:
	.word	-1,.L417,0,.L320-.L417
	.half	2
	.byte	145,120
	.word	.L321-.L417,.L776-.L417
	.half	2
	.byte	145,120
	.word	0,0
.L816:
	.word	-1,.L417,.L1166-.L417,.L312-.L417
	.half	1
	.byte	95
	.word	.L313-.L417,.L1167-.L417
	.half	1
	.byte	95
	.word	0,0
.L788:
	.word	-1,.L417,.L1155-.L417,.L1156-.L417
	.half	1
	.byte	81
	.word	.L300-.L417,.L1161-.L417
	.half	1
	.byte	81
	.word	.L303-.L417,.L304-.L417
	.half	1
	.byte	81
	.word	0,0
.L828:
	.word	-1,.L417,.L1179-.L417,.L1180-.L417
	.half	1
	.byte	81
	.word	.L340-.L417,.L343-.L417
	.half	1
	.byte	81
	.word	0,0
.L821:
	.word	-1,.L417,.L1168-.L417,.L320-.L417
	.half	5
	.byte	144,32,157,32,0
	.word	.L321-.L417,.L1169-.L417
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L793:
	.word	-1,.L417,.L1164-.L417,.L320-.L417
	.half	1
	.byte	88
	.word	.L321-.L417,.L322-.L417
	.half	1
	.byte	88
	.word	0,0
.L826:
	.word	-1,.L417,.L1176-.L417,.L325-.L417
	.half	1
	.byte	95
	.word	0,0
.L787:
	.word	0,0
.L810:
	.word	-1,.L417,.L1173-.L417,.L311-.L417
	.half	1
	.byte	109
	.word	0,0
.L778:
	.word	-1,.L417,.L1154-.L417,.L320-.L417
	.half	1
	.byte	111
	.word	.L321-.L417,.L1170-.L417
	.half	1
	.byte	111
	.word	.L330-.L417,.L332-.L417
	.half	1
	.byte	111
	.word	.L329-.L417,.L305-.L417
	.half	1
	.byte	111
	.word	0,0
.L807:
	.word	0,0
.L820:
	.word	0,0
.L792:
	.word	-1,.L417,.L1162-.L417,.L1163-.L417
	.half	1
	.byte	98
	.word	0,0
.L815:
	.word	-1,.L417,.L1165-.L417,.L1166-.L417
	.half	1
	.byte	95
	.word	.L312-.L417,.L313-.L417
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_loc'
.L418:
	.word	-1,.L419,0,.L899-.L419
	.half	2
	.byte	138,0
	.word	0,0
.L900:
	.word	-1,.L419,0,.L904-.L419
	.half	1
	.byte	84
	.word	.L1185-.L419,.L899-.L419
	.half	1
	.byte	88
	.word	.L1190-.L419,.L907-.L419
	.half	1
	.byte	84
	.word	0,0
.L909:
	.word	-1,.L419,.L1187-.L419,.L907-.L419
	.half	1
	.byte	85
	.word	0,0
.L912:
	.word	-1,.L419,.L1191-.L419,.L1192-.L419
	.half	1
	.byte	95
	.word	0,0
.L902:
	.word	0,0
.L901:
	.word	-1,.L419,.L1186-.L419,.L899-.L419
	.half	1
	.byte	108
	.word	.L906-.L419,.L907-.L419
	.half	1
	.byte	100
	.word	0,0
.L908:
	.word	-1,.L419,.L1188-.L419,.L1189-.L419
	.half	1
	.byte	111
	.word	0,0
.L903:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_loc'
.L928:
	.word	-1,.L429,.L1226-.L429,.L924-.L429
	.half	1
	.byte	88
	.word	.L1227-.L429,.L924-.L429
	.half	1
	.byte	82
	.word	0,0
.L428:
	.word	-1,.L429,0,.L924-.L429
	.half	2
	.byte	138,0
	.word	0,0
.L926:
	.word	-1,.L429,0,.L1223-.L429
	.half	1
	.byte	84
	.word	.L1224-.L429,.L371-.L429
	.half	1
	.byte	86
	.word	0,0
.L927:
	.word	-1,.L429,.L1225-.L429,.L924-.L429
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_loc'
.L895:
	.word	-1,.L425,.L1211-.L425,.L365-.L425
	.half	1
	.byte	111
	.word	.L1214-.L425,.L892-.L425
	.half	1
	.byte	111
	.word	0,0
.L424:
	.word	-1,.L425,0,.L1209-.L425
	.half	2
	.byte	138,0
	.word	.L1209-.L425,.L892-.L425
	.half	2
	.byte	138,8
	.word	.L892-.L425,.L892-.L425
	.half	2
	.byte	138,0
	.word	0,0
.L893:
	.word	-1,.L425,0,.L892-.L425
	.half	1
	.byte	84
	.word	0,0
.L898:
	.word	-1,.L425,0,.L892-.L425
	.half	2
	.byte	145,120
	.word	0,0
.L896:
	.word	-1,.L425,.L1212-.L425,.L365-.L425
	.half	1
	.byte	100
	.word	.L1215-.L425,.L892-.L425
	.half	1
	.byte	100
	.word	.L1216-.L425,.L1217-.L425
	.half	1
	.byte	95
	.word	0,0
.L894:
	.word	-1,.L425,.L1210-.L425,.L365-.L425
	.half	1
	.byte	98
	.word	.L1213-.L425,.L892-.L425
	.half	1
	.byte	98
	.word	.L1218-.L425,.L892-.L425
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_loc'
.L923:
	.word	-1,.L427,.L1222-.L427,.L1221-.L427
	.half	1
	.byte	82
	.word	.L369-.L427,.L920-.L427
	.half	1
	.byte	82
	.word	0,0
.L426:
	.word	-1,.L427,0,.L920-.L427
	.half	2
	.byte	138,0
	.word	0,0
.L922:
	.word	-1,.L427,0,.L1219-.L427
	.half	1
	.byte	84
	.word	.L1220-.L427,.L1221-.L427
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2186:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L381,.L561-.L381
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Erase')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L383,.L578-.L383
	.byte	4
	.word	(.L943-.L383)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L578-.L943)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Write')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L385,.L620-.L385
	.byte	4
	.word	(.L974-.L385)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L620-.L974)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Compare')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L387,.L685-.L387
	.byte	4
	.word	(.L1021-.L387)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L685-.L1021)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Cancel')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L389,.L701-.L389
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_CancelNonEraseJobs')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L391,.L706-.L391
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_SetMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L393,.L737-.L393
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_MainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L395,.L722-.L395
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_Read')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L397,.L741-.L397
	.byte	4
	.word	(.L1069-.L397)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L741-.L1069)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2186,.L399,.L711-.L399
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_GetBankStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2186,.L401,.L714-.L401
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_GetJobResult')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L403,.L719-.L403
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_GetOperStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2186,.L405,.L757-.L405
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_17_Pmu_ControlTimeoutDet')
	.sect	'.debug_frame'
	.word	24
	.word	.L2186,.L407,.L761-.L407
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainErase')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L409,.L764-.L409
	.byte	4
	.word	(.L1101-.L409)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L764-.L1101)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainEraseJobStart')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L411,.L913-.L411
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L413,.L831-.L413
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainCompare')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L415,.L855-.L415
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainWrite')
	.sect	'.debug_frame'
	.word	36
	.word	.L2186,.L417,.L776-.L417
	.byte	4
	.word	(.L1152-.L417)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L776-.L1152)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_lMainWriteJobStart')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L419,.L899-.L419
	.sdecl	'.debug_frame',debug,cluster('Fls_lErrorHandler')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L421,.L881-.L421
	.sdecl	'.debug_frame',debug,cluster('Fls_lLoadAccessCode')
	.sect	'.debug_frame'
	.word	44
	.word	.L2186,.L423,.L885-.L423
	.byte	8,19,8,21,8,22,8,23,4
	.word	(.L1199-.L423)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L885-.L1199)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_lUnLoadAccessCode')
	.sect	'.debug_frame'
	.word	44
	.word	.L2186,.L425,.L892-.L425
	.byte	8,19,8,21,8,22,8,23,4
	.word	(.L1209-.L425)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L892-.L1209)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fls_lUninitDET')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L427,.L920-.L427
	.sdecl	'.debug_frame',debug,cluster('Fls_lTimeOutDET')
	.sect	'.debug_frame'
	.word	12
	.word	.L2186,.L429,.L924-.L429

; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5081                                                              FLS_D0BUSY);
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5082    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5083    #endif
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5084   
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5085    return RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5086  }
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5087  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5088  
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5089  #define FLS_17_PMU_STOP_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5090  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5091   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5092  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5093  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5094  **                      End of File                                           **
; Targets\TC275\MCAL\MCAL_Modules\Fls\src\Fls_17_Pmu.c	  5095  *******************************************************************************/

	; Module end
