	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17504a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\Port.src Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c"
	.compiler_name		"ctc"
	;source	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c'

	
$TC16X
	
	.sdecl	'.text.Port.Port_Init',code,cluster('Port_Init')
	.sect	'.text.Port.Port_Init'
	.align	2
	
	.global	Port_Init

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     1  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     2  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     3  ** Copyright (C) Infineon Technologies (2018)                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     4  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     5  ** All rights reserved.                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     6  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     7  ** This document contains proprietary information belonging to Infineon       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	     9  ** of its contents is not permitted without prior written authorization.      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    10  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    11  ********************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    12  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    13  **  $FILENAME   : Port.c $                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    14  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    15  **  $CC VERSION : \main\80 $                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    16  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    17  **  $DATE       : 2018-01-02 $                                               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    18  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    19  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    20  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    21  **  VENDOR       : Infineon Technologies                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    22  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    23  **  DESCRIPTION  : This file contains                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    24  **                 - functionality of Port driver.                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    25  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    26  **  MAY BE CHANGED BY USER [Yes/No]: No                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    27  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    28  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    29  /*  TRACEABILITY : [cover parentID=DS_AS_PORT107_PORT146_4,DS_NAS_PORT_PR127,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    30                      SAS_NAS_PORT_PR913,DS_AS40X_PORT114,DS_NAS_PORT_PR131,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    31                      DS_NAS_PORT_PR228,DS_AS_PORT107_PORT146,SAS_NAS_ALL_PR1652,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    32                      SAS_AS_PORT080_PORT108_PORT130_PORT131_PORT133_PORT208,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    33                      SAS_NAS_PORT_PR734,SAS_NAS_ALL_PR749,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    34                      SAS_NAS_ALL_PR630_PR631,SAS_NAS_ALL_PR70]
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    35  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    36                     [/cover]                                                   */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    37  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    38  **                      Includes                                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    39  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    40  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    41  /* Inclusion of Tasking sfr file */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    42  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    43  #include "IfxPort_reg.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    44  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    45  /* Global functions like Set/Reset END INIT protection bit,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    46    Enable/Disable interrupts, Automic write function */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    47  #include "Mcal.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    48  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    49  /* Own header file, this includes own configuration file also */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    50  /* PORT080: Inclusion structure */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    51  #include "Port.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    52  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    53  /*AS and SW version Specific include file */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    54  #include "Port_Ver.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    55  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    56  /* Inclusion from Safety Error */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    57  #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    58  #include "SafetyReport.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    59  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    60  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    61  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    62  **                      Private Macro Definitions                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    63  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    64  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    65  /*
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    66    Offset definitions for data in Port configuration
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    67  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    68  /* Initial Control data offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    69  #define PORT_DATA_OFS_CTL      (0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    70  /* Initial level data offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    71  #define PORT_DATA_OFS_LEVEL    (4U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    72  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    73  /* If pin mode changeable is enabled */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    74  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    75  /* Pin mode changeable or not offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    76  #define PORT_DATA_OFS_MODE     (7U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    77  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    78  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    79  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    80  #endif /* (PORT_SET_PIN_MODE_API) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    81  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    82  /* If Direction changeable is enabled */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    83  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    84  /* If pin mode changeable is enabled */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    85  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    86  /* Pin direction data offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    87  #define PORT_DATA_OFS_DIR      (8U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    88  /* Control data 2 offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    89  #define PORT_DATA_OFS_CTL2     (9U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    90  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    91  #else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    92  /* Pin direction data offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    93  #define PORT_DATA_OFS_DIR      (7U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    94  /* Control data 2 offset */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    95  #define PORT_DATA_OFS_CTL2     (8U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    96  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    97  #endif /* (PORT_SET_PIN_MODE_API) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    98  #endif /* (PORT_SET_PIN_DIRECTION_API) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	    99  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   100  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   101  /* Mask to get direction info from Pin control value */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   102  #define PORT_DIR_MSK           (0x80U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   103  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   104  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   105  /* IOCR0 register offset in Ifx_P */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   106  #define PORT_IOCR0_REG_OFFSET  (4U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   107  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   108  /* TBD */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   109  /* LPCR register offset in Ifx_P */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   110  #define PORT_LPCR_REG_OFFSET   (0x28U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   111  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   112  /* PCSR register offset in Ifx_P */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   113  #define PORT_PCSR_REG_OFFSET   (0x19U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   114  #define PORT_PCSR_REG_LCK_MASK (0x7FFFFFFFU)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   115  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   116  #if(PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   117  /* Status to indicate that PORT is initialized */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   118  #define PORT_INITIALIZED  ((uint8)1)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   119  #endif  /*(PORT_DEV_ERROR_DETECT == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   120  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   121  /* Before Setting the Iocr register, To Check the Port number below
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   122     macro's are used */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   123  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   124  #define PORT_PIN_0_3           (0x000F)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   125  #define PORT_PIN_4_7           (0x00F0)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   126  #define PORT_PIN_8_11          (0x0F00)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   127  #define PORT_PIN_12_15         (0xF000)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   128  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   129  /* 8-bit mask value from 8th to 15th bit */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   130  #define PORT_PDR1_MASK         (0xFF00U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   131  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   132  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   133  /* offset value where the port number is present */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   134  #define PORT_NUMBER_OFFSET     (4U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   135  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   136  /* lower 8-bit mask value in hex to get the port number */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   137  #define PORT_NUM_LOW8_MASK     (0x000000FFU)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   138  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   139  /* lower 4-bit mask value in hex to get the pin number of a port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   140  #define PORT_PIN_LOW4_MASK     (0x0FU)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   141  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   142  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   143  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   144  /* lower 16-bit mask value in Hex */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   145  #define PORT_LOWER_16BIT_MASK  (0x0000FFFFU)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   146  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   147  /* 16-bit shift value */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   148  #define PORT_16BIT_SHIFTVALUE  (16U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   149  #define PORT_NUM_EIGHT         (8U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   150  #define PORT_NUM_FOUR          (4U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   151  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   152  /* general constants */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   153  #define PORT_CONSTANT_16       (16U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   154  #define PORT_CONSTANT_10       (10U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   155  #define PORT_NUMBER_32         (32U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   156  #define PORT_NUMBER_31         (31U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   157  #define PORT_CONSTANT_0x01     (0x01U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   158  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   159  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   160  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   161  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   162  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   163  /* Available Inverted Port Mask */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   164  #define AVAILABLE_MODE_MASK    ((Port_PinModeType)(0xC7U))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   165  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   166  #endif /*(PORT_SET_PIN_MODE_API==STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   167  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   168  /* ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   169  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   170  /* Maximum port pin number */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   171  #define PORT_PIN_MAX_NUMBER    (15U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   172  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   173  /* Mcal Safety ENDINIT Timeout value */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   174  #define PORT_ENDINIT_TIMEOUT   (150000U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   175  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   176  /* Mask for valid bits */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   177  #define PORT_IOCR0_PIN_SHIFT_MASK             (0x000000F8U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   178  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   179  #define PORT_IOCR0_MODE_SHIFT_MASK            (0x00000038U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   180  #endif /* (PORT_SET_PIN_MODE_API == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   181  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   182  /*IFX_MISRA_RULE_19_07_STATUS=To support user modification of OS protected
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   183    calls definition, it is declared as a function like macro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   184  #define PORT_IOCR0_BIT_SHIFT_COUNT(Pin)       (PORT_NUM_EIGHT * \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   185                                                ((Pin) % (PORT_NUM_FOUR)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   186  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   187  /*IFX_MISRA_RULE_19_07_STATUS=To support user modification of OS protected
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   188    calls definition, it is declared as a function like macro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   189  #define PORT_PIN_IOCR0_SETMASK(Pin)      ((uint32)PORT_IOCR0_PIN_SHIFT_MASK << \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   190                                                 PORT_IOCR0_BIT_SHIFT_COUNT(Pin))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   191  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   192  /*IFX_MISRA_RULE_19_07_STATUS=To support user modification of OS protected
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   193    calls definition, it is declared as a function like macro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   194  #define PORT_PIN_IOCR0_CLEARMASK(Pin)         (~PORT_PIN_IOCR0_SETMASK(Pin))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   195  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   196  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   197  /*IFX_MISRA_RULE_19_07_STATUS=To support user modification of OS protected
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   198    calls definition, it is declared as a function like macro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   199  #define PORT_IOCR0_MODE_SETMASK(Pin)   ((uint32)PORT_IOCR0_MODE_SHIFT_MASK << \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   200                                                 PORT_IOCR0_BIT_SHIFT_COUNT(Pin))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   201  /*IFX_MISRA_RULE_19_07_STATUS=To support user modification of OS protected
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   202    calls definition, it is declared as a function like macro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   203  #define PORT_IOCR0_MODE_CLEARMASK(Pin)        (~PORT_IOCR0_MODE_SETMASK(Pin))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   204  #endif /* (PORT_SET_PIN_MODE_API == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   205  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   206  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   207  **                   Function like macro definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   208  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   209  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   210  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   211  **                      Private Type Definitions                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   212  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   213  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   214  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   215  **                      Private Function Declarations                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   216  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   217  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   218  #define PORT_START_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   219  /*mapping of code and data to specific memory sections via memory mapping file*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   220  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   221  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   222  /*INLINE function to initialize Port module*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   223  IFX_LOCAL_INLINE void Port_lIOInit(void);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   224  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   225  /*INLINE function to initialize Port module*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   226  IFX_LOCAL_INLINE void Port_lPDRInit(void);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   227  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   228  /*INLINE function to extract the Address of Px_OUT register */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   229  IFX_LOCAL_INLINE Ifx_P *Port_lAdr(uint32 PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   230  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   231  /*INLINE function to to check if the port
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   232    is available or not for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   233  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   234  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   235  /*INLINE function to check if the port
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   236    is available or not for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   237  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   238  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   239  /*INLINE function to check if the port is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   240    available or not for the microcontroller    */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   241  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   242  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   243  /*INLINE function to check if the port is read only or it is writable */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   244  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   245  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   246  /*INLINE function to check if the port is read only or it is writable */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   247  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   248  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   249  /*INLINE function to check if the port is read only or it is writable*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   250  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   251  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   252  /*INLINE function to check if the port pin is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   253    available or not for the microcontroller      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   254  IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable(uint32 Port,uint32 Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   255  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   256  /*INLINE function to check if any of the
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   257    portpin 8-15 is available or not for the micro*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   258  IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   259  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   260  /*INLINE function to check if the IOCRx register for the port
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   261     is available or not for the micro */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   262  IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(uint32 Port,uint16 Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   263  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   264  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   265  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   266  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   267  /*INLINE function to check the error
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   268    in the Port_SetPinMode Api  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   269  IFX_LOCAL_INLINE uint32 Port_lModeErrChk
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   270  (
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   271    uint8 Dir, Port_PinModeType Mode, uint32 ConfigIndex, uint32 PinNumber
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   272  );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   273  IFX_LOCAL_INLINE uint8 Port_lChkPin
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   274  (
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   275    Port_PinType Pin,uint32 PortNo,uint32 PinNo
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   276  );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   277  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   278  /*(PORT_SET_PIN_MODE_API==STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   279  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   280  /* ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   281  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   282  /*INLINE function for OMR register value
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   283    to set the configured initial level      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   284  IFX_LOCAL_INLINE uint32 Port_lPinLevel(uint32 Level);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   285  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   286  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   287  /*INLINE function to extract port number Port_PinType data */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   288  IFX_LOCAL_INLINE uint32 Port_lNumber(Port_PinType Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   289  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   290  /*INLINE function to extract pin number from Port_PinType data*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   291  IFX_LOCAL_INLINE uint32 Port_lPinNumber(Port_PinType Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   292  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   293  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   294  /*INLINE function to to check if the port supports LVDS
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   295     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   296  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   297  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   298  /*INLINE function to to check if the port supports LVDS
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   299     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   300  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   301  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   302  /*INLINE function to to check if the port supports LVDS
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   303     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   304  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   305  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   306  /*INLINE function to to check if the port supports PCSR
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   307     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   308  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   309  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   310  /*INLINE function to to check if the port supports PCSR
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   311     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   312  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   313  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   314  /*INLINE function to to check if the port supports PCSR
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   315     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   316  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(uint32 Port);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   317  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   318  /*INLINE function to to check if the port supports PCSR
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   319     for the microcontroller */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   320  IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(uint32 PortLPCRvalue);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   321  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   322  #if (PORT_INIT_CHECK_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   323  IFX_LOCAL_INLINE uint8 Port_lChkIocr(uint32 PortNo,const uint32 *DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   324  IFX_LOCAL_INLINE uint8 Port_lChkLVDS(uint32 PortNo,const uint32 *LVDSDataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   325  IFX_LOCAL_INLINE uint8 Port_lChkPDR(uint32 PortNo,uint32 Data_PDR0,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   326                                     uint32 Data_PDR1);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   327  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   328  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   329  #define PORT_STOP_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   330  /*mapping of code and data to specific memory sections via memory mapping file*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   331  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   332   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   333  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   334  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   335  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   336  **                      Global Constant Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   337  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   338  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   339  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   340  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   341  **                      Global Variable Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   342  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   343  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   344  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   345  **                      Private Constant Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   346  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   347  /* Mapping of 16 bit constant */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   348  #define PORT_START_SEC_CONST_16BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   349  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   350   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   351  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   352  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   353  /* Total pin count for each port, This constant is used during DET check */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   354  static const uint16 Port_kAvailablePins[] =
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   355  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   356    PORT_AVAILABLE_PINS_PORT0,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   357    PORT_AVAILABLE_PINS_PORT1,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   358    PORT_AVAILABLE_PINS_PORT2,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   359    PORT_AVAILABLE_PINS_PORT3,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   360    PORT_AVAILABLE_PINS_PORT4,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   361    PORT_AVAILABLE_PINS_PORT5,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   362    PORT_AVAILABLE_PINS_PORT6,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   363    PORT_AVAILABLE_PINS_PORT7,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   364    PORT_AVAILABLE_PINS_PORT8,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   365    PORT_AVAILABLE_PINS_PORT9,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   366    PORT_AVAILABLE_PINS_PORT10,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   367    PORT_AVAILABLE_PINS_PORT11,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   368    PORT_AVAILABLE_PINS_PORT12,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   369    PORT_AVAILABLE_PINS_PORT13,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   370    PORT_AVAILABLE_PINS_PORT14,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   371    PORT_AVAILABLE_PINS_PORT15,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   372    PORT_AVAILABLE_PINS_PORT16,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   373    PORT_AVAILABLE_PINS_PORT17,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   374    PORT_AVAILABLE_PINS_PORT18,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   375    PORT_AVAILABLE_PINS_PORT19,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   376    PORT_AVAILABLE_PINS_PORT20,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   377    PORT_AVAILABLE_PINS_PORT21,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   378    PORT_AVAILABLE_PINS_PORT22,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   379    PORT_AVAILABLE_PINS_PORT23,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   380    PORT_AVAILABLE_PINS_PORT24,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   381    PORT_AVAILABLE_PINS_PORT25,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   382    PORT_AVAILABLE_PINS_PORT26,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   383    PORT_AVAILABLE_PINS_PORT27,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   384    PORT_AVAILABLE_PINS_PORT28,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   385    PORT_AVAILABLE_PINS_PORT29,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   386    PORT_AVAILABLE_PINS_PORT30,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   387    PORT_AVAILABLE_PINS_PORT31,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   388    PORT_AVAILABLE_PINS_PORT32,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   389    PORT_AVAILABLE_PINS_PORT33,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   390    PORT_AVAILABLE_PINS_PORT34,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   391    PORT_AVAILABLE_PINS_PORT35,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   392    PORT_AVAILABLE_PINS_PORT36,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   393    PORT_AVAILABLE_PINS_PORT37,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   394    PORT_AVAILABLE_PINS_PORT38,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   395    PORT_AVAILABLE_PINS_PORT39,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   396    PORT_AVAILABLE_PINS_PORT40
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   397  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   398  };
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   399  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   400  #define PORT_STOP_SEC_CONST_16BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   401  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   402   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   403  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   404  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   405  **                      Private Variable Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   406  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   407  #if(PORT_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   408  #define PORT_START_SEC_VAR_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   409  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   410   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   411  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   412  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   413  /* To store the Port driver configuration pointer */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   414  static  const Port_ConfigType  *Port_kConfigPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   415  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   416  #define PORT_STOP_SEC_VAR_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   417  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   418   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   419  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   420  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   421  #endif /*(PORT_PB_FIXEDADDR == STD_OFF) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   422  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   423  #if(PORT_PB_FIXEDADDR == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   424  #define PORT_START_SEC_CONST_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   425  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   426   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   427  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   428  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   429  /* To store the Port driver configuration pointer */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   430  static  const Port_ConfigType * const Port_kConfigPtr = &Port_ConfigRoot[0];
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   431  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   432  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   433  #define PORT_STOP_SEC_CONST_32BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   434  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   435   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   436  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   437  #endif /*(PORT_PB_FIXEDADDR == STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   438  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   439  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   440  #if(PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   441  /* Start 8 bit variable section */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   442  #define PORT_START_SEC_VAR_8BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   443  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   444   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   445  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   446  /* Init Status Variable. It has to be initialized to "0U" after every reset as 0
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   447     represents the deinitialized state */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   448  static uint8 Port_InitStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   449  /* Stop 8 bit variable section */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   450  #define PORT_STOP_SEC_VAR_8BIT
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   451  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   452   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   453  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   454  #endif  /*(PORT_DEV_ERROR_DETECT == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   455  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   456  **                      Private Function Definitions                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   457  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   458  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   459  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   460  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   461  **                      Global Function Definitions                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   462  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   463  /* Mapping the code */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   464  #define PORT_START_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   465  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   466   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   467  #include "MemMap.h"
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   468  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   469  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   470  ** Traceability     : [cover parentID=DS_AS_PORT140,DS_AS_PORT003,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   471                         DS_AS_PORT101_PORT211_1,DS_AS_PORT107_PORT146_1,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   472                         DS_AS_PORT107_PORT146_4,DS_AS4XX_PORT087_1,DS_AS_PORT105,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   473                         DS_AS_PORT148,DS_AS_PORT005,DS_AS_PORT078,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   474                         DS_AS3XX_PORT087_1,DS_AS_PORT077,DS_AS_PORT082,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   475                         SAS_MCAL_PORT_0402,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   476                         SAS_MCAL_PORT_0415,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   477                         DS_MCAL_PORT_0415,DS_MCAL_PORT_0417,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   478                         DS_MCAL_PORT_0402,DS_AS_PORT107_PORT146_4]            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   479  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   480  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   481  ** Syntax           : void Port_Init                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   482  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   483  **                      const Port_ConfigType * ConfigPtr                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   484  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   485  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   486  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   487  ** Service ID       : 0x00                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   488  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   489  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   490  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   491  ** Reentrancy       : non - reentrant                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   492  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   493  ** Parameters(in)   : const Port_ConfigType * ConfigPtr - Pointer to          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   494  **                    PORT configuration                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   495  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   496  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   497  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   498  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   499  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   500  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   501  **   - PORT041: PORT042: Initializes all the ports as per configuration       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   502  **   - PORT001: This API initializes the whole port structure of MCU          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   503  **   - PORT003: This API can be used to initialize and reinitialize the       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   504  **     port with different configuration                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   505  **   - PORT078: This function should be called first in order to initialize   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   506  **     the port for use                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   507  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   508  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   509  void Port_Init ( const Port_ConfigType * ConfigPtr )
; Function Port_Init
.L70:
Port_Init:	.type	func
	sub.a	a10,#8
.L319:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   510  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   511    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   512    uint8 ErrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   513    ErrStatus = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   514  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   515    #if(PORT_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   516  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   517    if (ConfigPtr == NULL_PTR)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   518    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   519  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   520      /* Report PORT_E_PARAM_CONFIG DET */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   521      #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   522      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   523          PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   524      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   525      /* PORT087: Skip the API functionality and return from the API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   526  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   527      /* Report a safety error */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   528      #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   529      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   530                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   531      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   532  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   533      ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   534    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   535    #else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   536    if (ConfigPtr != Port_kConfigPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   537    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   538  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   539      /* Report PORT_E_PARAM_CONFIG DET */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   540      #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   541      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   542        PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   543      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   544      /* PORT087: Skip the API functionality and return from the API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   545  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   546      /* Report a safety error */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   547      #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   548      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   549                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   550      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   551  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   552      ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   553    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   554    #endif /*(PORT_PB_FIXEDADDR == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   555  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   556    #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   557    if ((ErrStatus != 1U) &&
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   558        (ConfigPtr->PortMarker != ((uint32)PORT_MODULE_ID << 16U)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   559    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   560      /* report to upper layer */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   561      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   562                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   563      ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   564  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   565    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   566    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   567    /*End Of PORT_SAFETY_ENABLE*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   568    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   569    /*(PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   570  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   571  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   572    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   573    if (ErrStatus == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   574    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   575    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   576      /* PORT002: The function Port_Init() shall also initialize all variables
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   577         used by the PORT driver module to an initial state.
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   578         There are no such variables in the port module
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   579      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   580      #if(PORT_PB_FIXEDADDR == STD_OFF)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   581        Port_kConfigPtr = ConfigPtr;
	movh.a	a15,#@his(Port_kConfigPtr)
	lea	a15,[a15]@los(Port_kConfigPtr)
	st.a	[a10],a15
.L375:
	st.a	[a15],a4
.L102:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   582      #else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   583        /* To remove GNU warning of unused parameter ConfigPtr */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   584        UNUSED_PARAMETER(ConfigPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   585      #endif  /*(PORT_PB_FIXEDADDR == STD_OFF)*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   586  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   587      /* Initialise General Purpose I/O Ports and Peripheral I/O Lines */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   588      Port_lIOInit();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   589  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   590      #if(PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   591      /* Set Status to indicate that initialization is done */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   592      Port_InitStatus = PORT_INITIALIZED;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   593      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   594    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   595  }/* Port_Init */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   596  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   597  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   598  #if (PORT_INIT_CHECK_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   599  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   600  ** Traceability     : [cover parentID=SAS_MCAL_PORT_0402,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   601                        SAS_MCAL_PORT_0405,SAS_MCAL_PORT_0406,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   602                        SAS_MCAL_PORT_0431,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   603                        DS_MCAL_PORT_0403,DS_MCAL_PORT_0403_1,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   604                        DS_MCAL_PORT_0404,DS_MCAL_PORT_0405,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   605                        DS_MCAL_PORT_0406,DS_MCAL_PORT_0417,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   606                        DS_NAS_PORT_PR123]                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   607  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   608  ** Syntax           : Std_ReturnType Port_InitCheck                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   609  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   610  **                      const Port_ConfigType * ConfigPtr                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   611  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   612  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   613  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   614  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   615  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   616  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   617  ** Reentrancy       : non - reentrant                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   618  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   619  ** Parameters(in)   : const Port_ConfigType * ConfigPtr - Pointer to          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   620  **                    PORT configuration                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   621  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   622  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   623  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   624  ** Return value     : Std_ReturnType                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   625  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   626  ** Description      : This function checks Port SFR's and Global              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   627  **                      variables initialized by Port_Init Api                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   628  **                    This API is available only if PortInitCheckApi is TRUE  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   629  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   630  Std_ReturnType Port_InitCheck ( const Port_ConfigType * ConfigPtr )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   631  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   632  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   633    uint8 ErrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   634    uint8 ErrPdr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   635    uint32 PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   636    /* Index to identify the port configuration information
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   637    from the configuration array  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   638    uint8 ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   639    Ifx_P  *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   640  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   641    const uint32 *DataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   642    const Port_n_ConfigType *ConfigDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   643  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   644    const uint32  *LVDSDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   645    const uint32  *PCSRDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   646    volatile uint32  *PCSRRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   647  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   648    uint8 LevelFlag;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   649    uint8 IocrFlag;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   650  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   651    uint8 LVDSFlag;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   652    uint8 PCSRFlag;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   653  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   654    ErrStatus = E_OK;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   655    ConfigIndex = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   656    LevelFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   657    LVDSFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   658    PCSRFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   659  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   660  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   661    if (Port_kConfigPtr != ConfigPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   662    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   663  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   664       ErrStatus = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   665    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   666    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   667    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   668  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   669      LVDSDataPtr = (const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   670                                 (Port_kConfigPtr->Port_LVDSConfigTypePtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   671  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   672      PCSRDataPtr = (const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   673                                 (Port_kConfigPtr->Port_PCSRConfigTypePtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   674  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   675      for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   676      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   677  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   678        /* Parameter Port is checked for validity */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   679        if(Port_lIsPortAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   680        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   681  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   682          /* Check PDR Registers Initialization */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   683  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   684          /* Port driver strength is configured in Port PDR0 register */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   685  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   686          PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   687  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   688          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   689          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   690          /*IFX_MISRA_RULE_17_04_STATUS= Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   691          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   692          ErrPdr = Port_lChkPDR(PortNumber,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   693          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength0,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   694          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength1);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   695  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   696          if (ErrPdr == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   697          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   698            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   699          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   700            ConfigDataPtr = (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   701  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   702            /* Address of each port configuration */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   703            DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   704  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   705  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   706            /* Check Port Level Registers Initialization */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   707  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   708            if(Port_lIsPortReadOnly(PortNumber) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   709            {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   710              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   711                to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   712              if(PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->OUT.U) == \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   713                                               (*(DataPtr + PORT_DATA_OFS_LEVEL)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   714              {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   715                LevelFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   716              }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   717            }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   718            else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   719            {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   720               LevelFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   721            }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   722  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   723            if (LevelFlag == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   724            {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   725  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   726               /* Check IOCR0,4,8,12 Registers Initialization */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   727  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   728               IocrFlag = Port_lChkIocr(PortNumber,DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   729  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   730               if (IocrFlag == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   731               {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   732                 /* Check Port LVDS and PCSR Registers Initialization */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   733                 if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   734                 {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   735                   LVDSFlag = Port_lChkLVDS(PortNumber,LVDSDataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   736                   /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   737          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   738                   LVDSDataPtr += PORT_MAX_LPCR_REG;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   739                 }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   740  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   741                 if(LVDSFlag == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   742                 {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   743                   if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   744                   {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   745                     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   746            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   747                     PCSRRegPtr = ((volatile uint32*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   748                                   (volatile void*)PortAddressPtr +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   749                                    PORT_PCSR_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   750                     if ((PORT_SFR_INIT_USER_MODE_READ32(*PCSRRegPtr) & \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   751                                         PORT_PCSR_REG_LCK_MASK) == *PCSRDataPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   752                     {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   753                       PCSRFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   754                     }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   755                     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   756            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   757                     PCSRDataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   758                   }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   759                   /* PCSR is not available then make PCSRFlag as FALSE */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   760                   else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   761                   {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   762                      PCSRFlag = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   763                   }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   764                 }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   765               }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   766            }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   767          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   768          /* If LVDSFlag or PCSRFlag as True, then return as error */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   769          if((LVDSFlag != 0U) || (PCSRFlag != 0U))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   770          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   771             ErrStatus = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   772             break;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   773          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   774       ConfigIndex++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   775       }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   776  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   777       LevelFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   778       PCSRFlag = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   779  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   780       if(PortNumber == PORT_MAX_NUMBER)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   781       {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   782           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   783             to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   784         if (PORT_SFR_INIT_USER_MODE_READ32(P40_PDISC.U) != \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   785                                                   Port_kConfigPtr->PDiscSet[0U])
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   786         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   787           ErrStatus = E_NOT_OK;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   788         }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   789       }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   790      } /* For loop */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   791    } /* Else */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   792    return(ErrStatus);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   793  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   794  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   795  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkPDR                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   796  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   797  **                      uint32 PortNo,uint32 Data_PDR0, uint32 Data_PDR1      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   798  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   799  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   800  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   801  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   802  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   803  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   804  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   805  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   806  ** Parameters (in)  : uint32 PortNo - Port number whose  PDR to be checked    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   807  **                    uint32 Data_PDR0 - Data of DriverStrength0              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   808  **                    uint32 Data_PDR1 - Data of DriverStrength1              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   809  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   810  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   811  ** Return value     : uint8                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   812  **                    0- No error if PDR value is correct                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   813  **                    1- Error if PDR value is not correct                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   814  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   815  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   816  ** - The function like macro is to check if configured  Port PDR value is     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   817  **    same as read PDR value                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   818  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   819  IFX_LOCAL_INLINE uint8 Port_lChkPDR(uint32 PortNo,uint32 Data_PDR0,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   820                                     uint32 Data_PDR1)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   821  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   822    uint8 ErrPdr = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   823    Ifx_P  *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   824  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   825    PortAddressPtr = Port_lAdr(PortNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   826  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   827    if(PortNo < PORT_MAX_NUMBER)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   828    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   829      if(PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->PDR0.U) != Data_PDR0)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   830      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   831        ErrPdr = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   832      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   833  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   834      if(Port_lIsPortPdr1Available(PortNo) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   835      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   836  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   837        if(PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->PDR1.U) != Data_PDR1)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   838        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   839          ErrPdr = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   840        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   841      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   842    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   843    return(ErrPdr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   844  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   845  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   846  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkIocr                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   847  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   848  **                      uint32 PortNo,const uint32 *DataPtr                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   849  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   850  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   851  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   852  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   853  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   854  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   855  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   856  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   857  ** Parameters (in)  : uint32 PortNo - Port number whose Iocr to be checked    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   858  **                    const uint32 *DataPtr - Data read from Iocr register    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   859  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   860  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   861  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   862  ** Return value     : uint8                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   863  **                    0 -No error if Iocr register value is correct           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   864  **                    1 -Error if Iocr register  value is not correct         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   865  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   866  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   867  ** - The function like macro is to check if configured  Port Iocr value is    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   868  **    same as read Iocr value                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   869  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   870  IFX_LOCAL_INLINE uint8 Port_lChkIocr(uint32 PortNo,const uint32 *DataPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   871  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   872    uint8 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   873    Ifx_P  *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   874    uint32 Index;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   875    uint16 PinAvailable;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   876    uint32 PinMask;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   877    uint8 PinPosition;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   878  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   879    RetVal = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   880  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   881    PortAddressPtr = Port_lAdr(PortNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   882  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   883    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_0_3)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   884    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   885      PinPosition = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   886      PinMask = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   887      for(Index = 0U; Index<4U ; Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   888      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   889  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   890         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   891  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   892         if (PinAvailable)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   893         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   894           PinMask |= ((uint32)0xF8U << PinPosition);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   895         }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   896  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   897        PinPosition += 8U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   898      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   899      if((PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->IOCR0.U) & PinMask) != \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   900                                                          ((*DataPtr) & PinMask))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   901      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   902        RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   903      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   904    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   905    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   906            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   907    DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   908  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   909    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_4_7)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   910    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   911      PinPosition = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   912      PinMask = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   913      for(Index = 4U; Index<8U ; Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   914      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   915  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   916         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   917  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   918         if (PinAvailable)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   919         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   920           PinMask |= ((uint32)0xF8U << PinPosition);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   921         }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   922        PinPosition += 8U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   923      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   924      if((PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->IOCR4.U) & PinMask) != \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   925                                                          ((*DataPtr) & PinMask))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   926      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   927        RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   928      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   929    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   930    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   931            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   932    DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   933  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   934    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_8_11)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   935    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   936      PinPosition = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   937      PinMask = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   938      for(Index = 8U; Index<12U ; Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   939      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   940  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   941         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   942  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   943         if (PinAvailable)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   944         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   945           PinMask |= ((uint32)0xF8U << PinPosition);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   946         }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   947        PinPosition += 8U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   948      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   949  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   950      if((PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->IOCR8.U) & PinMask) != \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   951                                                          ((*DataPtr) & PinMask))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   952      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   953        RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   954      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   955    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   956    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   957            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   958    DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   959  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   960    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_12_15)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   961    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   962      PinPosition = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   963      PinMask = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   964      for(Index = 12U; Index<16U ; Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   965      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   966  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   967         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   968  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   969         if (PinAvailable)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   970         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   971           PinMask |= ((uint32)0xF8U << PinPosition);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   972         }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   973        PinPosition += 8U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   974      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   975      if((PORT_SFR_INIT_USER_MODE_READ32(PortAddressPtr->IOCR12.U) & PinMask) != \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   976                                                          ((*DataPtr) & PinMask))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   977      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   978        RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   979      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   980    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   981  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   982    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   983  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   984  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   985  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   986  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkLVDS                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   987  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   988  **                      uint32 PortNo,const uint32 *LVDSDataPtr               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   989  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   990  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   991  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   992  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   993  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   994  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   995  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   996  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   997  ** Parameters (in)  : uint32 PortNo - Port LVDS to be checked                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   998  **                    const uint32 *LVDSDataPtr - Data pointer reads the data **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	   999  **                    from LVDS register                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1000  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1001  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1002  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1003  ** Return value     : uint8                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1004  **                    0- No error if LVDS value is correct....................**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1005  **                    1- Error if LVDS value is not correct                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1006  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1007  ** - The function like macro is to check if configured  Port Lvds value is    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1008  **    same as read Lvds value                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1009  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1010  IFX_LOCAL_INLINE uint8 Port_lChkLVDS(uint32 PortNo,const uint32 *LVDSDataPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1011  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1012  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1013    uint8 counter;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1014    uint8 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1015    volatile uint32 *LVDSRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1016    Ifx_P  *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1017  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1018    RetVal = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1019  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1020    PortAddressPtr = Port_lAdr(PortNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1021  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1022    /* Check Port LVDS Initialization */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1023  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1024      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1025            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1026      LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1027                    PORT_LPCR_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1028      for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1029      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1030        if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1031        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1032          /* LPCRn */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1033          if(PORT_SFR_INIT_USER_MODE_READ32(*LVDSRegPtr) != *LVDSDataPtr)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1034          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1035            RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1036            break;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1037          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1038  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1039        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1040        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1041            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1042        LVDSRegPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1043        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1044            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1045        LVDSDataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1046      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1047  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1048    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1049  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1050  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1051  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1052  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1053  /* Enable / Disable the use of the function */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1054  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1055  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1056  ** Traceability     : [cover parentID=DS_AS_PORT141,DS_AS_PORT086,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1057                         DS_AS_PORT075_1,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1058                         DS_MCAL_PORT_0416,DS_AS_PORT063,DS_AS_PORT137,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1059                         DS_AS_PORT101_PORT211_2,DS_AS_PORT107_PORT146_2,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1060                         DS_AS4XX_PORT087_2,DS_AS3XX_PORT087_2,DS_AS_PORT054,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1061                         DS_AS_PORT213,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1062                         DS_AS_PORT138,DS_AS_PORT077,DS_NAS_PORT_PR912_1,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1063                         SAS_MCAL_PORT_0415,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1064                         DS_MCAL_PORT_0417, DS_AS_PORT107_PORT146_4]            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1065  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1066  ** Syntax           : void Port_SetPinDirection                               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1067  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1068  **                      Port_PinType Pin,                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1069  **                      Port_PinDirectionType Direction                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1070  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1071  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1072  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1073  ** Service ID       : 0x01                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1074  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1075  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1076  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1077  ** Reentrancy       : Re-entrant                                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1078  **                    (Reentrant for pins of different port or pins assigned  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1079  **                     to different IOCR register of a same port)             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1080  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1081  ** Parameters (in)  : Port_PinType Pin - port pin ID whose direction has      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1082                        to be set                                               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1083  **                    Port_PinDirectionType Direction - port pin direction    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1084                        to be set                                               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1085  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1086  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1087  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1088  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1089  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1090  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1091  **  - PORT063: sets the port pin direction during runtime                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1092  **  - PORT059: This functionality is available for parameter Pin              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1093  **     whose direction is configured as changeable during run time            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1094  **  - PORT086: This function is only available if the pre-compiler switch     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1095  **    PORT_SET_PIN_DIRECTION_API is set STD_ON.                               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1096  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1097  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1098  void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1099  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1100    /* Each Port Number for the hardware unit  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1101    uint32               PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1102    uint32               PinNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1103    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1104    uint8                ErrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1105    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1106    uint32               PortAvailable;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1107    uint32               PortReadOnly;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1108    uint32               PinAvailable;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1109    #endif /*PORT_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1110    #endif /*PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1111    uint32               ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1112    uint32               Index;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1113    volatile uint32      *IocrRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1114    const uint32        *DataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1115    Ifx_P               *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1116    const uint8          *IocrDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1117  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1118    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1119    ErrStatus = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1120    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1121  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1122    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1123    /* Check for DET: PORT_E_UNINIT */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1124    if (Port_InitStatus != PORT_INITIALIZED)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1125    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1126      /* Report PORT_E_UNINIT DET if Port initialisation is not done */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1127      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1128          PORT_SID_SETPINDIRECTION,PORT_E_UNINIT);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1129  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1130      /* PORT087: Skip the API functionality and return from the API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1131    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1132    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1133    #endif /* PORT_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1134    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1135      /* Extract the port number and pin number from the Pin Symbolic ID */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1136      PortNumber = (uint32)Port_lNumber(Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1137      PinNumber  = (uint32)Port_lPinNumber(Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1138  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1139      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1140      /* PORT077: Function parameters are checked in the order in which they are
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1141                 passed.
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1142      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1143      /* PORT087: Check if Pin is valid */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1144  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1145      #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1146      PortAvailable = Port_lIsPortAvailable(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1147      PortReadOnly  = Port_lIsPortReadOnly(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1148  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1149      PinAvailable = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1150      if( PortAvailable != 0U )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1151      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1152        PinAvailable  = Port_lIsPinAvailable(PortNumber,PinNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1153      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1154  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1155      if ( (Pin > PORT_MAX_PIN_ID) ||
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1156           ((PortReadOnly != 0U) || (PinAvailable == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1157         )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1158      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1159  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1160        /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1161        Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1162            PORT_SID_SETPINDIRECTION,PORT_E_PARAM_PIN);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1163  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1164        ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1165  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1166      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1167      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1168  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1169      #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1170      if(Pin > PORT_MAX_PIN_ID)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1171      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1172        /*Report Safety Error if the pin is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1173        SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1174           PORT_SID_SETPINDIRECTION,PORT_E_PARAM_PIN);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1175  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1176        ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1177  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1178      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1179  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1180     if((Direction != PORT_PIN_IN) && (Direction != PORT_PIN_OUT))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1181     {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1182       /*Report Safety Error if the direction is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1183       SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1184                       PORT_SID_SETPINDIRECTION,PORT_E_PARAM_DIRECTION);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1185  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1186       ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1187  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1188     }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1189     #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1190     #endif /* PORT_DEV_ERROR_DETECT and PORT_SAFETY_ENABLE */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1191  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1192  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1193     #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1194     if (ErrStatus == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1195     #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1196     {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1197      ConfigIndex = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1198      for(Index = 0U;Index < PortNumber;Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1199      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1200        if(Port_lIsPortAvailable(Index) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1201        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1202          ConfigIndex++; /* to identify the Index of configuration*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1203        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1204      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1205  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1206      /* Get the config data location for specified Port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1207      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1208          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1209      DataPtr =(const uint32*)(const void*)(
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1210                (Port_kConfigPtr->PortConfigSetPtr)+ConfigIndex);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1211  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1212      /*parameter Pin is valid, check for pin direction changeable DET error */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1213      /*
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1214      PORT059: PORT087: Check if the direction is configured as changeable or not
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1215      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1216      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1217          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1218      if ( ((*(DataPtr + PORT_DATA_OFS_DIR)) & ((uint32)0x01U << PinNumber))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1219             == PORT_PIN_DIR_NOT_CHANGEABLE
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1220              )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1221      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1222       #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1223         /* Report PORT_E_DIRECTION_UNCHANGEABLE DET if pin is configured for
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1224            direction not changeable
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1225         */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1226         Det_ReportError(
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1227           (uint16)PORT_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1228           PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1229           PORT_SID_SETPINDIRECTION,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1230           PORT_E_DIRECTION_UNCHANGEABLE);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1231       #endif /* PORT_DEV_ERROR_DETECT */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1232      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1233      else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1234      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1235       /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1236          due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1237       IocrDataPtr = (const uint8*)(const void*)(DataPtr + PORT_DATA_OFS_CTL);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1238  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1239       /* Get Port Address */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1240       PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1241       /* Get the IOCR0 register address of particular port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1242       /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1243            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1244          IocrRegPtr = ((volatile uint32*)(volatile void*) \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1245                                 PortAddressPtr + PORT_IOCR0_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1246  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1247          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1248             due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1249          if((*(IocrDataPtr + PinNumber) & (uint8)PORT_DIR_MSK)==(uint8)Direction)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1250          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1251            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1252             due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1253            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1254              to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1255            PORT_SFR_RUNTIME_USER_MODE_MODIFY32((*(IocrRegPtr + \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1256              (PinNumber / PORT_NUM_FOUR))),PORT_PIN_IOCR0_CLEARMASK(PinNumber), \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1257                                     ((uint32)(*(IocrDataPtr + PinNumber)) << \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1258                                       (PORT_IOCR0_BIT_SHIFT_COUNT(PinNumber))))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1259          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1260          else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1261          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1262            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1263               to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1264            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1265              due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1266            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1267              due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1268            PORT_SFR_RUNTIME_USER_MODE_MODIFY32((*(IocrRegPtr + \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1269            (PinNumber / PORT_NUM_FOUR))),PORT_PIN_IOCR0_CLEARMASK(PinNumber), \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1270                                             (*((DataPtr + PORT_DATA_OFS_CTL2) \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1271             + (PinNumber / PORT_NUM_FOUR)) & PORT_PIN_IOCR0_SETMASK(PinNumber)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1272          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1273        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1274      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1275    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1276  } /* Port_SetPinDirection */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1277  #endif /* Direction changes allowed / Port_SetPinDirection API is ON */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1278  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1279  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1280  ** Traceability     : [cover parentID=DS_AS_PORT142,DS_AS_PORT075_2,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1281                          DS_AS_PORT101_PORT211_3,DS_AS_PORT107_PORT146_3,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1282                          DS_AS4XX_PORT087_3,DS_AS3XX_PORT087_3,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1283                          DS_AS_PORT060_PORT061_PORT066,DS_AS_PORT213,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1284                          DS_AS_PORT107_PORT146_4]                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1285  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1286  ** Syntax           : void Port_RefreshPortDirection ( void )                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1287  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1288  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1289  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1290  ** Service ID       : 0x02                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1291  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1292  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1293  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1294  ** Reentrancy       : non - reentrant                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1295  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1296  ** Parameters (in)  : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1297  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1298  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1299  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1300  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1301  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1302  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1303  **   - PORT060: PORT061: PORT066: refreshes the direction for all the port    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1304  **     pins that are configured as direction not changeable during run time   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1305  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1306  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1307  void Port_RefreshPortDirection(void)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1308  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1309    uint32                LoopCtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1310    /* Each Port Number for the hardware unit  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1311    uint32                PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1312    uint32                ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1313    #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1314    /* Direction changeable allowed */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1315    uint32                DirectionData;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1316    uint32                PinPos;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1317    #endif /* PORT_SET_PIN_DIRECTION_API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1318    const uint32          *DataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1319    const uint8           *IocrDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1320    volatile uint32       *IocrRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1321    Ifx_P *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1322  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1323    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1324    /* Check for DET: PORT_E_UNINIT */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1325    if (Port_InitStatus != PORT_INITIALIZED)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1326    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1327      /* Report PORT_E_UNINIT DET if Port initialisation is not done
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1328      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1329     Det_ReportError(
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1330        (uint16)PORT_MODULE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1331        PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1332        PORT_SID_REFRESHPORTDIR,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1333        PORT_E_UNINIT);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1334      /* PORT087: Skip the API functionality and return from the API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1335    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1336    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1337    #endif /* (PORT_DEV_ERROR_DETECT) == STD_ON*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1338    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1339     /* Loop from Port 0 till last Port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1340     PortNumber = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1341     ConfigIndex = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1342     do
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1343     {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1344       if(Port_lIsPortAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1345       {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1346         /* Pointer to the data for the port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1347         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1348          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1349         DataPtr = (const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1350                   ((Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1351  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1352         #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1353         /* Direction changeable allowed */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1354         /* Get the direction changeable configuration for all the port pins */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1355         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1356          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1357         DirectionData = *(DataPtr + PORT_DATA_OFS_DIR);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1358         #endif /* PORT_SET_PIN_DIRECTION_API == STD_ON*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1359  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1360         /* Pointer to control data for the first pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1361         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1362          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1363         IocrDataPtr = (const uint8*)(const void*)(DataPtr + PORT_DATA_OFS_CTL);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1364  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1365         /* Pointer to control register for the first pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1366         /* Get Port Address */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1367         PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1368         /* Get the IOCR0 register address of particular port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1369         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1370            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1371         IocrRegPtr = ((volatile uint32 *)(volatile void*)PortAddressPtr + \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1372                                                 PORT_IOCR0_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1373  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1374         /* Start from the first pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1375         #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1376         PinPos = 0x01U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1377         #endif /* PORT_SET_PIN_DIRECTION_API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1378  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1379         LoopCtr = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1380         do
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1381         {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1382          if(Port_lIsPinAvailable(PortNumber,LoopCtr) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1383          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1384            #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1385            /* Direction changeable is enabled */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1386            if ( (DirectionData & PinPos) == PORT_PIN_DIR_NOT_CHANGEABLE)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1387            {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1388              /* Direction of the pin cannot be changed during run time */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1389              /* Write the default value to the control bit fields of the Pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1390              PORT_SFR_RUNTIME_USER_MODE_MODIFY32(*IocrRegPtr, \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1391                   PORT_PIN_IOCR0_CLEARMASK(LoopCtr),((uint32)(*IocrDataPtr) << \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1392                                           PORT_IOCR0_BIT_SHIFT_COUNT(LoopCtr)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1393            }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1394            #else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1395              /* Direction changeable is disabled */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1396              /* Write the default value to the control bit fields of the Pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1397              PORT_SFR_RUNTIME_USER_MODE_MODIFY32(*IocrRegPtr, \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1398                   PORT_PIN_IOCR0_CLEARMASK(LoopCtr),((uint32)(*IocrDataPtr) << \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1399                                           PORT_IOCR0_BIT_SHIFT_COUNT(LoopCtr)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1400            #endif /* PORT_SET_PIN_DIRECTION_API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1401          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1402  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1403          LoopCtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1404          if((uint32)(LoopCtr % PORT_NUM_FOUR) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1405          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1406          /* Increment to point to the next data set */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1407          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1408            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1409          IocrRegPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1410          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1411          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1412            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1413          IocrDataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1414  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1415          #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1416          /* Shift the pin position to next pin */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1417          PinPos = PinPos << 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1418          #endif /* PORT_SET_PIN_DIRECTION_API */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1419  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1420          /* Loop for each pin in the port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1421  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1422         } while (LoopCtr <= PORT_PIN_MAX_NUMBER );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1423  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1424  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1425        ConfigIndex++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1426       }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1427      PortNumber++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1428     } while (PortNumber <= PORT_MAX_NUMBER); /* Loop for all the ports */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1429    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1430  }/* Port_RefreshPortDirection */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1431  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1432  /* Enable / Disable the use of the function */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1433  #if (PORT_SET_PIN_MODE_API == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1434  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1435  ** Traceability     : [cover parentID=DS_AS_PORT145,DS_AS_PORT125,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1436                          DS_AS_PORT128,DS_AS_PORT101_PORT211_5,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1437                          DS_AS_PORT107_PORT146_5,DS_AS4XX_PORT087_5,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1438                          DS_AS3XX_PORT087_5,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1439                          DS_AS4XX_PORT223,DS_AS_PORT213,DS_AS_PORT077,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1440                          DS_NAS_PORT_PR912_3,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1441                          SAS_MCAL_PORT_0415,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1442                          DS_MCAL_PORT_0417]                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1443  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1444  ** Syntax           : void Port_SetPinMode                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1445  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1446  **                      Port_PinType Pin,                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1447  **                      Port_PinModeType Mode                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1448  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1449  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1450  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1451  ** Service ID       : 0x04                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1452  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1453  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1454  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1455  ** Reentrancy       : Re-entrant                                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1456  **                    (Reentrant for pins of different port or pins assigned  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1457  **                     to different IOCR register of a same port              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1458  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1459  ** Parameters (in)  : Port_PinType Pin - port pin ID whose mode has to be set **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1460  **                    Port_PinModeType Mode - port pin mode to be set         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1461  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1462  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1463  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1464  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1465  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1466  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1467  **   - PORT125: Sets the port pin mode during runtime.                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1468  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1469  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1470  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1471  void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1472  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1473    /* Each Port Number for the hardware unit  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1474    uint32           PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1475    uint32           PinNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1476    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1477    uint32           ErrMode;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1478    uint8            ErrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1479    uint8            Direction;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1480    uint32           ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1481    uint32           Index;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1482    const uint32     *DataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1483    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1484    volatile uint32  *IocrRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1485    Ifx_P           *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1486  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1487    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1488    IocrRegPtr = NULL_PTR;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1489    ConfigIndex = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1490    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1491  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1492    /* Extract the port number and pin number from the Pin Symbolic ID */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1493    PortNumber = (uint32)Port_lNumber(Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1494    PinNumber  = (uint32)Port_lPinNumber(Pin);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1495  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1496    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1497    if (Port_InitStatus != PORT_INITIALIZED)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1498    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1499      /* Report PORT_E_UNINIT DET if Port initialisation is not done
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1500      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1501      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1502        PORT_SID_SETPINMODE,PORT_E_UNINIT);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1503  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1504      ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1505    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1506    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1507    #endif /* PORT_DEV_ERROR_DETECT == STD_ON */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1508    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1509      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1510      /* PORT077: Function parameters are checked in the order in which they are
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1511                  passed.
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1512      */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1513      /* PORT087: Check if Pin is valid */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1514  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1515      ErrStatus = Port_lChkPin(Pin,PortNumber,PinNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1516      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1517  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1518      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1519      if (ErrStatus == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1520      #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1521      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1522        /* Get Port Address */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1523        PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1524        /* Get the IOCR0 register address of particular port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1525        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1526            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1527        IocrRegPtr = ((volatile uint32*)\ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1528                       (volatile void*)PortAddressPtr + PORT_IOCR0_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1529  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1530        #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1531        for(Index = 0U; Index < PortNumber;Index++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1532        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1533          if(Port_lIsPortAvailable(Index) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1534          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1535            ConfigIndex++; /* to identify the Index of configuration*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1536          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1537        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1538  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1539          /* Get the config data location for specified Port */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1540        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1541          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1542        DataPtr =(const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1543                 ((Port_kConfigPtr->PortConfigSetPtr)+ConfigIndex);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1544  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1545        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1546          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1547        if ((((*(DataPtr + PORT_DATA_OFS_MODE)) & ((uint32)0x01U << PinNumber))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1548              == PORT_PIN_MODE_NOT_CHANGEABLE)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1549           )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1550        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1551          /*PORT223: Report PORT_E_MODE_UNCHANGEABLE DET if the pin is configured
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1552           as mode not changeable */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1553          #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1554          Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1555            PORT_SID_SETPINMODE,PORT_E_MODE_UNCHANGEABLE);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1556          #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1557  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1558          ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1559        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1560        else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1561        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1562  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1563          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1564            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1565          Direction = (uint8)((PORT_SFR_RUNTIME_USER_MODE_READ32(*(IocrRegPtr + \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1566             (PinNumber / PORT_NUM_FOUR))) & PORT_PIN_IOCR0_SETMASK(PinNumber)) \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1567                                       >> PORT_IOCR0_BIT_SHIFT_COUNT(PinNumber));
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1568  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1569          ErrMode = Port_lModeErrChk(Direction, Mode, ConfigIndex, PinNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1570  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1571          if (ErrMode == 1U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1572          {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1573            #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1574            /* Report PORT_E_PARAM_INVALID_MODE DET if pin mode is not valid */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1575            Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1576              PORT_SID_SETPINMODE,PORT_E_PARAM_INVALID_MODE);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1577            #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1578  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1579  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1580            /*Report Safety Error if the Mode is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1581            #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1582            SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1583               PORT_SID_SETPINMODE,PORT_E_PARAM_INVALID_MODE);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1584            #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1585  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1586            ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1587  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1588          }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1589        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1590        #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1591      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1592    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1593  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1594    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1595    if (ErrStatus == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1596    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1597    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1598  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1599      /* Set the new mode in IOCR register */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1600      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1601        to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1602      PORT_SFR_RUNTIME_USER_MODE_MODIFY32((*(IocrRegPtr + \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1603             (PinNumber / PORT_NUM_FOUR))),PORT_IOCR0_MODE_CLEARMASK(PinNumber), \ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1604                          ((uint32)Mode << PORT_IOCR0_BIT_SHIFT_COUNT(PinNumber)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1605    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1606  }/* Port_SetPinMode */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1607  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1608  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1609  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1610  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lModeErrChk                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1611  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1612  **                      uint8 Dir,                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1613  **                      Port_PinModeType Mode,                                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1614  **                      uint32 ConfigIndex,                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1615  **                      uint32 PinNumber                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1616  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1617  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1618  ** Service ID       : NA                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1619  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1620  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1621  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1622  ** Reentrancy       : Re-entrant                                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1623  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1624  ** Parameters (in)  : uint8 Dir - Current direction of a pin                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1625  **                    Port_PinModeType Mode - port pin mode to be set         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1626  **                    uint32 ConfigIndex - Array Index                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1627  **                    uint32 PinNumber - port pin number                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1628  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1629  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1630  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1631  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1632  **                    0 -No error in the pin mode set                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1633  **                    1 -Error in the pin mode set                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1634  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1635  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1636  **   - Checks for the error.                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1637  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1638  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1639  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1640  IFX_LOCAL_INLINE uint32 Port_lModeErrChk
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1641  (
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1642    uint8 Dir, Port_PinModeType Mode, uint32 ConfigIndex, uint32 PinNumber
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1643  )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1644  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1645    uint32 ErrStatus;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1646    uint32 Position;        /* Variables for determining if the specified*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1647    uint32 Mode_supported;  /* mode is supported or not */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1648  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1649    ErrStatus = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1650  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1651    /* parameter Pin is valid, check for the pin valid mode */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1652    if ((Dir & (uint8)PORT_DIR_MSK) == (uint8)PORT_PIN_IN)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1653    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1654      if (Mode != (Port_PinModeType)PORT_PIN_MODE_GPIO)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1655      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1656        ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1657      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1658    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1659    else if ( (Mode & AVAILABLE_MODE_MASK) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1660    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1661      ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1662    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1663    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1664    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1665      Position = Mode >> PORT_IOCR_PC_POS;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1666      Mode_supported = (uint32)1U << Position;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1667  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1668      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1669          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1670      if(((uint32)(Port_kConfigPtr->
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1671                    PortPinHwSupportedModes[ConfigIndex].U[PinNumber]) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1672            Mode_supported ) == 0U
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1673        )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1674      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1675        ErrStatus = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1676      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1677    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1678  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1679    return(ErrStatus);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1680  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1681  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1682  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkPin                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1683  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1684  **                      Port_PinType Pin,                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1685  **                      uint32 PortNo,                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1686  **                      uint32 PinNo                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1687  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1688  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1689  ** Service ID       : NA                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1690  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1691  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1692  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1693  ** Reentrancy       : Re-entrant                                              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1694  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1695  ** Parameters (in)  : Port_PinType Pin -  pin ID whose mode has to be set     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1696  **                    uint32 PinNo - port pin number                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1697  **                    uint32 PortNo - port number                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1698  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1699  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1700  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1701  ** Return value     : uint8                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1702  **                    0 - No error if portpin is available                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1703  **                    1 - Error if portpin is not available                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1704  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1705  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1706  **   - Checks for the error.                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1707  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1708  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1709  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1710  IFX_LOCAL_INLINE uint8 Port_lChkPin(Port_PinType Pin,uint32 PortNo,uint32 PinNo)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1711  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1712    uint8 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1713    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1714    uint32 PortReadOnly;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1715    uint32 PinAvailable;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1716    uint32 PortAvailable;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1717    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1718  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1719    RetVal = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1720    #if ((PORT_DEV_ERROR_DETECT == STD_OFF) && (PORT_SAFETY_ENABLE == STD_OFF))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1721    UNUSED_PARAMETER(PortNo)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1722    UNUSED_PARAMETER(PinNo)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1723    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1724  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1725    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1726  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1727    PortAvailable = Port_lIsPortAvailable(PortNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1728    PortReadOnly  = Port_lIsPortReadOnly(PortNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1729  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1730    if( PortAvailable != 0U )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1731    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1732      PinAvailable  = Port_lIsPinAvailable(PortNo,PinNo);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1733    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1734    else
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1735    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1736      /* If Port is not available, then Pin also Not available */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1737      PinAvailable = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1738    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1739  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1740  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1741    if ( (Pin > PORT_MAX_PIN_ID) ||
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1742          ((PortReadOnly != 0U) || (PinAvailable == 0U))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1743       )
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1744    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1745    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1746      /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1747      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1748        PORT_SID_SETPINMODE,PORT_E_PARAM_PIN);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1749  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1750    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1751  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1752    #if (PORT_SAFETY_ENABLE == STD_ON)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1753      /*Report Safety Error if the pin is out of range */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1754      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1755          PORT_SID_SETPINMODE,PORT_E_PARAM_PIN);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1756  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1757    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1758  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1759    RetVal = 1U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1760    }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1761  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1762    #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1763  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1764   return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1765  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1766  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1767  #endif /* (PORT_DEV_ERROR_DETECT == STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1768  #endif /* (PORT_SET_PIN_MODE_API == STD_ON) */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1769  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1770  ** Traceability     : [cover parentID=DS_AS_PORT043_PORT055,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1771                         DS_AS_PORT001_PORT002_PORT041,DS_AS_PORT214,
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1772                         DS_AS_PORT042]                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1773  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1774  ** Syntax           : IFX_LOCAL_INLINE void Port_lIOInit(void)                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1775  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1776  ** [/cover]                                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1777  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1778  ** Service ID       : NA                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1779  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1780  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1781  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1782  ** Reentrancy       : None Re-entrant                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1783  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1784  ** Parameters (in)  : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1785  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1786  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1787  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1788  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1789  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1790  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1791  **   - INLINE function to initialize Port registers                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1792  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1793  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1794  IFX_LOCAL_INLINE void Port_lIOInit(void)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1795  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1796    const uint32            *DataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1797    const Port_n_ConfigType *ConfigDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1798    /* Each Port Number for the hardware unit */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1799    uint32                   PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1800    /* Each Port level for the hardware unit */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1801    uint32                   PortLevel;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1802    /* Index to identify the port configuration information
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1803    from the configuration array  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1804    uint32                   ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1805    Ifx_P                   *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1806    const uint32            *LVDSDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1807    const uint32            *PCSRDataPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1808    volatile uint32         *LVDSRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1809    volatile uint32         *PCSRRegPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1810    uint32                   counter;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1811  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1812    /* Function call to initialize PDR registers */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1813    Port_lPDRInit();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1814  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1815    ConfigIndex = 0U;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1816  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1817    LVDSDataPtr = (const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1818                                 (Port_kConfigPtr->Port_LVDSConfigTypePtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1819  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1820    PCSRDataPtr = (const uint32*)(const void*)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1821                                 (Port_kConfigPtr->Port_PCSRConfigTypePtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1822  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1823    /* writing P_OUT and IOCR registers */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1824    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1825    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1826  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1827      if(Port_lIsPortAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1828      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1829        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1830          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1831        ConfigDataPtr = (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1832  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1833        /* Address of each port configuration */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1834        DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1835  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1836        PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1837  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1838        /*
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1839         PORT043: PORT055: OUT register is written before IOCR bit field to avoid
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1840         the glitches on the pin
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1841        */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1842        if(Port_lIsPortReadOnly(PortNumber) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1843        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1844          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1845            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1846          PortLevel = (*(DataPtr + PORT_DATA_OFS_LEVEL));
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1847          PORT_SFR_INIT_USER_MODE_WRITE32(
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1848                            PortAddressPtr->OMR.U, Port_lPinLevel(PortLevel));
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1849        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1850  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1851        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1852        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1853          PORT_SFR_INIT_USER_MODE_WRITE32(PortAddressPtr->IOCR0.U, *DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1854        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1855        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1856            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1857        DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1858  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1859        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1860        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1861          PORT_SFR_INIT_USER_MODE_WRITE32(PortAddressPtr->IOCR4.U, *DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1862        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1863        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1864            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1865        DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1866  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1867        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1868        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1869          PORT_SFR_INIT_USER_MODE_WRITE32(PortAddressPtr->IOCR8.U, *DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1870        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1871        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1872            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1873        DataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1874  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1875        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1876        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1877          PORT_SFR_INIT_USER_MODE_WRITE32(PortAddressPtr->IOCR12.U, *DataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1878        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1879  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1880        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1881        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1882           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1883            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1884           LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1885                                            PORT_LPCR_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1886           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1887           {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1888            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1889              {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1890               PORT_SFR_INIT_RESETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1891                /* LPCRn */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1892               PORT_SFR_INIT_WRITE32(*LVDSRegPtr,*LVDSDataPtr);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1893               PORT_SFR_INIT_SETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1894              }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1895              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1896            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1897              LVDSRegPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1898              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1899            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1900              LVDSDataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1901           }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1902        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1903  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1904        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1905        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1906           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1907            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1908           PCSRRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1909                                           PORT_PCSR_REG_OFFSET);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1910           PORT_SFR_INIT_RESETSAFETYENDINIT_TIMED(PORT_ENDINIT_TIMEOUT);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1911           /* PCSRn */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1912           PORT_SFR_INIT_WRITE32((*PCSRRegPtr),(*PCSRDataPtr));
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1913           PORT_SFR_INIT_SETSAFETYENDINIT_TIMED();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1914  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1915           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1916            due to PBConfigStructure and is within allowed range.*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1917           PCSRDataPtr++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1918        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1919  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1920        ConfigIndex++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1921      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1922    } /* For loop */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1923  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1924    /* Initialize PORT 40 Pad Disable control register */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1925    /* Reset endinit protect */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1926    PORT_SFR_INIT_RESETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1927  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1928    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1929      to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1930    PORT_SFR_INIT_WRITE32(P40_PDISC.U,Port_kConfigPtr->PDiscSet[0U]);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1931  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1932    /* Set endinit protect */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1933    PORT_SFR_INIT_SETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1934  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1935  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1936  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1937  ** Syntax           : IFX_LOCAL_INLINE void Port_lPDRInit(void)               **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1938  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1939  ** Service ID       : NA                                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1940  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1941  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1942  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1943  ** Reentrancy       : None Re-entrant                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1944  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1945  ** Parameters (in)  : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1946  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1947  ** Parameters (out) : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1948  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1949  ** Return value     : none                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1950  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1951  ** Description      : This function:                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1952  **   - INLINE function to initialize Port PDR registers                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1953  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1954  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1955  IFX_LOCAL_INLINE void Port_lPDRInit(void)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1956  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1957    /* Each Port Number for the hardware unit  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1958    uint32                  PortNumber;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1959    /* Index to identify the port configuration information
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1960    from the configuration array  */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1961    uint32                  ConfigIndex;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1962    Ifx_P            *PortAddressPtr;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1963  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1964    ConfigIndex = 0U;
	mov	d8,#0
.L320:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1965    /* Reset endinit protect */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1966  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1967    /* Port driver strength is configured in Port PDR0 register */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1968    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)
	mov	d9,#0
.L322:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1968    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	j	.L2
.L3:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1969    {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1970      /* Parameter Port is checked for validity */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1971      if(Port_lIsPortAvailable(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1972      {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1973        PORT_SFR_INIT_RESETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1974        PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1975        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1976          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1977        PORT_SFR_INIT_WRITE32((PortAddressPtr->PDR0.U),\ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1978          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength0);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1979  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1980        if(Port_lIsPortPdr1Available(PortNumber) != 0U)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1981        {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1982          PortAddressPtr = Port_lAdr(PortNumber);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1983          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1984          due to PBConfigStructure and is within allowed range*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1985          PORT_SFR_INIT_WRITE32((PortAddressPtr->PDR1.U),\ 
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1986                 Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength1);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1987        }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1988        PORT_SFR_INIT_SETENDINIT();
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1989        ConfigIndex++;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1990      }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1991    }/* For loop */
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1992  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1993  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1994  ** Syntax           : IFX_LOCAL_INLINE Ifx_P * Port_lAdr                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1995  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1996  **                      uint32 PortNumber                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1997  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1998  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1999  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2000  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2001  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2002  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2003  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2004  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2005  ** Parameters (in)  : uint32 PortNumber                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2006  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2007  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2008  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2009  ** Return value     : Ifx_P *RetVal -Return the port adresses.                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2010  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2011  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2012  ** - The function like macro is to extract the Address of Px_OUT              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2013  **   register.                                                                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2014  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2015  IFX_LOCAL_INLINE Ifx_P * Port_lAdr(uint32 PortNumber)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2016  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2017    Ifx_P *RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2018  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2019    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2020            to efficiently access the SFRs of PORT*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2021    RetVal = ( ((Ifx_P *)(void *)&P00_OUT +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2022                (((PortNumber / PORT_CONSTANT_10) * PORT_CONSTANT_16) +
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2023                (PortNumber % PORT_CONSTANT_10)))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2024             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2027  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2028  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2029  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2030  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2031  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2032  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2033  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2034  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2035  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2036  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2037  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2038  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2039  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2040  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2041  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2042  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2043  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2044  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2045  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2046  **                    RetVal - Value which denotes whether the port is        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2047  **                    available or not                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2048  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2049  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2050  ** - The function like macro is to check if the port is available or not      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2051  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2052  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2053  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2054  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2055    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2056  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2057    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2058               ((uint32)PORTS_AVAILABLE_00_31)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2059             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2060    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2061  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2062  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2063  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2064  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2065  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2066  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2067  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2068  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2069  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2070  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2071  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2072  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2073  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2074  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2075  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2076  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2077  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2078  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2079  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2080  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2081  **                    RetVal - Value which denotes whether the port is        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2082  **                    available or not                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2083  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2084  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2085  ** - The function like macro is to check if the port is available or not      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2086  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2087  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2088  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2089  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2090    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2091  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2092    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2093               ((uint32)PORTS_AVAILABLE_32_63)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2094             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2095    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2096  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2097  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2098  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2099  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2100  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2101  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2102  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2103  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2104  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2105  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2106  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2107  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2108  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2109  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2110  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2111  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2112  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2113  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2114  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2115  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2116  **                   RetVal - Value which denotes whether the port is         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2117  **                   available or not.                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2118  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2119  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2120  ** - The function like macro is to check if the port is read only or          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2121  **   it is writable.                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2122  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2123  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2124  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2125    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2126  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :
	mov	d15,#31
.L376:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L4
.L134:
	mov	d0,#1
.L377:
	add	d1,d9,#-32
.L378:
	sh	d0,d0,d1
.L379:
	and	d0,d0,#259
.L324:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2095    return(RetVal);      (inlined)
	j	.L5

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2096  }      (inlined)
.L5:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L6
.L4:
	mov	d0,#1
.L380:
	sh	d15,d0,d9
.L381:
	mov.u	d0,#60421
	addih	d0,d0,#240
.L325:
	and	d0,d15
.L382:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2060    return(RetVal);      (inlined)
	j	.L7

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2061  }      (inlined)
.L7:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L6:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2130    return(RetVal);      (inlined)
	j	.L8

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2131  }      (inlined)
.L8:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1971      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
	jeq	d0,#0,.L9
.L128:
	call	Mcal_ResetENDINIT
.L146:
	movh.a	a2,#61444
	lea	a2,[a2]@los(0xf003a000)
.L383:
	mov	d15,#10
.L384:
	div.u	e0,d9,d15
.L385:
	mov	d15,#10
.L386:
	div.u	e2,d9,d15
	sh	d2,#4
.L387:
	add	d1,d2
	sh	d15,d1,#8
.L388:
	addsc.a	a4,a2,d15,#0
.L326:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);      (inlined)
	j	.L10

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }      (inlined)
.L10:
	sh	d0,d8,#5
	ld.a	a15,[a10]
	ld.a	a15,[a15]
	ld.a	a15,[a15]
	addsc.a	a15,a15,d0,#0
	ld.w	d15,[a15]20
.L151:
	st.w	[a4]64,d15
.L152:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2128              (Port_lIsPortAvailable31(Port))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2129             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2130    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2131  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2132  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2133  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2134  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2135  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2136  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2137  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2138  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2139  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2140  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2141  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2142  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2143  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2144  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2145  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2146  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2147  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2148  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2149  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2150  **                    RetValue -Value which denotes whether the Port          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2151  **                    is read only or not                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2152  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2153  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2154  ** - The function like macro is to check if the port is read only or          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2155  **   it is writable.                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2156  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2157  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2158  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2159    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2160  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2161    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2162               ((uint32)PORTS_READONLY_00_31)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2163              );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2164    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2165  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2166  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2167  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2168  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2169  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2170  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2171  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2172  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2173  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2174  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2175  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2176  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2177  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2178  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2179  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2180  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2181  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2182  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2183  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2184  **                    RetValue -Value which denotes whether the Port          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2185  **                    is read only or not                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2186  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2187  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2188  ** - The function like macro is to check if the port is read only or          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2189  **   it is writable.                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2190  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2191  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2192  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2193    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2194  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2195    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2196               ((uint32)PORTS_READONLY_32_63)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2197              );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2198    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2199  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2200  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2201  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2202  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2203  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2204  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2205  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2206  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2207  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2208  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2209  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2210  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2211  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2212  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2213  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2214  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2215  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2216  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2217  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2218  **                    RetValue -Value which denotes whether the Port          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2219  **                    is read only or not                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2220  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2221  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2222  ** - The function like macro is to check if the port is read only or          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2223  **   it is writable.                                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2224  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2225  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2226  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2227    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2228  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2229    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2230                                           (Port_lIsPortReadOnly40(Port))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2231              );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2232    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2233  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2234  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2235  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2236  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2237  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2238  **                      uint32 Port,uint32 Pin                                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2239  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2240  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2241  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2242  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2243  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2244  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2245  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2246  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2247  ** Parameters (in)  : uint32 Port,uint32 Pin - Port and Pin to be checked     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2248  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2249  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2250  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2251  ** Return value     : uint16                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2252  **                    RetVal -Value which denotes whether the Pin is present  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2253  **                    on the Port or not.                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2254  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2255  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2256  ** - The function like macro is to check if the port pin is available or not  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2257  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2258  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2259  IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable(uint32 Port,uint32 Pin)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2260  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2261    uint16 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2262  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2263    RetVal = (uint16)( ((uint32)PORT_CONSTANT_0x01 << (Pin)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2264                        (Port_kAvailablePins[(Port)])
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2265                     );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2266    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2267  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2268  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2269  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2270  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2271  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2272  **                     uint32 Port                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2273  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2274  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2275  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2276  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2277  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2278  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2279  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2280  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2281  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2282  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2283  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2284  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2285  ** Return value     : uint16                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2286  **                    RetValue -Value which denotes whether PDR1 register     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2287  **                    present for the port or not                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2288  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2289  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2290  ** - The function like macro is to check if any of the port pin 8 - 15        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2291  **   is available or not for the microcontroller.                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2292  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2293  IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2294  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2295    uint16 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2296  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2297    RetVal = (uint16)(((uint32)(PORT_PDR1_MASK)) & (Port_kAvailablePins[(Port)]));
	movh.a	a15,#@his(Port_kAvailablePins)
	lea	a15,[a15]@los(Port_kAvailablePins)
.L389:
	addsc.a	a15,a15,d9,#1
	ld.hu	d15,[a15]0
.L390:
	mov.u	d1,#65280
.L328:
	and	d15,d1
.L391:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2298    return(RetVal);      (inlined)
	j	.L11

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2299  }      (inlined)
.L11:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1980        if(Port_lIsPortPdr1Available(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L12
.L155:
	mov	d15,#10
.L329:
	div.u	e2,d9,d15
.L392:
	mov	d15,#10
.L393:
	div.u	e4,d9,d15
	sh	d4,#4
.L394:
	add	d3,d4
	sh	d15,d3,#8
.L395:
	addsc.a	a2,a2,d15,#0
.L330:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);      (inlined)
	j	.L13

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }      (inlined)
.L13:
	ld.a	a15,[a10]
	ld.a	a15,[a15]
	ld.a	a15,[a15]
	addsc.a	a15,a15,d0,#0
	ld.w	d15,[a15]24
.L162:
	st.w	[a2]68,d15

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1980        if(Port_lIsPortPdr1Available(PortNumber) != 0U)      (inlined)
.L12:
	call	Mcal_SetENDINIT
.L327:
	add	d8,#1

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1971      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
.L9:
	add	d9,#1

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1968    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
.L2:
	mov	d15,#40
.L396:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1968    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	jlt.u	d9,d15,.L3
.L122:
	mov	d8,#0
.L321:
	ld.a	a15,[a10]
	ld.a	a15,[a15]
.L397:
	ld.a	a12,[a15]8
.L331:
	ld.a	a13,[a15]12
.L332:
	mov	d9,#0
.L323:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1824    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	j	.L14
.L15:
	mov	d15,#31
.L398:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L16
.L166:
	mov	d0,#1
.L399:
	add	d1,d9,#-32
.L400:
	sh	d0,d0,d1
.L401:
	and	d0,d0,#259
.L333:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2095    return(RetVal);      (inlined)
	j	.L17

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2096  }      (inlined)
.L17:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L18
.L16:
	mov	d0,#1
.L402:
	sh	d15,d0,d9
.L403:
	mov.u	d0,#60421
	addih	d0,d0,#240
.L334:
	and	d0,d15
.L404:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2060    return(RetVal);      (inlined)
	j	.L19

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2061  }      (inlined)
.L19:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L18:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2130    return(RetVal);      (inlined)
	j	.L20

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2131  }      (inlined)
.L20:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1827      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
	jeq	d0,#0,.L21
.L164:
	ld.a	a15,[a10]
	ld.a	a15,[a15]
.L405:
	ld.a	a15,[a15]
.L406:
	sh	d15,d8,#5
.L407:
	addsc.a	a2,a15,d15,#0
.L170:
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf003a000)
.L408:
	mov	d15,#10
.L409:
	div.u	e0,d9,d15
.L335:
	mov	d15,#10
.L410:
	div.u	e2,d9,d15
	sh	d2,#4
.L411:
	add	d1,d2
	sh	d15,d1,#8
.L412:
	addsc.a	a15,a15,d15,#0
.L336:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);      (inlined)
	j	.L22

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }      (inlined)
.L22:
	mov	d15,#31
.L413:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2229    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
	jlt.u	d15,d9,.L23
.L188:
	mov	d15,#0
.L337:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2164    return(RetVal);      (inlined)
	j	.L24

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2165  }      (inlined)
.L24:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2229    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
	j	.L25
.L23:
	mov	d15,#1
.L414:
	add	d0,d9,#-32
.L415:
	sh	d15,d15,d0
.L416:
	and	d15,d15,#256
.L338:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2198    return(RetVal);      (inlined)
	j	.L26

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2199  }      (inlined)
.L26:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2229    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
.L25:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2232    return(RetVal);      (inlined)
	j	.L27

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2233  }      (inlined)
.L27:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1842        if(Port_lIsPortReadOnly(PortNumber) == 0U)      (inlined)
	jne	d15,#0,.L28
.L182:
	ld.w	d15,[a2]16
.L200:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2298    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2299  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2300  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2301  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2302  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2303  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2304  **                      uint32 Port,uint16 Pin                                **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2305  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2306  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2307  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2308  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2309  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2310  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2311  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2312  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2313  ** Parameters (in)  : uint32 Port,uint16 Pin - Port and Pin to be checked     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2314  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2315  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2316  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2317  ** Return value     : uint16                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2318  **                    RetValue -Value which denotes whether Iocr register     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2319  **                    is available or not for the microcontroller             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2320  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2321  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2322  ** - The function like macro is to check if the IOCRx register for the port   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2323  **   is available or not for the microcontroller.                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2324  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2325  IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(uint32 Port,uint16 Pin)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2326  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2327    uint16 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2328  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2329    RetVal = (uint16)( ((uint32)(Pin)) & (Port_kAvailablePins[(Port)]) );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2330    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2331  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2332  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2333  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2334  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2335  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lNumber                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2336  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2337  **                      Port_PinType pin                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2338  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2339  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2340  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2341  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2342  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2343  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2344  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2345  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2346  ** Parameters (in)  : Port_PinType Pin                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2347  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2348  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2349  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2350  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2351  **                    RetValue -Value which denotes port number extracted     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2352  **                    from pin symbolic ID                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2353  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2354  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2355  ** - Defines to extract port number Port_PinType data, bit4 to bit 11 (8 bit) **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2356  **   represents the Port Number, to get that value Right shifted              **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2357  **   by 4 and Mask with 0xFF                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2358  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2359  IFX_LOCAL_INLINE uint32 Port_lNumber(Port_PinType Pin)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2360  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2361     uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2362  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2363     RetVal = (((Pin) >> PORT_NUMBER_OFFSET) & PORT_NUM_LOW8_MASK);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2364     return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2365  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2366  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2367  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2368  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lPinNumber                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2369  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2370  **                      Port_PinType pin                                      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2371  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2372  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2373  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2374  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2375  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2376  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2377  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2378  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2379  ** Parameters (in)  : Port_PinType Pin                                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2380  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2381  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2382  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2383  * Return value     : uint32                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2384  **                   RetValue -Value which denotes pin number extracted       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2385  **                   from pin symbolic ID                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2386  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2387  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2388  **  -Defines to extract pin number from Port_PinType data                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2389  **   least significant 4-bit represents the Pin Number, to get that           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2390  **   value Masked with 0x0F                                                   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2391  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2392  IFX_LOCAL_INLINE uint32 Port_lPinNumber(Port_PinType Pin)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2393  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2394     uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2395  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2396     RetVal = ((Pin) & PORT_PIN_LOW4_MASK);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2397  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2398     return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2399  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2400  #endif
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2401  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2402  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2403  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lPinLevel                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2404  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2405  **                      uint32 level                                          **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2406  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2407  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2408  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2409  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2410  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2411  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2412  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2413  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2414  ** Parameters (in)  : uint32 Level                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2415  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2416  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2417  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2418  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2419  **                    RetVal - Value to be set for the OMR register           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2420  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2421  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2422  ** -OMR register value to set the configured initial level                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2423  **  To get the port pin level Masked with 0x0000FFFFU and left shited by 16   **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2424  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2425  IFX_LOCAL_INLINE uint32 Port_lPinLevel(uint32 Level)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2426  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2427    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2428  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2429    RetVal = ((((~(Level)) & PORT_LOWER_16BIT_MASK) << PORT_16BIT_SHIFTVALUE) |
	mov	d0,#-1
	xor	d0,d15
.L417:
	insert	d0,d0,#0,#16,#16
.L418:
	sh	d0,d0,#16
.L339:
	or	d0,d15
.L419:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2433    return(RetVal);      (inlined)
	j	.L29

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2434  }      (inlined)
.L29:
	st.w	[a15]4,d0

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1842        if(Port_lIsPortReadOnly(PortNumber) == 0U)      (inlined)
.L28:
	mov	d15,#15
.L206:
	movh.a	a4,#@his(Port_kAvailablePins)
	lea	a4,[a4]@los(Port_kAvailablePins)
.L420:
	addsc.a	a5,a4,d9,#1
	ld.hu	d0,[a5]0
.L340:
	and	d15,d0
.L421:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2330    return(RetVal);      (inlined)
	j	.L30

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2331  }      (inlined)
.L30:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1851        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)      (inlined)
	jeq	d15,#0,.L31
.L207:
	ld.w	d15,[a2]
.L172:
	st.w	[a15]16,d15

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1851        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)      (inlined)
.L31:
	add.a	a2,#4
.L422:
	mov	d15,#240
.L214:
	addsc.a	a5,a4,d9,#1
	ld.hu	d0,[a5]0
.L341:
	and	d15,d0
.L423:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2330    return(RetVal);      (inlined)
	j	.L32

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2331  }      (inlined)
.L32:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1859        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)      (inlined)
	jeq	d15,#0,.L33
.L215:
	ld.w	d15,[a2]
.L173:
	st.w	[a15]20,d15

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1859        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)      (inlined)
.L33:
	add.a	a2,#4
.L424:
	mov	d15,#3840
.L217:
	addsc.a	a5,a4,d9,#1
	ld.hu	d0,[a5]0
.L342:
	and	d15,d0
.L425:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2330    return(RetVal);      (inlined)
	j	.L34

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2331  }      (inlined)
.L34:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1867        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)      (inlined)
	jeq	d15,#0,.L35
.L218:
	ld.w	d15,[a2]
.L174:
	st.w	[a15]24,d15

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1867        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)      (inlined)
.L35:
	add.a	a2,#4
.L426:
	mov.u	d15,#61440
.L220:
	addsc.a	a4,a4,d9,#1
	ld.hu	d0,[a4]0
.L343:
	and	d15,d0
.L427:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2330    return(RetVal);      (inlined)
	j	.L36

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2331  }      (inlined)
.L36:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1875        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)      (inlined)
	jeq	d15,#0,.L37
.L221:
	ld.w	d15,[a2]
.L175:
	st.w	[a15]28,d15

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1875        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)      (inlined)
.L37:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2430                (Level)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2431             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2432  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2433    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2434  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2435  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2436  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2437  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2438  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2439  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2440  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2441  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2442  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2443  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2444  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2445  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2446  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2447  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2448  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2449  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2450  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2451  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2452  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2453  **                    RetValue -Value which denotes whether Port supports LVDS**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2454  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2455  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2456  ** - The function like macro is to check if the port supports LVDS            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2457  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2458  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2459  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2460  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2461    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2462  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2463    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2464               ((uint32)PORTS_LVDS_00_31)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2465             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2466    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2467  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2468  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2469  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2470  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2471  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2472  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2473  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2474  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2475  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2476  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2477  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2478  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2479  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2480  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2481  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2482  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2483  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2484  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2485  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2486  **                    RetValue -Value which denotes whether Port supports LVDS**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2487  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2488  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2489  ** - The function like macro is to check if the port supports LVDS            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2490  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2491  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2492  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2493  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2494    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2495  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2496    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2497               ((uint32)PORTS_LVDS_32_40)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2498             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2499    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2500  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2501  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2502  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2503  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2504  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2505  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2506  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2507  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2508  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2509  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2510  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2511  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2512  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2513  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2514  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2515  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2516  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2517  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2518  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2519  **                    RetValue -Value which denotes whether Port supports LVDS**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2520  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2521  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2522  ** - The function like macro is to check if the port supports LVDS            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2523  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2524  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2525  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2526  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2527    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2528  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2529    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :
	mov	d15,#31
.L428:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2529    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L38
.L229:
	mov	d15,#0
.L344:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2499    return(RetVal);      (inlined)
	j	.L39

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2500  }      (inlined)
.L39:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2529    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
	j	.L40
.L38:
	mov	d15,#1
.L429:
	sh	d0,d15,d9
.L430:
	mov	d15,#8192
	addih	d15,d15,#96
.L345:
	and	d15,d0
.L431:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2466    return(RetVal);      (inlined)
	j	.L41

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2467  }      (inlined)
.L41:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2529    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
.L40:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2532    return(RetVal);      (inlined)
	j	.L42

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2533  }      (inlined)
.L42:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1880        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L43
.L176:
	lea	a14,[a15]160
.L177:
	mov	d10,#0
.L346:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1886           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)      (inlined)
	j	.L44
.L45:
	ld.w	d15,[a12]
.L241:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2530              (Port_lIsPortLVDSAvailable31(Port))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2531             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2532    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2533  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2534  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2535  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2536  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2537  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2538  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2539  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2540  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2541  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2542  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2543  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2544  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2545  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2546  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2547  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2548  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2549  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2550  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2551  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2552  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2553  **                    RetValue -Value which denotes whether Port supports PCSR**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2554  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2555  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2556  ** - The function like macro is to check if the port supports PCSR            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2557  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2558  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2559  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2560  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2561    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2562  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2563    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2564               ((uint32)PORTS_PCSR_00_31)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2565             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2566    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2567  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2568  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2569  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2570  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2571  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2572  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2573  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2574  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2575  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2576  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2577  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2578  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2579  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2580  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2581  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2582  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2583  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2584  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2585  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2586  **                    RetValue -Value which denotes whether Port supports PCSR**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2587  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2588  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2589  ** - The function like macro is to check if the port supports PCSR            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2590  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2591  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2592  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2593  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2594    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2595  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2596    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2597               ((uint32)PORTS_PCSR_32_63)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2598             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2599    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2600  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2601  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2602  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2603  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2604  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2605  **                      uint32 Port                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2606  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2607  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2608  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2609  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2610  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2611  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2612  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2613  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2614  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2615  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2616  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2617  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2618  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2619  **                    RetValue -Value which denotes whether Port supports PCSR**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2620  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2621  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2622  ** - The function like macro is to check if the port supports PCSR            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2623  **   for the microcontroller.                                                 **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2624  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2625  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(uint32 Port)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2626  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2627    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2628  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2629    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2630              (Port_lIsPortPCSRAvailable31(Port))
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2631             );
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2632    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2633  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2634  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2635  /*******************************************************************************
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2636  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2637  **                    (                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2638  **                      uint32 PortLPCRvalue                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2639  **                    )                                                       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2640  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2641  ** Service ID       : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2642  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2643  ** Sync/Async       : Synchronous                                             **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2644  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2645  ** Reentrancy       : Non reentrant                                           **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2646  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2647  ** Parameters (in)  : uint32 PortLPCRvalue - Port LPCR Reg value to be checked**
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2648  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2649  ** Parameters (out) : None                                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2650  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2651  ** Return value     : uint32                                                  **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2652  **                    RetVal -Value which denotes the LVDS configuration      **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2653  **                    for the PortPinPair.                                    **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2654  **                                                                            **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2655  ** Description      :                                                         **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2656  ** - The function like macro is to check if the portpinpair for lvds is       **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2657  **     avialable for the microcontroller.                                     **
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2658  *******************************************************************************/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2659  IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(uint32 PortLPCRvalue)
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2660  {
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2661    uint32 RetVal;
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2662  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2663    RetVal = ( (PortLPCRvalue >> (uint32)16) & 0xFFFFU );
	sh	d15,d15,#-16
.L347:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2664    return(RetVal);      (inlined)
	j	.L46

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2665  }      (inlined)
.L46:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1888            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)      (inlined)
	jne	d15,#0,.L47
.L242:
	call	Mcal_ResetENDINIT
.L432:
	ld.w	d15,[a12]
.L348:
	st.w	[a14],d15
.L433:
	call	Mcal_SetENDINIT

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1888            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)      (inlined)
.L47:
	add.a	a14,#4
.L434:
	add.a	a12,#4
.L435:
	add	d10,#1

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1886           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)      (inlined)
.L44:
	jlt.u	d10,#3,.L45

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1880        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)      (inlined)
.L43:
	mov	d15,#31
.L436:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2629    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L48
.L253:
	mov	d15,#1
.L437:
	add	d0,d9,#-32
.L438:
	sh	d15,d15,d0
.L439:
	and	d15,d15,#256
.L349:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2599    return(RetVal);      (inlined)
	j	.L49

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2600  }      (inlined)
.L49:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2629    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
	j	.L50
.L48:
	mov	d15,#1
.L440:
	sh	d0,d15,d9
.L441:
	mov	d15,#2049
.L350:
	and	d15,d0
.L442:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2566    return(RetVal);      (inlined)
	j	.L51

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2567  }      (inlined)
.L51:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2629    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
.L50:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2632    return(RetVal);      (inlined)
	j	.L52

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2633  }      (inlined)
.L52:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1904        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L53
.L178:
	lea	a15,[a15]100
.L179:
	mov	d4,#9375
	sh	d4,#4
	call	Mcal_ResetSafetyENDINIT_Timed
.L443:
	ld.w	d15,[a13]
.L351:
	st.w	[a15],d15
.L444:
	call	Mcal_SetSafetyENDINIT_Timed
.L445:
	add.a	a13,#4

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1904        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)      (inlined)
.L53:
	add	d8,#1

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1827      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
.L21:
	add	d9,#1

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1824    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
.L14:
	mov	d15,#40
.L446:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  1824    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	jge.u	d15,d9,.L15
.L447:
	call	Mcal_ResetENDINIT
.L448:
	ld.a	a15,[a10]
	ld.a	a15,[a15]
	ld.a	a15,[a15]4
	ld.hu	d15,[a15]0
	movh.a	a15,#61444
	st.w	[a15]@los(0xf003e060),d15
.L449:
	call	Mcal_SetENDINIT
.L103:
	ret
.L98:
	
__Port_Init_function_end:
	.size	Port_Init,__Port_Init_function_end-Port_Init
.L83:
	; End of function
	
	.sdecl	'.text.Port.Port_RefreshPortDirection',code,cluster('Port_RefreshPortDirection')
	.sect	'.text.Port.Port_RefreshPortDirection'
	.align	2
	
	.global	Port_RefreshPortDirection
; Function Port_RefreshPortDirection
.L72:
Port_RefreshPortDirection:	.type	func
	mov	d3,#0
.L352:
	mov	d2,#0
.L54:
	mov	d1,d3
.L273:
	mov	d15,#31
.L454:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d3,.L55
.L277:
	mov	d0,#1
.L455:
	add	d1,d1,#-32
.L456:
	sh	d0,d0,d1
.L457:
	and	d0,d0,#259
.L353:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2095    return(RetVal);      (inlined)
	j	.L56

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2096  }      (inlined)
.L56:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L57
.L55:
	mov	d0,#1
.L458:
	sh	d1,d0,d1
.L459:
	mov.u	d0,#60421
	addih	d0,d0,#240
.L354:
	and	d0,d1
.L460:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2060    return(RetVal);      (inlined)
	j	.L58

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2061  }      (inlined)
.L58:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2127    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L57:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2130    return(RetVal);      (inlined)
	j	.L59

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2131  }      (inlined)
.L59:
	jeq	d0,#0,.L60
.L274:
	movh.a	a15,#@his(Port_kConfigPtr)
	lea	a15,[a15]@los(Port_kConfigPtr)
	ld.a	a15,[a15]
.L461:
	ld.a	a15,[a15]
.L462:
	sh	d15,d2,#5
.L463:
	addsc.a	a15,a15,d15,#0
.L283:
	movh.a	a2,#61444
	lea	a2,[a2]@los(0xf003a000)
.L464:
	mov	d15,#10
.L465:
	div.u	e0,d3,d15
.L355:
	mov	d15,#10
.L466:
	div.u	e4,d3,d15
	sh	d4,#4
.L467:
	add	d1,d4
	sh	d15,d1,#8
.L468:
	addsc.a	a2,a2,d15,#0
.L356:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);      (inlined)
	j	.L61

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }      (inlined)
.L61:
	lea	a2,[a2]16
.L284:
	mov	d6,#0
.L62:
	mov	d0,#1
.L469:
	sh	d0,d0,d6
	extr.u	d0,d0,#0,#16
.L470:
	movh.a	a4,#@his(Port_kAvailablePins)
	lea	a4,[a4]@los(Port_kAvailablePins)
.L471:
	addsc.a	a4,a4,d3,#1
	ld.hu	d1,[a4]0
.L357:
	and	d0,d1
.L472:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2266    return(RetVal);      (inlined)
	j	.L63

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2267  }      (inlined)
.L63:
	jeq	d0,#0,.L64
.L288:
	ld.w	d0,[a2]
.L358:
	and	d15,d6,#3
	sh	d1,d15,#3
	mov	d15,#248
	sh	d4,d15,d1
	mov	d5,#-1
	xor	d4,d5
	and	d0,d4
	ld.bu	d15,[a15]
	sh	d15,d15,d1
	or	d0,d15
	st.w	[a2],d0
.L64:
	add	d6,#1
.L473:
	and	d15,d6,#3
.L474:
	jne	d15,#0,.L65
.L475:
	add.a	a2,#4
.L65:
	add.a	a15,#1
.L476:
	mov	d15,#15
.L477:
	jge.u	d15,d6,.L62
.L478:
	add	d2,#1
.L60:
	add	d3,#1
.L479:
	mov	d15,#40
.L480:
	jge.u	d15,d3,.L54
.L481:
	ret
.L264:
	
__Port_RefreshPortDirection_function_end:
	.size	Port_RefreshPortDirection,__Port_RefreshPortDirection_function_end-Port_RefreshPortDirection
.L88:
	; End of function
	
	.sdecl	'.text.Port.Port_SetPinMode',code,cluster('Port_SetPinMode')
	.sect	'.text.Port.Port_SetPinMode'
	.align	2
	
	.global	Port_SetPinMode
; Function Port_SetPinMode
.L74:
Port_SetPinMode:	.type	func
	extr.u	d0,d4,#4,#8
.L360:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2364     return(RetVal);      (inlined)
	j	.L66

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2365  }      (inlined)
.L66:
	and	d1,d4,#15
.L362:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2398     return(RetVal);      (inlined)
	j	.L67

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2399  }      (inlined)
.L67:
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf003a000)
.L486:
	mov	d15,#10
.L487:
	div.u	e2,d0,d15
.L488:
	mov	d15,#10
.L489:
	div.u	e6,d0,d15
	sh	d6,#4
.L490:
	add	d3,d6
	sh	d15,d3,#8
.L491:
	addsc.a	a15,a15,d15,#0
.L364:

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2025    return(RetVal);      (inlined)
	j	.L68

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2026  }      (inlined)
.L68:
	lea	a15,[a15]16
.L313:
	insert	d15,d1,#0,#0,#2
	addsc.a	a15,a15,d15,#0
.L365:
	ld.w	d0,[a15]
.L361:
	and	d15,d1,#3
	sh	d1,d15,#3
.L363:
	mov	d15,#56
	sh	d15,d15,d1
	mov	d2,#-1
	xor	d15,d2
	and	d0,d15
	sh	d5,d5,d1
.L359:
	or	d0,d5
	st.w	[a15],d0
.L316:
	ret
.L296:
	
__Port_SetPinMode_function_end:
	.size	Port_SetPinMode,__Port_SetPinMode_function_end-Port_SetPinMode
.L93:
	; End of function
	
	.sdecl	'.rodata.Port.Port_kAvailablePins',data,rom,cluster('Port_kAvailablePins')
	.sect	'.rodata.Port.Port_kAvailablePins'
	.align	2
Port_kAvailablePins:	.type	object
	.size	Port_kAvailablePins,82
	.half	8191
	.space	2
	.half	511
	.space	14
	.half	511,7756
	.space	2
	.half	15,2047,511
	.space	8
	.half	32719,255,15,63
	.space	16
	.half	29,16383
	.space	12
	.half	1023
	.sdecl	'.bss.Port.Port_kConfigPtr',data,cluster('Port_kConfigPtr')
	.sect	'.bss.Port.Port_kConfigPtr'
	.align	4
Port_kConfigPtr:	.type	object
	.size	Port_kConfigPtr,4
	.space	4
	.calls	'Port_Init','Mcal_ResetENDINIT'
	.calls	'Port_Init','Mcal_SetENDINIT'
	.calls	'Port_Init','Mcal_ResetSafetyENDINIT_Timed'
	.calls	'Port_Init','Mcal_SetSafetyENDINIT_Timed'
	.calls	'Port_Init','',8
	.calls	'Port_RefreshPortDirection','',0
	.extern	Mcal_ResetENDINIT
	.extern	Mcal_SetENDINIT
	.extern	Mcal_ResetSafetyENDINIT_Timed
	.extern	Mcal_SetSafetyENDINIT_Timed
	.calls	'Port_SetPinMode','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L76:
	.word	17322
	.half	3
	.word	.L77
	.byte	4
.L75:
	.byte	1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L78
.L101:
	.byte	2
	.byte	'Port_lIOInit',0,3,1,130,14,23,1,1
.L104:
	.byte	3,4,4,4,4,4,4,4,4,4,4,4,4,0,0
.L121:
	.byte	2
	.byte	'Port_lPDRInit',0,3,1,163,15,23,1,1
.L123:
	.byte	3,4,4,4,4,0,0
.L109:
	.byte	5
	.byte	'unsigned int',0,4,7,5
	.byte	'int',0,4,5,5
	.byte	'unsigned char',0,1,8
.L159:
	.byte	5
	.byte	'unsigned short int',0,2,7,6
	.byte	'_Ifx_P_OUT_Bits',0,2,143,3,16,4,7
	.byte	'P0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,180,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	274
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMR_Bits',0,2,169,2,16,4,7
	.byte	'PS0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'PS4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'PS8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'PS12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'PCL0',0,1
	.word	235
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	235
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	235
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'PCL4',0,1
	.word	235
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	235
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	235
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'PCL8',0,1
	.word	235
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	235
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	235
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'PCL12',0,1
	.word	235
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	235
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	235
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,132,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	590
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_ID_Bits',0,2,110,16,4,7
	.byte	'MODREV',0,1
	.word	235
	.byte	8,0,2,35,0,7
	.byte	'MODTYPE',0,1
	.word	235
	.byte	8,0,2,35,1,7
	.byte	'MODNUMBER',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,147,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1161
	.byte	4,2,35,0,0,10,4
	.word	235
	.byte	11,3,0,6
	.byte	'_Ifx_P_IOCR0_Bits',0,2,140,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PC0',0,1
	.word	235
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PC1',0,1
	.word	235
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PC2',0,1
	.word	235
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PC3',0,1
	.word	235
	.byte	5,0,2,35,3,0,8,2,163,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1289
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR4_Bits',0,2,166,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PC4',0,1
	.word	235
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PC5',0,1
	.word	235
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PC6',0,1
	.word	235
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PC7',0,1
	.word	235
	.byte	5,0,2,35,3,0,8,2,179,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1504
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR8_Bits',0,2,179,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PC8',0,1
	.word	235
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PC9',0,1
	.word	235
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PC10',0,1
	.word	235
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PC11',0,1
	.word	235
	.byte	5,0,2,35,3,0,8,2,187,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1719
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR12_Bits',0,2,153,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PC12',0,1
	.word	235
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PC13',0,1
	.word	235
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PC14',0,1
	.word	235
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PC15',0,1
	.word	235
	.byte	5,0,2,35,3,0,8,2,171,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1936
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IN_Bits',0,2,118,16,4,7
	.byte	'P0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,155,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2156
	.byte	4,2,35,0,0,10,24
	.word	235
	.byte	11,23,0,6
	.byte	'_Ifx_P_PDR0_Bits',0,2,204,3,16,4,7
	.byte	'PD0',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PL0',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'PD1',0,1
	.word	235
	.byte	3,1,2,35,0,7
	.byte	'PL1',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'PD2',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PL2',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'PD3',0,1
	.word	235
	.byte	3,1,2,35,1,7
	.byte	'PL3',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'PD4',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PL4',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'PD5',0,1
	.word	235
	.byte	3,1,2,35,2,7
	.byte	'PL5',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'PD6',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PL6',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'PD7',0,1
	.word	235
	.byte	3,1,2,35,3,7
	.byte	'PL7',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,204,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2479
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_PDR1_Bits',0,2,225,3,16,4,7
	.byte	'PD8',0,1
	.word	235
	.byte	3,5,2,35,0,7
	.byte	'PL8',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'PD9',0,1
	.word	235
	.byte	3,1,2,35,0,7
	.byte	'PL9',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'PD10',0,1
	.word	235
	.byte	3,5,2,35,1,7
	.byte	'PL10',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'PD11',0,1
	.word	235
	.byte	3,1,2,35,1,7
	.byte	'PL11',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'PD12',0,1
	.word	235
	.byte	3,5,2,35,2,7
	.byte	'PL12',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'PD13',0,1
	.word	235
	.byte	3,1,2,35,2,7
	.byte	'PL13',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'PD14',0,1
	.word	235
	.byte	3,5,2,35,3,7
	.byte	'PL14',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'PD15',0,1
	.word	235
	.byte	3,1,2,35,3,7
	.byte	'PL15',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,212,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2783
	.byte	4,2,35,0,0,10,8
	.word	235
	.byte	11,7,0,6
	.byte	'_Ifx_P_ESR_Bits',0,2,88,16,4,7
	.byte	'EN0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'EN1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'EN2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'EN3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'EN4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'EN5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'EN6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'EN7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'EN8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'EN9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'EN10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'EN11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'EN12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'EN13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'EN14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'EN15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,139,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3108
	.byte	4,2,35,0,0,10,12
	.word	235
	.byte	11,11,0,6
	.byte	'_Ifx_P_PDISC_Bits',0,2,182,3,16,4,7
	.byte	'PDIS0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PDIS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'PDIS2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'PDIS3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'PDIS4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'PDIS5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'PDIS6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'PDIS7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'PDIS8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'PDIS9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'PDIS10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'PDIS11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'PDIS12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'PDIS13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'PDIS14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'PDIS15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,196,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3448
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_PCSR_Bits',0,2,165,3,16,4,7
	.byte	'SEL0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'SEL1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'SEL2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'SEL3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'SEL4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'SEL5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'SEL6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'reserved_7',0,2
	.word	252
	.byte	3,6,2,35,0,7
	.byte	'SEL10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'SEL11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'reserved_12',0,4
	.word	212
	.byte	19,1,2,35,0,7
	.byte	'LCK',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,188,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3814
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR0_Bits',0,2,206,2,16,4,7
	.byte	'PS0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'reserved_4',0,4
	.word	212
	.byte	28,0,2,35,0,0,8,2,148,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4084
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR4_Bits',0,2,227,2,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	4,4,2,35,0,7
	.byte	'PS4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'reserved_8',0,4
	.word	212
	.byte	24,0,2,35,0,0,8,2,164,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4231
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR8_Bits',0,2,238,2,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	8,0,2,35,0,7
	.byte	'PS8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'reserved_12',0,4
	.word	212
	.byte	20,0,2,35,0,0,8,2,172,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4400
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR12_Bits',0,2,216,2,16,4,7
	.byte	'reserved_0',0,2
	.word	252
	.byte	12,4,2,35,0,7
	.byte	'PS12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,156,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4572
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR0_Bits',0,2,232,1,16,4,7
	.byte	'reserved_0',0,2
	.word	252
	.byte	16,0,2,35,0,7
	.byte	'PCL0',0,1
	.word	235
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	235
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	235
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'reserved_20',0,2
	.word	252
	.byte	12,0,2,35,2,0,8,2,228,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4747
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR4_Bits',0,2,253,1,16,4,7
	.byte	'reserved_0',0,4
	.word	212
	.byte	20,12,2,35,0,7
	.byte	'PCL4',0,1
	.word	235
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	235
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	235
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	235
	.byte	8,0,2,35,3,0,8,2,244,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4921
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR8_Bits',0,2,136,2,16,4,7
	.byte	'reserved_0',0,4
	.word	212
	.byte	24,8,2,35,0,7
	.byte	'PCL8',0,1
	.word	235
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	235
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	235
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'reserved_28',0,1
	.word	235
	.byte	4,0,2,35,3,0,8,2,252,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5095
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR12_Bits',0,2,243,1,16,4,7
	.byte	'reserved_0',0,4
	.word	212
	.byte	28,4,2,35,0,7
	.byte	'PCL12',0,1
	.word	235
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	235
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	235
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,236,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5271
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR_Bits',0,2,249,2,16,4,7
	.byte	'PS0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'PS4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'PS8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'PS12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,140,5,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5427
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR_Bits',0,2,147,2,16,4,7
	.byte	'reserved_0',0,2
	.word	252
	.byte	16,0,2,35,0,7
	.byte	'PCL0',0,1
	.word	235
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	235
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	235
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'PCL4',0,1
	.word	235
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	235
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	235
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'PCL8',0,1
	.word	235
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	235
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	235
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'PCL12',0,1
	.word	235
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	235
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	235
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,220,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5760
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_LPCR0_Bits',0,2,192,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'reserved_2',0,4
	.word	212
	.byte	30,0,2,35,0,0,8,2,195,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6108
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_LPCR1_Bits',0,2,200,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'reserved_2',0,4
	.word	212
	.byte	30,0,2,35,0,0,6
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,2,208,1,16,4,7
	.byte	'RDIS_CTRL',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'RX_DIS',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'TERM',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'LRXTERM',0,1
	.word	235
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,4
	.word	212
	.byte	24,0,2,35,0,0,8,2,203,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6232
	.byte	4,2,35,0,9
	.byte	'B_P21',0
	.word	6316
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_LPCR2_Bits',0,2,218,1,16,4,7
	.byte	'reserved_0',0,1
	.word	235
	.byte	8,0,2,35,0,7
	.byte	'LVDSR',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'LVDSRL',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'reserved_10',0,1
	.word	235
	.byte	2,4,2,35,1,7
	.byte	'TDIS_CTRL',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'TX_DIS',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'TX_PD',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'TX_PWDPD',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	252
	.byte	16,0,2,35,2,0,8,2,212,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6496
	.byte	4,2,35,0,0,10,76
	.word	235
	.byte	11,75,0,6
	.byte	'_Ifx_P_ACCEN1_Bits',0,2,82,16,4,7
	.byte	'reserved_0',0,4
	.word	212
	.byte	32,0,2,35,0,0,8,2,131,4,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6749
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_ACCEN0_Bits',0,2,45,16,4,7
	.byte	'EN0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'EN1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'EN2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'EN3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'EN4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'EN5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'EN6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'EN7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'EN8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'EN9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'EN10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'EN11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'EN12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'EN13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'EN14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'EN15',0,1
	.word	235
	.byte	1,0,2,35,1,7
	.byte	'EN16',0,1
	.word	235
	.byte	1,7,2,35,2,7
	.byte	'EN17',0,1
	.word	235
	.byte	1,6,2,35,2,7
	.byte	'EN18',0,1
	.word	235
	.byte	1,5,2,35,2,7
	.byte	'EN19',0,1
	.word	235
	.byte	1,4,2,35,2,7
	.byte	'EN20',0,1
	.word	235
	.byte	1,3,2,35,2,7
	.byte	'EN21',0,1
	.word	235
	.byte	1,2,2,35,2,7
	.byte	'EN22',0,1
	.word	235
	.byte	1,1,2,35,2,7
	.byte	'EN23',0,1
	.word	235
	.byte	1,0,2,35,2,7
	.byte	'EN24',0,1
	.word	235
	.byte	1,7,2,35,3,7
	.byte	'EN25',0,1
	.word	235
	.byte	1,6,2,35,3,7
	.byte	'EN26',0,1
	.word	235
	.byte	1,5,2,35,3,7
	.byte	'EN27',0,1
	.word	235
	.byte	1,4,2,35,3,7
	.byte	'EN28',0,1
	.word	235
	.byte	1,3,2,35,3,7
	.byte	'EN29',0,1
	.word	235
	.byte	1,2,2,35,3,7
	.byte	'EN30',0,1
	.word	235
	.byte	1,1,2,35,3,7
	.byte	'EN31',0,1
	.word	235
	.byte	1,0,2,35,3,0,8,2,251,3,9,4,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	228
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6836
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P',0,2,228,5,25,128,2,9
	.byte	'OUT',0
	.word	550
	.byte	4,2,35,0,9
	.byte	'OMR',0
	.word	1121
	.byte	4,2,35,4,9
	.byte	'ID',0
	.word	1240
	.byte	4,2,35,8,9
	.byte	'reserved_C',0
	.word	1280
	.byte	4,2,35,12,9
	.byte	'IOCR0',0
	.word	1464
	.byte	4,2,35,16,9
	.byte	'IOCR4',0
	.word	1679
	.byte	4,2,35,20,9
	.byte	'IOCR8',0
	.word	1896
	.byte	4,2,35,24,9
	.byte	'IOCR12',0
	.word	2116
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	1280
	.byte	4,2,35,32,9
	.byte	'IN',0
	.word	2430
	.byte	4,2,35,36,9
	.byte	'reserved_28',0
	.word	2470
	.byte	24,2,35,40,9
	.byte	'PDR0',0
	.word	2743
	.byte	4,2,35,64,9
	.byte	'PDR1',0
	.word	3059
	.byte	4,2,35,68,9
	.byte	'reserved_48',0
	.word	3099
	.byte	8,2,35,72,9
	.byte	'ESR',0
	.word	3399
	.byte	4,2,35,80,9
	.byte	'reserved_54',0
	.word	3439
	.byte	12,2,35,84,9
	.byte	'PDISC',0
	.word	3774
	.byte	4,2,35,96,9
	.byte	'PCSR',0
	.word	4044
	.byte	4,2,35,100,9
	.byte	'reserved_68',0
	.word	3099
	.byte	8,2,35,104,9
	.byte	'OMSR0',0
	.word	4191
	.byte	4,2,35,112,9
	.byte	'OMSR4',0
	.word	4360
	.byte	4,2,35,116,9
	.byte	'OMSR8',0
	.word	4532
	.byte	4,2,35,120,9
	.byte	'OMSR12',0
	.word	4707
	.byte	4,2,35,124,9
	.byte	'OMCR0',0
	.word	4881
	.byte	4,3,35,128,1,9
	.byte	'OMCR4',0
	.word	5055
	.byte	4,3,35,132,1,9
	.byte	'OMCR8',0
	.word	5231
	.byte	4,3,35,136,1,9
	.byte	'OMCR12',0
	.word	5387
	.byte	4,3,35,140,1,9
	.byte	'OMSR',0
	.word	5720
	.byte	4,3,35,144,1,9
	.byte	'OMCR',0
	.word	6068
	.byte	4,3,35,148,1,9
	.byte	'reserved_98',0
	.word	3099
	.byte	8,3,35,152,1,9
	.byte	'LPCR0',0
	.word	6192
	.byte	4,3,35,160,1,9
	.byte	'LPCR1',0
	.word	6441
	.byte	4,3,35,164,1,9
	.byte	'LPCR2',0
	.word	6700
	.byte	4,3,35,168,1,9
	.byte	'reserved_A4',0
	.word	6740
	.byte	76,3,35,172,1,9
	.byte	'ACCEN1',0
	.word	6796
	.byte	4,3,35,248,1,9
	.byte	'ACCEN0',0
	.word	7363
	.byte	4,3,35,252,1,0,12
	.word	7403
.L113:
	.byte	13
	.word	8006
.L145:
	.byte	14
	.byte	'Port_lAdr',0,3,1,223,15,26
	.word	8011
	.byte	1,1
.L147:
	.byte	15
	.byte	'PortNumber',0,1,223,15,43
	.word	212
.L149:
	.byte	4,0
.L139:
	.byte	14
	.byte	'Port_lIsPortAvailable31',0,3,1,133,16,25
	.word	212
	.byte	1,1
.L140:
	.byte	15
	.byte	'Port',0,1,133,16,56
	.word	212
.L142:
	.byte	4,0
.L133:
	.byte	14
	.byte	'Port_lIsPortAvailable40',0,3,1,168,16,25
	.word	212
	.byte	1,1
.L135:
	.byte	15
	.byte	'Port',0,1,168,16,56
	.word	212
.L137:
	.byte	4,0
.L127:
	.byte	14
	.byte	'Port_lIsPortAvailable',0,3,1,203,16,25
	.word	212
	.byte	1,1
.L129:
	.byte	15
	.byte	'Port',0,1,203,16,54
	.word	212
.L131:
	.byte	3,4,4,0,0
.L187:
	.byte	14
	.byte	'Port_lIsPortReadOnly31',0,3,1,237,16,25
	.word	212
	.byte	1,1
.L189:
	.byte	15
	.byte	'Port',0,1,237,16,55
	.word	212
.L191:
	.byte	4,0
.L193:
	.byte	14
	.byte	'Port_lIsPortReadOnly40',0,3,1,143,17,25
	.word	212
	.byte	1,1
.L194:
	.byte	15
	.byte	'Port',0,1,143,17,55
	.word	212
.L196:
	.byte	4,0
.L181:
	.byte	14
	.byte	'Port_lIsPortReadOnly',0,3,1,177,17,25
	.word	212
	.byte	1,1
.L183:
	.byte	15
	.byte	'Port',0,1,177,17,53
	.word	212
.L185:
	.byte	3,4,4,0,0
.L287:
	.byte	14
	.byte	'Port_lIsPinAvailable',0,3,1,211,17,25
	.word	252
	.byte	1,1
.L289:
	.byte	15
	.byte	'Port',0,1,211,17,53
	.word	212
.L291:
	.byte	15
	.byte	'Pin',0,1,211,17,65
	.word	212
.L293:
	.byte	4,0
.L154:
	.byte	14
	.byte	'Port_lIsPortPdr1Available',0,3,1,245,17,25
	.word	252
	.byte	1,1
.L156:
	.byte	15
	.byte	'Port',0,1,245,17,58
	.word	212
.L158:
	.byte	4,0
.L205:
	.byte	14
	.byte	'Port_lIsPortIocrAvailable',0,3,1,149,18,25
	.word	252
	.byte	1,1
.L208:
	.byte	15
	.byte	'Port',0,1,149,18,58
	.word	212
.L210:
	.byte	15
	.byte	'Pin',0,1,149,18,70
	.word	252
.L212:
	.byte	4,0
.L199:
	.byte	14
	.byte	'Port_lPinLevel',0,3,1,249,18,25
	.word	212
	.byte	1,1
.L201:
	.byte	15
	.byte	'Level',0,1,249,18,47
	.word	212
.L203:
	.byte	4,0
.L303:
	.byte	14
	.byte	'Port_lNumber',0,3,1,183,18,25
	.word	212
	.byte	1,1
.L304:
	.byte	15
	.byte	'Pin',0,1,183,18,51
	.word	212
.L306:
	.byte	4,0
.L308:
	.byte	14
	.byte	'Port_lPinNumber',0,3,1,216,18,25
	.word	212
	.byte	1,1
.L309:
	.byte	15
	.byte	'Pin',0,1,216,18,54
	.word	212
.L311:
	.byte	4,0
.L234:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable31',0,3,1,155,19,25
	.word	212
	.byte	1,1
.L235:
	.byte	15
	.byte	'Port',0,1,155,19,60
	.word	212
.L237:
	.byte	4,0
.L228:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable40',0,3,1,188,19,25
	.word	212
	.byte	1,1
.L230:
	.byte	15
	.byte	'Port',0,1,188,19,60
	.word	212
.L232:
	.byte	4,0
.L223:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable',0,3,1,221,19,25
	.word	212
	.byte	1,1
.L224:
	.byte	15
	.byte	'Port',0,1,221,19,58
	.word	212
.L226:
	.byte	3,4,4,0,0
.L258:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable31',0,3,1,255,19,25
	.word	212
	.byte	1,1
.L259:
	.byte	15
	.byte	'Port',0,1,255,19,60
	.word	212
.L261:
	.byte	4,0
.L252:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable40',0,3,1,160,20,25
	.word	212
	.byte	1,1
.L254:
	.byte	15
	.byte	'Port',0,1,160,20,60
	.word	212
.L256:
	.byte	4,0
.L247:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable',0,3,1,193,20,25
	.word	212
	.byte	1,1
.L248:
	.byte	15
	.byte	'Port',0,1,193,20,58
	.word	212
.L250:
	.byte	3,4,4,0,0
.L240:
	.byte	14
	.byte	'Port_lIsPortPinPairAvailable',0,3,1,227,20,25
	.word	212
	.byte	1,1
.L243:
	.byte	15
	.byte	'PortLPCRvalue',0,1,227,20,61
	.word	212
.L245:
	.byte	4,0,16
	.byte	'Mcal_ResetENDINIT',0,3,115,13,1,1,1,1,16
	.byte	'Mcal_SetENDINIT',0,3,142,1,13,1,1,1,1,17
	.byte	'Mcal_ResetSafetyENDINIT_Timed',0,3,186,2,13,1,1,1,1,15
	.byte	'TimeOut',0,3,186,2,50
	.word	212
	.byte	0,16
	.byte	'Mcal_SetSafetyENDINIT_Timed',0,3,210,2,13,1,1,1,1,18,4,205,2,3,16,9
	.byte	'PC0',0
	.word	235
	.byte	1,2,35,0,9
	.byte	'PC1',0
	.word	235
	.byte	1,2,35,1,9
	.byte	'PC2',0
	.word	235
	.byte	1,2,35,2,9
	.byte	'PC3',0
	.word	235
	.byte	1,2,35,3,9
	.byte	'PC4',0
	.word	235
	.byte	1,2,35,4,9
	.byte	'PC5',0
	.word	235
	.byte	1,2,35,5,9
	.byte	'PC6',0
	.word	235
	.byte	1,2,35,6,9
	.byte	'PC7',0
	.word	235
	.byte	1,2,35,7,9
	.byte	'PC8',0
	.word	235
	.byte	1,2,35,8,9
	.byte	'PC9',0
	.word	235
	.byte	1,2,35,9,9
	.byte	'PC10',0
	.word	235
	.byte	1,2,35,10,9
	.byte	'PC11',0
	.word	235
	.byte	1,2,35,11,9
	.byte	'PC12',0
	.word	235
	.byte	1,2,35,12,9
	.byte	'PC13',0
	.word	235
	.byte	1,2,35,13,9
	.byte	'PC14',0
	.word	235
	.byte	1,2,35,14,9
	.byte	'PC15',0
	.word	235
	.byte	1,2,35,15,0,10,16
	.word	212
	.byte	11,3,0,19
	.byte	'Port_n_ControlType',0,4,203,2,15,16,9
	.byte	'B',0
	.word	9230
	.byte	16,2,35,0,9
	.byte	'U',0
	.word	9451
	.byte	16,2,35,0,0,18,4,175,2,3,2,7
	.byte	'P0',0,1
	.word	235
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	235
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	235
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	235
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	235
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	235
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	235
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	235
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	235
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	235
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	235
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	235
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	235
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	235
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	235
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	235
	.byte	1,0,2,35,1,0,19
	.byte	'Port_n_PinType',0,4,173,2,15,4,9
	.byte	'B',0
	.word	9508
	.byte	2,2,35,0,9
	.byte	'U',0
	.word	212
	.byte	4,2,35,0,0,6
	.byte	'Port_n_ConfigType',0,4,137,3,16,32,9
	.byte	'PinControl',0
	.word	9460
	.byte	16,2,35,0,9
	.byte	'PinLevel',0
	.word	9745
	.byte	4,2,35,16,9
	.byte	'DriverStrength0',0
	.word	212
	.byte	4,2,35,20,9
	.byte	'DriverStrength1',0
	.word	212
	.byte	4,2,35,24,9
	.byte	'ModeChangeControl',0
	.word	9745
	.byte	4,2,35,28,0,20
	.word	9789
.L107:
	.byte	13
	.word	9929
	.byte	20
	.word	252
	.byte	13
	.word	9939
	.byte	6
	.byte	'Port_n_LVDSConfigType',0,4,164,3,16,12,9
	.byte	'LPCR0',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'LPCR1',0
	.word	212
	.byte	4,2,35,4,9
	.byte	'LPCR2',0
	.word	212
	.byte	4,2,35,8,0,20
	.word	9949
	.byte	13
	.word	10023
	.byte	20
	.word	212
	.byte	13
	.word	10033
	.byte	6
	.byte	'Port_ConfigType',0,4,200,3,16,16,9
	.byte	'PortConfigSetPtr',0
	.word	9934
	.byte	4,2,35,0,9
	.byte	'PDiscSet',0
	.word	9944
	.byte	4,2,35,4,9
	.byte	'Port_LVDSConfigTypePtr',0
	.word	10028
	.byte	4,2,35,8,9
	.byte	'Port_PCSRConfigTypePtr',0
	.word	10038
	.byte	4,2,35,12,0,20
	.word	10043
.L99:
	.byte	13
	.word	10174
	.byte	20
	.word	212
.L105:
	.byte	13
	.word	10184
	.byte	12
	.word	212
.L117:
	.byte	13
	.word	10194
	.byte	20
	.word	235
.L269:
	.byte	13
	.word	10204
	.byte	21
	.word	147
	.byte	3,22
	.word	9019
	.byte	23
	.word	9060
	.byte	24
	.word	9083
	.byte	0,4,22
	.word	8487
	.byte	23
	.word	8525
	.byte	23
	.word	8539
	.byte	24
	.word	8552
	.byte	0,4,22
	.word	8487
	.byte	23
	.word	8525
	.byte	23
	.word	8539
	.byte	24
	.word	8552
	.byte	0,4,22
	.word	8487
	.byte	23
	.word	8525
	.byte	23
	.word	8539
	.byte	24
	.word	8552
	.byte	0,4,22
	.word	8487
	.byte	23
	.word	8525
	.byte	23
	.word	8539
	.byte	24
	.word	8552
	.byte	0,4,22
	.word	8554
	.byte	23
	.word	8581
	.byte	24
	.word	8596
	.byte	0,4,22
	.word	8016
	.byte	23
	.word	8038
	.byte	24
	.word	8058
	.byte	0,4,22
	.word	8164
	.byte	23
	.word	8198
	.byte	25
	.word	8212
	.byte	22
	.word	8060
	.byte	23
	.word	8096
	.byte	24
	.word	8110
	.byte	0,24
	.word	8213
	.byte	22
	.word	8112
	.byte	23
	.word	8148
	.byte	24
	.word	8162
	.byte	0,24
	.word	8214
	.byte	0,0,4,22
	.word	8319
	.byte	23
	.word	8352
	.byte	25
	.word	8366
	.byte	22
	.word	8217
	.byte	23
	.word	8252
	.byte	24
	.word	8266
	.byte	0,24
	.word	8367
	.byte	22
	.word	8268
	.byte	23
	.word	8303
	.byte	24
	.word	8317
	.byte	0,24
	.word	8368
	.byte	0,0,4,22
	.word	8793
	.byte	23
	.word	8831
	.byte	25
	.word	8845
	.byte	22
	.word	8737
	.byte	23
	.word	8777
	.byte	24
	.word	8791
	.byte	0,24
	.word	8846
	.byte	22
	.word	8681
	.byte	23
	.word	8721
	.byte	24
	.word	8735
	.byte	0,24
	.word	8847
	.byte	0,0,4,22
	.word	8962
	.byte	23
	.word	9000
	.byte	25
	.word	9014
	.byte	22
	.word	8850
	.byte	23
	.word	8890
	.byte	24
	.word	8904
	.byte	0,24
	.word	9015
	.byte	22
	.word	8906
	.byte	23
	.word	8946
	.byte	24
	.word	8960
	.byte	0,24
	.word	9016
	.byte	0,0,4,22
	.word	183
	.byte	25
	.word	205
	.byte	22
	.word	8433
	.byte	23
	.word	8471
	.byte	24
	.word	8485
	.byte	0,24
	.word	206
	.byte	22
	.word	8016
	.byte	23
	.word	8038
	.byte	24
	.word	8058
	.byte	0,24
	.word	207
	.byte	22
	.word	8016
	.byte	23
	.word	8038
	.byte	24
	.word	8058
	.byte	0,24
	.word	208
	.byte	22
	.word	8164
	.byte	23
	.word	8198
	.byte	25
	.word	8212
	.byte	22
	.word	8060
	.byte	23
	.word	8096
	.byte	24
	.word	8110
	.byte	0,24
	.word	8213
	.byte	22
	.word	8112
	.byte	23
	.word	8148
	.byte	24
	.word	8162
	.byte	0,24
	.word	8214
	.byte	0,0,24
	.word	209
	.byte	0,0,4,0,0,21
	.word	183
	.byte	3,22
	.word	8433
	.byte	23
	.word	8471
	.byte	24
	.word	8485
	.byte	0,4,22
	.word	8016
	.byte	23
	.word	8038
	.byte	24
	.word	8058
	.byte	0,4,22
	.word	8016
	.byte	23
	.word	8038
	.byte	24
	.word	8058
	.byte	0,4,22
	.word	8164
	.byte	23
	.word	8198
	.byte	25
	.word	8212
	.byte	22
	.word	8060
	.byte	23
	.word	8096
	.byte	24
	.word	8110
	.byte	0,24
	.word	8213
	.byte	22
	.word	8112
	.byte	23
	.word	8148
	.byte	24
	.word	8162
	.byte	0,24
	.word	8214
	.byte	0,0,4,0,0,21
	.word	8016
	.byte	23
	.word	8038
	.byte	4,0,21
	.word	8060
	.byte	23
	.word	8096
	.byte	4,0,21
	.word	8112
	.byte	23
	.word	8148
	.byte	4,0,21
	.word	8164
	.byte	23
	.word	8198
	.byte	3,22
	.word	8060
	.byte	23
	.word	8096
	.byte	24
	.word	8110
	.byte	0,4,22
	.word	8112
	.byte	23
	.word	8148
	.byte	24
	.word	8162
	.byte	0,4,0,0,21
	.word	8217
	.byte	23
	.word	8252
	.byte	4,0,21
	.word	8268
	.byte	23
	.word	8303
	.byte	4,0,21
	.word	8319
	.byte	23
	.word	8352
	.byte	3,22
	.word	8217
	.byte	23
	.word	8252
	.byte	24
	.word	8266
	.byte	0,4,22
	.word	8268
	.byte	23
	.word	8303
	.byte	24
	.word	8317
	.byte	0,4,0,0,21
	.word	8371
	.byte	23
	.word	8404
	.byte	23
	.word	8418
	.byte	4,0,21
	.word	8433
	.byte	23
	.word	8471
	.byte	4,0,21
	.word	8487
	.byte	23
	.word	8525
	.byte	23
	.word	8539
	.byte	4,0,21
	.word	8554
	.byte	23
	.word	8581
	.byte	4,0,21
	.word	8598
	.byte	23
	.word	8623
	.byte	4,0,21
	.word	8638
	.byte	23
	.word	8666
	.byte	4,0,21
	.word	8681
	.byte	23
	.word	8721
	.byte	4,0,21
	.word	8737
	.byte	23
	.word	8777
	.byte	4,0,21
	.word	8793
	.byte	23
	.word	8831
	.byte	3,22
	.word	8737
	.byte	23
	.word	8777
	.byte	24
	.word	8791
	.byte	0,4,22
	.word	8681
	.byte	23
	.word	8721
	.byte	24
	.word	8735
	.byte	0,4,0,0,21
	.word	8850
	.byte	23
	.word	8890
	.byte	4,0,21
	.word	8906
	.byte	23
	.word	8946
	.byte	4,0,21
	.word	8962
	.byte	23
	.word	9000
	.byte	3,22
	.word	8850
	.byte	23
	.word	8890
	.byte	24
	.word	8904
	.byte	0,4,22
	.word	8906
	.byte	23
	.word	8946
	.byte	24
	.word	8960
	.byte	0,4,0,0,21
	.word	9019
	.byte	23
	.word	9060
	.byte	4,0,26,1,13
	.word	11250
	.byte	27
	.byte	'__codeptr',0,1,1,1
	.word	11252
	.byte	27
	.byte	'Ifx_P_ACCEN0_Bits',0,2,79,3
	.word	6836
	.byte	27
	.byte	'Ifx_P_ACCEN1_Bits',0,2,85,3
	.word	6749
	.byte	27
	.byte	'Ifx_P_ESR_Bits',0,2,107,3
	.word	3108
	.byte	27
	.byte	'Ifx_P_ID_Bits',0,2,115,3
	.word	1161
	.byte	27
	.byte	'Ifx_P_IN_Bits',0,2,137,1,3
	.word	2156
	.byte	27
	.byte	'Ifx_P_IOCR0_Bits',0,2,150,1,3
	.word	1289
	.byte	27
	.byte	'Ifx_P_IOCR12_Bits',0,2,163,1,3
	.word	1936
	.byte	27
	.byte	'Ifx_P_IOCR4_Bits',0,2,176,1,3
	.word	1504
	.byte	27
	.byte	'Ifx_P_IOCR8_Bits',0,2,189,1,3
	.word	1719
	.byte	27
	.byte	'Ifx_P_LPCR0_Bits',0,2,197,1,3
	.word	6108
	.byte	27
	.byte	'Ifx_P_LPCR1_Bits',0,2,205,1,3
	.word	6232
	.byte	27
	.byte	'Ifx_P_LPCR1_P21_Bits',0,2,215,1,3
	.word	6316
	.byte	27
	.byte	'Ifx_P_LPCR2_Bits',0,2,229,1,3
	.word	6496
	.byte	27
	.byte	'Ifx_P_OMCR0_Bits',0,2,240,1,3
	.word	4747
	.byte	27
	.byte	'Ifx_P_OMCR12_Bits',0,2,250,1,3
	.word	5271
	.byte	27
	.byte	'Ifx_P_OMCR4_Bits',0,2,133,2,3
	.word	4921
	.byte	27
	.byte	'Ifx_P_OMCR8_Bits',0,2,144,2,3
	.word	5095
	.byte	27
	.byte	'Ifx_P_OMCR_Bits',0,2,166,2,3
	.word	5760
	.byte	27
	.byte	'Ifx_P_OMR_Bits',0,2,203,2,3
	.word	590
	.byte	27
	.byte	'Ifx_P_OMSR0_Bits',0,2,213,2,3
	.word	4084
	.byte	27
	.byte	'Ifx_P_OMSR12_Bits',0,2,224,2,3
	.word	4572
	.byte	27
	.byte	'Ifx_P_OMSR4_Bits',0,2,235,2,3
	.word	4231
	.byte	27
	.byte	'Ifx_P_OMSR8_Bits',0,2,246,2,3
	.word	4400
	.byte	27
	.byte	'Ifx_P_OMSR_Bits',0,2,140,3,3
	.word	5427
	.byte	27
	.byte	'Ifx_P_OUT_Bits',0,2,162,3,3
	.word	274
	.byte	27
	.byte	'Ifx_P_PCSR_Bits',0,2,179,3,3
	.word	3814
	.byte	27
	.byte	'Ifx_P_PDISC_Bits',0,2,201,3,3
	.word	3448
	.byte	27
	.byte	'Ifx_P_PDR0_Bits',0,2,222,3,3
	.word	2479
	.byte	27
	.byte	'Ifx_P_PDR1_Bits',0,2,243,3,3
	.word	2783
	.byte	27
	.byte	'Ifx_P_ACCEN0',0,2,128,4,3
	.word	7363
	.byte	27
	.byte	'Ifx_P_ACCEN1',0,2,136,4,3
	.word	6796
	.byte	27
	.byte	'Ifx_P_ESR',0,2,144,4,3
	.word	3399
	.byte	27
	.byte	'Ifx_P_ID',0,2,152,4,3
	.word	1240
	.byte	27
	.byte	'Ifx_P_IN',0,2,160,4,3
	.word	2430
	.byte	27
	.byte	'Ifx_P_IOCR0',0,2,168,4,3
	.word	1464
	.byte	27
	.byte	'Ifx_P_IOCR12',0,2,176,4,3
	.word	2116
	.byte	27
	.byte	'Ifx_P_IOCR4',0,2,184,4,3
	.word	1679
	.byte	27
	.byte	'Ifx_P_IOCR8',0,2,192,4,3
	.word	1896
	.byte	27
	.byte	'Ifx_P_LPCR0',0,2,200,4,3
	.word	6192
	.byte	27
	.byte	'Ifx_P_LPCR1',0,2,209,4,3
	.word	6441
	.byte	27
	.byte	'Ifx_P_LPCR2',0,2,217,4,3
	.word	6700
	.byte	27
	.byte	'Ifx_P_OMCR',0,2,225,4,3
	.word	6068
	.byte	27
	.byte	'Ifx_P_OMCR0',0,2,233,4,3
	.word	4881
	.byte	27
	.byte	'Ifx_P_OMCR12',0,2,241,4,3
	.word	5387
	.byte	27
	.byte	'Ifx_P_OMCR4',0,2,249,4,3
	.word	5055
	.byte	27
	.byte	'Ifx_P_OMCR8',0,2,129,5,3
	.word	5231
	.byte	27
	.byte	'Ifx_P_OMR',0,2,137,5,3
	.word	1121
	.byte	27
	.byte	'Ifx_P_OMSR',0,2,145,5,3
	.word	5720
	.byte	27
	.byte	'Ifx_P_OMSR0',0,2,153,5,3
	.word	4191
	.byte	27
	.byte	'Ifx_P_OMSR12',0,2,161,5,3
	.word	4707
	.byte	27
	.byte	'Ifx_P_OMSR4',0,2,169,5,3
	.word	4360
	.byte	27
	.byte	'Ifx_P_OMSR8',0,2,177,5,3
	.word	4532
	.byte	27
	.byte	'Ifx_P_OUT',0,2,185,5,3
	.word	550
	.byte	27
	.byte	'Ifx_P_PCSR',0,2,193,5,3
	.word	4044
	.byte	27
	.byte	'Ifx_P_PDISC',0,2,201,5,3
	.word	3774
	.byte	27
	.byte	'Ifx_P_PDR0',0,2,209,5,3
	.word	2743
	.byte	27
	.byte	'Ifx_P_PDR1',0,2,217,5,3
	.word	3059
	.byte	12
	.word	7403
	.byte	27
	.byte	'Ifx_P',0,2,138,6,3
	.word	12593
	.byte	27
	.byte	'uint8',0,5,81,25
	.word	235
	.byte	27
	.byte	'uint16',0,5,91,25
	.word	252
	.byte	27
	.byte	'uint32',0,5,106,24
	.word	212
	.byte	27
	.byte	'boolean',0,5,127,25
	.word	235
	.byte	27
	.byte	'StatusType',0,6,191,1,27
	.word	235
	.byte	18,6,206,1,9,8,9
	.byte	'vendorID',0
	.word	252
	.byte	2,2,35,0,9
	.byte	'moduleID',0
	.word	252
	.byte	2,2,35,2,9
	.byte	'sw_major_version',0
	.word	235
	.byte	1,2,35,4,9
	.byte	'sw_minor_version',0
	.word	235
	.byte	1,2,35,5,9
	.byte	'sw_patch_version',0
	.word	235
	.byte	1,2,35,6,0,27
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	12693
	.byte	18,7,93,9,8,9
	.byte	'Class',0
	.word	235
	.byte	1,2,35,0,9
	.byte	'TIN',0
	.word	235
	.byte	1,2,35,1,9
	.byte	'ReturnAddress',0
	.word	212
	.byte	4,2,35,4,0,27
	.byte	'OsTrapInfoType',0,7,97,3
	.word	12843
	.byte	10,68
	.word	212
	.byte	11,16,0,18,7,154,1,9,68,9
	.byte	'store',0
	.word	12923
	.byte	68,2,35,0,0,10,68
	.word	12932
	.byte	11,0,0,27
	.byte	'Os_JumpBufType',0,7,156,1,3
	.word	12954
	.byte	27
	.byte	'Os_StackTraceType',0,7,174,1,18
	.word	212
	.byte	18,7,175,1,9,8,9
	.byte	'sp',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'ctx',0
	.word	212
	.byte	4,2,35,4,0,27
	.byte	'Os_StackValueType',0,7,175,1,63
	.word	13014
	.byte	27
	.byte	'Os_StackSizeType',0,7,176,1,27
	.word	13014
	.byte	28,1,1,13
	.word	13099
	.byte	27
	.byte	'Os_VoidVoidFunctionType',0,7,179,1,16
	.word	13102
	.byte	27
	.byte	'ApplicationType',0,7,193,1,23
	.word	235
	.byte	6
	.byte	'Os_ApplicationConfigurationType_s',0,7,198,1,16,2,9
	.byte	'app_id',0
	.word	235
	.byte	1,2,35,0,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,1,0,27
	.byte	'Os_ApplicationConfigurationType',0,7,201,1,3
	.word	13165
	.byte	27
	.byte	'Os_CoreStateType',0,7,203,1,16
	.word	212
	.byte	27
	.byte	'AreaIdType',0,7,204,1,16
	.word	252
	.byte	27
	.byte	'Os_PeripheralAddressType',0,7,212,1,22
	.word	212
	.byte	27
	.byte	'TickType',0,7,221,1,22
	.word	212
	.byte	27
	.byte	'Os_StopwatchTickType',0,7,225,1,22
	.word	212
	.byte	13
	.word	212
	.byte	27
	.byte	'Os_Lockable',0,7,234,1,18
	.word	13407
	.byte	27
	.byte	'CoreIdType',0,7,236,1,16
	.word	252
	.byte	27
	.byte	'SpinlockIdType',0,7,237,1,16
	.word	252
	.byte	29,7,239,1,9,4,30
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,30
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,27
	.byte	'TryToGetSpinlockType',0,7,239,1,74
	.word	13477
	.byte	29,7,174,2,9,4,30
	.byte	'APPLICATION_ACCESSIBLE',0,0,30
	.byte	'APPLICATION_RESTARTING',0,1,30
	.byte	'APPLICATION_TERMINATED',0,2,0,27
	.byte	'ApplicationStateType',0,7,174,2,92
	.word	13570
	.byte	31
	.byte	'void',0,13
	.word	13682
	.byte	32,1,1,33
	.word	235
	.byte	33
	.word	13688
	.byte	0,13
	.word	13693
	.byte	27
	.byte	'Os_FunctionEntryType',0,7,183,2,16
	.word	13707
	.byte	6
	.byte	'Os_MeterInfoType_s',0,7,193,2,16,48,9
	.byte	'elapsed',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'previous',0
	.word	212
	.byte	4,2,35,4,9
	.byte	'max',0
	.word	212
	.byte	4,2,35,8,9
	.byte	'cumulative',0
	.word	212
	.byte	4,2,35,12,9
	.byte	'stackbase',0
	.word	13014
	.byte	8,2,35,16,9
	.byte	'stackusage',0
	.word	13014
	.byte	8,2,35,24,9
	.byte	'stackmax',0
	.word	13014
	.byte	8,2,35,32,9
	.byte	'stackbudget',0
	.word	13014
	.byte	8,2,35,40,0,27
	.byte	'Os_MeterInfoType',0,7,202,2,3
	.word	13742
	.byte	13
	.word	13742
	.byte	27
	.byte	'Os_MeterInfoRefType',0,7,203,2,50
	.word	13940
	.byte	27
	.byte	'EventMaskType',0,7,206,2,15
	.word	235
	.byte	27
	.byte	'Os_imaskType',0,7,211,2,16
	.word	212
	.byte	6
	.byte	'Os_ISRDynType_s',0,7,213,2,16,48,9
	.byte	'meter',0
	.word	13742
	.byte	48,2,35,0,0,27
	.byte	'Os_ISRDynType',0,7,215,2,3
	.word	14019
	.byte	13
	.word	14019
	.byte	20
	.word	14080
	.byte	6
	.byte	'Os_ISRType_s',0,7,216,2,16,24,9
	.byte	'entry_function',0
	.word	13107
	.byte	4,2,35,0,9
	.byte	'dynamic',0
	.word	14085
	.byte	4,2,35,4,9
	.byte	'imask',0
	.word	212
	.byte	4,2,35,8,9
	.byte	'stackbudget',0
	.word	13014
	.byte	8,2,35,12,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,20,9
	.byte	'application',0
	.word	235
	.byte	1,2,35,21,0,27
	.byte	'Os_ISRType',0,7,223,2,3
	.word	14090
	.byte	13
	.word	13099
	.byte	20
	.word	14090
	.byte	13
	.word	14249
	.byte	27
	.byte	'ISRType',0,7,224,2,46
	.word	14254
	.byte	27
	.byte	'Os_bitmask',0,7,239,2,22
	.word	212
	.byte	27
	.byte	'Os_pset0Type',0,7,240,2,20
	.word	212
	.byte	27
	.byte	'Os_pset1Type',0,7,241,2,20
	.word	212
	.byte	27
	.byte	'Os_pset2Type',0,7,242,2,20
	.word	212
	.byte	8,7,243,2,9,4,9
	.byte	'p0',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'p1',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'p2',0
	.word	212
	.byte	4,2,35,0,0,27
	.byte	'Os_psetType',0,7,247,2,3
	.word	14362
	.byte	8,7,249,2,9,4,9
	.byte	't0',0
	.word	212
	.byte	4,2,35,0,9
	.byte	't1',0
	.word	212
	.byte	4,2,35,0,9
	.byte	't2',0
	.word	212
	.byte	4,2,35,0,0,27
	.byte	'Os_tpmaskType',0,7,253,2,3
	.word	14426
	.byte	27
	.byte	'Os_ActivationCountType',0,7,254,2,23
	.word	235
	.byte	6
	.byte	'Os_TaskDynType_s',0,7,128,3,16,120,9
	.byte	'terminate_jump_buf',0
	.word	12963
	.byte	68,2,35,0,9
	.byte	'meter',0
	.word	13742
	.byte	48,2,35,68,9
	.byte	'activation_count',0
	.word	235
	.byte	1,2,35,116,0,27
	.byte	'Os_TaskDynType',0,7,132,3,3
	.word	14524
	.byte	10,68
	.word	12932
	.byte	11,0,0,13
	.word	14524
	.byte	20
	.word	14650
	.byte	6
	.byte	'Os_TaskType_s',0,7,134,3,16,40,9
	.byte	'dynamic',0
	.word	14655
	.byte	4,2,35,0,9
	.byte	'entry_function',0
	.word	13107
	.byte	4,2,35,4,9
	.byte	'pset',0
	.word	14362
	.byte	4,2,35,8,9
	.byte	'base_tpmask',0
	.word	14426
	.byte	4,2,35,12,9
	.byte	'tpmask',0
	.word	14426
	.byte	4,2,35,16,9
	.byte	'core_id',0
	.word	252
	.byte	2,2,35,20,9
	.byte	'index',0
	.word	212
	.byte	4,2,35,24,9
	.byte	'stackbudget',0
	.word	13014
	.byte	8,2,35,28,9
	.byte	'activation_count',0
	.word	235
	.byte	1,2,35,36,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,37,9
	.byte	'application',0
	.word	235
	.byte	1,2,35,38,0,27
	.byte	'Os_TaskType',0,7,146,3,3
	.word	14660
	.byte	20
	.word	14660
	.byte	13
	.word	14910
	.byte	27
	.byte	'TaskType',0,7,147,3,47
	.word	14915
	.byte	34
	.byte	'Os_TaskStateType',0,7,155,3,6,4,30
	.byte	'SUSPENDED',0,0,30
	.byte	'READY',0,1,30
	.byte	'WAITING',0,2,30
	.byte	'RUNNING',0,3,0,27
	.byte	'TaskStateType',0,7,156,3,31
	.word	14938
	.byte	8,7,167,3,3,4,9
	.byte	'tpmask',0
	.word	14426
	.byte	4,2,35,0,0,6
	.byte	'Os_ResourceDynType_s',0,7,166,3,16,4,9
	.byte	'saved_priority',0
	.word	15025
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType',0,7,170,3,3
	.word	15048
	.byte	13
	.word	15048
	.byte	20
	.word	15128
	.byte	6
	.byte	'Os_ResourceType_s',0,7,171,3,16,12,9
	.byte	'dynamic',0
	.word	15133
	.byte	4,2,35,0,9
	.byte	'tpmask',0
	.word	14426
	.byte	4,2,35,4,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,8,0,27
	.byte	'Os_ResourceType',0,7,175,3,3
	.word	15138
	.byte	18,7,181,3,9,12,9
	.byte	'maxallowedvalue',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'ticksperbase',0
	.word	212
	.byte	4,2,35,4,9
	.byte	'mincycle',0
	.word	212
	.byte	4,2,35,8,0,27
	.byte	'AlarmBaseType',0,7,185,3,3
	.word	15237
	.byte	18,7,206,3,9,8,9
	.byte	'Running',0
	.word	235
	.byte	1,2,35,0,9
	.byte	'Pending',0
	.word	235
	.byte	1,2,35,1,9
	.byte	'Delay',0
	.word	212
	.byte	4,2,35,4,0,27
	.byte	'Os_CounterStatusType',0,7,210,3,3
	.word	15332
	.byte	35
	.word	235
	.byte	1,1,13
	.word	15418
	.byte	27
	.byte	'Os_CounterIncrAdvType',0,7,217,3,22
	.word	15425
	.byte	6
	.byte	's_swd',0,7,222,3,12,4,9
	.byte	'count',0
	.word	212
	.byte	4,2,35,0,0,8,7,221,3,3,4,9
	.byte	'sw',0
	.word	15461
	.byte	4,2,35,0,0,6
	.byte	'Os_CounterDynType_s',0,7,220,3,16,4,9
	.byte	'type_dependent',0
	.word	15489
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType',0,7,226,3,3
	.word	15508
	.byte	13
	.word	15508
	.byte	20
	.word	15586
	.byte	6
	.byte	'Os_CounterType_s',0,7,227,3,16,28,9
	.byte	'dynamic',0
	.word	15591
	.byte	4,2,35,0,9
	.byte	'advincr',0
	.word	15430
	.byte	4,2,35,4,9
	.byte	'base',0
	.word	15237
	.byte	12,2,35,8,9
	.byte	'core',0
	.word	13688
	.byte	4,2,35,20,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,24,9
	.byte	'application',0
	.word	235
	.byte	1,2,35,25,0,27
	.byte	'Os_CounterType',0,7,234,3,3
	.word	15596
	.byte	13
	.word	15418
	.byte	20
	.word	15596
	.byte	13
	.word	15748
	.byte	27
	.byte	'CounterType',0,7,235,3,52
	.word	15753
	.byte	34
	.byte	'Os_ScheduleTableStatusType',0,7,240,3,6,4,30
	.byte	'SCHEDULETABLE_STOPPED',0,0,30
	.byte	'SCHEDULETABLE_NEXT',0,1,30
	.byte	'SCHEDULETABLE_WAITING',0,2,30
	.byte	'SCHEDULETABLE_RUNNING',0,3,30
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,27
	.byte	'ScheduleTableStatusType',0,7,241,3,41
	.word	15779
	.byte	20
	.word	.L366-.L76
	.byte	13
	.word	15979
	.byte	27
	.byte	'ScheduleTableType',0,7,128,4,58
	.word	15984
	.byte	6
	.byte	'Os_ScheduleTableDynType_s',0,7,130,4,16,16,9
	.byte	'match',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'next',0
	.word	15989
	.byte	4,2,35,4,9
	.byte	'state',0
	.word	15779
	.byte	4,2,35,8,9
	.byte	'config',0
	.word	252
	.byte	2,2,35,12,0,13
	.word	16016
	.byte	20
	.word	16109
.L366:
	.byte	6
	.byte	'Os_ScheduleTableType_s',0,7,247,3,16,16,9
	.byte	'dynamic',0
	.word	16114
	.byte	4,2,35,0,9
	.byte	'counter',0
	.word	15758
	.byte	4,2,35,4,9
	.byte	'repeat',0
	.word	235
	.byte	1,2,35,8,9
	.byte	'config',0
	.word	252
	.byte	2,2,35,10,9
	.byte	'initial',0
	.word	235
	.byte	1,2,35,12,9
	.byte	'access',0
	.word	235
	.byte	1,2,35,13,9
	.byte	'application',0
	.word	235
	.byte	1,2,35,14,0,27
	.byte	'Os_ScheduleTableType',0,7,255,3,3
	.word	16119
	.byte	20
	.word	16119
	.byte	13
	.word	16299
	.byte	20
	.word	15596
	.byte	13
	.word	16309
	.byte	12
	.word	13412
	.byte	12
	.word	14362
	.byte	12
	.word	14259
	.byte	12
	.word	14920
	.byte	12
	.word	14426
	.byte	12
	.word	235
	.byte	12
	.word	14920
	.byte	6
	.byte	'Os_ControlledCoreType_s',0,7,251,6,16,112,9
	.byte	'TrapInfo',0
	.word	12843
	.byte	8,2,35,0,9
	.byte	'lock_taskaccess',0
	.word	16319
	.byte	4,2,35,8,9
	.byte	'ReadyTasks',0
	.word	16324
	.byte	4,2,35,12,9
	.byte	'RunningISR',0
	.word	16329
	.byte	4,2,35,16,9
	.byte	'RunningTask',0
	.word	16334
	.byte	4,2,35,20,9
	.byte	'RunningTPMask',0
	.word	16339
	.byte	4,2,35,24,9
	.byte	'CurrentMeteredObject',0
	.word	13945
	.byte	4,2,35,28,9
	.byte	'IdleMeter',0
	.word	13742
	.byte	48,2,35,32,9
	.byte	'AppAccess',0
	.word	235
	.byte	1,2,35,80,9
	.byte	'AppOverride',0
	.word	16344
	.byte	1,2,35,81,9
	.byte	'GetStackValueAdjust',0
	.word	13014
	.byte	8,2,35,84,9
	.byte	'InErrorHook',0
	.word	235
	.byte	1,2,35,92,9
	.byte	'ChainTaskRef',0
	.word	16349
	.byte	4,2,35,96,9
	.byte	'GetStackUsageAdjust',0
	.word	13014
	.byte	8,2,35,100,9
	.byte	'InProtectionHook',0
	.word	235
	.byte	1,2,35,108,9
	.byte	'CoreIsActive',0
	.word	235
	.byte	1,2,35,109,9
	.byte	'InShutdownHook',0
	.word	235
	.byte	1,2,35,110,0,27
	.byte	'Os_ControlledCoreType',0,7,141,7,3
	.word	16354
	.byte	13
	.word	212
	.byte	20
	.word	14090
	.byte	13
	.word	16810
	.byte	20
	.word	14660
	.byte	13
	.word	16820
	.byte	13
	.word	13742
	.byte	6
	.byte	'Os_AnyCoreType_s',0,7,151,7,16,96,9
	.byte	'DisableAllImask',0
	.word	212
	.byte	4,2,35,0,9
	.byte	'SuspendAllImask',0
	.word	212
	.byte	4,2,35,4,9
	.byte	'SuspendOSImask',0
	.word	212
	.byte	4,2,35,8,9
	.byte	'DisableAllCount',0
	.word	212
	.byte	4,2,35,12,9
	.byte	'SuspendAllCount',0
	.word	212
	.byte	4,2,35,16,9
	.byte	'SuspendOSCount',0
	.word	212
	.byte	4,2,35,20,9
	.byte	'RestartJumpBuf',0
	.word	12963
	.byte	68,2,35,24,9
	.byte	'Restartable',0
	.word	235
	.byte	1,2,35,92,0,27
	.byte	'Os_AnyCoreType',0,7,160,7,3
	.word	16835
	.byte	27
	.byte	'unsigned_int',0,8,116,22
	.word	212
	.byte	27
	.byte	'Port_PinType',0,4,158,2,16
	.word	212
	.byte	27
	.byte	'Port_PinModeType',0,4,168,2,16
	.word	212
	.byte	27
	.byte	'Port_n_PinType',0,4,200,2,3
	.word	9745
	.byte	27
	.byte	'Port_n_ControlType',0,4,230,2,2
	.word	9460
	.byte	27
	.byte	'Port_n_ConfigType',0,4,161,3,2
	.word	9789
	.byte	27
	.byte	'Port_n_LVDSConfigType',0,4,188,3,2
	.word	9949
	.byte	27
	.byte	'Port_n_PCSRConfigType',0,4,191,3,16
	.word	212
	.byte	27
	.byte	'Port_ConfigType',0,4,220,3,2
	.word	10043
	.byte	10,82
	.word	252
	.byte	11,40,0
.L318:
	.byte	20
	.word	17311
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	1,0,0,4,11,0,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,3,8,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,11,15,73
	.byte	19,13,15,12,15,56,9,0,0,8,23,1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9,0,0,10,1,1,11,15
	.byte	73,19,0,0,11,33,0,47,15,0,0,12,53,0,73,19,0,0,13,15,0,73,19,0,0,14,46,1,3,8,32,13,58,15,59,15,57,15,73
	.byte	19,54,15,39,12,0,0,15,5,0,3,8,58,15,59,15,57,15,73,19,0,0,16,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63
	.byte	12,60,12,0,0,17,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,18,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,19,23,1,3,8,58,15,59,15,57,15,11,15,0,0,20,38,0,73,19,0,0,21,46,1,49,19,0,0,22,29,1,49,19,0,0,23,5
	.byte	0,49,19,0,0,24,11,0,49,19,0,0,25,11,1,49,19,0,0,26,21,0,54,15,0,0,27,22,0,3,8,58,15,59,15,57,15,73,19
	.byte	0,0,28,21,0,54,15,39,12,0,0,29,4,1,58,15,59,15,57,15,11,15,0,0,30,40,0,3,8,28,13,0,0,31,59,0,3,8,0,0,32
	.byte	21,1,54,15,39,12,0,0,33,5,0,73,19,0,0,34,4,1,3,8,58,15,59,15,57,15,11,15,0,0,35,21,0,73,19,54,15,39,12
	.byte	0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L78:
	.word	.L368-.L367
.L367:
	.half	3
	.word	.L370-.L369
.L369:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxPort_regdef.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_WdgLib.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\inc\\Port.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0,0
.L370:
.L368:
	.sdecl	'.debug_info',debug,cluster('Port_Init')
	.sect	'.debug_info'
.L79:
	.word	2368
	.half	3
	.word	.L80
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L82,.L81
	.byte	2
	.word	.L75
	.byte	3
	.byte	'Port_Init',0,1,253,3,6,1,1,1
	.word	.L70,.L98,.L69
	.byte	4
	.byte	'ConfigPtr',0,1,253,3,42
	.word	.L99,.L100
	.byte	5
	.word	.L70,.L98
	.byte	6
	.word	.L101,.L102,.L103
	.byte	7
	.word	.L104,.L102,.L103
	.byte	8
	.byte	'DataPtr',0,1,132,14,28
	.word	.L105,.L106
	.byte	8
	.byte	'ConfigDataPtr',0,1,133,14,28
	.word	.L107,.L108
	.byte	8
	.byte	'PortNumber',0,1,135,14,28
	.word	.L109,.L110
	.byte	8
	.byte	'PortLevel',0,1,137,14,28
	.word	.L109,.L111
	.byte	8
	.byte	'ConfigIndex',0,1,140,14,28
	.word	.L109,.L112
	.byte	8
	.byte	'PortAddressPtr',0,1,141,14,28
	.word	.L113,.L114
	.byte	8
	.byte	'LVDSDataPtr',0,1,142,14,28
	.word	.L105,.L115
	.byte	8
	.byte	'PCSRDataPtr',0,1,143,14,28
	.word	.L105,.L116
	.byte	8
	.byte	'LVDSRegPtr',0,1,144,14,28
	.word	.L117,.L118
	.byte	8
	.byte	'PCSRRegPtr',0,1,145,14,28
	.word	.L117,.L119
	.byte	8
	.byte	'counter',0,1,146,14,28
	.word	.L109,.L120
	.byte	6
	.word	.L121,.L102,.L122
	.byte	7
	.word	.L123,.L102,.L122
	.byte	8
	.byte	'PortNumber',0,1,166,15,27
	.word	.L109,.L124
	.byte	8
	.byte	'ConfigIndex',0,1,169,15,27
	.word	.L109,.L125
	.byte	8
	.byte	'PortAddressPtr',0,1,170,15,21
	.word	.L113,.L126
	.byte	6
	.word	.L127,.L3,.L128
	.byte	9
	.word	.L129,.L130
	.byte	7
	.word	.L131,.L3,.L128
	.byte	8
	.byte	'RetVal',0,1,205,16,10
	.word	.L109,.L132
	.byte	6
	.word	.L133,.L134,.L5
	.byte	9
	.word	.L135,.L136
	.byte	7
	.word	.L137,.L134,.L5
	.byte	8
	.byte	'RetVal',0,1,170,16,10
	.word	.L109,.L138
	.byte	0,0,6
	.word	.L139,.L4,.L6
	.byte	9
	.word	.L140,.L141
	.byte	10
	.word	.L142,.L143
	.byte	8
	.byte	'RetVal',0,1,135,16,10
	.word	.L109,.L144
	.byte	0,0,6
	.word	.L139,.L8,.L128
	.byte	9
	.word	.L140,.L141
	.byte	0,0,0,6
	.word	.L145,.L146,.L10
	.byte	9
	.word	.L147,.L148
	.byte	10
	.word	.L149,.L150
	.byte	8
	.byte	'RetVal',0,1,225,15,10
	.word	.L113,.L153
	.byte	0,0,6
	.word	.L145,.L151,.L152
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L154,.L152,.L155
	.byte	9
	.word	.L156,.L157
	.byte	7
	.word	.L158,.L152,.L155
	.byte	8
	.byte	'RetVal',0,1,247,17,10
	.word	.L159,.L160
	.byte	0,0,6
	.word	.L145,.L155,.L13
	.byte	9
	.word	.L147,.L148
	.byte	10
	.word	.L149,.L161
	.byte	8
	.byte	'RetVal',0,1,225,15,10
	.word	.L113,.L163
	.byte	0,0,6
	.word	.L145,.L162,.L12
	.byte	9
	.word	.L147,.L148
	.byte	0,0,0,6
	.word	.L127,.L15,.L164
	.byte	9
	.word	.L129,.L130
	.byte	7
	.word	.L131,.L15,.L164
	.byte	8
	.byte	'RetVal',0,1,205,16,10
	.word	.L109,.L165
	.byte	6
	.word	.L133,.L166,.L17
	.byte	9
	.word	.L135,.L136
	.byte	7
	.word	.L137,.L166,.L17
	.byte	8
	.byte	'RetVal',0,1,170,16,10
	.word	.L109,.L167
	.byte	0,0,6
	.word	.L139,.L16,.L18
	.byte	9
	.word	.L140,.L141
	.byte	10
	.word	.L142,.L168
	.byte	8
	.byte	'RetVal',0,1,135,16,10
	.word	.L109,.L169
	.byte	0,0,6
	.word	.L139,.L20,.L164
	.byte	9
	.word	.L140,.L141
	.byte	0,0,0,6
	.word	.L145,.L170,.L22
	.byte	9
	.word	.L147,.L148
	.byte	10
	.word	.L149,.L171
	.byte	8
	.byte	'RetVal',0,1,225,15,10
	.word	.L113,.L180
	.byte	0,0,6
	.word	.L181,.L22,.L182
	.byte	9
	.word	.L183,.L184
	.byte	7
	.word	.L185,.L22,.L182
	.byte	8
	.byte	'RetVal',0,1,179,17,10
	.word	.L109,.L186
	.byte	6
	.word	.L187,.L188,.L24
	.byte	9
	.word	.L189,.L190
	.byte	7
	.word	.L191,.L188,.L24
	.byte	8
	.byte	'RetVal',0,1,239,16,10
	.word	.L109,.L192
	.byte	0,0,6
	.word	.L193,.L23,.L25
	.byte	9
	.word	.L194,.L195
	.byte	10
	.word	.L196,.L197
	.byte	8
	.byte	'RetVal',0,1,145,17,10
	.word	.L109,.L198
	.byte	0,0,6
	.word	.L193,.L27,.L182
	.byte	9
	.word	.L194,.L195
	.byte	0,0,0,6
	.word	.L199,.L200,.L29
	.byte	9
	.word	.L201,.L202
	.byte	7
	.word	.L203,.L200,.L29
	.byte	8
	.byte	'RetVal',0,1,251,18,10
	.word	.L109,.L204
	.byte	0,0,6
	.word	.L145,.L29,.L28
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L205,.L206,.L207
	.byte	9
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L211
	.byte	7
	.word	.L212,.L206,.L207
	.byte	8
	.byte	'RetVal',0,1,151,18,10
	.word	.L159,.L213
	.byte	0,0,6
	.word	.L145,.L172,.L31
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L205,.L214,.L215
	.byte	9
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L211
	.byte	7
	.word	.L212,.L214,.L215
	.byte	8
	.byte	'RetVal',0,1,151,18,10
	.word	.L159,.L216
	.byte	0,0,6
	.word	.L145,.L173,.L33
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L205,.L217,.L218
	.byte	9
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L211
	.byte	7
	.word	.L212,.L217,.L218
	.byte	8
	.byte	'RetVal',0,1,151,18,10
	.word	.L159,.L219
	.byte	0,0,6
	.word	.L145,.L174,.L35
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L205,.L220,.L221
	.byte	9
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L211
	.byte	7
	.word	.L212,.L220,.L221
	.byte	8
	.byte	'RetVal',0,1,151,18,10
	.word	.L159,.L222
	.byte	0,0,6
	.word	.L145,.L175,.L37
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L223,.L37,.L176
	.byte	9
	.word	.L224,.L225
	.byte	7
	.word	.L226,.L37,.L176
	.byte	8
	.byte	'RetVal',0,1,223,19,10
	.word	.L109,.L227
	.byte	6
	.word	.L228,.L229,.L39
	.byte	9
	.word	.L230,.L231
	.byte	7
	.word	.L232,.L229,.L39
	.byte	8
	.byte	'RetVal',0,1,190,19,10
	.word	.L109,.L233
	.byte	0,0,6
	.word	.L234,.L38,.L40
	.byte	9
	.word	.L235,.L236
	.byte	10
	.word	.L237,.L238
	.byte	8
	.byte	'RetVal',0,1,157,19,10
	.word	.L109,.L239
	.byte	0,0,6
	.word	.L234,.L42,.L176
	.byte	9
	.word	.L235,.L236
	.byte	0,0,0,6
	.word	.L145,.L176,.L177
	.byte	9
	.word	.L147,.L148
	.byte	0,6
	.word	.L240,.L241,.L242
	.byte	9
	.word	.L243,.L244
	.byte	7
	.word	.L245,.L241,.L242
	.byte	8
	.byte	'RetVal',0,1,229,20,10
	.word	.L109,.L246
	.byte	0,0,6
	.word	.L247,.L43,.L178
	.byte	9
	.word	.L248,.L249
	.byte	7
	.word	.L250,.L43,.L178
	.byte	8
	.byte	'RetVal',0,1,195,20,10
	.word	.L109,.L251
	.byte	6
	.word	.L252,.L253,.L49
	.byte	9
	.word	.L254,.L255
	.byte	7
	.word	.L256,.L253,.L49
	.byte	8
	.byte	'RetVal',0,1,162,20,10
	.word	.L109,.L257
	.byte	0,0,6
	.word	.L258,.L48,.L50
	.byte	9
	.word	.L259,.L260
	.byte	10
	.word	.L261,.L262
	.byte	8
	.byte	'RetVal',0,1,129,20,10
	.word	.L109,.L263
	.byte	0,0,6
	.word	.L258,.L52,.L178
	.byte	9
	.word	.L259,.L260
	.byte	0,0,0,6
	.word	.L145,.L178,.L179
	.byte	9
	.word	.L147,.L148
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_Init')
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_Init')
	.sect	'.debug_line'
.L81:
	.word	.L372-.L371
.L371:
	.half	3
	.word	.L374-.L373
.L373:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0,0,0,0,0
.L374:
	.byte	5,6,7,0,5,2
	.word	.L70
	.byte	3,252,3,1,5,7,9
	.half	.L319-.L70
	.byte	3,200,0,1,5,23,9
	.half	.L375-.L319
	.byte	1,5,15,9
	.half	.L102-.L375
	.byte	3,231,10,1,5,19,9
	.half	.L320-.L102
	.byte	3,4,1,5,54,9
	.half	.L322-.L320
	.byte	1,5,21,9
	.half	.L3-.L322
	.byte	3,159,1,1,5,13,9
	.half	.L376-.L3
	.byte	1,5,24,7,9
	.half	.L134-.L376
	.byte	3,93,1,5,53,9
	.half	.L377-.L134
	.byte	1,5,44,9
	.half	.L378-.L377
	.byte	1,5,72,9
	.half	.L379-.L378
	.byte	1,5,3,9
	.half	.L324-.L379
	.byte	3,3,1,5,71,9
	.half	.L5-.L324
	.byte	3,32,1,5,24,9
	.half	.L4-.L5
	.byte	3,186,127,1,5,44,9
	.half	.L380-.L4
	.byte	1,5,23,9
	.half	.L381-.L380
	.byte	3,1,1,5,55,9
	.half	.L325-.L381
	.byte	3,127,1,5,3,9
	.half	.L382-.L325
	.byte	3,3,1,9
	.half	.L6-.L382
	.byte	3,198,0,1,5,5,9
	.half	.L8-.L6
	.byte	3,225,126,1,5,7,7,9
	.half	.L128-.L8
	.byte	3,2,1,5,15,9
	.half	.L146-.L128
	.byte	3,48,1,5,29,9
	.half	.L383-.L146
	.byte	3,2,1,5,27,9
	.half	.L384-.L383
	.byte	1,5,31,9
	.half	.L385-.L384
	.byte	3,127,1,5,29,9
	.half	.L386-.L385
	.byte	1,5,69,9
	.half	.L387-.L386
	.byte	1,5,41,9
	.half	.L388-.L387
	.byte	3,127,1,5,3,9
	.half	.L326-.L388
	.byte	3,4,1,5,7,9
	.half	.L10-.L326
	.byte	3,80,1,5,51,9
	.half	.L152-.L10
	.byte	3,192,2,1,5,70,9
	.half	.L389-.L152
	.byte	1,5,31,9
	.half	.L390-.L389
	.byte	1,5,48,9
	.half	.L328-.L390
	.byte	1,5,3,9
	.half	.L391-.L328
	.byte	3,1,1,5,7,9
	.half	.L11-.L391
	.byte	3,194,125,1,5,29,7,9
	.half	.L155-.L11
	.byte	3,43,1,5,27,9
	.half	.L329-.L155
	.byte	1,5,31,9
	.half	.L392-.L329
	.byte	3,127,1,5,29,9
	.half	.L393-.L392
	.byte	1,5,69,9
	.half	.L394-.L393
	.byte	1,5,41,9
	.half	.L395-.L394
	.byte	3,127,1,5,3,9
	.half	.L330-.L395
	.byte	3,4,1,5,9,9
	.half	.L13-.L330
	.byte	3,88,1,5,7,9
	.half	.L12-.L13
	.byte	3,3,1,5,18,9
	.half	.L327-.L12
	.byte	3,1,1,5,66,9
	.half	.L9-.L327
	.byte	3,107,1,5,38,9
	.half	.L2-.L9
	.byte	1,5,54,9
	.half	.L396-.L2
	.byte	1,5,15,7,9
	.half	.L122-.L396
	.byte	3,231,126,1,5,33,9
	.half	.L321-.L122
	.byte	3,3,1,5,48,9
	.half	.L397-.L321
	.byte	1,9
	.half	.L331-.L397
	.byte	3,3,1,5,19,9
	.half	.L332-.L331
	.byte	3,3,1,5,55,9
	.half	.L323-.L332
	.byte	1,5,21,9
	.half	.L15-.L323
	.byte	3,175,2,1,5,13,9
	.half	.L398-.L15
	.byte	1,5,24,7,9
	.half	.L166-.L398
	.byte	3,93,1,5,53,9
	.half	.L399-.L166
	.byte	1,5,44,9
	.half	.L400-.L399
	.byte	1,5,72,9
	.half	.L401-.L400
	.byte	1,5,3,9
	.half	.L333-.L401
	.byte	3,3,1,5,71,9
	.half	.L17-.L333
	.byte	3,32,1,5,24,9
	.half	.L16-.L17
	.byte	3,186,127,1,5,44,9
	.half	.L402-.L16
	.byte	1,5,23,9
	.half	.L403-.L402
	.byte	3,1,1,5,55,9
	.half	.L334-.L403
	.byte	3,127,1,5,3,9
	.half	.L404-.L334
	.byte	3,3,1,9
	.half	.L18-.L404
	.byte	3,198,0,1,5,5,9
	.half	.L20-.L18
	.byte	3,209,125,1,5,24,7,9
	.half	.L164-.L20
	.byte	3,4,1,5,39,9
	.half	.L405-.L164
	.byte	1,5,61,9
	.half	.L406-.L405
	.byte	1,5,59,9
	.half	.L407-.L406
	.byte	1,5,15,9
	.half	.L170-.L407
	.byte	3,190,1,1,5,29,9
	.half	.L408-.L170
	.byte	3,2,1,5,27,9
	.half	.L409-.L408
	.byte	1,5,31,9
	.half	.L335-.L409
	.byte	3,127,1,5,29,9
	.half	.L410-.L335
	.byte	1,5,69,9
	.half	.L411-.L410
	.byte	1,5,41,9
	.half	.L412-.L411
	.byte	3,127,1,5,3,9
	.half	.L336-.L412
	.byte	3,4,1,5,22,9
	.half	.L22-.L336
	.byte	3,204,1,1,5,13,9
	.half	.L413-.L22
	.byte	1,5,3,7,9
	.half	.L188-.L413
	.byte	3,191,127,1,5,71,9
	.half	.L24-.L188
	.byte	3,193,0,1,5,24,9
	.half	.L23-.L24
	.byte	3,94,1,5,53,9
	.half	.L414-.L23
	.byte	1,5,44,9
	.half	.L415-.L414
	.byte	1,5,72,9
	.half	.L416-.L415
	.byte	1,5,3,9
	.half	.L338-.L416
	.byte	3,3,1,9
	.half	.L25-.L338
	.byte	3,34,1,5,7,9
	.half	.L27-.L25
	.byte	3,250,124,1,5,22,7,9
	.half	.L182-.L27
	.byte	3,4,1,5,16,9
	.half	.L200-.L182
	.byte	3,199,4,1,5,26,9
	.half	.L417-.L200
	.byte	1,5,51,9
	.half	.L418-.L417
	.byte	1,5,77,9
	.half	.L339-.L418
	.byte	1,5,3,9
	.half	.L419-.L339
	.byte	3,4,1,5,9,9
	.half	.L29-.L419
	.byte	3,182,123,1,5,47,9
	.half	.L28-.L29
	.byte	3,4,1,5,41,9
	.half	.L206-.L28
	.byte	3,222,3,1,5,60,9
	.half	.L420-.L206
	.byte	1,5,38,9
	.half	.L340-.L420
	.byte	1,5,3,9
	.half	.L421-.L340
	.byte	3,1,1,5,7,9
	.half	.L30-.L421
	.byte	3,161,124,1,5,9,7,9
	.half	.L207-.L30
	.byte	3,2,1,5,14,9
	.half	.L31-.L207
	.byte	3,4,1,5,47,9
	.half	.L422-.L31
	.byte	3,2,1,5,60,9
	.half	.L214-.L422
	.byte	3,214,3,1,5,38,9
	.half	.L341-.L214
	.byte	1,5,3,9
	.half	.L423-.L341
	.byte	3,1,1,5,7,9
	.half	.L32-.L423
	.byte	3,169,124,1,5,9,7,9
	.half	.L215-.L32
	.byte	3,2,1,5,14,9
	.half	.L33-.L215
	.byte	3,4,1,5,47,9
	.half	.L424-.L33
	.byte	3,2,1,5,60,9
	.half	.L217-.L424
	.byte	3,206,3,1,5,38,9
	.half	.L342-.L217
	.byte	1,5,3,9
	.half	.L425-.L342
	.byte	3,1,1,5,7,9
	.half	.L34-.L425
	.byte	3,177,124,1,5,9,7,9
	.half	.L218-.L34
	.byte	3,2,1,5,14,9
	.half	.L35-.L218
	.byte	3,4,1,5,47,9
	.half	.L426-.L35
	.byte	3,2,1,5,60,9
	.half	.L220-.L426
	.byte	3,198,3,1,5,38,9
	.half	.L343-.L220
	.byte	1,5,3,9
	.half	.L427-.L343
	.byte	3,1,1,5,7,9
	.half	.L36-.L427
	.byte	3,185,124,1,5,9,7,9
	.half	.L221-.L36
	.byte	3,2,1,5,21,9
	.half	.L37-.L221
	.byte	3,140,5,1,5,13,9
	.half	.L428-.L37
	.byte	1,5,3,7,9
	.half	.L229-.L428
	.byte	3,98,1,5,75,9
	.half	.L39-.L229
	.byte	3,30,1,5,24,9
	.half	.L38-.L39
	.byte	3,190,127,1,5,44,9
	.half	.L429-.L38
	.byte	1,5,23,9
	.half	.L430-.L429
	.byte	3,1,1,5,55,9
	.half	.L345-.L430
	.byte	3,127,1,5,3,9
	.half	.L431-.L345
	.byte	3,3,1,9
	.half	.L40-.L431
	.byte	3,194,0,1,5,7,9
	.half	.L42-.L40
	.byte	3,244,122,1,5,74,7,9
	.half	.L176-.L42
	.byte	3,4,1,5,22,9
	.half	.L177-.L176
	.byte	3,2,1,5,57,9
	.half	.L346-.L177
	.byte	1,5,43,9
	.half	.L45-.L346
	.byte	3,2,1,5,29,9
	.half	.L241-.L45
	.byte	3,135,6,1,5,3,9
	.half	.L347-.L241
	.byte	3,1,1,5,11,9
	.half	.L46-.L347
	.byte	3,248,121,1,5,14,7,9
	.half	.L242-.L46
	.byte	3,2,1,9
	.half	.L432-.L242
	.byte	3,2,1,9
	.half	.L433-.L432
	.byte	3,1,1,5,23,9
	.half	.L47-.L433
	.byte	3,4,1,5,24,9
	.half	.L434-.L47
	.byte	3,3,1,5,66,9
	.half	.L435-.L434
	.byte	3,114,1,5,57,9
	.half	.L44-.L435
	.byte	1,5,21,7,9
	.half	.L43-.L44
	.byte	3,231,5,1,5,13,9
	.half	.L436-.L43
	.byte	1,5,24,7,9
	.half	.L253-.L436
	.byte	3,95,1,5,53,9
	.half	.L437-.L253
	.byte	1,5,44,9
	.half	.L438-.L437
	.byte	1,5,72,9
	.half	.L439-.L438
	.byte	1,5,3,9
	.half	.L349-.L439
	.byte	3,3,1,5,75,9
	.half	.L49-.L349
	.byte	3,30,1,5,24,9
	.half	.L48-.L49
	.byte	3,190,127,1,5,44,9
	.half	.L440-.L48
	.byte	1,5,23,9
	.half	.L441-.L440
	.byte	3,1,1,5,55,9
	.half	.L350-.L441
	.byte	3,127,1,5,3,9
	.half	.L442-.L350
	.byte	3,3,1,9
	.half	.L50-.L442
	.byte	3,194,0,1,5,7,9
	.half	.L52-.L50
	.byte	3,168,122,1,5,73,7,9
	.half	.L178-.L52
	.byte	3,4,1,5,10,9
	.half	.L179-.L178
	.byte	3,2,1,9
	.half	.L443-.L179
	.byte	3,2,1,9
	.half	.L444-.L443
	.byte	3,1,1,5,21,9
	.half	.L445-.L444
	.byte	3,4,1,5,18,9
	.half	.L53-.L445
	.byte	3,3,1,5,67,9
	.half	.L21-.L53
	.byte	3,160,127,1,5,39,9
	.half	.L14-.L21
	.byte	1,5,55,9
	.half	.L446-.L14
	.byte	1,5,3,7,9
	.half	.L447-.L446
	.byte	3,230,0,1,9
	.half	.L448-.L447
	.byte	3,4,1,9
	.half	.L449-.L448
	.byte	3,3,1,5,1,9
	.half	.L103-.L449
	.byte	3,198,117,1,7,9
	.half	.L83-.L103
	.byte	0,1,1
.L372:
	.sdecl	'.debug_ranges',debug,cluster('Port_Init')
	.sect	'.debug_ranges'
.L82:
	.word	-1,.L70,0,.L83-.L70,0,0
.L143:
	.word	-1,.L70,.L4-.L70,.L6-.L70,.L8-.L70,.L128-.L70,0,0
.L150:
	.word	-1,.L70,.L146-.L70,.L10-.L70,.L151-.L70,.L152-.L70,0,0
.L161:
	.word	-1,.L70,.L155-.L70,.L13-.L70,.L162-.L70,.L12-.L70,0,0
.L168:
	.word	-1,.L70,.L16-.L70,.L18-.L70,.L20-.L70,.L164-.L70,0,0
.L171:
	.word	-1,.L70,.L170-.L70,.L22-.L70,.L29-.L70,.L28-.L70,.L172-.L70,.L31-.L70,.L173-.L70,.L33-.L70,.L174-.L70
	.word	.L35-.L70,.L175-.L70,.L37-.L70,.L176-.L70,.L177-.L70,.L178-.L70,.L179-.L70,0,0
.L197:
	.word	-1,.L70,.L23-.L70,.L25-.L70,.L27-.L70,.L182-.L70,0,0
.L238:
	.word	-1,.L70,.L38-.L70,.L40-.L70,.L42-.L70,.L176-.L70,0,0
.L262:
	.word	-1,.L70,.L48-.L70,.L50-.L70,.L52-.L70,.L178-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_info'
.L84:
	.word	718
	.half	3
	.word	.L85
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L87,.L86
	.byte	2
	.word	.L75
	.byte	3
	.byte	'Port_RefreshPortDirection',0,1,155,10,6,1,1,1
	.word	.L72,.L264,.L71
	.byte	4
	.word	.L72,.L264
	.byte	5
	.byte	'LoopCtr',0,1,157,10,25
	.word	.L109,.L265
	.byte	5
	.byte	'PortNumber',0,1,159,10,25
	.word	.L109,.L266
	.byte	5
	.byte	'ConfigIndex',0,1,160,10,25
	.word	.L109,.L267
	.byte	5
	.byte	'DataPtr',0,1,166,10,26
	.word	.L105,.L268
	.byte	5
	.byte	'IocrDataPtr',0,1,167,10,26
	.word	.L269,.L270
	.byte	5
	.byte	'IocrRegPtr',0,1,168,10,26
	.word	.L117,.L271
	.byte	5
	.byte	'PortAddressPtr',0,1,169,10,10
	.word	.L113,.L272
	.byte	6
	.word	.L127,.L273,.L274
	.byte	7
	.word	.L129,.L275
	.byte	8
	.word	.L131,.L273,.L274
	.byte	5
	.byte	'RetVal',0,1,205,16,10
	.word	.L109,.L276
	.byte	6
	.word	.L133,.L277,.L56
	.byte	7
	.word	.L135,.L278
	.byte	8
	.word	.L137,.L277,.L56
	.byte	5
	.byte	'RetVal',0,1,170,16,10
	.word	.L109,.L279
	.byte	0,0,6
	.word	.L139,.L55,.L57
	.byte	7
	.word	.L140,.L280
	.byte	9
	.word	.L142,.L281
	.byte	5
	.byte	'RetVal',0,1,135,16,10
	.word	.L109,.L282
	.byte	0,0,6
	.word	.L139,.L59,.L274
	.byte	7
	.word	.L140,.L280
	.byte	0,0,0,6
	.word	.L145,.L283,.L284
	.byte	7
	.word	.L147,.L285
	.byte	8
	.word	.L149,.L283,.L284
	.byte	5
	.byte	'RetVal',0,1,225,15,10
	.word	.L113,.L286
	.byte	0,0,6
	.word	.L287,.L62,.L288
	.byte	7
	.word	.L289,.L290
	.byte	7
	.word	.L291,.L292
	.byte	8
	.word	.L293,.L62,.L288
	.byte	5
	.byte	'RetVal',0,1,213,17,10
	.word	.L159,.L294
	.byte	0,0,4
	.word	.L288,.L64
	.byte	5
	.byte	'val',0,1,245,10,13
	.word	.L109,.L295
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_abbrev'
.L85:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_line'
.L86:
	.word	.L451-.L450
.L450:
	.half	3
	.word	.L453-.L452
.L452:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0,0,0,0,0
.L453:
	.byte	5,15,7,0,5,2
	.word	.L72
	.byte	3,187,10,1,5,16,9
	.half	.L352-.L72
	.byte	3,1,1,5,31,9
	.half	.L54-.L352
	.byte	3,3,1,5,21,9
	.half	.L273-.L54
	.byte	3,143,6,1,5,13,9
	.half	.L454-.L273
	.byte	1,5,24,7,9
	.half	.L277-.L454
	.byte	3,93,1,5,53,9
	.half	.L455-.L277
	.byte	1,5,44,9
	.half	.L456-.L455
	.byte	1,5,72,9
	.half	.L457-.L456
	.byte	1,5,3,9
	.half	.L353-.L457
	.byte	3,3,1,5,71,9
	.half	.L56-.L353
	.byte	3,32,1,5,24,9
	.half	.L55-.L56
	.byte	3,186,127,1,5,44,9
	.half	.L458-.L55
	.byte	1,5,23,9
	.half	.L459-.L458
	.byte	3,1,1,5,55,9
	.half	.L354-.L459
	.byte	3,127,1,5,3,9
	.half	.L460-.L354
	.byte	3,3,1,9
	.half	.L57-.L460
	.byte	3,198,0,1,5,6,9
	.half	.L59-.L57
	.byte	3,238,121,1,5,20,7,9
	.half	.L274-.L59
	.byte	3,6,1,5,35,9
	.half	.L461-.L274
	.byte	1,5,57,9
	.half	.L462-.L461
	.byte	1,5,55,9
	.half	.L463-.L462
	.byte	1,5,15,9
	.half	.L283-.L463
	.byte	3,159,5,1,5,29,9
	.half	.L464-.L283
	.byte	3,2,1,5,27,9
	.half	.L465-.L464
	.byte	1,5,31,9
	.half	.L355-.L465
	.byte	3,127,1,5,29,9
	.half	.L466-.L355
	.byte	1,5,69,9
	.half	.L467-.L466
	.byte	1,5,41,9
	.half	.L468-.L467
	.byte	3,127,1,5,3,9
	.half	.L356-.L468
	.byte	3,4,1,5,72,9
	.half	.L61-.L356
	.byte	3,242,122,1,5,16,9
	.half	.L284-.L61
	.byte	3,8,1,5,31,9
	.half	.L62-.L284
	.byte	3,244,6,1,5,50,9
	.half	.L469-.L62
	.byte	1,5,24,9
	.half	.L470-.L469
	.byte	3,1,1,5,43,9
	.half	.L471-.L470
	.byte	1,5,60,9
	.half	.L357-.L471
	.byte	3,127,1,5,3,9
	.half	.L472-.L357
	.byte	3,3,1,5,9,9
	.half	.L63-.L472
	.byte	3,140,121,1,5,13,7,9
	.half	.L288-.L63
	.byte	3,15,1,5,16,9
	.half	.L64-.L288
	.byte	3,6,1,5,21,9
	.half	.L473-.L64
	.byte	3,1,1,5,9,9
	.half	.L474-.L473
	.byte	1,5,19,7,9
	.half	.L475-.L474
	.byte	3,5,1,5,20,9
	.half	.L65-.L475
	.byte	3,4,1,5,28,9
	.half	.L476-.L65
	.byte	3,9,1,5,49,9
	.half	.L477-.L476
	.byte	1,5,18,7,9
	.half	.L478-.L477
	.byte	3,3,1,5,15,9
	.half	.L60-.L478
	.byte	3,2,1,5,27,9
	.half	.L479-.L60
	.byte	3,1,1,5,43,9
	.half	.L480-.L479
	.byte	1,5,1,7,9
	.half	.L481-.L480
	.byte	3,2,1,7,9
	.half	.L88-.L481
	.byte	0,1,1
.L451:
	.sdecl	'.debug_ranges',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_ranges'
.L87:
	.word	-1,.L72,0,.L88-.L72,0,0
.L281:
	.word	-1,.L72,.L55-.L72,.L57-.L72,.L59-.L72,.L274-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('Port_SetPinMode')
	.sect	'.debug_info'
.L89:
	.word	532
	.half	3
	.word	.L90
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L92,.L91
	.byte	2
	.word	.L75
	.byte	3
	.byte	'Port_SetPinMode',0,1,191,11,6,1,1,1
	.word	.L74,.L296,.L73
	.byte	4
	.byte	'Pin',0,1,191,11,35
	.word	.L109,.L297
	.byte	4
	.byte	'Mode',0,1,191,11,57
	.word	.L109,.L298
	.byte	5
	.word	.L74,.L296
	.byte	6
	.byte	'PortNumber',0,1,194,11,20
	.word	.L109,.L299
	.byte	6
	.byte	'PinNumber',0,1,195,11,20
	.word	.L109,.L300
	.byte	6
	.byte	'IocrRegPtr',0,1,204,11,21
	.word	.L117,.L301
	.byte	6
	.byte	'PortAddressPtr',0,1,205,11,20
	.word	.L113,.L302
	.byte	7
	.word	.L303,.L74,.L66
	.byte	8
	.word	.L304,.L305
	.byte	9
	.word	.L306,.L74,.L66
	.byte	6
	.byte	'RetVal',0,1,185,18,11
	.word	.L109,.L307
	.byte	0,0,7
	.word	.L308,.L66,.L67
	.byte	8
	.word	.L309,.L310
	.byte	9
	.word	.L311,.L66,.L67
	.byte	6
	.byte	'RetVal',0,1,218,18,11
	.word	.L109,.L312
	.byte	0,0,7
	.word	.L145,.L67,.L313
	.byte	8
	.word	.L147,.L314
	.byte	9
	.word	.L149,.L67,.L313
	.byte	6
	.byte	'RetVal',0,1,225,15,10
	.word	.L113,.L315
	.byte	0,0,5
	.word	.L313,.L316
	.byte	6
	.byte	'val',0,1,194,12,5
	.word	.L109,.L317
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_SetPinMode')
	.sect	'.debug_abbrev'
.L90:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_SetPinMode')
	.sect	'.debug_line'
.L91:
	.word	.L483-.L482
.L482:
	.half	3
	.word	.L485-.L484
.L484:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0,0,0,0,0
.L485:
	.byte	5,44,7,0,5,2
	.word	.L74
	.byte	3,186,18,1,5,4,9
	.half	.L360-.L74
	.byte	3,1,1,5,20,9
	.half	.L66-.L360
	.byte	3,32,1,5,4,9
	.half	.L362-.L66
	.byte	3,2,1,5,15,9
	.half	.L67-.L362
	.byte	3,135,125,1,5,29,9
	.half	.L486-.L67
	.byte	3,2,1,5,27,9
	.half	.L487-.L486
	.byte	1,5,31,9
	.half	.L488-.L487
	.byte	3,127,1,5,29,9
	.half	.L489-.L488
	.byte	1,5,69,9
	.half	.L490-.L489
	.byte	1,5,41,9
	.half	.L491-.L490
	.byte	3,127,1,5,3,9
	.half	.L364-.L491
	.byte	3,4,1,5,53,9
	.half	.L68-.L364
	.byte	3,143,124,1,5,5,9
	.half	.L313-.L68
	.byte	3,202,0,1,5,1,9
	.half	.L316-.L313
	.byte	3,4,1,7,9
	.half	.L93-.L316
	.byte	0,1,1
.L483:
	.sdecl	'.debug_ranges',debug,cluster('Port_SetPinMode')
	.sect	'.debug_ranges'
.L92:
	.word	-1,.L74,0,.L93-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_info'
.L94:
	.word	180
	.half	3
	.word	.L95
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L75
	.byte	3
	.byte	'Port_kAvailablePins',0,1,226,2,21
	.word	.L318
	.byte	5,3
	.word	Port_kAvailablePins
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_info'
.L96:
	.word	176
	.half	3
	.word	.L97
	.byte	4,1
	.byte	'Targets\\TC275\\MCAL\\MCAL_Modules\\Port\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L75
	.byte	3
	.byte	'Port_kConfigPtr',0,1,158,3,33
	.word	.L99
	.byte	5,3
	.word	Port_kConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_abbrev'
.L97:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Port_Init')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L70,.L170-.L70,.L45-.L70
	.half	1
	.byte	98
	.word	0,0
.L112:
	.word	-1,.L70,.L321-.L70,.L98-.L70
	.half	1
	.byte	88
	.word	0,0
.L125:
	.word	-1,.L70,.L320-.L70,.L321-.L70
	.half	1
	.byte	88
	.word	0,0
.L100:
	.word	-1,.L70,0,.L3-.L70
	.half	1
	.byte	100
	.word	0,0
.L106:
	.word	0,0
.L115:
	.word	-1,.L70,.L331-.L70,.L98-.L70
	.half	1
	.byte	108
	.word	0,0
.L118:
	.word	-1,.L70,.L177-.L70,.L43-.L70
	.half	1
	.byte	110
	.word	0,0
.L202:
	.word	0,0
.L116:
	.word	-1,.L70,.L332-.L70,.L98-.L70
	.half	1
	.byte	109
	.word	0,0
.L119:
	.word	-1,.L70,.L179-.L70,.L53-.L70
	.half	1
	.byte	111
	.word	0,0
.L211:
	.word	0,0
.L141:
	.word	0,0
.L136:
	.word	0,0
.L130:
	.word	0,0
.L190:
	.word	0,0
.L195:
	.word	0,0
.L184:
	.word	0,0
.L157:
	.word	0,0
.L209:
	.word	0,0
.L236:
	.word	0,0
.L231:
	.word	0,0
.L225:
	.word	0,0
.L260:
	.word	0,0
.L255:
	.word	0,0
.L249:
	.word	0,0
.L114:
	.word	0,0
.L126:
	.word	0,0
.L244:
	.word	0,0
.L111:
	.word	-1,.L70,.L200-.L70,.L28-.L70
	.half	1
	.byte	95
	.word	0,0
.L110:
	.word	-1,.L70,.L323-.L70,.L98-.L70
	.half	1
	.byte	89
	.word	0,0
.L124:
	.word	-1,.L70,.L322-.L70,.L323-.L70
	.half	1
	.byte	89
	.word	0,0
.L148:
	.word	0,0
.L69:
	.word	-1,.L70,0,.L319-.L70
	.half	2
	.byte	138,0
	.word	.L319-.L70,.L98-.L70
	.half	2
	.byte	138,8
	.word	.L98-.L70,.L98-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L153:
	.word	-1,.L70,.L326-.L70,.L327-.L70
	.half	1
	.byte	100
	.word	0,0
.L180:
	.word	-1,.L70,.L336-.L70,.L179-.L70
	.half	1
	.byte	111
	.word	0,0
.L163:
	.word	-1,.L70,.L330-.L70,.L12-.L70
	.half	1
	.byte	98
	.word	0,0
.L169:
	.word	-1,.L70,.L333-.L70,.L16-.L70
	.half	5
	.byte	144,32,157,32,0
	.word	.L334-.L70,.L335-.L70
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L144:
	.word	-1,.L70,.L324-.L70,.L4-.L70
	.half	5
	.byte	144,32,157,32,0
	.word	.L325-.L70,.L146-.L70
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L167:
	.word	0,0
.L138:
	.word	0,0
.L165:
	.word	0,0
.L132:
	.word	0,0
.L192:
	.word	0,0
.L198:
	.word	-1,.L70,.L337-.L70,.L23-.L70
	.half	1
	.byte	95
	.word	.L338-.L70,.L200-.L70
	.half	1
	.byte	95
	.word	0,0
.L186:
	.word	0,0
.L160:
	.word	-1,.L70,.L328-.L70,.L329-.L70
	.half	1
	.byte	95
	.word	0,0
.L219:
	.word	-1,.L70,.L342-.L70,.L174-.L70
	.half	1
	.byte	95
	.word	0,0
.L216:
	.word	-1,.L70,.L341-.L70,.L173-.L70
	.half	1
	.byte	95
	.word	0,0
.L213:
	.word	-1,.L70,.L340-.L70,.L172-.L70
	.half	1
	.byte	95
	.word	0,0
.L222:
	.word	-1,.L70,.L343-.L70,.L175-.L70
	.half	1
	.byte	95
	.word	0,0
.L204:
	.word	-1,.L70,.L339-.L70,.L28-.L70
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L239:
	.word	-1,.L70,.L344-.L70,.L38-.L70
	.half	1
	.byte	95
	.word	.L345-.L70,.L45-.L70
	.half	1
	.byte	95
	.word	0,0
.L233:
	.word	0,0
.L227:
	.word	0,0
.L263:
	.word	-1,.L70,.L349-.L70,.L48-.L70
	.half	1
	.byte	95
	.word	.L350-.L70,.L351-.L70
	.half	1
	.byte	95
	.word	0,0
.L257:
	.word	0,0
.L251:
	.word	0,0
.L246:
	.word	-1,.L70,.L347-.L70,.L348-.L70
	.half	1
	.byte	95
	.word	0,0
.L120:
	.word	-1,.L70,.L346-.L70,.L43-.L70
	.half	1
	.byte	90
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_loc'
.L267:
	.word	-1,.L72,.L54-.L72,.L264-.L72
	.half	1
	.byte	82
	.word	0,0
.L268:
	.word	-1,.L72,.L283-.L72,.L60-.L72
	.half	1
	.byte	111
	.word	0,0
.L270:
	.word	0,0
.L271:
	.word	-1,.L72,.L284-.L72,.L60-.L72
	.half	1
	.byte	98
	.word	0,0
.L265:
	.word	-1,.L72,.L62-.L72,.L60-.L72
	.half	1
	.byte	86
	.word	0,0
.L292:
	.word	0,0
.L280:
	.word	0,0
.L278:
	.word	0,0
.L275:
	.word	0,0
.L290:
	.word	0,0
.L272:
	.word	0,0
.L266:
	.word	-1,.L72,.L352-.L72,.L264-.L72
	.half	1
	.byte	83
	.word	0,0
.L285:
	.word	0,0
.L71:
	.word	-1,.L72,0,.L264-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L286:
	.word	-1,.L72,.L356-.L72,.L284-.L72
	.half	1
	.byte	98
	.word	0,0
.L282:
	.word	-1,.L72,.L353-.L72,.L55-.L72
	.half	5
	.byte	144,32,157,32,0
	.word	.L354-.L72,.L355-.L72
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L279:
	.word	0,0
.L276:
	.word	0,0
.L294:
	.word	-1,.L72,.L357-.L72,.L358-.L72
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L295:
	.word	-1,.L72,.L358-.L72,.L64-.L72
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_SetPinMode')
	.sect	'.debug_loc'
.L301:
	.word	-1,.L74,.L313-.L74,.L365-.L74
	.half	1
	.byte	111
	.word	0,0
.L298:
	.word	-1,.L74,0,.L359-.L74
	.half	1
	.byte	85
	.word	0,0
.L297:
	.word	-1,.L74,0,.L296-.L74
	.half	1
	.byte	84
	.word	0,0
.L305:
	.word	0,0
.L310:
	.word	0,0
.L300:
	.word	0,0
.L302:
	.word	0,0
.L299:
	.word	0,0
.L314:
	.word	0,0
.L73:
	.word	-1,.L74,0,.L296-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L315:
	.word	-1,.L74,.L364-.L74,.L313-.L74
	.half	1
	.byte	111
	.word	0,0
.L307:
	.word	-1,.L74,.L360-.L74,.L361-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L312:
	.word	-1,.L74,.L362-.L74,.L363-.L74
	.half	1
	.byte	81
	.word	0,0
.L317:
	.word	-1,.L74,.L361-.L74,.L296-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L492:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Port_Init')
	.sect	'.debug_frame'
	.word	36
	.word	.L492,.L70,.L98-.L70
	.byte	4
	.word	(.L319-.L70)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L98-.L319)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_frame'
	.word	20
	.word	.L492,.L72,.L264-.L72
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Port_SetPinMode')
	.sect	'.debug_frame'
	.word	24
	.word	.L492,.L74,.L296-.L74
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2664    return(RetVal);
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2665  }
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2666  
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2667  /*Memory Map of the PORT Code*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2668  #define PORT_STOP_SEC_CODE
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2669  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2670   allowed only for MemMap.h*/
; Targets\TC275\MCAL\MCAL_Modules\Port\src\Port.c	  2671  #include "MemMap.h"

	; Module end
