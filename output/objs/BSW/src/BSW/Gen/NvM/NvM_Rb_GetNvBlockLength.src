	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16496a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\NvM\\NvM_Rb_GetNvBlockLength.src BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c'

	
$TC16X
	
	.sdecl	'.text.NvM_Rb_GetNvBlockLength.NvM_Rb_GetNvBlockLength',code,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.text.NvM_Rb_GetNvBlockLength.NvM_Rb_GetNvBlockLength'
	.align	2
	
	.global	NvM_Rb_GetNvBlockLength

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     1  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     2  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     3   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     4   * Includes
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     6  */
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     7  #include "NvM.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     8  #include "Rte_NvM.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	     9  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    10  #include "NvM_Prv_BlockData.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    11  #include "NvM_Prv_ErrorDetection.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    12  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    13  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    15   * Code
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    16   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    17  */
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    18  #define NVM_START_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    19  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    20  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    21  Std_ReturnType NvM_Rb_GetNvBlockLength(NvM_BlockIdType BlockId, uint16 *NvBlockLengthPtr)
; Function NvM_Rb_GetNvBlockLength
.L9:
NvM_Rb_GetNvBlockLength:	.type	func
	mov	d15,d4
.L35:
	mov.aa	a12,a4
.L37:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    22  {
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    23      // TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2791] Service for getting the configured NV block length in bytes
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    24      //                                               of an NvM block
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    25      Std_ReturnType stReturn_uo = E_NOT_OK;
	mov	d8,#1
.L38:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    26  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    27      if (NvM_Prv_ErrorDetection_IsBlockIdValid(NVM_SERVICE_ID_RB_GET_NV_BLOCK_LENGTH, BlockId, FALSE))
	mov	d4,#253
.L33:
	mov	d6,#0
	mov	d5,d15
.L39:
	call	NvM_Prv_ErrorDetection_IsBlockIdValid
.L34:
	jeq	d2,#0,.L2
.L54:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    28      {
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    29          if (NvM_Prv_ErrorDetection_IsPtrValidForBlockLength(NVM_SERVICE_ID_RB_GET_NV_BLOCK_LENGTH,
	mov	d4,#253
.L55:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    30                                                              BlockId,
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    31                                                              NvBlockLengthPtr))
	mov	d5,d15
.L40:
	mov.aa	a4,a12
.L42:
	call	NvM_Prv_ErrorDetection_IsPtrValidForBlockLength
.L41:
	jeq	d2,#0,.L3
.L27:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     1  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     2  #ifndef NVM_PRV_BLOCKDESCRIPTOR_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     3  #define NVM_PRV_BLOCKDESCRIPTOR_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     4  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     5  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     6   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     7   * Includes
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     8   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     9   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    10  #include "Rte_NvM_Type.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    11  #include "NvM_Types.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    12  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    13  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    15   * Defines/Macros
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    16   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    17   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    18  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    19   * Definition of the immediate job priority for a NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    20   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    21  // TRACE[ECUC_NvM_00477]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    22  #define NVM_PRV_JOB_PRIORITY_IMMEDIATE      (0u)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    23  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    24  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    25   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    26   * Type definitions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    27   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    28   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    29  typedef Std_ReturnType (*NvM_Prv_ExplicitSync_Copy_tpfct)(void* NvMBuffer_pv);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    30  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    31  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    32   * Definition of different bit masks to access different configuration flags withis block descriptors
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    33   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    34  typedef enum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    35  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    36      /// Bit mask definition to get information whether a block shall be processed during NvM_ReadAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    37      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    38      /// TRACE[NVM117_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForReadAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    39      NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL              = 0x0001,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    40      /// Bit mask definition to get information whether the block shall be processed during NvM_WriteAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    41      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    42      /// TRACE[NVM549_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForWriteAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    43      NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL             = 0x0002,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    44      /// Bit mask definition to get information whether the block shall be processed during NvM_Rb_FirstInitAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    45      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    46      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2828] Parameter NvMBlockDescriptor:NvMRbSelectBlockForFirstInitAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    47      NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL        = 0x0004,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    48      /// Bit mask definition to get information whether the block shall be initialized when a layout change is detected.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    49      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    50      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2881] Parameter NvMBlockDescriptor:NvMRbInitBlockAtLayoutChange
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    51      NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE = 0x0008,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    52      /// Bit mask definition to get information whether the block is initially write protected.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    53      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    54      /// TRACE[NVM033_Conf] Parameter NvMBlockDescriptor:NvMBlockWriteProt
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    55      NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED                  = 0x0010,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    56      /// Bit mask definition to get information whether the block shall be written only once.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    57      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    58      /// TRACE[NVM072_Conf] Parameter NvMBlockDescriptor:NvMWriteBlockOnce
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    59      NVM_PRV_BLOCK_FLAG_WRITE_ONCE                       = 0x0020,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    60      /// Bit mask definition to get information whether the block shall be resistant to block layout changes.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    61      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    62      /// TRACE[NVM483_Conf] ParameterNvMBlockDescriptor:NvMResistantToChangedSw
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    63      NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW          = 0x0040,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    64      /// Bit mask definition to get information whether the block shall use explicit synchronization mechanism.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    65      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    66      /// TRACE[NVM519_Conf] Parameter NvMBlockDescriptor:NvMBlockUseSyncMechanism
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    67      NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM               = 0x0080,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    68      /// Bit mask definition to get information whether the block shall be processed during NvM_ValidateAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    69      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    70      /// TRACE[NVM557_Conf] Parameter NvMBlockDescriptor:NvMBlockUseAutoValidation
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    71      NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION              = 0x0100,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    72      /// Bit mask definition to get information whether the block is using a variable block length.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    73      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    74      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    75      NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH        = 0x0200,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    76      /// Bit mask definition to get information whether the block is configured for migration.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    77      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    78      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3027] Parameter NvMBlockDescriptor:NvMRbFirstReadDataMigration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    79      NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION             = 0x0400,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    80      /// Bit mask definition to get information whether the block shall be initialized unconditionally
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    81      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    82      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3175] Parameter NvMBlockDescriptor:NvMRbRamInitUnconditional
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    83      NVM_PRV_BLOCK_FLAG_RAM_INIT_UNCONDITIONAL           = 0x0800
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    84  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    85  } NvM_Prv_BlockConfiguration_ten;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    86  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    87  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    88   * Definition of the structure for common configuration options of the NvM used during the runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    89   * TRACE[NVM028_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    90   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    91  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    92  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    93      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    94       * Pointer to a callback function which shall be invoked on termination of each asynchronous multi-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    95       * TRACE[NVM468]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    96       * TRACE[NVM331]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    97       * TRACE[NVM500_Conf] Parameter NvMCommon:NvMMultiBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    98       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    99      void (*MultiBlockCallback_pfct)(uint8 ServiceId, NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   100      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   101       * Pointer to a callback function which shall be invoked on start of each asynchronous multi-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   102       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2762] Parameter NvMCommon:NvMRbMultiBlockStartCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   103       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   104      void (*RbMultiBlockStartCallback_pfct)(uint8 ServiceId);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   105      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   106       * Pointer to a callback function which shall be invoked on termination of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   107       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2842]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   108       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2843] Parameter NvMCommon:NvMRbObserverCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   109       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   110      Std_ReturnType (*ObserverCallback_pfct)(NvM_BlockIdType BlockId,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   111                                              uint8 ServiceId,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   112                                              NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   113  } NvM_Prv_Common_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   114  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   115  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   116   * Definition of the structure for a NVRAM block descriptor.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   117   * A NVRAM block descriptor contains all information about a single NVRAM block needed during the runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   118   * The NVRAM block descriptors are condensed in the NVRAM block descriptor table.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   119   * TRACE[NVM061_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   120   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   121  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   122  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   123      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   124       * Block ID to be passed to the MemIf.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   125       * Do not confuse this ID with NVRAM block ID used within NvM.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   126       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   127      uint16 idBlockMemIf_u16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   128      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   129       * Pointer to the block legth in bytes.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   130       * If runtime calculation of block lengths is enabled by the NvM configuration then block lengths will be located
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   131       * in RAM so pointer points to a variable with block length calculated during runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   132       * Otherwise if runtime calculation is disabled by the NvM configuration then block legths will be located
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   133       * in ROM so pointer points to a constant with block length configured during compile time.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   134       * TRACE[NVM479_Conf] Parameter NvMBlockDescriptor:NvMNvBlockLength
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   135       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3028] Parameter NvMCommon:NvMRbRuntimeRamBlockConfiguration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   136       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   137       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   138  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   139      uint16* nrBlockBytes_pu16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   140  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   141      uint16 const* nrBlockBytes_pu16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   142  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   143      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   144       * Device index where the block is located (Fee / Ea).
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   145       * TRACE[NVM035_Conf] Parameter NvMBlockDescriptor:NvMNvramDeviceId
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   146       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   147      uint8 idxDevice_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   148      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   149       * Number of non-volatile blocks in a contiguous area according to the given block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   150       * TRACE[NVM480_Conf] Parameter NvMBlockDescriptor:NvMNvBlockNum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   151       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   152      uint8 nrNvBlocks_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   153      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   154       * Number of multiple ROM blocks in a contiguous area according to the given block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   155       * TRACE[NVM485_Conf] Parameter NvMBlockDescriptor:NvMRomBlockNum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   156       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   157      uint8 nrRomBlocks_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   158      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   159       * Pointer to the permanent RAM block data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   160       * If this pointer is NULL_PTR then no permanent RAM block data has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   161       * If runtime calculation of RAM block data addresses is enabled by the NvM configuration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   162       * then RAM block data addresses will be located in RAM and pointer points to a void pointer
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   163       * calculated during runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   164       * Otherwise if runtime calculation is disabled by the NvM configuration then RAM block data addresses
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   165       * will be located in ROM and pointer points to a constant void pointer configured during compile time.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   166       * TRACE[NVM126]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   167       * TRACE[NVM482_Conf] Parameter NvMBlockDescriptor:NvMRamBlockDataAddress
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   168       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3028] Parameter NvMCommon:NvMRbRuntimeRamBlockConfiguration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   169       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3086] Parameter NvMBlockDescriptor:NvMRbRamBlockDataAddressString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   170       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   171  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   172      void** adrRamBlock_ppv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   173  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   174      void* const* adrRamBlock_ppv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   175  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   176      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   177       * Pointer to the ROM block data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   178       * If this pointer is NULL_PTR then no ROM block data has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   179       * TRACE[NVM020]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   180       * TRACE[NVM484_Conf] Parameter NvMBlockDescriptor:NvMRomBlockDataAddress
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   181       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   182      void const* adrRomBlock_pcv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   183      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   184       * Pointer to the block specific callback function which shall be invoked on termination
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   185       * of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   186       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   187       * TRACE[NVM113]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   188       * TRACE[NVM467]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   189       * TRACE[NVM330]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   190       * TRACE[NVM506_Conf] Parameter NvMBlockDescriptor:NvMSingleBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   191       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   192      Std_ReturnType (*SingleBlockCallback_pfct)(uint8 ServiceId, NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   193      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   194       * Pointer to the block specific callback function which shall be invoked on start
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   195       * of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   196       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   197       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3056]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   198       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3062] Parameter NvMBlockDescriptor:NvMRbSingleBlockStartCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   199       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   200      Std_ReturnType (*SingleBlockStartCallback_pfct)(uint8 ServiceId);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   201      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   202       * Pointer to the block specific callback function which shall be invoked if no ROM block data is available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   203       * for initialization of the block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   204       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   205       * TRACE[NVM469]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   206       * TRACE[NVM352]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   207       * TRACE[NVM116_Conf] Parameter NvMBlockDescriptor:NvMInitBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   208       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   209      Std_ReturnType (*InitBlockCallback_pfct)(void);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   210      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   211       * Pointer to the block specific callback function to let the application copy data from the NvM mirror
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   212       * to application's RAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   213       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   214       * TRACE[NVM540]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   215       * TRACE[NVM542]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   216       * TRACE[NVM521_Conf] Parameter NvMBlockDescriptor:NvMReadRamBlockFromNvCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   217       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   218      Std_ReturnType (*ReadRamBlockFromNvm_pfct)(void* NvMBuffer);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   219      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   220       * Pointer the block specific callback function to let the application copy data from the application's RAM block
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   221       * to the NvM mirror.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   222       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   223       * TRACE[NVM539]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   224       * TRACE[NVM541]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   225       * TRACE[NVM520_Conf] Parameter NvMBlockDescriptor:NvMWriteRamBlockToNvCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   226       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   227      Std_ReturnType (*WriteRamBlockToNvm_pfct)(void* NvMBuffer);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   228      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   229       * Block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   230       * TRACE[NVM062_Conf] Parameter NvMBlockDescriptor:NvMBlockManagementType
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   231       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   232      NvM_BlockManagementType BlockManagementType_en;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   233      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   234       * Block job priority.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   235       * TRACE[NVM477_Conf] Parameter NvMBlockDescriptor:NvMBlockJobPriority
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   236       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   237      uint8 JobPriority_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   238      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   239       * Bit-field containing several configuration parameter which can be represented by a bit.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   240       * NvM provides special bit mask to access individual bits from this bit-field:
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   241       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   242       *   TRACE[NVM117_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForReadAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   243       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   244       *   TRACE[NVM549_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForWriteAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   245       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   246       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2828] Parameter NvMBlockDescriptor:NvMRbSelectBlockForFirstInitAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   247       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   248       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2881] Parameter NvMBlockDescriptor:NvMRbInitBlockAtLayoutChange
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   249       * - NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   250       *   TRACE[NVM033_Conf] Parameter NvMBlockDescriptor:NvMBlockWriteProt
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   251       * - NVM_PRV_BLOCK_FLAG_WRITE_ONCE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   252       *   TRACE[NVM072_Conf] Parameter NvMBlockDescriptor:NvMWriteBlockOnce
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   253       * - NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   254       *   TRACE[NVM483_Conf] Parameter NvMBlockDescriptor:NvMResistantToChangedSw
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   255       * - NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   256       *   TRACE[NVM519_Conf] Parameter NvMBlockDescriptor:NvMBlockUseSyncMechanism
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   257       * - NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   258       *   TRACE[NVM557_Conf] Parameter NvMBlockDescriptor:NvMBlockUseAutoValidation
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   259       * - NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   260       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   261       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   262       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3027] Parameter NvMBlockDescriptor:NvMRbFirstReadDataMigration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   263       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   264      uint16 stFlags_u16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   265  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   266  } NvM_Prv_BlockDescriptor_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   267  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   268  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   269   * Definition of the structure to assign the persistent ID to the block ID for a NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   270   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   271  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   272  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   273      uint16          PersistentId_u16;   // Persistent Id
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   274      NvM_BlockIdType BlockId_u16;        // Block Id
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   275  } NvM_Prv_PersId_BlockId_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   276  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   277  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   278   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   279   * Constants
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   280   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   281   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   282  // Declaration of different configuration-dependent data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   283  // Definition of all this data is done in NvM_Cfg.c.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   284  // ------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   285  #define NVM_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   286  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   287  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   288  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   289   * Declaration of the container with all common configuration data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   290   * TRACE[NVM028_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   291   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   292  extern const NvM_Prv_Common_tst             NvM_Prv_Common_cst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   293  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   294   * Declaration of the NVRAM block descriptor table.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   295   * TRACE[NVM061_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   296   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   297  extern const NvM_Prv_BlockDescriptor_tst    NvM_Prv_BlockDescriptors_acst[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   298  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   299   * Declaratiion of the table to get the NvM block ID using the persistent ID.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   300   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   301  extern const NvM_Prv_PersId_BlockId_tst     NvM_Prv_PersId_BlockId_acst[NVM_PRV_NR_PERSISTENT_IDS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   302  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   303   * Declaration of the table with all persistant IDs.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   304   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   305  extern const uint16                         NvM_Prv_PersIds_acu16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   306  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   307  #define NVM_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   308  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   309  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   310  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   311   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   312   * Variables
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   313   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   314   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   315  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   316  # define NVM_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   317  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   318  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   319  extern uint16 NvM_Prv_BlockLengths_au16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   320  extern void *NvM_Prv_RamBlockAdr_apv[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   321  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   322  # define NVM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   323  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   324  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   325  # define NVM_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   326  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   327  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   328  extern uint16 const NvM_Prv_BlockLengths_acu16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   329  extern void * const NvM_Prv_RamBlockAdr_acpv[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   330  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   331  # define NVM_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   332  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   333  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   334  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   335  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   336   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   337   * Extern declarations
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   338   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   339   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   340  #define NVM_START_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   341  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   342  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   343  // Init-related functions (defined in NvM_Cfg.c)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   344  extern void NvM_Prv_InitRamBlockProperties(void);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   345  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   346  #define NVM_STOP_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   347  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   348  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   349  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   350  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   351  * Inline functions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   352  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   353  */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   354  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   355   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   356   * This NvM private function provides information whether a block is configured for the given feature.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   357   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   358   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   359   * ID of the block for which the configuration information will be provided.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   360   * \param SelectionMask_en
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   361   * Bit mask for the configuration information to be provide.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   362   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   363   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   364   * - TRUE = block is configured for the given feature
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   365   * - FALSE = block is not configured for the given feature
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   366   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   367  LOCAL_INLINE boolean NvM_Prv_IsBlockSelected(NvM_BlockIdType idBlock_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   368                                               NvM_Prv_BlockConfiguration_ten SelectionMask_en)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   369  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   370      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   371              ((NvM_Prv_BlockDescriptors_acst[idBlock_uo].stFlags_u16 & ((uint16)SelectionMask_en)) != 0u));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   372  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   373  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   374  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   375   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   376   * This NvM private function provides the information whether default data is available for the given block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   377   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   378   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   379   * ID of the block to provide the availability of the default data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   380   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   381   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   382   * - TRUE = default data is available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   383   * - FALSE = default data is not available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   384   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   385  LOCAL_INLINE boolean NvM_Prv_IsDefaultDataAvailable(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   386  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   387      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   388              ((NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].adrRomBlock_pcv) ||
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   389               (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].InitBlockCallback_pfct)));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   390  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   391  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   392  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   393   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   394   * This NvM private function checks for the given block whether the configured block length is valid.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   395   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   396   * \param idBlock
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   397   * ID of the block for which the block length will be checked.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   398   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   399   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   400   * - TRUE = block length is valid
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   401   * - FALSE = block length is invalid
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   402   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   403  LOCAL_INLINE boolean NvM_Prv_IsBlockLengthValid(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   404  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   405      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   406              (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   407              (0u != *NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   408  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   409  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   410  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   411   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   412   * This NvM private function checks whether the given block is configured with immediate priority.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   413   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   414   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   415   * ID of the block for which the priority will be checked.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   416   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   417   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   418   * - TRUE = block is configured with immediate priority
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   419   * - FALSE = block is configured with standard priority
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   420   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   421  LOCAL_INLINE boolean NvM_Prv_HasBlockImmediateJobPriority(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   422  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   423      boolean HasBlockImmediateJobPriority_b = FALSE;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   424  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   425  #if (NVM_JOB_PRIORITIZATION == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   426      if ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   427          (NVM_PRV_JOB_PRIORITY_IMMEDIATE == NvM_Prv_BlockDescriptors_acst[idBlock_uo].JobPriority_u8))
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   428      {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   429          HasBlockImmediateJobPriority_b = TRUE;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   430      }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   431  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   432      return HasBlockImmediateJobPriority_b;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   433  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   434  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   435  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   436   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   437   * This NvM private function returns the configured block size for the given block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   438   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   439   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   440   * ID of the block for which the configured block size will be returned.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   441   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   442   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   443   * Configured block size
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   444   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   445  LOCAL_INLINE uint16 NvM_Prv_GetBlockSize(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   446  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   447      uint16 BlockSize_u16 = 0;
	mov	d0,#0
.L43:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   449      if ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&      (inlined)
	jge.u	d15,#14,.L4
.L56:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   448  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   449      if ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   450          (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16))
	mul	d15,d15,#48
.L36:
	movh.a	a15,#@his(NvM_Prv_BlockDescriptors_acst)
	lea	a15,[a15]@los(NvM_Prv_BlockDescriptors_acst)
.L57:
	addsc.a	a15,a15,d15,#0
.L58:
	ld.a	a15,[a15]4
.L59:
	mov.a	a2,#0
.L60:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   450          (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16))      (inlined)
	jeq.a	a2,a15,.L5
.L61:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   451      {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   452          BlockSize_u16 = *NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16;
	ld.hu	d0,[a15]0

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   449      if ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&      (inlined)
.L5:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   450          (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16))      (inlined)
.L4:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   455      return BlockSize_u16;      (inlined)
	j	.L6

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   456  }      (inlined)
.L6:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    32          {
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    33              *NvBlockLengthPtr = NvM_Prv_GetBlockSize(BlockId);
	st.h	[a12],d0
.L28:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    34              stReturn_uo = E_OK;
	mov	d8,#0
.L3:
.L2:

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    35          }
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    36      }
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    37  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    38      return stReturn_uo;
	mov	d2,d8
.L44:
	j	.L7

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    39  }
.L7:
	ret
.L20:
	
__NvM_Rb_GetNvBlockLength_function_end:
	.size	NvM_Rb_GetNvBlockLength,__NvM_Rb_GetNvBlockLength_function_end-NvM_Rb_GetNvBlockLength
.L18:
	; End of function
	
	.calls	'NvM_Rb_GetNvBlockLength','NvM_Prv_ErrorDetection_IsBlockIdValid'
	.calls	'NvM_Rb_GetNvBlockLength','NvM_Prv_ErrorDetection_IsPtrValidForBlockLength'
	.extern	NvM_Prv_BlockDescriptors_acst
	.extern	NvM_Prv_ErrorDetection_IsPtrValidForBlockLength
	.extern	NvM_Prv_ErrorDetection_IsBlockIdValid
	.calls	'NvM_Rb_GetNvBlockLength','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L11:
	.word	13075
	.half	3
	.word	.L12
	.byte	4
.L10:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L13
.L21:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L26:
	.byte	3
	.byte	'NvM_Prv_GetBlockSize',0,3,1,189,3,21
	.word	149
	.byte	1,1
.L29:
	.byte	4
	.byte	'idBlock_uo',0,1,189,3,58
	.word	149
.L31:
	.byte	5,0,6,2,40,9,4,7
	.byte	'NVM_BLOCK_NATIVE',0,0,7
	.byte	'NVM_BLOCK_REDUNDANT',0,1,7
	.byte	'NVM_BLOCK_DATASET',0,2,0,3
	.byte	'NvM_Prv_GetBlockType',0,3,1,212,3,38
	.word	226
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,212,3,75
	.word	149
	.byte	5,0
.L19:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'NvM_Prv_GetNrNonVolatileBlocks',0,3,1,232,3,20
	.word	348
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,232,3,67
	.word	149
	.byte	5,0,8
	.byte	'void',0,9
	.word	430
	.byte	10
	.word	436
	.byte	3
	.byte	'NvM_Prv_GetRomBlockAddress',0,3,1,173,4,26
	.word	441
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,173,4,69
	.word	149
	.byte	5,0,3
	.byte	'NvM_Prv_Block_IsInRom',0,3,3,142,1,22
	.word	348
	.byte	1,1,4
	.byte	'idBlock_uo',0,3,142,1,60
	.word	149
	.byte	4
	.byte	'idxDataset_u8',0,3,142,1,78
	.word	348
	.byte	11,5,5,0,0,3
	.byte	'NvM_Prv_Block_IsWriteProtected',0,3,3,148,1,22
	.word	348
	.byte	1,1,4
	.byte	'idBlock_uo',0,3,148,1,69
	.word	149
	.byte	5,0
.L23:
	.byte	10
	.word	149
	.byte	12
	.word	171
	.byte	13
	.word	204
	.byte	5,0,12
	.word	293
	.byte	13
	.word	326
	.byte	5,0,12
	.word	365
	.byte	13
	.word	408
	.byte	5,0,12
	.word	446
	.byte	13
	.word	485
	.byte	5,0,12
	.word	507
	.byte	13
	.word	541
	.byte	13
	.word	561
	.byte	11,14
	.word	293
	.byte	13
	.word	326
	.byte	15
	.word	346
	.byte	0,5,14
	.word	365
	.byte	13
	.word	408
	.byte	15
	.word	428
	.byte	0,5,0,0,12
	.word	589
	.byte	13
	.word	632
	.byte	5,0,9
	.word	149
	.byte	10
	.word	771
	.byte	16
	.byte	'NvM_Prv_ErrorDetection_IsPtrValidForBlockLength',0,4,80,16
	.word	348
	.byte	1,1,1,1,4
	.byte	'idService_uo',0,4,80,86
	.word	348
	.byte	4
	.byte	'idBlock_uo',0,4,81,80
	.word	149
	.byte	4
	.byte	'ptrBlockLength_pcu16',0,4,82,78
	.word	776
	.byte	0,16
	.byte	'NvM_Prv_ErrorDetection_IsBlockIdValid',0,4,91,16
	.word	348
	.byte	1,1,1,1,4
	.byte	'idService_uo',0,4,91,76
	.word	348
	.byte	4
	.byte	'idBlock_uo',0,4,92,70
	.word	149
	.byte	4
	.byte	'isMultiBlockAllowed_b',0,4,93,62
	.word	348
	.byte	0,17,1,10
	.word	1032
	.byte	18
	.byte	'__codeptr',0,5,1,1
	.word	1034
	.byte	2
	.byte	'char',0,1,6,18
	.byte	'sint8',0,6,76,25
	.word	1057
	.byte	18
	.byte	'uint8',0,6,81,25
	.word	348
	.byte	18
	.byte	'uint16',0,6,91,25
	.word	149
	.byte	2
	.byte	'unsigned int',0,4,7,18
	.byte	'uint32',0,6,106,24
	.word	1108
	.byte	2
	.byte	'unsigned long long int',0,8,7,18
	.byte	'uint64',0,6,111,30
	.word	1139
	.byte	18
	.byte	'boolean',0,6,127,25
	.word	348
	.byte	18
	.byte	'StatusType',0,7,191,1,27
	.word	348
	.byte	18
	.byte	'Std_ReturnType',0,7,199,1,15
	.word	348
	.byte	19,7,206,1,9,8,20
	.byte	'vendorID',0
	.word	149
	.byte	2,2,35,0,20
	.byte	'moduleID',0
	.word	149
	.byte	2,2,35,2,20
	.byte	'sw_major_version',0
	.word	348
	.byte	1,2,35,4,20
	.byte	'sw_minor_version',0
	.word	348
	.byte	1,2,35,5,20
	.byte	'sw_patch_version',0
	.word	348
	.byte	1,2,35,6,0,18
	.byte	'Std_VersionInfoType',0,7,213,1,3
	.word	1240
	.byte	18
	.byte	'PduIdType',0,8,22,19
	.word	149
	.byte	18
	.byte	'PduLengthType',0,8,26,19
	.word	149
	.byte	6,9,113,9,4,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,18
	.byte	'TpDataStateType',0,9,118,3
	.word	1430
	.byte	18
	.byte	'Can_IdType',0,10,32,16
	.word	1108
	.byte	18
	.byte	'Can_HwHandleType',0,10,43,16
	.word	149
	.byte	19,11,93,9,8,20
	.byte	'Class',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'TIN',0
	.word	348
	.byte	1,2,35,1,20
	.byte	'ReturnAddress',0
	.word	1108
	.byte	4,2,35,4,0,18
	.byte	'OsTrapInfoType',0,11,97,3
	.word	1550
	.byte	21,68
	.word	1108
	.byte	22,16,0,19,11,154,1,9,68,20
	.byte	'store',0
	.word	1630
	.byte	68,2,35,0,0,21,68
	.word	1639
	.byte	22,0,0,18
	.byte	'Os_JumpBufType',0,11,156,1,3
	.word	1661
	.byte	18
	.byte	'Os_StackTraceType',0,11,174,1,18
	.word	1108
	.byte	19,11,175,1,9,8,20
	.byte	'sp',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'ctx',0
	.word	1108
	.byte	4,2,35,4,0,18
	.byte	'Os_StackValueType',0,11,175,1,63
	.word	1721
	.byte	18
	.byte	'Os_StackSizeType',0,11,176,1,27
	.word	1721
	.byte	23,1,1,10
	.word	1806
	.byte	18
	.byte	'Os_VoidVoidFunctionType',0,11,179,1,16
	.word	1809
	.byte	18
	.byte	'ApplicationType',0,11,193,1,23
	.word	348
	.byte	24
	.byte	'Os_ApplicationConfigurationType_s',0,11,198,1,16,2,20
	.byte	'app_id',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,1,0,18
	.byte	'Os_ApplicationConfigurationType',0,11,201,1,3
	.word	1872
	.byte	18
	.byte	'Os_CoreStateType',0,11,203,1,16
	.word	1108
	.byte	18
	.byte	'AreaIdType',0,11,204,1,16
	.word	149
	.byte	18
	.byte	'Os_PeripheralAddressType',0,11,212,1,22
	.word	1108
	.byte	18
	.byte	'TickType',0,11,221,1,22
	.word	1108
	.byte	18
	.byte	'Os_StopwatchTickType',0,11,225,1,22
	.word	1108
	.byte	10
	.word	1108
	.byte	18
	.byte	'Os_Lockable',0,11,234,1,18
	.word	2114
	.byte	18
	.byte	'CoreIdType',0,11,236,1,16
	.word	149
	.byte	18
	.byte	'SpinlockIdType',0,11,237,1,16
	.word	149
	.byte	6,11,239,1,9,4,7
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,7
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,18
	.byte	'TryToGetSpinlockType',0,11,239,1,74
	.word	2184
	.byte	6,11,174,2,9,4,7
	.byte	'APPLICATION_ACCESSIBLE',0,0,7
	.byte	'APPLICATION_RESTARTING',0,1,7
	.byte	'APPLICATION_TERMINATED',0,2,0,18
	.byte	'ApplicationStateType',0,11,174,2,92
	.word	2277
	.byte	10
	.word	430
	.byte	25,1,1,26
	.word	348
	.byte	26
	.word	2389
	.byte	0,10
	.word	2394
	.byte	18
	.byte	'Os_FunctionEntryType',0,11,183,2,16
	.word	2408
	.byte	24
	.byte	'Os_MeterInfoType_s',0,11,193,2,16,48,20
	.byte	'elapsed',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'previous',0
	.word	1108
	.byte	4,2,35,4,20
	.byte	'max',0
	.word	1108
	.byte	4,2,35,8,20
	.byte	'cumulative',0
	.word	1108
	.byte	4,2,35,12,20
	.byte	'stackbase',0
	.word	1721
	.byte	8,2,35,16,20
	.byte	'stackusage',0
	.word	1721
	.byte	8,2,35,24,20
	.byte	'stackmax',0
	.word	1721
	.byte	8,2,35,32,20
	.byte	'stackbudget',0
	.word	1721
	.byte	8,2,35,40,0,18
	.byte	'Os_MeterInfoType',0,11,202,2,3
	.word	2443
	.byte	10
	.word	2443
	.byte	18
	.byte	'Os_MeterInfoRefType',0,11,203,2,50
	.word	2641
	.byte	18
	.byte	'EventMaskType',0,11,206,2,15
	.word	348
	.byte	18
	.byte	'Os_imaskType',0,11,211,2,16
	.word	1108
	.byte	24
	.byte	'Os_ISRDynType_s',0,11,213,2,16,48,20
	.byte	'meter',0
	.word	2443
	.byte	48,2,35,0,0,18
	.byte	'Os_ISRDynType',0,11,215,2,3
	.word	2720
	.byte	10
	.word	2720
	.byte	9
	.word	2781
	.byte	24
	.byte	'Os_ISRType_s',0,11,216,2,16,24,20
	.byte	'entry_function',0
	.word	1814
	.byte	4,2,35,0,20
	.byte	'dynamic',0
	.word	2786
	.byte	4,2,35,4,20
	.byte	'imask',0
	.word	1108
	.byte	4,2,35,8,20
	.byte	'stackbudget',0
	.word	1721
	.byte	8,2,35,12,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,20,20
	.byte	'application',0
	.word	348
	.byte	1,2,35,21,0,18
	.byte	'Os_ISRType',0,11,223,2,3
	.word	2791
	.byte	10
	.word	1806
	.byte	9
	.word	2791
	.byte	10
	.word	2950
	.byte	18
	.byte	'ISRType',0,11,224,2,46
	.word	2955
	.byte	18
	.byte	'Os_bitmask',0,11,239,2,22
	.word	1108
	.byte	18
	.byte	'Os_pset0Type',0,11,240,2,20
	.word	1108
	.byte	18
	.byte	'Os_pset1Type',0,11,241,2,20
	.word	1108
	.byte	18
	.byte	'Os_pset2Type',0,11,242,2,20
	.word	1108
	.byte	27,11,243,2,9,4,20
	.byte	'p0',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'p1',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'p2',0
	.word	1108
	.byte	4,2,35,0,0,18
	.byte	'Os_psetType',0,11,247,2,3
	.word	3063
	.byte	27,11,249,2,9,4,20
	.byte	't0',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	't1',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	't2',0
	.word	1108
	.byte	4,2,35,0,0,18
	.byte	'Os_tpmaskType',0,11,253,2,3
	.word	3127
	.byte	18
	.byte	'Os_ActivationCountType',0,11,254,2,23
	.word	348
	.byte	24
	.byte	'Os_TaskDynType_s',0,11,128,3,16,120,20
	.byte	'terminate_jump_buf',0
	.word	1670
	.byte	68,2,35,0,20
	.byte	'meter',0
	.word	2443
	.byte	48,2,35,68,20
	.byte	'activation_count',0
	.word	348
	.byte	1,2,35,116,0,18
	.byte	'Os_TaskDynType',0,11,132,3,3
	.word	3225
	.byte	21,68
	.word	1639
	.byte	22,0,0,10
	.word	3225
	.byte	9
	.word	3351
	.byte	24
	.byte	'Os_TaskType_s',0,11,134,3,16,40,20
	.byte	'dynamic',0
	.word	3356
	.byte	4,2,35,0,20
	.byte	'entry_function',0
	.word	1814
	.byte	4,2,35,4,20
	.byte	'pset',0
	.word	3063
	.byte	4,2,35,8,20
	.byte	'base_tpmask',0
	.word	3127
	.byte	4,2,35,12,20
	.byte	'tpmask',0
	.word	3127
	.byte	4,2,35,16,20
	.byte	'core_id',0
	.word	149
	.byte	2,2,35,20,20
	.byte	'index',0
	.word	1108
	.byte	4,2,35,24,20
	.byte	'stackbudget',0
	.word	1721
	.byte	8,2,35,28,20
	.byte	'activation_count',0
	.word	348
	.byte	1,2,35,36,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,37,20
	.byte	'application',0
	.word	348
	.byte	1,2,35,38,0,18
	.byte	'Os_TaskType',0,11,146,3,3
	.word	3361
	.byte	9
	.word	3361
	.byte	10
	.word	3611
	.byte	18
	.byte	'TaskType',0,11,147,3,47
	.word	3616
	.byte	28
	.byte	'Os_TaskStateType',0,11,155,3,6,4,7
	.byte	'SUSPENDED',0,0,7
	.byte	'READY',0,1,7
	.byte	'WAITING',0,2,7
	.byte	'RUNNING',0,3,0,18
	.byte	'TaskStateType',0,11,156,3,31
	.word	3639
	.byte	27,11,167,3,3,4,20
	.byte	'tpmask',0
	.word	3127
	.byte	4,2,35,0,0,24
	.byte	'Os_ResourceDynType_s',0,11,166,3,16,4,20
	.byte	'saved_priority',0
	.word	3726
	.byte	4,2,35,0,0,18
	.byte	'Os_ResourceDynType',0,11,170,3,3
	.word	3749
	.byte	10
	.word	3749
	.byte	9
	.word	3829
	.byte	24
	.byte	'Os_ResourceType_s',0,11,171,3,16,12,20
	.byte	'dynamic',0
	.word	3834
	.byte	4,2,35,0,20
	.byte	'tpmask',0
	.word	3127
	.byte	4,2,35,4,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,8,0,18
	.byte	'Os_ResourceType',0,11,175,3,3
	.word	3839
	.byte	19,11,181,3,9,12,20
	.byte	'maxallowedvalue',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'ticksperbase',0
	.word	1108
	.byte	4,2,35,4,20
	.byte	'mincycle',0
	.word	1108
	.byte	4,2,35,8,0,18
	.byte	'AlarmBaseType',0,11,185,3,3
	.word	3938
	.byte	19,11,206,3,9,8,20
	.byte	'Running',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'Pending',0
	.word	348
	.byte	1,2,35,1,20
	.byte	'Delay',0
	.word	1108
	.byte	4,2,35,4,0,18
	.byte	'Os_CounterStatusType',0,11,210,3,3
	.word	4033
	.byte	29
	.word	348
	.byte	1,1,10
	.word	4119
	.byte	18
	.byte	'Os_CounterIncrAdvType',0,11,217,3,22
	.word	4126
	.byte	24
	.byte	's_swd',0,11,222,3,12,4,20
	.byte	'count',0
	.word	1108
	.byte	4,2,35,0,0,27,11,221,3,3,4,20
	.byte	'sw',0
	.word	4162
	.byte	4,2,35,0,0,24
	.byte	'Os_CounterDynType_s',0,11,220,3,16,4,20
	.byte	'type_dependent',0
	.word	4190
	.byte	4,2,35,0,0,18
	.byte	'Os_CounterDynType',0,11,226,3,3
	.word	4209
	.byte	10
	.word	4209
	.byte	9
	.word	4287
	.byte	24
	.byte	'Os_CounterType_s',0,11,227,3,16,28,20
	.byte	'dynamic',0
	.word	4292
	.byte	4,2,35,0,20
	.byte	'advincr',0
	.word	4131
	.byte	4,2,35,4,20
	.byte	'base',0
	.word	3938
	.byte	12,2,35,8,20
	.byte	'core',0
	.word	2389
	.byte	4,2,35,20,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,24,20
	.byte	'application',0
	.word	348
	.byte	1,2,35,25,0,18
	.byte	'Os_CounterType',0,11,234,3,3
	.word	4297
	.byte	10
	.word	4119
	.byte	9
	.word	4297
	.byte	10
	.word	4449
	.byte	18
	.byte	'CounterType',0,11,235,3,52
	.word	4454
	.byte	28
	.byte	'Os_ScheduleTableStatusType',0,11,240,3,6,4,7
	.byte	'SCHEDULETABLE_STOPPED',0,0,7
	.byte	'SCHEDULETABLE_NEXT',0,1,7
	.byte	'SCHEDULETABLE_WAITING',0,2,7
	.byte	'SCHEDULETABLE_RUNNING',0,3,7
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,18
	.byte	'ScheduleTableStatusType',0,11,241,3,41
	.word	4480
	.byte	9
	.word	.L45-.L11
	.byte	10
	.word	4680
	.byte	18
	.byte	'ScheduleTableType',0,11,128,4,58
	.word	4685
	.byte	24
	.byte	'Os_ScheduleTableDynType_s',0,11,130,4,16,16,20
	.byte	'match',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'next',0
	.word	4690
	.byte	4,2,35,4,20
	.byte	'state',0
	.word	4480
	.byte	4,2,35,8,20
	.byte	'config',0
	.word	149
	.byte	2,2,35,12,0,10
	.word	4717
	.byte	9
	.word	4810
.L45:
	.byte	24
	.byte	'Os_ScheduleTableType_s',0,11,247,3,16,16,20
	.byte	'dynamic',0
	.word	4815
	.byte	4,2,35,0,20
	.byte	'counter',0
	.word	4459
	.byte	4,2,35,4,20
	.byte	'repeat',0
	.word	348
	.byte	1,2,35,8,20
	.byte	'config',0
	.word	149
	.byte	2,2,35,10,20
	.byte	'initial',0
	.word	348
	.byte	1,2,35,12,20
	.byte	'access',0
	.word	348
	.byte	1,2,35,13,20
	.byte	'application',0
	.word	348
	.byte	1,2,35,14,0,18
	.byte	'Os_ScheduleTableType',0,11,255,3,3
	.word	4820
	.byte	9
	.word	4820
	.byte	10
	.word	5000
	.byte	9
	.word	4297
	.byte	10
	.word	5010
	.byte	30
	.word	2119
	.byte	30
	.word	3063
	.byte	30
	.word	2960
	.byte	30
	.word	3621
	.byte	30
	.word	3127
	.byte	30
	.word	348
	.byte	30
	.word	3621
	.byte	24
	.byte	'Os_ControlledCoreType_s',0,11,251,6,16,112,20
	.byte	'TrapInfo',0
	.word	1550
	.byte	8,2,35,0,20
	.byte	'lock_taskaccess',0
	.word	5020
	.byte	4,2,35,8,20
	.byte	'ReadyTasks',0
	.word	5025
	.byte	4,2,35,12,20
	.byte	'RunningISR',0
	.word	5030
	.byte	4,2,35,16,20
	.byte	'RunningTask',0
	.word	5035
	.byte	4,2,35,20,20
	.byte	'RunningTPMask',0
	.word	5040
	.byte	4,2,35,24,20
	.byte	'CurrentMeteredObject',0
	.word	2646
	.byte	4,2,35,28,20
	.byte	'IdleMeter',0
	.word	2443
	.byte	48,2,35,32,20
	.byte	'AppAccess',0
	.word	348
	.byte	1,2,35,80,20
	.byte	'AppOverride',0
	.word	5045
	.byte	1,2,35,81,20
	.byte	'GetStackValueAdjust',0
	.word	1721
	.byte	8,2,35,84,20
	.byte	'InErrorHook',0
	.word	348
	.byte	1,2,35,92,20
	.byte	'ChainTaskRef',0
	.word	5050
	.byte	4,2,35,96,20
	.byte	'GetStackUsageAdjust',0
	.word	1721
	.byte	8,2,35,100,20
	.byte	'InProtectionHook',0
	.word	348
	.byte	1,2,35,108,20
	.byte	'CoreIsActive',0
	.word	348
	.byte	1,2,35,109,20
	.byte	'InShutdownHook',0
	.word	348
	.byte	1,2,35,110,0,18
	.byte	'Os_ControlledCoreType',0,11,141,7,3
	.word	5055
	.byte	10
	.word	1108
	.byte	9
	.word	2791
	.byte	10
	.word	5511
	.byte	9
	.word	3361
	.byte	10
	.word	5521
	.byte	10
	.word	2443
	.byte	24
	.byte	'Os_AnyCoreType_s',0,11,151,7,16,96,20
	.byte	'DisableAllImask',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'SuspendAllImask',0
	.word	1108
	.byte	4,2,35,4,20
	.byte	'SuspendOSImask',0
	.word	1108
	.byte	4,2,35,8,20
	.byte	'DisableAllCount',0
	.word	1108
	.byte	4,2,35,12,20
	.byte	'SuspendAllCount',0
	.word	1108
	.byte	4,2,35,16,20
	.byte	'SuspendOSCount',0
	.word	1108
	.byte	4,2,35,20,20
	.byte	'RestartJumpBuf',0
	.word	1670
	.byte	68,2,35,24,20
	.byte	'Restartable',0
	.word	348
	.byte	1,2,35,92,0,18
	.byte	'Os_AnyCoreType',0,11,160,7,3
	.word	5536
	.byte	18
	.byte	'Can_TxObjPriorityClassType',0,12,219,3,16
	.word	1108
	.byte	24
	.byte	'Can_TxHwObjectConfigType',0,12,231,3,16,8,20
	.byte	'MsgObjId',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'HwControllerId',0
	.word	348
	.byte	1,2,35,1,20
	.byte	'TxObjPriorityClass',0
	.word	1108
	.byte	4,2,35,4,0,18
	.byte	'Can_TxHwObjectConfigType',0,12,252,3,3
	.word	5813
	.byte	24
	.byte	'Can_RxHwObjectConfigType',0,12,129,4,16,12,20
	.byte	'MaskRef',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'MsgId',0
	.word	1108
	.byte	4,2,35,4,20
	.byte	'MsgObjId',0
	.word	348
	.byte	1,2,35,8,20
	.byte	'HwControllerId',0
	.word	348
	.byte	1,2,35,9,0,18
	.byte	'Can_RxHwObjectConfigType',0,12,147,4,3
	.word	5949
	.byte	21,4
	.word	348
	.byte	22,3,0,24
	.byte	'Can_ControllerMOMapConfigType',0,12,181,4,16,4,20
	.byte	'ControllerMOMap',0
	.word	6089
	.byte	4,2,35,0,0,18
	.byte	'Can_ControllerMOMapConfigType',0,12,184,4,3
	.word	6098
	.byte	24
	.byte	'Can_NPCRValueType',0,12,188,4,16,2,20
	.byte	'Can_NPCRValue',0
	.word	149
	.byte	2,2,35,0,0,18
	.byte	'Can_NPCRValueType',0,12,191,4,3
	.word	6199
	.byte	24
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,194,4,16,8,20
	.byte	'CanControllerBaudrate',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'CanControllerBaudrateCfg',0
	.word	149
	.byte	2,2,35,4,0,18
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,198,4,3
	.word	6274
	.byte	9
	.word	6274
	.byte	10
	.word	6439
	.byte	24
	.byte	'Can_BaudrateConfigPtrType',0,12,201,4,16,4,20
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6444
	.byte	4,2,35,0,0,18
	.byte	'Can_BaudrateConfigPtrType',0,12,204,4,3
	.word	6449
	.byte	24
	.byte	'Can_EventHandlingType',0,12,226,4,16,4,20
	.byte	'CanEventType',0
	.word	6089
	.byte	4,2,35,0,0,18
	.byte	'Can_EventHandlingType',0,12,229,4,3
	.word	6549
	.byte	18
	.byte	'Rte_TransformerErrorCode',0,13,130,1,15
	.word	348
	.byte	18
	.byte	'Rte_TransformerClass',0,13,131,1,15
	.word	348
	.byte	19,13,168,1,9,12,20
	.byte	'in',0
	.word	2389
	.byte	4,2,35,0,20
	.byte	'out',0
	.word	2389
	.byte	4,2,35,4,20
	.byte	'used',0
	.word	149
	.byte	2,2,35,8,20
	.byte	'lost_data',0
	.word	348
	.byte	1,2,35,10,0,18
	.byte	'Rte_QDynType',0,13,173,1,3
	.word	6695
	.byte	6,13,175,1,9,4,7
	.byte	'RTE_DRA',0,0,7
	.byte	'RTE_WOWP',0,1,7
	.byte	'RTE_TASK',0,2,7
	.byte	'RTE_ARE',0,3,7
	.byte	'RTE_EV',0,4,7
	.byte	'RTE_MSI',0,5,0,18
	.byte	'Rte_NotificationType',0,13,182,1,3
	.word	6782
	.byte	10
	.word	6695
	.byte	24
	.byte	'Rte_QCmnType',0,13,184,1,16,24,20
	.byte	'dynamic',0
	.word	6880
	.byte	4,2,35,0,20
	.byte	'copy',0
	.word	348
	.byte	1,2,35,4,20
	.byte	'queue_size',0
	.word	149
	.byte	2,2,35,6,20
	.byte	'element_size',0
	.word	149
	.byte	2,2,35,8,20
	.byte	'buffer_start',0
	.word	2389
	.byte	4,2,35,12,20
	.byte	'buffer_end',0
	.word	2389
	.byte	4,2,35,16,20
	.byte	'notification_type',0
	.word	6782
	.byte	4,2,35,20,0,18
	.byte	'Rte_QCmnType',0,13,192,1,3
	.word	6885
	.byte	18
	.byte	'Rte_AlarmRefType',0,13,224,1,32
	.word	1108
	.byte	18
	.byte	'Rte_AlarmIndexType',0,13,226,1,32
	.word	149
	.byte	21,128,8
	.word	348
	.byte	22,255,7,0,18
	.byte	'Impl_NVM_DstPtrType_1024',0,14,50,15
	.word	7123
	.byte	18
	.byte	'CanIf_u32_impl',0,14,69,16
	.word	1108
	.byte	18
	.byte	'CanIf_u16_impl',0,14,71,16
	.word	149
	.byte	18
	.byte	'CanIf_u8_impl',0,14,73,15
	.word	348
	.byte	18
	.byte	'CanIf_ControllerModeType_Enum_impl',0,14,88,15
	.word	348
	.byte	18
	.byte	'CanIf_PduModeType_Enum_impl',0,14,90,15
	.word	348
	.byte	19,14,92,9,2,20
	.byte	'DeviceMode',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'ChannelMode',0
	.word	348
	.byte	1,2,35,1,0,18
	.byte	'CanIf_ControllerStateType_struct_impl',0,14,95,3
	.word	7314
	.byte	18
	.byte	'CanIf_NotifStatusType_Enum_impl',0,14,100,15
	.word	348
	.byte	18
	.byte	'CanSM_boolean_Impl',0,14,120,15
	.word	348
	.byte	18
	.byte	'CanSM_u8_Impl',0,14,123,15
	.word	348
	.byte	18
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,14,128,1,15
	.word	348
	.byte	18
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,14,132,1,15
	.word	348
	.byte	18
	.byte	'CanSM_u16_Impl',0,14,136,1,16
	.word	149
	.byte	18
	.byte	'CanSM_TimerStateType_Enum_impl',0,14,138,1,15
	.word	348
	.byte	19,14,140,1,9,4,20
	.byte	'cntTick_u16',0
	.word	149
	.byte	2,2,35,0,20
	.byte	'stTimer',0
	.word	348
	.byte	1,2,35,2,0,18
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,14,143,1,3
	.word	7655
	.byte	18
	.byte	'Com_impl_u16',0,14,154,1,16
	.word	149
	.byte	18
	.byte	'Com_impl_u8',0,14,157,1,15
	.word	348
	.byte	18
	.byte	'ComM_uint32_Impl',0,14,173,1,16
	.word	1108
	.byte	18
	.byte	'ComM_uint16_Impl',0,14,175,1,16
	.word	149
	.byte	18
	.byte	'ComM_uint8_Impl',0,14,177,1,15
	.word	348
	.byte	18
	.byte	'ComM_bool_Impl',0,14,179,1,15
	.word	348
	.byte	19,14,181,1,9,24,20
	.byte	'ChannelState_e',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'LightTimeoutCtr_u32',0
	.word	1108
	.byte	4,2,35,4,20
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	149
	.byte	2,2,35,8,20
	.byte	'ChannelMode_u8',0
	.word	348
	.byte	1,2,35,10,20
	.byte	'BusSmMode_u8',0
	.word	348
	.byte	1,2,35,11,20
	.byte	'UserRequestCtr_u8',0
	.word	348
	.byte	1,2,35,12,20
	.byte	'PassiveRequestState_u8',0
	.word	348
	.byte	1,2,35,13,20
	.byte	'PncRequestCtr_u8',0
	.word	348
	.byte	1,2,35,14,20
	.byte	'InhibitionReqStatus_u8',0
	.word	348
	.byte	1,2,35,15,20
	.byte	'NmNetworkRequestStatus_b',0
	.word	348
	.byte	1,2,35,16,20
	.byte	'DiagnosticRequestState_b',0
	.word	348
	.byte	1,2,35,17,20
	.byte	'CommunicationAllowed_b',0
	.word	348
	.byte	1,2,35,18,20
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	348
	.byte	1,2,35,19,20
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	348
	.byte	1,2,35,20,20
	.byte	'NmNetworkModeStatus_b',0
	.word	348
	.byte	1,2,35,21,0,18
	.byte	'ComM_ChannelStruct_Impl',0,14,197,1,3
	.word	7887
	.byte	19,14,206,1,9,10,20
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	149
	.byte	2,2,35,0,20
	.byte	'LimitToNoComCtr_u16',0
	.word	149
	.byte	2,2,35,2,20
	.byte	'RequestedUserMode_t',0
	.word	348
	.byte	1,2,35,4,20
	.byte	'IndicatedUserMode_t',0
	.word	348
	.byte	1,2,35,5,20
	.byte	'numChannelsInFullCom_u8',0
	.word	348
	.byte	1,2,35,6,20
	.byte	'numChannelsInSilentCom_u8',0
	.word	348
	.byte	1,2,35,7,20
	.byte	'numChannelsInNoCom_u8',0
	.word	348
	.byte	1,2,35,8,0,18
	.byte	'ComM_UserStruct_Impl',0,14,214,1,3
	.word	8391
	.byte	18
	.byte	'Dcm_IOOperationResponseType',0,14,252,1,15
	.word	348
	.byte	18
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	14,138,2,15
	.word	348
	.byte	18
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,14,146,2,15
	.word	348
	.byte	18
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,14,150,2,15
	.word	348
	.byte	18
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,14,154,2,15
	.word	348
	.byte	18
	.byte	'NvM_BlockIdType',0,14,215,2,16
	.word	149
	.byte	18
	.byte	'NvM_RequestResultType',0,14,225,2,15
	.word	348
	.byte	18
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,14,243,3,34
	.word	7134
	.byte	21,128,8
	.word	348
	.byte	22,255,7,0,18
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,14,246,3,34
	.word	7134
	.byte	6,15,31,9,4,7
	.byte	'MEMIF_JOB_OK',0,0,7
	.byte	'MEMIF_JOB_FAILED',0,1,7
	.byte	'MEMIF_JOB_PENDING',0,2,7
	.byte	'MEMIF_JOB_CANCELED',0,3,7
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,7
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,18
	.byte	'MemIf_JobResultType',0,15,39,2
	.word	9265
	.byte	18
	.byte	'NvM_BlockManagementType',0,2,45,3
	.word	226
	.byte	6,2,49,9,4,7
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,7
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,7
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,7
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,7
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,7
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,7
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,18
	.byte	'NvM_Prv_Activities_ten',0,2,58,3
	.word	9455
	.byte	6,2,104,9,4,7
	.byte	'NvM_Prv_idJob_Idle_e',0,0,7
	.byte	'NvM_Prv_idJob_Read_e',0,1,7
	.byte	'NvM_Prv_idJob_Write_e',0,2,7
	.byte	'NvM_Prv_idJob_Erase_e',0,3,7
	.byte	'NvM_Prv_idJob_Restore_e',0,4,7
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,7
	.byte	'NvM_Prv_idJob_Validate_e',0,6,7
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,7
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,7
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,7
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,7
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,7
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,7
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,18
	.byte	'NvM_Prv_idJob_ten',0,2,115,3
	.word	9696
	.byte	18
	.byte	'NvM_Prv_ServiceBit_tuo',0,2,168,1,16
	.word	149
	.byte	18
	.byte	'NvM_Prv_idService_tuo',0,2,173,1,15
	.word	348
	.byte	18
	.byte	'NvM_Prv_idQueue_tuo',0,2,206,1,15
	.word	348
	.byte	19,2,210,1,9,12,20
	.byte	'idService_uo',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'idBlock_uo',0
	.word	149
	.byte	2,2,35,2,20
	.byte	'ServiceBit_uo',0
	.word	149
	.byte	2,2,35,4,20
	.byte	'BlockData_pv',0
	.word	2389
	.byte	4,2,35,8,0,18
	.byte	'NvM_Prv_QueueEntry_tst',0,2,225,1,3
	.word	10253
	.byte	10
	.word	348
	.byte	19,2,227,1,9,20,20
	.byte	'idJob_en',0
	.word	9696
	.byte	4,2,35,0,20
	.byte	'idBlock_uo',0
	.word	149
	.byte	2,2,35,4,20
	.byte	'RamBlock_pu8',0
	.word	10379
	.byte	4,2,35,8,20
	.byte	'idxDataset_u8',0
	.word	348
	.byte	1,2,35,12,20
	.byte	'Result_en',0
	.word	9265
	.byte	4,2,35,16,0,18
	.byte	'NvM_Prv_JobData_tst',0,2,240,1,3
	.word	10384
	.byte	18
	.byte	'Rte_TaskRefType',0,16,184,1,32
	.word	3621
	.byte	18
	.byte	'Rte_EventRefType',0,16,185,1,32
	.word	348
	.byte	18
	.byte	'Rte_EventType',0,16,186,1,32
	.word	1108
	.byte	18
	.byte	'Rte_REActCounterType',0,16,252,1,15
	.word	348
	.byte	10
	.word	348
	.byte	18
	.byte	'Rte_REActCounterRefType',0,16,253,1,58
	.word	10626
	.byte	19,16,255,1,9,8,20
	.byte	'task',0
	.word	10522
	.byte	4,2,35,0,20
	.byte	'acnt',0
	.word	10631
	.byte	4,2,35,4,0,18
	.byte	'Rte_REContainerType',0,16,130,2,3
	.word	10664
	.byte	9
	.word	3361
	.byte	10
	.word	10728
	.byte	10
	.word	348
	.byte	9
	.word	10664
	.byte	10
	.word	10743
	.byte	18
	.byte	'Rte_REContainerRefType',0,16,132,2,60
	.word	10748
	.byte	18
	.byte	'Rte_MSICounterType',0,16,149,2,16
	.word	149
	.byte	10
	.word	149
	.byte	18
	.byte	'Rte_MSICounterRefType',0,16,150,2,56
	.word	10813
	.byte	18
	.byte	'Rte_MSIPendingFlagType',0,16,152,2,17
	.word	348
	.byte	10
	.word	348
	.byte	18
	.byte	'Rte_MSIPendingFlagRefType',0,16,153,2,60
	.word	10881
	.byte	19,16,163,2,9,24,20
	.byte	'counter',0
	.word	10818
	.byte	4,2,35,0,20
	.byte	'incCounter',0
	.word	348
	.byte	1,2,35,4,20
	.byte	'pending',0
	.word	10886
	.byte	4,2,35,8,20
	.byte	'osTask',0
	.word	10522
	.byte	4,2,35,12,20
	.byte	'acnt',0
	.word	10631
	.byte	4,2,35,16,20
	.byte	'osEvent',0
	.word	348
	.byte	1,2,35,20,20
	.byte	'MSIInit',0
	.word	149
	.byte	2,2,35,22,0,18
	.byte	'Rte_MSITableEntry',0,16,172,2,3
	.word	10921
	.byte	10
	.word	149
	.byte	10
	.word	348
	.byte	18
	.byte	'Rte_TaskArrayIndex',0,16,179,2,16
	.word	348
	.byte	18
	.byte	'Rte_NrWaitingTasks',0,16,180,2,16
	.word	348
	.byte	19,16,182,2,9,4,20
	.byte	'pending',0
	.word	348
	.byte	1,2,35,0,20
	.byte	'count',0
	.word	348
	.byte	1,2,35,1,20
	.byte	'firstWaitingTask',0
	.word	348
	.byte	1,2,35,2,0,18
	.byte	'Rte_WaitableDatum',0,16,186,2,3
	.word	11139
	.byte	10
	.word	11139
	.byte	19,16,226,2,9,12,20
	.byte	'event_id',0
	.word	1108
	.byte	4,2,35,0,20
	.byte	'wd',0
	.word	11231
	.byte	4,2,35,4,20
	.byte	'timeout',0
	.word	1108
	.byte	4,2,35,8,0,18
	.byte	'Rte_WOWP_NotificationType',0,16,230,2,3
	.word	11236
	.byte	9
	.word	11236
	.byte	10
	.word	11325
	.byte	18
	.byte	'Rte_WOWP_NotificationRefType',0,16,232,2,66
	.word	11330
	.byte	18
	.byte	'Rte_ARE_NotificationType',0,16,234,2,29
	.word	10664
	.byte	24
	.byte	'Rte_QTaskType',0,16,243,2,16,28,20
	.byte	'cmn',0
	.word	6885
	.byte	24,2,35,0,20
	.byte	'task',0
	.word	10522
	.byte	4,2,35,24,0,18
	.byte	'Rte_QTaskType',0,16,246,2,3
	.word	11407
	.byte	24
	.byte	'Rte_QREType',0,16,250,2,16,28,20
	.byte	'cmn',0
	.word	6885
	.byte	24,2,35,0,20
	.byte	're',0
	.word	10753
	.byte	4,2,35,24,0,18
	.byte	'Rte_QREType',0,16,253,2,3
	.word	11478
	.byte	9
	.word	10664
	.byte	10
	.word	11543
	.byte	24
	.byte	'Rte_QWWPType',0,16,129,3,16,28,20
	.byte	'cmn',0
	.word	6885
	.byte	24,2,35,0,20
	.byte	'wwp',0
	.word	11335
	.byte	4,2,35,24,0,18
	.byte	'Rte_QWWPType',0,16,132,3,3
	.word	11553
	.byte	9
	.word	11236
	.byte	10
	.word	11621
	.byte	24
	.byte	'Rte_QEvType',0,16,136,3,16,36,20
	.byte	'cmn',0
	.word	6885
	.byte	24,2,35,0,20
	.byte	'task',0
	.word	10522
	.byte	4,2,35,24,20
	.byte	'mask',0
	.word	348
	.byte	1,2,35,28,20
	.byte	'acnt',0
	.word	10631
	.byte	4,2,35,32,0,18
	.byte	'Rte_QEvType',0,16,141,3,3
	.word	11631
	.byte	24
	.byte	'Rte_QMSIType',0,16,145,3,16,48,20
	.byte	'cmn',0
	.word	6885
	.byte	24,2,35,0,20
	.byte	'task',0
	.word	10522
	.byte	4,2,35,24,20
	.byte	'mask',0
	.word	348
	.byte	1,2,35,28,20
	.byte	'acnt',0
	.word	10631
	.byte	4,2,35,32,20
	.byte	'msiCounter',0
	.word	10818
	.byte	4,2,35,36,20
	.byte	'msiPending',0
	.word	10886
	.byte	4,2,35,40,20
	.byte	'msiLimit',0
	.word	149
	.byte	2,2,35,44,0,18
	.byte	'Rte_QMSIType',0,16,153,3,3
	.word	11726
	.byte	31
	.word	348
	.byte	1,1,26
	.word	2389
	.byte	0,10
	.word	11881
	.byte	18
	.byte	'NvM_Prv_ExplicitSync_Copy_tpfct',0,1,29,26
	.word	11894
	.byte	6,1,34,9,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL',0,1,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL',0,2,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL',0,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE',0,8,7
	.byte	'NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED',0,16,7
	.byte	'NVM_PRV_BLOCK_FLAG_WRITE_ONCE',0,32,7
	.byte	'NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW',0,192,0,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM',0,128,1,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION',0,128,2,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH',0,128,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION',0,128,8,7
	.byte	'NVM_PRV_BLOCK_FLAG_RAM_INIT_UNCONDITIONAL',0,128,16,0,18
	.byte	'NvM_Prv_BlockConfiguration_ten',0,1,85,3
	.word	11939
	.byte	9
	.word	2389
	.byte	10
	.word	12502
	.byte	31
	.word	348
	.byte	1,1,26
	.word	348
	.byte	26
	.word	348
	.byte	0,10
	.word	12512
	.byte	31
	.word	348
	.byte	1,1,26
	.word	348
	.byte	0,10
	.word	12535
	.byte	10
	.word	4119
	.byte	19,1,121,9,48,20
	.byte	'idBlockMemIf_u16',0
	.word	149
	.byte	2,2,35,0,20
	.byte	'nrBlockBytes_pu16',0
	.word	776
	.byte	4,2,35,4,20
	.byte	'idxDevice_u8',0
	.word	348
	.byte	1,2,35,8,20
	.byte	'nrNvBlocks_u8',0
	.word	348
	.byte	1,2,35,9,20
	.byte	'nrRomBlocks_u8',0
	.word	348
	.byte	1,2,35,10,20
	.byte	'adrRamBlock_ppv',0
	.word	12507
	.byte	4,2,35,12,20
	.byte	'adrRomBlock_pcv',0
	.word	441
	.byte	4,2,35,16,20
	.byte	'SingleBlockCallback_pfct',0
	.word	12530
	.byte	4,2,35,20,20
	.byte	'SingleBlockStartCallback_pfct',0
	.word	12548
	.byte	4,2,35,24,20
	.byte	'InitBlockCallback_pfct',0
	.word	12553
	.byte	4,2,35,28,20
	.byte	'ReadRamBlockFromNvm_pfct',0
	.word	11894
	.byte	4,2,35,32,20
	.byte	'WriteRamBlockToNvm_pfct',0
	.word	11894
	.byte	4,2,35,36,20
	.byte	'BlockManagementType_en',0
	.word	226
	.byte	4,2,35,40,20
	.byte	'JobPriority_u8',0
	.word	348
	.byte	1,2,35,44,20
	.byte	'stFlags_u16',0
	.word	149
	.byte	2,2,35,46,0,18
	.byte	'NvM_Prv_BlockDescriptor_tst',0,1,138,2,3
	.word	12558
	.byte	21,160,5
	.word	12558
	.byte	22,13,0,9
	.word	13022
	.byte	32
	.byte	'NvM_Prv_BlockDescriptors_acst',0,1,169,2,45
	.word	13032
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L12:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,4,1,58,15,59,15,57,15,11
	.byte	15,0,0,7,40,0,3,8,28,13,0,0,8,59,0,3,8,0,0,9,38,0,73,19,0,0,10,15,0,73,19,0,0,11,11,1,0,0,12,46,1,49,19
	.byte	0,0,13,5,0,49,19,0,0,14,29,1,49,19,0,0,15,11,0,49,19,0,0,16,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39
	.byte	12,63,12,60,12,0,0,17,21,0,54,15,0,0,18,22,0,3,8,58,15,59,15,57,15,73,19,0,0,19,19,1,58,15,59,15,57,15
	.byte	11,15,0,0,20,13,0,3,8,73,19,11,15,56,9,0,0,21,1,1,11,15,73,19,0,0,22,33,0,47,15,0,0,23,21,0,54,15,39,12
	.byte	0,0,24,19,1,3,8,58,15,59,15,57,15,11,15,0,0,25,21,1,54,15,39,12,0,0,26,5,0,73,19,0,0,27,23,1,58,15,59
	.byte	15,57,15,11,15,0,0,28,4,1,3,8,58,15,59,15,57,15,11,15,0,0,29,21,0,73,19,54,15,39,12,0,0,30,53,0,73,19
	.byte	0,0,31,21,1,73,19,54,15,39,12,0,0,32,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L13:
	.word	.L47-.L46
.L46:
	.half	3
	.word	.L49-.L48
.L48:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockDescriptor.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockData.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_ErrorDetection.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0,0
.L49:
.L47:
	.sdecl	'.debug_info',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_info'
.L14:
	.word	350
	.half	3
	.word	.L15
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L17,.L16
	.byte	2
	.word	.L10
	.byte	3
	.byte	'NvM_Rb_GetNvBlockLength',0,1,21,16
	.word	.L19
	.byte	1,1,1
	.word	.L9,.L20,.L8
	.byte	4
	.byte	'BlockId',0,1,21,56
	.word	.L21,.L22
	.byte	4
	.byte	'NvBlockLengthPtr',0,1,21,73
	.word	.L23,.L24
	.byte	5
	.word	.L9,.L20
	.byte	6
	.byte	'stReturn_uo',0,1,25,20
	.word	.L19,.L25
	.byte	7
	.word	.L26,.L27,.L28
	.byte	8
	.word	.L29,.L30
	.byte	9
	.word	.L31,.L27,.L28
	.byte	6
	.byte	'BlockSize_u16',0,2,191,3,12
	.word	.L21,.L32
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_abbrev'
.L15:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_line'
.L16:
	.word	.L51-.L50
.L50:
	.half	3
	.word	.L53-.L52
.L52:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Rb_GetNvBlockLength.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockDescriptor.h',0,0,0,0,0
.L53:
	.byte	5,16,7,0,5,2
	.word	.L9
	.byte	3,20,1,5,32,9
	.half	.L37-.L9
	.byte	3,4,1,5,47,9
	.half	.L38-.L37
	.byte	3,2,1,5,95,9
	.half	.L33-.L38
	.byte	1,5,5,9
	.half	.L34-.L33
	.byte	1,5,61,7,9
	.half	.L54-.L34
	.byte	3,2,1,9
	.half	.L55-.L54
	.byte	3,2,1,5,9,9
	.half	.L41-.L55
	.byte	3,126,1,4,2,5,26,7,9
	.half	.L27-.L41
	.byte	3,162,3,1,5,9,9
	.half	.L43-.L27
	.byte	3,2,1,5,51,7,9
	.half	.L56-.L43
	.byte	3,1,1,5,22,9
	.half	.L36-.L56
	.byte	1,5,51,9
	.half	.L57-.L36
	.byte	1,5,63,9
	.half	.L58-.L57
	.byte	1,5,10,9
	.half	.L59-.L58
	.byte	1,5,19,9
	.half	.L60-.L59
	.byte	1,5,25,7,9
	.half	.L61-.L60
	.byte	3,2,1,5,5,9
	.half	.L4-.L61
	.byte	3,3,1,4,1,5,31,9
	.half	.L6-.L4
	.byte	3,218,124,1,5,25,9
	.half	.L28-.L6
	.byte	3,1,1,5,5,9
	.half	.L2-.L28
	.byte	3,4,1,5,1,9
	.half	.L7-.L2
	.byte	3,1,1,7,9
	.half	.L18-.L7
	.byte	0,1,1
.L51:
	.sdecl	'.debug_ranges',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_ranges'
.L17:
	.word	-1,.L9,0,.L18-.L9,0,0
	.sdecl	'.debug_loc',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L9,0,.L33-.L9
	.half	1
	.byte	84
	.word	.L35-.L9,.L36-.L9
	.half	1
	.byte	95
	.word	.L39-.L9,.L34-.L9
	.half	1
	.byte	85
	.word	.L40-.L9,.L41-.L9
	.half	1
	.byte	85
	.word	0,0
.L32:
	.word	-1,.L9,.L43-.L9,.L2-.L9
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L24:
	.word	-1,.L9,0,.L34-.L9
	.half	1
	.byte	100
	.word	.L37-.L9,.L20-.L9
	.half	1
	.byte	108
	.word	.L42-.L9,.L41-.L9
	.half	1
	.byte	100
	.word	0,0
.L8:
	.word	-1,.L9,0,.L20-.L9
	.half	2
	.byte	138,0
	.word	0,0
.L30:
	.word	0,0
.L25:
	.word	-1,.L9,.L38-.L9,.L20-.L9
	.half	1
	.byte	88
	.word	.L44-.L9,.L20-.L9
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L62:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('NvM_Rb_GetNvBlockLength')
	.sect	'.debug_frame'
	.word	12
	.word	.L62,.L9,.L20-.L9

; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    40  
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    41  #define NVM_STOP_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Rb_GetNvBlockLength.c	    42  #include "NvM_MemMap.h"

	; Module end
