	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16912a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\NvM\\NvM_Service.src BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c'

	
$TC16X
	
	.sdecl	'.text.NvM_Service.NvM_Prv_Service_Initiate',code,cluster('NvM_Prv_Service_Initiate')
	.sect	'.text.NvM_Service.NvM_Prv_Service_Initiate'
	.align	2
	
	.global	NvM_Prv_Service_Initiate

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     1  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     2  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     3   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     4   * Includes
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     6   */
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     7  #include "NvM.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     8  #include "NvM_Cfg_SchM.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	     9  #include "Rte_NvM.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    10  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    11  #include "NvM_Prv.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    12  #include "NvM_Prv_Queue.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    13  #include "NvM_Prv_Service.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    14  #include "NvM_Prv_BlockData.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    15  #include "NvM_Prv_ErrorDetection.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    16  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    17  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    18   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    19   * Inline declarations
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    20   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    21   */
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    22  LOCAL_INLINE  boolean NvM_Prv_Service_CheckPreconditions(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    23                                                           NvM_BlockIdType idBlock_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    24                                                           NvM_Prv_idService_tuo idService_uo);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    25  LOCAL_INLINE Std_ReturnType NvM_Prv_Service_CheckBlockData(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    26                                                             NvM_Prv_BlockData_tst const* BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    27                                                             NvM_Prv_Service_Configuration_tst const* ServiceConfiguration_pcst);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    28  LOCAL_INLINE Std_ReturnType NvM_Prv_Service_SetBlockData(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    29                                                           NvM_Prv_BlockData_tst const* BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    30                                                           NvM_Prv_Service_SetBlockData_tpfct SetBlockData_pfct);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    31  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    32  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    33   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    34   * Code
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    35   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    36  */
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    37  #define NVM_START_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    38  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    39  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    40  Std_ReturnType NvM_Prv_Service_Initiate(NvM_Prv_idQueue_tuo idQueue_uo,
; Function NvM_Prv_Service_Initiate
.L32:
NvM_Prv_Service_Initiate:	.type	func
	mov	d11,d4
.L118:
	mov.aa	a12,a4
.L119:
	mov.aa	a15,a5
.L51:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    41                                          NvM_Prv_BlockData_tst const* BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    42                                          NvM_Prv_Service_Configuration_tst const* ServiceConfiguration_pcst)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    43  {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    44      Std_ReturnType stReturn_uo = E_NOT_OK;
	mov	d12,#1
.L52:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    45  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    46      // check whether passed service configuration and block data are valid
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    47      if ((NULL_PTR != BlockData_pcst) &&
	mov.a	a2,#0
.L140:
	jeq.a	a2,a12,.L2
.L141:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    48          (NULL_PTR != ServiceConfiguration_pcst))
	mov.a	a2,#0
.L142:
	jeq.a	a2,a15,.L3
.L143:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    49      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    50          if (NvM_Prv_Service_CheckPreconditions(idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    51                                                 BlockData_pcst->QueueEntry_st.idBlock_uo,
	ld.hu	d8,[a12]2
.L144:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    52                                                 BlockData_pcst->QueueEntry_st.idService_uo))
	ld.bu	d9,[a12]
.L85:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    53          {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    54              boolean isCheckParameterSuccessful_b = TRUE;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    55  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    56              if (NULL_PTR != ServiceConfiguration_pcst->CheckParameter_pfct)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    57              {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    58                  isCheckParameterSuccessful_b = ServiceConfiguration_pcst->CheckParameter_pfct(BlockData_pcst);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    59              }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    60  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    61              if (isCheckParameterSuccessful_b)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    62              {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    63                  stReturn_uo = NvM_Prv_Service_CheckBlockData(idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    64                                                               BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    65                                                               ServiceConfiguration_pcst);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    66              }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    67          }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    68      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    69  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    70      return stReturn_uo;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    71  }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    72  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    73  #define NVM_STOP_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    74  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    75  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    76  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    77   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    78   * Inline code
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    79   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    80   */
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    81  LOCAL_INLINE boolean NvM_Prv_Service_CheckPreconditions(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    82                                                          NvM_BlockIdType idBlock_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    83                                                          NvM_Prv_idService_tuo idService_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    84  {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    85      boolean stReturn_b = FALSE;
	mov	d10,#0
.L120:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    86      if (NvM_Prv_ErrorDetection_IsNvmInitialized(idService_uo, idBlock_uo))
	mov	e4,d8,d9
.L117:
	call	NvM_Prv_ErrorDetection_IsNvmInitialized
.L116:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    86      if (NvM_Prv_ErrorDetection_IsNvmInitialized(idService_uo, idBlock_uo))      (inlined)
	jeq	d2,#0,.L4
.L145:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    87      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    88          if (NvM_Prv_ErrorDetection_IsBlockIdValid(idService_uo, idBlock_uo, FALSE))
	mov	d6,#0
	mov	e4,d8,d9
	call	NvM_Prv_ErrorDetection_IsBlockIdValid
.L146:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    88          if (NvM_Prv_ErrorDetection_IsBlockIdValid(idService_uo, idBlock_uo, FALSE))      (inlined)
	jeq	d2,#0,.L5
.L147:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    90              if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)      (inlined)
	jge.u	d11,#2,.L6
.L95:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     1  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     2  #ifndef NVM_PRV_BLOCKDESCRIPTOR_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     3  #define NVM_PRV_BLOCKDESCRIPTOR_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     4  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     5  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     6   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     7   * Includes
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     8   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	     9   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    10  #include "Rte_NvM_Type.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    11  #include "NvM_Types.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    12  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    13  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    15   * Defines/Macros
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    16   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    17   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    18  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    19   * Definition of the immediate job priority for a NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    20   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    21  // TRACE[ECUC_NvM_00477]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    22  #define NVM_PRV_JOB_PRIORITY_IMMEDIATE      (0u)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    23  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    24  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    25   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    26   * Type definitions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    27   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    28   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    29  typedef Std_ReturnType (*NvM_Prv_ExplicitSync_Copy_tpfct)(void* NvMBuffer_pv);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    30  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    31  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    32   * Definition of different bit masks to access different configuration flags withis block descriptors
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    33   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    34  typedef enum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    35  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    36      /// Bit mask definition to get information whether a block shall be processed during NvM_ReadAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    37      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    38      /// TRACE[NVM117_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForReadAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    39      NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL              = 0x0001,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    40      /// Bit mask definition to get information whether the block shall be processed during NvM_WriteAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    41      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    42      /// TRACE[NVM549_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForWriteAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    43      NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL             = 0x0002,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    44      /// Bit mask definition to get information whether the block shall be processed during NvM_Rb_FirstInitAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    45      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    46      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2828] Parameter NvMBlockDescriptor:NvMRbSelectBlockForFirstInitAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    47      NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL        = 0x0004,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    48      /// Bit mask definition to get information whether the block shall be initialized when a layout change is detected.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    49      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    50      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2881] Parameter NvMBlockDescriptor:NvMRbInitBlockAtLayoutChange
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    51      NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE = 0x0008,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    52      /// Bit mask definition to get information whether the block is initially write protected.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    53      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    54      /// TRACE[NVM033_Conf] Parameter NvMBlockDescriptor:NvMBlockWriteProt
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    55      NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED                  = 0x0010,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    56      /// Bit mask definition to get information whether the block shall be written only once.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    57      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    58      /// TRACE[NVM072_Conf] Parameter NvMBlockDescriptor:NvMWriteBlockOnce
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    59      NVM_PRV_BLOCK_FLAG_WRITE_ONCE                       = 0x0020,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    60      /// Bit mask definition to get information whether the block shall be resistant to block layout changes.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    61      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    62      /// TRACE[NVM483_Conf] ParameterNvMBlockDescriptor:NvMResistantToChangedSw
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    63      NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW          = 0x0040,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    64      /// Bit mask definition to get information whether the block shall use explicit synchronization mechanism.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    65      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    66      /// TRACE[NVM519_Conf] Parameter NvMBlockDescriptor:NvMBlockUseSyncMechanism
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    67      NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM               = 0x0080,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    68      /// Bit mask definition to get information whether the block shall be processed during NvM_ValidateAll.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    69      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    70      /// TRACE[NVM557_Conf] Parameter NvMBlockDescriptor:NvMBlockUseAutoValidation
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    71      NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION              = 0x0100,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    72      /// Bit mask definition to get information whether the block is using a variable block length.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    73      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    74      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    75      NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH        = 0x0200,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    76      /// Bit mask definition to get information whether the block is configured for migration.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    77      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    78      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3027] Parameter NvMBlockDescriptor:NvMRbFirstReadDataMigration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    79      NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION             = 0x0400,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    80      /// Bit mask definition to get information whether the block shall be initialized unconditionally
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    81      /// This information is stored in the NVRAM block descriptor, see NvM_Prv_BlockDescriptor_tst.stFlags_u16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    82      /// TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3175] Parameter NvMBlockDescriptor:NvMRbRamInitUnconditional
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    83      NVM_PRV_BLOCK_FLAG_RAM_INIT_UNCONDITIONAL           = 0x0800
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    84  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    85  } NvM_Prv_BlockConfiguration_ten;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    86  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    87  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    88   * Definition of the structure for common configuration options of the NvM used during the runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    89   * TRACE[NVM028_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    90   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    91  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    92  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    93      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    94       * Pointer to a callback function which shall be invoked on termination of each asynchronous multi-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    95       * TRACE[NVM468]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    96       * TRACE[NVM331]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    97       * TRACE[NVM500_Conf] Parameter NvMCommon:NvMMultiBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    98       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	    99      void (*MultiBlockCallback_pfct)(uint8 ServiceId, NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   100      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   101       * Pointer to a callback function which shall be invoked on start of each asynchronous multi-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   102       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2762] Parameter NvMCommon:NvMRbMultiBlockStartCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   103       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   104      void (*RbMultiBlockStartCallback_pfct)(uint8 ServiceId);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   105      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   106       * Pointer to a callback function which shall be invoked on termination of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   107       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2842]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   108       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2843] Parameter NvMCommon:NvMRbObserverCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   109       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   110      Std_ReturnType (*ObserverCallback_pfct)(NvM_BlockIdType BlockId,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   111                                              uint8 ServiceId,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   112                                              NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   113  } NvM_Prv_Common_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   114  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   115  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   116   * Definition of the structure for a NVRAM block descriptor.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   117   * A NVRAM block descriptor contains all information about a single NVRAM block needed during the runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   118   * The NVRAM block descriptors are condensed in the NVRAM block descriptor table.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   119   * TRACE[NVM061_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   120   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   121  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   122  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   123      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   124       * Block ID to be passed to the MemIf.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   125       * Do not confuse this ID with NVRAM block ID used within NvM.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   126       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   127      uint16 idBlockMemIf_u16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   128      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   129       * Pointer to the block legth in bytes.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   130       * If runtime calculation of block lengths is enabled by the NvM configuration then block lengths will be located
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   131       * in RAM so pointer points to a variable with block length calculated during runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   132       * Otherwise if runtime calculation is disabled by the NvM configuration then block legths will be located
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   133       * in ROM so pointer points to a constant with block length configured during compile time.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   134       * TRACE[NVM479_Conf] Parameter NvMBlockDescriptor:NvMNvBlockLength
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   135       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3028] Parameter NvMCommon:NvMRbRuntimeRamBlockConfiguration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   136       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   137       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   138  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   139      uint16* nrBlockBytes_pu16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   140  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   141      uint16 const* nrBlockBytes_pu16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   142  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   143      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   144       * Device index where the block is located (Fee / Ea).
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   145       * TRACE[NVM035_Conf] Parameter NvMBlockDescriptor:NvMNvramDeviceId
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   146       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   147      uint8 idxDevice_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   148      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   149       * Number of non-volatile blocks in a contiguous area according to the given block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   150       * TRACE[NVM480_Conf] Parameter NvMBlockDescriptor:NvMNvBlockNum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   151       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   152      uint8 nrNvBlocks_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   153      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   154       * Number of multiple ROM blocks in a contiguous area according to the given block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   155       * TRACE[NVM485_Conf] Parameter NvMBlockDescriptor:NvMRomBlockNum
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   156       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   157      uint8 nrRomBlocks_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   158      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   159       * Pointer to the permanent RAM block data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   160       * If this pointer is NULL_PTR then no permanent RAM block data has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   161       * If runtime calculation of RAM block data addresses is enabled by the NvM configuration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   162       * then RAM block data addresses will be located in RAM and pointer points to a void pointer
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   163       * calculated during runtime.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   164       * Otherwise if runtime calculation is disabled by the NvM configuration then RAM block data addresses
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   165       * will be located in ROM and pointer points to a constant void pointer configured during compile time.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   166       * TRACE[NVM126]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   167       * TRACE[NVM482_Conf] Parameter NvMBlockDescriptor:NvMRamBlockDataAddress
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   168       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3028] Parameter NvMCommon:NvMRbRuntimeRamBlockConfiguration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   169       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3086] Parameter NvMBlockDescriptor:NvMRbRamBlockDataAddressString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   170       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   171  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   172      void** adrRamBlock_ppv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   173  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   174      void* const* adrRamBlock_ppv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   175  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   176      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   177       * Pointer to the ROM block data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   178       * If this pointer is NULL_PTR then no ROM block data has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   179       * TRACE[NVM020]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   180       * TRACE[NVM484_Conf] Parameter NvMBlockDescriptor:NvMRomBlockDataAddress
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   181       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   182      void const* adrRomBlock_pcv;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   183      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   184       * Pointer to the block specific callback function which shall be invoked on termination
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   185       * of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   186       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   187       * TRACE[NVM113]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   188       * TRACE[NVM467]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   189       * TRACE[NVM330]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   190       * TRACE[NVM506_Conf] Parameter NvMBlockDescriptor:NvMSingleBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   191       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   192      Std_ReturnType (*SingleBlockCallback_pfct)(uint8 ServiceId, NvM_RequestResultType JobResult);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   193      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   194       * Pointer to the block specific callback function which shall be invoked on start
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   195       * of each asynchronous single-block request.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   196       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   197       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3056]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   198       * TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3062] Parameter NvMBlockDescriptor:NvMRbSingleBlockStartCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   199       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   200      Std_ReturnType (*SingleBlockStartCallback_pfct)(uint8 ServiceId);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   201      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   202       * Pointer to the block specific callback function which shall be invoked if no ROM block data is available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   203       * for initialization of the block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   204       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   205       * TRACE[NVM469]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   206       * TRACE[NVM352]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   207       * TRACE[NVM116_Conf] Parameter NvMBlockDescriptor:NvMInitBlockCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   208       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   209      Std_ReturnType (*InitBlockCallback_pfct)(void);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   210      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   211       * Pointer to the block specific callback function to let the application copy data from the NvM mirror
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   212       * to application's RAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   213       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   214       * TRACE[NVM540]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   215       * TRACE[NVM542]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   216       * TRACE[NVM521_Conf] Parameter NvMBlockDescriptor:NvMReadRamBlockFromNvCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   217       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   218      Std_ReturnType (*ReadRamBlockFromNvm_pfct)(void* NvMBuffer);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   219      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   220       * Pointer the block specific callback function to let the application copy data from the application's RAM block
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   221       * to the NvM mirror.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   222       * If this pointer is NULL_PTR then no callback has been configured by the user.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   223       * TRACE[NVM539]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   224       * TRACE[NVM541]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   225       * TRACE[NVM520_Conf] Parameter NvMBlockDescriptor:NvMWriteRamBlockToNvCallback
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   226       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   227      Std_ReturnType (*WriteRamBlockToNvm_pfct)(void* NvMBuffer);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   228      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   229       * Block management type.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   230       * TRACE[NVM062_Conf] Parameter NvMBlockDescriptor:NvMBlockManagementType
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   231       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   232      NvM_BlockManagementType BlockManagementType_en;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   233      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   234       * Block job priority.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   235       * TRACE[NVM477_Conf] Parameter NvMBlockDescriptor:NvMBlockJobPriority
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   236       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   237      uint8 JobPriority_u8;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   238      /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   239       * Bit-field containing several configuration parameter which can be represented by a bit.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   240       * NvM provides special bit mask to access individual bits from this bit-field:
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   241       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   242       *   TRACE[NVM117_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForReadAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   243       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   244       *   TRACE[NVM549_Conf] Parameter NvMBlockDescriptor:NvMSelectBlockForWriteAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   245       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   246       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2828] Parameter NvMBlockDescriptor:NvMRbSelectBlockForFirstInitAll
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   247       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   248       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2881] Parameter NvMBlockDescriptor:NvMRbInitBlockAtLayoutChange
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   249       * - NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   250       *   TRACE[NVM033_Conf] Parameter NvMBlockDescriptor:NvMBlockWriteProt
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   251       * - NVM_PRV_BLOCK_FLAG_WRITE_ONCE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   252       *   TRACE[NVM072_Conf] Parameter NvMBlockDescriptor:NvMWriteBlockOnce
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   253       * - NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   254       *   TRACE[NVM483_Conf] Parameter NvMBlockDescriptor:NvMResistantToChangedSw
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   255       * - NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   256       *   TRACE[NVM519_Conf] Parameter NvMBlockDescriptor:NvMBlockUseSyncMechanism
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   257       * - NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   258       *   TRACE[NVM557_Conf] Parameter NvMBlockDescriptor:NvMBlockUseAutoValidation
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   259       * - NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   260       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2996] Parameter NvMBlockDescriptor:NvMRbNvBlockLengthString
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   261       * - NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   262       *   TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3027] Parameter NvMBlockDescriptor:NvMRbFirstReadDataMigration
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   263       */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   264      uint16 stFlags_u16;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   265  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   266  } NvM_Prv_BlockDescriptor_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   267  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   268  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   269   * Definition of the structure to assign the persistent ID to the block ID for a NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   270   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   271  typedef struct
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   272  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   273      uint16          PersistentId_u16;   // Persistent Id
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   274      NvM_BlockIdType BlockId_u16;        // Block Id
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   275  } NvM_Prv_PersId_BlockId_tst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   276  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   277  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   278   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   279   * Constants
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   280   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   281   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   282  // Declaration of different configuration-dependent data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   283  // Definition of all this data is done in NvM_Cfg.c.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   284  // ------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   285  #define NVM_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   286  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   287  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   288  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   289   * Declaration of the container with all common configuration data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   290   * TRACE[NVM028_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   291   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   292  extern const NvM_Prv_Common_tst             NvM_Prv_Common_cst;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   293  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   294   * Declaration of the NVRAM block descriptor table.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   295   * TRACE[NVM061_Conf]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   296   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   297  extern const NvM_Prv_BlockDescriptor_tst    NvM_Prv_BlockDescriptors_acst[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   298  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   299   * Declaratiion of the table to get the NvM block ID using the persistent ID.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   300   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   301  extern const NvM_Prv_PersId_BlockId_tst     NvM_Prv_PersId_BlockId_acst[NVM_PRV_NR_PERSISTENT_IDS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   302  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   303   * Declaration of the table with all persistant IDs.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   304   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   305  extern const uint16                         NvM_Prv_PersIds_acu16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   306  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   307  #define NVM_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   308  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   309  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   310  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   311   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   312   * Variables
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   313   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   314   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   315  #if (NVM_PRV_RUNTIME_RAM_BLOCK_CONFIG == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   316  # define NVM_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   317  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   318  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   319  extern uint16 NvM_Prv_BlockLengths_au16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   320  extern void *NvM_Prv_RamBlockAdr_apv[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   321  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   322  # define NVM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   323  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   324  #else
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   325  # define NVM_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   326  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   327  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   328  extern uint16 const NvM_Prv_BlockLengths_acu16[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   329  extern void * const NvM_Prv_RamBlockAdr_acpv[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   330  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   331  # define NVM_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   332  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   333  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   334  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   335  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   336   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   337   * Extern declarations
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   338   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   339   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   340  #define NVM_START_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   341  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   342  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   343  // Init-related functions (defined in NvM_Cfg.c)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   344  extern void NvM_Prv_InitRamBlockProperties(void);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   345  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   346  #define NVM_STOP_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   347  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   348  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   349  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   350  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   351  * Inline functions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   352  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   353  */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   354  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   355   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   356   * This NvM private function provides information whether a block is configured for the given feature.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   357   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   358   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   359   * ID of the block for which the configuration information will be provided.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   360   * \param SelectionMask_en
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   361   * Bit mask for the configuration information to be provide.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   362   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   363   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   364   * - TRUE = block is configured for the given feature
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   365   * - FALSE = block is not configured for the given feature
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   366   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   367  LOCAL_INLINE boolean NvM_Prv_IsBlockSelected(NvM_BlockIdType idBlock_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   368                                               NvM_Prv_BlockConfiguration_ten SelectionMask_en)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   369  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   370      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   371              ((NvM_Prv_BlockDescriptors_acst[idBlock_uo].stFlags_u16 & ((uint16)SelectionMask_en)) != 0u));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   372  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   373  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   374  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   375   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   376   * This NvM private function provides the information whether default data is available for the given block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   377   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   378   * \param idBlock_uo
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   379   * ID of the block to provide the availability of the default data.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   380   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   381   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   382   * - TRUE = default data is available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   383   * - FALSE = default data is not available
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   384   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   385  LOCAL_INLINE boolean NvM_Prv_IsDefaultDataAvailable(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   386  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   387      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   388              ((NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].adrRomBlock_pcv) ||
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   389               (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].InitBlockCallback_pfct)));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   390  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   391  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   392  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   393   * \brief
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   394   * This NvM private function checks for the given block whether the configured block length is valid.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   395   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   396   * \param idBlock
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   397   * ID of the block for which the block length will be checked.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   398   *
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   399   * \return
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   400   * - TRUE = block length is valid
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   401   * - FALSE = block length is invalid
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   402   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   403  LOCAL_INLINE boolean NvM_Prv_IsBlockLengthValid(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   404  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   405      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   406              (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16) &&
	mov	d9,#0
.L148:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   405      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&      (inlined)
	jge.u	d8,#14,.L7
.L149:
	mul	d15,d8,#48
.L150:
	movh.a	a2,#@his(NvM_Prv_BlockDescriptors_acst)
	lea	a2,[a2]@los(NvM_Prv_BlockDescriptors_acst)
.L151:
	addsc.a	a2,a2,d15,#0
.L152:
	ld.a	a2,[a2]4
.L153:
	mov.a	a4,#0
.L154:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   406              (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16) &&      (inlined)
	jeq.a	a4,a2,.L8
.L155:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   407              (0u != *NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16));
	ld.hu	d15,[a2]0
.L156:
	cmov	d9,d15,#1

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   406              (NULL_PTR != NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16) &&      (inlined)
.L9:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   407              (0u != *NvM_Prv_BlockDescriptors_acst[idBlock_uo].nrBlockBytes_pu16));      (inlined)
.L8:
.L7:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   405      return ((idBlock_uo < NVM_CFG_NR_BLOCKS) &&      (inlined)
	j	.L10

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockDescriptor.h	   408  }      (inlined)
.L10:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    89          {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    90              if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    91              {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    92                  // TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-3032] Ignore blocks with length null
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    93                  boolean isBlockLengthValid_b = NvM_Prv_IsBlockLengthValid(idBlock_uo);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    94                  // TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2999] Potentially incompatible blocks after layout changes
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    95                  //                                               shall be sanitized by ReadAll at first,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    96                  //                                               then the current single block request is allowed
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    97                  //                                               to be accepted and executed
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    98                  boolean isSanitizedByReadAll_b = NvM_Prv_IsSanitizedByReadAll(idBlock_uo);
	mov	d4,d8
	call	NvM_Prv_IsSanitizedByReadAll
.L103:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   100                  if (isBlockLengthValid_b && isSanitizedByReadAll_b)      (inlined)
	jeq	d9,#0,.L11
.L104:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    99  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   100                  if (isBlockLengthValid_b && isSanitizedByReadAll_b)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   101                  {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   102                      stReturn_b = TRUE;
	seln	d10,d2,d10,#1

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   100                  if (isBlockLengthValid_b && isSanitizedByReadAll_b)      (inlined)
.L12:
.L11:
	j	.L13

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    90              if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)      (inlined)
.L6:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   103                  }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   104              }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   105              else
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   106              {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   107                  stReturn_b = TRUE;
	mov	d10,#1

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   105              else      (inlined)
.L13:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    88          if (NvM_Prv_ErrorDetection_IsBlockIdValid(idService_uo, idBlock_uo, FALSE))      (inlined)
.L5:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	    86      if (NvM_Prv_ErrorDetection_IsNvmInitialized(idService_uo, idBlock_uo))      (inlined)
.L4:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   111      return stReturn_b;      (inlined)
	j	.L14

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   112  }      (inlined)
.L14:
	jeq	d10,#0,.L15
.L53:
	mov	d2,#1
.L121:
	ld.a	a2,[a15]4
.L157:
	mov.a	a4,#0
.L158:
	jeq.a	a4,a2,.L16
.L159:
	mov.aa	a4,a12
.L122:
	calli	a2
.L16:
	jeq	d2,#0,.L17
.L65:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   108              }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   109          }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   110      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   111      return stReturn_b;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   112  }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   113  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   114  LOCAL_INLINE Std_ReturnType NvM_Prv_Service_CheckBlockData(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   115                                                             NvM_Prv_BlockData_tst const* BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   116                                                             NvM_Prv_Service_Configuration_tst const* ServiceConfiguration_pcst)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   117  {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   118      Std_ReturnType stBlockData_uo = E_NOT_OK;
	mov	d12,#1
.L80:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   119      boolean isCheckBlockDataSuccessful_b = TRUE;
	mov	d2,#1
.L106:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   120      // Variables used to report DET errors out of the scheduler lock
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   121      boolean isBlockPending_b = FALSE;
	mov	d8,#0
.L107:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   122  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   123      NvM_BlockIdType idBlockForPendingCheck_uo = BlockData_pcst->QueueEntry_st.idBlock_uo;
	ld.hu	d9,[a12]2
.L124:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   124  #if (NVM_RB_AUX_INTERFACE == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   125      if (NvM_Prv_idQueue_Aux_e == idQueue_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   126      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   127          idBlockForPendingCheck_uo = NVM_PRV_AUX_ADMIN_BLOCK;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   128      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   129  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   130  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   131      SchM_Enter_NvM_Main();
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   132  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   133      if (NULL_PTR != ServiceConfiguration_pcst->CheckBlockData_pfct)
	ld.a	a2,[a15]8
.L160:
	mov.a	a4,#0
.L161:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   133      if (NULL_PTR != ServiceConfiguration_pcst->CheckBlockData_pfct)      (inlined)
	jeq.a	a4,a2,.L18
.L162:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   134      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   135          isCheckBlockDataSuccessful_b = ServiceConfiguration_pcst->CheckBlockData_pfct(BlockData_pcst);
	mov.aa	a4,a12
.L125:
	calli	a2

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   133      if (NULL_PTR != ServiceConfiguration_pcst->CheckBlockData_pfct)      (inlined)
.L18:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   138      if (isCheckBlockDataSuccessful_b)      (inlined)
	jeq	d2,#0,.L19
.L163:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   136      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   137  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   138      if (isCheckBlockDataSuccessful_b)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   139      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   140          // TRACE[NVM181] Queue this request to allow multiple concurrent single block requests
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   141          // TRACE[NVM385] Only queue this request if no operation on this block is requested or in progress
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   142          // TRACE[BSW_SWS_AR4_0_R2_NVRAMManager_Ext-2866] Exception to NVM385: A service can be queued for a block
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   143          //                                               whose the only pending operation is a maintenance operation.
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   144          // TRACE[NVM181] Queue this request to allow multiple concurrent single block requests
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   145          if (ServiceConfiguration_pcst->CheckPendingBlock_b)
	ld.bu	d15,[a15]
.L164:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   145          if (ServiceConfiguration_pcst->CheckPendingBlock_b)      (inlined)
	jeq	d15,#0,.L20
.L112:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     1  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     2  #ifndef NVM_PRV_BLOCKDATA_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     3  #define NVM_PRV_BLOCKDATA_H
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     4  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     5  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     6   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     7   * Includes
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     8   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	     9   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    10  #include "NvM_Prv_BlockDescriptor.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    11  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    12  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    13   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    14   * Defines/Macros
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    15   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    16   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    17  // Definitions for giving special block IDs some semantics
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    18  // ------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    19  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    20   * Definition of the reserved block ID used for multi block operations.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    21   * TRACE[NVM471]
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    22   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    23  #define NVM_PRV_MULTI_BLOCK         (0u)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    24  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    25  #if (NVM_RB_AUX_INTERFACE == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    26  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    27   * Definition of the block ID used for administrative information related to operations triggered by auxiliary users
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    28   * (for this use case, an additional admin block has been reserved behind all "regular" admin blocks)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    29   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    30  # define NVM_PRV_AUX_ADMIN_BLOCK    NVM_CFG_NR_BLOCKS
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    31  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    32  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    33  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    34   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    35   * Type definitions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    36   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    37   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    38  typedef boolean (*NvM_Prv_Block_IsNvmEnqueuingForMulti_tpfct)(NvM_BlockIdType idBlock_uo);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    39  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    40  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    41   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    42   * Constants
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    43   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    44   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    45  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    46  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    47   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    48   * Variables
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    49   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    50   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    51  // Declaration of variables containing administrative data for all NVRAM blocks.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    52  // ------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    53  // TRACE[NVM135] Administrative block is private
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    54  #define NVM_START_SEC_VAR_SAVED_ZONE_8
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    55  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    56  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    57   * Declaration of the array containing attribute/status information of all NVRAM blocks.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    58   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    59  extern uint8 NvM_Prv_stBlock_rAwAM_au8[NVM_CFG_NR_BLOCKS];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    60  #define NVM_STOP_SEC_VAR_SAVED_ZONE_8
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    61  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    62  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    63  #define NVM_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    64  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    65  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    66   * Declaration of the array containing all requests pending on each NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    67   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    68  extern uint16 NvM_Prv_stRequests_rAMwAM_au16[NVM_PRV_NR_BLOCKS_ADMIN];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    69  #define NVM_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    70  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    71  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    72  #define NVM_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    73  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    74  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    75   * Declaration of the array containing results of the last asynchronous request for all NVRAM blocks.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    76   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    77  extern NvM_RequestResultType NvM_Prv_stRequestResult_rAwAM_au8[NVM_PRV_NR_BLOCKS_ADMIN];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    78  /**
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    79   * Declaration of the array containing indexes for all NVRAM block.
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    80   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    81  extern uint8 NvM_Prv_idxDataSet_rAMwA_au8[NVM_PRV_NR_BLOCKS_ADMIN];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    82  #define NVM_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    83  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    84  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    85  # define NVM_START_SEC_VAR_SAVED_ZONE_16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    86  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    87  extern uint16 NvM_Prv_idConfigStored_rMwM_u16;   // RAM block of the config ID block
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    88  # define NVM_STOP_SEC_VAR_SAVED_ZONE_16
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    89  # include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    90  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    91  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    92   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    93   * Extern declarations
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    94   **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    95   */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    96  #define NVM_START_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    97  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    98  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	    99  extern void NvM_Prv_Block_InitializeData(boolean isSavedZoneDataLost_b);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   100  #if (NVM_RB_AUX_INTERFACE == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   101  extern void NvM_Prv_Block_InitializeDataAux(void);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   102  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   103  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   104  extern void NvM_Prv_Block_SetIsNvmEnqueuingForMulti(NvM_Prv_Block_IsNvmEnqueuingForMulti_tpfct IsNvmEnqueuingForMulti_pfct);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   105  extern boolean NvM_Prv_Block_IsNvmEnqueuingForMulti(NvM_BlockIdType idBlock_uo);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   106  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   107  #define NVM_STOP_SEC_CODE
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   108  #include "NvM_MemMap.h"
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   109  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   110  /*
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   111  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   112  * Inline functions
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   113  **********************************************************************************************************************
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   114  */
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   115  LOCAL_INLINE boolean NvM_Prv_Block_IsPRamBlockValid(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   116  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   117      return ((NvM_Prv_stBlock_rAwAM_au8[idBlock_uo] & NVM_BLOCK_STATE_RAM_VALID) != 0u);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   118  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   119  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   120  LOCAL_INLINE boolean NvM_Prv_Block_IsChanged(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   121  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   122      return ((NvM_Prv_stBlock_rAwAM_au8[idBlock_uo] & NVM_BLOCK_STATE_RAM_CHANGED) != 0u);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   123  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   124  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   125  LOCAL_INLINE boolean NvM_Prv_Block_IsTrgWriteAllActive(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   126  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   127      boolean isTrgWriteAllActive_b = FALSE;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   128  #if (NVM_RB_SET_WRITEALL_TRIGGER_API == STD_ON)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   129      isTrgWriteAllActive_b = (NvM_Prv_stBlock_rAwAM_au8[idBlock_uo] & NVM_RB_BLOCK_STATE_MASK_TRG_WRITEALL) != 0u;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   130  #endif
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   131      return isTrgWriteAllActive_b;
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   132  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   133  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   134  LOCAL_INLINE boolean NvM_Prv_Block_IsRomDataAmbiguous(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   135  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   136      return ((NULL_PTR != NvM_Prv_GetRomBlockAddress(idBlock_uo)) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   137              (NVM_BLOCK_DATASET == NvM_Prv_GetBlockType(idBlock_uo)) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   138              (NvM_Prv_idxDataSet_rAMwA_au8[idBlock_uo] < NvM_Prv_GetNrNonVolatileBlocks(idBlock_uo))
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   139             );
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   140  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   141  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   142  LOCAL_INLINE boolean NvM_Prv_Block_IsInRom(NvM_BlockIdType idBlock_uo, uint8 idxDataset_u8)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   143  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   144      return ((NVM_BLOCK_DATASET == NvM_Prv_GetBlockType(idBlock_uo)) &&
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   145              (idxDataset_u8 >= NvM_Prv_GetNrNonVolatileBlocks(idBlock_uo)));
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   146  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   147  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   148  LOCAL_INLINE boolean NvM_Prv_Block_IsWriteProtected(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   149  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   150      return ((NvM_Prv_stBlock_rAwAM_au8[idBlock_uo] & NVM_BLOCK_STATE_WRITE_PROT) != 0u);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   151  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   152  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   153  LOCAL_INLINE boolean NvM_Prv_Block_IsWriteable(NvM_BlockIdType idBlock_uo, uint8 idxDataset_u8)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   154  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   155      boolean IsBlockInRom_b = NvM_Prv_Block_IsInRom(idBlock_uo, idxDataset_u8);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   156      return (!NvM_Prv_Block_IsWriteProtected(idBlock_uo) && !IsBlockInRom_b);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   157  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   158  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   159  LOCAL_INLINE uint8 NvM_Prv_Block_GetIdxDataset(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   160  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   161      return NvM_Prv_idxDataSet_rAMwA_au8[idBlock_uo];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   162  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   163  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   164  LOCAL_INLINE NvM_RequestResultType NvM_Prv_Block_GetRequestResult(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   165  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   166      return NvM_Prv_stRequestResult_rAwAM_au8[idBlock_uo];
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   167  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   168  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   169  LOCAL_INLINE boolean NvM_Prv_Block_IsRequestPending(NvM_BlockIdType idBlock_uo, uint16 maskService_u16)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   170  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   171      return ((NvM_Prv_stRequests_rAMwAM_au16[idBlock_uo] & maskService_u16) != 0u);
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   172  }
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   173  
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   174  LOCAL_INLINE boolean NvM_Prv_Block_IsPending(NvM_BlockIdType idBlock_uo)
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   175  {
; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   176      return (NvM_Prv_Block_IsNvmEnqueuingForMulti(idBlock_uo) ||
	mov	d8,#0
.L165:
	mov	d4,d9
.L126:
	call	NvM_Prv_Block_IsNvmEnqueuingForMulti
.L123:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   176      return (NvM_Prv_Block_IsNvmEnqueuingForMulti(idBlock_uo) ||      (inlined)
	jne	d2,#0,.L21
.L166:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   177              ((NvM_Prv_stRequests_rAMwAM_au16[idBlock_uo] != 0)
	movh.a	a2,#@his(NvM_Prv_stRequests_rAMwAM_au16)
	lea	a2,[a2]@los(NvM_Prv_stRequests_rAMwAM_au16)
.L167:
	addsc.a	a2,a2,d9,#1
	ld.hu	d15,[a2]0
.L168:

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   177              ((NvM_Prv_stRequests_rAMwAM_au16[idBlock_uo] != 0)      (inlined)
	jeq	d15,#0,.L22

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   176      return (NvM_Prv_Block_IsNvmEnqueuingForMulti(idBlock_uo) ||      (inlined)
.L21:
	mov	d8,#1

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   176      return (NvM_Prv_Block_IsNvmEnqueuingForMulti(idBlock_uo) ||      (inlined)
.L22:
	j	.L23

; BSW\src\BSW\Gen\NvM\src\NvM_Prv_BlockData.h	   183  }      (inlined)
.L23:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   145          if (ServiceConfiguration_pcst->CheckPendingBlock_b)      (inlined)
.L20:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   150          if (!isBlockPending_b)      (inlined)
	jne	d8,#0,.L24
.L113:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   146          {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   147              isBlockPending_b = NvM_Prv_Block_IsPending(idBlockForPendingCheck_uo);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   148          }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   149  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   150          if (!isBlockPending_b)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   151          {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   152              stBlockData_uo = NvM_Prv_Service_SetBlockData(idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   153                                                            BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   154                                                            ServiceConfiguration_pcst->SetBlockData_pfct);
	ld.a	a15,[a15]12
.L81:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   155          }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   156      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   157  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   158      SchM_Exit_NvM_Main();
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   159  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   160      // Calling foreign DET function is done out of the scheduler lock
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   161      NvM_Prv_ErrorDetection_IsBlockPending(BlockData_pcst->QueueEntry_st.idService_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   162                                            BlockData_pcst->QueueEntry_st.idBlock_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   163                                            isBlockPending_b);
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   164      return stBlockData_uo;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   165  }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   166  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   167  LOCAL_INLINE Std_ReturnType NvM_Prv_Service_SetBlockData(NvM_Prv_idQueue_tuo idQueue_uo,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   168                                                           NvM_Prv_BlockData_tst const* BlockData_pcst,
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   169                                                           NvM_Prv_Service_SetBlockData_tpfct SetBlockData_pfct)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   170  {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   171      Std_ReturnType stBlockData_uo = E_NOT_OK;
	mov	d12,#1
.L169:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   172      boolean isReqEnqueued_b = TRUE;
	mov	d2,#1
.L127:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   175      if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)      (inlined)
	jge.u	d11,#2,.L25
.L170:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   173  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   174      // check whether service shall be enqueued
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   175      if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   176      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   177          // TRACE[NVM184] In case of a queue overflow, the return value is E_NOT_OK
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   178          isReqEnqueued_b = NvM_Prv_Queue_EnqueueRequest(idQueue_uo, &BlockData_pcst->QueueEntry_st);
	mov	d4,d11
.L128:
	mov.aa	a4,a12
.L129:
	call	NvM_Prv_Queue_EnqueueRequest

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   175      if (idQueue_uo < NvM_Prv_idQueue_nrQueues_e)      (inlined)
.L25:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   182      if (isReqEnqueued_b)      (inlined)
	jeq	d2,#0,.L26
.L171:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   179  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   180      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   181  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   182      if (isReqEnqueued_b)
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   183      {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   184          if (NULL_PTR != SetBlockData_pfct)
	mov.a	a2,#0
.L172:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   184          if (NULL_PTR != SetBlockData_pfct)      (inlined)
	jeq.a	a2,a15,.L27
.L173:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   185          {
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   186              SetBlockData_pfct(BlockData_pcst);
	mov.aa	a4,a12
.L130:
	calli	a15

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   184          if (NULL_PTR != SetBlockData_pfct)      (inlined)
.L27:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   187          }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   188          stBlockData_uo = E_OK;
	mov	d12,#0

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   182      if (isReqEnqueued_b)      (inlined)
.L26:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   191      return stBlockData_uo;      (inlined)
	j	.L28

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   192  }      (inlined)
.L28:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   150          if (!isBlockPending_b)      (inlined)
.L24:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   138      if (isCheckBlockDataSuccessful_b)      (inlined)
.L19:
	ld.bu	d4,[a12]
.L174:
	ld.hu	d5,[a12]2
.L114:
	mov	d6,d8
.L115:
	call	NvM_Prv_ErrorDetection_IsBlockPending
.L175:

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   164      return stBlockData_uo;      (inlined)
	j	.L29

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   165  }      (inlined)
.L29:
.L17:
.L15:
.L3:
.L2:
	mov	d2,d12
.L54:
	j	.L30
.L30:
	ret
.L43:
	
__NvM_Prv_Service_Initiate_function_end:
	.size	NvM_Prv_Service_Initiate,__NvM_Prv_Service_Initiate_function_end-NvM_Prv_Service_Initiate
.L41:
	; End of function
	
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_ErrorDetection_IsNvmInitialized'
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_ErrorDetection_IsBlockIdValid'
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_IsSanitizedByReadAll'
	.calls	'NvM_Prv_Service_Initiate','__INDIRECT__'
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_Block_IsNvmEnqueuingForMulti'
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_Queue_EnqueueRequest'
	.calls	'NvM_Prv_Service_Initiate','NvM_Prv_ErrorDetection_IsBlockPending'
	.extern	NvM_Prv_IsSanitizedByReadAll
	.extern	NvM_Prv_Queue_EnqueueRequest
	.extern	NvM_Prv_BlockDescriptors_acst
	.extern	NvM_Prv_stRequests_rAMwAM_au16
	.extern	NvM_Prv_Block_IsNvmEnqueuingForMulti
	.extern	NvM_Prv_ErrorDetection_IsBlockPending
	.extern	NvM_Prv_ErrorDetection_IsNvmInitialized
	.extern	NvM_Prv_ErrorDetection_IsBlockIdValid
	.extern	__INDIRECT__
	.calls	'NvM_Prv_Service_Initiate','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L34:
	.word	14539
	.half	3
	.word	.L35
	.byte	4
.L33:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L36
.L42:
	.byte	2
	.byte	'unsigned char',0,1,8
.L69:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L98:
	.byte	3
	.byte	'NvM_Prv_IsBlockLengthValid',0,3,1,147,3,22
	.word	137
	.byte	1,1
.L99:
	.byte	4
	.byte	'idBlock_uo',0,1,147,3,65
	.word	154
.L101:
	.byte	5,0,6,2,40,9,4,7
	.byte	'NVM_BLOCK_NATIVE',0,0,7
	.byte	'NVM_BLOCK_REDUNDANT',0,1,7
	.byte	'NVM_BLOCK_DATASET',0,2,0,3
	.byte	'NvM_Prv_GetBlockType',0,3,1,212,3,38
	.word	237
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,212,3,75
	.word	154
	.byte	5,0,3
	.byte	'NvM_Prv_GetNrNonVolatileBlocks',0,3,1,232,3,20
	.word	137
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,232,3,67
	.word	154
	.byte	5,0,8
	.byte	'void',0,9
	.word	424
	.byte	10
	.word	430
	.byte	3
	.byte	'NvM_Prv_GetRomBlockAddress',0,3,1,173,4,26
	.word	435
	.byte	1,1,4
	.byte	'idBlock_uo',0,1,173,4,69
	.word	154
	.byte	5,0,3
	.byte	'NvM_Prv_Block_IsInRom',0,3,3,142,1,22
	.word	137
	.byte	1,1,4
	.byte	'idBlock_uo',0,3,142,1,60
	.word	154
	.byte	4
	.byte	'idxDataset_u8',0,3,142,1,78
	.word	137
	.byte	11,5,5,0,0,3
	.byte	'NvM_Prv_Block_IsWriteProtected',0,3,3,148,1,22
	.word	137
	.byte	1,1,4
	.byte	'idBlock_uo',0,3,148,1,69
	.word	154
	.byte	5,0
.L105:
	.byte	3
	.byte	'NvM_Prv_Block_IsPending',0,3,3,174,1,22
	.word	137
	.byte	1,1
.L108:
	.byte	4
	.byte	'idBlock_uo',0,3,174,1,62
	.word	154
.L110:
	.byte	5,0
.L84:
	.byte	3
	.byte	'NvM_Prv_Service_CheckPreconditions',0,3,4,81,22
	.word	137
	.byte	1,1
.L86:
	.byte	4
	.byte	'idQueue_uo',0,4,81,77
	.word	137
.L88:
	.byte	4
	.byte	'idBlock_uo',0,4,82,73
	.word	154
.L90:
	.byte	4
	.byte	'idService_uo',0,4,83,79
	.word	137
.L92:
	.byte	11
.L94:
	.byte	5,5,0,0,10
	.word	424
	.byte	12,2,210,1,9,12,13
	.byte	'idService_uo',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'idBlock_uo',0
	.word	154
	.byte	2,2,35,2,13
	.byte	'ServiceBit_uo',0
	.word	154
	.byte	2,2,35,4,13
	.byte	'BlockData_pv',0
	.word	816
	.byte	4,2,35,8,0,12,5,23,9,16,13
	.byte	'QueueEntry_st',0
	.word	821
	.byte	12,2,35,0,13
	.byte	'Result_uo',0
	.word	137
	.byte	1,2,35,12,13
	.byte	'idxDataset_u8',0
	.word	137
	.byte	1,2,35,13,13
	.byte	'maskBitsToChange_u8',0
	.word	137
	.byte	1,2,35,14,13
	.byte	'maskBitsNewValue_u8',0
	.word	137
	.byte	1,2,35,15,0,9
	.word	915
.L45:
	.byte	10
	.word	1044
	.byte	9
	.word	915
	.byte	10
	.word	1054
	.byte	14
	.word	137
	.byte	1,1,15
	.word	1059
	.byte	0,10
	.word	1064
	.byte	16
	.byte	'NvM_Prv_Service_CheckParameter_tpfct',0,5,38,19
	.word	1077
	.byte	16
	.byte	'NvM_Prv_Service_CheckBlockData_tpfct',0,5,39,19
	.word	1077
	.byte	17,1,1,15
	.word	1059
	.byte	0,10
	.word	1172
	.byte	16
	.byte	'NvM_Prv_Service_SetBlockData_tpfct',0,5,40,16
	.word	1181
	.byte	12,5,42,9,16,13
	.byte	'CheckPendingBlock_b',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'CheckParameter_pfct',0
	.word	1082
	.byte	4,2,35,4,13
	.byte	'CheckBlockData_pfct',0
	.word	1127
	.byte	4,2,35,8,13
	.byte	'SetBlockData_pfct',0
	.word	1186
	.byte	4,2,35,12,0,9
	.word	1229
.L47:
	.byte	10
	.word	1349
.L56:
	.byte	3
	.byte	'NvM_Prv_Service_CheckBlockData',0,3,4,114,29
	.word	137
	.byte	1,1
.L57:
	.byte	4
	.byte	'idQueue_uo',0,4,114,80
	.word	137
.L59:
	.byte	4
	.byte	'BlockData_pcst',0,4,115,89
	.word	1049
.L61:
	.byte	4
	.byte	'ServiceConfiguration_pcst',0,4,116,101
	.word	1354
.L63:
	.byte	11,5,5,0,0,10
	.word	1064
	.byte	10
	.word	1064
	.byte	10
	.word	1172
.L71:
	.byte	3
	.byte	'NvM_Prv_Service_SetBlockData',0,3,4,167,1,29
	.word	137
	.byte	1,1
.L72:
	.byte	4
	.byte	'idQueue_uo',0,4,167,1,78
	.word	137
.L74:
	.byte	4
	.byte	'BlockData_pcst',0,4,168,1,87
	.word	1049
.L76:
	.byte	4
	.byte	'SetBlockData_pfct',0,4,169,1,93
	.word	1186
.L78:
	.byte	5,0,18
	.byte	'NvM_Prv_IsSanitizedByReadAll',0,6,86,16
	.word	137
	.byte	1,1,1,1,4
	.byte	'idBlock_uo',0,6,86,61
	.word	154
	.byte	0,9
	.word	821
	.byte	10
	.word	1672
	.byte	18
	.byte	'NvM_Prv_Queue_EnqueueRequest',0,7,40,16
	.word	137
	.byte	1,1,1,1,4
	.byte	'idQueue_uo',0,7,40,65
	.word	137
	.byte	4
	.byte	'QueueEntry_pcst',0,7,41,75
	.word	1677
	.byte	0,19
	.word	176
	.byte	20
	.word	215
	.byte	5,0,19
	.word	304
	.byte	20
	.word	337
	.byte	5,0,19
	.word	359
	.byte	20
	.word	402
	.byte	5,0,19
	.word	440
	.byte	20
	.word	479
	.byte	5,0,18
	.byte	'NvM_Prv_Block_IsNvmEnqueuingForMulti',0,3,105,16
	.word	137
	.byte	1,1,1,1,4
	.byte	'idBlock_uo',0,3,105,69
	.word	154
	.byte	0,19
	.word	501
	.byte	20
	.word	535
	.byte	20
	.word	555
	.byte	11,21
	.word	304
	.byte	20
	.word	337
	.byte	22
	.word	357
	.byte	0,5,21
	.word	359
	.byte	20
	.word	402
	.byte	22
	.word	422
	.byte	0,5,0,0,19
	.word	583
	.byte	20
	.word	626
	.byte	5,0,19
	.word	648
	.byte	20
	.word	684
	.byte	5,0,23
	.byte	'NvM_Prv_ErrorDetection_IsBlockPending',0,8,54,13,1,1,1,1,4
	.byte	'idService_uo',0,8,54,73
	.word	137
	.byte	4
	.byte	'idBlock_uo',0,8,55,67
	.word	154
	.byte	4
	.byte	'isBlockPending_b',0,8,56,59
	.word	137
	.byte	0,18
	.byte	'NvM_Prv_ErrorDetection_IsNvmInitialized',0,8,89,16
	.word	137
	.byte	1,1,1,1,4
	.byte	'idService_uo',0,8,89,78
	.word	137
	.byte	4
	.byte	'idBlock_uo',0,8,90,72
	.word	154
	.byte	0,18
	.byte	'NvM_Prv_ErrorDetection_IsBlockIdValid',0,8,91,16
	.word	137
	.byte	1,1,1,1,4
	.byte	'idService_uo',0,8,91,76
	.word	137
	.byte	4
	.byte	'idBlock_uo',0,8,92,70
	.word	154
	.byte	4
	.byte	'isMultiBlockAllowed_b',0,8,93,62
	.word	137
	.byte	0,19
	.word	706
	.byte	20
	.word	752
	.byte	20
	.word	771
	.byte	20
	.word	790
	.byte	11,11,21
	.word	176
	.byte	20
	.word	215
	.byte	22
	.word	235
	.byte	0,0,5,0,0,19
	.word	1359
	.byte	20
	.word	1401
	.byte	20
	.word	1420
	.byte	20
	.word	1443
	.byte	11,21
	.word	648
	.byte	20
	.word	684
	.byte	22
	.word	704
	.byte	0,5,21
	.word	1497
	.byte	20
	.word	1538
	.byte	20
	.word	1558
	.byte	20
	.word	1582
	.byte	22
	.word	1609
	.byte	0,5,0,0,19
	.word	1497
	.byte	20
	.word	1538
	.byte	20
	.word	1558
	.byte	20
	.word	1582
	.byte	5,0,24
	.byte	'__INDIRECT__',0,4,1,1,1,1,1,25,1,10
	.word	2437
	.byte	16
	.byte	'__codeptr',0,4,1,1
	.word	2439
	.byte	2
	.byte	'char',0,1,6,16
	.byte	'sint8',0,9,76,25
	.word	2462
	.byte	16
	.byte	'uint8',0,9,81,25
	.word	137
	.byte	16
	.byte	'uint16',0,9,91,25
	.word	154
	.byte	2
	.byte	'unsigned int',0,4,7,16
	.byte	'uint32',0,9,106,24
	.word	2513
	.byte	2
	.byte	'unsigned long long int',0,8,7,16
	.byte	'uint64',0,9,111,30
	.word	2544
	.byte	16
	.byte	'boolean',0,9,127,25
	.word	137
	.byte	16
	.byte	'StatusType',0,10,191,1,27
	.word	137
	.byte	16
	.byte	'Std_ReturnType',0,10,199,1,15
	.word	137
	.byte	12,10,206,1,9,8,13
	.byte	'vendorID',0
	.word	154
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	154
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	137
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	137
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	137
	.byte	1,2,35,6,0,16
	.byte	'Std_VersionInfoType',0,10,213,1,3
	.word	2645
	.byte	16
	.byte	'PduIdType',0,11,22,19
	.word	154
	.byte	16
	.byte	'PduLengthType',0,11,26,19
	.word	154
	.byte	6,12,113,9,4,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,16
	.byte	'TpDataStateType',0,12,118,3
	.word	2835
	.byte	16
	.byte	'Can_IdType',0,13,32,16
	.word	2513
	.byte	16
	.byte	'Can_HwHandleType',0,13,43,16
	.word	154
	.byte	12,14,93,9,8,13
	.byte	'Class',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	137
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	2513
	.byte	4,2,35,4,0,16
	.byte	'OsTrapInfoType',0,14,97,3
	.word	2955
	.byte	26,68
	.word	2513
	.byte	27,16,0,12,14,154,1,9,68,13
	.byte	'store',0
	.word	3035
	.byte	68,2,35,0,0,26,68
	.word	3044
	.byte	27,0,0,16
	.byte	'Os_JumpBufType',0,14,156,1,3
	.word	3066
	.byte	16
	.byte	'Os_StackTraceType',0,14,174,1,18
	.word	2513
	.byte	12,14,175,1,9,8,13
	.byte	'sp',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	2513
	.byte	4,2,35,4,0,16
	.byte	'Os_StackValueType',0,14,175,1,63
	.word	3126
	.byte	16
	.byte	'Os_StackSizeType',0,14,176,1,27
	.word	3126
	.byte	28,1,1,10
	.word	3211
	.byte	16
	.byte	'Os_VoidVoidFunctionType',0,14,179,1,16
	.word	3214
	.byte	16
	.byte	'ApplicationType',0,14,193,1,23
	.word	137
	.byte	29
	.byte	'Os_ApplicationConfigurationType_s',0,14,198,1,16,2,13
	.byte	'app_id',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,1,0,16
	.byte	'Os_ApplicationConfigurationType',0,14,201,1,3
	.word	3277
	.byte	16
	.byte	'Os_CoreStateType',0,14,203,1,16
	.word	2513
	.byte	16
	.byte	'AreaIdType',0,14,204,1,16
	.word	154
	.byte	16
	.byte	'Os_PeripheralAddressType',0,14,212,1,22
	.word	2513
	.byte	16
	.byte	'TickType',0,14,221,1,22
	.word	2513
	.byte	16
	.byte	'Os_StopwatchTickType',0,14,225,1,22
	.word	2513
	.byte	10
	.word	2513
	.byte	16
	.byte	'Os_Lockable',0,14,234,1,18
	.word	3519
	.byte	16
	.byte	'CoreIdType',0,14,236,1,16
	.word	154
	.byte	16
	.byte	'SpinlockIdType',0,14,237,1,16
	.word	154
	.byte	6,14,239,1,9,4,7
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,7
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,16
	.byte	'TryToGetSpinlockType',0,14,239,1,74
	.word	3589
	.byte	6,14,174,2,9,4,7
	.byte	'APPLICATION_ACCESSIBLE',0,0,7
	.byte	'APPLICATION_RESTARTING',0,1,7
	.byte	'APPLICATION_TERMINATED',0,2,0,16
	.byte	'ApplicationStateType',0,14,174,2,92
	.word	3682
	.byte	17,1,1,15
	.word	137
	.byte	15
	.word	816
	.byte	0,10
	.word	3794
	.byte	16
	.byte	'Os_FunctionEntryType',0,14,183,2,16
	.word	3808
	.byte	29
	.byte	'Os_MeterInfoType_s',0,14,193,2,16,48,13
	.byte	'elapsed',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	2513
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	2513
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	2513
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	3126
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	3126
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	3126
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	3126
	.byte	8,2,35,40,0,16
	.byte	'Os_MeterInfoType',0,14,202,2,3
	.word	3843
	.byte	10
	.word	3843
	.byte	16
	.byte	'Os_MeterInfoRefType',0,14,203,2,50
	.word	4041
	.byte	16
	.byte	'EventMaskType',0,14,206,2,15
	.word	137
	.byte	16
	.byte	'Os_imaskType',0,14,211,2,16
	.word	2513
	.byte	29
	.byte	'Os_ISRDynType_s',0,14,213,2,16,48,13
	.byte	'meter',0
	.word	3843
	.byte	48,2,35,0,0,16
	.byte	'Os_ISRDynType',0,14,215,2,3
	.word	4120
	.byte	10
	.word	4120
	.byte	9
	.word	4181
	.byte	29
	.byte	'Os_ISRType_s',0,14,216,2,16,24,13
	.byte	'entry_function',0
	.word	3219
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	4186
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	2513
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	3126
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	137
	.byte	1,2,35,21,0,16
	.byte	'Os_ISRType',0,14,223,2,3
	.word	4191
	.byte	10
	.word	3211
	.byte	9
	.word	4191
	.byte	10
	.word	4350
	.byte	16
	.byte	'ISRType',0,14,224,2,46
	.word	4355
	.byte	16
	.byte	'Os_bitmask',0,14,239,2,22
	.word	2513
	.byte	16
	.byte	'Os_pset0Type',0,14,240,2,20
	.word	2513
	.byte	16
	.byte	'Os_pset1Type',0,14,241,2,20
	.word	2513
	.byte	16
	.byte	'Os_pset2Type',0,14,242,2,20
	.word	2513
	.byte	30,14,243,2,9,4,13
	.byte	'p0',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	2513
	.byte	4,2,35,0,0,16
	.byte	'Os_psetType',0,14,247,2,3
	.word	4463
	.byte	30,14,249,2,9,4,13
	.byte	't0',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	2513
	.byte	4,2,35,0,0,16
	.byte	'Os_tpmaskType',0,14,253,2,3
	.word	4527
	.byte	16
	.byte	'Os_ActivationCountType',0,14,254,2,23
	.word	137
	.byte	29
	.byte	'Os_TaskDynType_s',0,14,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	3075
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	3843
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,116,0,16
	.byte	'Os_TaskDynType',0,14,132,3,3
	.word	4625
	.byte	26,68
	.word	3044
	.byte	27,0,0,10
	.word	4625
	.byte	9
	.word	4751
	.byte	29
	.byte	'Os_TaskType_s',0,14,134,3,16,40,13
	.byte	'dynamic',0
	.word	4756
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	3219
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	4463
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	4527
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	4527
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	154
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	2513
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	3126
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	137
	.byte	1,2,35,38,0,16
	.byte	'Os_TaskType',0,14,146,3,3
	.word	4761
	.byte	9
	.word	4761
	.byte	10
	.word	5011
	.byte	16
	.byte	'TaskType',0,14,147,3,47
	.word	5016
	.byte	31
	.byte	'Os_TaskStateType',0,14,155,3,6,4,7
	.byte	'SUSPENDED',0,0,7
	.byte	'READY',0,1,7
	.byte	'WAITING',0,2,7
	.byte	'RUNNING',0,3,0,16
	.byte	'TaskStateType',0,14,156,3,31
	.word	5039
	.byte	30,14,167,3,3,4,13
	.byte	'tpmask',0
	.word	4527
	.byte	4,2,35,0,0,29
	.byte	'Os_ResourceDynType_s',0,14,166,3,16,4,13
	.byte	'saved_priority',0
	.word	5126
	.byte	4,2,35,0,0,16
	.byte	'Os_ResourceDynType',0,14,170,3,3
	.word	5149
	.byte	10
	.word	5149
	.byte	9
	.word	5229
	.byte	29
	.byte	'Os_ResourceType_s',0,14,171,3,16,12,13
	.byte	'dynamic',0
	.word	5234
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	4527
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,8,0,16
	.byte	'Os_ResourceType',0,14,175,3,3
	.word	5239
	.byte	12,14,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	2513
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	2513
	.byte	4,2,35,8,0,16
	.byte	'AlarmBaseType',0,14,185,3,3
	.word	5338
	.byte	12,14,206,3,9,8,13
	.byte	'Running',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	137
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	2513
	.byte	4,2,35,4,0,16
	.byte	'Os_CounterStatusType',0,14,210,3,3
	.word	5433
	.byte	32
	.word	137
	.byte	1,1,10
	.word	5519
	.byte	16
	.byte	'Os_CounterIncrAdvType',0,14,217,3,22
	.word	5526
	.byte	29
	.byte	's_swd',0,14,222,3,12,4,13
	.byte	'count',0
	.word	2513
	.byte	4,2,35,0,0,30,14,221,3,3,4,13
	.byte	'sw',0
	.word	5562
	.byte	4,2,35,0,0,29
	.byte	'Os_CounterDynType_s',0,14,220,3,16,4,13
	.byte	'type_dependent',0
	.word	5590
	.byte	4,2,35,0,0,16
	.byte	'Os_CounterDynType',0,14,226,3,3
	.word	5609
	.byte	10
	.word	5609
	.byte	9
	.word	5687
	.byte	29
	.byte	'Os_CounterType_s',0,14,227,3,16,28,13
	.byte	'dynamic',0
	.word	5692
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	5531
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	5338
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	816
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	137
	.byte	1,2,35,25,0,16
	.byte	'Os_CounterType',0,14,234,3,3
	.word	5697
	.byte	10
	.word	5519
	.byte	9
	.word	5697
	.byte	10
	.word	5849
	.byte	16
	.byte	'CounterType',0,14,235,3,52
	.word	5854
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,14,240,3,6,4,7
	.byte	'SCHEDULETABLE_STOPPED',0,0,7
	.byte	'SCHEDULETABLE_NEXT',0,1,7
	.byte	'SCHEDULETABLE_WAITING',0,2,7
	.byte	'SCHEDULETABLE_RUNNING',0,3,7
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,16
	.byte	'ScheduleTableStatusType',0,14,241,3,41
	.word	5880
	.byte	9
	.word	.L131-.L34
	.byte	10
	.word	6080
	.byte	16
	.byte	'ScheduleTableType',0,14,128,4,58
	.word	6085
	.byte	29
	.byte	'Os_ScheduleTableDynType_s',0,14,130,4,16,16,13
	.byte	'match',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	6090
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	5880
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	154
	.byte	2,2,35,12,0,10
	.word	6117
	.byte	9
	.word	6210
.L131:
	.byte	29
	.byte	'Os_ScheduleTableType_s',0,14,247,3,16,16,13
	.byte	'dynamic',0
	.word	6215
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	5859
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	137
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	154
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	137
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	137
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	137
	.byte	1,2,35,14,0,16
	.byte	'Os_ScheduleTableType',0,14,255,3,3
	.word	6220
	.byte	9
	.word	6220
	.byte	10
	.word	6400
	.byte	9
	.word	5697
	.byte	10
	.word	6410
	.byte	33
	.word	3524
	.byte	33
	.word	4463
	.byte	33
	.word	4360
	.byte	33
	.word	5021
	.byte	33
	.word	4527
	.byte	33
	.word	137
	.byte	33
	.word	5021
	.byte	29
	.byte	'Os_ControlledCoreType_s',0,14,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	2955
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	6420
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	6425
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	6430
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	6435
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	6440
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	4046
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	3843
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	137
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	6445
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	3126
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	137
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	6450
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	3126
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	137
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	137
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	137
	.byte	1,2,35,110,0,16
	.byte	'Os_ControlledCoreType',0,14,141,7,3
	.word	6455
	.byte	10
	.word	2513
	.byte	9
	.word	4191
	.byte	10
	.word	6911
	.byte	9
	.word	4761
	.byte	10
	.word	6921
	.byte	10
	.word	3843
	.byte	29
	.byte	'Os_AnyCoreType_s',0,14,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	2513
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	2513
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	2513
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	2513
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	2513
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	3075
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	137
	.byte	1,2,35,92,0,16
	.byte	'Os_AnyCoreType',0,14,160,7,3
	.word	6936
	.byte	16
	.byte	'Can_TxObjPriorityClassType',0,15,219,3,16
	.word	2513
	.byte	29
	.byte	'Can_TxHwObjectConfigType',0,15,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	2513
	.byte	4,2,35,4,0,16
	.byte	'Can_TxHwObjectConfigType',0,15,252,3,3
	.word	7213
	.byte	29
	.byte	'Can_RxHwObjectConfigType',0,15,129,4,16,12,13
	.byte	'MaskRef',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	2513
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,9,0,16
	.byte	'Can_RxHwObjectConfigType',0,15,147,4,3
	.word	7349
	.byte	26,4
	.word	137
	.byte	27,3,0,29
	.byte	'Can_ControllerMOMapConfigType',0,15,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	7489
	.byte	4,2,35,0,0,16
	.byte	'Can_ControllerMOMapConfigType',0,15,184,4,3
	.word	7498
	.byte	29
	.byte	'Can_NPCRValueType',0,15,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	154
	.byte	2,2,35,0,0,16
	.byte	'Can_NPCRValueType',0,15,191,4,3
	.word	7599
	.byte	29
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,15,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	154
	.byte	2,2,35,4,0,16
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,15,198,4,3
	.word	7674
	.byte	9
	.word	7674
	.byte	10
	.word	7839
	.byte	29
	.byte	'Can_BaudrateConfigPtrType',0,15,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	7844
	.byte	4,2,35,0,0,16
	.byte	'Can_BaudrateConfigPtrType',0,15,204,4,3
	.word	7849
	.byte	29
	.byte	'Can_EventHandlingType',0,15,226,4,16,4,13
	.byte	'CanEventType',0
	.word	7489
	.byte	4,2,35,0,0,16
	.byte	'Can_EventHandlingType',0,15,229,4,3
	.word	7949
	.byte	16
	.byte	'Rte_TransformerErrorCode',0,16,130,1,15
	.word	137
	.byte	16
	.byte	'Rte_TransformerClass',0,16,131,1,15
	.word	137
	.byte	12,16,168,1,9,12,13
	.byte	'in',0
	.word	816
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	816
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	154
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	137
	.byte	1,2,35,10,0,16
	.byte	'Rte_QDynType',0,16,173,1,3
	.word	8095
	.byte	6,16,175,1,9,4,7
	.byte	'RTE_DRA',0,0,7
	.byte	'RTE_WOWP',0,1,7
	.byte	'RTE_TASK',0,2,7
	.byte	'RTE_ARE',0,3,7
	.byte	'RTE_EV',0,4,7
	.byte	'RTE_MSI',0,5,0,16
	.byte	'Rte_NotificationType',0,16,182,1,3
	.word	8182
	.byte	10
	.word	8095
	.byte	29
	.byte	'Rte_QCmnType',0,16,184,1,16,24,13
	.byte	'dynamic',0
	.word	8280
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	137
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	154
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	154
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	816
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	816
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	8182
	.byte	4,2,35,20,0,16
	.byte	'Rte_QCmnType',0,16,192,1,3
	.word	8285
	.byte	16
	.byte	'Rte_AlarmRefType',0,16,224,1,32
	.word	2513
	.byte	16
	.byte	'Rte_AlarmIndexType',0,16,226,1,32
	.word	154
	.byte	26,128,8
	.word	137
	.byte	27,255,7,0,16
	.byte	'Impl_NVM_DstPtrType_1024',0,17,50,15
	.word	8523
	.byte	16
	.byte	'CanIf_u32_impl',0,17,69,16
	.word	2513
	.byte	16
	.byte	'CanIf_u16_impl',0,17,71,16
	.word	154
	.byte	16
	.byte	'CanIf_u8_impl',0,17,73,15
	.word	137
	.byte	16
	.byte	'CanIf_ControllerModeType_Enum_impl',0,17,88,15
	.word	137
	.byte	16
	.byte	'CanIf_PduModeType_Enum_impl',0,17,90,15
	.word	137
	.byte	12,17,92,9,2,13
	.byte	'DeviceMode',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	137
	.byte	1,2,35,1,0,16
	.byte	'CanIf_ControllerStateType_struct_impl',0,17,95,3
	.word	8714
	.byte	16
	.byte	'CanIf_NotifStatusType_Enum_impl',0,17,100,15
	.word	137
	.byte	16
	.byte	'CanSM_boolean_Impl',0,17,120,15
	.word	137
	.byte	16
	.byte	'CanSM_u8_Impl',0,17,123,15
	.word	137
	.byte	16
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,17,128,1,15
	.word	137
	.byte	16
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,17,132,1,15
	.word	137
	.byte	16
	.byte	'CanSM_u16_Impl',0,17,136,1,16
	.word	154
	.byte	16
	.byte	'CanSM_TimerStateType_Enum_impl',0,17,138,1,15
	.word	137
	.byte	12,17,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	154
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	137
	.byte	1,2,35,2,0,16
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,17,143,1,3
	.word	9055
	.byte	16
	.byte	'Com_impl_u16',0,17,154,1,16
	.word	154
	.byte	16
	.byte	'Com_impl_u8',0,17,157,1,15
	.word	137
	.byte	16
	.byte	'ComM_uint32_Impl',0,17,173,1,16
	.word	2513
	.byte	16
	.byte	'ComM_uint16_Impl',0,17,175,1,16
	.word	154
	.byte	16
	.byte	'ComM_uint8_Impl',0,17,177,1,15
	.word	137
	.byte	16
	.byte	'ComM_bool_Impl',0,17,179,1,15
	.word	137
	.byte	12,17,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	2513
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	154
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	137
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	137
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	137
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	137
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	137
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	137
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	137
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	137
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	137
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	137
	.byte	1,2,35,21,0,16
	.byte	'ComM_ChannelStruct_Impl',0,17,197,1,3
	.word	9287
	.byte	12,17,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	154
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	154
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	137
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	137
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	137
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	137
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	137
	.byte	1,2,35,8,0,16
	.byte	'ComM_UserStruct_Impl',0,17,214,1,3
	.word	9791
	.byte	16
	.byte	'Dcm_IOOperationResponseType',0,17,252,1,15
	.word	137
	.byte	16
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	17,138,2,15
	.word	137
	.byte	16
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,17,146,2,15
	.word	137
	.byte	16
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,17,150,2,15
	.word	137
	.byte	16
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,17,154,2,15
	.word	137
	.byte	16
	.byte	'NvM_BlockIdType',0,17,215,2,16
	.word	154
	.byte	16
	.byte	'NvM_RequestResultType',0,17,225,2,15
	.word	137
	.byte	16
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,17,243,3,34
	.word	8534
	.byte	26,128,8
	.word	137
	.byte	27,255,7,0,16
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,17,246,3,34
	.word	8534
	.byte	6,18,31,9,4,7
	.byte	'MEMIF_JOB_OK',0,0,7
	.byte	'MEMIF_JOB_FAILED',0,1,7
	.byte	'MEMIF_JOB_PENDING',0,2,7
	.byte	'MEMIF_JOB_CANCELED',0,3,7
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,7
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,16
	.byte	'MemIf_JobResultType',0,18,39,2
	.word	10665
	.byte	16
	.byte	'NvM_BlockManagementType',0,2,45,3
	.word	237
	.byte	6,2,49,9,4,7
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,7
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,7
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,7
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,7
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,7
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,7
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,16
	.byte	'NvM_Prv_Activities_ten',0,2,58,3
	.word	10855
	.byte	6,2,104,9,4,7
	.byte	'NvM_Prv_idJob_Idle_e',0,0,7
	.byte	'NvM_Prv_idJob_Read_e',0,1,7
	.byte	'NvM_Prv_idJob_Write_e',0,2,7
	.byte	'NvM_Prv_idJob_Erase_e',0,3,7
	.byte	'NvM_Prv_idJob_Restore_e',0,4,7
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,7
	.byte	'NvM_Prv_idJob_Validate_e',0,6,7
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,7
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,7
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,7
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,7
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,7
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,7
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,16
	.byte	'NvM_Prv_idJob_ten',0,2,115,3
	.word	11096
	.byte	16
	.byte	'NvM_Prv_ServiceBit_tuo',0,2,168,1,16
	.word	154
	.byte	16
	.byte	'NvM_Prv_idService_tuo',0,2,173,1,15
	.word	137
	.byte	16
	.byte	'NvM_Prv_idQueue_tuo',0,2,206,1,15
	.word	137
	.byte	16
	.byte	'NvM_Prv_QueueEntry_tst',0,2,225,1,3
	.word	821
	.byte	10
	.word	137
	.byte	12,2,227,1,9,20,13
	.byte	'idJob_en',0
	.word	11096
	.byte	4,2,35,0,13
	.byte	'idBlock_uo',0
	.word	154
	.byte	2,2,35,4,13
	.byte	'RamBlock_pu8',0
	.word	11685
	.byte	4,2,35,8,13
	.byte	'idxDataset_u8',0
	.word	137
	.byte	1,2,35,12,13
	.byte	'Result_en',0
	.word	10665
	.byte	4,2,35,16,0,16
	.byte	'NvM_Prv_JobData_tst',0,2,240,1,3
	.word	11690
	.byte	16
	.byte	'rba_BswSrv_uint64',0,19,66,28
	.word	2544
	.byte	16
	.byte	'Rte_TaskRefType',0,20,184,1,32
	.word	5021
	.byte	16
	.byte	'Rte_EventRefType',0,20,185,1,32
	.word	137
	.byte	16
	.byte	'Rte_EventType',0,20,186,1,32
	.word	2513
	.byte	16
	.byte	'Rte_REActCounterType',0,20,252,1,15
	.word	137
	.byte	10
	.word	137
	.byte	16
	.byte	'Rte_REActCounterRefType',0,20,253,1,58
	.word	11958
	.byte	12,20,255,1,9,8,13
	.byte	'task',0
	.word	11854
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	11963
	.byte	4,2,35,4,0,16
	.byte	'Rte_REContainerType',0,20,130,2,3
	.word	11996
	.byte	9
	.word	4761
	.byte	10
	.word	12060
	.byte	10
	.word	137
	.byte	9
	.word	11996
	.byte	10
	.word	12075
	.byte	16
	.byte	'Rte_REContainerRefType',0,20,132,2,60
	.word	12080
	.byte	16
	.byte	'Rte_MSICounterType',0,20,149,2,16
	.word	154
	.byte	10
	.word	154
	.byte	16
	.byte	'Rte_MSICounterRefType',0,20,150,2,56
	.word	12145
	.byte	16
	.byte	'Rte_MSIPendingFlagType',0,20,152,2,17
	.word	137
	.byte	10
	.word	137
	.byte	16
	.byte	'Rte_MSIPendingFlagRefType',0,20,153,2,60
	.word	12213
	.byte	12,20,163,2,9,24,13
	.byte	'counter',0
	.word	12150
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	137
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	12218
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	11854
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	11963
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	137
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	154
	.byte	2,2,35,22,0,16
	.byte	'Rte_MSITableEntry',0,20,172,2,3
	.word	12253
	.byte	10
	.word	154
	.byte	10
	.word	137
	.byte	16
	.byte	'Rte_TaskArrayIndex',0,20,179,2,16
	.word	137
	.byte	16
	.byte	'Rte_NrWaitingTasks',0,20,180,2,16
	.word	137
	.byte	12,20,182,2,9,4,13
	.byte	'pending',0
	.word	137
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	137
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	137
	.byte	1,2,35,2,0,16
	.byte	'Rte_WaitableDatum',0,20,186,2,3
	.word	12471
	.byte	10
	.word	12471
	.byte	12,20,226,2,9,12,13
	.byte	'event_id',0
	.word	2513
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	12563
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	2513
	.byte	4,2,35,8,0,16
	.byte	'Rte_WOWP_NotificationType',0,20,230,2,3
	.word	12568
	.byte	9
	.word	12568
	.byte	10
	.word	12657
	.byte	16
	.byte	'Rte_WOWP_NotificationRefType',0,20,232,2,66
	.word	12662
	.byte	16
	.byte	'Rte_ARE_NotificationType',0,20,234,2,29
	.word	11996
	.byte	29
	.byte	'Rte_QTaskType',0,20,243,2,16,28,13
	.byte	'cmn',0
	.word	8285
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	11854
	.byte	4,2,35,24,0,16
	.byte	'Rte_QTaskType',0,20,246,2,3
	.word	12739
	.byte	29
	.byte	'Rte_QREType',0,20,250,2,16,28,13
	.byte	'cmn',0
	.word	8285
	.byte	24,2,35,0,13
	.byte	're',0
	.word	12085
	.byte	4,2,35,24,0,16
	.byte	'Rte_QREType',0,20,253,2,3
	.word	12810
	.byte	9
	.word	11996
	.byte	10
	.word	12875
	.byte	29
	.byte	'Rte_QWWPType',0,20,129,3,16,28,13
	.byte	'cmn',0
	.word	8285
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	12667
	.byte	4,2,35,24,0,16
	.byte	'Rte_QWWPType',0,20,132,3,3
	.word	12885
	.byte	9
	.word	12568
	.byte	10
	.word	12953
	.byte	29
	.byte	'Rte_QEvType',0,20,136,3,16,36,13
	.byte	'cmn',0
	.word	8285
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	11854
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	137
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	11963
	.byte	4,2,35,32,0,16
	.byte	'Rte_QEvType',0,20,141,3,3
	.word	12963
	.byte	29
	.byte	'Rte_QMSIType',0,20,145,3,16,48,13
	.byte	'cmn',0
	.word	8285
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	11854
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	137
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	11963
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	12150
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	12218
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	154
	.byte	2,2,35,44,0,16
	.byte	'Rte_QMSIType',0,20,153,3,3
	.word	13058
	.byte	16
	.byte	'NvM_Prv_BlockData_tst',0,5,36,3
	.word	915
	.byte	16
	.byte	'NvM_Prv_Service_Configuration_tst',0,5,49,3
	.word	1229
	.byte	14
	.word	137
	.byte	1,1,15
	.word	816
	.byte	0,10
	.word	13285
	.byte	16
	.byte	'NvM_Prv_ExplicitSync_Copy_tpfct',0,1,29,26
	.word	13298
	.byte	6,1,34,9,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_READ_ALL',0,1,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_WRITE_ALL',0,2,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_FIRST_INIT_ALL',0,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_INIT_AT_LAYOUT_CHANGE',0,8,7
	.byte	'NVM_PRV_BLOCK_FLAG_WRITE_PROTECTED',0,16,7
	.byte	'NVM_PRV_BLOCK_FLAG_WRITE_ONCE',0,32,7
	.byte	'NVM_PRV_BLOCK_FLAG_RESISTANT_TO_CHANGED_SW',0,192,0,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_SYNC_MECHANISM',0,128,1,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_AUTO_VALIDATION',0,128,2,7
	.byte	'NVM_PRV_BLOCK_FLAG_USE_VARIABLE_BLOCK_LENGTH',0,128,4,7
	.byte	'NVM_PRV_BLOCK_FLAG_SELECT_FOR_MIGRATION',0,128,8,7
	.byte	'NVM_PRV_BLOCK_FLAG_RAM_INIT_UNCONDITIONAL',0,128,16,0,16
	.byte	'NvM_Prv_BlockConfiguration_ten',0,1,85,3
	.word	13343
	.byte	9
	.word	154
	.byte	10
	.word	13906
	.byte	9
	.word	816
	.byte	10
	.word	13916
	.byte	14
	.word	137
	.byte	1,1,15
	.word	137
	.byte	15
	.word	137
	.byte	0,10
	.word	13926
	.byte	14
	.word	137
	.byte	1,1,15
	.word	137
	.byte	0,10
	.word	13949
	.byte	10
	.word	5519
	.byte	12,1,121,9,48,13
	.byte	'idBlockMemIf_u16',0
	.word	154
	.byte	2,2,35,0,13
	.byte	'nrBlockBytes_pu16',0
	.word	13911
	.byte	4,2,35,4,13
	.byte	'idxDevice_u8',0
	.word	137
	.byte	1,2,35,8,13
	.byte	'nrNvBlocks_u8',0
	.word	137
	.byte	1,2,35,9,13
	.byte	'nrRomBlocks_u8',0
	.word	137
	.byte	1,2,35,10,13
	.byte	'adrRamBlock_ppv',0
	.word	13921
	.byte	4,2,35,12,13
	.byte	'adrRomBlock_pcv',0
	.word	435
	.byte	4,2,35,16,13
	.byte	'SingleBlockCallback_pfct',0
	.word	13944
	.byte	4,2,35,20,13
	.byte	'SingleBlockStartCallback_pfct',0
	.word	13962
	.byte	4,2,35,24,13
	.byte	'InitBlockCallback_pfct',0
	.word	13967
	.byte	4,2,35,28,13
	.byte	'ReadRamBlockFromNvm_pfct',0
	.word	13298
	.byte	4,2,35,32,13
	.byte	'WriteRamBlockToNvm_pfct',0
	.word	13298
	.byte	4,2,35,36,13
	.byte	'BlockManagementType_en',0
	.word	237
	.byte	4,2,35,40,13
	.byte	'JobPriority_u8',0
	.word	137
	.byte	1,2,35,44,13
	.byte	'stFlags_u16',0
	.word	154
	.byte	2,2,35,46,0,16
	.byte	'NvM_Prv_BlockDescriptor_tst',0,1,138,2,3
	.word	13972
	.byte	26,160,5
	.word	13972
	.byte	27,13,0,9
	.word	14436
	.byte	34
	.byte	'NvM_Prv_BlockDescriptors_acst',0,1,169,2,45
	.word	14446
	.byte	1,1,26,28
	.word	154
	.byte	27,13,0,34
	.byte	'NvM_Prv_stRequests_rAMwAM_au16',0,3,68,15
	.word	14492
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L35:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,4,1,58,15,59,15,57,15,11
	.byte	15,0,0,7,40,0,3,8,28,13,0,0,8,59,0,3,8,0,0,9,38,0,73,19,0,0,10,15,0,73,19,0,0,11,11,1,0,0,12,19,1,58,15
	.byte	59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,21,1,73,19,54,15,39,12,0,0,15,5,0,73,19,0,0
	.byte	16,22,0,3,8,58,15,59,15,57,15,73,19,0,0,17,21,1,54,15,39,12,0,0,18,46,1,3,8,58,15,59,15,57,15,73,19,54
	.byte	15,39,12,63,12,60,12,0,0,19,46,1,49,19,0,0,20,5,0,49,19,0,0,21,29,1,49,19,0,0,22,11,0,49,19,0,0,23,46
	.byte	1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0
	.byte	0,25,21,0,54,15,0,0,26,1,1,11,15,73,19,0,0,27,33,0,47,15,0,0,28,21,0,54,15,39,12,0,0,29,19,1,3,8,58,15
	.byte	59,15,57,15,11,15,0,0,30,23,1,58,15,59,15,57,15,11,15,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21
	.byte	0,73,19,54,15,39,12,0,0,33,53,0,73,19,0,0,34,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L36:
	.word	.L133-.L132
.L132:
	.half	3
	.word	.L135-.L134
.L134:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockDescriptor.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockData.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_Service.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_Queue.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_ErrorDetection.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0,0
.L135:
.L133:
	.sdecl	'.debug_info',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_info'
.L37:
	.word	1112
	.half	3
	.word	.L38
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L40,.L39
	.byte	2
	.word	.L33
	.byte	3
	.byte	'NvM_Prv_Service_Initiate',0,1,40,16
	.word	.L42
	.byte	1,1,1
	.word	.L32,.L43,.L31
	.byte	4
	.byte	'idQueue_uo',0,1,40,61
	.word	.L42,.L44
	.byte	4
	.byte	'BlockData_pcst',0,1,41,70
	.word	.L45,.L46
	.byte	4
	.byte	'ServiceConfiguration_pcst',0,1,42,82
	.word	.L47,.L48
	.byte	5
	.word	.L32,.L43
	.byte	6
	.byte	'stReturn_uo',0,1,44,20
	.word	.L42,.L49
	.byte	7
	.word	.L50
	.byte	6
	.byte	'isCheckParameterSuccessful_b',0,1,54,21
	.word	.L42,.L55
	.byte	8
	.word	.L56,.L51,.L52
	.byte	9
	.word	.L57,.L58
	.byte	9
	.word	.L59,.L60
	.byte	9
	.word	.L61,.L62
	.byte	10
	.word	.L63,.L64
	.byte	6
	.byte	'stBlockData_uo',0,1,118,20
	.word	.L42,.L66
	.byte	6
	.byte	'isCheckBlockDataSuccessful_b',0,1,119,13
	.word	.L42,.L67
	.byte	6
	.byte	'isBlockPending_b',0,1,121,13
	.word	.L42,.L68
	.byte	6
	.byte	'idBlockForPendingCheck_uo',0,1,123,21
	.word	.L69,.L70
	.byte	8
	.word	.L71,.L51,.L52
	.byte	9
	.word	.L72,.L73
	.byte	9
	.word	.L74,.L75
	.byte	9
	.word	.L76,.L77
	.byte	10
	.word	.L78,.L79
	.byte	6
	.byte	'stBlockData_uo',0,1,171,1,20
	.word	.L42,.L82
	.byte	6
	.byte	'isReqEnqueued_b',0,1,172,1,13
	.word	.L42,.L83
	.byte	0,0,8
	.word	.L71,.L65,.L80
	.byte	9
	.word	.L72,.L73
	.byte	9
	.word	.L74,.L75
	.byte	9
	.word	.L76,.L77
	.byte	0,8
	.word	.L105,.L106,.L107
	.byte	9
	.word	.L108,.L109
	.byte	11
	.word	.L110,.L111
	.byte	0,8
	.word	.L105,.L112,.L113
	.byte	9
	.word	.L108,.L109
	.byte	0,8
	.word	.L71,.L81,.L19
	.byte	9
	.word	.L72,.L73
	.byte	9
	.word	.L74,.L75
	.byte	9
	.word	.L76,.L77
	.byte	0,8
	.word	.L105,.L114,.L115
	.byte	9
	.word	.L108,.L109
	.byte	0,8
	.word	.L71,.L2,.L54
	.byte	9
	.word	.L72,.L73
	.byte	9
	.word	.L74,.L75
	.byte	9
	.word	.L76,.L77
	.byte	0,0,0,8
	.word	.L56,.L65,.L54
	.byte	9
	.word	.L57,.L58
	.byte	9
	.word	.L59,.L60
	.byte	9
	.word	.L61,.L62
	.byte	0,0,8
	.word	.L84,.L85,.L53
	.byte	9
	.word	.L86,.L87
	.byte	9
	.word	.L88,.L89
	.byte	9
	.word	.L90,.L91
	.byte	12
	.word	.L92,.L85,.L53
	.byte	6
	.byte	'stReturn_b',0,1,85,13
	.word	.L42,.L93
	.byte	12
	.word	.L94,.L95,.L11
	.byte	6
	.byte	'isBlockLengthValid_b',0,1,93,25
	.word	.L42,.L96
	.byte	6
	.byte	'isSanitizedByReadAll_b',0,1,98,25
	.word	.L42,.L97
	.byte	8
	.word	.L98,.L95,.L10
	.byte	9
	.word	.L99,.L100
	.byte	11
	.word	.L101,.L102
	.byte	0,8
	.word	.L98,.L103,.L104
	.byte	9
	.word	.L99,.L100
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_abbrev'
.L38:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0
	.byte	0,10,11,1,49,16,85,6,0,0,11,11,0,49,16,85,6,0,0,12,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_line'
.L39:
	.word	.L137-.L136
.L136:
	.half	3
	.word	.L139-.L138
.L138:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Service.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockDescriptor.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\NvM\\src\\NvM_Prv_BlockData.h',0,0,0,0,0
.L139:
	.byte	5,16,7,0,5,2
	.word	.L32
	.byte	3,39,1,5,32,9
	.half	.L51-.L32
	.byte	3,4,1,5,10,9
	.half	.L52-.L51
	.byte	3,3,1,5,9,9
	.half	.L140-.L52
	.byte	1,5,10,7,9
	.half	.L141-.L140
	.byte	3,1,1,5,19,9
	.half	.L142-.L141
	.byte	1,5,77,7,9
	.half	.L143-.L142
	.byte	3,3,1,9
	.half	.L144-.L143
	.byte	3,1,1,5,24,9
	.half	.L85-.L144
	.byte	3,33,1,5,63,9
	.half	.L120-.L85
	.byte	3,1,1,5,5,9
	.half	.L116-.L120
	.byte	1,5,77,7,9
	.half	.L145-.L116
	.byte	3,2,1,5,9,9
	.half	.L146-.L145
	.byte	1,5,13,7,9
	.half	.L147-.L146
	.byte	3,2,1,4,2,5,87,7,9
	.half	.L95-.L147
	.byte	3,188,2,1,5,13,9
	.half	.L148-.L95
	.byte	3,127,1,5,55,7,9
	.half	.L149-.L148
	.byte	3,1,1,5,26,9
	.half	.L150-.L149
	.byte	1,5,55,9
	.half	.L151-.L150
	.byte	1,5,67,9
	.half	.L152-.L151
	.byte	1,5,14,9
	.half	.L153-.L152
	.byte	1,5,23,9
	.half	.L154-.L153
	.byte	1,5,20,7,9
	.half	.L155-.L154
	.byte	3,1,1,5,87,9
	.half	.L156-.L155
	.byte	3,127,1,5,5,9
	.half	.L7-.L156
	.byte	3,127,1,4,1,5,79,9
	.half	.L10-.L7
	.byte	3,205,125,1,5,21,9
	.half	.L103-.L10
	.byte	3,2,1,5,32,7,9
	.half	.L104-.L103
	.byte	3,2,1,5,67,9
	.half	.L11-.L104
	.byte	3,126,1,5,28,9
	.half	.L6-.L11
	.byte	3,7,1,5,5,9
	.half	.L4-.L6
	.byte	3,4,1,5,9,9
	.half	.L14-.L4
	.byte	3,67,1,5,50,7,9
	.half	.L53-.L14
	.byte	3,4,1,5,54,9
	.half	.L121-.L53
	.byte	3,2,1,5,17,9
	.half	.L157-.L121
	.byte	1,5,13,9
	.half	.L158-.L157
	.byte	1,5,95,7,9
	.half	.L159-.L158
	.byte	3,2,1,5,13,9
	.half	.L16-.L159
	.byte	3,3,1,5,35,7,9
	.half	.L65-.L16
	.byte	3,57,1,5,42,9
	.half	.L80-.L65
	.byte	3,1,1,5,30,9
	.half	.L106-.L80
	.byte	3,2,1,5,78,9
	.half	.L107-.L106
	.byte	3,2,1,5,46,9
	.half	.L124-.L107
	.byte	3,10,1,5,9,9
	.half	.L160-.L124
	.byte	1,5,5,9
	.half	.L161-.L160
	.byte	1,5,87,7,9
	.half	.L162-.L161
	.byte	3,2,1,5,5,9
	.half	.L18-.L162
	.byte	3,3,1,5,38,7,9
	.half	.L163-.L18
	.byte	3,7,1,5,9,9
	.half	.L164-.L163
	.byte	1,4,3,5,62,7,9
	.half	.L112-.L164
	.byte	3,31,1,5,50,9
	.half	.L165-.L112
	.byte	1,5,13,9
	.half	.L123-.L165
	.byte	1,5,15,7,9
	.half	.L166-.L123
	.byte	3,1,1,5,45,9
	.half	.L167-.L166
	.byte	1,5,58,9
	.half	.L168-.L167
	.byte	1,5,62,7,9
	.half	.L21-.L168
	.byte	3,127,1,5,5,9
	.half	.L22-.L21
	.byte	1,4,1,5,14,9
	.half	.L20-.L22
	.byte	3,102,1,5,84,7,9
	.half	.L113-.L20
	.byte	3,4,1,5,35,9
	.half	.L81-.L113
	.byte	3,17,1,5,29,9
	.half	.L169-.L81
	.byte	3,1,1,5,5,9
	.half	.L127-.L169
	.byte	3,3,1,5,83,7,9
	.half	.L170-.L127
	.byte	3,3,1,5,5,9
	.half	.L25-.L170
	.byte	3,4,1,5,13,7,9
	.half	.L171-.L25
	.byte	3,2,1,5,9,9
	.half	.L172-.L171
	.byte	1,5,31,7,9
	.half	.L173-.L172
	.byte	3,2,1,5,24,9
	.half	.L27-.L173
	.byte	3,2,1,5,5,9
	.half	.L26-.L27
	.byte	3,3,1,5,72,9
	.half	.L19-.L26
	.byte	3,98,1,9
	.half	.L174-.L19
	.byte	3,1,1,5,43,9
	.half	.L114-.L174
	.byte	3,1,1,5,5,9
	.half	.L175-.L114
	.byte	3,1,1,9
	.half	.L2-.L175
	.byte	3,162,127,1,5,1,9
	.half	.L30-.L2
	.byte	3,1,1,7,9
	.half	.L41-.L30
	.byte	0,1,1
.L137:
	.sdecl	'.debug_ranges',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_ranges'
.L40:
	.word	-1,.L32,0,.L41-.L32,0,0
.L50:
	.word	-1,.L32,.L51-.L32,.L52-.L32,.L53-.L32,.L54-.L32,0,0
.L64:
	.word	-1,.L32,.L51-.L32,.L52-.L32,.L65-.L32,.L54-.L32,0,0
.L79:
	.word	-1,.L32,.L51-.L32,.L52-.L32,.L65-.L32,.L80-.L32,.L81-.L32,.L19-.L32,.L2-.L32,.L54-.L32,0,0
.L102:
	.word	-1,.L32,.L95-.L32,.L10-.L32,.L103-.L32,.L104-.L32,0,0
.L111:
	.word	-1,.L32,.L106-.L32,.L107-.L32,.L112-.L32,.L113-.L32,.L114-.L32,.L115-.L32,0,0
	.sdecl	'.debug_loc',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L32,0,.L116-.L32
	.half	1
	.byte	100
	.word	.L119-.L32,.L43-.L32
	.half	1
	.byte	108
	.word	.L122-.L32,.L16-.L32
	.half	1
	.byte	100
	.word	.L125-.L32,.L18-.L32
	.half	1
	.byte	100
	.word	.L129-.L32,.L25-.L32
	.half	1
	.byte	100
	.word	.L130-.L32,.L27-.L32
	.half	1
	.byte	100
	.word	0,0
.L60:
	.word	0,0
.L75:
	.word	0,0
.L31:
	.word	-1,.L32,0,.L43-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L48:
	.word	-1,.L32,0,.L116-.L32
	.half	1
	.byte	101
	.word	.L51-.L32,.L81-.L32
	.half	1
	.byte	111
	.word	0,0
.L62:
	.word	0,0
.L77:
	.word	0,0
.L70:
	.word	-1,.L32,.L124-.L32,.L2-.L32
	.half	1
	.byte	89
	.word	.L126-.L32,.L123-.L32
	.half	1
	.byte	84
	.word	0,0
.L89:
	.word	0,0
.L109:
	.word	0,0
.L100:
	.word	0,0
.L44:
	.word	-1,.L32,0,.L117-.L32
	.half	1
	.byte	84
	.word	.L118-.L32,.L43-.L32
	.half	1
	.byte	91
	.word	.L128-.L32,.L25-.L32
	.half	1
	.byte	84
	.word	0,0
.L87:
	.word	0,0
.L58:
	.word	0,0
.L73:
	.word	0,0
.L91:
	.word	0,0
.L96:
	.word	0,0
.L68:
	.word	-1,.L32,.L107-.L32,.L2-.L32
	.half	1
	.byte	88
	.word	0,0
.L67:
	.word	-1,.L32,.L106-.L32,.L123-.L32
	.half	1
	.byte	82
	.word	0,0
.L55:
	.word	-1,.L32,.L121-.L32,.L106-.L32
	.half	1
	.byte	82
	.word	0,0
.L83:
	.word	-1,.L32,.L127-.L32,.L27-.L32
	.half	1
	.byte	82
	.word	0,0
.L97:
	.word	-1,.L32,.L103-.L32,.L6-.L32
	.half	1
	.byte	82
	.word	0,0
.L66:
	.word	0,0
.L82:
	.word	-1,.L32,.L52-.L32,.L43-.L32
	.half	1
	.byte	92
	.word	.L54-.L32,.L43-.L32
	.half	1
	.byte	82
	.word	0,0
.L93:
	.word	-1,.L32,.L120-.L32,.L2-.L32
	.half	1
	.byte	90
	.word	0,0
.L49:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L176:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('NvM_Prv_Service_Initiate')
	.sect	'.debug_frame'
	.word	12
	.word	.L176,.L32,.L43-.L32

; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   189      }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   190  
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   191      return stBlockData_uo;
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   192  }
; BSW\src\BSW\Gen\NvM\src\NvM_Service.c	   193  

	; Module end
