	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14992a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\MemIf\\MemIf_MainFunction.src BSW\\src\\BSW\\Gen\\MemIf\\src\\MemIf_MainFunction.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\MemIf\\src\\MemIf_MainFunction.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	9219
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\MemIf\\src\\MemIf_MainFunction.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	146
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	148
	.byte	5
	.byte	'char',0,1,6,4
	.byte	'sint8',0,2,76,25
	.word	171
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,2,81,25
	.word	193
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,91,25
	.word	224
	.byte	5
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,2,106,24
	.word	261
	.byte	5
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,2,111,30
	.word	292
	.byte	4
	.byte	'boolean',0,2,127,25
	.word	193
	.byte	4
	.byte	'StatusType',0,3,191,1,27
	.word	193
	.byte	4
	.byte	'Std_ReturnType',0,3,199,1,15
	.word	193
	.byte	6,3,206,1,9,8,7
	.byte	'vendorID',0
	.word	224
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	224
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	193
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	193
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	193
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,3,213,1,3
	.word	393
	.byte	8,4,31,9,4,9
	.byte	'MEMIF_JOB_OK',0,0,9
	.byte	'MEMIF_JOB_FAILED',0,1,9
	.byte	'MEMIF_JOB_PENDING',0,2,9
	.byte	'MEMIF_JOB_CANCELED',0,3,9
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,9
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,4
	.byte	'MemIf_JobResultType',0,4,39,2
	.word	543
	.byte	8,4,41,9,4,9
	.byte	'MEMIF_MODE_SLOW',0,0,9
	.byte	'MEMIF_MODE_FAST',0,1,0,4
	.byte	'MemIf_ModeType',0,4,45,2
	.word	701
	.byte	6,5,93,9,8,7
	.byte	'Class',0
	.word	193
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	193
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	261
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,5,97,3
	.word	766
	.byte	10,68
	.word	261
	.byte	11,16,0,6,5,154,1,9,68,7
	.byte	'store',0
	.word	846
	.byte	68,2,35,0,0,10,68
	.word	855
	.byte	11,0,0,4
	.byte	'Os_JumpBufType',0,5,156,1,3
	.word	877
	.byte	4
	.byte	'Os_StackTraceType',0,5,174,1,18
	.word	261
	.byte	6,5,175,1,9,8,7
	.byte	'sp',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	261
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,5,175,1,63
	.word	937
	.byte	4
	.byte	'Os_StackSizeType',0,5,176,1,27
	.word	937
	.byte	12,1,1,3
	.word	1022
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,5,179,1,16
	.word	1025
	.byte	4
	.byte	'ApplicationType',0,5,193,1,23
	.word	193
	.byte	13
	.byte	'Os_ApplicationConfigurationType_s',0,5,198,1,16,2,7
	.byte	'app_id',0
	.word	193
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,5,201,1,3
	.word	1088
	.byte	4
	.byte	'Os_CoreStateType',0,5,203,1,16
	.word	261
	.byte	4
	.byte	'AreaIdType',0,5,204,1,16
	.word	224
	.byte	4
	.byte	'Os_PeripheralAddressType',0,5,212,1,22
	.word	261
	.byte	4
	.byte	'TickType',0,5,221,1,22
	.word	261
	.byte	4
	.byte	'Os_StopwatchTickType',0,5,225,1,22
	.word	261
	.byte	3
	.word	261
	.byte	4
	.byte	'Os_Lockable',0,5,234,1,18
	.word	1330
	.byte	4
	.byte	'CoreIdType',0,5,236,1,16
	.word	224
	.byte	4
	.byte	'SpinlockIdType',0,5,237,1,16
	.word	224
	.byte	8,5,239,1,9,4,9
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,9
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,5,239,1,74
	.word	1400
	.byte	8,5,174,2,9,4,9
	.byte	'APPLICATION_ACCESSIBLE',0,0,9
	.byte	'APPLICATION_RESTARTING',0,1,9
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,5,174,2,92
	.word	1493
	.byte	14
	.byte	'void',0,3
	.word	1605
	.byte	15,1,1,16
	.word	193
	.byte	16
	.word	1611
	.byte	0,3
	.word	1616
	.byte	4
	.byte	'Os_FunctionEntryType',0,5,183,2,16
	.word	1630
	.byte	13
	.byte	'Os_MeterInfoType_s',0,5,193,2,16,48,7
	.byte	'elapsed',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	261
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	261
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	937
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	937
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	937
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	937
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,5,202,2,3
	.word	1665
	.byte	3
	.word	1665
	.byte	4
	.byte	'Os_MeterInfoRefType',0,5,203,2,50
	.word	1863
	.byte	4
	.byte	'EventMaskType',0,5,206,2,15
	.word	193
	.byte	4
	.byte	'Os_imaskType',0,5,211,2,16
	.word	261
	.byte	13
	.byte	'Os_ISRDynType_s',0,5,213,2,16,48,7
	.byte	'meter',0
	.word	1665
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,5,215,2,3
	.word	1942
	.byte	3
	.word	1942
	.byte	17
	.word	2003
	.byte	13
	.byte	'Os_ISRType_s',0,5,216,2,16,24,7
	.byte	'entry_function',0
	.word	1030
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	2008
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	261
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	937
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	193
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,5,223,2,3
	.word	2013
	.byte	3
	.word	1022
	.byte	17
	.word	2013
	.byte	3
	.word	2172
	.byte	4
	.byte	'ISRType',0,5,224,2,46
	.word	2177
	.byte	4
	.byte	'Os_bitmask',0,5,239,2,22
	.word	261
	.byte	4
	.byte	'Os_pset0Type',0,5,240,2,20
	.word	261
	.byte	4
	.byte	'Os_pset1Type',0,5,241,2,20
	.word	261
	.byte	4
	.byte	'Os_pset2Type',0,5,242,2,20
	.word	261
	.byte	18,5,243,2,9,4,7
	.byte	'p0',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	261
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,5,247,2,3
	.word	2285
	.byte	18,5,249,2,9,4,7
	.byte	't0',0
	.word	261
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	261
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	261
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,5,253,2,3
	.word	2349
	.byte	4
	.byte	'Os_ActivationCountType',0,5,254,2,23
	.word	193
	.byte	13
	.byte	'Os_TaskDynType_s',0,5,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	886
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	1665
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	193
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,5,132,3,3
	.word	2447
	.byte	10,68
	.word	855
	.byte	11,0,0,3
	.word	2447
	.byte	17
	.word	2573
	.byte	13
	.byte	'Os_TaskType_s',0,5,134,3,16,40,7
	.byte	'dynamic',0
	.word	2578
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	1030
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	2285
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	2349
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	2349
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	224
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	261
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	937
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	193
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	193
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,5,146,3,3
	.word	2583
	.byte	17
	.word	2583
	.byte	3
	.word	2833
	.byte	4
	.byte	'TaskType',0,5,147,3,47
	.word	2838
	.byte	19
	.byte	'Os_TaskStateType',0,5,155,3,6,4,9
	.byte	'SUSPENDED',0,0,9
	.byte	'READY',0,1,9
	.byte	'WAITING',0,2,9
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,5,156,3,31
	.word	2861
	.byte	18,5,167,3,3,4,7
	.byte	'tpmask',0
	.word	2349
	.byte	4,2,35,0,0,13
	.byte	'Os_ResourceDynType_s',0,5,166,3,16,4,7
	.byte	'saved_priority',0
	.word	2948
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,5,170,3,3
	.word	2971
	.byte	3
	.word	2971
	.byte	17
	.word	3051
	.byte	13
	.byte	'Os_ResourceType_s',0,5,171,3,16,12,7
	.byte	'dynamic',0
	.word	3056
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	2349
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,5,175,3,3
	.word	3061
	.byte	6,5,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	261
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,5,185,3,3
	.word	3160
	.byte	6,5,206,3,9,8,7
	.byte	'Running',0
	.word	193
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	193
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	261
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,5,210,3,3
	.word	3255
	.byte	20
	.word	193
	.byte	1,1,3
	.word	3341
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,5,217,3,22
	.word	3348
	.byte	13
	.byte	's_swd',0,5,222,3,12,4,7
	.byte	'count',0
	.word	261
	.byte	4,2,35,0,0,18,5,221,3,3,4,7
	.byte	'sw',0
	.word	3384
	.byte	4,2,35,0,0,13
	.byte	'Os_CounterDynType_s',0,5,220,3,16,4,7
	.byte	'type_dependent',0
	.word	3412
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,5,226,3,3
	.word	3431
	.byte	3
	.word	3431
	.byte	17
	.word	3509
	.byte	13
	.byte	'Os_CounterType_s',0,5,227,3,16,28,7
	.byte	'dynamic',0
	.word	3514
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	3353
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	3160
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	1611
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	193
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,5,234,3,3
	.word	3519
	.byte	3
	.word	3341
	.byte	17
	.word	3519
	.byte	3
	.word	3671
	.byte	4
	.byte	'CounterType',0,5,235,3,52
	.word	3676
	.byte	19
	.byte	'Os_ScheduleTableStatusType',0,5,240,3,6,4,9
	.byte	'SCHEDULETABLE_STOPPED',0,0,9
	.byte	'SCHEDULETABLE_NEXT',0,1,9
	.byte	'SCHEDULETABLE_WAITING',0,2,9
	.byte	'SCHEDULETABLE_RUNNING',0,3,9
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,5,241,3,41
	.word	3702
	.byte	17
	.word	.L6-.L3
	.byte	3
	.word	3902
	.byte	4
	.byte	'ScheduleTableType',0,5,128,4,58
	.word	3907
	.byte	13
	.byte	'Os_ScheduleTableDynType_s',0,5,130,4,16,16,7
	.byte	'match',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	3912
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	3702
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	224
	.byte	2,2,35,12,0,3
	.word	3939
	.byte	17
	.word	4032
.L6:
	.byte	13
	.byte	'Os_ScheduleTableType_s',0,5,247,3,16,16,7
	.byte	'dynamic',0
	.word	4037
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	3681
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	193
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	224
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	193
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	193
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	193
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,5,255,3,3
	.word	4042
	.byte	17
	.word	4042
	.byte	3
	.word	4222
	.byte	17
	.word	3519
	.byte	3
	.word	4232
	.byte	21
	.word	1335
	.byte	21
	.word	2285
	.byte	21
	.word	2182
	.byte	21
	.word	2843
	.byte	21
	.word	2349
	.byte	21
	.word	193
	.byte	21
	.word	2843
	.byte	13
	.byte	'Os_ControlledCoreType_s',0,5,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	766
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	4242
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	4247
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	4252
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	4257
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	4262
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	1868
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	1665
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	193
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	4267
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	937
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	193
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	4272
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	937
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	193
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	193
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	193
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,5,141,7,3
	.word	4277
	.byte	3
	.word	261
	.byte	17
	.word	2013
	.byte	3
	.word	4733
	.byte	17
	.word	2583
	.byte	3
	.word	4743
	.byte	3
	.word	1665
	.byte	13
	.byte	'Os_AnyCoreType_s',0,5,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	261
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	261
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	261
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	261
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	886
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	193
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,5,160,7,3
	.word	4758
	.byte	4
	.byte	'unsigned_int',0,6,116,22
	.word	261
	.byte	4
	.byte	'PduIdType',0,7,22,19
	.word	224
	.byte	4
	.byte	'PduLengthType',0,7,26,19
	.word	224
	.byte	8,8,113,9,4,9
	.byte	'TP_DATACONF',0,0,9
	.byte	'TP_DATARETRY',0,1,9
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,8,118,3
	.word	5060
	.byte	4
	.byte	'Can_IdType',0,9,32,16
	.word	261
	.byte	4
	.byte	'Can_HwHandleType',0,9,43,16
	.word	224
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,10,219,3,16
	.word	261
	.byte	13
	.byte	'Can_TxHwObjectConfigType',0,10,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	193
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	193
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	261
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,10,252,3,3
	.word	5216
	.byte	13
	.byte	'Can_RxHwObjectConfigType',0,10,129,4,16,12,7
	.byte	'MaskRef',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	193
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	193
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,10,147,4,3
	.word	5352
	.byte	10,4
	.word	193
	.byte	11,3,0,13
	.byte	'Can_ControllerMOMapConfigType',0,10,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	5492
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,10,184,4,3
	.word	5501
	.byte	13
	.byte	'Can_NPCRValueType',0,10,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	224
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,10,191,4,3
	.word	5602
	.byte	13
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	224
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,198,4,3
	.word	5677
	.byte	17
	.word	5677
	.byte	3
	.word	5842
	.byte	13
	.byte	'Can_BaudrateConfigPtrType',0,10,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	5847
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,10,204,4,3
	.word	5852
	.byte	13
	.byte	'Can_EventHandlingType',0,10,226,4,16,4,7
	.byte	'CanEventType',0
	.word	5492
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,10,229,4,3
	.word	5952
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,11,130,1,15
	.word	193
	.byte	4
	.byte	'Rte_TransformerClass',0,11,131,1,15
	.word	193
	.byte	6,11,168,1,9,12,7
	.byte	'in',0
	.word	1611
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	1611
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	224
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	193
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,11,173,1,3
	.word	6098
	.byte	8,11,175,1,9,4,9
	.byte	'RTE_DRA',0,0,9
	.byte	'RTE_WOWP',0,1,9
	.byte	'RTE_TASK',0,2,9
	.byte	'RTE_ARE',0,3,9
	.byte	'RTE_EV',0,4,9
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,11,182,1,3
	.word	6185
	.byte	10,128,8
	.word	193
	.byte	11,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,12,50,15
	.word	6283
	.byte	4
	.byte	'CanIf_u32_impl',0,12,69,16
	.word	261
	.byte	4
	.byte	'CanIf_u16_impl',0,12,71,16
	.word	224
	.byte	4
	.byte	'CanIf_u8_impl',0,12,73,15
	.word	193
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,12,88,15
	.word	193
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,12,90,15
	.word	193
	.byte	6,12,92,9,2,7
	.byte	'DeviceMode',0
	.word	193
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	193
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,12,95,3
	.word	6474
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,12,100,15
	.word	193
	.byte	4
	.byte	'CanSM_boolean_Impl',0,12,120,15
	.word	193
	.byte	4
	.byte	'CanSM_u8_Impl',0,12,123,15
	.word	193
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,12,128,1,15
	.word	193
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,12,132,1,15
	.word	193
	.byte	4
	.byte	'CanSM_u16_Impl',0,12,136,1,16
	.word	224
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,12,138,1,15
	.word	193
	.byte	6,12,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	224
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	193
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,12,143,1,3
	.word	6815
	.byte	4
	.byte	'Com_impl_u16',0,12,154,1,16
	.word	224
	.byte	4
	.byte	'Com_impl_u8',0,12,157,1,15
	.word	193
	.byte	4
	.byte	'ComM_uint32_Impl',0,12,173,1,16
	.word	261
	.byte	4
	.byte	'ComM_uint16_Impl',0,12,175,1,16
	.word	224
	.byte	4
	.byte	'ComM_uint8_Impl',0,12,177,1,15
	.word	193
	.byte	4
	.byte	'ComM_bool_Impl',0,12,179,1,15
	.word	193
	.byte	6,12,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	224
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	193
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	193
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	193
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	193
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	193
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	193
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	193
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	193
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	193
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	193
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	193
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	193
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,12,197,1,3
	.word	7047
	.byte	6,12,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	224
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	224
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	193
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	193
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	193
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	193
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	193
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,12,214,1,3
	.word	7551
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,12,252,1,15
	.word	193
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	12,138,2,15
	.word	193
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,12,146,2,15
	.word	193
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,12,150,2,15
	.word	193
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,12,154,2,15
	.word	193
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,12,243,3,34
	.word	6294
	.byte	10,128,8
	.word	193
	.byte	11,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,12,246,3,34
	.word	6294
	.byte	4
	.byte	'Fls_LengthType',0,13,173,3,16
	.word	261
	.byte	13
	.byte	'Fls_JobStartType',0,13,175,3,16,1,22
	.byte	'Reserved1',0,1
	.word	193
	.byte	1,7,2,35,0,22
	.byte	'Write',0,1
	.word	193
	.byte	1,6,2,35,0,22
	.byte	'Erase',0,1
	.word	193
	.byte	1,5,2,35,0,22
	.byte	'Read',0,1
	.word	193
	.byte	1,4,2,35,0,22
	.byte	'Compare',0,1
	.word	193
	.byte	1,3,2,35,0,22
	.byte	'Reserved2',0,1
	.word	193
	.byte	3,0,2,35,0,0,4
	.byte	'Fls_JobStartType',0,13,183,3,3
	.word	8393
	.byte	4
	.byte	'Fls_17_Pmu_Job_Type',0,13,187,3,15
	.word	193
	.byte	3
	.word	193
	.byte	17
	.word	193
	.byte	3
	.word	8588
	.byte	10,2
	.word	193
	.byte	11,1,0,13
	.byte	'Fls_17_Pmu_StateType',0,13,198,3,16,48,7
	.byte	'FlsReadAddress',0
	.word	261
	.byte	4,2,35,0,7
	.byte	'FlsWriteAddress',0
	.word	261
	.byte	4,2,35,4,7
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	261
	.byte	4,2,35,8,7
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	261
	.byte	4,2,35,12,7
	.byte	'FlsReadLength',0
	.word	261
	.byte	4,2,35,16,7
	.byte	'FlsWriteLength',0
	.word	261
	.byte	4,2,35,20,7
	.byte	'FlsReadBufferPtr',0
	.word	8583
	.byte	4,2,35,24,7
	.byte	'FlsWriteBufferPtr',0
	.word	8593
	.byte	4,2,35,28,7
	.byte	'FlsJobResult',0
	.word	543
	.byte	4,2,35,32,7
	.byte	'FlsMode',0
	.word	701
	.byte	4,2,35,36,7
	.byte	'NotifCaller',0
	.word	193
	.byte	1,2,35,40,7
	.byte	'JobStarted',0
	.word	8393
	.byte	1,2,35,41,7
	.byte	'FlsJobType',0
	.word	8598
	.byte	2,2,35,42,7
	.byte	'FlsOper',0
	.word	193
	.byte	1,2,35,44,7
	.byte	'FlsTimeoutErr',0
	.word	193
	.byte	1,2,35,45,7
	.byte	'FlsTimeoutControl',0
	.word	193
	.byte	1,2,35,46,0,4
	.byte	'Fls_17_Pmu_StateType',0,13,130,4,3
	.word	8607
	.byte	4
	.byte	'Fls_NotifFunctionPtrType',0,13,137,4,16
	.word	1025
	.byte	17
	.word	261
	.byte	3
	.word	9085
	.byte	15,1,1,16
	.word	261
	.byte	16
	.word	261
	.byte	16
	.word	9090
	.byte	16
	.word	193
	.byte	0,3
	.word	9095
	.byte	4
	.byte	'Fls_WriteCmdPtrType',0,13,139,4,16
	.word	9119
	.byte	15,1,1,16
	.word	261
	.byte	0,3
	.word	9153
	.byte	4
	.byte	'Fls_EraseCmdPtrType',0,13,144,4,16
	.word	9162
	.byte	4
	.byte	'rba_BswSrv_uint64',0,14,66,28
	.word	292
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,8,4,1,58,15,59,15,57,15,11,15,0,0,9,40,0,3,8,28,13,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0
	.byte	12,21,0,54,15,39,12,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15,0,0,14,59,0,3,8,0,0,15,21,1,54,15,39,12,0
	.byte	0,16,5,0,73,19,0,0,17,38,0,73,19,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,20,21,0,73,19,54,15,39,12,0,0,21,53,0,73,19,0,0,22,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0
	.byte	0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\MemIf\\src\\MemIf_MainFunction.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     1  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     2  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     3  #include "MemIf.h"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     4  #include "MemIf_Cfg_SchM.h"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     5  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     6  #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     7  #include "Det.h"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     8  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != MEMIF_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	     9  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    10  #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    11  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || ((DET_AR_RELEASE_MINOR_VERSION != 0) && (DET_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    12  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    13  #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    14  #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    15  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    16  #define MEMIF_START_SEC_CODE
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    17  #include "MemIf_MemMap.h"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    18  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    19  #if (MEMIF_FEE_AND_EA_USED == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    20  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    21  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    22   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    23   * MemIf_Cancel(): MemIf_Cancel interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    24   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    25   * This function cancels an order.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    26   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    27   * \param    DeviceIndex: Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    28   * \return   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    29   * \retval   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    30   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    31   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    32   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    33   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    34  void MemIf_Cancel(uint8 DeviceIndex)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    35  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    36      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    37      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    38      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    39  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    40      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    41      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    42          Fee_Cancel();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    43      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    44      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    45      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    46          Ea_Cancel();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    47      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    48  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    49  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    50  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    51   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    52   * MemIf_Write(): MemIf_Write interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    53   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    54   * This function places a write job to the FEE or EA.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    55   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    56   * \param    DeviceIndex:   Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    57   * \param    Blocknumber:   Nvm index (based on this index the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    58   *                          corresponding Fee index will be searched
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    59   *                          and placed into the order queue)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    60   * \param    DataBufferPtr: Pointer to data buffer
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    61   * \return   Function success
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    62   * \retval   E_OK:              Order was successfully placed
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    63   * \retval   E_NOT_OK:          Order was not placed because the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    64   *                              respective order queue entry is
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    65   *                              not empty or the module has not been
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    66   *                              initialized yet
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    67   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    68   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    69   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    70   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    71  Std_ReturnType MemIf_Write(uint8 DeviceIndex, uint16 BlockNumber, uint8* DataBufferPtr)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    72  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    73      VAR(Std_ReturnType,AUTOMATIC) xRetVal = E_NOT_OK;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    74  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    75      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    76      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    77      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    78  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    79      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    80      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    81          xRetVal = Fee_Write(BlockNumber,DataBufferPtr);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    82      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    83      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    84      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    85          xRetVal = Ea_Write(BlockNumber,DataBufferPtr);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    86      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    87      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    88  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    89  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    90  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    91   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    92   * MemIf_Read(): MemIf_Read interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    93   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    94   * This function places a read job to the FEE or EA.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    95   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    96   * \param    DeviceIndex:   Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    97   * \param    Blocknumber:   Nvm index (based on this index the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    98   *                          corresponding Fee index will be searched
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	    99   *                          and placed into the order queue)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   100   * \param    BlockOffset:   Offset of block
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   101   * \param    DataBufferPtr: Pointer to data buffer
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   102   * \param    Length:        Length of block
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   103   * \return   Function success
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   104   * \retval   E_OK:              Order was successfully placed
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   105   * \retval   E_NOT_OK:          Order was not placed because the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   106   *                              respective order queue entry is
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   107   *                              not empty or the module has not been
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   108   *                              initialized yet
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   109   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   110   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   111   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   112   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   113  Std_ReturnType MemIf_Read(uint8 DeviceIndex, uint16 BlockNumber, uint16 BlockOffset, uint8* DataBufferPtr, uint16 Length)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   114  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   115      VAR(Std_ReturnType,AUTOMATIC) xRetVal = E_NOT_OK;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   116  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   117      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   118      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   119      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   120  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   121      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   122      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   123          xRetVal = Fee_Read(BlockNumber,BlockOffset,DataBufferPtr,Length);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   124      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   125      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   126      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   127          xRetVal = Ea_Read(BlockNumber,BlockOffset,DataBufferPtr,Length);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   128      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   129      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   130  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   131  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   132  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   133   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   134   * MemIf_InvalidateBlock(): MemIf_InvalidateBlock interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   135   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   136   * This function places a read job to the FEE or EA.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   137   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   138   * \param    DeviceIndex:   Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   139   * \param    Blocknumber:   Nvm index (based on this index the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   140   *                          corresponding Fee index will be searched
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   141   *                          and placed into the order queue)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   142   * \return   Function success
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   143   * \retval   E_OK:              Order was successfully placed
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   144   * \retval   E_NOT_OK:          Order was not placed because the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   145   *                              respective order queue entry is
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   146   *                              not empty or the module has not been
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   147   *                              initialized yet
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   148   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   149   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   150   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   151   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   152  Std_ReturnType MemIf_InvalidateBlock(uint8 DeviceIndex, uint16 BlockNumber)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   153  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   154      VAR(Std_ReturnType,AUTOMATIC) xRetVal = E_NOT_OK;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   155  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   156      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   157      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   158      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   159  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   160      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   161      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   162          xRetVal = Fee_InvalidateBlock(BlockNumber);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   163      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   164      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   165      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   166          xRetVal = Ea_InvalidateBlock(BlockNumber);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   167      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   168      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   169  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   170  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   171  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   172   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   173   * MemIf_GetStatus(): MemIf_GetStatus interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   174   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   175   * This function returns the status of a a device.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   176   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   177   * \param    DeviceIndex: Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   178   * \return   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   179   * \retval   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   180   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   181   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   182   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   183   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   184  MemIf_StatusType MemIf_GetStatus(uint8 DeviceIndex)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   185  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   186      VAR(MemIf_StatusType,AUTOMATIC) xRetVal = MEMIF_IDLE;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   187  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   188      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   189      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   190      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   191  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   192      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   193      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   194          xRetVal = Fee_GetStatus();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   195      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   196      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   197      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   198          xRetVal = Ea_GetStatus();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   199      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   200      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   201  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   202  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   203  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   204   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   205   * MemIf_GetJobResult(): MemIf_GetJobResult interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   206   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   207   * This function returns the status of a a job.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   208   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   209   * \param    DeviceIndex: Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   210   * \return   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   211   * \retval   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   212   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   213   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   214   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   215   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   216  MemIf_JobResultType MemIf_GetJobResult(uint8 DeviceIndex)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   217  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   218      VAR(MemIf_JobResultType,AUTOMATIC) xRetVal = MEMIF_JOB_FAILED;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   219  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   220      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   221      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   222      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   223  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   224      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   225      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   226          xRetVal = Fee_GetJobResult();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   227      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   228      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   229      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   230          xRetVal = Ea_GetJobResult();
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   231      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   232      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   233  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   234  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   235  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   236   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   237   * MemIf_EraseImmediateBlock(): MemIf_EraseImmediateBlock interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   238   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   239   * This function places a read job to the FEE or EA.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   240   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   241   * \param    DeviceIndex:   Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   242   * \param    Blocknumber:   Nvm index (based on this index the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   243   *                          corresponding Fee index will be searched
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   244   *                          and placed into the order queue)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   245   * \return   Function success
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   246   * \retval   E_OK:              Order was successfully placed
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   247   * \retval   E_NOT_OK:          Order was not placed because the
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   248   *                              respective order queue entry is
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   249   *                              not empty or the module has not been
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   250   *                              initialized yet
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   251   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   252   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   253   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   254   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   255  Std_ReturnType MemIf_EraseImmediateBlock(uint8 DeviceIndex, uint16 BlockNumber)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   256  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   257      VAR(Std_ReturnType,AUTOMATIC) xRetVal = E_NOT_OK;       /* Default return value */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   258  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   259      #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   260      MemIf_CheckDeviceIndex(DeviceIndex);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   261      #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   262  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   263      if (DeviceIndex == 0)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   264      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   265          xRetVal = Fee_EraseImmediateBlock(BlockNumber);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   266      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   267      else
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   268      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   269          xRetVal = Ea_EraseImmediateBlock(BlockNumber);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   270      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   271      return(xRetVal);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   272  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   273  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   274  #if (MEMIF_DEV_ERROR_DETECT == STD_ON)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   275  /**
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   276   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   277   * MemIf_CheckDeviceIndex(): MemIf_CheckDeviceIndex interface
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   278   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   279   * This function checks the device index.
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   280   *
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   281   * \param    DeviceIndex: Index of requeste device
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   282   * \return   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   283   * \retval   none
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   284   * \seealso
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   285   * \usedresources
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   286   *********************************************************************
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   287   */
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   288  void MemIf_CheckDeviceIndex(uint8 DeviceIndex)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   289  {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   290      if (DeviceIndex >= MEMIF_MAX_NUM_DEVICES)
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   291      {
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   292          Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_SID_CHECK_INDEX, MEMIF_E_PARAM_DEVICE);
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   293      }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   294  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   295  }
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   296  #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   297  #endif
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   298  
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   299  #define MEMIF_STOP_SEC_CODE
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   300  #include "MemIf_MemMap.h"
; BSW\src\BSW\Gen\MemIf\src\MemIf_MainFunction.c	   301  

	; Module end
