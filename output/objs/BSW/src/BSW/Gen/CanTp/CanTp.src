	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc11084a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\CanTp\\CanTp.src BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c'

	
$TC16X
	
	.sdecl	'.text.CanTp.CanTp_Init',code,cluster('CanTp_Init')
	.sect	'.text.CanTp.CanTp_Init'
	.align	2
	
	.global	CanTp_Init

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     3  #include "CanTp.h" /* TRACE[SWS_CanTp_00221] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     4  #include "CanTp_Cbk.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     5  #include "CanTp_Prv.h" /* TRACE[SWS_CanTp_00156] Indirect inclusion CanTp_Cfg.h[through CanTp.h] SchM_CanTp.h Det.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     6  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     7  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     8  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	     9  /* TRACE[SWS_CanTp_00253][SWS_CanTp_00168]TRACE[SWS_CanTp_00161] Defined as global variable available for debugging */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    10  uint8 CanTp_MainState;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    11  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    12  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    13  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    14  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    15  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    16  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    17  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    18  #if(CANTP_VERSION_INFO_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    19  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    20   Function name    : CanTp_GetVersionInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    21   Syntax           : CanTp_GetVersionInfo(versioninfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    22   Description      : TRACE[SWS_CanTp_00210] This function returns the version information of the CanTp module.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    23   Parameter        : Std_VersionInfoType* versioninfo
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    24   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    25  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    26  void CanTp_GetVersionInfo(Std_VersionInfoType* versioninfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    27  {   /* TRACE[SWS_CanTp_00031][SWS_CanTp_00319] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    28      if(versioninfo == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    29      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    30          CanTp_Prv_ReportRunTimeError(CANTP_GETVERSIONINFO, CANTP_E_PARAM_POINTER);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    31      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    32      else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    33      { /* TRACE[SWS_CanTp_00267] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    34          versioninfo->vendorID            = CANTP_VENDOR_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    35          versioninfo->moduleID            = CANTP_MODULE_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    36          versioninfo->sw_major_version    = CANTP_SW_MAJOR_VERSION;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    37          versioninfo->sw_minor_version    = CANTP_SW_MINOR_VERSION;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    38          versioninfo->sw_patch_version    = CANTP_SW_PATCH_VERSION;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    39      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    40  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    41  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    43  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    44   Function name    : CanTp_Init
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    45   Syntax           : CanTp_Init(CfgPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    46   Description      : TRACE[SWS_CanTp_00208] This function initializes the CanTp module.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    47   Parameter        : const CanTp_ConfigType*
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    48   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    49  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    50  void CanTp_Init(const CanTp_ConfigType *CfgPtr)
; Function CanTp_Init
.L312:
CanTp_Init:	.type	func

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    51  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    52      CanTp_MainState = CANTP_OFF; /* TRACE[SWS_CanTp_00027] */
	movh.a	a2,#@his(CanTp_MainState)
	lea	a2,[a2]@los(CanTp_MainState)
.L781:
	mov	d15,#0
.L782:
	st.b	[a2],d15
.L783:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    53  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    54      #if(CANTP_VARIANT == CANTP_PRE_COMPILE)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    55      CanTp_CfgPtr = &CanTp_Config;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
.L784:
	movh.a	a4,#@his(CanTp_Config)
.L629:
	lea	a4,[a4]@los(CanTp_Config)
.L785:
	st.a	[a15],a4
.L786:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    56      (void)CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    57  	#else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    58      CanTp_CfgPtr = CfgPtr; /* TRACE[SWS_CanTp_00169] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    59  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    60      if(CfgPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    61      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    62          CanTp_Prv_ReportRunTimeError(CANTP_INIT, CANTP_E_PARAM_POINTER);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    63      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    64      #if((CANTP_DEV_ERROR_DETECT == CANTP_ON) && (CANTP_VARIANT == CANTP_POST_BUILD_SELECTABLE))
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    65      else if(CanTp_Prv_PbCfgCheck(CfgPtr) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    66      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    67          CanTp_Prv_ReportError(CANTP_INIT, CANTP_E_INIT_FAILED);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    68      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    69      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    70      else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    71      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    72      {   /* TRACE[SWS_CanTp_00030][SWS_CanTp_00111][SWS_CanTp_00273] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    73          CanTp_Prv_RxParamInit(); /* This is required for Change Parameter Api usecase.  */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    74          CanTp_Prv_QInit(); /* Burst Mode initialization  */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    75          /* Initialize all the channels to Idle  */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    76  		CanTp_Prv_ArrayInit(&CanTp_SubState[0], CanTp_CfgPtr->NumberOfChannels, CANTP_IDLE);
	movh.a	a4,#@his(CanTp_SubState)
	lea	a4,[a4]@los(CanTp_SubState)
.L787:
	ld.a	a15,[a15]
.L788:
	ld.bu	d0,[a15]
.L789:
	mov	d1,#0
.L384:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d15,#0
.L630:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L2
.L3:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a5,a4,d15,#0
.L790:
	st.b	[a5],d1
.L791:
	add	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L2:
	jlt.u	d15,d0,.L3
.L385:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    77          CanTp_Prv_ArrayInit(&CanTp_TxConfirmationChannel[0], CanTp_CfgPtr->NumberOfTxPdus, CANTP_INVALID_CHANNEL);
	movh.a	a4,#@his(CanTp_TxConfirmationChannel)
	lea	a4,[a4]@los(CanTp_TxConfirmationChannel)
.L792:
	ld.bu	d15,[a15]2
.L631:
	mov	d0,#2
.L395:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d1,#0
.L632:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L4
.L5:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a15,a4,d1,#0
.L793:
	st.b	[a15],d0
.L794:
	add	d1,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L4:
	jlt.u	d1,d15,.L5
.L396:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    78  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    79  		CanTp_MainState = CANTP_ON; /* TRACE[SWS_CanTp_00027][SWS_CanTp_00170] */
	mov	d15,#1
.L795:
	st.b	[a2],d15
.L796:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    80      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    81  }
	ret
.L380:
	
__CanTp_Init_function_end:
	.size	CanTp_Init,__CanTp_Init_function_end-CanTp_Init
.L337:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_Shutdown',code,cluster('CanTp_Shutdown')
	.sect	'.text.CanTp.CanTp_Shutdown'
	.align	2
	
	.global	CanTp_Shutdown

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    82  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    83  #if(CANTP_CANTPLITE_SUPPORT != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    84  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    85   Function name    : CanTp_Shutdown
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    86   Syntax           : CanTp_Shutdown()
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    87   Description      : TRACE[SWS_CanTp_00211] This function is called to shutdown the CanTp module.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    88   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    89   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    90  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    91  void CanTp_Shutdown(void)
; Function CanTp_Shutdown
.L314:
CanTp_Shutdown:	.type	func

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    92  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    93      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    94      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L801:
	jeq	d15,#1,.L6
.L802:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    95      { /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    96          CanTp_Prv_ReportError(CANTP_SHUTDOWN, CANTP_E_UNINIT);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#2
	mov	d7,#32
	call	Det_ReportError
.L803:
	j	.L7
.L6:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    97      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    98      else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	    99      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   100      { /* TRACE[SWS_CanTp_00010][SWS_CanTp_00202][SWS_CanTp_00200] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   101          CanTp_MainState = CANTP_OFF;
	mov	d15,#0
.L804:
	st.b	[a15],d15
.L805:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   102          CanTp_Prv_RxParamInit();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   103          CanTp_Prv_QInit(); /* DeInitialize the Burst Q */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   104          /* Initialize all the channels to Idle state. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   105          CanTp_Prv_ArrayInit(&CanTp_SubState[0], CanTp_CfgPtr->NumberOfChannels, CANTP_IDLE);
	movh.a	a2,#@his(CanTp_SubState)
	lea	a2,[a2]@los(CanTp_SubState)
.L806:
	movh.a	a4,#@his(CanTp_CfgPtr)
	lea	a4,[a4]@los(CanTp_CfgPtr)
	ld.a	a15,[a4]
.L807:
	ld.bu	d0,[a15]
.L808:
	mov	d1,#0
.L399:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d15,#0
.L633:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L8
.L9:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a5,a2,d15,#0
.L809:
	st.b	[a5],d1
.L810:
	add	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L8:
	jlt.u	d15,d0,.L9
.L400:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   106          CanTp_Prv_ArrayInit(&CanTp_TxConfirmationChannel[0], CanTp_CfgPtr->NumberOfTxPdus, CANTP_INVALID_CHANNEL);
	movh.a	a2,#@his(CanTp_TxConfirmationChannel)
	lea	a2,[a2]@los(CanTp_TxConfirmationChannel)
.L811:
	ld.bu	d15,[a15]2
.L634:
	mov	d0,#2
.L405:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d1,#0
.L635:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L10
.L11:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a15,a2,d1,#0
.L812:
	st.b	[a15],d0
.L813:
	add	d1,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L10:
	jlt.u	d1,d15,.L11
.L406:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   107          CanTp_CfgPtr = NULL_PTR;
	mov.a	a15,#0
.L814:
	st.a	[a4],a15
.L7:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   108      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   109  }
	ret
.L398:
	
__CanTp_Shutdown_function_end:
	.size	CanTp_Shutdown,__CanTp_Shutdown_function_end-CanTp_Shutdown
.L342:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_MainFunction',code,cluster('CanTp_MainFunction')
	.sect	'.text.CanTp.CanTp_MainFunction'
	.align	2
	
	.global	CanTp_MainFunction

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   110  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   111  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   112  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   113   Function name    : CanTp_MainFunction
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   114   Syntax           : CanTp_MainFunction()
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   115   Description      : TRACE[SWS_CanTp_00213][SWS_CanTp_00164] CanTp scheduled functions which is called by the
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   116                      BSW sheduler in a cyclic interval defined by the configuration parameter CanTp_MainFunctionPeriod.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   117                      Carries out all the routine job w.r.t. Timeout handling functionality of the CanTp when the OS is
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   118                      running.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   119   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   120   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   121  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   122  void CanTp_MainFunction(void)
; Function CanTp_MainFunction
.L316:
CanTp_MainFunction:	.type	func

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   123  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   124      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   125  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   126      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   127      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L1328:
	jeq	d15,#1,.L12
.L1329:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   128      {/* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   129          CanTp_Prv_ReportError(CANTP_MAINFUNCTION, CANTP_E_UNINIT);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#32
	call	Det_ReportError
.L1330:
	j	.L13
.L12:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   130      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   131      else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   132      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   133      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   134          #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   135          if(CanTp_Prv_GetFromQ(&ChannelId) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   136          {   /* This Action was put in queue either in TxConfirmaton or RxIndication. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   137              CanTp_Prv_ExecuteState(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   138          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   139          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   140          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   141          {   /* Execute the states of all the non-burst channels. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   142              for(ChannelId = 0; ChannelId < CanTp_CfgPtr->NumberOfChannels; ChannelId++)
	mov	d15,#0
.L636:
	j	.L14
.L15:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   143              {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   144                  CanTp_Prv_ExecuteState(ChannelId);
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]
	movh.a	a15,#@his(CanTp_StateFunctions)
	lea	a15,[a15]@los(CanTp_StateFunctions)
	addsc.a	a15,a15,d0,#2
	ld.a	a15,[a15]
	mov	d4,d15
.L638:
	calli	a15
.L639:
	add	d15,#1
.L637:
	extr.u	d15,d15,#0,#8
.L14:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1331:
	ld.bu	d0,[a15]
.L1332:
	jlt.u	d15,d0,.L15
.L627:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
	movh.a	a15,#@his(CanTp_MainFunctionTicks)
	lea	a15,[a15]@los(CanTp_MainFunctionTicks)
	ld.hu	d15,[a15]0
.L640:
	add	d15,#1
	st.h	[a15],d15
.L13:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   145              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   146  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   147              CanTp_IncrementCounter();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   148          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   149      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   150  }
	ret
.L624:
	
__CanTp_MainFunction_function_end:
	.size	CanTp_MainFunction,__CanTp_MainFunction_function_end-CanTp_MainFunction
.L377:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_Transmit',code,cluster('CanTp_Transmit')
	.sect	'.text.CanTp.CanTp_Transmit'
	.align	2
	
	.global	CanTp_Transmit

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   151  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   152  #if(CANTP_CHANGE_PARAMETER_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   153  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   154   Function name    : CanTp_ChangeParameter
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   155   Syntax           : CanTp_ChangeParameter(id, parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   156   Description      : TRACE[SWS_CanTp_00302][SWS_CanTp_00091]This service is used to change the current value of reception
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   157                      parameters BS and STmin for a specified RxNSdu.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   158   Parameter        : PduIdType, TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   159   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   160  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   161  Std_ReturnType CanTp_ChangeParameter(PduIdType id, TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   162  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   163  	CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   164      Std_ReturnType RetVal = E_NOT_OK; /* TRACE[SWS_CanTp_00294][SWS_CanTp_00304] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   165  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   166  	#if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   167  	if(CanTp_Prv_IsNoDevError(id, CANTP_CHANGEPARAMETER, CANTP_E_INVALID_RX_ID))
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   168  	#endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   169  	{   /* Runtime error check: returns error if wrong Parameter or wrong range of parameter values for STMin or BS. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   170  		if(CanTp_Prv_IsChangeParameterOk(parameter, value))
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   171  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   172              ChannelId = CanTp_Prv_GetRxChannelId(id);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   173  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   174              SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   175  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   176  			if(CanTp_Prv_GetState(ChannelId) == CANTP_RECEPTION)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   177  			{   /* TRACE[SWS_CanTp_00303] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   178  				CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, CANTP_E_OPER_NOT_SUPPORTED);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   179  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   180  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   181  			{   /* Made sure that value is within 0xFF in Det-CANTP_E_PARAM_CONFIG. So typecasting done here is okay. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   182  				CanTp_ParamPair[id].Param[(parameter == TP_STMIN) ? 0 : 1] = (uint8)value;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   183  				RetVal=E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   184  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   185  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   186              SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   187  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   188  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   189  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   190      return RetVal;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   191  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   192  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   194  #if(CANTP_READ_PARAMETER_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   195  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   196   Function name    : CanTp_ReadParameter
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   197   Syntax           : CanTp_ReadParameter(id, parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   198   Description      : TRACE[SWS_CanTp_00323] This service is used to read the current value of reception parameters BS and
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   199                      STmin for a specified N-SDU.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   200   Parameter        : PduIdType, TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   201   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   202  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   203  Std_ReturnType CanTp_ReadParameter(PduIdType id, TPParameterType parameter, uint16 *value)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   204  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   205      Std_ReturnType RetVal = E_NOT_OK; /* TRACE[SWS_CanTp_00294] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   206  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   207  	#if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   208      if(CanTp_Prv_IsNoDevError(id, CANTP_READPARAMETER, CANTP_E_INVALID_RX_ID))
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   209  	#endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   210  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   211  		if(value == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   212          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   213  		    CanTp_Prv_ReportRunTimeError(CANTP_READPARAMETER, CANTP_E_PARAM_POINTER);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   214          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   215          else if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   216          { /* TRACE[SWS_CanTp_00324] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   217              CanTp_Prv_ReportRunTimeError(CANTP_READPARAMETER, CANTP_E_PARAM_ID);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   218          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   219          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   220  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   221  			*value = CanTp_Prv_GetRxParam(id, parameter); /* Read configuration values from Flash/RAM.  */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   222  			RetVal = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   223  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   224  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   225  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   226      return(RetVal);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   227  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   228  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   229  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   230  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   231   Function name    : CanTp_Transmit
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   232   Syntax           : CanTp_Transmit(CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   233   Description      : TRACE[SWS_CanTp_00212][SWS_CanTp_00176] Asyncrounus Transmission request Api for upper layer module
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   234                      I.e. PduR Module calls this Api for[Segmented: Multiframe][Unsegemented: Singleframe] type
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   235                      tranmission request.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   236   Parameter        : PduIdType, PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   237   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   238  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   239  Std_ReturnType CanTp_Transmit(PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; Function CanTp_Transmit
.L318:
CanTp_Transmit:	.type	func
	sub.a	a10,#8
.L641:
	mov	d8,d4
.L644:
	mov.aa	a12,a4
.L645:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   240  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   241      Std_ReturnType RetVal = E_NOT_OK; /* TRACE[SWS_CanTp_00294] */
	mov	d9,#1
.L646:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   242      CanTp_TickType Value = 0;
	mov	d0,#0
.L819:
	st.h	[a10],d0
.L820:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   243      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   244  	uint32 MaxLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   245      uint8 PciId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   246      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   247  	uint8 PayloadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   248  	uint8 TX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   249      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   250      CanTp_ChannelType *Channel;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   251  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   252      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   253      if(CanTp_Prv_IsNoDevError(CanTpTxSduId, CANTP_TRANSMIT, CANTP_E_INVALID_TX_ID))
	mov	d6,#3
.L821:
	mov	d7,#48
.L427:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L647:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d1,#1
.L648:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L822:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L16
.L823:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L824:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L17

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L16:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d2,#3
	jeq	d2,d6,.L18
.L825:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L19
.L826:
	mov	d15,#9
	jeq	d15,d6,.L20
.L827:
	mov	d15,#10
	jeq	d15,d6,.L21
.L828:
	mov	d15,#11
	jeq	d15,d6,.L22
.L829:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L23
.L830:
	mov	d15,#64
	jeq	d15,d6,.L24
.L831:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L25
	j	.L26

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L21:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L22:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L20:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L832:
	ld.bu	d0,[a15]3
.L833:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L27

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L18:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L19:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L834:
	ld.bu	d0,[a15]4
.L835:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L28

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L24:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L23:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L836:
	ld.bu	d0,[a15]2
.L837:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L29

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L25:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L838:
	ld.bu	d0,[a15]1
.L839:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L30

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L26:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L31

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L31:
.L30:
.L29:
.L28:
.L27:
	jlt.u	d8,d0,.L32
.L840:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L33

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L32:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L33:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L17:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L34
.L841:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L643:
	mov	d5,#0
	call	Det_ReportError
.L642:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d1,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L34:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L35

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L35:
	jeq	d1,#0,.L36
.L428:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   254      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   255      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   256          Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L842:
	ld.a	a2,[a15]12
.L843:
	mul	d15,d8,#12
	addsc.a	a6,a2,d15,#0
.L650:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   257          Channel = CanTp_Channel + Connection->ChannelId;
	ld.bu	d15,[a6]5
.L844:
	mul	d15,d15,#20
.L845:
	movh.a	a4,#@his(CanTp_Channel)
	lea	a4,[a4]@los(CanTp_Channel)
.L846:
	addsc.a	a7,a4,d15,#0
.L651:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   258  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   259  		if(CanTpTxInfoPtr == NULL_PTR)
	jnz.a	a12,.L37
.L847:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   260  		{   /* TRACE[SWS_CanTp_00321] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   261  			ErrorId = CANTP_E_PARAM_POINTER;
	mov	d7,#3
.L652:
	j	.L38
.L37:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   262  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   263  		else if(CanTpTxInfoPtr->SduLength == 0u)
	ld.hu	d15,[a12]4
.L848:
	jne	d15,#0,.L39
.L849:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   264  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   265  			ErrorId = CANTP_E_COM;
	mov	d7,#176
.L653:
	j	.L40
.L39:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   266  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   267  		else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   268  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   269  	        CanTp_Prv_TxPciInit(&PciId, CanTpTxSduId, CanTpTxInfoPtr);
	lea	a4,[a10]4
.L440:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
	mul	d15,d8,#12
	addsc.a	a15,a2,d15,#0
.L654:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
	ld.bu	d1,[a15]
.L649:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L850:
	ld.bu	d15,[a15]3
.L851:
	addsc.a	a5,a2,d15,#0
	ld.bu	d0,[a5]
.L655:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
	ld.hu	d2,[a12]4
.L852:
	add	d15,d2,d0
.L853:
	mov	d0,#7
.L656:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)      (inlined)
	jlt	d0,d15,.L41
.L854:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
	mov	d15,#0
.L855:
	st.b	[a4],d15
.L856:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;      (inlined)
	j	.L42

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)      (inlined)
.L41:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))      (inlined)
	jlt.u	d1,#9,.L43
.L857:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
	add	d15,#2
.L858:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))      (inlined)
	jlt.u	d1,d15,.L44
.L859:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
	mov	d15,#1
.L860:
	st.b	[a4],d15
.L861:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;      (inlined)
	j	.L45

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))      (inlined)
.L44:
.L43:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))      (inlined)
	jlt.u	d1,#9,.L46
.L862:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
	mov	d15,#4095
.L863:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))      (inlined)
	jge.u	d15,d2,.L47
.L864:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
	mov	d15,#3
.L865:
	st.b	[a4],d15
.L866:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;      (inlined)
	j	.L48

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))      (inlined)
.L47:
.L46:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
	mov	d15,#2
.L867:
	st.b	[a4],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else      (inlined)
.L48:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))      (inlined)
.L45:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))      (inlined)
.L42:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   270  			TX_DL = CanTp_Prv_GetTxDl(Connection); /* TRACE[SWS_CanTp_00354] */
	ld.bu	d0,[a6]
.L657:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   272  			if(CanTp_Prv_GetBit(Connection->BitFields, CANTP_FUNCTIONAL))
	ld.bu	d15,[a6]1
.L452:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#4
	ne	d15,d15,#0
.L868:
	j	.L50
.L49:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L50:
	j	.L51

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L51:
	jeq	d15,#0,.L52
.L453:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   273  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   274  			    PayloadLength = TX_DL - 1 - CanTp_AddressSize[Connection->AddressFormatId];
	ld.bu	d15,[a6]3
.L869:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L870:
	sub	d0,d15
.L658:
	add	d0,#-1
.L871:
	extr.u	d0,d0,#0,#8
.L659:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   275  				MaxLength = (PciId < CANTP_NPCI_SFCANFD) ? PayloadLength : (PayloadLength - CANTP_FDSFDL_PCI);
	ld.bu	d15,[a10]4
.L872:
	jne	d15,#0,.L53
.L873:
	j	.L54
.L53:
	add	d0,#-1
.L54:
	j	.L55
.L52:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   276  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   277  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   278  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   279                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   280  				MaxLength = (uint16)((TX_DL > CANTP_DEFAULT_CAN_DL) ? CANTP_MAXFDFFDL : CANTP_MAXFFDL);
	lt.u	d15,d0,#9
.L874:
	mov	d0,#4095
.L660:
	cmovn	d0,d15,#-1
.L875:
	j	.L57
.L56:
	mov	d0,#4095
.L57:
	extr.u	d0,d0,#0,#16
.L55:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   281                  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   282                  MaxLength = (uint16)CANTP_MAXFFDL;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   283                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   284  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   285              /* TRACE[SWS_CanTp_00093][SWS_CanTp_00231][SWS_CanTp_00232] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   286  			ErrorId = (CanTpTxInfoPtr->SduLength > MaxLength) ? CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR;
	ld.hu	d15,[a12]4
.L876:
	ge.u	d0,d0,d15
.L661:
	mov	d15,#144
	seln	d7,d0,d15,#0
.L662:
	j	.L59
.L58:
	mov	d7,#0
.L59:
.L40:
.L38:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   287  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   288  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   289          if(ErrorId != CANTP_NO_ERROR)
	jeq	d7,#0,.L60
.L877:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   290          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   291              CanTp_Prv_ReportRunTimeError(CANTP_TRANSMIT, ErrorId);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#3
	call	Det_ReportRuntimeError
.L663:
	j	.L61
.L60:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   292          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   293          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   294          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   295              CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]0
.L878:
	lea	a15,[a10]2
.L460:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L664:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a4,#@his(CanTp_MainFunctionTicks)
	lea	a4,[a4]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a4]0
.L879:
	st.h	[a2],d0
.L880:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L881:
	sub	d0,d15
.L882:
	st.h	[a15],d0
.L461:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   296  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   297              SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   298  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   299              if(CanTp_Prv_GetState(Connection->ChannelId) == CANTP_IDLE)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
	ld.bu	d15,[a6]5
.L665:
	addsc.a	a2,a15,d15,#0
	ld.bu	d15,[a2]
	movh.a	a2,#@his(CanTp_State)
	lea	a2,[a2]@los(CanTp_State)
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L883:
	jne	d15,#0,.L62
.L884:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   300              {    /* TRACE[SWS_CanTp_00206][SWS_CanTp_00287][SWS_CanTp_00288][SWS_CanTp_00123] Accept request for Tx in
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   301                   IDLE state */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   302                  Channel->ActiveSduId = (CanTp_SduIdType)CanTpTxSduId;
	st.b	[a7]6,d8
.L885:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   303                  Channel->PciId = PciId;
	ld.bu	d15,[a10]4
.L886:
	st.b	[a7]2,d15
.L887:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   304                  Channel->SduLength = CanTpTxInfoPtr->SduLength;
	ld.hu	d15,[a12]4
.L888:
	st.h	[a7]14,d15
.L889:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   305                  Channel->InitialTicks = Value; /* TRACE[SWS_CanTp_00167] */
	ld.hu	d15,[a10]0
.L890:
	st.h	[a7]16,d15
.L891:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   306                  Channel->TxBufferStatus = CANTP_BUFFER_NOT_ASKED;
	mov	d15,#0
.L892:
	st.b	[a7],d15
.L893:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   307                  /* Invalid STmin to denote that 1st FC-CTS is not received, shall be set after rx of 1st FC-CTS */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   308                  Channel->STminTicks = CANTP_INVALID_STMIN_TICKS;
	mov	d15,#128
.L894:
	st.h	[a7]18,d15
.L895:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   309                  CanTp_SubState[Connection->ChannelId] = CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED;
	ld.bu	d15,[a6]5
.L896:
	addsc.a	a15,a15,d15,#0
.L897:
	mov	d15,#1
.L898:
	st.b	[a15],d15
.L899:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   310                  RetVal = E_OK;
	mov	d9,#0
.L62:
.L61:
.L36:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   311              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   312  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   313              SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   314          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   315      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   316  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   317      return(RetVal);
	mov	d2,d9
.L666:
	j	.L63

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   318  }
.L63:
	ret
.L409:
	
__CanTp_Transmit_function_end:
	.size	CanTp_Transmit,__CanTp_Transmit_function_end-CanTp_Transmit
.L347:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_CancelTransmit',code,cluster('CanTp_CancelTransmit')
	.sect	'.text.CanTp.CanTp_CancelTransmit'
	.align	2
	
	.global	CanTp_CancelTransmit

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   319  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   320  #if(CANTP_CANTPLITE_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   321  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   322   Function name    : CanTp_CancelTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   323   Syntax           : CanTp_CancelTransmit(CanTpTxSduId)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   324   Description      : TRACE[SWS_CanTp_00246] This service primitive is used to cancel the transfer of a pending CAN N-SDU.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   325                      When the function returns, no transmission is in progress anymore with the given N-SDU identifier.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   326   Parameter        : CanTpTxSduId
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   327   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   328  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   329  Std_ReturnType CanTp_CancelTransmit(PduIdType CanTpTxSduId)
; Function CanTp_CancelTransmit
.L320:
CanTp_CancelTransmit:	.type	func
	mov	d8,d4
.L668:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   330  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   331      Std_ReturnType RetVal = E_NOT_OK; /* TRACE[SWS_CanTp_00294] */
	mov	d9,#1
.L669:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   332      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   333      boolean TcDisabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   335      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   336      if(CanTp_Prv_IsNoDevError(CanTpTxSduId, CANTP_CANCELTRANSMIT, CANTP_E_INVALID_TX_ID))
	mov	d6,#8
.L904:
	mov	d7,#48
.L473:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L671:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d1,#1
.L672:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L905:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L64
.L906:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L907:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L65

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L64:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d2,#3
	jeq	d2,d6,.L66
.L908:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L67
.L909:
	mov	d15,#9
	jeq	d15,d6,.L68
.L910:
	mov	d15,#10
	jeq	d15,d6,.L69
.L911:
	mov	d15,#11
	jeq	d15,d6,.L70
.L912:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L71
.L913:
	mov	d15,#64
	jeq	d15,d6,.L72
.L914:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L73
	j	.L74

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L69:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L70:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L68:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L915:
	ld.bu	d0,[a15]3
.L916:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L75

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L66:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L67:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L917:
	ld.bu	d0,[a15]4
.L918:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L76

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L72:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L71:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L919:
	ld.bu	d0,[a15]2
.L920:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L77

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L73:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L921:
	ld.bu	d0,[a15]1
.L922:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L78

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L74:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L79

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L79:
.L78:
.L77:
.L76:
.L75:
	jlt.u	d8,d0,.L80
.L923:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L81

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L80:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L81:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L65:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L82
.L924:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L667:
	mov	d5,#0
	call	Det_ReportError
.L670:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d1,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L82:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L83

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L83:
	jeq	d1,#0,.L84
.L474:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   337      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   338      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   339          Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
	mul	d15,d8,#12
.L925:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L926:
	ld.a	a15,[a15]12
.L927:
	addsc.a	a15,a15,d15,#0
.L673:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   340          TcDisabled = CanTp_Prv_GetBit(Connection->BitFields, CANTP_TC_DISABLED); /* TRACE[SWS_CanTp_00242] */
	ld.bu	d15,[a15]1
.L481:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#16
	ne	d15,d15,#0
.L928:
	j	.L86
.L85:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L86:
	j	.L87

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L87:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   342          SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   343  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   344          if((TcDisabled) || (CanTp_Prv_GetState(Connection->ChannelId) != CANTP_TRANSMISSION) ||
	jne	d15,#0,.L88
.L482:
	ld.bu	d15,[a15]5
	movh.a	a12,#@his(CanTp_SubState)
	lea	a12,[a12]@los(CanTp_SubState)
	addsc.a	a2,a12,d15,#0
	ld.bu	d0,[a2]
	movh.a	a2,#@his(CanTp_State)
	lea	a2,[a2]@los(CanTp_State)
	addsc.a	a2,a2,d0,#0
	ld.bu	d0,[a2]
.L929:
	jne	d0,#1,.L89
.L930:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   345             (CanTpTxSduId != CanTp_Channel[Connection->ChannelId].ActiveSduId))
	mul	d15,d15,#20
.L931:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L932:
	addsc.a	a2,a2,d15,#0
.L933:
	ld.bu	d15,[a2]6
.L934:
	jeq	d15,d8,.L90
.L89:
.L88:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   346          {   /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   347  			CanTp_Prv_ReportRunTimeError(CANTP_CANCELTRANSMIT, CANTP_E_OPER_NOT_SUPPORTED);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#8
	mov	d7,#160
	call	Det_ReportRuntimeError
.L675:
	j	.L91
.L90:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   348          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   349          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   350          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   351  			/* TRACE[SWS_CanTp_00255] Cancellation is success. Report negatively to unlock previously occupied buffer */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   352  			CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	ld.a	a2,[a2]
	ld.hu	d4,[a15]10
	mov	d5,#1
	calli	a2
.L676:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   353              /* TRACE[SWS_CanTp_00248][SWS_CanTp_00274][SWS_CanTp_00243] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   354  			if(CanTp_SubState[Connection->ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION)
	ld.bu	d15,[a15]5
.L935:
	addsc.a	a2,a12,d15,#0
	ld.bu	d15,[a2]
.L936:
	jne	d15,#2,.L92
.L937:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   355  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   356  			    CanTp_TxConfirmationChannel[Connection->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a15]6
.L938:
	movh.a	a2,#@his(CanTp_TxConfirmationChannel)
	lea	a2,[a2]@los(CanTp_TxConfirmationChannel)
.L939:
	addsc.a	a2,a2,d15,#0
.L940:
	mov	d15,#2
.L941:
	st.b	[a2],d15
.L92:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   357  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   358              /* TRACE[SWS_CanTp_00256] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   359  			CanTp_SubState[Connection->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a15]5
.L942:
	addsc.a	a15,a12,d15,#0
.L674:
	mov	d15,#0
.L943:
	st.b	[a15],d15
.L944:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   360  			RetVal = E_OK;
	mov	d9,#0
.L91:
.L84:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   361          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   362  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   363          SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   364      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   365  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   366      return (RetVal);
	mov	d2,d9
.L677:
	j	.L93

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   367  }
.L93:
	ret
.L468:
	
__CanTp_CancelTransmit_function_end:
	.size	CanTp_CancelTransmit,__CanTp_CancelTransmit_function_end-CanTp_CancelTransmit
.L352:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_CancelReceive',code,cluster('CanTp_CancelReceive')
	.sect	'.text.CanTp.CanTp_CancelReceive'
	.align	2
	
	.global	CanTp_CancelReceive

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   368  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   369  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   370   Function name    : CanTp_CancelReceive
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   371   Syntax           : CanTp_CancelReceive(RxPduId)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   372   Description      : TRACE[SWS_CanTp_00257] This service primitive is used to cancel the transfer of a pending CAN N-SDU.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   373                      When the function returns, no reception is in progress anymore with the given N-SDU identifier.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   374   Parameter        : RxPduId
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   375   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   376  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   377  Std_ReturnType CanTp_CancelReceive(PduIdType CanTpRxSduId)
; Function CanTp_CancelReceive
.L322:
CanTp_CancelReceive:	.type	func
	mov	d8,d4
.L678:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   378  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   379      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   380      Std_ReturnType RetVal = E_NOT_OK; /* TRACE[SWS_CanTp_00294] */
	mov	d9,#1
.L679:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   381      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   382  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   383      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   384      if(CanTp_Prv_IsNoDevError(CanTpRxSduId, CANTP_CANCELRECEIVE, CANTP_E_PARAM_ID)) /* TRACE[SWS_CanTp_00260] */
	mov	d6,#9
.L491:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L680:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d2,#1
.L681:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L949:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L94
.L950:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L682:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L95

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L94:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d1,#3
	jeq	d1,d6,.L96
.L951:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L97
.L952:
	mov	d15,#9
	jeq	d15,d6,.L98
.L953:
	mov	d15,#10
	jeq	d15,d6,.L99
.L954:
	mov	d15,#11
	jeq	d15,d6,.L100
.L955:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L101
.L956:
	mov	d15,#64
	jeq	d15,d6,.L102
.L957:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L103
	j	.L104

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L99:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L100:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L98:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L958:
	ld.bu	d0,[a15]3
.L959:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L105

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L96:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L97:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L960:
	ld.bu	d0,[a15]4
.L961:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L106

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L102:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L101:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L962:
	ld.bu	d0,[a15]2
.L963:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L107

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L103:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L964:
	ld.bu	d0,[a15]1
.L965:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L108

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L104:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L109

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L109:
.L108:
.L107:
.L106:
.L105:
	lt.u	d15,d8,d0
.L966:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
	mov	d7,#2
.L683:
	cmov	d7,d15,#0
.L967:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L111

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L110:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L111:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L95:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L112
.L968:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L684:
	mov	d5,#0
	call	Det_ReportError
.L685:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d2,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L112:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L113

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L113:
	jeq	d2,#0,.L114
.L492:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   385      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   386      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   387          Connection = CanTp_CfgPtr->RxSdu + CanTpRxSduId;
	mul	d15,d8,#12
.L969:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L970:
	ld.a	a15,[a15]16
.L971:
	addsc.a	a12,a15,d15,#0
.L687:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   388  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   389          SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   391          if((CanTp_Prv_GetState(Connection->ChannelId) != CANTP_RECEPTION) ||
	movh.a	a13,#@his(CanTp_SubState)
	lea	a13,[a13]@los(CanTp_SubState)
	ld.bu	d15,[a12]5
	addsc.a	a2,a13,d15,#0
	ld.bu	d0,[a2]
	movh.a	a2,#@his(CanTp_State)
	lea	a2,[a2]@los(CanTp_State)
	addsc.a	a15,a2,d0,#0
	ld.bu	d0,[a15]
.L972:
	jne	d0,#2,.L115
.L973:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   392             (CanTpRxSduId != CanTp_Channel[Connection->ChannelId].ActiveSduId))
	mul	d15,d15,#20
.L974:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L975:
	addsc.a	a15,a15,d15,#0
.L976:
	ld.bu	d15,[a15]6
.L977:
	jeq	d15,d8,.L116
.L115:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   393          {   /* TRACE[SWS_CanTp_00260][SWS_CanTp_00262] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   394              CanTp_Prv_ReportRunTimeError(CANTP_CANCELRECEIVE, CANTP_E_OPER_NOT_SUPPORTED);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#9
	mov	d7,#160
	call	Det_ReportRuntimeError
.L686:
	j	.L117
.L116:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   395          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   396          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   397          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   398              PayLoadLength = CanTp_Prv_GetRxDl(Connection->ChannelId) -
	ld.bu	d0,[a15]1
.L978:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   399                              CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
	ld.bu	d15,[a12]2
.L979:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L980:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L981:
	sub	d0,d15
.L982:
	add	d0,#-1
	extr.u	d15,d0,#0,#8
.L689:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   400              /* This case is true only when we have case other than Last CF or SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   401              if(CanTp_Channel[Connection->ChannelId].SduLengthRemaining > PayLoadLength) /* TRACE[SWS_CanTp_00262] */
	ld.hu	d0,[a15]12
.L983:
	jge.u	d15,d0,.L118
.L984:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   402              {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   403                  /* TRACE[SWS_CanTp_00263] Cancellation is success. Report negatively to unlock occupied buffer */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   404                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a12]10
	mov	d5,#1
	calli	a15
.L688:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   405                  /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   406                  if(CanTp_SubState[Connection->ChannelId] == CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION)
	ld.bu	d15,[a12]5
.L690:
	addsc.a	a15,a13,d15,#0
	ld.bu	d15,[a15]
.L985:
	jne	d15,#7,.L119
.L986:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   407                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   408                      CanTp_TxConfirmationChannel[Connection->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a12]6
.L987:
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L988:
	addsc.a	a15,a15,d15,#0
.L989:
	mov	d15,#2
.L990:
	st.b	[a15],d15
.L119:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   409                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   410                  /* TRACE[SWS_CanTp_00261] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   411                  CanTp_SubState[Connection->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a12]5
.L991:
	addsc.a	a15,a13,d15,#0
.L992:
	mov	d15,#0
.L993:
	st.b	[a15],d15
.L994:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   412                  RetVal = E_OK;
	mov	d9,#0
.L118:
.L117:
.L114:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   413              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   414          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   415  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   416          SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   417      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   418  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   419      return (RetVal);
	mov	d2,d9
.L691:
	j	.L120

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   420  }
.L120:
	ret
.L485:
	
__CanTp_CancelReceive_function_end:
	.size	CanTp_CancelReceive,__CanTp_CancelReceive_function_end-CanTp_CancelReceive
.L357:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_TxConfirmation',code,cluster('CanTp_TxConfirmation')
	.sect	'.text.CanTp.CanTp_TxConfirmation'
	.align	2
	
	.global	CanTp_TxConfirmation

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   421  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   422  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   423  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   424   Function name    : CanTp_TxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   425   Syntax           : CanTp_TxConfirmation(TxPduId)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   426   Description      : Indication of a transmit confirmation from a lower layer communication interface module. I.e.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   427                      CanIf Module calls this Api for [SF][FF][CF][FC] transmit confirmation.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   428                      TRACE[SWS_CanTp_00215][SWS_CanTp_00076][SWS_CanTp_00236]
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   429   Parameter        : PduIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   430   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   431  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   432  void CanTp_TxConfirmation(PduIdType TxPduId)
; Function CanTp_TxConfirmation
.L324:
CanTp_TxConfirmation:	.type	func
	sub.a	a10,#8
.L692:
	mov	d8,d4
.L694:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   433  {   /* TRACE[SWS_CanTp_00076] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   434  	CanTp_ChannelType *Channel;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   435  	CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   436  	uint8 SubState;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   437      CanTp_TickType Value = 0;
	mov	d0,#0
.L999:
	st.h	[a10],d0
.L1000:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   438  	CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   439      uint8 MaxCopyLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   440  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   441  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   442  	#if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   443  	if(CanTp_Prv_IsNoDevError(TxPduId, CANTP_TXCONFIRMATION, CANTP_E_INVALID_TX_ID))
	mov	d6,#64
.L1001:
	mov	d7,#48
.L508:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L697:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d1,#1
.L698:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L1002:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L121
.L1003:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L1004:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L122

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L121:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d2,#3
	jeq	d2,d6,.L123
.L1005:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L124
.L1006:
	mov	d15,#9
	jeq	d15,d6,.L125
.L1007:
	mov	d15,#10
	jeq	d15,d6,.L126
.L1008:
	mov	d15,#11
	jeq	d15,d6,.L127
.L1009:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L128
.L1010:
	mov	d15,#64
	jeq	d15,d6,.L129
.L1011:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L130
	j	.L131

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L126:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L127:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L125:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1012:
	ld.bu	d0,[a15]3
.L1013:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L132

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L123:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L124:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1014:
	ld.bu	d0,[a15]4
.L1015:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L133

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L129:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L128:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1016:
	ld.bu	d0,[a15]2
.L1017:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L134

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L130:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1018:
	ld.bu	d0,[a15]1
.L1019:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L135

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L131:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L136

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L136:
.L135:
.L134:
.L133:
.L132:
	jlt.u	d8,d0,.L137
.L1020:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L138

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L137:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L138:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L122:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L139
.L1021:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L693:
	mov	d5,#0
	call	Det_ReportError
.L696:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d1,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L139:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L140

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L140:
	jeq	d1,#0,.L141
.L509:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   444  	#endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   445  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   446  	    CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1022:
	lea	a2,[a10]2
.L516:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L700:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a4,#@his(CanTp_MainFunctionTicks)
	lea	a4,[a4]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a4]0
.L1023:
	st.h	[a15],d0
.L1024:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1025:
	sub	d0,d15
.L1026:
	st.h	[a2],d0
.L517:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   447  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   448  	    SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   450          ChannelId = CanTp_TxConfirmationChannel[TxPduId];
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L1027:
	addsc.a	a12,a15,d8,#0
	ld.bu	d8,[a12]
.L695:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   451          Channel = CanTp_Channel + ((ChannelId < CanTp_CfgPtr->NumberOfChannels) ? ChannelId : 0);
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a2,[a15]
.L1028:
	ld.bu	d0,[a2]
.L1029:
	ge.u	d15,d8,d0
.L701:
	seln	d1,d15,d8,#0
.L699:
	j	.L143
.L142:
	mov	d1,#0
.L143:
	movh.a	a5,#@his(CanTp_Channel)
	lea	a5,[a5]@los(CanTp_Channel)
.L1030:
	mul	d15,d1,#20
	addsc.a	a15,a5,d15,#0
.L702:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   452          SubState = (ChannelId < CanTp_CfgPtr->NumberOfChannels) ? CanTp_SubState[ChannelId] : CANTP_IDLE;
	jge.u	d8,d0,.L144
.L1031:
	movh.a	a4,#@his(CanTp_SubState)
	lea	a4,[a4]@los(CanTp_SubState)
.L1032:
	addsc.a	a4,a4,d8,#0
	ld.bu	d0,[a4]
.L704:
	j	.L145
.L144:
	mov	d0,#0
.L145:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   453  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   454  		switch(SubState)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   455  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   456  		    case CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   457  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   458                  Channel->InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   459                  CanTp_Prv_FcTxConfirmation(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   460                  CanTp_TxConfirmationChannel[TxPduId] = CANTP_INVALID_CHANNEL; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   461                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   462  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   463              case CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION:
	mov	d1,#2
	jeq	d1,d0,.L146
.L1033:
	mov	d15,#7
	jeq	d15,d0,.L147
	j	.L148
.L147:
	ld.hu	d15,[a10]0
.L1034:
	st.h	[a15]16,d15
.L522:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1097      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1098      return CanTp_ParamPair[id].Param[value];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1099      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1101  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1102  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1103   Function name    : CanTp_Prv_SetRxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1104   Syntax           : CanTp_Prv_SetRxBlockInfo(ChannelId, RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1105   Description      : Function to initialize the block related parameters for the Rx connection Channel based on the
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1106                      Buffer Availability in PduR and configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1107   Parameter        : CanTp_ChannelIdType, const PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1110  LOCAL_INLINE void CanTp_Prv_SetRxBlockInfo(CanTp_ChannelIdType ChannelId, const PduLengthType RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1112      uint8 BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1113      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1114  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1115      uint8 BS = Channel->BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1116      const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1117      PduLengthType OneFramePayloadLength = CanTp_Prv_GetRxDl(ChannelId) -
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1118                                            CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1120      /* This invalid value of STminTicks case is possible according to [SWS_CanTp_00082] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1121      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1123      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1124      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1125          BSMax = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_BS);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1128          {   /* Enough buffer to recieve all frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1130          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1132          {   /* Enough buffer to recieve Block frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1133              BS = (uint8)(RemBufSize/OneFramePayloadLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1135          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1136      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1140      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1142      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1144      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1145  		BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1147  	    Channel->FlowStatus = CANTP_FC_CTS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1148          #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1149          Channel->STminTicks = 0;  /* BS locking for CANTP_DYNAMIC_FC_SUPPORT Disabled case  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1150          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1151      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1152  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1153      Channel->BS = BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1154  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1155  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1156  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1157   Function name    : CanTp_Prv_PageConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1158   Syntax           : CanTp_Prv_PageConfirmation(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1159   Description      : This is a wrapper function to update for upper layer page refilling.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1160   Parameter        : const CanTp_TxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1161   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1162  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1163  LOCAL_INLINE void CanTp_Prv_PageConfirmation(const CanTp_TxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1164  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1165      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1166      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1167      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1168  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1169      if(CanTp_Channel[Context->ChannelId].TxBufferStatus == CANTP_BUFFER_NOT_ASKED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1170      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1171          SduInfo.SduLength = Context->PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1172          SduInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1173          /* As Page confirmation is done only in case of not availability of buffer so void typecasting is ok. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1174          (void)PduR_CanTpCopyTxData(Context->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1175          CanTp_Channel[Context->ChannelId].TxBufferStatus = CANTP_BUFFER_ASKED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1176      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1177  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1178  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1179  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1180   Function name    : CanTp_Prv_FcTxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1181   Syntax           : CanTp_Prv_FcTxConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1182   Description      : Function to change channel state at confirmation recieved for FC in CanTp_TxConfirmation.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1183   Parameter        : PduIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1184   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1185  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1186  LOCAL_INLINE void CanTp_Prv_FcTxConfirmation(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1187  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1188      const CanTp_ChannelType *Channel = CanTp_Channel + ChannelId;
	mul	d15,d8,#20
	addsc.a	a15,a5,d15,#0
.L703:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1189      const CanTp_RxSduType *RxConnection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	ld.bu	d15,[a15]6
.L1035:
	mul	d15,d15,#12
.L1036:
	ld.a	a2,[a2]16
.L1037:
	addsc.a	a2,a2,d15,#0
.L707:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1190  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1191      switch(Channel->FlowStatus)
	ld.bu	d15,[a15]3
.L1038:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1192      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1193          case CANTP_FC_CTS:
	mov	d0,#0
.L705:
	jeq	d15,d0,.L149
.L1039:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1194              CanTp_SubState[ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1195              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1196          case CANTP_FC_WAIT:
	mov	d0,#1
	jeq	d15,d0,.L150
.L1040:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1198              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1199          case CANTP_FC_OVERFLOW:
	mov	d0,#2
	jeq	d15,d0,.L151
	j	.L152

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1193          case CANTP_FC_CTS:      (inlined)
.L149:
	movh.a	a15,#@his(CanTp_SubState)
.L706:
	lea	a15,[a15]@los(CanTp_SubState)
.L1041:
	addsc.a	a15,a15,d8,#0
.L1042:
	mov	d15,#8
.L1043:
	st.b	[a15],d15
.L1044:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1195              break;      (inlined)
	j	.L153

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1196          case CANTP_FC_WAIT:      (inlined)
.L150:
	ld.hu	d15,[a15]12
.L1045:
	mov	d0,#6
	cmovn	d0,d15,#0
.L1046:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;      (inlined)
	j	.L155
.L154:
	mov	d0,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;      (inlined)
.L155:
	movh.a	a15,#@his(CanTp_SubState)
.L708:
	lea	a15,[a15]@los(CanTp_SubState)
.L1047:
	addsc.a	a15,a15,d8,#0
.L1048:
	st.b	[a15],d0
.L1049:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1198              break;      (inlined)
	j	.L156

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1199          case CANTP_FC_OVERFLOW:      (inlined)
.L151:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1200              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, RxConnection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L710:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a2]10
	mov	d5,#1
	calli	a15
.L709:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1201              CanTp_SubState[ChannelId] = CANTP_IDLE;
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1050:
	addsc.a	a15,a15,d8,#0
.L1051:
	mov	d15,#0
.L1052:
	st.b	[a15],d15
.L1053:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1202              break;      (inlined)
	j	.L157

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1203          default:    /* Wrong FlowStatus */      (inlined)
.L152:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1204              break;      (inlined)
	j	.L158

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1206  }      (inlined)
.L158:
.L157:
.L156:
.L153:
	mov	d15,#2
.L1054:
	st.b	[a12],d15
.L1055:
	j	.L159
.L146:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   464  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   465                  Channel->InitialTicks = Value;
	ld.hu	d15,[a10]0
.L1056:
	st.h	[a15]16,d15
.L1057:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   466                  TxConnection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	ld.bu	d15,[a15]6
.L1058:
	mul	d15,d15,#12
.L1059:
	ld.a	a2,[a2]12
.L1060:
	addsc.a	a4,a2,d15,#0
.L713:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   467                  MaxCopyLength = CanTp_Prv_GetTxDl(TxConnection) -
	ld.bu	d0,[a4]
.L712:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   468                                  CanTp_AddressSize[TxConnection->AddressFormatId] - CanTp_PciSize[Channel->PciId];
	ld.bu	d15,[a4]3
.L1061:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1062:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1063:
	sub	d0,d15
.L1064:
	ld.bu	d15,[a15]2
.L1065:
	movh.a	a2,#@his(CanTp_PciSize)
	lea	a2,[a2]@los(CanTp_PciSize)
.L1066:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1067:
	sub	d0,d15
	extr.u	d0,d0,#0,#8
.L715:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   469                  Channel->SduLengthRemaining = (Channel->SduLengthRemaining < MaxCopyLength) ? 0u :
	ld.hu	d15,[a15]12
.L1068:
	jge.u	d15,d0,.L160
.L1069:
	mov	d15,#0
.L1070:
	j	.L161
.L160:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   470                                                (Channel->SduLengthRemaining - MaxCopyLength);
	sub	d15,d0
.L161:
	st.h	[a15]12,d15
.L1071:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   471  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   472                  if(Channel->PciId == CANTP_NPCI_CF)
	ld.bu	d15,[a15]2
.L1072:
	jne	d15,#4,.L162
.L1073:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   473                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   474                      Channel->SN++;
	ld.bu	d15,[a15]4
.L1074:
	add	d15,#1
	st.b	[a15]4,d15
.L1075:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   475                      Channel->SN &= CANTP_LOWERNIBBLE_MASK ;
	ld.bu	d15,[a15]4
.L1076:
	and	d15,#15
	st.b	[a15]4,d15
.L1077:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   476                      Channel->BlockCfsRemaining--;
	ld.hu	d15,[a15]10
.L1078:
	add	d15,#-1
	st.h	[a15]10,d15
.L162:
	movh.a	a2,#@his(CanTp_SubState)
	lea	a2,[a2]@los(CanTp_SubState)
.L1079:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   477                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   478  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   479                  if(Channel->SduLengthRemaining == 0u)
	ld.hu	d15,[a15]12
.L1080:
	jne	d15,#0,.L163
.L1081:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   480                  {   /* TRACE[SWS_CanTp_00177][SWS_CanTp_00090][SWS_CanTp_00204] This is entered for SF or Last CF. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   481                      CanTp_SubState[ChannelId] = CANTP_IDLE;
	addsc.a	a2,a2,d8,#0
.L1082:
	mov	d15,#0
.L1083:
	st.b	[a2],d15
.L1084:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   482                      CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, TxConnection->PduRPduHandleId, E_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L711:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]
	ld.hu	d4,[a4]10
	mov	d5,#0
	calli	a15
.L714:
	j	.L164
.L163:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   483                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   484                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   485                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   486                      if(Channel->BlockCfsRemaining != 0u)
	ld.hu	d15,[a15]10
.L1085:
	jeq	d15,#0,.L165
.L1086:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   487                      {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   488                          CanTp_SubState[ChannelId] = CANTP_TX_SEND_CONSECUTIVE_FRAME;
	addsc.a	a15,a2,d8,#0
.L716:
	mov	d15,#4
.L1087:
	st.b	[a15],d15
.L1088:
	j	.L166
.L165:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1097      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1098      return CanTp_ParamPair[id].Param[value];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1099      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1101  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1102  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1103   Function name    : CanTp_Prv_SetRxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1104   Syntax           : CanTp_Prv_SetRxBlockInfo(ChannelId, RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1105   Description      : Function to initialize the block related parameters for the Rx connection Channel based on the
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1106                      Buffer Availability in PduR and configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1107   Parameter        : CanTp_ChannelIdType, const PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1110  LOCAL_INLINE void CanTp_Prv_SetRxBlockInfo(CanTp_ChannelIdType ChannelId, const PduLengthType RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1112      uint8 BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1113      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1114  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1115      uint8 BS = Channel->BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1116      const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1117      PduLengthType OneFramePayloadLength = CanTp_Prv_GetRxDl(ChannelId) -
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1118                                            CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1120      /* This invalid value of STminTicks case is possible according to [SWS_CanTp_00082] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1121      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1123      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1124      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1125          BSMax = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_BS);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1128          {   /* Enough buffer to recieve all frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1130          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1132          {   /* Enough buffer to recieve Block frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1133              BS = (uint8)(RemBufSize/OneFramePayloadLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1135          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1136      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1140      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1142      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1144      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1145  		BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1147  	    Channel->FlowStatus = CANTP_FC_CTS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1148          #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1149          Channel->STminTicks = 0;  /* BS locking for CANTP_DYNAMIC_FC_SUPPORT Disabled case  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1150          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1151      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1152  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1153      Channel->BS = BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1154  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1155  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1156  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1157   Function name    : CanTp_Prv_PageConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1158   Syntax           : CanTp_Prv_PageConfirmation(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1159   Description      : This is a wrapper function to update for upper layer page refilling.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1160   Parameter        : const CanTp_TxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1161   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1162  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1163  LOCAL_INLINE void CanTp_Prv_PageConfirmation(const CanTp_TxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1164  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1165      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1166      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1167      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1168  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1169      if(CanTp_Channel[Context->ChannelId].TxBufferStatus == CANTP_BUFFER_NOT_ASKED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1170      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1171          SduInfo.SduLength = Context->PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1172          SduInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1173          /* As Page confirmation is done only in case of not availability of buffer so void typecasting is ok. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1174          (void)PduR_CanTpCopyTxData(Context->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1175          CanTp_Channel[Context->ChannelId].TxBufferStatus = CANTP_BUFFER_ASKED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1176      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1177  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1178  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1179  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1180   Function name    : CanTp_Prv_FcTxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1181   Syntax           : CanTp_Prv_FcTxConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1182   Description      : Function to change channel state at confirmation recieved for FC in CanTp_TxConfirmation.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1183   Parameter        : PduIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1184   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1185  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1186  LOCAL_INLINE void CanTp_Prv_FcTxConfirmation(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1187  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1188      const CanTp_ChannelType *Channel = CanTp_Channel + ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1189      const CanTp_RxSduType *RxConnection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1190  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1191      switch(Channel->FlowStatus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1192      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1193          case CANTP_FC_CTS:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1194              CanTp_SubState[ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1195              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1196          case CANTP_FC_WAIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1198              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1199          case CANTP_FC_OVERFLOW:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1200              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, RxConnection->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1201              CanTp_SubState[ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1202              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1203          default:    /* Wrong FlowStatus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1204              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1205      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1206  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1207  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1208  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1209   Function name    : CanTp_Prv_PrepareFcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1210   Syntax           : CanTp_Prv_PrepareFcTransmit(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1211   Description      : This function sets the context w.r.t. FC transmission for RxConnection of Active Channel.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1212   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1213   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1214  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1215  LOCAL_INLINE void CanTp_Prv_PrepareFcTransmit(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1216  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1217      if(CanTp_Channel[ChannelId].BlockCfsRemaining == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1218      { /* TRACE[SWS_CanTp_00082][SWS_CanTp_00278] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1219          CanTp_Channel[ChannelId].FcWait = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1220          CanTp_Channel[ChannelId].FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1221          CanTp_SubState[ChannelId] = CANTP_RX_SEND_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1222      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1223  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1224  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1225  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1226   Function name    : CanTp_Prv_PrepareFcRecieve
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1227   Syntax           : CanTp_Prv_PrepareFcRecieve(Channel)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1228   Description      : Function to advance the Channel to Next State from Flow control related State in case FC is
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1229                      deactivated.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1230   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1231   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1232  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1233  LOCAL_INLINE void CanTp_Prv_PrepareFcRecieve(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1234  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1235  	#if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1236      if(CanTp_Prv_GetBit(CanTp_Prv_GetTxActiveBits(ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1237      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1238          CanTp_Channel[ChannelId].BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1239          CanTp_Channel[ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1240          CanTp_SubState[ChannelId] = CANTP_TX_SEND_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1241      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1242      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1243      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1244      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1245          CanTp_SubState[ChannelId] = CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME;
	addsc.a	a15,a2,d8,#0
.L717:
	mov	d15,#3
.L1089:
	st.b	[a15],d15
.L1090:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1246      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1247  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1248  	CanTp_Channel[ChannelId].PciId = CANTP_NPCI_FC;
	mul	d15,d8,#20
	addsc.a	a15,a5,d15,#0
.L1091:
	mov	d15,#5
.L1092:
	st.b	[a15]2,d15

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   489                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   490                      else
.L166:
.L164:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   491                      {   /* If flowcontrol is disabled then move state to next level and update STMin/BS defaults. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   492                          CanTp_Prv_PrepareFcRecieve(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   493                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   494                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   495                  /* TRACE[SWS_CanTp_00248][SWS_CanTp_00075] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   496                  CanTp_TxConfirmationChannel[TxPduId] = CANTP_INVALID_CHANNEL;
	mov	d15,#2
.L1093:
	st.b	[a12],d15
.L1094:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   497                  break;
	j	.L167

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   498  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   499              default:    /* Wrong State */
.L148:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   500                  break;
	j	.L168

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   501  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   502  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   503  		SchM_Exit_CanTp_EXCLUSIVE_AREA();
.L168:
.L167:
.L159:
.L141:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   504  		/* If burst mode is enabled then activate state function directly. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   505  		CanTp_Prv_BurstMainFunction(ChannelId, CANTP_TRIGGER_TX_CONFIRMATION);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   506  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   507  }
	ret
.L499:
	
__CanTp_TxConfirmation_function_end:
	.size	CanTp_TxConfirmation,__CanTp_TxConfirmation_function_end-CanTp_TxConfirmation
.L362:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_RxIndication',code,cluster('CanTp_RxIndication')
	.sect	'.text.CanTp.CanTp_RxIndication'
	.align	2
	
	.global	CanTp_RxIndication

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   510   Function name    : CanTp_RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   511   Syntax           : CanTp_RxIndication(RxPduId, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   512   Description      : Indication of a received I-PDU from a lower layer communication interface module. I.e. CanIf Module
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   513                      calls this Api for [SF][FF][CF][FC] type frames. TRACE[SWS_CanTp_00214][SWS_CanTp_00078]
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   514                      [SWS_CanTp_00235][SWS_CanTp_00057][SWS_CanTp_00290]
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   515   Parameter        : PduIdType, PduInfoType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   516   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   517  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   518  void CanTp_RxIndication(PduIdType RxPduId, const PduInfoType *PduInfoPtr)
; Function CanTp_RxIndication
.L326:
CanTp_RxIndication:	.type	func
	sub.a	a10,#24
.L718:
	mov.aa	a12,a4
.L721:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   519  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   520  	CanTp_RxContextType Context;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   521  	uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   522  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   523  	Context.PduId = RxPduId;
	st.h	[a10]14,d4
.L1099:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   524      Context.FrameType = 0;
	mov	d15,#0
.L1100:
	st.b	[a10]4,d15
.L1101:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   525      Context.ChannelId = 0;
	mov	d15,#0
.L1102:
	st.b	[a10]11,d15
.L1103:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   526  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   527      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   528      if(CanTp_Prv_IsNoDevError(RxPduId, CANTP_RXINDICATION, CANTP_E_INVALID_RX_ID))
	mov	d6,#66
.L1104:
	mov	d7,#64
.L539:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L722:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d1,#1
.L723:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L1105:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L169
.L1106:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L1107:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L170

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L169:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d15,#3
	jeq	d15,d6,.L171
.L1108:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L172
.L1109:
	mov	d15,#9
	jeq	d15,d6,.L173
.L1110:
	mov	d15,#10
	jeq	d15,d6,.L174
.L1111:
	mov	d15,#11
	jeq	d15,d6,.L175
.L1112:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L176
.L1113:
	mov	d15,#64
	jeq	d15,d6,.L177
.L1114:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L178
	j	.L179

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L174:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L175:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L173:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1115:
	ld.bu	d0,[a15]3
.L1116:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L180

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L171:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L172:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1117:
	ld.bu	d0,[a15]4
.L1118:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L181

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L177:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L176:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1119:
	ld.bu	d0,[a15]2
.L1120:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L182

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L178:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1121:
	ld.bu	d0,[a15]1
.L1122:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L183

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L179:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L184

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L184:
.L183:
.L182:
.L181:
.L180:
	jlt.u	d4,d0,.L185
.L1123:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L186

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L185:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L186:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L170:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L187
.L1124:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L720:
	mov	d5,#0
	call	Det_ReportError
.L719:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d1,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L187:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L188

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L188:
	jeq	d1,#0,.L189
.L540:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   529  	#endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   530  	{/* TRACE[SWS_CanTp_00238] Initialization check done in CanTp_Prv_IsNoDevError */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   531  		if(PduInfoPtr == NULL_PTR)
	jnz.a	a12,.L190
.L1125:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   532  		{   /* TRACE[SWS_CanTp_00322] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   533  		    CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, CANTP_E_PARAM_POINTER);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#66
	mov	d7,#3
	call	Det_ReportRuntimeError
.L724:
	j	.L191
.L190:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   534  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   535  		else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   536  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   537  		    ErrorId = CanTp_Prv_GetRxContext(&Context, PduInfoPtr);
	lea	a13,[a10]0
.L548:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
	mov	d8,#1
.L725:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
	movh.a	a14,#@his(CanTp_CfgPtr)
	lea	a14,[a14]@los(CanTp_CfgPtr)
	ld.a	a15,[a14]
.L1126:
	ld.a	a15,[a15]8
.L1127:
	ld.hu	d15,[a10]14
.L1128:
	addsc.a	a2,a15,d15,#3
.L726:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
	ld.a	a15,[a12]
.L728:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)      (inlined)
	jnz.a	a15,.L192
.L1129:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
	mov	d8,#3
.L1130:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;      (inlined)
	j	.L193

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)      (inlined)
.L192:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
	mov	d15,#0
.L1131:
	st.b	[a10]3,d15
.L1132:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
	ld.bu	d0,[a2]
.L1133:
	st.b	[a10]21,d0
.L1134:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
	ld.bu	d15,[a2]1
.L1135:
	st.b	[a10]20,d15
.L1136:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
	ld.w	d15,[a2]4
.L1137:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)      (inlined)
	jeq	d15,#0,.L194
.L1138:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
	ld.bu	d15,[a15]
.L1139:
	st.b	[a10]3,d15
.L1140:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
	add.a	a15,#1
.L1141:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
	ld.a	a2,[a2]4
.L727:
	lea	a4,[a10]20
.L1142:
	lea	a5,[a10]21
.L1143:
	ld.bu	d4,[a10]3
	calli	a2

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)      (inlined)
.L194:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
	ld.bu	d0,[a15]
.L1144:
	sha	d1,d0,#-4
.L729:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)      (inlined)
	jge.u	d1,#4,.L195
.L1145:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
	st.b	[a10]4,d1
.L565:
	ld.a	a15,[a14]
.L566:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)      (inlined)
	jne	d1,#3,.L196
.L1146:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
	ld.bu	d15,[a10]20
.L1147:
	st.b	[a10]12,d15
.L571:
	mov	d0,#1
.L731:
	ld.bu	d1,[a13]12
.L730:
	ld.bu	d15,[a15]4
.L1148:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)      (inlined)
	jge.u	d1,d15,.L197
.L1149:
	mul	d15,d1,#12
.L1150:
	ld.a	a2,[a15]12
.L1151:
	addsc.a	a2,a2,d15,#0
.L732:
	ld.bu	d15,[a2]5
.L1152:
	movh.a	a2,#@his(CanTp_SubState)
.L733:
	lea	a2,[a2]@los(CanTp_SubState)
.L1153:
	addsc.a	a2,a2,d15,#0
	ld.bu	d1,[a2]
.L1154:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)      (inlined)
	jne	d1,#3,.L198
.L1155:
	st.b	[a13]11,d15
.L1156:
	mov	d0,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)      (inlined)
.L198:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)      (inlined)
.L197:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;      (inlined)
	j	.L199

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }      (inlined)
.L199:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)      (inlined)
	jne	d0,#0,.L200
.L572:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
	ld.bu	d15,[a10]12
.L1157:
	mul	d15,d15,#12
.L1158:
	ld.a	a15,[a15]12
.L1159:
	addsc.a	a15,a15,d15,#0
.L734:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
	ld.hu	d15,[a15]10
.L1160:
	st.h	[a10]16,d15
.L1161:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
	ld.bu	d15,[a15]3
.L1162:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1163:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1164:
	st.b	[a10]9,d15
.L1165:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
	ld.bu	d15,[a15]1
.L575:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#8
	ne	d15,d15,#0
.L1166:
	j	.L202
.L201:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L202:
	j	.L203

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L203:
	st.b	[a10]1,d15
.L576:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
	mov	d8,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)      (inlined)
.L200:
	j	.L204

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)      (inlined)
.L196:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
	ld.bu	d15,[a10]21
.L1167:
	st.b	[a10]12,d15
.L1168:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
	ld.bu	d0,[a10]21
.L1169:
	ld.bu	d15,[a15]3
.L1170:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)      (inlined)
	jge.u	d0,d15,.L205
.L1171:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
	ld.bu	d0,[a10]21
.L1172:
	mul	d15,d0,#12
.L1173:
	ld.a	a15,[a15]16
.L1174:
	addsc.a	a15,a15,d15,#0
.L735:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
	ld.bu	d15,[a15]5
.L1175:
	st.b	[a10]11,d15
.L1176:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
	ld.hu	d15,[a15]10
.L1177:
	st.h	[a10]16,d15
.L1178:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
	ld.bu	d15,[a15]2
.L1179:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1180:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1181:
	st.b	[a10]9,d15
.L1182:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
	ld.bu	d15,[a15]
.L579:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#8
	ne	d15,d15,#0
.L1183:
	j	.L207
.L206:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L207:
	j	.L208

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L208:
	st.b	[a10]1,d15
.L580:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
	ld.bu	d15,[a15]
.L581:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#1
	ne	d15,d15,#0
.L1184:
	j	.L210
.L209:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L210:
	j	.L211

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L211:
	st.b	[a10]2,d15
.L582:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
	ld.bu	d15,[a15]
.L583:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#4
	ne	d15,d15,#0
.L1185:
	j	.L213
.L212:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L213:
	j	.L214

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L214:
	st.b	[a13],d15
.L1186:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?      (inlined)
	jeq	d15,#0,.L215
.L584:
	jeq	d1,#0,.L216
.L1187:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
	mov	d8,#144
.L1188:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */      (inlined)
	j	.L217
.L216:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?      (inlined)
.L215:
	mov	d8,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */      (inlined)
.L217:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)      (inlined)
.L205:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else      (inlined)
.L204:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)      (inlined)
.L195:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else      (inlined)
.L193:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
	mov	d7,d8

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;      (inlined)
	j	.L218

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }      (inlined)
.L218:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   538  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   539  		    if(ErrorId != CANTP_NO_ERROR)
	jeq	d7,#0,.L219
.L1189:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   540              {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   541                  CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, ErrorId);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#66
	call	Det_ReportRuntimeError
.L1190:
	j	.L220
.L219:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   542              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   543              else if(CanTp_Prv_RxSduLengthCheck(&Context, PduInfoPtr) != E_OK)
	lea	a2,[a10]0
.L586:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
	mov	d4,#255
.L736:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
	mov	d3,#0
.L737:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
	mov	d6,#0
.L738:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
	mov	d2,#0
.L739:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
	ld.bu	d7,[a10]9
.L1191:
	ld.a	a15,[a12]
.L1192:
	addsc.a	a15,a15,d7,#0
.L740:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
	ld.bu	d15,[a15]
.L1193:
	and	d5,d15,#15
.L1194:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
	ld.bu	d0,[a10]4
.L1195:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
	mov	d15,#0
	jeq	d15,d0,.L221
.L1196:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
	mov	d1,#1
	jeq	d1,d0,.L222
.L1197:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
	mov	d1,#2
	jeq	d1,d0,.L223
.L1198:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
	mov	d1,#3
	jeq	d1,d0,.L224
	j	.L225

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:      (inlined)
.L221:
	movh.a	a2,#@his(CanTp_PciSize)
	lea	a2,[a2]@los(CanTp_PciSize)
.L1199:
	ld.hu	d0,[a12]4
.L1200:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)      (inlined)
	jge.u	d0,#9,.L226
.L1201:
	ld.bu	d0,[a2]
.L1202:
	add	d0,d7
	extr.u	d3,d0,#0,#8
.L1203:
	mov	d6,d5
.L1204:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))      (inlined)
	jeq	d5,#0,.L227
.L1205:
	rsub	d0,d3,#8
.L1206:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))      (inlined)
	jlt.u	d0,d5,.L228
.L1207:
	ld.bu	d15,[a10]1
.L1208:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);      (inlined)
	jeq	d15,#0,.L229
.L1209:
	mov	d15,#8
.L1210:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);      (inlined)
	j	.L230
.L229:
	add	d15,d3,d5

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);      (inlined)
.L230:
	extr.u	d4,d15,#0,#8

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))      (inlined)
.L228:
.L227:
	j	.L231

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)      (inlined)
.L226:
	ld.bu	d15,[a2]1
.L1211:
	add	d1,d15,d7
	extr.u	d3,d1,#0,#8
.L1212:
	ld.bu	d6,[a15]1
.L1213:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&      (inlined)
	jne	d5,#0,.L232
.L1214:
	rsub	d1,d7,#7
.L1215:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&      (inlined)
	jge.u	d1,d6,.L233
.L1216:
	sub	d0,d3
.L1217:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&      (inlined)
	jlt	d0,d6,.L234
.L1218:
	add	d0,d7,d6
.L1219:
	mov	d15,#62
.L1220:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))      (inlined)
	jlt.u	d15,d0,.L235
.L1221:
	add	d0,d3,d6
.L1222:
	ld.bu	d15,[a10]1
.L1223:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);      (inlined)
	jeq	d15,#0,.L236
.L1224:
	movh.a	a15,#@his(CanTp_CanDlTable)
.L741:
	lea	a15,[a15]@los(CanTp_CanDlTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d0,[a15]
.L1225:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);      (inlined)
	j	.L237
.L236:
.L237:
	extr.u	d4,d0,#0,#8

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&      (inlined)
.L235:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))      (inlined)
.L234:
.L233:
.L232:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else      (inlined)
.L231:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;      (inlined)
	j	.L238

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */      (inlined)
.L222:
	ld.hu	d15,[a12]4
.L1226:
	extr.u	d15,d15,#0,#8
.L742:
	mov	d0,#8

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L239
	mov	d0,#12

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L240
	mov	d0,#16

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L241
	mov	d0,#20

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L242
	mov	d0,#24

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L243
	mov	d0,#32

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L244
	mov	d0,#48

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L245
	mov	d0,#64

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	jeq	d15,d0,.L246
.L1227:
	mov	d4,#255
.L1228:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
	j	.L247
.L246:
.L245:
.L244:
.L243:
.L242:
.L241:
.L240:
.L239:
	mov	d4,d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */      (inlined)
.L247:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);      (inlined)
	lt.u	d15,d15,#9
.L743:
	mov	d0,#1
	cmov	d0,d15,#0
.L1229:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);      (inlined)
	j	.L249
.L248:
	mov	d0,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);      (inlined)
.L249:
	sub	d1,d4,d7
.L1230:
	sub	d1,d0
	extr.u	d1,d1,#0,#16
.L746:
	ld.bu	d15,[a15]1
.L1231:
	sh	d2,d5,#8
.L1232:
	add	d2,d15
.L1233:
	movh.a	a4,#@his(CanTp_PciSize)
	lea	a4,[a4]@los(CanTp_PciSize)
.L1234:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)      (inlined)
	jne	d2,#0,.L250
.L1235:
	ld.bu	d15,[a15]2
	sh	d0,d15,#24
.L1236:
	ld.bu	d15,[a15]3
	sh	d15,d15,#16
.L1237:
	add	d0,d15
.L1238:
	ld.bu	d15,[a15]4
	sh	d2,d15,#8
.L745:
	add	d2,d0
.L1239:
	ld.bu	d15,[a15]5
.L747:
	add	d2,d15
.L1240:
	ld.bu	d15,[a4]3
.L1241:
	add	d7,d15
	extr.u	d3,d7,#0,#8
.L1242:
	mov	d15,#-1
.L1243:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;      (inlined)
	jlt.u	d15,d2,.L251
.L1244:
	mov	d15,#4095
.L1245:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;      (inlined)
	jlt.u	d15,d2,.L252
.L251:
	mov	d4,#255
.L1246:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;      (inlined)
	j	.L253
.L252:
.L253:
	j	.L254

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)      (inlined)
.L250:
	ld.bu	d15,[a4]2
.L1247:
	add	d7,d15
	extr.u	d3,d7,#0,#8

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else      (inlined)
.L254:
	ld.bu	d15,[a2]
.L1248:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;      (inlined)
	jne	d15,#0,.L255
.L1249:
	jge.u	d2,d1,.L256
.L255:
	mov	d4,#255
.L1250:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;      (inlined)
	j	.L257
.L256:
.L257:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;      (inlined)
	j	.L258

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:      (inlined)
.L223:
	movh.a	a15,#@his(CanTp_Channel)
.L744:
	lea	a15,[a15]@los(CanTp_Channel)
.L1251:
	ld.bu	d15,[a10]11
.L1252:
	mul	d15,d15,#20
	addsc.a	a2,a15,d15,#0
.L1253:
	ld.hu	d0,[a2]12
.L748:
	st.b	[a10]6,d5
.L1254:
	ld.bu	d15,[a10]11
	mul	d15,d15,#20
	addsc.a	a15,a15,d15,#0
	ld.bu	d4,[a15]1
.L1255:
	ld.bu	d15,[a10]9
.L1256:
	add	d15,#1
	extr.u	d3,d15,#0,#8
.L1257:
	sub	d15,d4,d3
	extr.u	d15,d15,#0,#8
.L750:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;      (inlined)
	jge.u	d0,d15,.L259
.L1258:
	add	d0,d3
.L749:
	extr.u	d4,d0,#0,#8
.L1259:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;      (inlined)
	j	.L260
.L259:
.L260:
	ld.bu	d15,[a10]1
.L751:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;      (inlined)
	jeq	d15,#0,.L261
.L1260:
	movh.a	a15,#@his(CanTp_CanDlTable)
	lea	a15,[a15]@los(CanTp_CanDlTable)
	addsc.a	a15,a15,d4,#0
	ld.bu	d4,[a15]
.L1261:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;      (inlined)
	j	.L262
.L261:
.L262:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;      (inlined)
	j	.L263

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:      (inlined)
.L224:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
	st.b	[a10]5,d5
.L1262:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
	ld.bu	d15,[a10]9
.L1263:
	add	d0,d15,#1
	extr.u	d3,d0,#0,#8
.L1264:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
	ld.bu	d0,[a10]1
.L1265:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);      (inlined)
	jeq	d0,#0,.L264
.L1266:
	mov	d15,#8
.L1267:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);      (inlined)
	j	.L265
.L264:
	add	d15,#3

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);      (inlined)
.L265:
	extr.u	d4,d15,#0,#8
.L1268:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;      (inlined)
	j	.L266

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */      (inlined)
.L225:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;      (inlined)
	j	.L267

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;      (inlined)
.L267:
.L266:
.L263:
.L258:
.L238:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
	st.b	[a10]10,d4
.L1269:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
	st.b	[a10]7,d3
.L1270:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
	ld.bu	d15,[a10]4
.L1271:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;      (inlined)
	jne	d15,#0,.L268
.L1272:
	mov	d15,d6
.L1273:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;      (inlined)
	j	.L269
.L268:
	extr.u	d15,d2,#0,#16

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;      (inlined)
.L269:
	st.h	[a10]18,d15
.L1274:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
	ld.hu	d0,[a12]4
	ld.bu	d15,[a10]10

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);      (inlined)
	lt.u	d15,d0,d15
	j	.L271
.L270:
	mov	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);      (inlined)
.L271:
	j	.L272

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }      (inlined)
.L272:
	jeq	d15,#0,.L273
.L587:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1097      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1098      return CanTp_ParamPair[id].Param[value];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1099      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1101  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1102  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1103   Function name    : CanTp_Prv_SetRxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1104   Syntax           : CanTp_Prv_SetRxBlockInfo(ChannelId, RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1105   Description      : Function to initialize the block related parameters for the Rx connection Channel based on the
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1106                      Buffer Availability in PduR and configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1107   Parameter        : CanTp_ChannelIdType, const PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1110  LOCAL_INLINE void CanTp_Prv_SetRxBlockInfo(CanTp_ChannelIdType ChannelId, const PduLengthType RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1112      uint8 BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1113      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1114  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1115      uint8 BS = Channel->BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1116      const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1117      PduLengthType OneFramePayloadLength = CanTp_Prv_GetRxDl(ChannelId) -
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1118                                            CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1120      /* This invalid value of STminTicks case is possible according to [SWS_CanTp_00082] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1121      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1123      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1124      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1125          BSMax = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_BS);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1128          {   /* Enough buffer to recieve all frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1130          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1132          {   /* Enough buffer to recieve Block frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1133              BS = (uint8)(RemBufSize/OneFramePayloadLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1135          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1136      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1140      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1142      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1144      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1145  		BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1147  	    Channel->FlowStatus = CANTP_FC_CTS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1148          #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1149          Channel->STminTicks = 0;  /* BS locking for CANTP_DYNAMIC_FC_SUPPORT Disabled case  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1150          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1151      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1152  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1153      Channel->BS = BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1154  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1155  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1156  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1157   Function name    : CanTp_Prv_PageConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1158   Syntax           : CanTp_Prv_PageConfirmation(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1159   Description      : This is a wrapper function to update for upper layer page refilling.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1160   Parameter        : const CanTp_TxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1161   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1162  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1163  LOCAL_INLINE void CanTp_Prv_PageConfirmation(const CanTp_TxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1164  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1165      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1166      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1167      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1168  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1169      if(CanTp_Channel[Context->ChannelId].TxBufferStatus == CANTP_BUFFER_NOT_ASKED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1170      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1171          SduInfo.SduLength = Context->PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1172          SduInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1173          /* As Page confirmation is done only in case of not availability of buffer so void typecasting is ok. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1174          (void)PduR_CanTpCopyTxData(Context->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1175          CanTp_Channel[Context->ChannelId].TxBufferStatus = CANTP_BUFFER_ASKED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1176      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1177  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1178  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1179  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1180   Function name    : CanTp_Prv_FcTxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1181   Syntax           : CanTp_Prv_FcTxConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1182   Description      : Function to change channel state at confirmation recieved for FC in CanTp_TxConfirmation.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1183   Parameter        : PduIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1184   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1185  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1186  LOCAL_INLINE void CanTp_Prv_FcTxConfirmation(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1187  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1188      const CanTp_ChannelType *Channel = CanTp_Channel + ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1189      const CanTp_RxSduType *RxConnection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1190  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1191      switch(Channel->FlowStatus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1192      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1193          case CANTP_FC_CTS:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1194              CanTp_SubState[ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1195              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1196          case CANTP_FC_WAIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1198              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1199          case CANTP_FC_OVERFLOW:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1200              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, RxConnection->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1201              CanTp_SubState[ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1202              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1203          default:    /* Wrong FlowStatus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1204              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1205      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1206  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1207  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1208  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1209   Function name    : CanTp_Prv_PrepareFcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1210   Syntax           : CanTp_Prv_PrepareFcTransmit(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1211   Description      : This function sets the context w.r.t. FC transmission for RxConnection of Active Channel.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1212   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1213   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1214  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1215  LOCAL_INLINE void CanTp_Prv_PrepareFcTransmit(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1216  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1217      if(CanTp_Channel[ChannelId].BlockCfsRemaining == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1218      { /* TRACE[SWS_CanTp_00082][SWS_CanTp_00278] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1219          CanTp_Channel[ChannelId].FcWait = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1220          CanTp_Channel[ChannelId].FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1221          CanTp_SubState[ChannelId] = CANTP_RX_SEND_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1222      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1223  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1224  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1225  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1226   Function name    : CanTp_Prv_PrepareFcRecieve
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1227   Syntax           : CanTp_Prv_PrepareFcRecieve(Channel)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1228   Description      : Function to advance the Channel to Next State from Flow control related State in case FC is
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1229                      deactivated.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1230   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1231   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1232  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1233  LOCAL_INLINE void CanTp_Prv_PrepareFcRecieve(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1234  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1235  	#if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1236      if(CanTp_Prv_GetBit(CanTp_Prv_GetTxActiveBits(ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1237      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1238          CanTp_Channel[ChannelId].BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1239          CanTp_Channel[ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1240          CanTp_SubState[ChannelId] = CANTP_TX_SEND_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1241      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1242      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1243      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1244      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1245          CanTp_SubState[ChannelId] = CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1246      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1247  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1248  	CanTp_Channel[ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1249  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1251  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1252   Function name    : CanTp_Prv_LengthError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1253   Syntax           : CanTp_Prv_LengthError(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1254   Description      : Library function to abort connection in case dlc check failed.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1255   Parameter        : const CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1256   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1257  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1258  LOCAL_INLINE void CanTp_Prv_LengthError(const CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1259  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1260      uint8 Api;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1261  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1262      Api = (Context->FrameType == CANTP_FLOWCONTROL_FRAME) ? CANTP_TX_PDUR_CONFIRMATION : CANTP_RX_PDUR_CONFIRMATION;
	ld.bu	d15,[a10]4
.L1275:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1262      Api = (Context->FrameType == CANTP_FLOWCONTROL_FRAME) ? CANTP_TX_PDUR_CONFIRMATION : CANTP_RX_PDUR_CONFIRMATION;      (inlined)
	ne	d0,d15,#3
.L752:
	j	.L275
.L274:
	mov	d0,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1262      Api = (Context->FrameType == CANTP_FLOWCONTROL_FRAME) ? CANTP_TX_PDUR_CONFIRMATION : CANTP_RX_PDUR_CONFIRMATION;      (inlined)
.L275:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1263      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1264      if((CanTp_SubState[Context->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) ||
	movh.a	a12,#@his(CanTp_SubState)
.L754:
	lea	a12,[a12]@los(CanTp_SubState)
.L1276:
	ld.bu	d15,[a10]11
.L1277:
	addsc.a	a15,a12,d15,#0
	ld.bu	d1,[a15]
.L1278:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1264      if((CanTp_SubState[Context->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) ||      (inlined)
	jeq	d1,#3,.L276
.L1279:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1265         (CanTp_SubState[Context->ChannelId] == CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME))
	mov	d15,#8
.L1280:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1265         (CanTp_SubState[Context->ChannelId] == CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME))      (inlined)
	jne	d15,d1,.L277

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1264      if((CanTp_SubState[Context->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) ||      (inlined)
.L276:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1266      {   /* TRACE[SWS_CanTp_00346][SWS_CanTp_00349] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1267          CanTp_Prv_PduRConfirmation(Api, Context->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	addsc.a	a15,a15,d0,#2
	ld.a	a15,[a15]
	ld.hu	d4,[a10]16
.L755:
	mov	d5,#1
	calli	a15
.L753:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1268          CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a10]11
.L1281:
	addsc.a	a15,a12,d15,#0
.L1282:
	mov	d15,#0
.L1283:
	st.b	[a15],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1264      if((CanTp_SubState[Context->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) ||      (inlined)
.L277:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1269      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1270      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1272      if(Context->IsPaddingOn)
	ld.bu	d15,[a10]1
.L1284:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1272      if(Context->IsPaddingOn)      (inlined)
	jeq	d15,#0,.L278
.L1285:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1273      {   /* TRACE[SWS_CanTp_00344][SWS_CanTp_00345] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1274          CanTp_Prv_ReportError(CANTP_RXINDICATION, CANTP_E_PADDING);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#66
	mov	d7,#112
	call	Det_ReportError
.L1286:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1274          CanTp_Prv_ReportError(CANTP_RXINDICATION, CANTP_E_PADDING);      (inlined)
	j	.L279

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1272      if(Context->IsPaddingOn)      (inlined)
.L278:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1275      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1276      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1277      {  /* Implementation specific error just to indicate Length check failed. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1278          CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#66
	mov	d7,#176
	call	Det_ReportRuntimeError

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1276      else      (inlined)
.L279:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   544              {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   545                  CanTp_Prv_LengthError(&Context);
	j	.L280
.L273:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   546  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   547  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   548  			{   /* Frame Processing based on Context updated in CanTp_Prv_GetRxContext and CanTp_Prv_RxSduLengthCheck */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   549                  CanTp_Prv_ProcessFrame(&Context, PduInfoPtr);
	ld.bu	d15,[a10]4
	movh.a	a15,#@his(CanTp_ProcessFrame)
	lea	a15,[a15]@los(CanTp_ProcessFrame)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	lea	a4,[a10]0
	mov.aa	a5,a12
.L756:
	calli	a15
.L280:
.L220:
.L191:
.L189:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   550                  /* If burst mode is enabled then activate state function directly. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   551                  CanTp_Prv_BurstMainFunction(Context.ChannelId, CANTP_TRIGGER_RX_INDICATION);
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   552              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   553  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   554  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   555  }
	ret
.L533:
	
__CanTp_RxIndication_function_end:
	.size	CanTp_RxIndication,__CanTp_RxIndication_function_end-CanTp_RxIndication
.L367:
	; End of function
	
	.sdecl	'.text.CanTp.CanTp_TriggerTransmit',code,cluster('CanTp_TriggerTransmit')
	.sect	'.text.CanTp.CanTp_TriggerTransmit'
	.align	2
	
	.global	CanTp_TriggerTransmit

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   556  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   557  #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   558  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   559   Function name    : CanTp_TriggerTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   560   Syntax           : CanTp_TriggerTransmit(TxPduId, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   561   Description      : Can Driver calls this Api for the data to be transmitted correponding to the request in
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   562                      CanIf_Transmit.
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   563   Parameter        : PduIdType, PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   564   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   565  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   566  Std_ReturnType CanTp_TriggerTransmit(PduIdType TxPduId, PduInfoType *PduInfoPtr)
; Function CanTp_TriggerTransmit
.L328:
CanTp_TriggerTransmit:	.type	func
	mov	d8,d4
.L759:
	mov.aa	a12,a4
.L760:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   567  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   568      Std_ReturnType Status = E_NOT_OK; /* TRACE[SWS_CanTp_00294] */
	mov	d9,#1
.L761:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   569      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   570      uint8 TX_DL = CANTP_DEFAULT_CAN_DL;
	mov	d10,#8
.L763:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   571  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   572      #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   573      if(CanTp_Prv_IsNoDevError(TxPduId, CANTP_TRIGGERTRANSMIT, CANTP_E_INVALID_TX_ID))
	mov	d6,#12
.L1291:
	mov	d7,#48
.L616:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
	mov	d0,#0
.L764:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
	mov	d1,#1
.L765:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
	movh.a	a15,#@his(CanTp_MainState)
	lea	a15,[a15]@los(CanTp_MainState)
	ld.bu	d15,[a15]
.L1292:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
	jeq	d15,#1,.L281
.L1293:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
	mov	d7,#32
.L1294:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;      (inlined)
	j	.L282

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)      (inlined)
.L281:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
	mov	d2,#3
	jeq	d2,d6,.L283
.L1295:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
	mov	d15,#8
	jeq	d15,d6,.L284
.L1296:
	mov	d15,#9
	jeq	d15,d6,.L285
.L1297:
	mov	d15,#10
	jeq	d15,d6,.L286
.L1298:
	mov	d15,#11
	jeq	d15,d6,.L287
.L1299:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
	mov	d15,#12
	jeq	d15,d6,.L288
.L1300:
	mov	d15,#64
	jeq	d15,d6,.L289
.L1301:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
	mov	d15,#66
	jeq	d15,d6,.L290
	j	.L291

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:      (inlined)
.L286:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:      (inlined)
.L287:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:      (inlined)
.L285:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1302:
	ld.bu	d0,[a15]3
.L1303:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;      (inlined)
	j	.L292

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:      (inlined)
.L283:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:      (inlined)
.L284:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1304:
	ld.bu	d0,[a15]4
.L1305:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;      (inlined)
	j	.L293

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:      (inlined)
.L289:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:      (inlined)
.L288:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1306:
	ld.bu	d0,[a15]2
.L1307:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;      (inlined)
	j	.L294

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:      (inlined)
.L290:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1308:
	ld.bu	d0,[a15]1
.L1309:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;      (inlined)
	j	.L295

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */      (inlined)
.L291:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;      (inlined)
	j	.L296

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L296:
.L295:
.L294:
.L293:
.L292:
	jlt.u	d8,d0,.L297
.L1310:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;      (inlined)
	j	.L298

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)      (inlined)
.L297:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
	mov	d7,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else      (inlined)
.L298:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else      (inlined)
.L282:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
	jeq	d7,#0,.L299
.L1311:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
	mov	d4,#35
.L758:
	mov	d5,#0
	call	Det_ReportError
.L757:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
	mov	d1,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)      (inlined)
.L299:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;      (inlined)
	j	.L300

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }      (inlined)
.L300:
	jeq	d1,#0,.L301
.L617:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   574      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   575      {   /* TRACE[SWS_CanTp_00238] Initialization check done in CanTp_Prv_IsNoDevError */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   576          if(PduInfoPtr == NULL_PTR)
	jnz.a	a12,.L302
.L1312:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   577          {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   578              CanTp_Prv_ReportRunTimeError(CANTP_TRIGGERTRANSMIT, CANTP_E_PARAM_POINTER);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#12
	mov	d7,#3
	call	Det_ReportRuntimeError
.L766:
	j	.L303
.L302:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   579          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   580          else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   581          {  /* Take the ChannelId locked for TxConfirmation even in TriggerTransmit. */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   582              ChannelId = CanTp_TxConfirmationChannel[TxPduId];
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L1313:
	addsc.a	a15,a15,d8,#0
	ld.bu	d4,[a15]
.L768:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   583  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   584              SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   585              if(ChannelId < CanTp_CfgPtr->NumberOfChannels)
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a2,[a15]
.L1314:
	ld.bu	d15,[a2]
.L1315:
	jge.u	d4,d15,.L304
.L1316:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   586              {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   587                  TX_DL = (CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION) ?
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1317:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1318:
	jne	d15,#2,.L305
.L1319:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   588                          CanTp_Prv_GetTxDl(CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId) : TX_DL;
	mul	d15,d4,#20
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]6
	mul	d15,d15,#12
	ld.a	a15,[a2]12
	addsc.a	a15,a15,d15,#0
	ld.bu	d10,[a15]
.L1320:
	j	.L306
.L305:
.L306:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   589  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   590                  if((PduInfoPtr->SduLength < TX_DL) || (PduInfoPtr->SduDataPtr == NULL_PTR))
	ld.hu	d15,[a12]4
.L1321:
	jlt.u	d15,d10,.L307
.L1322:
	ld.w	d15,[a12]
.L1323:
	jne	d15,#0,.L308
.L307:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   591                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   592                      CanTp_Prv_ReportRunTimeError(CANTP_TRIGGERTRANSMIT, CANTP_E_PARAM_POINTER);
	mov	d4,#35
.L769:
	mov	d5,#0
	mov	d6,#12
	mov	d7,#3
	call	Det_ReportRuntimeError
.L767:
	j	.L309
.L308:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   593                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   594                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   595                  {   /* TRACE[SWS_CanTp_00298] */
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   596                      Status = CanTp_Prv_CreateFrame(ChannelId, PduInfoPtr);
	mul	d15,d4,#20
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]2
	movh.a	a15,#@his(CanTp_PciFrameType)
	lea	a15,[a15]@los(CanTp_PciFrameType)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_CreateFrame)
	lea	a15,[a15]@los(CanTp_CreateFrame)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	mov.aa	a4,a12
.L770:
	calli	a15
.L762:
	mov	d9,d2
.L309:
.L304:
.L303:
.L301:

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   597                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   598              }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   599              SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   600          }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   601      }
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   602  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   603      return Status;
	mov	d2,d9
.L771:
	j	.L310

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   604  }
.L310:
	ret
.L609:
	
__CanTp_TriggerTransmit_function_end:
	.size	CanTp_TriggerTransmit,__CanTp_TriggerTransmit_function_end-CanTp_TriggerTransmit
.L372:
	; End of function
	
	.sdecl	'.bss.CanTp.CanTp_MainState',data,cluster('CanTp_MainState')
	.sect	'.bss.CanTp.CanTp_MainState'
	.global	CanTp_MainState
CanTp_MainState:	.type	object
	.size	CanTp_MainState,1
	.space	1
	.calls	'CanTp_Shutdown','Det_ReportError'
	.calls	'CanTp_MainFunction','Det_ReportError'
	.calls	'CanTp_MainFunction','__INDIRECT__'
	.calls	'CanTp_Transmit','Det_ReportError'
	.calls	'CanTp_Transmit','Det_ReportRuntimeError'
	.calls	'CanTp_CancelTransmit','Det_ReportError'
	.calls	'CanTp_CancelTransmit','Det_ReportRuntimeError'
	.calls	'CanTp_CancelTransmit','__INDIRECT__'
	.calls	'CanTp_CancelReceive','Det_ReportError'
	.calls	'CanTp_CancelReceive','Det_ReportRuntimeError'
	.calls	'CanTp_CancelReceive','__INDIRECT__'
	.calls	'CanTp_TxConfirmation','Det_ReportError'
	.calls	'CanTp_TxConfirmation','__INDIRECT__'
	.calls	'CanTp_RxIndication','Det_ReportError'
	.calls	'CanTp_RxIndication','Det_ReportRuntimeError'
	.calls	'CanTp_RxIndication','__INDIRECT__'
	.calls	'CanTp_TriggerTransmit','Det_ReportError'
	.calls	'CanTp_TriggerTransmit','Det_ReportRuntimeError'
	.calls	'CanTp_TriggerTransmit','__INDIRECT__'
	.calls	'CanTp_Init','',0
	.calls	'CanTp_Shutdown','',0
	.calls	'CanTp_MainFunction','',0
	.calls	'CanTp_Transmit','',8
	.calls	'CanTp_CancelTransmit','',0
	.calls	'CanTp_CancelReceive','',0
	.calls	'CanTp_TxConfirmation','',8
	.calls	'CanTp_RxIndication','',24
	.extern	CanTp_Config
	.extern	Det_ReportError
	.extern	Det_ReportRuntimeError
	.extern	CanTp_Channel
	.extern	CanTp_TxConfirmationChannel
	.extern	CanTp_MainFunctionTicks
	.extern	CanTp_CfgPtr
	.extern	CanTp_SubState
	.extern	CanTp_State
	.extern	CanTp_AddressSize
	.extern	CanTp_PciFrameType
	.extern	CanTp_PciSize
	.extern	CanTp_CanDlTable
	.extern	CanTp_ProcessFrame
	.extern	CanTp_CreateFrame
	.extern	CanTp_StateFunctions
	.extern	CanTp_PduRConfirmationApis
	.extern	__INDIRECT__
	.calls	'CanTp_TriggerTransmit','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L330:
	.word	166364
	.half	3
	.word	.L331
	.byte	4
.L329:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L332
.L408:
	.byte	2
	.byte	'unsigned char',0,1,8
.L558:
	.byte	3
	.word	133
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	150
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	150
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	133
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	133
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	150
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	133
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	133
	.byte	6,0
.L410:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	463
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	485
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	485
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	463
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	463
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	485
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	133
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	133
	.byte	6,0
.L393:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	802
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	818
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	818
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	802
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	802
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	818
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	133
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	133
	.byte	6,0,7
	.byte	'Gtm_GetMcsRamRstStat',0,3,4,221,33,32
	.word	133
	.byte	1,1,5
	.byte	'McsModule',0,4,221,33,60
	.word	133
	.byte	6,0,3
	.word	463
.L459:
	.byte	4
	.byte	'CanTp_GetElapsedValue',0,3,5,226,2,19,1,1
.L462:
	.byte	5
	.byte	'Value',0,5,226,2,57
	.word	1189
.L464:
	.byte	5
	.byte	'ElapsedValue',0,5,226,2,80
	.word	1189
.L466:
	.byte	6,0
.L451:
	.byte	7
	.byte	'CanTp_Prv_GetBit',0,3,5,244,2,22
	.word	133
	.byte	1,1
.L454:
	.byte	5
	.byte	'Value',0,5,244,2,45
	.word	133
.L456:
	.byte	5
	.byte	'Mask',0,5,244,2,58
	.word	133
.L458:
	.byte	6,0
.L626:
	.byte	4
	.byte	'CanTp_IncrementCounter',0,3,5,128,3,19,1,1
.L628:
	.byte	6,0
.L383:
	.byte	4
	.byte	'CanTp_Prv_ArrayInit',0,3,5,143,3,19,1,1
.L386:
	.byte	5
	.byte	'ArrayPtr',0,5,143,3,46
	.word	150
.L388:
	.byte	5
	.byte	'Length',0,5,143,3,63
	.word	802
.L390:
	.byte	5
	.byte	'Item',0,5,143,3,77
	.word	133
.L392:
	.byte	6,0
.L426:
	.byte	7
	.byte	'CanTp_Prv_IsNoDevError',0,3,5,160,3,22
	.word	133
	.byte	1,1
.L429:
	.byte	5
	.byte	'id',0,5,160,3,52
	.word	802
.L431:
	.byte	5
	.byte	'ApiId',0,5,160,3,62
	.word	133
.L433:
	.byte	5
	.byte	'CanTpEInvalidId',0,5,160,3,75
	.word	133
.L435:
	.byte	6,0,7
	.byte	'CanTp_Prv_GetTxBlockCfs',0,3,5,151,4,28
	.word	463
	.byte	1,1,5
	.byte	'ChannelId',0,5,151,4,72
	.word	133
	.byte	6,0,7
	.byte	'CanTp_Prv_GetRxBlockCfs',0,3,5,170,4,28
	.word	463
	.byte	1,1,5
	.byte	'ChannelId',0,5,170,4,72
	.word	133
	.byte	6,0,8,6,71,9,8,9
	.byte	'SduDataPtr',0
	.word	150
	.byte	4,2,35,0,9
	.byte	'SduLength',0
	.word	463
	.byte	2,2,35,4,0,10
	.word	1637
.L412:
	.byte	3
	.word	1682
.L439:
	.byte	4
	.byte	'CanTp_Prv_TxPciInit',0,3,5,254,4,19,1,1
.L441:
	.byte	5
	.byte	'PciId',0,5,254,4,46
	.word	150
.L443:
	.byte	5
	.byte	'CanTpTxSduId',0,5,254,4,63
	.word	463
.L445:
	.byte	5
	.byte	'CanTpTxInfoPtr',0,5,254,4,96
	.word	1687
.L447:
	.byte	6,0,8,5,220,1,9,18,9
	.byte	'PduRApiId',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'PayLoadLength',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'BitFields',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'ChannelId',0
	.word	133
	.byte	1,2,35,3,9
	.byte	'TxConfirmationId',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'PduId',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'PduRPduHandleId',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'RemBufSize',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'Value',0
	.word	463
	.byte	2,2,35,12,9
	.byte	'ElapsedValue',0
	.word	463
	.byte	2,2,35,14,9
	.byte	'CsTicks',0
	.word	463
	.byte	2,2,35,16,0,10
	.word	1783
	.byte	3
	.word	2010
	.byte	4
	.byte	'CanTp_Prv_CanIfTransmit',0,3,5,164,5,19,1,1,5
	.byte	'Context',0,5,164,5,70
	.word	2015
	.byte	5
	.byte	'CanIfTxInfoPtr',0,5,164,5,98
	.word	1687
	.byte	11,6,0,0
.L536:
	.byte	8,5,200,1,9,20,9
	.byte	'IsFunctional',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'IsPaddingOn',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'IsFdEnabled',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'Address',0
	.word	133
	.byte	1,2,35,3,9
	.byte	'FrameType',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'FlowStatus',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'SN',0
	.word	133
	.byte	1,2,35,6,9
	.byte	'DataOffset',0
	.word	133
	.byte	1,2,35,7,9
	.byte	'AddressFormatId',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'AddressSize',0
	.word	133
	.byte	1,2,35,9,9
	.byte	'CAN_DL',0
	.word	133
	.byte	1,2,35,10,9
	.byte	'ChannelId',0
	.word	133
	.byte	1,2,35,11,9
	.byte	'SduId',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'PduId',0
	.word	463
	.byte	2,2,35,14,9
	.byte	'PduRPduHandleId',0
	.word	463
	.byte	2,2,35,16,9
	.byte	'SduLength',0
	.word	463
	.byte	2,2,35,18,0,3
	.word	2097
.L564:
	.byte	7
	.byte	'CanTp_Prv_GetFcActiveChannel',0,3,5,246,5,29
	.word	133
	.byte	1,1
.L567:
	.byte	5
	.byte	'Context',0,5,246,5,79
	.word	2411
.L569:
	.byte	6,0
.L547:
	.byte	7
	.byte	'CanTp_Prv_GetRxContext',0,3,5,172,6,20
	.word	133
	.byte	1,1
.L549:
	.byte	5
	.byte	'Context',0,5,172,6,64
	.word	2411
.L551:
	.byte	5
	.byte	'PduInfoPtr',0,5,172,6,92
	.word	1687
.L553:
	.byte	11,6,6,6,6,6,0,0
.L585:
	.byte	7
	.byte	'CanTp_Prv_RxSduLengthCheck',0,3,5,249,6,29
	.word	133
	.byte	1,1
.L588:
	.byte	5
	.byte	'Context',0,5,249,6,77
	.word	2411
.L590:
	.byte	5
	.byte	'PduInfoPtr',0,5,249,6,105
	.word	1687
.L592:
	.byte	6,0,12,6,81,9,4,13
	.byte	'TP_STMIN',0,0,13
	.byte	'TP_BS',0,1,13
	.byte	'TP_BC',0,2,13
	.byte	'TP_BFS',0,3,0,7
	.byte	'CanTp_Prv_GetRxParam',0,3,5,193,8,20
	.word	133
	.byte	1,1,5
	.byte	'id',0,5,193,8,57
	.word	133
	.byte	5
	.byte	'parameter',0,5,193,8,77
	.word	2634
	.byte	6,0
.L521:
	.byte	4
	.byte	'CanTp_Prv_FcTxConfirmation',0,3,5,162,9,19,1,1
.L523:
	.byte	5
	.byte	'ChannelId',0,5,162,9,66
	.word	133
.L525:
	.byte	6,0
.L529:
	.byte	4
	.byte	'CanTp_Prv_PrepareFcRecieve',0,3,5,209,9,19,1,1
.L530:
	.byte	5
	.byte	'ChannelId',0,5,209,9,66
	.word	133
.L532:
	.byte	6,0,10
	.word	2097
	.byte	3
	.word	2854
.L604:
	.byte	4
	.byte	'CanTp_Prv_LengthError',0,3,5,234,9,19,1,1
.L605:
	.byte	5
	.byte	'Context',0,5,234,9,68
	.word	2859
.L607:
	.byte	6,0,10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	3
	.word	133
	.byte	14,1,1,15
	.word	2948
	.byte	15
	.word	2948
	.byte	15
	.word	133
	.byte	0,3
	.word	2953
	.byte	16
	.byte	'CanTp_GetSduPairType',0,7,18,16
	.word	2972
	.byte	10
	.word	2977
	.byte	17
	.byte	'CanTp_RxPduStructType',0,7,22,8,8,9
	.byte	'RxSduId',0
	.word	2938
	.byte	1,2,35,0,9
	.byte	'TxSduId',0
	.word	2943
	.byte	1,2,35,1,9
	.byte	'GetSduPair',0
	.word	3006
	.byte	4,2,35,4,0,10
	.word	3011
	.byte	3
	.word	3093
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	17
	.byte	'CanTp_TxSduStructType',0,7,29,8,12,9
	.byte	'TX_DL',0
	.word	3103
	.byte	1,2,35,0,9
	.byte	'BitFields',0
	.word	3108
	.byte	1,2,35,1,9
	.byte	'Address',0
	.word	3113
	.byte	1,2,35,2,9
	.byte	'AddressFormatId',0
	.word	3118
	.byte	1,2,35,3,9
	.byte	'TimeOutId',0
	.word	3123
	.byte	1,2,35,4,9
	.byte	'ChannelId',0
	.word	3128
	.byte	1,2,35,5,9
	.byte	'TxConfirmationId',0
	.word	3133
	.byte	2,2,35,6,9
	.byte	'TxPduId',0
	.word	3138
	.byte	2,2,35,8,9
	.byte	'PduRPduHandleId',0
	.word	3143
	.byte	2,2,35,10,0,10
	.word	3148
	.byte	3
	.word	3358
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	133
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	17
	.byte	'CanTp_RxSduStructType',0,7,42,8,12,9
	.byte	'BitFields',0
	.word	3368
	.byte	1,2,35,0,9
	.byte	'Address',0
	.word	3373
	.byte	1,2,35,1,9
	.byte	'AddressFormatId',0
	.word	3378
	.byte	1,2,35,2,9
	.byte	'TimeOutId',0
	.word	3383
	.byte	1,2,35,3,9
	.byte	'ParamId',0
	.word	3388
	.byte	1,2,35,4,9
	.byte	'ChannelId',0
	.word	3393
	.byte	1,2,35,5,9
	.byte	'TxConfirmationId',0
	.word	3398
	.byte	2,2,35,6,9
	.byte	'TxPduId',0
	.word	3403
	.byte	2,2,35,8,9
	.byte	'PduRPduHandleId',0
	.word	3408
	.byte	2,2,35,10,0,10
	.word	3413
	.byte	3
	.word	3625
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	10
	.word	463
	.byte	17
	.byte	'CanTp_TimeOutStructType',0,7,55,8,6,9
	.byte	'AsArTicks',0
	.word	3635
	.byte	2,2,35,0,9
	.byte	'BsBrTicks',0
	.word	3640
	.byte	2,2,35,2,9
	.byte	'CsCrTicks',0
	.word	3645
	.byte	2,2,35,4,0,10
	.word	3650
	.byte	3
	.word	3737
	.byte	18,2
	.word	133
	.byte	19,1,0,10
	.word	3747
	.byte	10
	.word	463
	.byte	17
	.byte	'CanTp_ParamStructType',0,7,62,8,4,9
	.byte	'Param',0
	.word	3756
	.byte	2,2,35,0,9
	.byte	'FcWaitMax',0
	.word	3761
	.byte	2,2,35,2,0,10
	.word	3766
	.byte	3
	.word	3828
	.byte	17
	.byte	'CanTp_ConfigStructType',0,7,68,8,28,9
	.byte	'NumberOfChannels',0
	.word	2913
	.byte	1,2,35,0,9
	.byte	'NumberOfRxPdus',0
	.word	2918
	.byte	1,2,35,1,9
	.byte	'NumberOfTxPdus',0
	.word	2923
	.byte	1,2,35,2,9
	.byte	'NumberOfRxSdus',0
	.word	2928
	.byte	1,2,35,3,9
	.byte	'NumberOfTxSdus',0
	.word	2933
	.byte	1,2,35,4,9
	.byte	'RxPdu',0
	.word	3098
	.byte	4,2,35,8,9
	.byte	'TxSdu',0
	.word	3363
	.byte	4,2,35,12,9
	.byte	'RxSdu',0
	.word	3630
	.byte	4,2,35,16,9
	.byte	'TimeOut',0
	.word	3742
	.byte	4,2,35,20,9
	.byte	'Param',0
	.word	3833
	.byte	4,2,35,24,0,10
	.word	3838
.L381:
	.byte	3
	.word	4066
	.byte	3
	.word	2953
	.byte	10
	.word	3148
.L422:
	.byte	3
	.word	4081
	.byte	8,5,253,1,9,20,9
	.byte	'TxBufferStatus',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'RX_DL',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'PciId',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'FlowStatus',0
	.word	133
	.byte	1,2,35,3,9
	.byte	'SN',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'BS',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'ActiveSduId',0
	.word	133
	.byte	1,2,35,6,9
	.byte	'FcWait',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'BlockCfsRemaining',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'SduLengthRemaining',0
	.word	463
	.byte	2,2,35,12,9
	.byte	'SduLength',0
	.word	463
	.byte	2,2,35,14,9
	.byte	'InitialTicks',0
	.word	463
	.byte	2,2,35,16,9
	.byte	'STminTicks',0
	.word	463
	.byte	2,2,35,18,0
.L424:
	.byte	3
	.word	4091
	.byte	10
	.word	3413
.L489:
	.byte	3
	.word	4354
	.byte	10
	.word	4091
.L526:
	.byte	3
	.word	4364
	.byte	10
	.word	3011
.L562:
	.byte	3
	.word	4374
.L611:
	.byte	3
	.word	1637
	.byte	20
	.word	155
	.byte	21
	.word	185
	.byte	21
	.word	200
	.byte	6,0,20
	.word	223
	.byte	21
	.word	255
	.byte	21
	.word	270
	.byte	6,0,20
	.word	293
	.byte	21
	.word	333
	.byte	21
	.word	347
	.byte	6,0,20
	.word	370
	.byte	21
	.word	403
	.byte	21
	.word	417
	.byte	21
	.word	438
	.byte	6,0,20
	.word	490
	.byte	21
	.word	521
	.byte	21
	.word	536
	.byte	6,0,20
	.word	559
	.byte	21
	.word	592
	.byte	21
	.word	607
	.byte	6,0,20
	.word	630
	.byte	21
	.word	671
	.byte	21
	.word	685
	.byte	6,0,20
	.word	708
	.byte	21
	.word	742
	.byte	21
	.word	756
	.byte	21
	.word	777
	.byte	6,0,20
	.word	823
	.byte	21
	.word	854
	.byte	21
	.word	869
	.byte	6,0,20
	.word	892
	.byte	21
	.word	925
	.byte	21
	.word	940
	.byte	6,0,20
	.word	963
	.byte	21
	.word	1004
	.byte	21
	.word	1018
	.byte	6,0,20
	.word	1041
	.byte	21
	.word	1075
	.byte	21
	.word	1089
	.byte	21
	.word	1110
	.byte	6,0,20
	.word	1135
	.byte	21
	.word	1168
	.byte	6,0,22
	.byte	'Det_ReportError',0,8,112,16
	.word	133
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,8,112,39
	.word	463
	.byte	5
	.byte	'InstanceId',0,8,112,55
	.word	133
	.byte	5
	.byte	'ApiId',0,8,112,73
	.word	133
	.byte	5
	.byte	'ErrorId',0,8,112,86
	.word	133
	.byte	0,22
	.byte	'Det_ReportRuntimeError',0,8,126,16
	.word	133
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,8,126,46
	.word	463
	.byte	5
	.byte	'InstanceId',0,8,126,62
	.word	133
	.byte	5
	.byte	'ApiId',0,8,126,80
	.word	133
	.byte	5
	.byte	'ErrorId',0,8,126,93
	.word	133
	.byte	0,20
	.word	1194
	.byte	21
	.word	1224
	.byte	21
	.word	1239
	.byte	6,0,20
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	6,0,20
	.word	1323
	.byte	6,0,20
	.word	1356
	.byte	21
	.word	1384
	.byte	21
	.word	1402
	.byte	21
	.word	1418
	.byte	6,0,20
	.word	1434
	.byte	21
	.word	1469
	.byte	21
	.word	1481
	.byte	21
	.word	1496
	.byte	6,0,20
	.word	1523
	.byte	21
	.word	1559
	.byte	6,0,20
	.word	1580
	.byte	21
	.word	1616
	.byte	6,0,20
	.word	1692
	.byte	21
	.word	1720
	.byte	21
	.word	1735
	.byte	21
	.word	1757
	.byte	6,0,20
	.word	2020
	.byte	21
	.word	2052
	.byte	21
	.word	2069
	.byte	11,23
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	24
	.word	1321
	.byte	0,6,0,0,20
	.word	2416
	.byte	21
	.word	2457
	.byte	6,0,20
	.word	2476
	.byte	21
	.word	2511
	.byte	21
	.word	2528
	.byte	11,23
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	24
	.word	1321
	.byte	0,6,23
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	24
	.word	1321
	.byte	0,6,23
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	24
	.word	1321
	.byte	0,6,23
	.word	1263
	.byte	21
	.word	1292
	.byte	21
	.word	1307
	.byte	24
	.word	1321
	.byte	0,6,23
	.word	2416
	.byte	21
	.word	2457
	.byte	24
	.word	2474
	.byte	0,6,0,0,20
	.word	2556
	.byte	21
	.word	2595
	.byte	21
	.word	2612
	.byte	6,0,20
	.word	2676
	.byte	21
	.word	2709
	.byte	21
	.word	2721
	.byte	6,0,20
	.word	2742
	.byte	21
	.word	2777
	.byte	6,0,20
	.word	2798
	.byte	21
	.word	2833
	.byte	6,0,20
	.word	2864
	.byte	21
	.word	2894
	.byte	6,0,25
	.byte	'__INDIRECT__',0,9,1,1,1,1,1,26,1,3
	.word	5213
	.byte	16
	.byte	'__codeptr',0,9,1,1
	.word	5215
	.byte	2
	.byte	'char',0,1,6,16
	.byte	'sint8',0,10,76,25
	.word	5238
	.byte	16
	.byte	'uint8',0,10,81,25
	.word	133
	.byte	16
	.byte	'uint16',0,10,91,25
	.word	463
	.byte	16
	.byte	'uint32',0,10,106,24
	.word	802
	.byte	2
	.byte	'unsigned long long int',0,8,7,16
	.byte	'uint64',0,10,111,30
	.word	5304
	.byte	16
	.byte	'boolean',0,10,127,25
	.word	133
	.byte	2
	.byte	'unsigned long int',0,4,7,16
	.byte	'uint8_least',0,10,137,1,25
	.word	5361
	.byte	16
	.byte	'uint16_least',0,10,147,1,25
	.word	5361
	.byte	16
	.byte	'StatusType',0,11,191,1,27
	.word	133
	.byte	16
	.byte	'Std_ReturnType',0,11,199,1,15
	.word	133
	.byte	8,11,206,1,9,8,9
	.byte	'vendorID',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'moduleID',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'sw_major_version',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'sw_minor_version',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'sw_patch_version',0
	.word	133
	.byte	1,2,35,6,0,16
	.byte	'Std_VersionInfoType',0,11,213,1,3
	.word	5469
	.byte	16
	.byte	'PduIdType',0,12,22,19
	.word	463
	.byte	16
	.byte	'PduLengthType',0,12,26,19
	.word	463
	.byte	16
	.byte	'PduInfoType',0,6,75,3
	.word	1637
	.byte	16
	.byte	'TPParameterType',0,6,87,3
	.word	2634
	.byte	12,6,113,9,4,13
	.byte	'TP_DATACONF',0,0,13
	.byte	'TP_DATARETRY',0,1,13
	.byte	'TP_CONFPENDING',0,2,0,16
	.byte	'TpDataStateType',0,6,118,3
	.word	5703
	.byte	16
	.byte	'CanTp_ConfigType',0,13,94,39
	.word	3838
	.byte	10
	.word	3838
	.byte	27
	.byte	'CanTp_Config',0,13,96,44
	.word	5804
	.byte	1,1,16
	.byte	'CanTp_TickType',0,7,15,16
	.word	463
	.byte	16
	.byte	'CanTp_SduIdType',0,7,16,15
	.word	133
	.byte	16
	.byte	'CanTp_ChannelIdType',0,7,17,15
	.word	133
	.byte	16
	.byte	'Can_IdType',0,14,32,16
	.word	802
	.byte	16
	.byte	'Can_HwHandleType',0,14,43,16
	.word	463
	.byte	8,15,93,9,8,9
	.byte	'Class',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TIN',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'ReturnAddress',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'OsTrapInfoType',0,15,97,3
	.word	5951
	.byte	18,68
	.word	802
	.byte	19,16,0,8,15,154,1,9,68,9
	.byte	'store',0
	.word	6031
	.byte	68,2,35,0,0,18,68
	.word	6040
	.byte	19,0,0,16
	.byte	'Os_JumpBufType',0,15,156,1,3
	.word	6062
	.byte	16
	.byte	'Os_StackTraceType',0,15,174,1,18
	.word	802
	.byte	8,15,175,1,9,8,9
	.byte	'sp',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'ctx',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Os_StackValueType',0,15,175,1,63
	.word	6122
	.byte	16
	.byte	'Os_StackSizeType',0,15,176,1,27
	.word	6122
	.byte	28,1,1,3
	.word	6207
	.byte	16
	.byte	'Os_VoidVoidFunctionType',0,15,179,1,16
	.word	6210
	.byte	16
	.byte	'ApplicationType',0,15,193,1,23
	.word	133
	.byte	17
	.byte	'Os_ApplicationConfigurationType_s',0,15,198,1,16,2,9
	.byte	'app_id',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,1,0,16
	.byte	'Os_ApplicationConfigurationType',0,15,201,1,3
	.word	6273
	.byte	16
	.byte	'Os_CoreStateType',0,15,203,1,16
	.word	802
	.byte	16
	.byte	'AreaIdType',0,15,204,1,16
	.word	463
	.byte	16
	.byte	'Os_PeripheralAddressType',0,15,212,1,22
	.word	802
	.byte	16
	.byte	'TickType',0,15,221,1,22
	.word	802
	.byte	16
	.byte	'Os_StopwatchTickType',0,15,225,1,22
	.word	802
	.byte	16
	.byte	'Os_Lockable',0,15,234,1,18
	.word	818
	.byte	16
	.byte	'CoreIdType',0,15,236,1,16
	.word	463
	.byte	16
	.byte	'SpinlockIdType',0,15,237,1,16
	.word	463
	.byte	12,15,239,1,9,4,13
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,13
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,16
	.byte	'TryToGetSpinlockType',0,15,239,1,74
	.word	6580
	.byte	12,15,174,2,9,4,13
	.byte	'APPLICATION_ACCESSIBLE',0,0,13
	.byte	'APPLICATION_RESTARTING',0,1,13
	.byte	'APPLICATION_TERMINATED',0,2,0,16
	.byte	'ApplicationStateType',0,15,174,2,92
	.word	6673
	.byte	29
	.byte	'void',0,3
	.word	6785
	.byte	14,1,1,15
	.word	133
	.byte	15
	.word	6791
	.byte	0,3
	.word	6796
	.byte	16
	.byte	'Os_FunctionEntryType',0,15,183,2,16
	.word	6810
	.byte	17
	.byte	'Os_MeterInfoType_s',0,15,193,2,16,48,9
	.byte	'elapsed',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'previous',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'max',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'cumulative',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'stackbase',0
	.word	6122
	.byte	8,2,35,16,9
	.byte	'stackusage',0
	.word	6122
	.byte	8,2,35,24,9
	.byte	'stackmax',0
	.word	6122
	.byte	8,2,35,32,9
	.byte	'stackbudget',0
	.word	6122
	.byte	8,2,35,40,0,16
	.byte	'Os_MeterInfoType',0,15,202,2,3
	.word	6845
	.byte	3
	.word	6845
	.byte	16
	.byte	'Os_MeterInfoRefType',0,15,203,2,50
	.word	7043
	.byte	16
	.byte	'EventMaskType',0,15,206,2,15
	.word	133
	.byte	16
	.byte	'Os_imaskType',0,15,211,2,16
	.word	802
	.byte	17
	.byte	'Os_ISRDynType_s',0,15,213,2,16,48,9
	.byte	'meter',0
	.word	6845
	.byte	48,2,35,0,0,16
	.byte	'Os_ISRDynType',0,15,215,2,3
	.word	7122
	.byte	3
	.word	7122
	.byte	10
	.word	7183
	.byte	17
	.byte	'Os_ISRType_s',0,15,216,2,16,24,9
	.byte	'entry_function',0
	.word	6215
	.byte	4,2,35,0,9
	.byte	'dynamic',0
	.word	7188
	.byte	4,2,35,4,9
	.byte	'imask',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'stackbudget',0
	.word	6122
	.byte	8,2,35,12,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,21,0,16
	.byte	'Os_ISRType',0,15,223,2,3
	.word	7193
	.byte	3
	.word	6207
	.byte	10
	.word	7193
	.byte	3
	.word	7352
	.byte	16
	.byte	'ISRType',0,15,224,2,46
	.word	7357
	.byte	16
	.byte	'Os_bitmask',0,15,239,2,22
	.word	802
	.byte	16
	.byte	'Os_pset0Type',0,15,240,2,20
	.word	802
	.byte	16
	.byte	'Os_pset1Type',0,15,241,2,20
	.word	802
	.byte	16
	.byte	'Os_pset2Type',0,15,242,2,20
	.word	802
	.byte	30,15,243,2,9,4,9
	.byte	'p0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'p1',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'p2',0
	.word	802
	.byte	4,2,35,0,0,16
	.byte	'Os_psetType',0,15,247,2,3
	.word	7465
	.byte	30,15,249,2,9,4,9
	.byte	't0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	't1',0
	.word	802
	.byte	4,2,35,0,9
	.byte	't2',0
	.word	802
	.byte	4,2,35,0,0,16
	.byte	'Os_tpmaskType',0,15,253,2,3
	.word	7529
	.byte	16
	.byte	'Os_ActivationCountType',0,15,254,2,23
	.word	133
	.byte	17
	.byte	'Os_TaskDynType_s',0,15,128,3,16,120,9
	.byte	'terminate_jump_buf',0
	.word	6071
	.byte	68,2,35,0,9
	.byte	'meter',0
	.word	6845
	.byte	48,2,35,68,9
	.byte	'activation_count',0
	.word	133
	.byte	1,2,35,116,0,16
	.byte	'Os_TaskDynType',0,15,132,3,3
	.word	7627
	.byte	18,68
	.word	6040
	.byte	19,0,0,3
	.word	7627
	.byte	10
	.word	7753
	.byte	17
	.byte	'Os_TaskType_s',0,15,134,3,16,40,9
	.byte	'dynamic',0
	.word	7758
	.byte	4,2,35,0,9
	.byte	'entry_function',0
	.word	6215
	.byte	4,2,35,4,9
	.byte	'pset',0
	.word	7465
	.byte	4,2,35,8,9
	.byte	'base_tpmask',0
	.word	7529
	.byte	4,2,35,12,9
	.byte	'tpmask',0
	.word	7529
	.byte	4,2,35,16,9
	.byte	'core_id',0
	.word	463
	.byte	2,2,35,20,9
	.byte	'index',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'stackbudget',0
	.word	6122
	.byte	8,2,35,28,9
	.byte	'activation_count',0
	.word	133
	.byte	1,2,35,36,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,37,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,38,0,16
	.byte	'Os_TaskType',0,15,146,3,3
	.word	7763
	.byte	10
	.word	7763
	.byte	3
	.word	8013
	.byte	16
	.byte	'TaskType',0,15,147,3,47
	.word	8018
	.byte	31
	.byte	'Os_TaskStateType',0,15,155,3,6,4,13
	.byte	'SUSPENDED',0,0,13
	.byte	'READY',0,1,13
	.byte	'WAITING',0,2,13
	.byte	'RUNNING',0,3,0,16
	.byte	'TaskStateType',0,15,156,3,31
	.word	8041
	.byte	30,15,167,3,3,4,9
	.byte	'tpmask',0
	.word	7529
	.byte	4,2,35,0,0,17
	.byte	'Os_ResourceDynType_s',0,15,166,3,16,4,9
	.byte	'saved_priority',0
	.word	8128
	.byte	4,2,35,0,0,16
	.byte	'Os_ResourceDynType',0,15,170,3,3
	.word	8151
	.byte	3
	.word	8151
	.byte	10
	.word	8231
	.byte	17
	.byte	'Os_ResourceType_s',0,15,171,3,16,12,9
	.byte	'dynamic',0
	.word	8236
	.byte	4,2,35,0,9
	.byte	'tpmask',0
	.word	7529
	.byte	4,2,35,4,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,8,0,16
	.byte	'Os_ResourceType',0,15,175,3,3
	.word	8241
	.byte	8,15,181,3,9,12,9
	.byte	'maxallowedvalue',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'ticksperbase',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'mincycle',0
	.word	802
	.byte	4,2,35,8,0,16
	.byte	'AlarmBaseType',0,15,185,3,3
	.word	8340
	.byte	8,15,206,3,9,8,9
	.byte	'Running',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'Pending',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'Delay',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Os_CounterStatusType',0,15,210,3,3
	.word	8435
	.byte	32
	.word	133
	.byte	1,1,3
	.word	8521
	.byte	16
	.byte	'Os_CounterIncrAdvType',0,15,217,3,22
	.word	8528
	.byte	17
	.byte	's_swd',0,15,222,3,12,4,9
	.byte	'count',0
	.word	802
	.byte	4,2,35,0,0,30,15,221,3,3,4,9
	.byte	'sw',0
	.word	8564
	.byte	4,2,35,0,0,17
	.byte	'Os_CounterDynType_s',0,15,220,3,16,4,9
	.byte	'type_dependent',0
	.word	8592
	.byte	4,2,35,0,0,16
	.byte	'Os_CounterDynType',0,15,226,3,3
	.word	8611
	.byte	3
	.word	8611
	.byte	10
	.word	8689
	.byte	17
	.byte	'Os_CounterType_s',0,15,227,3,16,28,9
	.byte	'dynamic',0
	.word	8694
	.byte	4,2,35,0,9
	.byte	'advincr',0
	.word	8533
	.byte	4,2,35,4,9
	.byte	'base',0
	.word	8340
	.byte	12,2,35,8,9
	.byte	'core',0
	.word	6791
	.byte	4,2,35,20,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,24,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,25,0,16
	.byte	'Os_CounterType',0,15,234,3,3
	.word	8699
	.byte	3
	.word	8521
	.byte	10
	.word	8699
	.byte	3
	.word	8851
	.byte	16
	.byte	'CounterType',0,15,235,3,52
	.word	8856
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,15,240,3,6,4,13
	.byte	'SCHEDULETABLE_STOPPED',0,0,13
	.byte	'SCHEDULETABLE_NEXT',0,1,13
	.byte	'SCHEDULETABLE_WAITING',0,2,13
	.byte	'SCHEDULETABLE_RUNNING',0,3,13
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,16
	.byte	'ScheduleTableStatusType',0,15,241,3,41
	.word	8882
	.byte	10
	.word	.L772-.L330
	.byte	3
	.word	9082
	.byte	16
	.byte	'ScheduleTableType',0,15,128,4,58
	.word	9087
	.byte	17
	.byte	'Os_ScheduleTableDynType_s',0,15,130,4,16,16,9
	.byte	'match',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'next',0
	.word	9092
	.byte	4,2,35,4,9
	.byte	'state',0
	.word	8882
	.byte	4,2,35,8,9
	.byte	'config',0
	.word	463
	.byte	2,2,35,12,0,3
	.word	9119
	.byte	10
	.word	9212
.L772:
	.byte	17
	.byte	'Os_ScheduleTableType_s',0,15,247,3,16,16,9
	.byte	'dynamic',0
	.word	9217
	.byte	4,2,35,0,9
	.byte	'counter',0
	.word	8861
	.byte	4,2,35,4,9
	.byte	'repeat',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'config',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'initial',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,14,0,16
	.byte	'Os_ScheduleTableType',0,15,255,3,3
	.word	9222
	.byte	10
	.word	9222
	.byte	3
	.word	9402
	.byte	10
	.word	8699
	.byte	3
	.word	9412
	.byte	33
	.word	6515
	.byte	33
	.word	7465
	.byte	33
	.word	7362
	.byte	33
	.word	8023
	.byte	33
	.word	7529
	.byte	33
	.word	133
	.byte	33
	.word	8023
	.byte	17
	.byte	'Os_ControlledCoreType_s',0,15,251,6,16,112,9
	.byte	'TrapInfo',0
	.word	5951
	.byte	8,2,35,0,9
	.byte	'lock_taskaccess',0
	.word	9422
	.byte	4,2,35,8,9
	.byte	'ReadyTasks',0
	.word	9427
	.byte	4,2,35,12,9
	.byte	'RunningISR',0
	.word	9432
	.byte	4,2,35,16,9
	.byte	'RunningTask',0
	.word	9437
	.byte	4,2,35,20,9
	.byte	'RunningTPMask',0
	.word	9442
	.byte	4,2,35,24,9
	.byte	'CurrentMeteredObject',0
	.word	7048
	.byte	4,2,35,28,9
	.byte	'IdleMeter',0
	.word	6845
	.byte	48,2,35,32,9
	.byte	'AppAccess',0
	.word	133
	.byte	1,2,35,80,9
	.byte	'AppOverride',0
	.word	9447
	.byte	1,2,35,81,9
	.byte	'GetStackValueAdjust',0
	.word	6122
	.byte	8,2,35,84,9
	.byte	'InErrorHook',0
	.word	133
	.byte	1,2,35,92,9
	.byte	'ChainTaskRef',0
	.word	9452
	.byte	4,2,35,96,9
	.byte	'GetStackUsageAdjust',0
	.word	6122
	.byte	8,2,35,100,9
	.byte	'InProtectionHook',0
	.word	133
	.byte	1,2,35,108,9
	.byte	'CoreIsActive',0
	.word	133
	.byte	1,2,35,109,9
	.byte	'InShutdownHook',0
	.word	133
	.byte	1,2,35,110,0,16
	.byte	'Os_ControlledCoreType',0,15,141,7,3
	.word	9457
	.byte	3
	.word	802
	.byte	10
	.word	7193
	.byte	3
	.word	9913
	.byte	10
	.word	7763
	.byte	3
	.word	9923
	.byte	3
	.word	6845
	.byte	17
	.byte	'Os_AnyCoreType_s',0,15,151,7,16,96,9
	.byte	'DisableAllImask',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'SuspendAllImask',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'SuspendOSImask',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'DisableAllCount',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'SuspendAllCount',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'SuspendOSCount',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'RestartJumpBuf',0
	.word	6071
	.byte	68,2,35,24,9
	.byte	'Restartable',0
	.word	133
	.byte	1,2,35,92,0,16
	.byte	'Os_AnyCoreType',0,15,160,7,3
	.word	9938
	.byte	2
	.byte	'int',0,4,5,16
	.byte	'signed_int',0,16,114,20
	.word	10179
	.byte	16
	.byte	'unsigned_int',0,16,116,22
	.word	802
	.byte	16
	.byte	'Can_TxObjPriorityClassType',0,17,219,3,16
	.word	802
	.byte	17
	.byte	'Can_TxHwObjectConfigType',0,17,231,3,16,8,9
	.byte	'MsgObjId',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'HwControllerId',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'TxObjPriorityClass',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Can_TxHwObjectConfigType',0,17,252,3,3
	.word	10262
	.byte	17
	.byte	'Can_RxHwObjectConfigType',0,17,129,4,16,12,9
	.byte	'MaskRef',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'MsgId',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'MsgObjId',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'HwControllerId',0
	.word	133
	.byte	1,2,35,9,0,16
	.byte	'Can_RxHwObjectConfigType',0,17,147,4,3
	.word	10398
	.byte	18,4
	.word	133
	.byte	19,3,0,17
	.byte	'Can_ControllerMOMapConfigType',0,17,181,4,16,4,9
	.byte	'ControllerMOMap',0
	.word	10538
	.byte	4,2,35,0,0,16
	.byte	'Can_ControllerMOMapConfigType',0,17,184,4,3
	.word	10547
	.byte	17
	.byte	'Can_NPCRValueType',0,17,188,4,16,2,9
	.byte	'Can_NPCRValue',0
	.word	463
	.byte	2,2,35,0,0,16
	.byte	'Can_NPCRValueType',0,17,191,4,3
	.word	10648
	.byte	17
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,17,194,4,16,8,9
	.byte	'CanControllerBaudrate',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CanControllerBaudrateCfg',0
	.word	463
	.byte	2,2,35,4,0,16
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,17,198,4,3
	.word	10723
	.byte	10
	.word	10723
	.byte	3
	.word	10888
	.byte	17
	.byte	'Can_BaudrateConfigPtrType',0,17,201,4,16,4,9
	.byte	'Can_kBaudrateConfigPtr',0
	.word	10893
	.byte	4,2,35,0,0,16
	.byte	'Can_BaudrateConfigPtrType',0,17,204,4,3
	.word	10898
	.byte	17
	.byte	'Can_EventHandlingType',0,17,226,4,16,4,9
	.byte	'CanEventType',0
	.word	10538
	.byte	4,2,35,0,0,16
	.byte	'Can_EventHandlingType',0,17,229,4,3
	.word	10998
	.byte	16
	.byte	'Rte_TransformerErrorCode',0,18,130,1,15
	.word	133
	.byte	16
	.byte	'Rte_TransformerClass',0,18,131,1,15
	.word	133
	.byte	8,18,168,1,9,12,9
	.byte	'in',0
	.word	6791
	.byte	4,2,35,0,9
	.byte	'out',0
	.word	6791
	.byte	4,2,35,4,9
	.byte	'used',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'lost_data',0
	.word	133
	.byte	1,2,35,10,0,16
	.byte	'Rte_QDynType',0,18,173,1,3
	.word	11144
	.byte	12,18,175,1,9,4,13
	.byte	'RTE_DRA',0,0,13
	.byte	'RTE_WOWP',0,1,13
	.byte	'RTE_TASK',0,2,13
	.byte	'RTE_ARE',0,3,13
	.byte	'RTE_EV',0,4,13
	.byte	'RTE_MSI',0,5,0,16
	.byte	'Rte_NotificationType',0,18,182,1,3
	.word	11231
	.byte	3
	.word	11144
	.byte	17
	.byte	'Rte_QCmnType',0,18,184,1,16,24,9
	.byte	'dynamic',0
	.word	11329
	.byte	4,2,35,0,9
	.byte	'copy',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'queue_size',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'element_size',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'buffer_start',0
	.word	6791
	.byte	4,2,35,12,9
	.byte	'buffer_end',0
	.word	6791
	.byte	4,2,35,16,9
	.byte	'notification_type',0
	.word	11231
	.byte	4,2,35,20,0,16
	.byte	'Rte_QCmnType',0,18,192,1,3
	.word	11334
	.byte	16
	.byte	'Rte_AlarmRefType',0,18,224,1,32
	.word	802
	.byte	16
	.byte	'Rte_AlarmIndexType',0,18,226,1,32
	.word	463
	.byte	18,128,8
	.word	133
	.byte	19,255,7,0,16
	.byte	'Impl_NVM_DstPtrType_1024',0,19,50,15
	.word	11572
	.byte	16
	.byte	'CanIf_u32_impl',0,19,69,16
	.word	802
	.byte	16
	.byte	'CanIf_u16_impl',0,19,71,16
	.word	463
	.byte	16
	.byte	'CanIf_u8_impl',0,19,73,15
	.word	133
	.byte	16
	.byte	'CanIf_ControllerModeType_Enum_impl',0,19,88,15
	.word	133
	.byte	16
	.byte	'CanIf_PduModeType_Enum_impl',0,19,90,15
	.word	133
	.byte	8,19,92,9,2,9
	.byte	'DeviceMode',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'ChannelMode',0
	.word	133
	.byte	1,2,35,1,0,16
	.byte	'CanIf_ControllerStateType_struct_impl',0,19,95,3
	.word	11763
	.byte	16
	.byte	'CanIf_NotifStatusType_Enum_impl',0,19,100,15
	.word	133
	.byte	16
	.byte	'CanSM_boolean_Impl',0,19,120,15
	.word	133
	.byte	16
	.byte	'CanSM_u8_Impl',0,19,123,15
	.word	133
	.byte	16
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,19,128,1,15
	.word	133
	.byte	16
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,19,132,1,15
	.word	133
	.byte	16
	.byte	'CanSM_u16_Impl',0,19,136,1,16
	.word	463
	.byte	16
	.byte	'CanSM_TimerStateType_Enum_impl',0,19,138,1,15
	.word	133
	.byte	8,19,140,1,9,4,9
	.byte	'cntTick_u16',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'stTimer',0
	.word	133
	.byte	1,2,35,2,0,16
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,19,143,1,3
	.word	12104
	.byte	16
	.byte	'Com_impl_u16',0,19,154,1,16
	.word	463
	.byte	16
	.byte	'Com_impl_u8',0,19,157,1,15
	.word	133
	.byte	16
	.byte	'ComM_uint32_Impl',0,19,173,1,16
	.word	802
	.byte	16
	.byte	'ComM_uint16_Impl',0,19,175,1,16
	.word	463
	.byte	16
	.byte	'ComM_uint8_Impl',0,19,177,1,15
	.word	133
	.byte	16
	.byte	'ComM_bool_Impl',0,19,179,1,15
	.word	133
	.byte	8,19,181,1,9,24,9
	.byte	'ChannelState_e',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'LightTimeoutCtr_u32',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'ChannelMode_u8',0
	.word	133
	.byte	1,2,35,10,9
	.byte	'BusSmMode_u8',0
	.word	133
	.byte	1,2,35,11,9
	.byte	'UserRequestCtr_u8',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'PassiveRequestState_u8',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'PncRequestCtr_u8',0
	.word	133
	.byte	1,2,35,14,9
	.byte	'InhibitionReqStatus_u8',0
	.word	133
	.byte	1,2,35,15,9
	.byte	'NmNetworkRequestStatus_b',0
	.word	133
	.byte	1,2,35,16,9
	.byte	'DiagnosticRequestState_b',0
	.word	133
	.byte	1,2,35,17,9
	.byte	'CommunicationAllowed_b',0
	.word	133
	.byte	1,2,35,18,9
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	133
	.byte	1,2,35,19,9
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'NmNetworkModeStatus_b',0
	.word	133
	.byte	1,2,35,21,0,16
	.byte	'ComM_ChannelStruct_Impl',0,19,197,1,3
	.word	12336
	.byte	8,19,206,1,9,10,9
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'LimitToNoComCtr_u16',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'RequestedUserMode_t',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'IndicatedUserMode_t',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'numChannelsInFullCom_u8',0
	.word	133
	.byte	1,2,35,6,9
	.byte	'numChannelsInSilentCom_u8',0
	.word	133
	.byte	1,2,35,7,9
	.byte	'numChannelsInNoCom_u8',0
	.word	133
	.byte	1,2,35,8,0,16
	.byte	'ComM_UserStruct_Impl',0,19,214,1,3
	.word	12840
	.byte	16
	.byte	'Dcm_IOOperationResponseType',0,19,252,1,15
	.word	133
	.byte	16
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	19,138,2,15
	.word	133
	.byte	16
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,19,146,2,15
	.word	133
	.byte	16
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,19,150,2,15
	.word	133
	.byte	16
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,19,154,2,15
	.word	133
	.byte	16
	.byte	'EcuM_ShutdownCauseType',0,19,191,2,15
	.word	133
	.byte	16
	.byte	'EcuM_ShutdownModeType',0,19,195,2,16
	.word	463
	.byte	16
	.byte	'EcuM_ShutdownTargetType',0,19,197,2,15
	.word	133
	.byte	16
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,19,243,3,34
	.word	11583
	.byte	18,128,8
	.word	133
	.byte	19,255,7,0,16
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,19,246,3,34
	.word	11583
	.byte	16
	.byte	'Rte_TaskRefType',0,20,184,1,32
	.word	8023
	.byte	16
	.byte	'Rte_EventRefType',0,20,185,1,32
	.word	133
	.byte	16
	.byte	'Rte_EventType',0,20,186,1,32
	.word	802
	.byte	16
	.byte	'Rte_REActCounterType',0,20,252,1,15
	.word	133
	.byte	3
	.word	133
	.byte	16
	.byte	'Rte_REActCounterRefType',0,20,253,1,58
	.word	13858
	.byte	8,20,255,1,9,8,9
	.byte	'task',0
	.word	13754
	.byte	4,2,35,0,9
	.byte	'acnt',0
	.word	13863
	.byte	4,2,35,4,0,16
	.byte	'Rte_REContainerType',0,20,130,2,3
	.word	13896
	.byte	10
	.word	7763
	.byte	3
	.word	13960
	.byte	3
	.word	133
	.byte	10
	.word	13896
	.byte	3
	.word	13975
	.byte	16
	.byte	'Rte_REContainerRefType',0,20,132,2,60
	.word	13980
	.byte	16
	.byte	'Rte_MSICounterType',0,20,149,2,16
	.word	463
	.byte	3
	.word	463
	.byte	16
	.byte	'Rte_MSICounterRefType',0,20,150,2,56
	.word	14045
	.byte	16
	.byte	'Rte_MSIPendingFlagType',0,20,152,2,17
	.word	133
	.byte	3
	.word	133
	.byte	16
	.byte	'Rte_MSIPendingFlagRefType',0,20,153,2,60
	.word	14113
	.byte	8,20,163,2,9,24,9
	.byte	'counter',0
	.word	14050
	.byte	4,2,35,0,9
	.byte	'incCounter',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'pending',0
	.word	14118
	.byte	4,2,35,8,9
	.byte	'osTask',0
	.word	13754
	.byte	4,2,35,12,9
	.byte	'acnt',0
	.word	13863
	.byte	4,2,35,16,9
	.byte	'osEvent',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'MSIInit',0
	.word	463
	.byte	2,2,35,22,0,16
	.byte	'Rte_MSITableEntry',0,20,172,2,3
	.word	14153
	.byte	3
	.word	463
	.byte	3
	.word	133
	.byte	16
	.byte	'Rte_TaskArrayIndex',0,20,179,2,16
	.word	133
	.byte	16
	.byte	'Rte_NrWaitingTasks',0,20,180,2,16
	.word	133
	.byte	8,20,182,2,9,4,9
	.byte	'pending',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'count',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'firstWaitingTask',0
	.word	133
	.byte	1,2,35,2,0,16
	.byte	'Rte_WaitableDatum',0,20,186,2,3
	.word	14371
	.byte	3
	.word	14371
	.byte	8,20,226,2,9,12,9
	.byte	'event_id',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'wd',0
	.word	14463
	.byte	4,2,35,4,9
	.byte	'timeout',0
	.word	802
	.byte	4,2,35,8,0,16
	.byte	'Rte_WOWP_NotificationType',0,20,230,2,3
	.word	14468
	.byte	10
	.word	14468
	.byte	3
	.word	14557
	.byte	16
	.byte	'Rte_WOWP_NotificationRefType',0,20,232,2,66
	.word	14562
	.byte	16
	.byte	'Rte_ARE_NotificationType',0,20,234,2,29
	.word	13896
	.byte	17
	.byte	'Rte_QTaskType',0,20,243,2,16,28,9
	.byte	'cmn',0
	.word	11334
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	13754
	.byte	4,2,35,24,0,16
	.byte	'Rte_QTaskType',0,20,246,2,3
	.word	14639
	.byte	17
	.byte	'Rte_QREType',0,20,250,2,16,28,9
	.byte	'cmn',0
	.word	11334
	.byte	24,2,35,0,9
	.byte	're',0
	.word	13985
	.byte	4,2,35,24,0,16
	.byte	'Rte_QREType',0,20,253,2,3
	.word	14710
	.byte	10
	.word	13896
	.byte	3
	.word	14775
	.byte	17
	.byte	'Rte_QWWPType',0,20,129,3,16,28,9
	.byte	'cmn',0
	.word	11334
	.byte	24,2,35,0,9
	.byte	'wwp',0
	.word	14567
	.byte	4,2,35,24,0,16
	.byte	'Rte_QWWPType',0,20,132,3,3
	.word	14785
	.byte	10
	.word	14468
	.byte	3
	.word	14853
	.byte	17
	.byte	'Rte_QEvType',0,20,136,3,16,36,9
	.byte	'cmn',0
	.word	11334
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	13754
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	13863
	.byte	4,2,35,32,0,16
	.byte	'Rte_QEvType',0,20,141,3,3
	.word	14863
	.byte	17
	.byte	'Rte_QMSIType',0,20,145,3,16,48,9
	.byte	'cmn',0
	.word	11334
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	13754
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	13863
	.byte	4,2,35,32,9
	.byte	'msiCounter',0
	.word	14050
	.byte	4,2,35,36,9
	.byte	'msiPending',0
	.word	14118
	.byte	4,2,35,40,9
	.byte	'msiLimit',0
	.word	463
	.byte	2,2,35,44,0,16
	.byte	'Rte_QMSIType',0,20,153,3,3
	.word	14958
	.byte	17
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,21,45,16,4,34
	.byte	'EN0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'EN1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'EN2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'EN3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'EN4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'EN5',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'EN6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'EN7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'EN8',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'EN9',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'EN10',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'EN11',0,1
	.word	133
	.byte	1,4,2,35,1,34
	.byte	'EN12',0,1
	.word	133
	.byte	1,3,2,35,1,34
	.byte	'EN13',0,1
	.word	133
	.byte	1,2,2,35,1,34
	.byte	'EN14',0,1
	.word	133
	.byte	1,1,2,35,1,34
	.byte	'EN15',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'EN16',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'EN17',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'EN18',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'EN19',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'EN20',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'EN21',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'EN22',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'EN23',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'EN24',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'EN25',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'EN26',0,1
	.word	133
	.byte	1,5,2,35,3,34
	.byte	'EN27',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'EN28',0,1
	.word	133
	.byte	1,3,2,35,3,34
	.byte	'EN29',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'EN30',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'EN31',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_ACCEN0_Bits',0,21,79,3
	.word	15113
	.byte	17
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,21,82,16,4,34
	.byte	'reserved_0',0,4
	.word	802
	.byte	32,0,2,35,0,0,16
	.byte	'Ifx_SCU_ACCEN1_Bits',0,21,85,3
	.word	15670
	.byte	17
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,21,88,16,4,34
	.byte	'STM0DIS',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'STM1DIS',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'STM2DIS',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'reserved_3',0,4
	.word	802
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,21,94,3
	.word	15747
	.byte	17
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,21,97,16,4,34
	.byte	'BAUD1DIV',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'BAUD2DIV',0,1
	.word	133
	.byte	4,0,2,35,0,34
	.byte	'SRIDIV',0,1
	.word	133
	.byte	4,4,2,35,1,34
	.byte	'LPDIV',0,1
	.word	133
	.byte	4,0,2,35,1,34
	.byte	'SPBDIV',0,1
	.word	133
	.byte	4,4,2,35,2,34
	.byte	'FSI2DIV',0,1
	.word	133
	.byte	2,2,2,35,2,34
	.byte	'reserved_22',0,1
	.word	133
	.byte	2,0,2,35,2,34
	.byte	'FSIDIV',0,1
	.word	133
	.byte	2,6,2,35,3,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	2,4,2,35,3,34
	.byte	'CLKSEL',0,1
	.word	133
	.byte	2,2,2,35,3,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON0_Bits',0,21,111,3
	.word	15883
	.byte	17
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,21,114,16,4,34
	.byte	'CANDIV',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'ERAYDIV',0,1
	.word	133
	.byte	4,0,2,35,0,34
	.byte	'STMDIV',0,1
	.word	133
	.byte	4,4,2,35,1,34
	.byte	'GTMDIV',0,1
	.word	133
	.byte	4,0,2,35,1,34
	.byte	'ETHDIV',0,1
	.word	133
	.byte	4,4,2,35,2,34
	.byte	'ASCLINFDIV',0,1
	.word	133
	.byte	4,0,2,35,2,34
	.byte	'ASCLINSDIV',0,1
	.word	133
	.byte	4,4,2,35,3,34
	.byte	'INSEL',0,1
	.word	133
	.byte	2,2,2,35,3,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON1_Bits',0,21,126,3
	.word	16163
	.byte	17
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,21,129,1,16,4,34
	.byte	'BBBDIV',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	26,2,2,35,0,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON2_Bits',0,21,135,1,3
	.word	16401
	.byte	17
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,21,138,1,16,4,34
	.byte	'PLLDIV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'PLLSEL',0,1
	.word	133
	.byte	2,0,2,35,0,34
	.byte	'PLLERAYDIV',0,1
	.word	133
	.byte	6,2,2,35,1,34
	.byte	'PLLERAYSEL',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'SRIDIV',0,1
	.word	133
	.byte	6,2,2,35,2,34
	.byte	'SRISEL',0,1
	.word	133
	.byte	2,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON3_Bits',0,21,150,1,3
	.word	16529
	.byte	17
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,21,153,1,16,4,34
	.byte	'SPBDIV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'SPBSEL',0,1
	.word	133
	.byte	2,0,2,35,0,34
	.byte	'GTMDIV',0,1
	.word	133
	.byte	6,2,2,35,1,34
	.byte	'GTMSEL',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'STMDIV',0,1
	.word	133
	.byte	6,2,2,35,2,34
	.byte	'STMSEL',0,1
	.word	133
	.byte	2,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON4_Bits',0,21,165,1,3
	.word	16772
	.byte	17
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,21,168,1,16,4,34
	.byte	'MAXDIV',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	26,2,2,35,0,34
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CCUCON5_Bits',0,21,174,1,3
	.word	17007
	.byte	17
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,21,177,1,16,4,34
	.byte	'CPU0DIV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON6_Bits',0,21,181,1,3
	.word	17135
	.byte	17
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,21,184,1,16,4,34
	.byte	'CPU1DIV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON7_Bits',0,21,188,1,3
	.word	17235
	.byte	17
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,21,191,1,16,4,34
	.byte	'CPU2DIV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON8_Bits',0,21,195,1,3
	.word	17335
	.byte	17
	.byte	'_Ifx_SCU_CHIPID_Bits',0,21,198,1,16,4,34
	.byte	'CHREV',0,1
	.word	133
	.byte	6,2,2,35,0,34
	.byte	'CHTEC',0,1
	.word	133
	.byte	2,0,2,35,0,34
	.byte	'CHID',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'EEA',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'UCODE',0,1
	.word	133
	.byte	7,0,2,35,2,34
	.byte	'FSIZE',0,1
	.word	133
	.byte	4,4,2,35,3,34
	.byte	'SP',0,1
	.word	133
	.byte	2,2,2,35,3,34
	.byte	'SEC',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_CHIPID_Bits',0,21,209,1,3
	.word	17435
	.byte	17
	.byte	'_Ifx_SCU_DTSCON_Bits',0,21,212,1,16,4,34
	.byte	'PWD',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'START',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,34
	.byte	'CAL',0,4
	.word	802
	.byte	22,6,2,35,0,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	5,1,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_DTSCON_Bits',0,21,220,1,3
	.word	17643
	.byte	17
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,21,223,1,16,4,34
	.byte	'LOWER',0,2
	.word	463
	.byte	10,6,2,35,0,34
	.byte	'reserved_10',0,1
	.word	133
	.byte	5,1,2,35,1,34
	.byte	'LLU',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'UPPER',0,2
	.word	463
	.byte	10,6,2,35,2,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	4,2,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'UOF',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_DTSLIM_Bits',0,21,232,1,3
	.word	17808
	.byte	17
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,21,235,1,16,4,34
	.byte	'RESULT',0,2
	.word	463
	.byte	10,6,2,35,0,34
	.byte	'reserved_10',0,1
	.word	133
	.byte	4,2,2,35,1,34
	.byte	'RDY',0,1
	.word	133
	.byte	1,1,2,35,1,34
	.byte	'BUSY',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,21,242,1,3
	.word	17991
	.byte	17
	.byte	'_Ifx_SCU_EICR_Bits',0,21,245,1,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'EXIS0',0,1
	.word	133
	.byte	3,1,2,35,0,34
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'FEN0',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'REN0',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'LDEN0',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'EIEN0',0,1
	.word	133
	.byte	1,4,2,35,1,34
	.byte	'INP0',0,1
	.word	133
	.byte	3,1,2,35,1,34
	.byte	'reserved_15',0,4
	.word	802
	.byte	5,12,2,35,0,34
	.byte	'EXIS1',0,1
	.word	133
	.byte	3,1,2,35,2,34
	.byte	'reserved_23',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'FEN1',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'REN1',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'LDEN1',0,1
	.word	133
	.byte	1,5,2,35,3,34
	.byte	'EIEN1',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'INP1',0,1
	.word	133
	.byte	3,1,2,35,3,34
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EICR_Bits',0,21,136,2,3
	.word	18145
	.byte	17
	.byte	'_Ifx_SCU_EIFR_Bits',0,21,139,2,16,4,34
	.byte	'INTF0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'INTF1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'INTF2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'INTF3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'INTF4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'INTF5',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'INTF6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'INTF7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_SCU_EIFR_Bits',0,21,150,2,3
	.word	18509
	.byte	17
	.byte	'_Ifx_SCU_EMSR_Bits',0,21,153,2,16,4,34
	.byte	'POL',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'MODE',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'ENON',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'PSEL',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,2
	.word	463
	.byte	12,0,2,35,0,34
	.byte	'EMSF',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'SEMSF',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'reserved_18',0,1
	.word	133
	.byte	6,0,2,35,2,34
	.byte	'EMSFM',0,1
	.word	133
	.byte	2,6,2,35,3,34
	.byte	'SEMSFM',0,1
	.word	133
	.byte	2,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_EMSR_Bits',0,21,166,2,3
	.word	18720
	.byte	17
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,21,169,2,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	7,1,2,35,0,34
	.byte	'EDCON',0,2
	.word	463
	.byte	2,7,2,35,0,34
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_SCU_ESRCFG_Bits',0,21,174,2,3
	.word	18972
	.byte	17
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,21,177,2,16,4,34
	.byte	'ARI',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ARC',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_ESROCFG_Bits',0,21,182,2,3
	.word	19090
	.byte	17
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,21,185,2,16,4,34
	.byte	'reserved_0',0,4
	.word	802
	.byte	28,4,2,35,0,34
	.byte	'EVR13OFF',0,1
	.word	133
	.byte	1,3,2,35,3,34
	.byte	'BPEVR13OFF',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVR13CON_Bits',0,21,192,2,3
	.word	19201
	.byte	17
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,21,195,2,16,4,34
	.byte	'reserved_0',0,4
	.word	802
	.byte	28,4,2,35,0,34
	.byte	'EVR33OFF',0,1
	.word	133
	.byte	1,3,2,35,3,34
	.byte	'BPEVR33OFF',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVR33CON_Bits',0,21,202,2,3
	.word	19364
	.byte	17
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,21,205,2,16,4,34
	.byte	'ADC13V',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'ADC33V',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'ADCSWDV',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'VAL',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,21,212,2,3
	.word	19527
	.byte	17
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,21,215,2,16,4,34
	.byte	'DVS13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'DVS33TRIM',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'VAL',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,21,222,2,3
	.word	19685
	.byte	17
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,21,225,2,16,4,34
	.byte	'EVR13OVMOD',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,34
	.byte	'EVR13UVMOD',0,1
	.word	133
	.byte	2,2,2,35,0,34
	.byte	'reserved_6',0,1
	.word	133
	.byte	2,0,2,35,0,34
	.byte	'EVR33OVMOD',0,1
	.word	133
	.byte	2,6,2,35,1,34
	.byte	'reserved_10',0,1
	.word	133
	.byte	2,4,2,35,1,34
	.byte	'EVR33UVMOD',0,1
	.word	133
	.byte	2,2,2,35,1,34
	.byte	'reserved_14',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'SWDOVMOD',0,1
	.word	133
	.byte	2,6,2,35,2,34
	.byte	'reserved_18',0,1
	.word	133
	.byte	2,4,2,35,2,34
	.byte	'SWDUVMOD',0,1
	.word	133
	.byte	2,2,2,35,2,34
	.byte	'reserved_22',0,2
	.word	463
	.byte	8,2,2,35,2,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,21,241,2,3
	.word	19850
	.byte	17
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,21,244,2,16,4,34
	.byte	'EVR13OVVAL',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'EVR33OVVAL',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'SWDOVVAL',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	6,2,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVROVMON_Bits',0,21,252,2,3
	.word	20218
	.byte	17
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,21,255,2,16,4,34
	.byte	'RST13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'reserved_8',0,4
	.word	802
	.byte	16,8,2,35,0,34
	.byte	'RST13OFF',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'BPRST13OFF',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'RST33OFF',0,1
	.word	133
	.byte	1,5,2,35,3,34
	.byte	'BPRST33OFF',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'RSTSWDOFF',0,1
	.word	133
	.byte	1,3,2,35,3,34
	.byte	'BPRSTSWDOFF',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,21,139,3,3
	.word	20397
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,21,142,3,16,4,34
	.byte	'SD5P',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SD5I',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'SD5D',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,21,149,3,3
	.word	20662
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,21,152,3,16,4,34
	.byte	'SD33P',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SD33I',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'SD33D',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,21,159,3,3
	.word	20815
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,21,162,3,16,4,34
	.byte	'CT5REG0',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'CT5REG1',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'CT5REG2',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,21,169,3,3
	.word	20971
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,21,172,3,16,4,34
	.byte	'CT5REG3',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'CT5REG4',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	15,1,2,35,2,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,21,178,3,3
	.word	21133
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,21,181,3,16,4,34
	.byte	'CT33REG0',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'CT33REG1',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'CT33REG2',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,21,188,3,3
	.word	21276
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,21,191,3,16,4,34
	.byte	'CT33REG3',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'CT33REG4',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	15,1,2,35,2,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,21,197,3,3
	.word	21441
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,21,200,3,16,4,34
	.byte	'SDFREQSPRD',0,2
	.word	463
	.byte	16,0,2,35,0,34
	.byte	'SDFREQ',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'SDSTEP',0,1
	.word	133
	.byte	4,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	2,2,2,35,3,34
	.byte	'SDSAMPLE',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,21,208,3,3
	.word	21586
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,21,211,3,16,4,34
	.byte	'DRVP',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SDMINMAXDC',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'DRVN',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'SDLUT',0,1
	.word	133
	.byte	6,2,2,35,3,34
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,21,219,3,3
	.word	21767
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,21,222,3,16,4,34
	.byte	'SDPWMPRE',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SDPID',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'SDVOKLVL',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,21,229,3,3
	.word	21941
	.byte	17
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,21,232,3,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SYNCDIV',0,1
	.word	133
	.byte	3,5,2,35,1,34
	.byte	'reserved_11',0,4
	.word	802
	.byte	20,1,2,35,0,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,21,238,3,3
	.word	22101
	.byte	17
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,21,241,3,16,4,34
	.byte	'EVR13',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'OV13',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'EVR33',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'OV33',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'OVSWD',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'UV13',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'UV33',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'UVSWD',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'EXTPASS13',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'EXTPASS33',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'BGPROK',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'reserved_11',0,4
	.word	802
	.byte	21,0,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,21,255,3,3
	.word	22245
	.byte	17
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,21,130,4,16,4,34
	.byte	'EVR13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'SDVOUTSEL',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	14,2,2,35,2,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,21,137,4,3
	.word	22519
	.byte	17
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,21,140,4,16,4,34
	.byte	'EVR13UVVAL',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'EVR33UVVAL',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'SWDUVVAL',0,1
	.word	133
	.byte	8,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	6,2,2,35,3,34
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,21,148,4,3
	.word	22674
	.byte	17
	.byte	'_Ifx_SCU_EXTCON_Bits',0,21,151,4,16,4,34
	.byte	'EN0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'SEL0',0,1
	.word	133
	.byte	4,2,2,35,0,34
	.byte	'reserved_6',0,2
	.word	463
	.byte	10,0,2,35,0,34
	.byte	'EN1',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'NSEL',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'SEL1',0,1
	.word	133
	.byte	4,2,2,35,2,34
	.byte	'reserved_22',0,1
	.word	133
	.byte	2,0,2,35,2,34
	.byte	'DIV1',0,1
	.word	133
	.byte	8,0,2,35,3,0,16
	.byte	'Ifx_SCU_EXTCON_Bits',0,21,162,4,3
	.word	22853
	.byte	17
	.byte	'_Ifx_SCU_FDR_Bits',0,21,165,4,16,4,34
	.byte	'STEP',0,2
	.word	463
	.byte	10,6,2,35,0,34
	.byte	'reserved_10',0,1
	.word	133
	.byte	4,2,2,35,1,34
	.byte	'DM',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'RESULT',0,2
	.word	463
	.byte	10,6,2,35,2,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	5,1,2,35,3,34
	.byte	'DISCLK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_FDR_Bits',0,21,173,4,3
	.word	23071
	.byte	17
	.byte	'_Ifx_SCU_FMR_Bits',0,21,176,4,16,4,34
	.byte	'FS0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'FS1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'FS2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'FS3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'FS4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'FS5',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'FS6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'FS7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'FC0',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'FC1',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'FC2',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'FC3',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'FC4',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'FC5',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'FC6',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'FC7',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	8,0,2,35,3,0,16
	.byte	'Ifx_SCU_FMR_Bits',0,21,196,4,3
	.word	23234
	.byte	17
	.byte	'_Ifx_SCU_ID_Bits',0,21,199,4,16,4,34
	.byte	'MODREV',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'MODTYPE',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'MODNUMBER',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_ID_Bits',0,21,204,4,3
	.word	23570
	.byte	17
	.byte	'_Ifx_SCU_IGCR_Bits',0,21,207,4,16,4,34
	.byte	'IPEN00',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'IPEN01',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'IPEN02',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'IPEN03',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'IPEN04',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'IPEN05',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'IPEN06',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'IPEN07',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,1
	.word	133
	.byte	5,3,2,35,1,34
	.byte	'GEEN0',0,1
	.word	133
	.byte	1,2,2,35,1,34
	.byte	'IGP0',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'IPEN10',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'IPEN11',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'IPEN12',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'IPEN13',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'IPEN14',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'IPEN15',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'IPEN16',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'IPEN17',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,34
	.byte	'GEEN1',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'IGP1',0,1
	.word	133
	.byte	2,0,2,35,3,0,16
	.byte	'Ifx_SCU_IGCR_Bits',0,21,231,4,3
	.word	23677
	.byte	17
	.byte	'_Ifx_SCU_IN_Bits',0,21,234,4,16,4,34
	.byte	'P0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'P1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_IN_Bits',0,21,239,4,3
	.word	24129
	.byte	17
	.byte	'_Ifx_SCU_IOCR_Bits',0,21,242,4,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	4,4,2,35,0,34
	.byte	'PC0',0,1
	.word	133
	.byte	4,0,2,35,0,34
	.byte	'reserved_8',0,1
	.word	133
	.byte	4,4,2,35,1,34
	.byte	'PC1',0,1
	.word	133
	.byte	4,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_IOCR_Bits',0,21,249,4,3
	.word	24228
	.byte	17
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,21,252,4,16,4,34
	.byte	'LBISTREQ',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'LBISTREQP',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'PATTERNS',0,2
	.word	463
	.byte	14,0,2,35,0,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,21,130,5,3
	.word	24378
	.byte	17
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,21,133,5,16,4,34
	.byte	'SEED',0,4
	.word	802
	.byte	23,9,2,35,0,34
	.byte	'reserved_23',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'SPLITSH',0,1
	.word	133
	.byte	3,5,2,35,3,34
	.byte	'BODY',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'LBISTFREQU',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,21,140,5,3
	.word	24527
	.byte	17
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,21,143,5,16,4,34
	.byte	'SIGNATURE',0,4
	.word	802
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,34
	.byte	'LBISTDONE',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,21,148,5,3
	.word	24688
	.byte	17
	.byte	'_Ifx_SCU_LCLCON_Bits',0,21,151,5,16,4,34
	.byte	'reserved_0',0,2
	.word	463
	.byte	16,0,2,35,0,34
	.byte	'LS',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'reserved_17',0,2
	.word	463
	.byte	14,1,2,35,2,34
	.byte	'LSEN',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_LCLCON_Bits',0,21,157,5,3
	.word	24818
	.byte	17
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,21,160,5,16,4,34
	.byte	'LCLT0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'LCLT1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_LCLTEST_Bits',0,21,165,5,3
	.word	24950
	.byte	17
	.byte	'_Ifx_SCU_MANID_Bits',0,21,168,5,16,4,34
	.byte	'DEPT',0,1
	.word	133
	.byte	5,3,2,35,0,34
	.byte	'MANUF',0,2
	.word	463
	.byte	11,0,2,35,0,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_MANID_Bits',0,21,173,5,3
	.word	25065
	.byte	17
	.byte	'_Ifx_SCU_OMR_Bits',0,21,176,5,16,4,34
	.byte	'PS0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'PS1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,2
	.word	463
	.byte	14,0,2,35,0,34
	.byte	'PCL0',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'PCL1',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'reserved_18',0,2
	.word	463
	.byte	14,0,2,35,2,0,16
	.byte	'Ifx_SCU_OMR_Bits',0,21,184,5,3
	.word	25176
	.byte	17
	.byte	'_Ifx_SCU_OSCCON_Bits',0,21,187,5,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'PLLLV',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'OSCRES',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'GAINSEL',0,1
	.word	133
	.byte	2,3,2,35,0,34
	.byte	'MODE',0,1
	.word	133
	.byte	2,1,2,35,0,34
	.byte	'SHBY',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'PLLHV',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'reserved_9',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'X1D',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'X1DEN',0,1
	.word	133
	.byte	1,4,2,35,1,34
	.byte	'reserved_12',0,1
	.word	133
	.byte	4,0,2,35,1,34
	.byte	'OSCVAL',0,1
	.word	133
	.byte	5,3,2,35,2,34
	.byte	'reserved_21',0,1
	.word	133
	.byte	2,1,2,35,2,34
	.byte	'APREN',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'CAP0EN',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'CAP1EN',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'CAP2EN',0,1
	.word	133
	.byte	1,5,2,35,3,34
	.byte	'CAP3EN',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_OSCCON_Bits',0,21,208,5,3
	.word	25334
	.byte	17
	.byte	'_Ifx_SCU_OUT_Bits',0,21,211,5,16,4,34
	.byte	'P0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'P1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_OUT_Bits',0,21,216,5,3
	.word	25746
	.byte	17
	.byte	'_Ifx_SCU_OVCCON_Bits',0,21,219,5,16,4,34
	.byte	'CSEL0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'CSEL1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'CSEL2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'reserved_3',0,2
	.word	463
	.byte	13,0,2,35,0,34
	.byte	'OVSTRT',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'OVSTP',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'DCINVAL',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,34
	.byte	'OVCONF',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'POVCONF',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	6,0,2,35,3,0,16
	.byte	'Ifx_SCU_OVCCON_Bits',0,21,232,5,3
	.word	25847
	.byte	17
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,21,235,5,16,4,34
	.byte	'OVEN0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'OVEN1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'OVEN2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'reserved_3',0,4
	.word	802
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,21,241,5,3
	.word	26114
	.byte	17
	.byte	'_Ifx_SCU_PDISC_Bits',0,21,244,5,16,4,34
	.byte	'PDIS0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'PDIS1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_PDISC_Bits',0,21,249,5,3
	.word	26250
	.byte	17
	.byte	'_Ifx_SCU_PDR_Bits',0,21,252,5,16,4,34
	.byte	'PD0',0,1
	.word	133
	.byte	3,5,2,35,0,34
	.byte	'PL0',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'PD1',0,1
	.word	133
	.byte	3,1,2,35,0,34
	.byte	'PL1',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_SCU_PDR_Bits',0,21,131,6,3
	.word	26361
	.byte	17
	.byte	'_Ifx_SCU_PDRR_Bits',0,21,134,6,16,4,34
	.byte	'PDR0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'PDR1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'PDR2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'PDR3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'PDR4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'PDR5',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'PDR6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PDR7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_SCU_PDRR_Bits',0,21,145,6,3
	.word	26494
	.byte	17
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,21,148,6,16,4,34
	.byte	'VCOBYP',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'VCOPWD',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'MODEN',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'reserved_3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'SETFINDIS',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'CLRFINDIS',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'OSCDISCDIS',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'reserved_7',0,2
	.word	463
	.byte	2,7,2,35,0,34
	.byte	'NDIV',0,1
	.word	133
	.byte	7,0,2,35,1,34
	.byte	'PLLPWD',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'RESLD',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,34
	.byte	'PDIV',0,1
	.word	133
	.byte	4,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_PLLCON0_Bits',0,21,165,6,3
	.word	26697
	.byte	17
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,21,168,6,16,4,34
	.byte	'K2DIV',0,1
	.word	133
	.byte	7,1,2,35,0,34
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'K3DIV',0,1
	.word	133
	.byte	7,1,2,35,1,34
	.byte	'reserved_15',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'K1DIV',0,1
	.word	133
	.byte	7,1,2,35,2,34
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,16
	.byte	'Ifx_SCU_PLLCON1_Bits',0,21,176,6,3
	.word	27053
	.byte	17
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,21,179,6,16,4,34
	.byte	'MODCFG',0,2
	.word	463
	.byte	16,0,2,35,0,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_PLLCON2_Bits',0,21,183,6,3
	.word	27231
	.byte	17
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,21,186,6,16,4,34
	.byte	'VCOBYP',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'VCOPWD',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,34
	.byte	'SETFINDIS',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'CLRFINDIS',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'OSCDISCDIS',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'reserved_7',0,2
	.word	463
	.byte	2,7,2,35,0,34
	.byte	'NDIV',0,1
	.word	133
	.byte	5,2,2,35,1,34
	.byte	'reserved_14',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'PLLPWD',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'RESLD',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,34
	.byte	'PDIV',0,1
	.word	133
	.byte	4,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,21,203,6,3
	.word	27331
	.byte	17
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,21,206,6,16,4,34
	.byte	'K2DIV',0,1
	.word	133
	.byte	7,1,2,35,0,34
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'K3DIV',0,1
	.word	133
	.byte	4,4,2,35,1,34
	.byte	'reserved_12',0,1
	.word	133
	.byte	4,0,2,35,1,34
	.byte	'K1DIV',0,1
	.word	133
	.byte	7,1,2,35,2,34
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,16
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,21,214,6,3
	.word	27701
	.byte	17
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,21,217,6,16,4,34
	.byte	'VCOBYST',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'PWDSTAT',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'VCOLOCK',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'FINDIS',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'K1RDY',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'K2RDY',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,21,226,6,3
	.word	27887
	.byte	17
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,21,229,6,16,4,34
	.byte	'VCOBYST',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'VCOLOCK',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'FINDIS',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'K1RDY',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'K2RDY',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'reserved_6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'MODRUN',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,21,240,6,3
	.word	28085
	.byte	17
	.byte	'_Ifx_SCU_PMCSR_Bits',0,21,243,6,16,4,34
	.byte	'REQSLP',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'SMUSLP',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'reserved_3',0,1
	.word	133
	.byte	5,0,2,35,0,34
	.byte	'PMST',0,1
	.word	133
	.byte	3,5,2,35,1,34
	.byte	'reserved_11',0,4
	.word	802
	.byte	21,0,2,35,0,0,16
	.byte	'Ifx_SCU_PMCSR_Bits',0,21,250,6,3
	.word	28318
	.byte	17
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,21,253,6,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1WKEN',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'PINAWKEN',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'PINBWKEN',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'ESR0DFEN',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'ESR0EDCON',0,1
	.word	133
	.byte	2,1,2,35,0,34
	.byte	'ESR1DFEN',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'ESR1EDCON',0,1
	.word	133
	.byte	2,6,2,35,1,34
	.byte	'PINADFEN',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'PINAEDCON',0,1
	.word	133
	.byte	2,3,2,35,1,34
	.byte	'PINBDFEN',0,1
	.word	133
	.byte	1,2,2,35,1,34
	.byte	'PINBEDCON',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'reserved_16',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'STBYRAMSEL',0,1
	.word	133
	.byte	2,5,2,35,2,34
	.byte	'reserved_19',0,1
	.word	133
	.byte	2,3,2,35,2,34
	.byte	'TRISTEN',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'TRISTREQ',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'PORSTDF',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'PWRWKEN',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'DCDCSYNC',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'BLNKFIL',0,1
	.word	133
	.byte	3,3,2,35,3,34
	.byte	'ESR0TRIST',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,34
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,21,151,7,3
	.word	28470
	.byte	17
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,21,154,7,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'CPUIDLSEL',0,1
	.word	133
	.byte	3,5,2,35,1,34
	.byte	'reserved_11',0,1
	.word	133
	.byte	1,4,2,35,1,34
	.byte	'IRADIS',0,1
	.word	133
	.byte	1,3,2,35,1,34
	.byte	'reserved_13',0,4
	.word	802
	.byte	11,8,2,35,0,34
	.byte	'CPUSEL',0,1
	.word	133
	.byte	3,5,2,35,3,34
	.byte	'STBYEVEN',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'STBYEV',0,1
	.word	133
	.byte	3,1,2,35,3,34
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,16
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,21,165,7,3
	.word	29018
	.byte	17
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,21,168,7,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'ESR1WKP',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'ESR1OVRUN',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'PINAWKP',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'PINAOVRUN',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'PINBWKP',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PINBOVRUN',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'PWRWKP',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'PORSTDF',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'HWCFGEVR',0,1
	.word	133
	.byte	3,3,2,35,1,34
	.byte	'STBYRAM',0,1
	.word	133
	.byte	2,1,2,35,1,34
	.byte	'TRIST',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'reserved_16',0,1
	.word	133
	.byte	4,4,2,35,2,34
	.byte	'ESR1WKEN',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'PINAWKEN',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'PINBWKEN',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'PWRWKEN',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'BLNKFIL',0,1
	.word	133
	.byte	3,5,2,35,3,34
	.byte	'ESR0TRIST',0,1
	.word	133
	.byte	1,4,2,35,3,34
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,16
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,21,190,7,3
	.word	29263
	.byte	17
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,21,193,7,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'ESR1WKPCLR',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'ESR1OVRUNCLR',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'PINAWKPCLR',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'PINAOVRUNCLR',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'PINBWKPCLR',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PINBOVRUNCLR',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'PWRWKPCLR',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,21,204,7,3
	.word	29724
	.byte	17
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,21,207,7,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'CLRC',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,2
	.word	463
	.byte	10,4,2,35,0,34
	.byte	'CSS0',0,1
	.word	133
	.byte	1,3,2,35,1,34
	.byte	'CSS1',0,1
	.word	133
	.byte	1,2,2,35,1,34
	.byte	'CSS2',0,1
	.word	133
	.byte	1,1,2,35,1,34
	.byte	'reserved_15',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'USRINFO',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_RSTCON2_Bits',0,21,217,7,3
	.word	29994
	.byte	17
	.byte	'_Ifx_SCU_RSTCON_Bits',0,21,220,7,16,4,34
	.byte	'ESR0',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'ESR1',0,1
	.word	133
	.byte	2,4,2,35,0,34
	.byte	'reserved_4',0,1
	.word	133
	.byte	2,2,2,35,0,34
	.byte	'SMU',0,1
	.word	133
	.byte	2,0,2,35,0,34
	.byte	'SW',0,1
	.word	133
	.byte	2,6,2,35,1,34
	.byte	'STM0',0,1
	.word	133
	.byte	2,4,2,35,1,34
	.byte	'STM1',0,1
	.word	133
	.byte	2,2,2,35,1,34
	.byte	'STM2',0,1
	.word	133
	.byte	2,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_RSTCON_Bits',0,21,231,7,3
	.word	30203
	.byte	17
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,21,234,7,16,4,34
	.byte	'ESR0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'SMU',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'SW',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'STM0',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'STM1',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'STM2',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,34
	.byte	'PORST',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'CB0',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'CB1',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'CB3',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'reserved_21',0,1
	.word	133
	.byte	2,1,2,35,2,34
	.byte	'EVR13',0,1
	.word	133
	.byte	1,0,2,35,2,34
	.byte	'EVR33',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'SWD',0,1
	.word	133
	.byte	1,6,2,35,3,34
	.byte	'reserved_26',0,1
	.word	133
	.byte	2,4,2,35,3,34
	.byte	'STBYR',0,1
	.word	133
	.byte	1,3,2,35,3,34
	.byte	'reserved_29',0,1
	.word	133
	.byte	3,0,2,35,3,0,16
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,21,129,8,3
	.word	30414
	.byte	17
	.byte	'_Ifx_SCU_SAFECON_Bits',0,21,132,8,16,4,34
	.byte	'HBT',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'reserved_1',0,4
	.word	802
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_SCU_SAFECON_Bits',0,21,136,8,3
	.word	30846
	.byte	17
	.byte	'_Ifx_SCU_STSTAT_Bits',0,21,139,8,16,4,34
	.byte	'HWCFG',0,1
	.word	133
	.byte	8,0,2,35,0,34
	.byte	'FTM',0,1
	.word	133
	.byte	7,1,2,35,1,34
	.byte	'MODE',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'reserved_16',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'LUDIS',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'reserved_18',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'TRSTL',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'SPDEN',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'reserved_21',0,1
	.word	133
	.byte	3,0,2,35,2,34
	.byte	'RAMINT',0,1
	.word	133
	.byte	1,7,2,35,3,34
	.byte	'reserved_25',0,1
	.word	133
	.byte	7,0,2,35,3,0,16
	.byte	'Ifx_SCU_STSTAT_Bits',0,21,152,8,3
	.word	30942
	.byte	17
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,21,155,8,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'SWRSTREQ',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,21,160,8,3
	.word	31208
	.byte	17
	.byte	'_Ifx_SCU_SYSCON_Bits',0,21,163,8,16,4,34
	.byte	'CCTRIG0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'RAMINTM',0,1
	.word	133
	.byte	2,4,2,35,0,34
	.byte	'SETLUDIS',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'reserved_5',0,1
	.word	133
	.byte	3,0,2,35,0,34
	.byte	'DATM',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_SCU_SYSCON_Bits',0,21,172,8,3
	.word	31333
	.byte	17
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,21,175,8,16,4,34
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,21,182,8,3
	.word	31530
	.byte	17
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,21,185,8,16,4,34
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,21,192,8,3
	.word	31683
	.byte	17
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,21,195,8,16,4,34
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPSET_Bits',0,21,202,8,3
	.word	31836
	.byte	17
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,21,205,8,16,4,34
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,21,212,8,3
	.word	31989
	.byte	2
	.byte	'unsigned int',0,4,7,17
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,21,215,8,16,4,34
	.byte	'ENDINIT',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'LCK',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'PW',0,4
	.word	32144
	.byte	14,16,2,35,0,34
	.byte	'REL',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,21,221,8,3
	.word	32160
	.byte	17
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,21,224,8,16,4,34
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,34
	.byte	'IR0',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'DR',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'IR1',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'UR',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PAR',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'TCR',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'TCTR',0,1
	.word	133
	.byte	7,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,21,236,8,3
	.word	32290
	.byte	17
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,21,239,8,16,4,34
	.byte	'AE',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'OE',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'IS0',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'DS',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'TO',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'IS1',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'US',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PAS',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'TCS',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'TCT',0,1
	.word	133
	.byte	7,0,2,35,1,34
	.byte	'TIM',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,21,252,8,3
	.word	32528
	.byte	17
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,21,255,8,16,4,34
	.byte	'ENDINIT',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'LCK',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'PW',0,4
	.word	32144
	.byte	14,16,2,35,0,34
	.byte	'REL',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,21,133,9,3
	.word	32751
	.byte	17
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,21,136,9,16,4,34
	.byte	'CLRIRF',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'IR0',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'DR',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'reserved_4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'IR1',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'UR',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PAR',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'TCR',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'TCTR',0,1
	.word	133
	.byte	7,0,2,35,1,34
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,21,149,9,3
	.word	32877
	.byte	17
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,21,152,9,16,4,34
	.byte	'AE',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'OE',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'IS0',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'DS',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'TO',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'IS1',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'US',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'PAS',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'TCS',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'TCT',0,1
	.word	133
	.byte	7,0,2,35,1,34
	.byte	'TIM',0,2
	.word	463
	.byte	16,0,2,35,2,0,16
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,21,165,9,3
	.word	33129
	.byte	30,21,173,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	15113
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ACCEN0',0,21,178,9,3
	.word	33348
	.byte	30,21,181,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	15670
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ACCEN1',0,21,186,9,3
	.word	33412
	.byte	30,21,189,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	15747
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ARSTDIS',0,21,194,9,3
	.word	33476
	.byte	30,21,197,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	15883
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON0',0,21,202,9,3
	.word	33541
	.byte	30,21,205,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16163
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON1',0,21,210,9,3
	.word	33606
	.byte	30,21,213,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16401
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON2',0,21,218,9,3
	.word	33671
	.byte	30,21,221,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16529
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON3',0,21,226,9,3
	.word	33736
	.byte	30,21,229,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16772
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON4',0,21,234,9,3
	.word	33801
	.byte	30,21,237,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17007
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON5',0,21,242,9,3
	.word	33866
	.byte	30,21,245,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17135
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON6',0,21,250,9,3
	.word	33931
	.byte	30,21,253,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17235
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON7',0,21,130,10,3
	.word	33996
	.byte	30,21,133,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17335
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CCUCON8',0,21,138,10,3
	.word	34061
	.byte	30,21,141,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17435
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_CHIPID',0,21,146,10,3
	.word	34126
	.byte	30,21,149,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17643
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_DTSCON',0,21,154,10,3
	.word	34190
	.byte	30,21,157,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17808
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_DTSLIM',0,21,162,10,3
	.word	34254
	.byte	30,21,165,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17991
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_DTSSTAT',0,21,170,10,3
	.word	34318
	.byte	30,21,173,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18145
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EICR',0,21,178,10,3
	.word	34383
	.byte	30,21,181,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18509
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EIFR',0,21,186,10,3
	.word	34445
	.byte	30,21,189,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18720
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EMSR',0,21,194,10,3
	.word	34507
	.byte	30,21,197,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18972
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ESRCFG',0,21,202,10,3
	.word	34569
	.byte	30,21,205,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19090
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ESROCFG',0,21,210,10,3
	.word	34633
	.byte	30,21,213,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19201
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVR13CON',0,21,218,10,3
	.word	34698
	.byte	30,21,221,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19364
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVR33CON',0,21,226,10,3
	.word	34764
	.byte	30,21,229,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19527
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRADCSTAT',0,21,234,10,3
	.word	34830
	.byte	30,21,237,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19685
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRDVSTAT',0,21,242,10,3
	.word	34898
	.byte	30,21,245,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19850
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRMONCTRL',0,21,250,10,3
	.word	34965
	.byte	30,21,253,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20218
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVROVMON',0,21,130,11,3
	.word	35033
	.byte	30,21,133,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20397
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRRSTCON',0,21,138,11,3
	.word	35099
	.byte	30,21,141,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20662
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,21,146,11,3
	.word	35166
	.byte	30,21,149,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20815
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,21,154,11,3
	.word	35235
	.byte	30,21,157,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20971
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,21,162,11,3
	.word	35304
	.byte	30,21,165,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21133
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,21,170,11,3
	.word	35373
	.byte	30,21,173,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21276
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,21,178,11,3
	.word	35442
	.byte	30,21,181,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21441
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,21,186,11,3
	.word	35511
	.byte	30,21,189,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21586
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCTRL1',0,21,194,11,3
	.word	35580
	.byte	30,21,197,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21767
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCTRL2',0,21,202,11,3
	.word	35648
	.byte	30,21,205,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21941
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCTRL3',0,21,210,11,3
	.word	35716
	.byte	30,21,213,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22101
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSDCTRL4',0,21,218,11,3
	.word	35784
	.byte	30,21,221,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22245
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRSTAT',0,21,226,11,3
	.word	35852
	.byte	30,21,229,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22519
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRTRIM',0,21,234,11,3
	.word	35917
	.byte	30,21,237,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22674
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EVRUVMON',0,21,242,11,3
	.word	35982
	.byte	30,21,245,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22853
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_EXTCON',0,21,250,11,3
	.word	36048
	.byte	30,21,253,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23071
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_FDR',0,21,130,12,3
	.word	36112
	.byte	30,21,133,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23234
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_FMR',0,21,138,12,3
	.word	36173
	.byte	30,21,141,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23570
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_ID',0,21,146,12,3
	.word	36234
	.byte	30,21,149,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23677
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_IGCR',0,21,154,12,3
	.word	36294
	.byte	30,21,157,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24129
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_IN',0,21,162,12,3
	.word	36356
	.byte	30,21,165,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24228
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_IOCR',0,21,170,12,3
	.word	36416
	.byte	30,21,173,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24378
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_LBISTCTRL0',0,21,178,12,3
	.word	36478
	.byte	30,21,181,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24527
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_LBISTCTRL1',0,21,186,12,3
	.word	36546
	.byte	30,21,189,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24688
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_LBISTCTRL2',0,21,194,12,3
	.word	36614
	.byte	30,21,197,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24818
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_LCLCON',0,21,202,12,3
	.word	36682
	.byte	30,21,205,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24950
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_LCLTEST',0,21,210,12,3
	.word	36746
	.byte	30,21,213,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25065
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_MANID',0,21,218,12,3
	.word	36811
	.byte	30,21,221,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25176
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_OMR',0,21,226,12,3
	.word	36874
	.byte	30,21,229,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25334
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_OSCCON',0,21,234,12,3
	.word	36935
	.byte	30,21,237,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25746
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_OUT',0,21,242,12,3
	.word	36999
	.byte	30,21,245,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25847
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_OVCCON',0,21,250,12,3
	.word	37060
	.byte	30,21,253,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26114
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_OVCENABLE',0,21,130,13,3
	.word	37124
	.byte	30,21,133,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26250
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PDISC',0,21,138,13,3
	.word	37191
	.byte	30,21,141,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26361
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PDR',0,21,146,13,3
	.word	37254
	.byte	30,21,149,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26494
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PDRR',0,21,154,13,3
	.word	37315
	.byte	30,21,157,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26697
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLCON0',0,21,162,13,3
	.word	37377
	.byte	30,21,165,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27053
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLCON1',0,21,170,13,3
	.word	37442
	.byte	30,21,173,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27231
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLCON2',0,21,178,13,3
	.word	37507
	.byte	30,21,181,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27331
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLERAYCON0',0,21,186,13,3
	.word	37572
	.byte	30,21,189,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27701
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLERAYCON1',0,21,194,13,3
	.word	37641
	.byte	30,21,197,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27887
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLERAYSTAT',0,21,202,13,3
	.word	37710
	.byte	30,21,205,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28085
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PLLSTAT',0,21,210,13,3
	.word	37779
	.byte	30,21,213,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28318
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PMCSR',0,21,218,13,3
	.word	37844
	.byte	30,21,221,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28470
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PMSWCR0',0,21,226,13,3
	.word	37907
	.byte	30,21,229,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29018
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PMSWCR1',0,21,234,13,3
	.word	37972
	.byte	30,21,237,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29263
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PMSWSTAT',0,21,242,13,3
	.word	38037
	.byte	30,21,245,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29724
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_PMSWSTATCLR',0,21,250,13,3
	.word	38103
	.byte	30,21,253,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30203
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_RSTCON',0,21,130,14,3
	.word	38172
	.byte	30,21,133,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29994
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_RSTCON2',0,21,138,14,3
	.word	38236
	.byte	30,21,141,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30414
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_RSTSTAT',0,21,146,14,3
	.word	38301
	.byte	30,21,149,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30846
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_SAFECON',0,21,154,14,3
	.word	38366
	.byte	30,21,157,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30942
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_STSTAT',0,21,162,14,3
	.word	38431
	.byte	30,21,165,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31208
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_SWRSTCON',0,21,170,14,3
	.word	38495
	.byte	30,21,173,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31333
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_SYSCON',0,21,178,14,3
	.word	38561
	.byte	30,21,181,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31530
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPCLR',0,21,186,14,3
	.word	38625
	.byte	30,21,189,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31683
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPDIS',0,21,194,14,3
	.word	38690
	.byte	30,21,197,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31836
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPSET',0,21,202,14,3
	.word	38755
	.byte	30,21,205,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31989
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_TRAPSTAT',0,21,210,14,3
	.word	38820
	.byte	30,21,213,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32160
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTCPU_CON0',0,21,218,14,3
	.word	38886
	.byte	30,21,221,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32290
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTCPU_CON1',0,21,226,14,3
	.word	38955
	.byte	30,21,229,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32528
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTCPU_SR',0,21,234,14,3
	.word	39024
	.byte	30,21,237,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32751
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTS_CON0',0,21,242,14,3
	.word	39091
	.byte	30,21,245,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32877
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTS_CON1',0,21,250,14,3
	.word	39158
	.byte	30,21,253,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33129
	.byte	4,2,35,0,0,16
	.byte	'Ifx_SCU_WDTS_SR',0,21,130,15,3
	.word	39225
	.byte	17
	.byte	'_Ifx_SCU_WDTCPU',0,21,141,15,25,12,9
	.byte	'CON0',0
	.word	38886
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	38955
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	39024
	.byte	4,2,35,8,0,33
	.word	39290
	.byte	16
	.byte	'Ifx_SCU_WDTCPU',0,21,146,15,3
	.word	39353
	.byte	17
	.byte	'_Ifx_SCU_WDTS',0,21,149,15,25,12,9
	.byte	'CON0',0
	.word	39091
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	39158
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	39225
	.byte	4,2,35,8,0,33
	.word	39382
	.byte	16
	.byte	'Ifx_SCU_WDTS',0,21,154,15,3
	.word	39443
	.byte	17
	.byte	'_Ifx_GTM_ACCEN0_Bits',0,22,49,16,4,34
	.byte	'EN0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN22',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'EN23',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'EN24',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'EN25',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'EN26',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'EN27',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'EN28',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'EN29',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'EN30',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'EN31',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ACCEN0_Bits',0,22,83,3
	.word	39470
	.byte	17
	.byte	'_Ifx_GTM_ACCEN1_Bits',0,22,86,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	32,0,2,35,0,0,16
	.byte	'Ifx_GTM_ACCEN1_Bits',0,22,89,3
	.word	40027
	.byte	17
	.byte	'_Ifx_GTM_ADCTRIG0OUT0_Bits',0,22,92,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG0OUT0_Bits',0,22,102,3
	.word	40104
	.byte	17
	.byte	'_Ifx_GTM_ADCTRIG0OUT1_Bits',0,22,105,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG0OUT1_Bits',0,22,109,3
	.word	40299
	.byte	17
	.byte	'_Ifx_GTM_ADCTRIG1OUT0_Bits',0,22,112,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG1OUT0_Bits',0,22,122,3
	.word	40404
	.byte	17
	.byte	'_Ifx_GTM_ADCTRIG1OUT1_Bits',0,22,125,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG1OUT1_Bits',0,22,129,1,3
	.word	40599
	.byte	17
	.byte	'_Ifx_GTM_AEI_ADDR_XPT_Bits',0,22,132,1,16,4,34
	.byte	'TO_ADDR',0,4
	.word	32144
	.byte	20,12,2,35,0,34
	.byte	'TO_W1R0',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	11,0,2,35,0,0,16
	.byte	'Ifx_GTM_AEI_ADDR_XPT_Bits',0,22,137,1,3
	.word	40705
	.byte	17
	.byte	'_Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,22,140,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,22,144,1,3
	.word	40835
	.byte	17
	.byte	'_Ifx_GTM_ARU_ARU_ACCESS_Bits',0,22,147,1,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'RREQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'WREQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'reserved_14',0,4
	.word	32144
	.byte	18,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_ARU_ACCESS_Bits',0,22,154,1,3
	.word	40947
	.byte	17
	.byte	'_Ifx_GTM_ARU_DATA_H_Bits',0,22,157,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DATA_H_Bits',0,22,161,1,3
	.word	41113
	.byte	17
	.byte	'_Ifx_GTM_ARU_DATA_L_Bits',0,22,164,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DATA_L_Bits',0,22,168,1,3
	.word	41217
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,22,171,1,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,22,175,1,3
	.word	41321
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,22,178,1,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,22,182,1,3
	.word	41434
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,22,185,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,22,189,1,3
	.word	41547
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,22,192,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,22,196,1,3
	.word	41661
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,22,199,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,22,203,1,3
	.word	41775
	.byte	17
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,22,206,1,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	29,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,22,210,1,3
	.word	41889
	.byte	17
	.byte	'_Ifx_GTM_ARU_IRQ_EN_Bits',0,22,213,1,16,4,34
	.byte	'NEW_DATA0_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'NEW_DATA1_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ACC_ACK_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_EN_Bits',0,22,219,1,3
	.word	42003
	.byte	17
	.byte	'_Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,22,222,1,16,4,34
	.byte	'TRG_NEW_DATA0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_NEW_DATA',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_ACC_ACK',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,22,228,1,3
	.word	42172
	.byte	17
	.byte	'_Ifx_GTM_ARU_IRQ_MODE_Bits',0,22,231,1,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_MODE_Bits',0,22,235,1,3
	.word	42341
	.byte	17
	.byte	'_Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,22,238,1,16,4,34
	.byte	'NEW_DATA0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'NEW_DATA1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ACC_ACK',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,22,244,1,3
	.word	42452
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,22,247,1,16,4,34
	.byte	'ACT_TB',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'TB_TRIG',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TBU_SEL',0,4
	.word	32144
	.byte	2,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,22,253,1,3
	.word	42608
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,22,128,2,16,4,34
	.byte	'ENDIS_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,22,139,2,3
	.word	42762
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,22,142,2,16,4,34
	.byte	'ENDIS_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,22,153,2,3
	.word	43052
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,22,156,2,16,4,34
	.byte	'FUPD_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'FUPD_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'FUPD_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'FUPD_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'FUPD_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'FUPD_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'FUPD_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'FUPD_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'RSTCN0_CH0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'RSTCN0_CH1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'RSTCN0_CH2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'RSTCN0_CH3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'RSTCN0_CH4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'RSTCN0_CH5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'RSTCN0_CH6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'RSTCN0_CH7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,22,174,2,3
	.word	43342
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,22,177,2,16,4,34
	.byte	'HOST_TRIG',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	7,24,2,35,0,34
	.byte	'RST_CH0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'RST_CH1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'RST_CH2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'RST_CH3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'RST_CH4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'RST_CH5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'RST_CH6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'RST_CH7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'UPEN_CTRL0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'UPEN_CTRL1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'UPEN_CTRL2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'UPEN_CTRL3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'UPEN_CTRL4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'UPEN_CTRL5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'UPEN_CTRL6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'UPEN_CTRL7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,22,197,2,3
	.word	43775
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,22,200,2,16,4,34
	.byte	'INT_TRIG0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'INT_TRIG1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'INT_TRIG2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'INT_TRIG3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'INT_TRIG4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'INT_TRIG5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'INT_TRIG6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'INT_TRIG7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,22,211,2,3
	.word	44225
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,22,214,2,16,4,34
	.byte	'OUTEN_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,22,225,2,3
	.word	44495
	.byte	17
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,22,228,2,16,4,34
	.byte	'OUTEN_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,22,239,2,3
	.word	44785
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_CM0_Bits',0,22,242,2,16,4,34
	.byte	'CM0',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CM0_Bits',0,22,246,2,3
	.word	45075
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_CM1_Bits',0,22,249,2,16,4,34
	.byte	'CM1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CM1_Bits',0,22,253,2,3
	.word	45180
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_CN0_Bits',0,22,128,3,16,4,34
	.byte	'CN0',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CN0_Bits',0,22,132,3,3
	.word	45285
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_CTRL_Bits',0,22,135,3,16,4,34
	.byte	'MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'TB12_SEL',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACB',0,4
	.word	32144
	.byte	5,23,2,35,0,34
	.byte	'CMP_CTRL',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'CLK_SRCCLK_SRC_SR',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'reserved_15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'WR_REQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'reserved_17',0,4
	.word	32144
	.byte	3,12,2,35,0,34
	.byte	'RST_CCU0',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'TRIGOUT',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'SLA',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'OSM',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'ABM',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CTRL_Bits',0,22,155,3,3
	.word	45390
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,22,158,3,16,4,34
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,22,163,3,3
	.word	45808
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,22,166,3,16,4,34
	.byte	'TRG_CCU0TC',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_CCU1TC',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,22,171,3,3
	.word	45953
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,22,174,3,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,22,178,3,3
	.word	46102
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,22,181,3,16,4,34
	.byte	'CCU0TC',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CCU1TC',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,22,186,3,3
	.word	46221
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_RDADDR_Bits',0,22,189,3,16,4,34
	.byte	'RDADDR0',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	7,16,2,35,0,34
	.byte	'RDADDR1',0,4
	.word	32144
	.byte	9,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	7,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_RDADDR_Bits',0,22,195,3,3
	.word	46360
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SOMC_Bits',0,22,198,3,16,4,34
	.byte	'MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'TB12_SEL',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACB10',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ACB42',0,4
	.word	32144
	.byte	3,23,2,35,0,34
	.byte	'CMP_CTRL',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'WR_REQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'reserved_17',0,4
	.word	32144
	.byte	7,8,2,35,0,34
	.byte	'TRIGOUT',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'SLA',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'reserved_26',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'ABM',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMC_Bits',0,22,216,3,3
	.word	46516
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SOMI_Bits',0,22,219,3,16,4,34
	.byte	'MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACB0',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	6,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	20,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMI_Bits',0,22,228,3,3
	.word	46889
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SOMP_Bits',0,22,231,3,16,4,34
	.byte	'MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ADL',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	5,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'CLK_SRC_SR',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'reserved_15',0,4
	.word	32144
	.byte	5,12,2,35,0,34
	.byte	'RST_CCU0',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'TRIGOUT',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'OSM',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMP_Bits',0,22,247,3,3
	.word	47089
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SOMS_Bits',0,22,250,3,16,4,34
	.byte	'MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACB0',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	6,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'CLK_SRC',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'reserved_15',0,4
	.word	32144
	.byte	11,6,2,35,0,34
	.byte	'OSM',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMS_Bits',0,22,134,4,3
	.word	47433
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SR0_Bits',0,22,137,4,16,4,34
	.byte	'SR0',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SR0_Bits',0,22,141,4,3
	.word	47690
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_SR1_Bits',0,22,144,4,16,4,34
	.byte	'SR1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SR1_Bits',0,22,148,4,3
	.word	47795
	.byte	17
	.byte	'_Ifx_GTM_ATOM_CH_STAT_Bits',0,22,151,4,16,4,34
	.byte	'OL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	15,16,2,35,0,34
	.byte	'ACBI',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'DV',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'WRF',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'ACBO',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_STAT_Bits',0,22,161,4,3
	.word	47900
	.byte	17
	.byte	'_Ifx_GTM_BRC_EIRQ_EN_Bits',0,22,164,4,16,4,34
	.byte	'DEST_ERR_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DID_EN0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'DID_EN1',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'DID_EN2',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'DID_EN3',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'DID_EN4',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DID_EN5',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'DID_EN6',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'DID_EN7',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DID_EN8',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'DID_EN9',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'DID_EN10',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'DID_EN11',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_EIRQ_EN_Bits',0,22,180,4,3
	.word	48112
	.byte	17
	.byte	'_Ifx_GTM_BRC_IRQ_EN_Bits',0,22,183,4,16,4,34
	.byte	'DEST_ERR_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DID_EN0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'DID_EN1',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'DID_EN2',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'DID_EN3',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'DID_EN4',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DID_EN5',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'DID_EN6',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'DID_EN7',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DID_EN8',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'DID_EN9',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'DID_EN10',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'DID_EN11',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_EN_Bits',0,22,199,4,3
	.word	48455
	.byte	17
	.byte	'_Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,22,202,4,16,4,34
	.byte	'TRG_DEST_ERR',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_DID0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_DID1',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_DID2',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG_DID3',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG_DID4',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TRG_DID5',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TRG_DID6',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TRG_DID7',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TRG_DID8',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TRG_DID9',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TRG_DID10',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TRG_DID11',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,22,218,4,3
	.word	48796
	.byte	17
	.byte	'_Ifx_GTM_BRC_IRQ_MODE_Bits',0,22,221,4,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_MODE_Bits',0,22,225,4,3
	.word	49160
	.byte	17
	.byte	'_Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,22,228,4,16,4,34
	.byte	'DEST_ERR',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DID0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'DID1',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'DID2',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'DID3',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'DID4',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DID5',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'DID6',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'DID7',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DID8',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'DID9',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'DID10',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'DID11',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,22,244,4,3
	.word	49271
	.byte	17
	.byte	'_Ifx_GTM_BRC_RST_Bits',0,22,247,4,16,4,34
	.byte	'RST',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_RST_Bits',0,22,251,4,3
	.word	49581
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC0_ADDR_Bits',0,22,254,4,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC0_ADDR_Bits',0,22,132,5,3
	.word	49677
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC0_DEST_Bits',0,22,135,5,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC0_DEST_Bits',0,22,161,5,3
	.word	49829
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC10_ADDR_Bits',0,22,164,5,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC10_ADDR_Bits',0,22,170,5,3
	.word	50398
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC10_DEST_Bits',0,22,173,5,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC10_DEST_Bits',0,22,199,5,3
	.word	50552
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC11_ADDR_Bits',0,22,202,5,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC11_ADDR_Bits',0,22,208,5,3
	.word	51123
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC11_DEST_Bits',0,22,211,5,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC11_DEST_Bits',0,22,237,5,3
	.word	51277
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC1_ADDR_Bits',0,22,240,5,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC1_ADDR_Bits',0,22,246,5,3
	.word	51848
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC1_DEST_Bits',0,22,249,5,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC1_DEST_Bits',0,22,147,6,3
	.word	52000
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC2_ADDR_Bits',0,22,150,6,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC2_ADDR_Bits',0,22,156,6,3
	.word	52569
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC2_DEST_Bits',0,22,159,6,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC2_DEST_Bits',0,22,185,6,3
	.word	52721
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC3_ADDR_Bits',0,22,188,6,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC3_ADDR_Bits',0,22,194,6,3
	.word	53290
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC3_DEST_Bits',0,22,197,6,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC3_DEST_Bits',0,22,223,6,3
	.word	53442
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC4_ADDR_Bits',0,22,226,6,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC4_ADDR_Bits',0,22,232,6,3
	.word	54011
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC4_DEST_Bits',0,22,235,6,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC4_DEST_Bits',0,22,133,7,3
	.word	54163
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC5_ADDR_Bits',0,22,136,7,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC5_ADDR_Bits',0,22,142,7,3
	.word	54732
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC5_DEST_Bits',0,22,145,7,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC5_DEST_Bits',0,22,171,7,3
	.word	54884
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC6_ADDR_Bits',0,22,174,7,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC6_ADDR_Bits',0,22,180,7,3
	.word	55453
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC6_DEST_Bits',0,22,183,7,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC6_DEST_Bits',0,22,209,7,3
	.word	55605
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC7_ADDR_Bits',0,22,212,7,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC7_ADDR_Bits',0,22,218,7,3
	.word	56174
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC7_DEST_Bits',0,22,221,7,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC7_DEST_Bits',0,22,247,7,3
	.word	56326
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC8_ADDR_Bits',0,22,250,7,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC8_ADDR_Bits',0,22,128,8,3
	.word	56895
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC8_DEST_Bits',0,22,131,8,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC8_DEST_Bits',0,22,157,8,3
	.word	57047
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC9_ADDR_Bits',0,22,160,8,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'BRC_MODE',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC9_ADDR_Bits',0,22,166,8,3
	.word	57616
	.byte	17
	.byte	'_Ifx_GTM_BRC_SRC9_DEST_Bits',0,22,169,8,16,4,34
	.byte	'EN_DEST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'EN_DEST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'EN_DEST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EN_DEST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'EN_DEST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'EN_DEST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'EN_DEST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'EN_DEST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'EN_DEST8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'EN_DEST9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'EN_DEST10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'EN_DEST11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'EN_DEST12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'EN_DEST13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'EN_DEST14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EN_DEST15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'EN_DEST16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'EN_DEST17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'EN_DEST18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'EN_DEST19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'EN_DEST20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'EN_DEST21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'EN_TRASHBIN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC9_DEST_Bits',0,22,195,8,3
	.word	57768
	.byte	17
	.byte	'_Ifx_GTM_BRIDGE_MODE_Bits',0,22,198,8,16,4,34
	.byte	'BRG_MODE',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MSK_WR_RSP',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	6,24,2,35,0,34
	.byte	'MODE_UP_PGR',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'BUFF_OVL',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'SYNC_INPUT_REG',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'BRG_RST',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'reserved_17',0,4
	.word	32144
	.byte	7,8,2,35,0,34
	.byte	'BUFF_DPT',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_MODE_Bits',0,22,211,8,3
	.word	58337
	.byte	17
	.byte	'_Ifx_GTM_BRIDGE_PTR1_Bits',0,22,214,8,16,4,34
	.byte	'NEW_TRAN_PTR',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'FIRST_RSP_PTR',0,4
	.word	32144
	.byte	5,22,2,35,0,34
	.byte	'TRAN_IN_PGR',0,4
	.word	32144
	.byte	5,17,2,35,0,34
	.byte	'ABT_TRAN_PGR',0,4
	.word	32144
	.byte	5,12,2,35,0,34
	.byte	'FBC',0,4
	.word	32144
	.byte	6,6,2,35,0,34
	.byte	'RSP_TRAN_RDY',0,4
	.word	32144
	.byte	6,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_PTR1_Bits',0,22,222,8,3
	.word	58645
	.byte	17
	.byte	'_Ifx_GTM_BRIDGE_PTR2_Bits',0,22,225,8,16,4,34
	.byte	'TRAN_IN_PGR2',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_PTR2_Bits',0,22,229,8,3
	.word	58847
	.byte	17
	.byte	'_Ifx_GTM_CLC_Bits',0,22,232,8,16,4,34
	.byte	'DISR',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DISS',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'EDIS',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_CLC_Bits',0,22,239,8,3
	.word	58960
	.byte	17
	.byte	'_Ifx_GTM_CMP_EIRQ_EN_Bits',0,22,242,8,16,4,34
	.byte	'ABWC0_EN_EIRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ABWC1_EN_EIRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ABWC2_EN_EIRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ABWC3_EN_EIRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ABWC4_EN_EIRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ABWC5_EN_EIRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ABWC6_EN_EIRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ABWC7_EN_EIRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ABWC8_EN_EIRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ABWC9_EN_EIRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ABWC10_EN_EIRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ABWC11_EN_EIRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TBWC0_EN_EIRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TBWC1_EN_EIRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TBWC2_EN_EIRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TBWC3_EN_EIRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TBWC4_EN_EIRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TBWC5_EN_EIRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TBWC6_EN_EIRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TBWC7_EN_EIRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TBWC8_EN_EIRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TBWC9_EN_EIRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TBWC10_EN_EIRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TBWC11_EN_EIRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_EIRQ_EN_Bits',0,22,141,9,3
	.word	59103
	.byte	17
	.byte	'_Ifx_GTM_CMP_EN_Bits',0,22,144,9,16,4,34
	.byte	'ABWC0_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ABWC1_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ABWC2_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ABWC3_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ABWC4_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ABWC5_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ABWC6_EN',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ABWC7_EN',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ABWC8_EN',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ABWC9_EN',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ABWC10_EN',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ABWC11_EN',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TBWC0_EN',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TBWC1_EN',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TBWC2_EN',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TBWC3_EN',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TBWC4_EN',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TBWC5_EN',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TBWC6_EN',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TBWC7_EN',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TBWC8_EN',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TBWC9_EN',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TBWC10_EN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TBWC11_EN',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_EN_Bits',0,22,171,9,3
	.word	59797
	.byte	17
	.byte	'_Ifx_GTM_CMP_IRQ_EN_Bits',0,22,174,9,16,4,34
	.byte	'ABWC0_EN_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ABWC1_EN_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ABWC2_EN_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ABWC3_EN_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ABWC4_EN_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ABWC5_EN_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ABWC6_EN_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ABWC7_EN_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ABWC8_EN_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ABWC9_EN_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ABWC10_EN_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ABWC11_EN_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TBWC0_EN_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TBWC1_EN_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TBWC2_EN_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TBWC3_EN_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TBWC4_EN_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TBWC5_EN_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TBWC6_EN_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TBWC7_EN_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TBWC8_EN_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TBWC9_EN_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TBWC10_EN_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TBWC11_EN_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_EN_Bits',0,22,201,9,3
	.word	60361
	.byte	17
	.byte	'_Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,22,204,9,16,4,34
	.byte	'TRG_ABWC0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_ABWC1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_ABWC2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_ABWC3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG_ABWC4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG_ABWC5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TRG_ABWC6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TRG_ABWC7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TRG_ABWC8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TRG_ABWC9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TRG_ABWC10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TRG_ABWC11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TRG_TBWC0',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TRG_TBWC1',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TRG_TBWC2',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TRG_TBWC3',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TRG_TBWC4',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TRG_TBWC5',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TRG_TBWC6',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TRG_TBWC7',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TRG_TBWC8',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TRG_TBWC9',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TRG_TBWC10',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TRG_TBWC11',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,22,231,9,3
	.word	61029
	.byte	17
	.byte	'_Ifx_GTM_CMP_IRQ_MODE_Bits',0,22,234,9,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_MODE_Bits',0,22,238,9,3
	.word	61635
	.byte	17
	.byte	'_Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,22,241,9,16,4,34
	.byte	'ABWC0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ABWC1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ABWC2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ABWC3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ABWC4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ABWC5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ABWC6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ABWC7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ABWC8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ABWC9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ABWC10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ABWC11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TBWC0',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TBWC1',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TBWC2',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TBWC3',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TBWC4',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TBWC5',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TBWC6',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TBWC7',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TBWC8',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TBWC9',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TBWC10',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TBWC11',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,22,140,10,3
	.word	61746
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,22,143,10,16,4,34
	.byte	'CLK_CNT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,22,147,10,3
	.word	62254
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,22,150,10,16,4,34
	.byte	'CLK_CNT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'CLK6_SEL',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	7,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,22,155,10,3
	.word	62371
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,22,158,10,16,4,34
	.byte	'CLK_CNT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'CLK7_SEL',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	7,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,22,163,10,3
	.word	62506
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK_EN_Bits',0,22,166,10,16,4,34
	.byte	'EN_CLK0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'EN_CLK1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'EN_CLK2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'EN_CLK3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'EN_CLK4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'EN_CLK5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'EN_CLK6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'EN_CLK7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'EN_ECLK0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'EN_ECLK1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'EN_ECLK2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'EN_FXCLK',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_EN_Bits',0,22,181,10,3
	.word	62641
	.byte	17
	.byte	'_Ifx_GTM_CMU_ECLK_DEN_Bits',0,22,184,10,16,4,34
	.byte	'ECLK_DEN',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_ECLK_DEN_Bits',0,22,188,10,3
	.word	62961
	.byte	17
	.byte	'_Ifx_GTM_CMU_ECLK_NUM_Bits',0,22,191,10,16,4,34
	.byte	'ECLK_NUM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_ECLK_NUM_Bits',0,22,195,10,3
	.word	63073
	.byte	17
	.byte	'_Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,22,198,10,16,4,34
	.byte	'FXCLK_SEL',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,22,202,10,3
	.word	63185
	.byte	17
	.byte	'_Ifx_GTM_CMU_GCLK_DEN_Bits',0,22,205,10,16,4,34
	.byte	'GCLK_DEN',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_GCLK_DEN_Bits',0,22,209,10,3
	.word	63301
	.byte	17
	.byte	'_Ifx_GTM_CMU_GCLK_NUM_Bits',0,22,212,10,16,4,34
	.byte	'GCLK_NUM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_GCLK_NUM_Bits',0,22,216,10,3
	.word	63413
	.byte	17
	.byte	'_Ifx_GTM_CTRL_Bits',0,22,219,10,16,4,34
	.byte	'RF_PROT',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TO_MODE',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'TO_VAL',0,4
	.word	32144
	.byte	5,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_GTM_CTRL_Bits',0,22,226,10,3
	.word	63525
	.byte	17
	.byte	'_Ifx_GTM_DATAIN_Bits',0,22,229,10,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	32,0,2,35,0,0,16
	.byte	'Ifx_GTM_DATAIN_Bits',0,22,232,10,3
	.word	63678
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ACB_Bits',0,22,235,10,16,4,34
	.byte	'ACB_0',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'ACB_1',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'ACB_2',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'ACB_3',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ACB_Bits',0,22,245,10,3
	.word	63751
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ACT_STA_Bits',0,22,248,10,16,4,34
	.byte	'ACT_Ni',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ACT_STA_Bits',0,22,252,10,3
	.word	63971
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,22,255,10,16,4,34
	.byte	'ADD_IN_CAL_1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,22,131,11,3
	.word	64081
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,22,134,11,16,4,34
	.byte	'ADD_IN_CAL_2',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,22,138,11,3
	.word	64205
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,22,141,11,16,4,34
	.byte	'ADD_IN_LD_1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,22,145,11,3
	.word	64329
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,22,148,11,16,4,34
	.byte	'ADD_IN_LD_2',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,22,152,11,3
	.word	64450
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ADT_S_Bits',0,22,155,11,16,4,34
	.byte	'PD_S',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'NS',0,4
	.word	32144
	.byte	6,10,2,35,0,34
	.byte	'reserved_22',0,4
	.word	32144
	.byte	10,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADT_S_Bits',0,22,160,11,3
	.word	64571
	.byte	17
	.byte	'_Ifx_GTM_DPLL_AOSV_2_Bits',0,22,163,11,16,4,34
	.byte	'AOSV_2A',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'AOSV_2B',0,4
	.word	32144
	.byte	8,16,2,35,0,34
	.byte	'AOSV_2C',0,4
	.word	32144
	.byte	8,8,2,35,0,34
	.byte	'AOSV_2D',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_AOSV_2_Bits',0,22,169,11,3
	.word	64689
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APS_1C3_Bits',0,22,172,11,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'APS_1C3',0,4
	.word	32144
	.byte	6,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS_1C3_Bits',0,22,177,11,3
	.word	64832
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APS_Bits',0,22,180,11,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'WAPS',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'APS',0,4
	.word	32144
	.byte	6,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'WAPS_1C2',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'APS_1C2',0,4
	.word	32144
	.byte	6,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS_Bits',0,22,189,11,3
	.word	64964
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_Bits',0,22,192,11,16,4,34
	.byte	'APS_1C2_EXT',0,4
	.word	32144
	.byte	6,26,2,35,0,34
	.byte	'APS_1C2_STATUS',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'reserved_7',0,4
	.word	32144
	.byte	7,18,2,35,0,34
	.byte	'APS_1C2_OLD',0,4
	.word	32144
	.byte	6,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS_SYNC_Bits',0,22,199,11,3
	.word	65162
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APT_2C_Bits',0,22,202,11,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'APT_2C',0,4
	.word	32144
	.byte	10,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	20,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT_2C_Bits',0,22,207,11,3
	.word	65350
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APT_Bits',0,22,210,11,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'WAPT',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'APT',0,4
	.word	32144
	.byte	10,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'WAPT_2B',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'APT_2B',0,4
	.word	32144
	.byte	10,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT_Bits',0,22,219,11,3
	.word	65480
	.byte	17
	.byte	'_Ifx_GTM_DPLL_APT_SYNC_Bits',0,22,222,11,16,4,34
	.byte	'APT_2B_EXT',0,4
	.word	32144
	.byte	6,26,2,35,0,34
	.byte	'APT_2B_STATUS',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'reserved_7',0,4
	.word	32144
	.byte	7,18,2,35,0,34
	.byte	'APT_2B_OLD',0,4
	.word	32144
	.byte	10,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT_SYNC_Bits',0,22,229,11,3
	.word	65677
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CDT_SX_Bits',0,22,232,11,16,4,34
	.byte	'CDT_SX',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_SX_Bits',0,22,236,11,3
	.word	65862
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,22,239,11,16,4,34
	.byte	'CDT_SX_NOM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,22,243,11,3
	.word	65970
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CDT_TX_Bits',0,22,246,11,16,4,34
	.byte	'CDT_TX',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_TX_Bits',0,22,250,11,3
	.word	66090
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,22,253,11,16,4,34
	.byte	'CDT_TX_NOM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,22,129,12,3
	.word	66198
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CNT_NUM1_Bits',0,22,132,12,16,4,34
	.byte	'CNT_NUM_1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CNT_NUM1_Bits',0,22,136,12,3
	.word	66318
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CNT_NUM2_Bits',0,22,139,12,16,4,34
	.byte	'CNT_NUM_2',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CNT_NUM2_Bits',0,22,143,12,3
	.word	66433
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,22,146,12,16,4,34
	.byte	'DMO',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	2,29,2,35,0,34
	.byte	'COA',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'PIT',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'SGE1',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DLM1',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'PCM1',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SGE2',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DLM2',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'PCM2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'SYN_NS',0,4
	.word	32144
	.byte	21,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,22,159,12,3
	.word	66548
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_0_Bits',0,22,162,12,16,4,34
	.byte	'MLT',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'IFP',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'SNU',0,4
	.word	32144
	.byte	5,16,2,35,0,34
	.byte	'TNU',0,4
	.word	32144
	.byte	9,7,2,35,0,34
	.byte	'AMS',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'AMT',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'IDS',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'IDT',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'SEN',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TEN',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'RMO',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0_Bits',0,22,175,12,3
	.word	66822
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,22,178,12,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'IFP',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	14,7,2,35,0,34
	.byte	'AMS',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'reserved_26',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'IDS',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	3,1,2,35,0,34
	.byte	'RMO',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,22,188,12,3
	.word	67054
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,22,191,12,16,4,34
	.byte	'MLT',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'IFP',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	15,6,2,35,0,34
	.byte	'AMT',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'IDS',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'IDT',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	2,1,2,35,0,34
	.byte	'RMO',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,22,201,12,3
	.word	67298
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_1_Bits',0,22,204,12,16,4,34
	.byte	'DMO',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DEN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'IDDS',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'COA',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'PIT',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'SGE1',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DLM1',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'PCM1',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SGE2',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DLM2',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'PCM2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'SYN_NS',0,4
	.word	32144
	.byte	5,16,2,35,0,34
	.byte	'SYN_NT',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'LCD',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'SWR',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'SYSF',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TS0_HRS',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'TS0_HRT',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'SMC',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'SSL',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'TSL',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_1_Bits',0,22,228,12,3
	.word	67531
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,22,231,12,16,4,34
	.byte	'DMO',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	2,29,2,35,0,34
	.byte	'COA',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'PIT',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'SGE1',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DLM1',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'PCM1',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,22,241,12,3
	.word	67958
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_2_Bits',0,22,244,12,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'AEN0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'AEN1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'AEN2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'AEN3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'AEN4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'AEN5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'AEN6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'AEN7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'WAD0',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'WAD1',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'WAD2',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'WAD3',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'WAD4',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'WAD5',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'WAD6',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'WAD7',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_2_Bits',0,22,136,13,3
	.word	68192
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_3_Bits',0,22,139,13,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'AEN8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'AEN9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'AEN10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'AEN11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'AEN12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'AEN13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'AEN14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'AEN15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'WAD8',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'WAD9',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'WAD10',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'WAD11',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'WAD12',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'WAD13',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'WAD14',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'WAD15',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_3_Bits',0,22,159,13,3
	.word	68560
	.byte	17
	.byte	'_Ifx_GTM_DPLL_CTRL_4_Bits',0,22,162,13,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'AEN16',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'AEN17',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'AEN18',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'AEN19',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'AEN20',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'AEN21',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'AEN22',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'AEN23',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'WAD16',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'WAD17',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'WAD18',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'WAD19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'WAD20',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'WAD21',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'WAD22',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'WAD23',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_4_Bits',0,22,182,13,3
	.word	68940
	.byte	17
	.byte	'_Ifx_GTM_DPLL_DLA_Bits',0,22,185,13,16,4,34
	.byte	'DLA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DLA_Bits',0,22,189,13,3
	.word	69324
	.byte	17
	.byte	'_Ifx_GTM_DPLL_DT_S_ACT_Bits',0,22,192,13,16,4,34
	.byte	'DT_S_ACT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_S_ACT_Bits',0,22,196,13,3
	.word	69423
	.byte	17
	.byte	'_Ifx_GTM_DPLL_DT_S_Bits',0,22,199,13,16,4,34
	.byte	'DT_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_S_Bits',0,22,203,13,3
	.word	69537
	.byte	17
	.byte	'_Ifx_GTM_DPLL_DT_T_ACT_Bits',0,22,206,13,16,4,34
	.byte	'DT_T_ACT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_T_ACT_Bits',0,22,210,13,3
	.word	69639
	.byte	17
	.byte	'_Ifx_GTM_DPLL_DTA_Bits',0,22,213,13,16,4,34
	.byte	'DTA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DTA_Bits',0,22,217,13,3
	.word	69753
	.byte	17
	.byte	'_Ifx_GTM_DPLL_EDT_S_Bits',0,22,221,13,16,4,34
	.byte	'EDT_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EDT_S_Bits',0,22,225,13,3
	.word	69852
	.byte	17
	.byte	'_Ifx_GTM_DPLL_EDT_T_Bits',0,22,229,13,16,4,34
	.byte	'EDT_T',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EDT_T_Bits',0,22,233,13,3
	.word	69957
	.byte	17
	.byte	'_Ifx_GTM_DPLL_EIRQ_EN_Bits',0,22,236,13,16,4,34
	.byte	'PDI_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'PEI_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TINI_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TAXI_EIRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SISI_EIRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TISI_EIRQ_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MSI_EIRQ_EN',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MTI_EIRQ_EN',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SASI_EIRQ_EN',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TASI_EIRQ_EN',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'PWI_EIRQ_EN',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'W2I_EIRQ_EN',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'W1I_EIRQ_EN',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'GL1I_EIRQ_EN',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'LL1I_EIRQ_EN',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EI_EIRQ_EN',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'GL2I_EIRQ_EN',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'LL2I_EIRQ_EN',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TE0I_EIRQ_EN',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TE1I_EIRQ_EN',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TE2I_EIRQ_EN',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TE3I_EIRQ_EN',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TE4I_EIRQ_EN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'CDTI_EIRQ_EN',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'CDSI_EIRQ_EN',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TORI',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'SORI',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'DCGI',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EIRQ_EN_Bits',0,22,139,14,3
	.word	70062
	.byte	17
	.byte	'_Ifx_GTM_DPLL_FTV_S_Bits',0,22,142,14,16,4,34
	.byte	'STATE_FT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_FTV_S_Bits',0,22,146,14,3
	.word	70793
	.byte	17
	.byte	'_Ifx_GTM_DPLL_FTV_T_Bits',0,22,149,14,16,4,34
	.byte	'TRIGGER_FT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_FTV_T_Bits',0,22,153,14,3
	.word	70901
	.byte	17
	.byte	'_Ifx_GTM_DPLL_ID_PMTR_Bits',0,22,156,14,16,4,34
	.byte	'ID_PMTR_x',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ID_PMTR_Bits',0,22,160,14,3
	.word	71011
	.byte	17
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_Bits',0,22,163,14,16,4,34
	.byte	'INC_CNT1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_INC_CNT1_Bits',0,22,167,14,3
	.word	71123
	.byte	17
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_Bits',0,22,171,14,16,4,34
	.byte	'INC_CNT2',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_INC_CNT2_Bits',0,22,175,14,3
	.word	71237
	.byte	17
	.byte	'_Ifx_GTM_DPLL_IRQ_EN_Bits',0,22,178,14,16,4,34
	.byte	'PDI_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'PEI_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TINI_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TAXI_IRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SISI_IRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TISI_IRQ_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MSI_IRQ_EN',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MTI_IRQ_EN',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SASI_IRQ_EN',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TASI_IRQ_EN',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'PWI_IRQ_EN',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'W2I_IRQ_EN',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'W1I_IRQ_EN',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'GL1I_IRQ_EN',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'LL1I_IRQ_EN',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EI_IRQ_EN',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'GL2I_IRQ_EN',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'LL2I_IRQ_EN',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TE0I_IRQ_EN',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TE1I_IRQ_EN',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TE2I_IRQ_EN',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TE3I_IRQ_EN',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TE4I_IRQ_EN',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'CDTI_IRQ_EN',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'CDSI_IRQ_EN',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TORI',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'SORI',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'DCGI',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_EN_Bits',0,22,209,14,3
	.word	71351
	.byte	17
	.byte	'_Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,22,212,14,16,4,34
	.byte	'TRG_PDI',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_PEI',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_TINI',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_TAXI',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG_SISI',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG_TISI',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TRG_MSI',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TRG_MTI',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TRG_SASI',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TRG_TASI',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TRG_PWI',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TRG_W2I',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TRG_W1I',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TRG_GL1I',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TRG_LL1I',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TRG_EI',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TRG_GL2I',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TRG_LL2I',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TRG_TE0I',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TRG_TE1I',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TRG_TE2I',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TRG_TE3I',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TRG_TE4I',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TRG_CDTI',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'TRG_CDSI',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TRG_TORI',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'TRG_SORI',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'TRG_DCGI',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,22,243,14,3
	.word	72055
	.byte	17
	.byte	'_Ifx_GTM_DPLL_IRQ_MODE_Bits',0,22,246,14,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_MODE_Bits',0,22,250,14,3
	.word	72706
	.byte	17
	.byte	'_Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,22,253,14,16,4,34
	.byte	'PDI',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'PEI',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TINI',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TAXI',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SISI',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TISI',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MSI',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MTI',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SASI',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TASI',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'PWI',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'W2I',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'W1I',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'GL1I',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'LL1I',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'EI',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'GL2I',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'LL2I',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TE0I',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TE1I',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TE2I',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TE3I',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TE4I',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'CDTI',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'CDSI',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TORI',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'SORI',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'DCGI',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,22,156,15,3
	.word	72819
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MEDT_S_Bits',0,22,160,15,16,4,34
	.byte	'MEDT_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MEDT_S_Bits',0,22,164,15,3
	.word	73356
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MEDT_T_Bits',0,22,168,15,16,4,34
	.byte	'MEDT_T',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MEDT_T_Bits',0,22,172,15,3
	.word	73464
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MLS1_Bits',0,22,175,15,16,4,34
	.byte	'MLS1',0,4
	.word	32144
	.byte	18,14,2,35,0,34
	.byte	'reserved_18',0,4
	.word	32144
	.byte	14,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MLS1_Bits',0,22,179,15,3
	.word	73572
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MLS2_Bits',0,22,182,15,16,4,34
	.byte	'MLS2',0,4
	.word	32144
	.byte	18,14,2,35,0,34
	.byte	'reserved_18',0,4
	.word	32144
	.byte	14,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MLS2_Bits',0,22,186,15,3
	.word	73674
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MPVAL1_Bits',0,22,190,15,16,4,34
	.byte	'MPVAL1',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'SIX1',0,4
	.word	32144
	.byte	8,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MPVAL1_Bits',0,22,195,15,3
	.word	73776
	.byte	17
	.byte	'_Ifx_GTM_DPLL_MPVAL2_Bits',0,22,199,15,16,4,34
	.byte	'MPVAL2',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'SIX2',0,4
	.word	32144
	.byte	8,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MPVAL2_Bits',0,22,204,15,3
	.word	73900
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NA_Bits',0,22,207,15,16,4,34
	.byte	'DB',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'DW',0,4
	.word	32144
	.byte	10,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NA_Bits',0,22,212,15,3
	.word	74024
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_S_Bits',0,22,215,15,16,4,34
	.byte	'NMB_S',0,4
	.word	32144
	.byte	20,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S_Bits',0,22,219,15,3
	.word	74134
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,22,222,15,16,4,34
	.byte	'NMB_S_TAR',0,4
	.word	32144
	.byte	20,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,22,226,15,3
	.word	74239
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,22,229,15,16,4,34
	.byte	'NMB_S_TAR_OLD',0,4
	.word	32144
	.byte	20,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,22,233,15,3
	.word	74356
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_T_Bits',0,22,236,15,16,4,34
	.byte	'NMB_T',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T_Bits',0,22,240,15,3
	.word	74485
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,22,243,15,16,4,34
	.byte	'NMB_T_TAR',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,22,247,15,3
	.word	74590
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,22,250,15,16,4,34
	.byte	'NMB_T_TAR_OLD',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,22,254,15,3
	.word	74707
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NTI_CNT_Bits',0,22,129,16,16,4,34
	.byte	'NTI_CNT',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NTI_CNT_Bits',0,22,133,16,3
	.word	74836
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NUSC_Bits',0,22,136,16,16,4,34
	.byte	'NUSE',0,4
	.word	32144
	.byte	6,26,2,35,0,34
	.byte	'FSS',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'SYN_S',0,4
	.word	32144
	.byte	6,19,2,35,0,34
	.byte	'SYN_S_OLD',0,4
	.word	32144
	.byte	6,13,2,35,0,34
	.byte	'VSN',0,4
	.word	32144
	.byte	6,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	4,3,2,35,0,34
	.byte	'WNUS',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'WSYN',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'WVSN',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NUSC_Bits',0,22,147,16,3
	.word	74947
	.byte	17
	.byte	'_Ifx_GTM_DPLL_NUTC_Bits',0,22,150,16,16,4,34
	.byte	'NUTE',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'FST',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	2,19,2,35,0,34
	.byte	'SYN_T',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'SYN_T_OLD',0,4
	.word	32144
	.byte	3,13,2,35,0,34
	.byte	'VTN',0,4
	.word	32144
	.byte	6,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	4,3,2,35,0,34
	.byte	'WNUT',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'WSYN',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'WVTN',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NUTC_Bits',0,22,162,16,3
	.word	75165
	.byte	17
	.byte	'_Ifx_GTM_DPLL_OSW_Bits',0,22,165,16,16,4,34
	.byte	'SWON_S',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SWON_T',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	6,24,2,35,0,34
	.byte	'OSS',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_OSW_Bits',0,22,172,16,3
	.word	75406
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PDT_T_Bits',0,22,175,16,16,4,34
	.byte	'DB',0,4
	.word	32144
	.byte	14,18,2,35,0,34
	.byte	'DW',0,4
	.word	32144
	.byte	10,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PDT_T_Bits',0,22,180,16,3
	.word	75563
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSA_Bits',0,22,183,16,16,4,34
	.byte	'PSA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSA_Bits',0,22,187,16,3
	.word	75679
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSAC_Bits',0,22,190,16,16,4,34
	.byte	'PSAC',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSAC_Bits',0,22,194,16,3
	.word	75778
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSSC_Bits',0,22,197,16,16,4,34
	.byte	'PSSC',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSC_Bits',0,22,201,16,3
	.word	75880
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSSM_0_Bits',0,22,204,16,16,4,34
	.byte	'PSSM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSM_0_Bits',0,22,208,16,3
	.word	75982
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSSM_1_Bits',0,22,211,16,16,4,34
	.byte	'PSSM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSM_1_Bits',0,22,215,16,3
	.word	76088
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSTC_Bits',0,22,218,16,16,4,34
	.byte	'PSTC',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTC_Bits',0,22,222,16,3
	.word	76194
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSTM_0_Bits',0,22,225,16,16,4,34
	.byte	'PSTM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTM_0_Bits',0,22,229,16,3
	.word	76296
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PSTM_1_Bits',0,22,232,16,16,4,34
	.byte	'PSTM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTM_1_Bits',0,22,236,16,3
	.word	76402
	.byte	17
	.byte	'_Ifx_GTM_DPLL_PVT_Bits',0,22,239,16,16,4,34
	.byte	'PVT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PVT_Bits',0,22,243,16,3
	.word	76508
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RAM_INI_Bits',0,22,246,16,16,4,34
	.byte	'INIT_1A',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'INIT_1B',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'INIT_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'INIT_RAM',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RAM_INI_Bits',0,22,254,16,3
	.word	76607
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_Bits',0,22,129,17,16,4,34
	.byte	'RCDT_SX',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_SX_Bits',0,22,133,17,3
	.word	76796
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,22,137,17,16,4,34
	.byte	'RCDT_SX_NOM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,22,141,17,3
	.word	76907
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_Bits',0,22,144,17,16,4,34
	.byte	'RCDT_TX',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_TX_Bits',0,22,148,17,3
	.word	77030
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,22,152,17,16,4,34
	.byte	'RCDT_TX_NOM',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,22,156,17,3
	.word	77141
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,22,159,17,16,4,34
	.byte	'RDT_S_ACT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,22,163,17,3
	.word	77264
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RDT_S_Bits',0,22,166,17,16,4,34
	.byte	'RDT_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_S_Bits',0,22,170,17,3
	.word	77381
	.byte	17
	.byte	'_Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,22,173,17,16,4,34
	.byte	'RDT_T_ACT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,22,177,17,3
	.word	77486
	.byte	17
	.byte	'_Ifx_GTM_DPLL_SLR_Bits',0,22,180,17,16,4,34
	.byte	'SLR',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_SLR_Bits',0,22,184,17,3
	.word	77603
	.byte	17
	.byte	'_Ifx_GTM_DPLL_STATUS_Bits',0,22,187,17,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CSO',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'CTO',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'CRO',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'RCS',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'RCT',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'PSE',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SOR',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MS',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TOR',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MT',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'RAM2_ERR',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	2,17,2,35,0,34
	.byte	'LOW_RES',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'CSVS',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'CSVT',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'CAIP2',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'CAIP1',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'ISN',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'ITN',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'BWD2',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'BWD1',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'LOCK2',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'SYS',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'SYT',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'FSD',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'FTD',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'LOCK1',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'ERR',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_STATUS_Bits',0,22,220,17,3
	.word	77701
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,22,223,17,16,4,34
	.byte	'TBU_TS0_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,22,227,17,3
	.word	78282
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,22,230,17,16,4,34
	.byte	'TBU_TS0_T',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,22,234,17,3
	.word	78399
	.byte	17
	.byte	'_Ifx_GTM_DPLL_THMA_Bits',0,22,237,17,16,4,34
	.byte	'THMA',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THMA_Bits',0,22,241,17,3
	.word	78516
	.byte	17
	.byte	'_Ifx_GTM_DPLL_THMI_Bits',0,22,244,17,16,4,34
	.byte	'THMI',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THMI_Bits',0,22,248,17,3
	.word	78618
	.byte	17
	.byte	'_Ifx_GTM_DPLL_THVAL_Bits',0,22,251,17,16,4,34
	.byte	'THVAL',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THVAL_Bits',0,22,255,17,3
	.word	78720
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TLR_Bits',0,22,130,18,16,4,34
	.byte	'TLR',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TLR_Bits',0,22,134,18,3
	.word	78825
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TOV_Bits',0,22,137,18,16,4,34
	.byte	'DB',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'DW',0,4
	.word	32144
	.byte	6,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TOV_Bits',0,22,142,18,3
	.word	78923
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TOV_S_Bits',0,22,145,18,16,4,34
	.byte	'DB',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'DW',0,4
	.word	32144
	.byte	6,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TOV_S_Bits',0,22,150,18,3
	.word	79035
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TS_S_0_Bits',0,22,153,18,16,4,34
	.byte	'STATE_TS',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_S_0_Bits',0,22,157,18,3
	.word	79151
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TS_S_1_Bits',0,22,160,18,16,4,34
	.byte	'STATE_TS',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_S_1_Bits',0,22,164,18,3
	.word	79261
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TS_T_0_Bits',0,22,167,18,16,4,34
	.byte	'TRIGGER_TS',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_T_0_Bits',0,22,171,18,3
	.word	79371
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TS_T_1_Bits',0,22,174,18,16,4,34
	.byte	'TRIGGER_TS',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_T_1_Bits',0,22,178,18,3
	.word	79483
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TSAC_Bits',0,22,181,18,16,4,34
	.byte	'TSAC',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TSAC_Bits',0,22,185,18,3
	.word	79595
	.byte	17
	.byte	'_Ifx_GTM_DPLL_TSF_S_Bits',0,22,188,18,16,4,34
	.byte	'TSF_S',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TSF_S_Bits',0,22,192,18,3
	.word	79697
	.byte	17
	.byte	'_Ifx_GTM_DXINCON_Bits',0,22,195,18,16,4,34
	.byte	'IN00',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'IN01',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'IN02',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'IN03',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'IN10',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'IN11',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'IN12',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'IN13',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'DSS00',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'DSS01',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'DSS02',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'DSS03',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'DSS10',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'DSS11',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'DSS12',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'DSS13',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'reserved_28',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_DXINCON_Bits',0,22,217,18,3
	.word	79802
	.byte	17
	.byte	'_Ifx_GTM_DXOUTCON_Bits',0,22,220,18,16,4,34
	.byte	'OUT00',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'OUT01',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'OUT02',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'OUT03',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'OUT10',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'OUT11',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'OUT12',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'OUT13',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	20,0,2,35,0,0,16
	.byte	'Ifx_GTM_DXOUTCON_Bits',0,22,232,18,3
	.word	80216
	.byte	17
	.byte	'_Ifx_GTM_EIRQ_EN_Bits',0,22,235,18,16,4,34
	.byte	'AEI_TO_XPT_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'AEI_USP_ADDR_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'AEI_IM_ADDR_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'AEI_USP_BE_EIRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_EIRQ_EN_Bits',0,22,242,18,3
	.word	80458
	.byte	17
	.byte	'_Ifx_GTM_F2A_ENABLE_Bits',0,22,245,18,16,4,34
	.byte	'STR0_EN',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'STR1_EN',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'STR2_EN',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'STR3_EN',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'STR4_EN',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'STR5_EN',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'STR6_EN',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'STR7_EN',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_ENABLE_Bits',0,22,128,19,3
	.word	80662
	.byte	17
	.byte	'_Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,22,131,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	9,23,2,35,0,34
	.byte	'reserved_9',0,4
	.word	32144
	.byte	23,0,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,22,135,19,3
	.word	80902
	.byte	17
	.byte	'_Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,22,138,19,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'TMODE',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'DIR',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'reserved_19',0,4
	.word	32144
	.byte	13,0,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,22,144,19,3
	.word	81027
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_CTRL_Bits',0,22,147,19,16,4,34
	.byte	'RBM',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'RAP',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FLUSH',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'WULOCK',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_CTRL_Bits',0,22,154,19,3
	.word	81185
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,22,157,19,16,4,34
	.byte	'FIFO_EMPTY_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'FIFO_FULL_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FIFO_LWM_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'FIFO_UWM_EIRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'Reserved',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,22,164,19,3
	.word	81341
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,22,167,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,22,171,19,3
	.word	81551
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,22,174,19,16,4,34
	.byte	'LEVEL',0,4
	.word	32144
	.byte	11,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	21,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,22,178,19,3
	.word	81667
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,22,181,19,16,4,34
	.byte	'FIFO_EMPTY_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'FIFO_FULL_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FIFO_LWM_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'FIFO_UWM_IRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,22,188,19,3
	.word	81788
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,22,191,19,16,4,34
	.byte	'TRG_FIFO_EMPTY',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_FIFO_FULL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_FIFO_LWM',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_FIFO_UWM',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,22,198,19,3
	.word	81994
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,22,201,19,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'DMA_HYSTERESIS',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'DMA_HYST_DIR',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,22,207,19,3
	.word	82198
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,22,210,19,16,4,34
	.byte	'FIFO_EMPTY',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'FIFO_FULL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FIFO_LWM',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'FIFO_UWM',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,22,217,19,3
	.word	82367
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,22,220,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,22,224,19,3
	.word	82553
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,22,227,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,22,231,19,3
	.word	82669
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,22,234,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,22,238,19,3
	.word	82781
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_STATUS_Bits',0,22,241,19,16,4,34
	.byte	'EMPTY',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'FULL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'LOW_WM',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'UP_WM',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_STATUS_Bits',0,22,248,19,3
	.word	82901
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,22,251,19,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,22,255,19,3
	.word	83064
	.byte	17
	.byte	'_Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,22,130,20,16,4,34
	.byte	'ADDR',0,4
	.word	32144
	.byte	10,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,22,134,20,3
	.word	83180
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_0_Bits',0,22,137,20,16,4,34
	.byte	'ARU_NEW_DATA0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ARU_NEW_DATA1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ARU_ACC_ACK_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'BRC_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'AEI_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'CMP_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'SPE0_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'SPE1_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	8,16,2,35,0,34
	.byte	'PSM0_CH0_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'PSM0_CH1_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'PSM0_CH2_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'PSM0_CH3_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'PSM0_CH4_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'PSM0_CH5_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'PSM0_CH6_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'PSM0_CH7_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_0_Bits',0,22,157,20,3
	.word	83292
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_10_Bits',0,22,160,20,16,4,34
	.byte	'ATOM4_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ATOM4_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ATOM4_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ATOM4_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ATOM4_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ATOM4_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ATOM4_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ATOM4_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_10_Bits',0,22,171,20,3
	.word	83776
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_1_Bits',0,22,174,20,16,4,34
	.byte	'DPLL_DCG_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DPLL_EDI_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'DPLL_TIN_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'DPLL_TAX_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'DPLL_SIS_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'DPLL_TIS_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'DPLL_MSI_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'DPLL_MTI_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'DPLL_SAS_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'DPLL_TAS_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'DPLL_PWI_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'DPLL_W2I_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'DPLL_W1I_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'DPLL_GLI_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'DPLL_LLI_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'DPLL_EI_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'DPLL_GL2I_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'DPLL_LL2I_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'DPLL_TE0_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'DPLL_TE1_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'DPLL_TE2_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'DPLL_TE3_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'DPLL_TE4_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'DPLL_CDIT_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'DPLL_CDIS_IRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'DPLL_TORI_IRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'DPLL_SORI_IRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_1_Bits',0,22,204,20,3
	.word	84065
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_2_Bits',0,22,207,20,16,4,34
	.byte	'TIM0_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TIM0_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TIM0_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TIM0_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TIM0_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TIM0_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TIM0_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TIM0_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TIM1_CH0_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TIM1_CH1_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TIM1_CH2_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TIM1_CH3_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TIM1_CH4_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TIM1_CH5_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TIM1_CH6_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TIM1_CH7_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TIM2_CH0_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TIM2_CH1_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TIM2_CH2_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TIM2_CH3_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TIM2_CH4_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TIM2_CH5_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TIM2_CH6_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TIM2_CH7_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'TIM3_CH0_IRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TIM3_CH1_IRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'TIM3_CH2_IRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'TIM3_CH3_IRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'TIM3_CH4_IRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'TIM3_CH5_IRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TIM3_CH6_IRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'TIM3_CH7_IRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_2_Bits',0,22,241,20,3
	.word	84806
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_4_Bits',0,22,244,20,16,4,34
	.byte	'MCS0_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MCS0_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MCS0_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'MCS0_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'MCS0_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'MCS0_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MCS0_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MCS0_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'MCS1_CH0_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MCS1_CH1_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'MCS1_CH2_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MCS1_CH3_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'MCS1_CH4_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCS1_CH5_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCS1_CH6_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCS1_CH7_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'MCS2_CH0_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'MCS2_CH1_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'MCS2_CH2_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'MCS2_CH3_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'MCS2_CH4_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'MCS2_CH5_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'MCS2_CH6_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'MCS2_CH7_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'MCS3_CH0_IRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'MCS3_CH1_IRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'MCS3_CH2_IRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'MCS3_CH3_IRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'MCS3_CH4_IRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'MCS3_CH5_IRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'MCS3_CH6_IRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'MCS3_CH7_IRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_4_Bits',0,22,150,21,3
	.word	85639
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_6_Bits',0,22,153,21,16,4,34
	.byte	'TOM0_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TOM0_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TOM0_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TOM0_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TOM0_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TOM0_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TOM0_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TOM0_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TOM0_CH8_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TOM0_CH9_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TOM0_CH10_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TOM0_CH11_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TOM0_CH12_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TOM0_CH13_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TOM0_CH14_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TOM0_CH15_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TOM1_CH0_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TOM1_CH1_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TOM1_CH2_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TOM1_CH3_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TOM1_CH4_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TOM1_CH5_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TOM1_CH6_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TOM1_CH7_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'TOM1_CH8_IRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TOM1_CH9_IRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'TOM1_CH10_IRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'TOM1_CH11_IRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'TOM1_CH12_IRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'TOM1_CH13_IRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TOM1_CH14_IRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'TOM1_CH15_IRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_6_Bits',0,22,187,21,3
	.word	86472
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_7_Bits',0,22,190,21,16,4,34
	.byte	'TOM2_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TOM2_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TOM2_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TOM2_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TOM2_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TOM2_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TOM2_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TOM2_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TOM2_CH8_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TOM2_CH9_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TOM2_CH10_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TOM2_CH11_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TOM2_CH12_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TOM2_CH13_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TOM2_CH14_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TOM2_CH15_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_7_Bits',0,22,209,21,3
	.word	87317
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_9_Bits',0,22,212,21,16,4,34
	.byte	'ATOM0_CH0_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ATOM0_CH1_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ATOM0_CH2_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ATOM0_CH3_IRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ATOM0_CH4_IRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ATOM0_CH5_IRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ATOM0_CH6_IRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ATOM0_CH7_IRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ATOM1_CH0_IRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ATOM1_CH1_IRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ATOM1_CH2_IRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ATOM1_CH3_IRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'ATOM1_CH4_IRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'ATOM1_CH5_IRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'ATOM1_CH6_IRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'ATOM1_CH7_IRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'ATOM2_CH0_IRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'ATOM2_CH1_IRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'ATOM2_CH2_IRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'ATOM2_CH3_IRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'ATOM2_CH4_IRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'ATOM2_CH5_IRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'ATOM2_CH6_IRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'ATOM2_CH7_IRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'ATOM3_CH0_IRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'ATOM3_CH1_IRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'ATOM3_CH2_IRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'ATOM3_CH3_IRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'ATOM3_CH4_IRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'ATOM3_CH5_IRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'ATOM3_CH6_IRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'ATOM3_CH7_IRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_9_Bits',0,22,246,21,3
	.word	87795
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_CEI0_Bits',0,22,249,21,16,4,34
	.byte	'FIFO0_CH0_EIRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'FIFO0_CH1_EIRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FIFO0_CH2_EIRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'FIFO0_CH3_EIRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'FIFO0_CH4_EIRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'FIFO0_CH5_EIRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'FIFO0_CH6_EIRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'FIFO0_CH7_EIRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI0_Bits',0,22,132,22,3
	.word	88660
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_CEI1_Bits',0,22,135,22,16,4,34
	.byte	'TIM0_CH0_EIRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TIM0_CH1_EIRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TIM0_CH2_EIRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TIM0_CH3_EIRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TIM0_CH4_EIRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TIM0_CH5_EIRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TIM0_CH6_EIRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TIM0_CH7_EIRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TIM1_CH0_EIRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TIM1_CH1_EIRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TIM1_CH2_EIRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TIM1_CH3_EIRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TIM1_CH4_EIRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TIM1_CH5_EIRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TIM1_CH6_EIRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TIM1_CH7_EIRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'TIM2_CH0_EIRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TIM2_CH1_EIRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'TIM2_CH2_EIRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'TIM2_CH3_EIRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'TIM2_CH4_EIRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TIM2_CH5_EIRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TIM2_CH6_EIRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'TIM2_CH7_EIRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'TIM3_CH0_EIRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TIM3_CH1_EIRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'TIM3_CH2_EIRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'TIM3_CH3_EIRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'TIM3_CH4_EIRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'TIM3_CH5_IRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TIM3_CH6_EIRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'TIM3_CH7_EIRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI1_Bits',0,22,169,22,3
	.word	88961
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_CEI3_Bits',0,22,172,22,16,4,34
	.byte	'MCS0_CH0_EIRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MCS0_CH1_EIRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MCS0_CH2_EIRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'MCS0_CH3_EIRQ',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'MCS0_CH4_EIRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'MCS0_CH5_EIRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MCS0_CH6_EIRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MCS0_CH7_EIRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'MCS1_CH0_EIRQ',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MCS1_CH1_EIRQ',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'MCS1_CH2_EIRQ',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MCS1_CH3_EIRQ',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'MCS1_CH4_EIRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCS1_CH5_EIRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCS1_CH6_EIRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCS1_CH7_EIRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'MCS2_CH0_EIRQ',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'MCS2_CH1_EIRQ',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'MCS2_CH2_EIRQ',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'MCS2_CH3_EIRQ',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'MCS2_CH4_EIRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'MCS2_CH5_EIRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'MCS2_CH6_EIRQ',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'MCS2_CH7_EIRQ',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'MCS3_CH0_EIRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'MCS3_CH1_EIRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'MCS3_CH2_EIRQ',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'MCS3_CH3_EIRQ',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'MCS3_CH4_EIRQ',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'MCS3_CH5_EIRQ',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'MCS3_CH6_EIRQ',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'MCS3_CH7_EIRQ',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI3_Bits',0,22,206,22,3
	.word	89831
	.byte	17
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_Bits',0,22,209,22,16,4,34
	.byte	'GTM_EIRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'BRC_EIRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'FIFO0_EIRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TIM0_EIRQ',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TIM1_EIRQ',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TIM2_EIRQ',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TIM3_EIRQ',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'MCS0_EIRQ',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCS1_EIRQ',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCS2_EIRQ',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCS3_EIRQ',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SPE0_EIRQ',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'SPE1_EIRQ',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'reserved_22',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'CMP_EIRQ',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'DPLL_EIRQ',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'reserved_26',0,4
	.word	32144
	.byte	6,0,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_MEI_Bits',0,22,231,22,3
	.word	90702
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,22,234,22,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,22,244,22,3
	.word	91197
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,22,247,22,16,4,34
	.byte	'INSEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'INSEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'INSEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'INSEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'INSEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'INSEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'INSEL6',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'INSEL7',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,22,129,23,3
	.word	91408
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,22,132,23,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	3,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	3,25,2,35,0,34
	.byte	'reserved_7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	3,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'reserved_15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	3,13,2,35,0,34
	.byte	'reserved_19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	3,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	9,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,22,146,23,3
	.word	91637
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,22,149,23,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,22,158,23,3
	.word	91958
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,22,161,23,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,22,171,23,3
	.word	92164
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,22,174,23,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'SEL8',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'SEL9',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'SEL10',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'SEL11',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'SEL12',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'SEL13',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'SEL14',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'SEL15',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,22,192,23,3
	.word	92379
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,22,195,23,16,4,34
	.byte	'CH0SEL',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'CH1SEL',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'CH2SEL',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'CH3SEL',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'CH4SEL',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'CH5SEL',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'CH6SEL',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'CH7SEL',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,22,205,23,3
	.word	92720
	.byte	17
	.byte	'_Ifx_GTM_IRQ_EN_Bits',0,22,208,23,16,4,34
	.byte	'AEI_TO_XPT_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'AEI_USP_ADDR_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'AEI_IM_ADDR_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'AEI_USP_BE_IRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_EN_Bits',0,22,215,23,3
	.word	92945
	.byte	17
	.byte	'_Ifx_GTM_IRQ_FORCINT_Bits',0,22,218,23,16,4,34
	.byte	'TRG_AEI_TO_XPT',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_AEI_USP_ADDR',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_AEI_IM_ADDR',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_AEI_USP_BE',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_FORCINT_Bits',0,22,225,23,3
	.word	93143
	.byte	17
	.byte	'_Ifx_GTM_IRQ_MODE_Bits',0,22,228,23,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_MODE_Bits',0,22,232,23,3
	.word	93339
	.byte	17
	.byte	'_Ifx_GTM_IRQ_NOTIFY_Bits',0,22,235,23,16,4,34
	.byte	'AEI_TO_XPT',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'AEI_USP_ADDR',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'AEI_IM_ADDR',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'AEI_USP_BE',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_NOTIFY_Bits',0,22,242,23,3
	.word	93442
	.byte	17
	.byte	'_Ifx_GTM_KRST0_Bits',0,22,245,23,16,4,34
	.byte	'RST',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'RSTSTAT',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_KRST0_Bits',0,22,250,23,3
	.word	93620
	.byte	17
	.byte	'_Ifx_GTM_KRST1_Bits',0,22,253,23,16,4,34
	.byte	'RST',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_GTM_KRST1_Bits',0,22,129,24,3
	.word	93731
	.byte	17
	.byte	'_Ifx_GTM_KRSTCLR_Bits',0,22,132,24,16,4,34
	.byte	'CLR',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_GTM_KRSTCLR_Bits',0,22,136,24,3
	.word	93823
	.byte	17
	.byte	'_Ifx_GTM_MAP_CTRL_Bits',0,22,139,24,16,4,34
	.byte	'TSEL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SSL',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'LSEL',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	11,16,2,35,0,34
	.byte	'TSPP0_EN',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'TSPP0_DLD',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'reserved_18',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'TSPP0_I0V',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'TSPP0_I1V',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'TSPP0_I2V',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'TSPP1_EN',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TSPP1_DLD',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'reserved_26',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'TSPP1_I0V',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'TSPP1_I1V',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TSPP1_I2V',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'reserved_31',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_MAP_CTRL_Bits',0,22,159,24,3
	.word	93919
	.byte	17
	.byte	'_Ifx_GTM_MCFG_CTRL_Bits',0,22,162,24,16,4,34
	.byte	'MEM0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'MEM1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'MEM2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'MEM3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCFG_CTRL_Bits',0,22,169,24,3
	.word	94349
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH0_CTRG_Bits',0,22,172,24,16,4,34
	.byte	'TRG0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TRG6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TRG7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TRG8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TRG9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TRG10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TRG11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TRG12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TRG13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TRG14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TRG15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH0_CTRG_Bits',0,22,191,24,3
	.word	94498
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH0_STRG_Bits',0,22,194,24,16,4,34
	.byte	'TRG0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'TRG6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TRG7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'TRG8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'TRG9',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'TRG10',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'TRG11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'TRG12',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'TRG13',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'TRG14',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'TRG15',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH0_STRG_Bits',0,22,213,24,3
	.word	94852
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_ACB_Bits',0,22,216,24,16,4,34
	.byte	'ACB0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ACB1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ACB2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ACB3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACB4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_ACB_Bits',0,22,224,24,3
	.word	95206
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_CTRL_Bits',0,22,227,24,16,4,34
	.byte	'EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ERR',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'CY',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'Z',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'V',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'N',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'CAT',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'CWT',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	6,16,2,35,0,34
	.byte	'SP_CNT',0,4
	.word	32144
	.byte	3,13,2,35,0,34
	.byte	'reserved_19',0,4
	.word	32144
	.byte	13,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_CTRL_Bits',0,22,242,24,3
	.word	95373
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,22,245,24,16,4,34
	.byte	'MCS_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'STK_ERR_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MEM_ERR_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,22,251,24,3
	.word	95653
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,22,254,24,16,4,34
	.byte	'MCS_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'STK_ERR_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MEM_ERR_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,22,132,25,3
	.word	95825
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,22,135,25,16,4,34
	.byte	'TRG_MCS_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_STK_ERR_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_MEM_ERR_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,22,141,25,3
	.word	95992
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,22,144,25,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,22,148,25,3
	.word	96172
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,22,151,25,16,4,34
	.byte	'MCS_IRQ',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'STK_ERR_IRQ',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MEM_ERR_IRQ',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,22,157,25,3
	.word	96289
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_PC_Bits',0,22,160,25,16,4,34
	.byte	'PC',0,4
	.word	32144
	.byte	14,18,2,35,0,34
	.byte	'reserved_14',0,4
	.word	32144
	.byte	18,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_PC_Bits',0,22,164,25,3
	.word	96455
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R0_Bits',0,22,167,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R0_Bits',0,22,171,25,3
	.word	96555
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R1_Bits',0,22,174,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R1_Bits',0,22,178,25,3
	.word	96657
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R2_Bits',0,22,181,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R2_Bits',0,22,185,25,3
	.word	96759
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R3_Bits',0,22,188,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R3_Bits',0,22,192,25,3
	.word	96861
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R4_Bits',0,22,195,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R4_Bits',0,22,199,25,3
	.word	96963
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R5_Bits',0,22,202,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R5_Bits',0,22,206,25,3
	.word	97065
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R6_Bits',0,22,209,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R6_Bits',0,22,213,25,3
	.word	97167
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH_R7_Bits',0,22,216,25,16,4,34
	.byte	'DATA',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R7_Bits',0,22,220,25,3
	.word	97269
	.byte	17
	.byte	'_Ifx_GTM_MCS_CTRL_Bits',0,22,223,25,16,4,34
	.byte	'SCHED',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'HLT_SP_OFL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	14,16,2,35,0,34
	.byte	'RAM_RST',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'reserved_17',0,4
	.word	32144
	.byte	15,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CTRL_Bits',0,22,230,25,3
	.word	97371
	.byte	17
	.byte	'_Ifx_GTM_MCS_ERR_Bits',0,22,233,25,16,4,34
	.byte	'ERR0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ERR1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ERR2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ERR3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ERR4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ERR5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ERR6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ERR7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_ERR_Bits',0,22,244,25,3
	.word	97535
	.byte	17
	.byte	'_Ifx_GTM_MCS_RST_Bits',0,22,247,25,16,4,34
	.byte	'RST0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'RST1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'RST2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'RST3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'RST4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'RST5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'RST6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'RST7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'CAT0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'CAT1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'CAT2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'CAT3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'CAT4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'CAT5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'CAT6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'CAT7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'CWT0',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'CWT1',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'CWT2',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'CWT3',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'CWT4',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'CWT5',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'CWT6',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'CWT7',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_RST_Bits',0,22,146,26,3
	.word	97744
	.byte	17
	.byte	'_Ifx_GTM_MCSINTCLR_Bits',0,22,149,26,16,4,34
	.byte	'MCS000',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MCS001',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MCS010',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'MCS011',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'MCS100',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'MCS101',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MCS110',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MCS111',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'MCS200',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MCS201',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'MCS210',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MCS211',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'MCS300',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCS301',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCS310',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCS311',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCSINTCLR_Bits',0,22,168,26,3
	.word	98210
	.byte	17
	.byte	'_Ifx_GTM_MCSINTSTAT_Bits',0,22,171,26,16,4,34
	.byte	'MCS000',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MCS001',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MCS010',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'MCS011',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'MCS100',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'MCS101',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MCS110',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MCS111',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'MCS200',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MCS201',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'MCS210',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MCS211',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'MCS300',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCS301',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCS310',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCS311',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_MCSINTSTAT_Bits',0,22,190,26,3
	.word	98584
	.byte	17
	.byte	'_Ifx_GTM_MON_ACTIVITY_0_Bits',0,22,193,26,16,4,34
	.byte	'MCA_0_0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'MCA_0_1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'MCA_0_2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'MCA_0_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'MCA_0_4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'MCA_0_5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'MCA_0_6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'MCA_0_7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'MCA_1_0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MCA_1_1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'MCA_1_2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'MCA_1_3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'MCA_1_4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'MCA_1_5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'MCA_1_6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'MCA_1_7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'MCA_2_0',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'MCA_2_1',0,4
	.word	32144
	.byte	1,14,2,35,0,34
	.byte	'MCA_2_2',0,4
	.word	32144
	.byte	1,13,2,35,0,34
	.byte	'MCA_2_3',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'MCA_2_4',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'MCA_2_5',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'MCA_2_6',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'MCA_2_7',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'MCA_3_0',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'MCA_3_1',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'MCA_3_2',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'MCA_3_3',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'MCA_3_4',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'MCA_3_5',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'MCA_3_6',0,4
	.word	32144
	.byte	1,1,2,35,0,34
	.byte	'MCA_3_7',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_MON_ACTIVITY_0_Bits',0,22,227,26,3
	.word	98960
	.byte	17
	.byte	'_Ifx_GTM_MON_STATUS_Bits',0,22,230,26,16,4,34
	.byte	'ACT_CMU0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ACT_CMU1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'ACT_CMU2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'ACT_CMU3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'ACT_CMU4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ACT_CMU5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'ACT_CMU6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'ACT_CMU7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'ACT_CMUFX0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'ACT_CMUFX1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'ACT_CMUFX2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'ACT_CMUFX3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'ACT_CMUFX4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'CMP_ERR',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'reserved_17',0,4
	.word	32144
	.byte	3,12,2,35,0,34
	.byte	'MCS0_ERR',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'MCS1_ERR',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'MCS2_ERR',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'MCS3_ERR',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_MON_STATUS_Bits',0,22,253,26,3
	.word	99641
	.byte	17
	.byte	'_Ifx_GTM_MSCIN_INHCON_Bits',0,22,128,27,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'SEL8',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'SEL9',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'SEL10',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'SEL11',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'SEL12',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'SEL13',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'SEL14',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'SEL15',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCIN_INHCON_Bits',0,22,146,27,3
	.word	100144
	.byte	17
	.byte	'_Ifx_GTM_MSCIN_INLCON_Bits',0,22,149,27,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'SEL8',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'SEL9',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'SEL10',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'SEL11',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'SEL12',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'SEL13',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'SEL14',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'SEL15',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCIN_INLCON_Bits',0,22,167,27,3
	.word	100475
	.byte	17
	.byte	'_Ifx_GTM_MSCSET_CON0_Bits',0,22,170,27,16,4,34
	.byte	'SEL0',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'SEL1',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'SEL2',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'SEL3',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON0_Bits',0,22,180,27,3
	.word	100806
	.byte	17
	.byte	'_Ifx_GTM_MSCSET_CON1_Bits',0,22,183,27,16,4,34
	.byte	'SEL4',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'SEL5',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'SEL6',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'SEL7',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON1_Bits',0,22,193,27,3
	.word	101028
	.byte	17
	.byte	'_Ifx_GTM_MSCSET_CON2_Bits',0,22,196,27,16,4,34
	.byte	'SEL8',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'SEL9',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'SEL10',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'SEL11',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON2_Bits',0,22,206,27,3
	.word	101250
	.byte	17
	.byte	'_Ifx_GTM_MSCSET_CON3_Bits',0,22,209,27,16,4,34
	.byte	'SEL12',0,4
	.word	32144
	.byte	5,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'SEL13',0,4
	.word	32144
	.byte	5,19,2,35,0,34
	.byte	'reserved_13',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'SEL14',0,4
	.word	32144
	.byte	5,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'SEL15',0,4
	.word	32144
	.byte	5,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON3_Bits',0,22,219,27,3
	.word	101474
	.byte	17
	.byte	'_Ifx_GTM_OCS_Bits',0,22,222,27,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'SUS',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'SUS_P',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'SUSSTA',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'reserved_30',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_OCS_Bits',0,22,229,27,3
	.word	101700
	.byte	17
	.byte	'_Ifx_GTM_ODA_Bits',0,22,232,27,16,4,34
	.byte	'DDREN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'DREN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_ODA_Bits',0,22,237,27,3
	.word	101846
	.byte	17
	.byte	'_Ifx_GTM_OTBU0T_Bits',0,22,240,27,16,4,34
	.byte	'CV',0,4
	.word	32144
	.byte	27,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'CM',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'reserved_30',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU0T_Bits',0,22,246,27,3
	.word	101952
	.byte	17
	.byte	'_Ifx_GTM_OTBU1T_Bits',0,22,249,27,16,4,34
	.byte	'CV',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'EN',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU1T_Bits',0,22,255,27,3
	.word	102083
	.byte	17
	.byte	'_Ifx_GTM_OTBU2T_Bits',0,22,130,28,16,4,34
	.byte	'CV',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'EN',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'reserved_29',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU2T_Bits',0,22,136,28,3
	.word	102214
	.byte	17
	.byte	'_Ifx_GTM_OTSC0_Bits',0,22,139,28,16,4,34
	.byte	'B0LMT',0,4
	.word	32144
	.byte	3,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'B0LMI',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'B0HMT',0,4
	.word	32144
	.byte	3,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'B0HMI',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'B1LMT',0,4
	.word	32144
	.byte	3,13,2,35,0,34
	.byte	'reserved_19',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'B1LMI',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'B1HMT',0,4
	.word	32144
	.byte	3,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'B1HMI',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTSC0_Bits',0,22,153,28,3
	.word	102345
	.byte	17
	.byte	'_Ifx_GTM_OTSC1_Bits',0,22,156,28,16,4,34
	.byte	'MCS',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'MI',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'MOE',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'reserved_10',0,4
	.word	32144
	.byte	22,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTSC1_Bits',0,22,163,28,3
	.word	102627
	.byte	17
	.byte	'_Ifx_GTM_OTSS_Bits',0,22,166,28,16,4,34
	.byte	'OTGB0',0,4
	.word	32144
	.byte	4,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	4,24,2,35,0,34
	.byte	'OTGB1',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'reserved_12',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'OTGB2',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'reserved_20',0,4
	.word	32144
	.byte	12,0,2,35,0,0,16
	.byte	'Ifx_GTM_OTSS_Bits',0,22,174,28,3
	.word	102771
	.byte	17
	.byte	'_Ifx_GTM_REV_Bits',0,22,177,28,16,4,34
	.byte	'STEP',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'NO',0,4
	.word	32144
	.byte	4,20,2,35,0,34
	.byte	'MINOR',0,4
	.word	32144
	.byte	4,16,2,35,0,34
	.byte	'MAJOR',0,4
	.word	32144
	.byte	4,12,2,35,0,34
	.byte	'DEV_CODE0',0,4
	.word	32144
	.byte	4,8,2,35,0,34
	.byte	'DEV_CODE1',0,4
	.word	32144
	.byte	4,4,2,35,0,34
	.byte	'DEV_CODE2',0,4
	.word	32144
	.byte	4,0,2,35,0,0,16
	.byte	'Ifx_GTM_REV_Bits',0,22,186,28,3
	.word	102943
	.byte	17
	.byte	'_Ifx_GTM_RST_Bits',0,22,189,28,16,4,34
	.byte	'RST',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_GTM_RST_Bits',0,22,193,28,3
	.word	103121
	.byte	17
	.byte	'_Ifx_GTM_SPE_CMP_Bits',0,22,196,28,16,4,34
	.byte	'CMP',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CMP_Bits',0,22,200,28,3
	.word	103209
	.byte	17
	.byte	'_Ifx_GTM_SPE_CNT_Bits',0,22,203,28,16,4,34
	.byte	'CNT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CNT_Bits',0,22,207,28,3
	.word	103306
	.byte	17
	.byte	'_Ifx_GTM_SPE_CTRL_STAT_Bits',0,22,210,28,16,4,34
	.byte	'SPE_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SIE0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'SIE1',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'SIE2',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRIG_SEL',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'TIM_SEL',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'FSOM',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'SPE_PAT_PTR',0,4
	.word	32144
	.byte	3,21,2,35,0,34
	.byte	'reserved_11',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'AIP',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'ADIR',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'PIP',0,4
	.word	32144
	.byte	3,13,2,35,0,34
	.byte	'PDIR',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'NIP',0,4
	.word	32144
	.byte	3,9,2,35,0,34
	.byte	'reserved_23',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'FSOL',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CTRL_STAT_Bits',0,22,228,28,3
	.word	103403
	.byte	17
	.byte	'_Ifx_GTM_SPE_EIRQ_EN_Bits',0,22,231,28,16,4,34
	.byte	'SPE_NIPD_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SPE_DCHG_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'SPE_PERR_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'SPE_BIS_EIRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SPE_RCMP_EIRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_EIRQ_EN_Bits',0,22,239,28,3
	.word	103757
	.byte	17
	.byte	'_Ifx_GTM_SPE_IRQ_EN_Bits',0,22,242,28,16,4,34
	.byte	'SPE_NIPD_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SPE_DCHG_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'SPE_PERR_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'SPE_BIS_IRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SPE_RCMP_IRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_EN_Bits',0,22,250,28,3
	.word	103985
	.byte	17
	.byte	'_Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,22,253,28,16,4,34
	.byte	'TRG_SPE_NIPD',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_SPE_DCHG',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_SPE_PERR',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_SPE_BIS',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG_SPE_RCMP',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,22,133,29,3
	.word	104206
	.byte	17
	.byte	'_Ifx_GTM_SPE_IRQ_MODE_Bits',0,22,136,29,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_MODE_Bits',0,22,140,29,3
	.word	104422
	.byte	17
	.byte	'_Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,22,143,29,16,4,34
	.byte	'SPE_NIPD',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SPE_DCHG',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'SPE_PERR',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'SPE_BIS',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SPE_RCMP',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'reserved_5',0,4
	.word	32144
	.byte	27,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,22,151,29,3
	.word	104533
	.byte	17
	.byte	'_Ifx_GTM_SPE_OUT_CTRL_Bits',0,22,154,29,16,4,34
	.byte	'SPE_OUT_CTRL',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_OUT_CTRL_Bits',0,22,158,29,3
	.word	104727
	.byte	17
	.byte	'_Ifx_GTM_SPE_OUT_PAT_Bits',0,22,161,29,16,4,34
	.byte	'SPE_OUT_PAT',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_OUT_PAT_Bits',0,22,165,29,3
	.word	104843
	.byte	17
	.byte	'_Ifx_GTM_SPE_PAT_Bits',0,22,168,29,16,4,34
	.byte	'IP0_VAL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'IP0_PAT',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'IP1_VAL',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'IP1_PAT',0,4
	.word	32144
	.byte	3,24,2,35,0,34
	.byte	'IP2_VAL',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'IP2_PAT',0,4
	.word	32144
	.byte	3,20,2,35,0,34
	.byte	'IP3_VAL',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'IP3_PAT',0,4
	.word	32144
	.byte	3,16,2,35,0,34
	.byte	'IP4_VAL',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'IP4_PAT',0,4
	.word	32144
	.byte	3,12,2,35,0,34
	.byte	'IP5_VAL',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'IP5_PAT',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'IP6_VAL',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'IP6_PAT',0,4
	.word	32144
	.byte	3,4,2,35,0,34
	.byte	'IP7_VAL',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'IP7_PAT',0,4
	.word	32144
	.byte	3,0,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_PAT_Bits',0,22,186,29,3
	.word	104956
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH0_BASE_Bits',0,22,189,29,16,4,34
	.byte	'BASE',0,4
	.word	32144
	.byte	27,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH0_BASE_Bits',0,22,193,29,3
	.word	105319
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH0_CTRL_Bits',0,22,196,29,16,4,34
	.byte	'LOW_RES',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CH_CLK_SRC',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH0_CTRL_Bits',0,22,201,29,3
	.word	105427
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH1_BASE_Bits',0,22,204,29,16,4,34
	.byte	'BASE',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH1_BASE_Bits',0,22,208,29,3
	.word	105559
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH1_CTRL_Bits',0,22,211,29,16,4,34
	.byte	'CH_MODE',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CH_CLK_SRC',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH1_CTRL_Bits',0,22,216,29,3
	.word	105667
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH2_BASE_Bits',0,22,219,29,16,4,34
	.byte	'BASE',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH2_BASE_Bits',0,22,223,29,3
	.word	105799
	.byte	17
	.byte	'_Ifx_GTM_TBU_CH2_CTRL_Bits',0,22,226,29,16,4,34
	.byte	'CH_MODE',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CH_CLK_SRC',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'reserved_4',0,4
	.word	32144
	.byte	28,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH2_CTRL_Bits',0,22,231,29,3
	.word	105907
	.byte	17
	.byte	'_Ifx_GTM_TBU_CHEN_Bits',0,22,234,29,16,4,34
	.byte	'ENDIS_CH0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_CH1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_CH2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CHEN_Bits',0,22,240,29,3
	.word	106039
	.byte	17
	.byte	'_Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,22,243,29,16,4,34
	.byte	'SRC_CH0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'SRC_CH1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'SRC_CH2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'SRC_CH3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'SRC_CH4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'SRC_CH5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'SRC_CH6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'SRC_CH7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,22,254,29,3
	.word	106185
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_CNT_Bits',0,22,129,30,16,4,34
	.byte	'CNT',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CNT_Bits',0,22,133,30,3
	.word	106432
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_CNTS_Bits',0,22,136,30,16,4,34
	.byte	'CNTS',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'ECNT',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CNTS_Bits',0,22,140,30,3
	.word	106535
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_CTRL_Bits',0,22,143,30,16,4,34
	.byte	'TIM_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TIM_MODE',0,4
	.word	32144
	.byte	3,28,2,35,0,34
	.byte	'OSM',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'ARU_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'CICTRL',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'TBU0_SEL',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'GPR0_SEL',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'GPR1_SEL',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'CNTS_SEL',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'DSL',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'ISL',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'ECNT_RESET',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'FLT_EN',0,4
	.word	32144
	.byte	1,15,2,35,0,34
	.byte	'FLT_CNT_FRQ',0,4
	.word	32144
	.byte	2,13,2,35,0,34
	.byte	'EXT_CAP_EN',0,4
	.word	32144
	.byte	1,12,2,35,0,34
	.byte	'FLT_MODE_RE',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'FLT_CTR_RE',0,4
	.word	32144
	.byte	1,10,2,35,0,34
	.byte	'FLT_MODE_FE',0,4
	.word	32144
	.byte	1,9,2,35,0,34
	.byte	'FLT_CTR_FE',0,4
	.word	32144
	.byte	1,8,2,35,0,34
	.byte	'CLK_SEL',0,4
	.word	32144
	.byte	3,5,2,35,0,34
	.byte	'FR_ECNT_OFL',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'EGPR0_SEL',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'EGPR1_SEL',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'TOCTRL',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CTRL_Bits',0,22,169,30,3
	.word	106634
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_ECNT_Bits',0,22,172,30,16,4,34
	.byte	'ECNT',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_ECNT_Bits',0,22,176,30,3
	.word	107177
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_ECTRL_Bits',0,22,179,30,16,4,34
	.byte	'EXT_CAP_SRC',0,4
	.word	32144
	.byte	3,29,2,35,0,34
	.byte	'reserved_3',0,4
	.word	32144
	.byte	29,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_ECTRL_Bits',0,22,183,30,3
	.word	107283
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,22,186,30,16,4,34
	.byte	'NEWVAL_EIRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ECNTOFL_EIRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'CNTOFL_EIRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'GPROFL_EIRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TODET_EIRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'GLITCHDET_EIRQ_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,22,195,30,3
	.word	107397
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_FLT_FE_Bits',0,22,198,30,16,4,34
	.byte	'FLT_FE',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_FLT_FE_Bits',0,22,202,30,3
	.word	107651
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_FLT_RE_Bits',0,22,205,30,16,4,34
	.byte	'FLT_RE',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'reserved_24',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_FLT_RE_Bits',0,22,209,30,3
	.word	107763
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_GPR0_Bits',0,22,212,30,16,4,34
	.byte	'GPR0',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'ECNT',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_GPR0_Bits',0,22,216,30,3
	.word	107875
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_GPR1_Bits',0,22,219,30,16,4,34
	.byte	'GPR1',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'ECNT',0,4
	.word	32144
	.byte	8,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_GPR1_Bits',0,22,223,30,3
	.word	107974
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,22,226,30,16,4,34
	.byte	'NEWVAL_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ECNTOFL_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'CNTOFL_IRQ_EN',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'GPROFL_IRQ_EN',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TODET_IRQ_EN',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'GLITCHDET_IRQ_EN',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,22,235,30,3
	.word	108073
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,22,238,30,16,4,34
	.byte	'TRG_NEWVAL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_ECNTOFL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'TRG_CNTOFL',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'TRG_GPROFL',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TRG_TODET',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'TRG_GLITCHDET',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,22,247,30,3
	.word	108319
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,22,250,30,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,22,254,30,3
	.word	108557
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,22,129,31,16,4,34
	.byte	'NEWVAL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'ECNTOFL',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'CNTOFL',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'GPROFL',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'TODET',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'GLITCHDET',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'reserved_6',0,4
	.word	32144
	.byte	26,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,22,138,31,3
	.word	108674
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_TDUC_Bits',0,22,141,31,16,4,34
	.byte	'TO_CNT',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_TDUC_Bits',0,22,145,31,3
	.word	108886
	.byte	17
	.byte	'_Ifx_GTM_TIM_CH_TDUV_Bits',0,22,148,31,16,4,34
	.byte	'TOV',0,4
	.word	32144
	.byte	8,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	20,4,2,35,0,34
	.byte	'TCS',0,4
	.word	32144
	.byte	3,1,2,35,0,34
	.byte	'reserved_31',0,4
	.word	32144
	.byte	1,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_TDUV_Bits',0,22,154,31,3
	.word	108993
	.byte	17
	.byte	'_Ifx_GTM_TIM_IN_SRC_Bits',0,22,157,31,16,4,34
	.byte	'VAL_0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'MODE_0',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'VAL_1',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'MODE_1',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'VAL_2',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'MODE_2',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'VAL_3',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'MODE_3',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'VAL_4',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'MODE_4',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'VAL_5',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'MODE_5',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'VAL_6',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'MODE_6',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'VAL_7',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'MODE_7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_IN_SRC_Bits',0,22,175,31,3
	.word	109135
	.byte	17
	.byte	'_Ifx_GTM_TIM_RST_Bits',0,22,178,31,16,4,34
	.byte	'RST_CH0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'RST_CH1',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'RST_CH2',0,4
	.word	32144
	.byte	1,29,2,35,0,34
	.byte	'RST_CH3',0,4
	.word	32144
	.byte	1,28,2,35,0,34
	.byte	'RST_CH4',0,4
	.word	32144
	.byte	1,27,2,35,0,34
	.byte	'RST_CH5',0,4
	.word	32144
	.byte	1,26,2,35,0,34
	.byte	'RST_CH6',0,4
	.word	32144
	.byte	1,25,2,35,0,34
	.byte	'RST_CH7',0,4
	.word	32144
	.byte	1,24,2,35,0,34
	.byte	'reserved_8',0,4
	.word	32144
	.byte	24,0,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_RST_Bits',0,22,189,31,3
	.word	109480
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_CM0_Bits',0,22,192,31,16,4,34
	.byte	'CM0',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CM0_Bits',0,22,196,31,3
	.word	109713
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_CM1_Bits',0,22,199,31,16,4,34
	.byte	'CM1',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CM1_Bits',0,22,203,31,3
	.word	109816
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_CN0_Bits',0,22,206,31,16,4,34
	.byte	'CN0',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CN0_Bits',0,22,210,31,3
	.word	109919
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_CTRL_Bits',0,22,213,31,16,4,34
	.byte	'reserved_0',0,4
	.word	32144
	.byte	11,21,2,35,0,34
	.byte	'SL',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'CLK_SRC_SR',0,4
	.word	32144
	.byte	3,17,2,35,0,34
	.byte	'reserved_15',0,4
	.word	32144
	.byte	5,12,2,35,0,34
	.byte	'RST_CCU0',0,4
	.word	32144
	.byte	1,11,2,35,0,34
	.byte	'reserved_21',0,4
	.word	32144
	.byte	3,8,2,35,0,34
	.byte	'TRIGOUT',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'reserved_25',0,4
	.word	32144
	.byte	1,6,2,35,0,34
	.byte	'OSM',0,4
	.word	32144
	.byte	1,5,2,35,0,34
	.byte	'BITREV',0,4
	.word	32144
	.byte	1,4,2,35,0,34
	.byte	'SPEM',0,4
	.word	32144
	.byte	1,3,2,35,0,34
	.byte	'GCM',0,4
	.word	32144
	.byte	1,2,2,35,0,34
	.byte	'reserved_30',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CTRL_Bits',0,22,228,31,3
	.word	110022
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,22,231,31,16,4,34
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,22,236,31,3
	.word	110342
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,22,239,31,16,4,34
	.byte	'TRG_CCU0TC0',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'TRG_CCU1TC0',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,22,244,31,3
	.word	110485
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,22,247,31,16,4,34
	.byte	'IRQ_MODE',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,22,251,31,3
	.word	110634
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,22,254,31,16,4,34
	.byte	'CCU0TC',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'CCU1TC',0,4
	.word	32144
	.byte	1,30,2,35,0,34
	.byte	'reserved_2',0,4
	.word	32144
	.byte	30,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,22,131,32,3
	.word	110751
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_SR0_Bits',0,22,134,32,16,4,34
	.byte	'SR0',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_SR0_Bits',0,22,138,32,3
	.word	110888
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_SR1_Bits',0,22,141,32,16,4,34
	.byte	'SR1',0,4
	.word	32144
	.byte	16,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_SR1_Bits',0,22,145,32,3
	.word	110991
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH_STAT_Bits',0,22,148,32,16,4,34
	.byte	'OL',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	31,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_STAT_Bits',0,22,152,32,3
	.word	111094
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,22,155,32,16,4,34
	.byte	'ACT_TB',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'TB_TRIG',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TBU_SEL',0,4
	.word	32144
	.byte	2,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,22,161,32,3
	.word	111197
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,22,164,32,16,4,34
	.byte	'ENDIS_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,22,175,32,3
	.word	111351
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,22,178,32,16,4,34
	.byte	'ENDIS_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,22,189,32,3
	.word	111641
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,22,192,32,16,4,34
	.byte	'FUPD_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'FUPD_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'FUPD_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'FUPD_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'FUPD_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'FUPD_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'FUPD_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'FUPD_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'RSTCN0_CH0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'RSTCN0_CH1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'RSTCN0_CH2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'RSTCN0_CH3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'RSTCN0_CH4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'RSTCN0_CH5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'RSTCN0_CH6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'RSTCN0_CH7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,22,210,32,3
	.word	111931
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,22,213,32,16,4,34
	.byte	'HOST_TRIG',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	7,24,2,35,0,34
	.byte	'RST_CH0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'RST_CH1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'RST_CH2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'RST_CH3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'RST_CH4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'RST_CH5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'RST_CH6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'RST_CH7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'UPEN_CTRL0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'UPEN_CTRL1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'UPEN_CTRL2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'UPEN_CTRL3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'UPEN_CTRL4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'UPEN_CTRL5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'UPEN_CTRL6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'UPEN_CTRL7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,22,233,32,3
	.word	112364
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,22,236,32,16,4,34
	.byte	'INT_TRIG0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'INT_TRIG1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'INT_TRIG2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'INT_TRIG3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'INT_TRIG4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'INT_TRIG5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'INT_TRIG6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'INT_TRIG7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,22,247,32,3
	.word	112814
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,22,250,32,16,4,34
	.byte	'OUTEN_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,22,133,33,3
	.word	113084
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,22,136,33,16,4,34
	.byte	'OUTEN_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,22,147,33,3
	.word	113374
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,22,150,33,16,4,34
	.byte	'ACT_TB',0,4
	.word	32144
	.byte	24,8,2,35,0,34
	.byte	'TB_TRIG',0,4
	.word	32144
	.byte	1,7,2,35,0,34
	.byte	'TBU_SEL',0,4
	.word	32144
	.byte	2,5,2,35,0,34
	.byte	'reserved_27',0,4
	.word	32144
	.byte	5,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,22,156,33,3
	.word	113664
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,22,159,33,16,4,34
	.byte	'ENDIS_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,22,170,33,3
	.word	113818
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,22,173,33,16,4,34
	.byte	'ENDIS_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'ENDIS_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'ENDIS_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'ENDIS_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'ENDIS_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'ENDIS_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'ENDIS_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'ENDIS_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,22,184,33,3
	.word	114108
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,22,187,33,16,4,34
	.byte	'FUPD_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'FUPD_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'FUPD_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'FUPD_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'FUPD_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'FUPD_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'FUPD_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'FUPD_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'RSTCN0_CH0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'RSTCN0_CH1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'RSTCN0_CH2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'RSTCN0_CH3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'RSTCN0_CH4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'RSTCN0_CH5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'RSTCN0_CH6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'RSTCN0_CH7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,22,205,33,3
	.word	114398
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,22,208,33,16,4,34
	.byte	'HOST_TRIG',0,4
	.word	32144
	.byte	1,31,2,35,0,34
	.byte	'reserved_1',0,4
	.word	32144
	.byte	7,24,2,35,0,34
	.byte	'RST_CH0',0,4
	.word	32144
	.byte	1,23,2,35,0,34
	.byte	'RST_CH1',0,4
	.word	32144
	.byte	1,22,2,35,0,34
	.byte	'RST_CH2',0,4
	.word	32144
	.byte	1,21,2,35,0,34
	.byte	'RST_CH3',0,4
	.word	32144
	.byte	1,20,2,35,0,34
	.byte	'RST_CH4',0,4
	.word	32144
	.byte	1,19,2,35,0,34
	.byte	'RST_CH5',0,4
	.word	32144
	.byte	1,18,2,35,0,34
	.byte	'RST_CH6',0,4
	.word	32144
	.byte	1,17,2,35,0,34
	.byte	'RST_CH7',0,4
	.word	32144
	.byte	1,16,2,35,0,34
	.byte	'UPEN_CTRL0',0,4
	.word	32144
	.byte	2,14,2,35,0,34
	.byte	'UPEN_CTRL1',0,4
	.word	32144
	.byte	2,12,2,35,0,34
	.byte	'UPEN_CTRL2',0,4
	.word	32144
	.byte	2,10,2,35,0,34
	.byte	'UPEN_CTRL3',0,4
	.word	32144
	.byte	2,8,2,35,0,34
	.byte	'UPEN_CTRL4',0,4
	.word	32144
	.byte	2,6,2,35,0,34
	.byte	'UPEN_CTRL5',0,4
	.word	32144
	.byte	2,4,2,35,0,34
	.byte	'UPEN_CTRL6',0,4
	.word	32144
	.byte	2,2,2,35,0,34
	.byte	'UPEN_CTRL7',0,4
	.word	32144
	.byte	2,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,22,228,33,3
	.word	114831
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,22,231,33,16,4,34
	.byte	'INT_TRIG0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'INT_TRIG1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'INT_TRIG2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'INT_TRIG3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'INT_TRIG4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'INT_TRIG5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'INT_TRIG6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'INT_TRIG7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,22,242,33,3
	.word	115281
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,22,245,33,16,4,34
	.byte	'OUTEN_CTRL0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_CTRL1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_CTRL2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_CTRL3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_CTRL4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_CTRL5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_CTRL6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_CTRL7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,22,128,34,3
	.word	115551
	.byte	17
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,22,131,34,16,4,34
	.byte	'OUTEN_STAT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'OUTEN_STAT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'OUTEN_STAT2',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'OUTEN_STAT3',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'OUTEN_STAT4',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'OUTEN_STAT5',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'OUTEN_STAT6',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'OUTEN_STAT7',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,22,142,34,3
	.word	115841
	.byte	17
	.byte	'_Ifx_GTM_TRIGOUT_Bits',0,22,145,34,16,4,34
	.byte	'INT0',0,4
	.word	32144
	.byte	2,30,2,35,0,34
	.byte	'INT1',0,4
	.word	32144
	.byte	2,28,2,35,0,34
	.byte	'TRIG0',0,4
	.word	32144
	.byte	2,26,2,35,0,34
	.byte	'TRIG1',0,4
	.word	32144
	.byte	2,24,2,35,0,34
	.byte	'TRIG2',0,4
	.word	32144
	.byte	2,22,2,35,0,34
	.byte	'TRIG3',0,4
	.word	32144
	.byte	2,20,2,35,0,34
	.byte	'TRIG4',0,4
	.word	32144
	.byte	2,18,2,35,0,34
	.byte	'TRIG5',0,4
	.word	32144
	.byte	2,16,2,35,0,34
	.byte	'reserved_16',0,4
	.word	32144
	.byte	16,0,2,35,0,0,16
	.byte	'Ifx_GTM_TRIGOUT_Bits',0,22,156,34,3
	.word	116131
	.byte	30,22,164,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	39470
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ACCEN0',0,22,169,34,3
	.word	116347
	.byte	30,22,172,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40027
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ACCEN1',0,22,177,34,3
	.word	116411
	.byte	30,22,180,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40104
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG0OUT0',0,22,185,34,3
	.word	116475
	.byte	30,22,188,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40299
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG0OUT1',0,22,193,34,3
	.word	116545
	.byte	30,22,196,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40404
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG1OUT0',0,22,201,34,3
	.word	116615
	.byte	30,22,204,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40599
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ADCTRIG1OUT1',0,22,209,34,3
	.word	116685
	.byte	30,22,212,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40705
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_AEI_ADDR_XPT',0,22,217,34,3
	.word	116755
	.byte	30,22,220,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40835
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC',0,22,225,34,3
	.word	116825
	.byte	30,22,228,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40947
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_ARU_ACCESS',0,22,233,34,3
	.word	116897
	.byte	30,22,236,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41113
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DATA_H',0,22,241,34,3
	.word	116969
	.byte	30,22,244,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41217
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DATA_L',0,22,249,34,3
	.word	117037
	.byte	30,22,252,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41321
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0',0,22,129,35,3
	.word	117105
	.byte	30,22,132,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41434
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1',0,22,137,35,3
	.word	117178
	.byte	30,22,140,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41547
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H',0,22,145,35,3
	.word	117251
	.byte	30,22,148,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41661
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L',0,22,153,35,3
	.word	117324
	.byte	30,22,156,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41775
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H',0,22,161,35,3
	.word	117397
	.byte	30,22,164,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41889
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L',0,22,169,35,3
	.word	117470
	.byte	30,22,172,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42003
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_EN',0,22,177,35,3
	.word	117543
	.byte	30,22,180,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42172
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT',0,22,185,35,3
	.word	117611
	.byte	30,22,188,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42341
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_MODE',0,22,193,35,3
	.word	117684
	.byte	30,22,196,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42452
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY',0,22,201,35,3
	.word	117754
	.byte	30,22,204,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42608
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB',0,22,209,35,3
	.word	117826
	.byte	30,22,212,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42762
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL',0,22,217,35,3
	.word	117899
	.byte	30,22,220,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43052
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT',0,22,225,35,3
	.word	117976
	.byte	30,22,228,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43342
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL',0,22,233,35,3
	.word	118053
	.byte	30,22,236,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43775
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL',0,22,241,35,3
	.word	118129
	.byte	30,22,244,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44225
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG',0,22,249,35,3
	.word	118204
	.byte	30,22,252,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44495
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL',0,22,129,36,3
	.word	118279
	.byte	30,22,132,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44785
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT',0,22,137,36,3
	.word	118356
	.byte	30,22,140,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45075
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CM0',0,22,145,36,3
	.word	118433
	.byte	30,22,148,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45180
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CM1',0,22,153,36,3
	.word	118502
	.byte	30,22,156,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45285
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CN0',0,22,161,36,3
	.word	118571
	.byte	30,22,164,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45390
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_CTRL',0,22,169,36,3
	.word	118640
	.byte	30,22,172,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45808
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN',0,22,177,36,3
	.word	118710
	.byte	30,22,180,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45953
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT',0,22,185,36,3
	.word	118782
	.byte	30,22,188,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46102
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE',0,22,193,36,3
	.word	118859
	.byte	30,22,196,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46221
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY',0,22,201,36,3
	.word	118933
	.byte	30,22,204,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46360
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_RDADDR',0,22,209,36,3
	.word	119009
	.byte	30,22,212,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46516
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMC',0,22,217,36,3
	.word	119081
	.byte	30,22,220,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46889
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMI',0,22,225,36,3
	.word	119151
	.byte	30,22,228,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47089
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMP',0,22,233,36,3
	.word	119221
	.byte	30,22,236,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47433
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SOMS',0,22,241,36,3
	.word	119291
	.byte	30,22,244,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47690
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SR0',0,22,249,36,3
	.word	119361
	.byte	30,22,252,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47795
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_SR1',0,22,129,37,3
	.word	119430
	.byte	30,22,132,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47900
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ATOM_CH_STAT',0,22,137,37,3
	.word	119499
	.byte	30,22,140,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48112
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_EIRQ_EN',0,22,145,37,3
	.word	119569
	.byte	30,22,148,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48455
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_EN',0,22,153,37,3
	.word	119638
	.byte	30,22,156,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48796
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT',0,22,161,37,3
	.word	119706
	.byte	30,22,164,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49160
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_MODE',0,22,169,37,3
	.word	119779
	.byte	30,22,172,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49271
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY',0,22,177,37,3
	.word	119849
	.byte	30,22,180,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49581
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_RST',0,22,185,37,3
	.word	119921
	.byte	30,22,188,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49677
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC0_ADDR',0,22,193,37,3
	.word	119986
	.byte	30,22,196,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49829
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC0_DEST',0,22,201,37,3
	.word	120057
	.byte	30,22,204,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50398
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC10_ADDR',0,22,209,37,3
	.word	120128
	.byte	30,22,212,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50552
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC10_DEST',0,22,217,37,3
	.word	120200
	.byte	30,22,220,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51123
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC11_ADDR',0,22,225,37,3
	.word	120272
	.byte	30,22,228,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51277
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC11_DEST',0,22,233,37,3
	.word	120344
	.byte	30,22,236,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51848
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC1_ADDR',0,22,241,37,3
	.word	120416
	.byte	30,22,244,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52000
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC1_DEST',0,22,249,37,3
	.word	120487
	.byte	30,22,252,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52569
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC2_ADDR',0,22,129,38,3
	.word	120558
	.byte	30,22,132,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52721
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC2_DEST',0,22,137,38,3
	.word	120629
	.byte	30,22,140,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53290
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC3_ADDR',0,22,145,38,3
	.word	120700
	.byte	30,22,148,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53442
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC3_DEST',0,22,153,38,3
	.word	120771
	.byte	30,22,156,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54011
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC4_ADDR',0,22,161,38,3
	.word	120842
	.byte	30,22,164,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54163
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC4_DEST',0,22,169,38,3
	.word	120913
	.byte	30,22,172,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54732
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC5_ADDR',0,22,177,38,3
	.word	120984
	.byte	30,22,180,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54884
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC5_DEST',0,22,185,38,3
	.word	121055
	.byte	30,22,188,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55453
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC6_ADDR',0,22,193,38,3
	.word	121126
	.byte	30,22,196,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55605
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC6_DEST',0,22,201,38,3
	.word	121197
	.byte	30,22,204,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56174
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC7_ADDR',0,22,209,38,3
	.word	121268
	.byte	30,22,212,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56326
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC7_DEST',0,22,217,38,3
	.word	121339
	.byte	30,22,220,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56895
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC8_ADDR',0,22,225,38,3
	.word	121410
	.byte	30,22,228,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57047
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC8_DEST',0,22,233,38,3
	.word	121481
	.byte	30,22,236,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57616
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC9_ADDR',0,22,241,38,3
	.word	121552
	.byte	30,22,244,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57768
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC9_DEST',0,22,249,38,3
	.word	121623
	.byte	30,22,252,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58337
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_MODE',0,22,129,39,3
	.word	121694
	.byte	30,22,132,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58645
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_PTR1',0,22,137,39,3
	.word	121763
	.byte	30,22,140,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58847
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRIDGE_PTR2',0,22,145,39,3
	.word	121832
	.byte	30,22,148,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58960
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CLC',0,22,153,39,3
	.word	121901
	.byte	30,22,156,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59103
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_EIRQ_EN',0,22,161,39,3
	.word	121962
	.byte	30,22,164,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59797
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_EN',0,22,169,39,3
	.word	122031
	.byte	30,22,172,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60361
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_EN',0,22,177,39,3
	.word	122095
	.byte	30,22,180,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61029
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT',0,22,185,39,3
	.word	122163
	.byte	30,22,188,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61635
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_MODE',0,22,193,39,3
	.word	122236
	.byte	30,22,196,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61746
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY',0,22,201,39,3
	.word	122306
	.byte	30,22,204,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62254
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL',0,22,209,39,3
	.word	122378
	.byte	30,22,212,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62371
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL',0,22,217,39,3
	.word	122451
	.byte	30,22,220,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62506
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL',0,22,225,39,3
	.word	122523
	.byte	30,22,228,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62641
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_CLK_EN',0,22,233,39,3
	.word	122595
	.byte	30,22,236,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62961
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_ECLK_DEN',0,22,241,39,3
	.word	122663
	.byte	30,22,244,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63073
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_ECLK_NUM',0,22,249,39,3
	.word	122733
	.byte	30,22,252,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63185
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL',0,22,129,40,3
	.word	122803
	.byte	30,22,132,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63301
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_GCLK_DEN',0,22,137,40,3
	.word	122875
	.byte	30,22,140,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63413
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CMU_GCLK_NUM',0,22,145,40,3
	.word	122945
	.byte	30,22,148,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63525
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_CTRL',0,22,153,40,3
	.word	123015
	.byte	30,22,156,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63678
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DATAIN',0,22,161,40,3
	.word	123077
	.byte	30,22,164,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63751
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ACB',0,22,169,40,3
	.word	123141
	.byte	30,22,172,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63971
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ACT_STA',0,22,177,40,3
	.word	123207
	.byte	30,22,180,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64081
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1',0,22,185,40,3
	.word	123277
	.byte	30,22,188,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64205
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2',0,22,193,40,3
	.word	123351
	.byte	30,22,196,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64329
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1',0,22,201,40,3
	.word	123425
	.byte	30,22,204,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64450
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2',0,22,209,40,3
	.word	123498
	.byte	30,22,212,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64571
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ADT_S',0,22,217,40,3
	.word	123571
	.byte	30,22,220,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64689
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_AOSV_2',0,22,225,40,3
	.word	123639
	.byte	30,22,228,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64964
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS',0,22,233,40,3
	.word	123708
	.byte	30,22,236,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64832
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS_1C3',0,22,241,40,3
	.word	123774
	.byte	30,22,244,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65162
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APS_SYNC',0,22,249,40,3
	.word	123844
	.byte	30,22,252,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65480
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT',0,22,129,41,3
	.word	123915
	.byte	30,22,132,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65350
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT_2C',0,22,137,41,3
	.word	123981
	.byte	30,22,140,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65677
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_APT_SYNC',0,22,145,41,3
	.word	124050
	.byte	30,22,148,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65862
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_SX',0,22,153,41,3
	.word	124121
	.byte	30,22,156,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65970
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM',0,22,161,41,3
	.word	124190
	.byte	30,22,164,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66090
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_TX',0,22,169,41,3
	.word	124263
	.byte	30,22,172,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66198
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM',0,22,177,41,3
	.word	124332
	.byte	30,22,180,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66318
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CNT_NUM1',0,22,185,41,3
	.word	124405
	.byte	30,22,188,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66433
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CNT_NUM2',0,22,193,41,3
	.word	124476
	.byte	30,22,196,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66548
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE',0,22,201,41,3
	.word	124547
	.byte	30,22,204,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66822
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0',0,22,209,41,3
	.word	124629
	.byte	30,22,212,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67054
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE',0,22,217,41,3
	.word	124698
	.byte	30,22,220,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67298
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER',0,22,225,41,3
	.word	124780
	.byte	30,22,228,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67531
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_1',0,22,233,41,3
	.word	124864
	.byte	30,22,236,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67958
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER',0,22,241,41,3
	.word	124933
	.byte	30,22,244,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68192
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_2',0,22,249,41,3
	.word	125017
	.byte	30,22,252,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68560
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_3',0,22,129,42,3
	.word	125086
	.byte	30,22,132,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68940
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_CTRL_4',0,22,137,42,3
	.word	125155
	.byte	30,22,140,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69324
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DLA',0,22,145,42,3
	.word	125224
	.byte	30,22,148,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69537
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_S',0,22,153,42,3
	.word	125290
	.byte	30,22,156,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69423
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_S_ACT',0,22,161,42,3
	.word	125357
	.byte	30,22,164,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69639
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DT_T_ACT',0,22,169,42,3
	.word	125428
	.byte	30,22,172,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69753
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_DTA',0,22,177,42,3
	.word	125499
	.byte	30,22,181,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69852
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EDT_S',0,22,186,42,3
	.word	125565
	.byte	30,22,190,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69957
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EDT_T',0,22,195,42,3
	.word	125633
	.byte	30,22,198,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70062
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_EIRQ_EN',0,22,203,42,3
	.word	125701
	.byte	30,22,206,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70793
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_FTV_S',0,22,211,42,3
	.word	125771
	.byte	30,22,214,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70901
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_FTV_T',0,22,219,42,3
	.word	125839
	.byte	30,22,222,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71011
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_ID_PMTR',0,22,227,42,3
	.word	125907
	.byte	30,22,230,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71123
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_INC_CNT1',0,22,235,42,3
	.word	125977
	.byte	30,22,239,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71237
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_INC_CNT2',0,22,244,42,3
	.word	126048
	.byte	30,22,247,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71351
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_EN',0,22,252,42,3
	.word	126119
	.byte	30,22,255,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72055
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT',0,22,132,43,3
	.word	126188
	.byte	30,22,135,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72706
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_MODE',0,22,140,43,3
	.word	126262
	.byte	30,22,143,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72819
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY',0,22,148,43,3
	.word	126333
	.byte	30,22,152,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73356
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MEDT_S',0,22,157,43,3
	.word	126406
	.byte	30,22,161,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73464
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MEDT_T',0,22,166,43,3
	.word	126475
	.byte	30,22,169,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73572
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MLS1',0,22,174,43,3
	.word	126544
	.byte	30,22,177,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73674
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MLS2',0,22,182,43,3
	.word	126611
	.byte	30,22,186,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73776
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MPVAL1',0,22,191,43,3
	.word	126678
	.byte	30,22,195,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73900
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_MPVAL2',0,22,200,43,3
	.word	126747
	.byte	30,22,203,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74024
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NA',0,22,208,43,3
	.word	126816
	.byte	30,22,211,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74134
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S',0,22,216,43,3
	.word	126881
	.byte	30,22,219,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74239
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR',0,22,224,43,3
	.word	126949
	.byte	30,22,227,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74356
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD',0,22,232,43,3
	.word	127021
	.byte	30,22,235,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74485
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T',0,22,240,43,3
	.word	127097
	.byte	30,22,243,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74590
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR',0,22,248,43,3
	.word	127165
	.byte	30,22,251,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74707
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD',0,22,128,44,3
	.word	127237
	.byte	30,22,131,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74836
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NTI_CNT',0,22,136,44,3
	.word	127313
	.byte	30,22,139,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74947
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NUSC',0,22,144,44,3
	.word	127383
	.byte	30,22,147,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75165
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_NUTC',0,22,152,44,3
	.word	127450
	.byte	30,22,155,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75406
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_OSW',0,22,160,44,3
	.word	127517
	.byte	30,22,163,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75563
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PDT_T',0,22,168,44,3
	.word	127583
	.byte	30,22,171,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75679
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSA',0,22,176,44,3
	.word	127651
	.byte	30,22,179,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75778
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSAC',0,22,184,44,3
	.word	127717
	.byte	30,22,187,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75880
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSC',0,22,192,44,3
	.word	127784
	.byte	30,22,195,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75982
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSM_0',0,22,200,44,3
	.word	127851
	.byte	30,22,203,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76088
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSSM_1',0,22,208,44,3
	.word	127920
	.byte	30,22,211,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76194
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTC',0,22,216,44,3
	.word	127989
	.byte	30,22,219,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76296
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTM_0',0,22,224,44,3
	.word	128056
	.byte	30,22,227,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76402
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PSTM_1',0,22,232,44,3
	.word	128125
	.byte	30,22,235,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76508
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_PVT',0,22,240,44,3
	.word	128194
	.byte	30,22,243,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76607
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RAM_INI',0,22,248,44,3
	.word	128260
	.byte	30,22,251,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76796
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_SX',0,22,128,45,3
	.word	128330
	.byte	30,22,132,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76907
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM',0,22,137,45,3
	.word	128400
	.byte	30,22,140,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77030
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_TX',0,22,145,45,3
	.word	128474
	.byte	30,22,149,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77141
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM',0,22,154,45,3
	.word	128544
	.byte	30,22,157,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77381
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_S',0,22,162,45,3
	.word	128618
	.byte	30,22,165,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77264
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT',0,22,170,45,3
	.word	128686
	.byte	30,22,173,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77486
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT',0,22,178,45,3
	.word	128758
	.byte	30,22,181,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77603
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_SLR',0,22,186,45,3
	.word	128830
	.byte	30,22,189,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77701
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_STATUS',0,22,194,45,3
	.word	128896
	.byte	30,22,197,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78282
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S',0,22,202,45,3
	.word	128965
	.byte	30,22,205,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78399
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T',0,22,210,45,3
	.word	129037
	.byte	30,22,213,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78516
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THMA',0,22,218,45,3
	.word	129109
	.byte	30,22,221,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78618
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THMI',0,22,226,45,3
	.word	129176
	.byte	30,22,229,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78720
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_THVAL',0,22,234,45,3
	.word	129243
	.byte	30,22,237,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78825
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TLR',0,22,242,45,3
	.word	129311
	.byte	30,22,245,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78923
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TOV',0,22,250,45,3
	.word	129377
	.byte	30,22,253,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79035
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TOV_S',0,22,130,46,3
	.word	129443
	.byte	30,22,133,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79151
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_S_0',0,22,138,46,3
	.word	129511
	.byte	30,22,141,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79261
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_S_1',0,22,146,46,3
	.word	129580
	.byte	30,22,149,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79371
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_T_0',0,22,154,46,3
	.word	129649
	.byte	30,22,157,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79483
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TS_T_1',0,22,162,46,3
	.word	129718
	.byte	30,22,165,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79595
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TSAC',0,22,170,46,3
	.word	129787
	.byte	30,22,173,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79697
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DPLL_TSF_S',0,22,178,46,3
	.word	129854
	.byte	30,22,181,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79802
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DXINCON',0,22,186,46,3
	.word	129922
	.byte	30,22,189,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80216
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_DXOUTCON',0,22,194,46,3
	.word	129987
	.byte	30,22,197,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80458
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_EIRQ_EN',0,22,202,46,3
	.word	130053
	.byte	30,22,205,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80662
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_ENABLE',0,22,210,46,3
	.word	130118
	.byte	30,22,213,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80902
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO',0,22,218,46,3
	.word	130186
	.byte	30,22,221,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81027
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG',0,22,226,46,3
	.word	130265
	.byte	30,22,229,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81185
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_CTRL',0,22,234,46,3
	.word	130341
	.byte	30,22,237,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81341
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN',0,22,242,46,3
	.word	130411
	.byte	30,22,245,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81551
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR',0,22,250,46,3
	.word	130484
	.byte	30,22,253,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81667
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL',0,22,130,47,3
	.word	130558
	.byte	30,22,133,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81788
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN',0,22,138,47,3
	.word	130634
	.byte	30,22,141,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81994
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT',0,22,146,47,3
	.word	130706
	.byte	30,22,149,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82198
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE',0,22,154,47,3
	.word	130783
	.byte	30,22,157,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82367
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY',0,22,162,47,3
	.word	130857
	.byte	30,22,165,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82553
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM',0,22,170,47,3
	.word	130933
	.byte	30,22,173,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82669
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR',0,22,178,47,3
	.word	131007
	.byte	30,22,181,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82781
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR',0,22,186,47,3
	.word	131079
	.byte	30,22,189,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82901
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_STATUS',0,22,194,47,3
	.word	131155
	.byte	30,22,197,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83064
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM',0,22,202,47,3
	.word	131227
	.byte	30,22,205,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83180
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR',0,22,210,47,3
	.word	131301
	.byte	30,22,213,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83292
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_0',0,22,218,47,3
	.word	131373
	.byte	30,22,221,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84065
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_1',0,22,226,47,3
	.word	131441
	.byte	30,22,229,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83776
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_10',0,22,234,47,3
	.word	131509
	.byte	30,22,237,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84806
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_2',0,22,242,47,3
	.word	131578
	.byte	30,22,245,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	85639
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_4',0,22,250,47,3
	.word	131646
	.byte	30,22,253,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	86472
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_6',0,22,130,48,3
	.word	131714
	.byte	30,22,133,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	87317
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_7',0,22,138,48,3
	.word	131782
	.byte	30,22,141,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	87795
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_9',0,22,146,48,3
	.word	131850
	.byte	30,22,149,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	88660
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI0',0,22,154,48,3
	.word	131918
	.byte	30,22,157,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	88961
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI1',0,22,162,48,3
	.word	131989
	.byte	30,22,165,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	89831
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_CEI3',0,22,170,48,3
	.word	132060
	.byte	30,22,173,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	90702
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ICM_IRQG_MEI',0,22,178,48,3
	.word	132131
	.byte	30,22,181,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91197
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL',0,22,186,48,3
	.word	132201
	.byte	30,22,189,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91408
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL',0,22,194,48,3
	.word	132278
	.byte	30,22,197,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91637
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0',0,22,202,48,3
	.word	132356
	.byte	30,22,205,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91958
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0',0,22,210,48,3
	.word	132436
	.byte	30,22,213,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92164
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL',0,22,218,48,3
	.word	132515
	.byte	30,22,221,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92379
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL',0,22,226,48,3
	.word	132594
	.byte	30,22,229,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92720
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL',0,22,234,48,3
	.word	132669
	.byte	30,22,237,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92945
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_EN',0,22,242,48,3
	.word	132745
	.byte	30,22,245,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93143
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_FORCINT',0,22,250,48,3
	.word	132809
	.byte	30,22,253,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93339
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_MODE',0,22,130,49,3
	.word	132878
	.byte	30,22,133,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93442
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_IRQ_NOTIFY',0,22,138,49,3
	.word	132944
	.byte	30,22,141,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93620
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_KRST0',0,22,146,49,3
	.word	133012
	.byte	30,22,149,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93731
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_KRST1',0,22,154,49,3
	.word	133075
	.byte	30,22,157,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93823
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_KRSTCLR',0,22,162,49,3
	.word	133138
	.byte	30,22,165,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93919
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MAP_CTRL',0,22,170,49,3
	.word	133203
	.byte	30,22,173,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94349
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCFG_CTRL',0,22,178,49,3
	.word	133269
	.byte	30,22,181,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94498
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH0_CTRG',0,22,186,49,3
	.word	133336
	.byte	30,22,189,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94852
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH0_STRG',0,22,194,49,3
	.word	133406
	.byte	30,22,197,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95206
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_ACB',0,22,202,49,3
	.word	133476
	.byte	30,22,205,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95373
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_CTRL',0,22,210,49,3
	.word	133544
	.byte	30,22,213,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95653
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN',0,22,218,49,3
	.word	133613
	.byte	30,22,221,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95825
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN',0,22,226,49,3
	.word	133685
	.byte	30,22,229,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95992
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT',0,22,234,49,3
	.word	133756
	.byte	30,22,237,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96172
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE',0,22,242,49,3
	.word	133832
	.byte	30,22,245,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96289
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY',0,22,250,49,3
	.word	133905
	.byte	30,22,253,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96455
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_PC',0,22,130,50,3
	.word	133980
	.byte	30,22,133,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96555
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R0',0,22,138,50,3
	.word	134047
	.byte	30,22,141,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96657
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R1',0,22,146,50,3
	.word	134114
	.byte	30,22,149,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96759
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R2',0,22,154,50,3
	.word	134181
	.byte	30,22,157,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96861
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R3',0,22,162,50,3
	.word	134248
	.byte	30,22,165,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96963
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R4',0,22,170,50,3
	.word	134315
	.byte	30,22,173,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97065
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R5',0,22,178,50,3
	.word	134382
	.byte	30,22,181,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97167
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R6',0,22,186,50,3
	.word	134449
	.byte	30,22,189,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97269
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CH_R7',0,22,194,50,3
	.word	134516
	.byte	30,22,197,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97371
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_CTRL',0,22,202,50,3
	.word	134583
	.byte	30,22,205,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97535
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_ERR',0,22,210,50,3
	.word	134649
	.byte	30,22,213,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97744
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCS_RST',0,22,218,50,3
	.word	134714
	.byte	30,22,221,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98210
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCSINTCLR',0,22,226,50,3
	.word	134779
	.byte	30,22,229,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98584
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MCSINTSTAT',0,22,234,50,3
	.word	134846
	.byte	30,22,237,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98960
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MON_ACTIVITY_0',0,22,242,50,3
	.word	134914
	.byte	30,22,245,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	99641
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MON_STATUS',0,22,250,50,3
	.word	134986
	.byte	30,22,253,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100144
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCIN_INHCON',0,22,130,51,3
	.word	135054
	.byte	30,22,133,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100475
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCIN_INLCON',0,22,138,51,3
	.word	135124
	.byte	30,22,141,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100806
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON0',0,22,146,51,3
	.word	135194
	.byte	30,22,149,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101028
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON1',0,22,154,51,3
	.word	135263
	.byte	30,22,157,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101250
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON2',0,22,162,51,3
	.word	135332
	.byte	30,22,165,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101474
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_MSCSET_CON3',0,22,170,51,3
	.word	135401
	.byte	30,22,173,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101700
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OCS',0,22,178,51,3
	.word	135470
	.byte	30,22,181,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101846
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_ODA',0,22,186,51,3
	.word	135531
	.byte	30,22,189,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101952
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU0T',0,22,194,51,3
	.word	135592
	.byte	30,22,197,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102083
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU1T',0,22,202,51,3
	.word	135656
	.byte	30,22,205,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102214
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTBU2T',0,22,210,51,3
	.word	135720
	.byte	30,22,213,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102345
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTSC0',0,22,218,51,3
	.word	135784
	.byte	30,22,221,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102627
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTSC1',0,22,226,51,3
	.word	135847
	.byte	30,22,229,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102771
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_OTSS',0,22,234,51,3
	.word	135910
	.byte	30,22,237,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102943
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_REV',0,22,242,51,3
	.word	135972
	.byte	30,22,245,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103121
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_RST',0,22,250,51,3
	.word	136033
	.byte	30,22,253,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103209
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CMP',0,22,130,52,3
	.word	136094
	.byte	30,22,133,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103306
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CNT',0,22,138,52,3
	.word	136159
	.byte	30,22,141,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103403
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_CTRL_STAT',0,22,146,52,3
	.word	136224
	.byte	30,22,149,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103757
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_EIRQ_EN',0,22,154,52,3
	.word	136295
	.byte	30,22,157,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103985
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_EN',0,22,162,52,3
	.word	136364
	.byte	30,22,165,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104206
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT',0,22,170,52,3
	.word	136432
	.byte	30,22,173,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104422
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_MODE',0,22,178,52,3
	.word	136505
	.byte	30,22,181,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104533
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY',0,22,186,52,3
	.word	136575
	.byte	30,22,189,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104727
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_OUT_CTRL',0,22,194,52,3
	.word	136647
	.byte	30,22,197,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104843
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_OUT_PAT',0,22,202,52,3
	.word	136717
	.byte	30,22,205,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104956
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_SPE_PAT',0,22,210,52,3
	.word	136786
	.byte	30,22,213,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105319
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH0_BASE',0,22,218,52,3
	.word	136851
	.byte	30,22,221,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105427
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH0_CTRL',0,22,226,52,3
	.word	136921
	.byte	30,22,229,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105559
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH1_BASE',0,22,234,52,3
	.word	136991
	.byte	30,22,237,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105667
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH1_CTRL',0,22,242,52,3
	.word	137061
	.byte	30,22,245,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105799
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH2_BASE',0,22,250,52,3
	.word	137131
	.byte	30,22,253,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105907
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CH2_CTRL',0,22,130,53,3
	.word	137201
	.byte	30,22,133,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106039
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TBU_CHEN',0,22,138,53,3
	.word	137271
	.byte	30,22,141,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106185
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC',0,22,146,53,3
	.word	137337
	.byte	30,22,149,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106432
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CNT',0,22,154,53,3
	.word	137409
	.byte	30,22,157,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106535
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CNTS',0,22,162,53,3
	.word	137477
	.byte	30,22,165,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106634
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_CTRL',0,22,170,53,3
	.word	137546
	.byte	30,22,173,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107177
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_ECNT',0,22,178,53,3
	.word	137615
	.byte	30,22,181,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107283
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_ECTRL',0,22,186,53,3
	.word	137684
	.byte	30,22,189,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107397
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN',0,22,194,53,3
	.word	137754
	.byte	30,22,197,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107651
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_FLT_FE',0,22,202,53,3
	.word	137826
	.byte	30,22,205,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107763
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_FLT_RE',0,22,210,53,3
	.word	137897
	.byte	30,22,213,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107875
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_GPR0',0,22,218,53,3
	.word	137968
	.byte	30,22,221,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107974
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_GPR1',0,22,226,53,3
	.word	138037
	.byte	30,22,229,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108073
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN',0,22,234,53,3
	.word	138106
	.byte	30,22,237,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108319
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT',0,22,242,53,3
	.word	138177
	.byte	30,22,245,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108557
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE',0,22,250,53,3
	.word	138253
	.byte	30,22,253,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108674
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY',0,22,130,54,3
	.word	138326
	.byte	30,22,133,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108886
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_TDUC',0,22,138,54,3
	.word	138401
	.byte	30,22,141,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108993
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_CH_TDUV',0,22,146,54,3
	.word	138470
	.byte	30,22,149,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109135
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_IN_SRC',0,22,154,54,3
	.word	138539
	.byte	30,22,157,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109480
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TIM_RST',0,22,162,54,3
	.word	138607
	.byte	30,22,165,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109713
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CM0',0,22,170,54,3
	.word	138672
	.byte	30,22,173,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109816
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CM1',0,22,178,54,3
	.word	138740
	.byte	30,22,181,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109919
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CN0',0,22,186,54,3
	.word	138808
	.byte	30,22,189,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110022
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_CTRL',0,22,194,54,3
	.word	138876
	.byte	30,22,197,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110342
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN',0,22,202,54,3
	.word	138945
	.byte	30,22,205,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110485
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT',0,22,210,54,3
	.word	139016
	.byte	30,22,213,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110634
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE',0,22,218,54,3
	.word	139092
	.byte	30,22,221,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110751
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY',0,22,226,54,3
	.word	139165
	.byte	30,22,229,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110888
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_SR0',0,22,234,54,3
	.word	139240
	.byte	30,22,237,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110991
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_SR1',0,22,242,54,3
	.word	139308
	.byte	30,22,245,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111094
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_CH_STAT',0,22,250,54,3
	.word	139376
	.byte	30,22,253,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111197
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB',0,22,130,55,3
	.word	139445
	.byte	30,22,133,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111351
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL',0,22,138,55,3
	.word	139518
	.byte	30,22,141,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111641
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT',0,22,146,55,3
	.word	139595
	.byte	30,22,149,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111931
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL',0,22,154,55,3
	.word	139672
	.byte	30,22,157,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112364
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL',0,22,162,55,3
	.word	139748
	.byte	30,22,165,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112814
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG',0,22,170,55,3
	.word	139823
	.byte	30,22,173,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113084
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL',0,22,178,55,3
	.word	139898
	.byte	30,22,181,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113374
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT',0,22,186,55,3
	.word	139975
	.byte	30,22,189,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113664
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB',0,22,194,55,3
	.word	140052
	.byte	30,22,197,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113818
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL',0,22,202,55,3
	.word	140125
	.byte	30,22,205,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114108
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT',0,22,210,55,3
	.word	140202
	.byte	30,22,213,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114398
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL',0,22,218,55,3
	.word	140279
	.byte	30,22,221,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114831
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL',0,22,226,55,3
	.word	140355
	.byte	30,22,229,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115281
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG',0,22,234,55,3
	.word	140430
	.byte	30,22,237,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115551
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL',0,22,242,55,3
	.word	140505
	.byte	30,22,245,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115841
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT',0,22,250,55,3
	.word	140582
	.byte	30,22,253,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116131
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_TRIGOUT',0,22,130,56,3
	.word	140659
	.byte	18,12
	.word	133
	.byte	19,11,0,17
	.byte	'_Ifx_GTM_AFD_CH',0,22,141,56,25,16,9
	.byte	'BUF_ACC',0
	.word	116825
	.byte	4,2,35,0,9
	.byte	'reserved_4',0
	.word	140724
	.byte	12,2,35,4,0,33
	.word	140733
	.byte	16
	.byte	'Ifx_GTM_AFD_CH',0,22,145,56,3
	.word	140793
	.byte	18,32
	.word	133
	.byte	19,31,0,17
	.byte	'_Ifx_GTM_ATOM_AGC',0,22,148,56,25,64,9
	.byte	'GLB_CTRL',0
	.word	118129
	.byte	4,2,35,0,9
	.byte	'ENDIS_CTRL',0
	.word	117899
	.byte	4,2,35,4,9
	.byte	'ENDIS_STAT',0
	.word	117976
	.byte	4,2,35,8,9
	.byte	'ACT_TB',0
	.word	117826
	.byte	4,2,35,12,9
	.byte	'OUTEN_CTRL',0
	.word	118279
	.byte	4,2,35,16,9
	.byte	'OUTEN_STAT',0
	.word	118356
	.byte	4,2,35,20,9
	.byte	'FUPD_CTRL',0
	.word	118053
	.byte	4,2,35,24,9
	.byte	'INT_TRIG',0
	.word	118204
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	140822
	.byte	32,2,35,32,0,33
	.word	140831
	.byte	16
	.byte	'Ifx_GTM_ATOM_AGC',0,22,159,56,3
	.word	141028
	.byte	30,22,165,56,5,4,9
	.byte	'CTRL',0
	.word	118640
	.byte	4,2,35,0,9
	.byte	'SOMC',0
	.word	119081
	.byte	4,2,35,0,9
	.byte	'SOMI',0
	.word	119151
	.byte	4,2,35,0,9
	.byte	'SOMP',0
	.word	119221
	.byte	4,2,35,0,9
	.byte	'SOMS',0
	.word	119291
	.byte	4,2,35,0,0,18,16
	.word	133
	.byte	19,15,0,17
	.byte	'_Ifx_GTM_ATOM_CH',0,22,162,56,25,64,9
	.byte	'RDADDR',0
	.word	119009
	.byte	4,2,35,0,35
	.word	141059
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	119361
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	119430
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	118433
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	118502
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	118571
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	119499
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	118933
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	118710
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	118782
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	118859
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	141136
	.byte	16,2,35,48,0,33
	.word	141145
	.byte	16
	.byte	'Ifx_GTM_ATOM_CH',0,22,185,56,3
	.word	141369
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK0_5',0,22,188,56,25,4,9
	.byte	'CTRL',0
	.word	122378
	.byte	4,2,35,0,0,33
	.word	141399
	.byte	16
	.byte	'Ifx_GTM_CMU_CLK0_5',0,22,191,56,3
	.word	141440
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK_6',0,22,194,56,25,4,9
	.byte	'CTRL',0
	.word	122451
	.byte	4,2,35,0,0,33
	.word	141473
	.byte	16
	.byte	'Ifx_GTM_CMU_CLK_6',0,22,197,56,3
	.word	141513
	.byte	17
	.byte	'_Ifx_GTM_CMU_CLK_7',0,22,200,56,25,4,9
	.byte	'CTRL',0
	.word	122523
	.byte	4,2,35,0,0,33
	.word	141545
	.byte	16
	.byte	'Ifx_GTM_CMU_CLK_7',0,22,203,56,3
	.word	141585
	.byte	17
	.byte	'_Ifx_GTM_CMU_ECLK',0,22,206,56,25,8,9
	.byte	'NUM',0
	.word	122733
	.byte	4,2,35,0,9
	.byte	'DEN',0
	.word	122663
	.byte	4,2,35,4,0,33
	.word	141617
	.byte	16
	.byte	'Ifx_GTM_CMU_ECLK',0,22,210,56,3
	.word	141668
	.byte	17
	.byte	'_Ifx_GTM_CMU_FXCLK',0,22,213,56,25,4,9
	.byte	'CTRL',0
	.word	122803
	.byte	4,2,35,0,0,33
	.word	141699
	.byte	16
	.byte	'Ifx_GTM_CMU_FXCLK',0,22,216,56,3
	.word	141739
	.byte	17
	.byte	'_Ifx_GTM_F2A_RD_CH',0,22,219,56,25,4,9
	.byte	'ARU_RD_FIFO',0
	.word	130186
	.byte	4,2,35,0,0,33
	.word	141771
	.byte	16
	.byte	'Ifx_GTM_F2A_RD_CH',0,22,222,56,3
	.word	141818
	.byte	17
	.byte	'_Ifx_GTM_F2A_STR_CH',0,22,225,56,25,4,9
	.byte	'STR_CFG',0
	.word	130265
	.byte	4,2,35,0,0,33
	.word	141850
	.byte	16
	.byte	'Ifx_GTM_F2A_STR_CH',0,22,228,56,3
	.word	141894
	.byte	18,8
	.word	133
	.byte	19,7,0,17
	.byte	'_Ifx_GTM_FIFO_CH',0,22,231,56,25,64,9
	.byte	'CTRL',0
	.word	130341
	.byte	4,2,35,0,9
	.byte	'END_ADDR',0
	.word	130484
	.byte	4,2,35,4,9
	.byte	'START_ADDR',0
	.word	131079
	.byte	4,2,35,8,9
	.byte	'UPPER_WM',0
	.word	131227
	.byte	4,2,35,12,9
	.byte	'LOWER_WM',0
	.word	130933
	.byte	4,2,35,16,9
	.byte	'STATUS',0
	.word	131155
	.byte	4,2,35,20,9
	.byte	'FILL_LEVEL',0
	.word	130558
	.byte	4,2,35,24,9
	.byte	'WR_PTR',0
	.word	131301
	.byte	4,2,35,28,9
	.byte	'RD_PTR',0
	.word	131007
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	130857
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	130634
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	130706
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	130783
	.byte	4,2,35,48,9
	.byte	'EIRQ_EN',0
	.word	130411
	.byte	4,2,35,52,9
	.byte	'reserved_38',0
	.word	141927
	.byte	8,2,35,56,0,33
	.word	141936
	.byte	16
	.byte	'Ifx_GTM_FIFO_CH',0,22,248,56,3
	.word	142229
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_CAN',0,22,251,56,25,4,9
	.byte	'OUTSEL',0
	.word	132201
	.byte	4,2,35,0,0,33
	.word	142259
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_CAN',0,22,254,56,3
	.word	142304
	.byte	18,12
	.word	132278
	.byte	19,2,0,18,4
	.word	133
	.byte	19,3,0,17
	.byte	'_Ifx_GTM_INOUTSEL_DSADC',0,22,129,57,25,24,9
	.byte	'INSEL',0
	.word	142339
	.byte	12,2,35,0,9
	.byte	'OUTSEL00',0
	.word	132356
	.byte	4,2,35,12,9
	.byte	'reserved_10',0
	.word	142348
	.byte	4,2,35,16,9
	.byte	'OUTSEL10',0
	.word	132356
	.byte	4,2,35,20,0,33
	.word	142357
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_DSADC',0,22,135,57,3
	.word	142460
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_PSI5',0,22,138,57,25,4,9
	.byte	'OUTSEL0',0
	.word	132436
	.byte	4,2,35,0,0,33
	.word	142497
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_PSI5',0,22,141,57,3
	.word	142544
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S',0,22,144,57,25,4,9
	.byte	'OUTSEL',0
	.word	132515
	.byte	4,2,35,0,0,33
	.word	142580
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_PSI5S',0,22,147,57,3
	.word	142627
	.byte	18,60
	.word	132594
	.byte	19,14,0,17
	.byte	'_Ifx_GTM_INOUTSEL_T',0,22,150,57,25,60,9
	.byte	'OUTSEL',0
	.word	142664
	.byte	60,2,35,0,0,33
	.word	142673
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_T',0,22,153,57,3
	.word	142716
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL_TIM',0,22,156,57,25,4,9
	.byte	'INSEL',0
	.word	132669
	.byte	4,2,35,0,0,33
	.word	142749
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL_TIM',0,22,159,57,3
	.word	142793
	.byte	18,24
	.word	133
	.byte	19,23,0,18,40
	.word	133
	.byte	19,39,0,17
	.byte	'_Ifx_GTM_MCS_CH',0,22,162,57,25,128,1,9
	.byte	'R0',0
	.word	134047
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	134114
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	134181
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	134248
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	134315
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	134382
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	134449
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	134516
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	133544
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	133476
	.byte	4,2,35,36,9
	.byte	'reserved_28',0
	.word	142828
	.byte	24,2,35,40,9
	.byte	'PC',0
	.word	133980
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	133905
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	133685
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	133756
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	133832
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	133613
	.byte	4,2,35,84,9
	.byte	'reserved_58',0
	.word	142837
	.byte	40,2,35,88,0,33
	.word	142846
	.byte	16
	.byte	'Ifx_GTM_MCS_CH',0,22,182,57,3
	.word	143139
	.byte	17
	.byte	'_Ifx_GTM_MCS_CH0',0,22,185,57,25,88,9
	.byte	'R0',0
	.word	134047
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	134114
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	134181
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	134248
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	134315
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	134382
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	134449
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	134516
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	133544
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	133476
	.byte	4,2,35,36,9
	.byte	'CTRG',0
	.word	133336
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	133406
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	141136
	.byte	16,2,35,48,9
	.byte	'PC',0
	.word	133980
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	133905
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	133685
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	133756
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	133832
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	133613
	.byte	4,2,35,84,0,33
	.word	143168
	.byte	16
	.byte	'Ifx_GTM_MCS_CH0',0,22,206,57,3
	.word	143468
	.byte	18,56
	.word	133
	.byte	19,55,0,17
	.byte	'_Ifx_GTM_TIM_CH',0,22,209,57,25,120,9
	.byte	'GPR0',0
	.word	137968
	.byte	4,2,35,0,9
	.byte	'GPR1',0
	.word	138037
	.byte	4,2,35,4,9
	.byte	'CNT',0
	.word	137409
	.byte	4,2,35,8,9
	.byte	'ECNT',0
	.word	137615
	.byte	4,2,35,12,9
	.byte	'CNTS',0
	.word	137477
	.byte	4,2,35,16,9
	.byte	'TDUC',0
	.word	138401
	.byte	4,2,35,20,9
	.byte	'TDUV',0
	.word	138470
	.byte	4,2,35,24,9
	.byte	'FLT_RE',0
	.word	137897
	.byte	4,2,35,28,9
	.byte	'FLT_FE',0
	.word	137826
	.byte	4,2,35,32,9
	.byte	'CTRL',0
	.word	137546
	.byte	4,2,35,36,9
	.byte	'ECTRL',0
	.word	137684
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	138326
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	138106
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	138177
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	138253
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	137754
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	143498
	.byte	56,2,35,64,0,33
	.word	143507
	.byte	16
	.byte	'Ifx_GTM_TIM_CH',0,22,228,57,3
	.word	143801
	.byte	17
	.byte	'_Ifx_GTM_TOM_CH',0,22,231,57,25,48,9
	.byte	'CTRL',0
	.word	138876
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	139240
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	139308
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	138672
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	138740
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	138808
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	139376
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	139165
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	138945
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	139016
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	139092
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	142348
	.byte	4,2,35,44,0,33
	.word	143830
	.byte	16
	.byte	'Ifx_GTM_TOM_CH',0,22,245,57,3
	.word	144042
	.byte	18,128,1
	.word	140733
	.byte	19,7,0,33
	.word	144071
	.byte	17
	.byte	'_Ifx_GTM_AFD',0,22,130,58,25,128,1,9
	.byte	'CH',0
	.word	144081
	.byte	128,1,2,35,0,0,33
	.word	144086
	.byte	16
	.byte	'Ifx_GTM_AFD',0,22,133,58,3
	.word	144120
	.byte	17
	.byte	'_Ifx_GTM_ARU',0,22,136,58,25,52,9
	.byte	'ARU_ACCESS',0
	.word	116897
	.byte	4,2,35,0,9
	.byte	'DATA_H',0
	.word	116969
	.byte	4,2,35,4,9
	.byte	'DATA_L',0
	.word	117037
	.byte	4,2,35,8,9
	.byte	'DBG_ACCESS0',0
	.word	117105
	.byte	4,2,35,12,9
	.byte	'DBG_DATA0_H',0
	.word	117251
	.byte	4,2,35,16,9
	.byte	'DBG_DATA0_L',0
	.word	117324
	.byte	4,2,35,20,9
	.byte	'DBG_ACCESS1',0
	.word	117178
	.byte	4,2,35,24,9
	.byte	'DBG_DATA1_H',0
	.word	117397
	.byte	4,2,35,28,9
	.byte	'DBG_DATA1_L',0
	.word	117470
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	117754
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	117543
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	117611
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	117684
	.byte	4,2,35,48,0,33
	.word	144146
	.byte	16
	.byte	'Ifx_GTM_ARU',0,22,151,58,3
	.word	144419
	.byte	33
	.word	141145
	.byte	33
	.word	140831
	.byte	33
	.word	141145
	.byte	18,64
	.word	133
	.byte	19,63,0,33
	.word	141145
	.byte	33
	.word	141145
	.byte	33
	.word	141145
	.byte	33
	.word	141145
	.byte	33
	.word	141145
	.byte	33
	.word	141145
	.byte	18,192,8
	.word	133
	.byte	19,191,8,0,17
	.byte	'_Ifx_GTM_ATOM',0,22,154,58,25,128,16,9
	.byte	'CH0',0
	.word	144445
	.byte	64,2,35,0,9
	.byte	'AGC',0
	.word	144450
	.byte	64,2,35,64,9
	.byte	'CH1',0
	.word	144455
	.byte	64,3,35,128,1,9
	.byte	'reserved_C0',0
	.word	144460
	.byte	64,3,35,192,1,9
	.byte	'CH2',0
	.word	144469
	.byte	64,3,35,128,2,9
	.byte	'reserved_140',0
	.word	144460
	.byte	64,3,35,192,2,9
	.byte	'CH3',0
	.word	144474
	.byte	64,3,35,128,3,9
	.byte	'reserved_1C0',0
	.word	144460
	.byte	64,3,35,192,3,9
	.byte	'CH4',0
	.word	144479
	.byte	64,3,35,128,4,9
	.byte	'reserved_240',0
	.word	144460
	.byte	64,3,35,192,4,9
	.byte	'CH5',0
	.word	144484
	.byte	64,3,35,128,5,9
	.byte	'reserved_2C0',0
	.word	144460
	.byte	64,3,35,192,5,9
	.byte	'CH6',0
	.word	144489
	.byte	64,3,35,128,6,9
	.byte	'reserved_340',0
	.word	144460
	.byte	64,3,35,192,6,9
	.byte	'CH7',0
	.word	144494
	.byte	64,3,35,128,7,9
	.byte	'reserved_3C0',0
	.word	144499
	.byte	192,8,3,35,192,7,0,33
	.word	144510
	.byte	16
	.byte	'Ifx_GTM_ATOM',0,22,172,58,3
	.word	144817
	.byte	17
	.byte	'_Ifx_GTM_BRC',0,22,175,58,25,120,9
	.byte	'SRC0_ADDR',0
	.word	119986
	.byte	4,2,35,0,9
	.byte	'SRC0_DEST',0
	.word	120057
	.byte	4,2,35,4,9
	.byte	'SRC1_ADDR',0
	.word	120416
	.byte	4,2,35,8,9
	.byte	'SRC1_DEST',0
	.word	120487
	.byte	4,2,35,12,9
	.byte	'SRC2_ADDR',0
	.word	120558
	.byte	4,2,35,16,9
	.byte	'SRC2_DEST',0
	.word	120629
	.byte	4,2,35,20,9
	.byte	'SRC3_ADDR',0
	.word	120700
	.byte	4,2,35,24,9
	.byte	'SRC3_DEST',0
	.word	120771
	.byte	4,2,35,28,9
	.byte	'SRC4_ADDR',0
	.word	120842
	.byte	4,2,35,32,9
	.byte	'SRC4_DEST',0
	.word	120913
	.byte	4,2,35,36,9
	.byte	'SRC5_ADDR',0
	.word	120984
	.byte	4,2,35,40,9
	.byte	'SRC5_DEST',0
	.word	121055
	.byte	4,2,35,44,9
	.byte	'SRC6_ADDR',0
	.word	121126
	.byte	4,2,35,48,9
	.byte	'SRC6_DEST',0
	.word	121197
	.byte	4,2,35,52,9
	.byte	'SRC7_ADDR',0
	.word	121268
	.byte	4,2,35,56,9
	.byte	'SRC7_DEST',0
	.word	121339
	.byte	4,2,35,60,9
	.byte	'SRC8_ADDR',0
	.word	121410
	.byte	4,2,35,64,9
	.byte	'SRC8_DEST',0
	.word	121481
	.byte	4,2,35,68,9
	.byte	'SRC9_ADDR',0
	.word	121552
	.byte	4,2,35,72,9
	.byte	'SRC9_DEST',0
	.word	121623
	.byte	4,2,35,76,9
	.byte	'SRC10_ADDR',0
	.word	120128
	.byte	4,2,35,80,9
	.byte	'SRC10_DEST',0
	.word	120200
	.byte	4,2,35,84,9
	.byte	'SRC11_ADDR',0
	.word	120272
	.byte	4,2,35,88,9
	.byte	'SRC11_DEST',0
	.word	120344
	.byte	4,2,35,92,9
	.byte	'IRQ_NOTIFY',0
	.word	119849
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	119638
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	119706
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	119779
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	119921
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	119569
	.byte	4,2,35,116,0,33
	.word	144844
	.byte	16
	.byte	'Ifx_GTM_BRC',0,22,207,58,3
	.word	145429
	.byte	17
	.byte	'_Ifx_GTM_BRIDGE',0,22,210,58,25,12,9
	.byte	'MODE',0
	.word	121694
	.byte	4,2,35,0,9
	.byte	'PTR1',0
	.word	121763
	.byte	4,2,35,4,9
	.byte	'PTR2',0
	.word	121832
	.byte	4,2,35,8,0,33
	.word	145455
	.byte	16
	.byte	'Ifx_GTM_BRIDGE',0,22,215,58,3
	.word	145520
	.byte	17
	.byte	'_Ifx_GTM_CMP',0,22,218,58,25,24,9
	.byte	'EN',0
	.word	122031
	.byte	4,2,35,0,9
	.byte	'IRQ_NOTIFY',0
	.word	122306
	.byte	4,2,35,4,9
	.byte	'IRQ_EN',0
	.word	122095
	.byte	4,2,35,8,9
	.byte	'IRQ_FORCINT',0
	.word	122163
	.byte	4,2,35,12,9
	.byte	'IRQ_MODE',0
	.word	122236
	.byte	4,2,35,16,9
	.byte	'EIRQ_EN',0
	.word	121962
	.byte	4,2,35,20,0,33
	.word	145549
	.byte	16
	.byte	'Ifx_GTM_CMP',0,22,226,58,3
	.word	145673
	.byte	18,24
	.word	141399
	.byte	19,5,0,33
	.word	145699
	.byte	33
	.word	141473
	.byte	33
	.word	141545
	.byte	18,24
	.word	141617
	.byte	19,2,0,33
	.word	145723
	.byte	33
	.word	141699
	.byte	17
	.byte	'_Ifx_GTM_CMU',0,22,229,58,25,72,9
	.byte	'CLK_EN',0
	.word	122595
	.byte	4,2,35,0,9
	.byte	'GCLK_NUM',0
	.word	122945
	.byte	4,2,35,4,9
	.byte	'GCLK_DEN',0
	.word	122875
	.byte	4,2,35,8,9
	.byte	'CLK0_5',0
	.word	145708
	.byte	24,2,35,12,9
	.byte	'CLK_6',0
	.word	145713
	.byte	4,2,35,36,9
	.byte	'CLK_7',0
	.word	145718
	.byte	4,2,35,40,9
	.byte	'ECLK',0
	.word	145732
	.byte	24,2,35,44,9
	.byte	'FXCLK',0
	.word	145737
	.byte	4,2,35,68,0,33
	.word	145742
	.byte	16
	.byte	'Ifx_GTM_CMU',0,22,239,58,3
	.word	145889
	.byte	18,92
	.word	133
	.byte	19,91,0,18,44
	.word	133
	.byte	19,43,0,18,96
	.word	125907
	.byte	19,23,0,18,128,1
	.word	133
	.byte	19,127,0,18,96
	.word	127651
	.byte	19,23,0,18,96
	.word	125224
	.byte	19,23,0,18,96
	.word	126816
	.byte	19,23,0,18,96
	.word	125499
	.byte	19,23,0,18,88
	.word	133
	.byte	19,87,0,18,96
	.word	127583
	.byte	19,23,0,18,96
	.word	133
	.byte	19,95,0,18,128,2
	.word	128618
	.byte	19,63,0,18,128,2
	.word	129854
	.byte	19,63,0,18,128,2
	.word	123571
	.byte	19,63,0,18,128,2
	.word	125290
	.byte	19,63,0,18,128,8
	.word	133
	.byte	19,255,7,0,18,96
	.word	129787
	.byte	19,23,0,18,96
	.word	127717
	.byte	19,23,0,18,24
	.word	123141
	.byte	19,5,0,17
	.byte	'_Ifx_GTM_DPLL',0,22,242,58,25,152,30,9
	.byte	'CTRL_0',0
	.word	124629
	.byte	4,2,35,0,9
	.byte	'CTRL_1',0
	.word	124864
	.byte	4,2,35,4,9
	.byte	'CTRL_2',0
	.word	125017
	.byte	4,2,35,8,9
	.byte	'CTRL_3',0
	.word	125086
	.byte	4,2,35,12,9
	.byte	'CTRL_4',0
	.word	125155
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	142348
	.byte	4,2,35,20,9
	.byte	'ACT_STA',0
	.word	123207
	.byte	4,2,35,24,9
	.byte	'OSW',0
	.word	127517
	.byte	4,2,35,28,9
	.byte	'AOSV_2',0
	.word	123639
	.byte	4,2,35,32,9
	.byte	'APT',0
	.word	123915
	.byte	4,2,35,36,9
	.byte	'APS',0
	.word	123708
	.byte	4,2,35,40,9
	.byte	'APT_2C',0
	.word	123981
	.byte	4,2,35,44,9
	.byte	'APS_1C3',0
	.word	123774
	.byte	4,2,35,48,9
	.byte	'NUTC',0
	.word	127450
	.byte	4,2,35,52,9
	.byte	'NUSC',0
	.word	127383
	.byte	4,2,35,56,9
	.byte	'NTI_CNT',0
	.word	127313
	.byte	4,2,35,60,9
	.byte	'IRQ_NOTIFY',0
	.word	126333
	.byte	4,2,35,64,9
	.byte	'IRQ_EN',0
	.word	126119
	.byte	4,2,35,68,9
	.byte	'IRQ_FORCINT',0
	.word	126188
	.byte	4,2,35,72,9
	.byte	'IRQ_MODE',0
	.word	126262
	.byte	4,2,35,76,9
	.byte	'EIRQ_EN',0
	.word	125701
	.byte	4,2,35,80,9
	.byte	'reserved_54',0
	.word	145915
	.byte	92,2,35,84,9
	.byte	'INC_CNT1',0
	.word	125977
	.byte	4,3,35,176,1,9
	.byte	'INC_CNT2',0
	.word	126048
	.byte	4,3,35,180,1,9
	.byte	'APT_SYNC',0
	.word	124050
	.byte	4,3,35,184,1,9
	.byte	'APS_SYNC',0
	.word	123844
	.byte	4,3,35,188,1,9
	.byte	'TBU_TS0_T',0
	.word	129037
	.byte	4,3,35,192,1,9
	.byte	'TBU_TS0_S',0
	.word	128965
	.byte	4,3,35,196,1,9
	.byte	'ADD_IN_LD1',0
	.word	123425
	.byte	4,3,35,200,1,9
	.byte	'ADD_IN_LD2',0
	.word	123498
	.byte	4,3,35,204,1,9
	.byte	'reserved_D0',0
	.word	145924
	.byte	44,3,35,208,1,9
	.byte	'STATUS',0
	.word	128896
	.byte	4,3,35,252,1,9
	.byte	'ID_PMTR',0
	.word	145933
	.byte	96,3,35,128,2,9
	.byte	'reserved_160',0
	.word	145942
	.byte	128,1,3,35,224,2,9
	.byte	'CTRL_0_SHADOW_TRIGGER',0
	.word	124780
	.byte	4,3,35,224,3,9
	.byte	'CTRL_0_SHADOW_STATE',0
	.word	124698
	.byte	4,3,35,228,3,9
	.byte	'CTRL_1_SHADOW_TRIGGER',0
	.word	124933
	.byte	4,3,35,232,3,9
	.byte	'CRTL_1_SHADOW_STATE',0
	.word	124547
	.byte	4,3,35,236,3,9
	.byte	'reserved_1F0',0
	.word	140724
	.byte	12,3,35,240,3,9
	.byte	'RAM_INI',0
	.word	128260
	.byte	4,3,35,252,3,9
	.byte	'PSA',0
	.word	145952
	.byte	96,3,35,128,4,9
	.byte	'reserved_260',0
	.word	140822
	.byte	32,3,35,224,4,9
	.byte	'DLA',0
	.word	145961
	.byte	96,3,35,128,5,9
	.byte	'reserved_2E0',0
	.word	140822
	.byte	32,3,35,224,5,9
	.byte	'NA',0
	.word	145970
	.byte	96,3,35,128,6,9
	.byte	'reserved_360',0
	.word	140822
	.byte	32,3,35,224,6,9
	.byte	'DTA',0
	.word	145979
	.byte	96,3,35,128,7,9
	.byte	'reserved_3E0',0
	.word	140822
	.byte	32,3,35,224,7,9
	.byte	'TS_T_0',0
	.word	129649
	.byte	4,3,35,128,8,9
	.byte	'TS_T_1',0
	.word	129718
	.byte	4,3,35,132,8,9
	.byte	'FTV_T',0
	.word	125839
	.byte	4,3,35,136,8,9
	.byte	'reserved_40C',0
	.word	142348
	.byte	4,3,35,140,8,9
	.byte	'TS_S_0',0
	.word	129511
	.byte	4,3,35,144,8,9
	.byte	'TS_S_1',0
	.word	129580
	.byte	4,3,35,148,8,9
	.byte	'FTV_S',0
	.word	125771
	.byte	4,3,35,152,8,9
	.byte	'reserved_41C',0
	.word	142348
	.byte	4,3,35,156,8,9
	.byte	'THMI',0
	.word	129176
	.byte	4,3,35,160,8,9
	.byte	'THMA',0
	.word	129109
	.byte	4,3,35,164,8,9
	.byte	'THVAL',0
	.word	129243
	.byte	4,3,35,168,8,9
	.byte	'reserved_42C',0
	.word	142348
	.byte	4,3,35,172,8,9
	.byte	'TOV',0
	.word	129377
	.byte	4,3,35,176,8,9
	.byte	'TOV_S',0
	.word	129443
	.byte	4,3,35,180,8,9
	.byte	'ADD_IN_CAL1',0
	.word	123277
	.byte	4,3,35,184,8,9
	.byte	'ADD_IN_CAL2',0
	.word	123351
	.byte	4,3,35,188,8,9
	.byte	'MPVAL1',0
	.word	126678
	.byte	4,3,35,192,8,9
	.byte	'MPVAL2',0
	.word	126747
	.byte	4,3,35,196,8,9
	.byte	'NMB_T_TAR',0
	.word	127165
	.byte	4,3,35,200,8,9
	.byte	'NMB_T_TAR_OLD',0
	.word	127237
	.byte	4,3,35,204,8,9
	.byte	'NMB_S_TAR',0
	.word	126949
	.byte	4,3,35,208,8,9
	.byte	'NMB_S_TAR_OLD',0
	.word	127021
	.byte	4,3,35,212,8,9
	.byte	'reserved_458',0
	.word	141927
	.byte	8,3,35,216,8,9
	.byte	'RCDT_TX',0
	.word	128474
	.byte	4,3,35,224,8,9
	.byte	'RCDT_SX',0
	.word	128330
	.byte	4,3,35,228,8,9
	.byte	'RCDT_TX_NOM',0
	.word	128544
	.byte	4,3,35,232,8,9
	.byte	'RCDT_SX_NOM',0
	.word	128400
	.byte	4,3,35,236,8,9
	.byte	'RDT_T_ACT',0
	.word	128758
	.byte	4,3,35,240,8,9
	.byte	'RDT_S_ACT',0
	.word	128686
	.byte	4,3,35,244,8,9
	.byte	'DT_T_ACT',0
	.word	125428
	.byte	4,3,35,248,8,9
	.byte	'DT_S_ACT',0
	.word	125357
	.byte	4,3,35,252,8,9
	.byte	'EDT_T',0
	.word	125633
	.byte	4,3,35,128,9,9
	.byte	'MEDT_T',0
	.word	126475
	.byte	4,3,35,132,9,9
	.byte	'EDT_S',0
	.word	125565
	.byte	4,3,35,136,9,9
	.byte	'MEDT_S',0
	.word	126406
	.byte	4,3,35,140,9,9
	.byte	'CDT_TX',0
	.word	124263
	.byte	4,3,35,144,9,9
	.byte	'CDT_SX',0
	.word	124121
	.byte	4,3,35,148,9,9
	.byte	'CDT_TX_NOM',0
	.word	124332
	.byte	4,3,35,152,9,9
	.byte	'CDT_SX_NOM',0
	.word	124190
	.byte	4,3,35,156,9,9
	.byte	'TLR',0
	.word	129311
	.byte	4,3,35,160,9,9
	.byte	'SLR',0
	.word	128830
	.byte	4,3,35,164,9,9
	.byte	'reserved_4A8',0
	.word	145988
	.byte	88,3,35,168,9,9
	.byte	'PDT_T',0
	.word	145997
	.byte	96,3,35,128,10,9
	.byte	'reserved_560',0
	.word	146006
	.byte	96,3,35,224,10,9
	.byte	'MLS1',0
	.word	126544
	.byte	4,3,35,192,11,9
	.byte	'MLS2',0
	.word	126611
	.byte	4,3,35,196,11,9
	.byte	'CNT_NUM1',0
	.word	124405
	.byte	4,3,35,200,11,9
	.byte	'CNT_NUM2',0
	.word	124476
	.byte	4,3,35,204,11,9
	.byte	'PVT',0
	.word	128194
	.byte	4,3,35,208,11,9
	.byte	'reserved_5D4',0
	.word	140724
	.byte	12,3,35,212,11,9
	.byte	'PSTC',0
	.word	127989
	.byte	4,3,35,224,11,9
	.byte	'PSSC',0
	.word	127784
	.byte	4,3,35,228,11,9
	.byte	'PSTM_0',0
	.word	128056
	.byte	4,3,35,232,11,9
	.byte	'PSTM_1',0
	.word	128125
	.byte	4,3,35,236,11,9
	.byte	'PSSM_0',0
	.word	127851
	.byte	4,3,35,240,11,9
	.byte	'PSSM_1',0
	.word	127920
	.byte	4,3,35,244,11,9
	.byte	'NMB_T',0
	.word	127097
	.byte	4,3,35,248,11,9
	.byte	'NMB_S',0
	.word	126881
	.byte	4,3,35,252,11,9
	.byte	'RDT_S',0
	.word	146015
	.byte	128,2,3,35,128,12,9
	.byte	'TSF_S',0
	.word	146025
	.byte	128,2,3,35,128,14,9
	.byte	'ADT_S',0
	.word	146035
	.byte	128,2,3,35,128,16,9
	.byte	'DT_S',0
	.word	146045
	.byte	128,2,3,35,128,18,9
	.byte	'reserved_A00',0
	.word	146055
	.byte	128,8,3,35,128,20,9
	.byte	'TSAC',0
	.word	146066
	.byte	96,3,35,128,28,9
	.byte	'reserved_E60',0
	.word	140822
	.byte	32,3,35,224,28,9
	.byte	'PSAC',0
	.word	146075
	.byte	96,3,35,128,29,9
	.byte	'reserved_EE0',0
	.word	140822
	.byte	32,3,35,224,29,9
	.byte	'ACB',0
	.word	146084
	.byte	24,3,35,128,30,0,33
	.word	146093
	.byte	16
	.byte	'Ifx_GTM_DPLL',0,22,232,59,3
	.word	148270
	.byte	18,32
	.word	141771
	.byte	19,7,0,33
	.word	148297
	.byte	18,32
	.word	141850
	.byte	19,7,0,33
	.word	148311
	.byte	17
	.byte	'_Ifx_GTM_F2A',0,22,235,59,25,68,9
	.byte	'RD_CH',0
	.word	148306
	.byte	32,2,35,0,9
	.byte	'STR_CH',0
	.word	148320
	.byte	32,2,35,32,9
	.byte	'ENABLE',0
	.word	130118
	.byte	4,2,35,64,0,33
	.word	148325
	.byte	16
	.byte	'Ifx_GTM_F2A',0,22,240,59,3
	.word	148392
	.byte	18,128,4
	.word	141936
	.byte	19,7,0,33
	.word	148418
	.byte	17
	.byte	'_Ifx_GTM_FIFO',0,22,243,59,25,128,4,9
	.byte	'CH',0
	.word	148428
	.byte	128,4,2,35,0,0,33
	.word	148433
	.byte	16
	.byte	'Ifx_GTM_FIFO',0,22,246,59,3
	.word	148468
	.byte	17
	.byte	'_Ifx_GTM_ICM',0,22,249,59,25,68,9
	.byte	'IRQG_0',0
	.word	131373
	.byte	4,2,35,0,9
	.byte	'IRQG_1',0
	.word	131441
	.byte	4,2,35,4,9
	.byte	'IRQG_2',0
	.word	131578
	.byte	4,2,35,8,9
	.byte	'reserved_C',0
	.word	142348
	.byte	4,2,35,12,9
	.byte	'IRQG_4',0
	.word	131646
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	142348
	.byte	4,2,35,20,9
	.byte	'IRQG_6',0
	.word	131714
	.byte	4,2,35,24,9
	.byte	'IRQG_7',0
	.word	131782
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	142348
	.byte	4,2,35,32,9
	.byte	'IRQG_9',0
	.word	131850
	.byte	4,2,35,36,9
	.byte	'IRQG_10',0
	.word	131509
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	142348
	.byte	4,2,35,44,9
	.byte	'IRQG_MEI',0
	.word	132131
	.byte	4,2,35,48,9
	.byte	'IRQG_CEI0',0
	.word	131918
	.byte	4,2,35,52,9
	.byte	'IRQG_CEI1',0
	.word	131989
	.byte	4,2,35,56,9
	.byte	'reserved_3C',0
	.word	142348
	.byte	4,2,35,60,9
	.byte	'IRQG_CEI3',0
	.word	132060
	.byte	4,2,35,64,0,33
	.word	148495
	.byte	16
	.byte	'Ifx_GTM_ICM',0,22,140,60,3
	.word	148823
	.byte	18,16
	.word	142749
	.byte	19,3,0,33
	.word	148849
	.byte	33
	.word	142673
	.byte	33
	.word	142357
	.byte	33
	.word	142259
	.byte	33
	.word	142497
	.byte	33
	.word	142580
	.byte	17
	.byte	'_Ifx_GTM_INOUTSEL',0,22,143,60,25,156,1,9
	.byte	'TIM',0
	.word	148858
	.byte	16,2,35,0,9
	.byte	'reserved_10',0
	.word	141136
	.byte	16,2,35,16,9
	.byte	'T',0
	.word	148863
	.byte	60,2,35,32,9
	.byte	'reserved_5C',0
	.word	141136
	.byte	16,2,35,92,9
	.byte	'DSADC',0
	.word	148868
	.byte	24,2,35,108,9
	.byte	'reserved_84',0
	.word	140724
	.byte	12,3,35,132,1,9
	.byte	'CAN',0
	.word	148873
	.byte	4,3,35,144,1,9
	.byte	'PSI5',0
	.word	148878
	.byte	4,3,35,148,1,9
	.byte	'PSI5S',0
	.word	148883
	.byte	4,3,35,152,1,0,33
	.word	148888
	.byte	16
	.byte	'Ifx_GTM_INOUTSEL',0,22,154,60,3
	.word	149062
	.byte	33
	.word	143168
	.byte	18,28
	.word	133
	.byte	19,27,0,33
	.word	142846
	.byte	33
	.word	142846
	.byte	33
	.word	142846
	.byte	33
	.word	142846
	.byte	33
	.word	142846
	.byte	33
	.word	142846
	.byte	33
	.word	142846
	.byte	18,128,24
	.word	133
	.byte	19,255,23,0,17
	.byte	'_Ifx_GTM_MCS',0,22,157,60,25,128,32,9
	.byte	'CH0',0
	.word	149093
	.byte	88,2,35,0,9
	.byte	'reserved_58',0
	.word	149098
	.byte	28,2,35,88,9
	.byte	'CTRL',0
	.word	134583
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	134714
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	134649
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	149107
	.byte	128,1,3,35,128,1,9
	.byte	'CH2',0
	.word	149112
	.byte	128,1,3,35,128,2,9
	.byte	'CH3',0
	.word	149117
	.byte	128,1,3,35,128,3,9
	.byte	'CH4',0
	.word	149122
	.byte	128,1,3,35,128,4,9
	.byte	'CH5',0
	.word	149127
	.byte	128,1,3,35,128,5,9
	.byte	'CH6',0
	.word	149132
	.byte	128,1,3,35,128,6,9
	.byte	'CH7',0
	.word	149137
	.byte	128,1,3,35,128,7,9
	.byte	'reserved_400',0
	.word	149142
	.byte	128,24,3,35,128,8,0,33
	.word	149153
	.byte	16
	.byte	'Ifx_GTM_MCS',0,22,172,60,3
	.word	149377
	.byte	17
	.byte	'_Ifx_GTM_MON',0,22,175,60,25,8,9
	.byte	'STATUS',0
	.word	134986
	.byte	4,2,35,0,9
	.byte	'ACTIVITY_0',0
	.word	134914
	.byte	4,2,35,4,0,33
	.word	149403
	.byte	16
	.byte	'Ifx_GTM_MON',0,22,179,60,3
	.word	149459
	.byte	17
	.byte	'_Ifx_GTM_MSCIN',0,22,182,60,25,8,9
	.byte	'INLCON',0
	.word	135124
	.byte	4,2,35,0,9
	.byte	'INHCON',0
	.word	135054
	.byte	4,2,35,4,0,33
	.word	149485
	.byte	16
	.byte	'Ifx_GTM_MSCIN',0,22,186,60,3
	.word	149539
	.byte	17
	.byte	'_Ifx_GTM_MSCSET',0,22,189,60,25,16,9
	.byte	'CON0',0
	.word	135194
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	135263
	.byte	4,2,35,4,9
	.byte	'CON2',0
	.word	135332
	.byte	4,2,35,8,9
	.byte	'CON3',0
	.word	135401
	.byte	4,2,35,12,0,33
	.word	149567
	.byte	16
	.byte	'Ifx_GTM_MSCSET',0,22,195,60,3
	.word	149646
	.byte	18,32
	.word	136717
	.byte	19,7,0,17
	.byte	'_Ifx_GTM_SPE',0,22,198,60,25,128,1,9
	.byte	'CTRL_STAT',0
	.word	136224
	.byte	4,2,35,0,9
	.byte	'PAT',0
	.word	136786
	.byte	4,2,35,4,9
	.byte	'OUT_PAT',0
	.word	149675
	.byte	32,2,35,8,9
	.byte	'OUT_CTRL',0
	.word	136647
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	136575
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	136364
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	136432
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	136505
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	136295
	.byte	4,2,35,60,9
	.byte	'CNT',0
	.word	136159
	.byte	4,2,35,64,9
	.byte	'CMP',0
	.word	136094
	.byte	4,2,35,68,9
	.byte	'reserved_48',0
	.word	143498
	.byte	56,2,35,72,0,33
	.word	149684
	.byte	16
	.byte	'Ifx_GTM_SPE',0,22,212,60,3
	.word	149911
	.byte	17
	.byte	'_Ifx_GTM_TBU',0,22,215,60,25,28,9
	.byte	'CHEN',0
	.word	137271
	.byte	4,2,35,0,9
	.byte	'CH0_CTRL',0
	.word	136921
	.byte	4,2,35,4,9
	.byte	'CH0_BASE',0
	.word	136851
	.byte	4,2,35,8,9
	.byte	'CH1_CTRL',0
	.word	137061
	.byte	4,2,35,12,9
	.byte	'CH1_BASE',0
	.word	136991
	.byte	4,2,35,16,9
	.byte	'CH2_CTRL',0
	.word	137201
	.byte	4,2,35,20,9
	.byte	'CH2_BASE',0
	.word	137131
	.byte	4,2,35,24,0,33
	.word	149937
	.byte	16
	.byte	'Ifx_GTM_TBU',0,22,224,60,3
	.word	150079
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	33
	.word	143507
	.byte	18,136,8
	.word	133
	.byte	19,135,8,0,17
	.byte	'_Ifx_GTM_TIM',0,22,227,60,25,128,16,9
	.byte	'CH0',0
	.word	150105
	.byte	120,2,35,0,9
	.byte	'IN_SRC',0
	.word	138539
	.byte	4,2,35,120,9
	.byte	'RST',0
	.word	138607
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	150110
	.byte	120,3,35,128,1,9
	.byte	'reserved_F8',0
	.word	141927
	.byte	8,3,35,248,1,9
	.byte	'CH2',0
	.word	150115
	.byte	120,3,35,128,2,9
	.byte	'reserved_178',0
	.word	141927
	.byte	8,3,35,248,2,9
	.byte	'CH3',0
	.word	150120
	.byte	120,3,35,128,3,9
	.byte	'reserved_1F8',0
	.word	141927
	.byte	8,3,35,248,3,9
	.byte	'CH4',0
	.word	150125
	.byte	120,3,35,128,4,9
	.byte	'reserved_278',0
	.word	141927
	.byte	8,3,35,248,4,9
	.byte	'CH5',0
	.word	150130
	.byte	120,3,35,128,5,9
	.byte	'reserved_2F8',0
	.word	141927
	.byte	8,3,35,248,5,9
	.byte	'CH6',0
	.word	150135
	.byte	120,3,35,128,6,9
	.byte	'reserved_378',0
	.word	141927
	.byte	8,3,35,248,6,9
	.byte	'CH7',0
	.word	150140
	.byte	120,3,35,128,7,9
	.byte	'reserved_3F8',0
	.word	150145
	.byte	136,8,3,35,248,7,0,33
	.word	150156
	.byte	16
	.byte	'Ifx_GTM_TIM',0,22,246,60,3
	.word	150478
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	33
	.word	143830
	.byte	18,144,8
	.word	133
	.byte	19,143,8,0,17
	.byte	'_Ifx_GTM_TOM',0,22,249,60,25,128,16,9
	.byte	'CH0',0
	.word	150504
	.byte	48,2,35,0,9
	.byte	'TGC0_GLB_CTRL',0
	.word	139748
	.byte	4,2,35,48,9
	.byte	'TGC0_ACT_TB',0
	.word	139445
	.byte	4,2,35,52,9
	.byte	'TGC0_FUPD_CTRL',0
	.word	139672
	.byte	4,2,35,56,9
	.byte	'TGC0_INT_TRIG',0
	.word	139823
	.byte	4,2,35,60,9
	.byte	'CH1',0
	.word	150509
	.byte	48,2,35,64,9
	.byte	'TGC0_ENDIS_CTRL',0
	.word	139518
	.byte	4,2,35,112,9
	.byte	'TGC0_ENDIS_STAT',0
	.word	139595
	.byte	4,2,35,116,9
	.byte	'TGC0_OUTEN_CTRL',0
	.word	139898
	.byte	4,2,35,120,9
	.byte	'TGC0_OUTEN_STAT',0
	.word	139975
	.byte	4,2,35,124,9
	.byte	'CH2',0
	.word	150514
	.byte	48,3,35,128,1,9
	.byte	'reserved_B0',0
	.word	141136
	.byte	16,3,35,176,1,9
	.byte	'CH3',0
	.word	150519
	.byte	48,3,35,192,1,9
	.byte	'reserved_F0',0
	.word	141136
	.byte	16,3,35,240,1,9
	.byte	'CH4',0
	.word	150524
	.byte	48,3,35,128,2,9
	.byte	'reserved_130',0
	.word	141136
	.byte	16,3,35,176,2,9
	.byte	'CH5',0
	.word	150529
	.byte	48,3,35,192,2,9
	.byte	'reserved_170',0
	.word	141136
	.byte	16,3,35,240,2,9
	.byte	'CH6',0
	.word	150534
	.byte	48,3,35,128,3,9
	.byte	'reserved_1B0',0
	.word	141136
	.byte	16,3,35,176,3,9
	.byte	'CH7',0
	.word	150539
	.byte	48,3,35,192,3,9
	.byte	'reserved_1F0',0
	.word	141136
	.byte	16,3,35,240,3,9
	.byte	'CH8',0
	.word	150544
	.byte	48,3,35,128,4,9
	.byte	'TGC1_GLB_CTRL',0
	.word	140355
	.byte	4,3,35,176,4,9
	.byte	'TGC1_ACT_TB',0
	.word	140052
	.byte	4,3,35,180,4,9
	.byte	'TGC1_FUPD_CTRL',0
	.word	140279
	.byte	4,3,35,184,4,9
	.byte	'TGC1_INT_TRIG',0
	.word	140430
	.byte	4,3,35,188,4,9
	.byte	'CH9',0
	.word	150549
	.byte	48,3,35,192,4,9
	.byte	'TGC1_ENDIS_CTRL',0
	.word	140125
	.byte	4,3,35,240,4,9
	.byte	'TGC1_ENDIS_STAT',0
	.word	140202
	.byte	4,3,35,244,4,9
	.byte	'TGC1_OUTEN_CTRL',0
	.word	140505
	.byte	4,3,35,248,4,9
	.byte	'TGC1_OUTEN_STAT',0
	.word	140582
	.byte	4,3,35,252,4,9
	.byte	'CH10',0
	.word	150554
	.byte	48,3,35,128,5,9
	.byte	'reserved_2B0',0
	.word	141136
	.byte	16,3,35,176,5,9
	.byte	'CH11',0
	.word	150559
	.byte	48,3,35,192,5,9
	.byte	'reserved_2F0',0
	.word	141136
	.byte	16,3,35,240,5,9
	.byte	'CH12',0
	.word	150564
	.byte	48,3,35,128,6,9
	.byte	'reserved_330',0
	.word	141136
	.byte	16,3,35,176,6,9
	.byte	'CH13',0
	.word	150569
	.byte	48,3,35,192,6,9
	.byte	'reserved_370',0
	.word	141136
	.byte	16,3,35,240,6,9
	.byte	'CH14',0
	.word	150574
	.byte	48,3,35,128,7,9
	.byte	'reserved_3B0',0
	.word	141136
	.byte	16,3,35,176,7,9
	.byte	'CH15',0
	.word	150579
	.byte	48,3,35,192,7,9
	.byte	'reserved_3F0',0
	.word	150584
	.byte	144,8,3,35,240,7,0,33
	.word	150595
	.byte	16
	.byte	'Ifx_GTM_TOM',0,22,167,61,3
	.word	151509
	.byte	18,20
	.word	133
	.byte	19,19,0,8,4,192,4,20,64,9
	.byte	'CTRL',0
	.word	138876
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	139240
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	139308
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	138672
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	138740
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	138808
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	139376
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	139165
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	138945
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	139016
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	139092
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	151535
	.byte	20,2,35,44,0,33
	.word	151544
	.byte	16
	.byte	'Ifx_GTM_TOM_CH_TYPE',0,4,217,4,4
	.word	151740
	.byte	18,48
	.word	133
	.byte	19,47,0,18,176,3
	.word	133
	.byte	19,175,3,0,8,4,219,4,20,128,4,9
	.byte	'GLB_CTRL',0
	.word	139748
	.byte	4,2,35,0,9
	.byte	'ACT_TB',0
	.word	139445
	.byte	4,2,35,4,9
	.byte	'FUPD_CTRL',0
	.word	139672
	.byte	4,2,35,8,9
	.byte	'INT_TRIG',0
	.word	139823
	.byte	4,2,35,12,9
	.byte	'reserved_tgc0',0
	.word	151774
	.byte	48,2,35,16,9
	.byte	'ENDIS_CTRL',0
	.word	139518
	.byte	4,2,35,64,9
	.byte	'ENDIS_STAT',0
	.word	139595
	.byte	4,2,35,68,9
	.byte	'OUTEN_CTRL',0
	.word	139898
	.byte	4,2,35,72,9
	.byte	'OUTEN_STAT',0
	.word	139975
	.byte	4,2,35,76,9
	.byte	'reserved_tgc1',0
	.word	151783
	.byte	176,3,2,35,80,0,33
	.word	151794
	.byte	16
	.byte	'Ifx_GTM_TOM_TGC_TYPE',0,4,239,4,5
	.word	152000
	.byte	18,128,8
	.word	151794
	.byte	19,1,0,33
	.word	152035
	.byte	18,208,7
	.word	133
	.byte	19,207,7,0,8,4,241,4,20,128,16,9
	.byte	'reserved_tom0',0
	.word	151774
	.byte	48,2,35,0,9
	.byte	'TGC',0
	.word	152045
	.byte	128,8,2,35,48,9
	.byte	'reserved_tgc2',0
	.word	152050
	.byte	208,7,3,35,176,8,0,33
	.word	152061
	.byte	16
	.byte	'Ifx_GTM_TOM_TGCx',0,4,246,4,5
	.word	152131
	.byte	18,128,8
	.word	151544
	.byte	19,15,0,33
	.word	152162
	.byte	8,4,249,4,20,128,16,9
	.byte	'CH',0
	.word	152172
	.byte	128,8,2,35,0,9
	.byte	'reserved_tom1',0
	.word	11572
	.byte	128,8,3,35,128,8,0,33
	.word	152177
	.byte	16
	.byte	'Ifx_GTM_TOM_CHx',0,4,253,4,5
	.word	152223
	.byte	33
	.word	148433
	.byte	18,128,124
	.word	133
	.byte	19,255,123,0,8,4,142,5,20,128,128,1,9
	.byte	'FIFO',0
	.word	152253
	.byte	128,4,2,35,0,9
	.byte	'reserved_Fifo1',0
	.word	152258
	.byte	128,124,3,35,128,4,0,33
	.word	152269
	.byte	16
	.byte	'Ifx_GTM_FIFOx_MOD',0,4,146,5,5
	.word	152319
	.byte	33
	.word	148325
	.byte	18,188,127
	.word	133
	.byte	19,187,127,0,8,4,157,5,20,128,128,1,9
	.byte	'F2A',0
	.word	152351
	.byte	68,2,35,0,9
	.byte	'reserved_F2A1',0
	.word	152356
	.byte	188,127,2,35,68,0,33
	.word	152367
	.byte	16
	.byte	'Ifx_GTM_F2Ax_MOD',0,4,161,5,5
	.word	152413
	.byte	33
	.word	144086
	.byte	18,128,127
	.word	133
	.byte	19,255,126,0,8,4,173,5,20,128,128,1,9
	.byte	'AFD',0
	.word	152444
	.byte	128,1,2,35,0,9
	.byte	'reserved_AFD1',0
	.word	152449
	.byte	128,127,3,35,128,1,0,33
	.word	152460
	.byte	16
	.byte	'Ifx_GTM_AFDx_MOD',0,4,177,5,5
	.word	152508
	.byte	18,80
	.word	133
	.byte	19,79,0,8,4,192,5,20,128,1,9
	.byte	'RDADDR',0
	.word	119009
	.byte	4,2,35,0,9
	.byte	'CTRL',0
	.word	118640
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	119361
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	119430
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	118433
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	118502
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	118571
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	119499
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	118933
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	118710
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	118782
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	118859
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	152539
	.byte	80,2,35,48,0,33
	.word	152548
	.byte	16
	.byte	'Ifx_GTM_ATOM_CH_TYPE',0,4,219,5,4
	.word	152761
	.byte	18,128,8
	.word	152548
	.byte	19,7,0,33
	.word	152796
	.byte	8,4,223,5,20,128,16,9
	.byte	'CH',0
	.word	152806
	.byte	128,8,2,35,0,9
	.byte	'reserved_chx',0
	.word	11572
	.byte	128,8,3,35,128,8,0,33
	.word	152811
	.byte	16
	.byte	'Ifx_GTM_ATOM_CHx',0,4,227,5,4
	.word	152856
	.byte	18,64
	.word	133
	.byte	19,63,0,18,160,15
	.word	133
	.byte	19,159,15,0,8,4,230,5,20,128,16,9
	.byte	'reserved_30',0
	.word	152887
	.byte	64,2,35,0,9
	.byte	'AGC_GLB_CTRL',0
	.word	118129
	.byte	4,2,35,64,9
	.byte	'AGC_ENDIS_CTRL',0
	.word	117899
	.byte	4,2,35,68,9
	.byte	'AGC_ENDIS_STAT',0
	.word	117976
	.byte	4,2,35,72,9
	.byte	'AGC_ACT_TB',0
	.word	117826
	.byte	4,2,35,76,9
	.byte	'AGC_OUTEN_CTRL',0
	.word	118279
	.byte	4,2,35,80,9
	.byte	'AGC_OUTEN_STAT',0
	.word	118356
	.byte	4,2,35,84,9
	.byte	'AGC_FUPD_CTRL',0
	.word	118053
	.byte	4,2,35,88,9
	.byte	'AGC_INT_TRIG',0
	.word	118204
	.byte	4,2,35,92,9
	.byte	'reserved_chx',0
	.word	152896
	.byte	160,15,2,35,96,0,33
	.word	152907
	.byte	16
	.byte	'Ifx_GTM_ATOM_AGCx',0,4,249,5,4
	.word	153142
	.byte	8,4,141,6,20,128,1,9
	.byte	'CH_GPR0',0
	.word	137968
	.byte	4,2,35,0,9
	.byte	'CH_GPR1',0
	.word	138037
	.byte	4,2,35,4,9
	.byte	'CH_CNT',0
	.word	137409
	.byte	4,2,35,8,9
	.byte	'CH_ECNT',0
	.word	137615
	.byte	4,2,35,12,9
	.byte	'CH_CNTS',0
	.word	137477
	.byte	4,2,35,16,9
	.byte	'CH_TDUC',0
	.word	138401
	.byte	4,2,35,20,9
	.byte	'CH_TDUV',0
	.word	138470
	.byte	4,2,35,24,9
	.byte	'CH_FLT_RE',0
	.word	137897
	.byte	4,2,35,28,9
	.byte	'CH_FLT_FE',0
	.word	137826
	.byte	4,2,35,32,9
	.byte	'CH_CTRL',0
	.word	137546
	.byte	4,2,35,36,9
	.byte	'CH_ECTRL',0
	.word	137684
	.byte	4,2,35,40,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	138326
	.byte	4,2,35,44,9
	.byte	'CH_IRQ_EN',0
	.word	138106
	.byte	4,2,35,48,9
	.byte	'CH_IRQ_FORCINT',0
	.word	138177
	.byte	4,2,35,52,9
	.byte	'CH_IRQ_MODE',0
	.word	138253
	.byte	4,2,35,56,9
	.byte	'CH_EIRQ_EN',0
	.word	137754
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	152887
	.byte	64,2,35,64,0,33
	.word	153174
	.byte	16
	.byte	'Ifx_GTM_TIM_CH_TYPE',0,4,177,6,4
	.word	153501
	.byte	8,4,179,6,20,8,9
	.byte	'IN_SRC',0
	.word	138539
	.byte	4,2,35,0,9
	.byte	'RST',0
	.word	138607
	.byte	4,2,35,4,0,33
	.word	153535
	.byte	16
	.byte	'Ifx_GTM_TIM_IN_SRC_RESET_TYPE',0,4,184,6,4
	.word	153571
	.byte	18,128,8
	.word	153174
	.byte	19,7,0,33
	.word	153615
	.byte	8,4,186,6,21,128,16,9
	.byte	'CH',0
	.word	153625
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	11572
	.byte	128,8,3,35,128,8,0,33
	.word	153630
	.byte	16
	.byte	'Ifx_GTM_TIM_CHx',0,4,190,6,4
	.word	153676
	.byte	18,120
	.word	133
	.byte	19,119,0,33
	.word	153535
	.byte	18,128,15
	.word	133
	.byte	19,255,14,0,8,4,192,6,20,128,16,9
	.byte	'reserved_tim2',0
	.word	153706
	.byte	120,2,35,0,9
	.byte	'IN_SRC_RESET',0
	.word	153715
	.byte	8,2,35,120,9
	.byte	'reserved_tim3',0
	.word	153720
	.byte	128,15,3,35,128,1,0,33
	.word	153731
	.byte	16
	.byte	'Ifx_GTM_TIM_IN_SRC_RSTx',0,4,197,6,4
	.word	153809
	.byte	18,24
	.word	133
	.byte	19,23,0,18,40
	.word	133
	.byte	19,39,0,8,4,214,6,20,128,1,9
	.byte	'CH_R0',0
	.word	134047
	.byte	4,2,35,0,9
	.byte	'CH_R1',0
	.word	134114
	.byte	4,2,35,4,9
	.byte	'CH_R2',0
	.word	134181
	.byte	4,2,35,8,9
	.byte	'CH_R3',0
	.word	134248
	.byte	4,2,35,12,9
	.byte	'CH_R4',0
	.word	134315
	.byte	4,2,35,16,9
	.byte	'CH_R5',0
	.word	134382
	.byte	4,2,35,20,9
	.byte	'CH_R6',0
	.word	134449
	.byte	4,2,35,24,9
	.byte	'CH_R7',0
	.word	134516
	.byte	4,2,35,28,9
	.byte	'CH_CTRL',0
	.word	133544
	.byte	4,2,35,32,9
	.byte	'CH_ACB',0
	.word	133476
	.byte	4,2,35,36,9
	.byte	'reserved_A8',0
	.word	153847
	.byte	24,2,35,40,9
	.byte	'CH_PC',0
	.word	133980
	.byte	4,2,35,64,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	133905
	.byte	4,2,35,68,9
	.byte	'CH_IRQ_EN',0
	.word	133685
	.byte	4,2,35,72,9
	.byte	'CH_IRQ_FORCINT',0
	.word	133756
	.byte	4,2,35,76,9
	.byte	'CH_IRQ_MODE',0
	.word	133832
	.byte	4,2,35,80,9
	.byte	'CH_EIRQ_EN',0
	.word	133613
	.byte	4,2,35,84,9
	.byte	'reserved_D8',0
	.word	153856
	.byte	40,2,35,88,0,33
	.word	153865
	.byte	16
	.byte	'Ifx_GTM_MCS_CH_TYPE',0,4,250,6,4
	.word	154190
	.byte	18,128,8
	.word	153865
	.byte	19,7,0,33
	.word	154224
	.byte	18,128,24
	.word	133
	.byte	19,255,23,0,8,4,252,6,20,128,32,9
	.byte	'CH',0
	.word	154234
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	154239
	.byte	128,24,3,35,128,8,0,33
	.word	154250
	.byte	16
	.byte	'Ifx_GTM_MCS_CHx',0,4,128,7,4
	.word	154296
	.byte	18,68
	.word	133
	.byte	19,67,0,18,128,31
	.word	133
	.byte	19,255,30,0,8,4,130,7,20,128,32,9
	.byte	'reserved_tim4',0
	.word	153856
	.byte	40,2,35,0,9
	.byte	'CTRG',0
	.word	133336
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	133406
	.byte	4,2,35,44,9
	.byte	'reserved_tim5',0
	.word	154326
	.byte	68,2,35,48,9
	.byte	'CTRL',0
	.word	134583
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	134714
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	134649
	.byte	4,2,35,124,9
	.byte	'reserved_tim6',0
	.word	154335
	.byte	128,31,3,35,128,1,0,33
	.word	154346
	.byte	16
	.byte	'Ifx_GTM_MCS_TGR_MOD_CTRLx',0,4,143,7,4
	.word	154493
	.byte	8,4,162,7,11,4,34
	.byte	'EN_DEST0',0,1
	.word	133
	.byte	1,7,2,35,0,34
	.byte	'EN_DEST1',0,1
	.word	133
	.byte	1,6,2,35,0,34
	.byte	'EN_DEST2',0,1
	.word	133
	.byte	1,5,2,35,0,34
	.byte	'EN_DEST3',0,1
	.word	133
	.byte	1,4,2,35,0,34
	.byte	'EN_DEST4',0,1
	.word	133
	.byte	1,3,2,35,0,34
	.byte	'EN_DEST5',0,1
	.word	133
	.byte	1,2,2,35,0,34
	.byte	'EN_DEST6',0,1
	.word	133
	.byte	1,1,2,35,0,34
	.byte	'EN_DEST7',0,1
	.word	133
	.byte	1,0,2,35,0,34
	.byte	'EN_DEST8',0,1
	.word	133
	.byte	1,7,2,35,1,34
	.byte	'EN_DEST9',0,1
	.word	133
	.byte	1,6,2,35,1,34
	.byte	'EN_DEST10',0,1
	.word	133
	.byte	1,5,2,35,1,34
	.byte	'EN_DEST11',0,1
	.word	133
	.byte	1,4,2,35,1,34
	.byte	'EN_DEST12',0,1
	.word	133
	.byte	1,3,2,35,1,34
	.byte	'EN_DEST13',0,1
	.word	133
	.byte	1,2,2,35,1,34
	.byte	'EN_DEST14',0,1
	.word	133
	.byte	1,1,2,35,1,34
	.byte	'EN_DEST15',0,1
	.word	133
	.byte	1,0,2,35,1,34
	.byte	'EN_DEST16',0,1
	.word	133
	.byte	1,7,2,35,2,34
	.byte	'EN_DEST17',0,1
	.word	133
	.byte	1,6,2,35,2,34
	.byte	'EN_DEST18',0,1
	.word	133
	.byte	1,5,2,35,2,34
	.byte	'EN_DEST19',0,1
	.word	133
	.byte	1,4,2,35,2,34
	.byte	'EN_DEST20',0,1
	.word	133
	.byte	1,3,2,35,2,34
	.byte	'EN_DEST21',0,1
	.word	133
	.byte	1,2,2,35,2,34
	.byte	'EN_TRASHBIN',0,1
	.word	133
	.byte	1,1,2,35,2,34
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,16
	.byte	'Ifx_GTM_BRC_SRC_DEST_Bits',0,4,211,7,5
	.word	154533
	.byte	30,4,214,7,11,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	154533
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC_DEST',0,4,221,7,5
	.word	155073
	.byte	8,4,224,7,11,4,34
	.byte	'ADDR',0,2
	.word	463
	.byte	9,7,2,35,0,34
	.byte	'reserved_9',0,1
	.word	133
	.byte	3,4,2,35,1,34
	.byte	'BRC_MODE',0,1
	.word	133
	.byte	1,3,2,35,1,34
	.byte	'reserved_13',0,4
	.word	802
	.byte	19,0,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC_ADDR_Bits',0,4,231,7,5
	.word	155143
	.byte	30,4,233,7,11,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10179
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	155143
	.byte	4,2,35,0,0,16
	.byte	'Ifx_GTM_BRC_SRC_ADDR',0,4,240,7,5
	.word	155266
	.byte	8,4,242,7,20,8,9
	.byte	'SRC_ADDR',0
	.word	155266
	.byte	4,2,35,0,9
	.byte	'SRC_DEST',0
	.word	155073
	.byte	4,2,35,4,0,33
	.word	155336
	.byte	16
	.byte	'Ifx_GTM_BRC_SRC_ADDRx',0,4,247,7,4
	.word	155379
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	33
	.word	155336
	.byte	8,4,250,7,20,120,9
	.byte	'SRC0',0
	.word	155415
	.byte	8,2,35,0,9
	.byte	'SRC1',0
	.word	155420
	.byte	8,2,35,8,9
	.byte	'SRC2',0
	.word	155425
	.byte	8,2,35,16,9
	.byte	'SRC3',0
	.word	155430
	.byte	8,2,35,24,9
	.byte	'SRC4',0
	.word	155435
	.byte	8,2,35,32,9
	.byte	'SRC5',0
	.word	155440
	.byte	8,2,35,40,9
	.byte	'SRC6',0
	.word	155445
	.byte	8,2,35,48,9
	.byte	'SRC7',0
	.word	155450
	.byte	8,2,35,56,9
	.byte	'SRC8',0
	.word	155455
	.byte	8,2,35,64,9
	.byte	'SRC9',0
	.word	155460
	.byte	8,2,35,72,9
	.byte	'SRC10',0
	.word	155465
	.byte	8,2,35,80,9
	.byte	'SRC11',0
	.word	155470
	.byte	8,2,35,88,9
	.byte	'IRQ_NOTIFY',0
	.word	119849
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	119638
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	119706
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	119779
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	119921
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	119569
	.byte	4,2,35,116,0,33
	.word	155475
	.byte	16
	.byte	'Ifx_GTM_BRC_SRCx',0,4,148,8,4
	.word	155757
	.byte	12,4,197,8,11,4,13
	.byte	'GTM_CONFIGURABLE_CLK0',0,0,13
	.byte	'GTM_CONFIGURABLE_CLK1',0,1,13
	.byte	'GTM_CONFIGURABLE_CLK2',0,2,13
	.byte	'GTM_CONFIGURABLE_CLK3',0,3,13
	.byte	'GTM_CONFIGURABLE_CLK4',0,4,13
	.byte	'GTM_CONFIGURABLE_CLK5',0,5,13
	.byte	'GTM_CONFIGURABLE_CLK6',0,6,13
	.byte	'GTM_CONFIGURABLE_CLK7',0,7,0,16
	.byte	'Gtm_ConfigurableClockType',0,4,207,8,4
	.word	155788
	.byte	12,4,211,8,11,4,13
	.byte	'GTM_LOW',0,0,13
	.byte	'GTM_HIGH',0,1,0,16
	.byte	'Gtm_OutputLevelType',0,4,215,8,4
	.word	156022
	.byte	12,4,218,8,11,4,13
	.byte	'GTM_ARU_WRITE_FAILED',0,0,13
	.byte	'GTM_ARU_WRITE_SUCCESSFUL',0,1,13
	.byte	'GTM_ARU_RD_ISSUED_BUT_NOT_CMPLT',0,2,13
	.byte	'GTM_ARU_RD_ISSUED_AND_COMPLETED',0,3,13
	.byte	'GTM_ARU_READ_NOT_ISSUED',0,4,13
	.byte	'GTM_ARU_READ_FAILED',0,5,13
	.byte	'GTM_ARU_READ_SUCCESSFUL',0,6,13
	.byte	'GTM_INCORRECT_REQUEST',0,7,0,16
	.byte	'Gtm_AruReqStatusType',0,4,228,8,4
	.word	156079
	.byte	12,4,230,8,11,4,13
	.byte	'TOM_GLB_CTRL',0,0,13
	.byte	'TOM_ACT_TB',0,1,13
	.byte	'TOM_FUPD_CTRL',0,2,13
	.byte	'TOM_INT_TRIG',0,3,13
	.byte	'TOM_RESERVED_0',0,4,13
	.byte	'TOM_RESERVED_1',0,5,13
	.byte	'TOM_RESERVED_2',0,6,13
	.byte	'TOM_RESERVED_3',0,7,13
	.byte	'TOM_RESERVED_4',0,8,13
	.byte	'TOM_RESERVED_5',0,9,13
	.byte	'TOM_RESERVED_6',0,10,13
	.byte	'TOM_RESERVED_7',0,11,13
	.byte	'TOM_RESERVED_8',0,12,13
	.byte	'TOM_RESERVED_9',0,13,13
	.byte	'TOM_RESERVED_10',0,14,13
	.byte	'TOM_RESERVED_11',0,15,13
	.byte	'TOM_ENDIS_CTRL',0,16,13
	.byte	'TOM_ENDIS_STAT',0,17,13
	.byte	'TOM_OUTEN_CTRL',0,18,13
	.byte	'TOM_OUTEN_STAT',0,19,0,16
	.byte	'Gtm_TomTimerRegistersType',0,4,252,8,4
	.word	156332
	.byte	12,4,255,8,11,4,13
	.byte	'ATOM_GLB_CTRL',0,0,13
	.byte	'ATOM_ENDIS_CTRL',0,1,13
	.byte	'ATOM_ENDIS_STAT',0,2,13
	.byte	'ATOM_ACT_TB',0,3,13
	.byte	'ATOM_OUTEN_CTRL',0,4,13
	.byte	'ATOM_OUTEN_STAT',0,5,13
	.byte	'ATOM_FUPD_CTRL',0,6,13
	.byte	'ATOM_INT_TRIG',0,7,0,16
	.byte	'Gtm_AtomTimerRegistersType',0,4,137,9,4
	.word	156707
	.byte	8,4,141,9,11,8,9
	.byte	'FltRisingEdge',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'FltFallingEdge',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_TimFilterType',0,4,145,9,4
	.word	156885
	.byte	16
	.byte	'Gtm_TbuChCtrlType',0,4,150,9,32
	.word	136921
	.byte	16
	.byte	'Gtm_TbuChBaseType',0,4,151,9,32
	.word	136851
	.byte	8,4,153,9,11,8,9
	.byte	'CH_CTRL',0
	.word	136921
	.byte	4,2,35,0,9
	.byte	'CH_BASE',0
	.word	136851
	.byte	4,2,35,4,0,16
	.byte	'Gtm_TbuChType',0,4,157,9,4
	.word	157020
	.byte	8,4,171,9,9,8,9
	.byte	'DpllStatus',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'IntStatus',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_DpllStatType',0,4,175,9,2
	.word	157084
	.byte	18,16
	.word	802
	.byte	19,3,0,18,60
	.word	802
	.byte	19,14,0,8,4,178,9,9,76,9
	.byte	'TimInSel',0
	.word	157156
	.byte	16,2,35,0,9
	.byte	'ToutSel',0
	.word	157165
	.byte	60,2,35,16,0,16
	.byte	'Gtm_PortConfigType',0,4,182,9,2
	.word	157174
	.byte	8,4,186,9,9,8,9
	.byte	'TimRisingEdgeFilter',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'TimFallingEdgeFilter',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_TimFltType',0,4,191,9,2
	.word	157244
	.byte	10
	.word	157244
	.byte	3
	.word	157334
	.byte	8,4,195,9,11,28,9
	.byte	'TimUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TimIrqEn',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'TimErrIrqEn',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'TimAuxInSrcSel',0
	.word	133
	.byte	1,2,35,3,9
	.byte	'TimExtCapSrc',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'TimCtrlValue',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmTimFltPtr',0
	.word	157339
	.byte	4,2,35,12,9
	.byte	'TimCntsValue',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'TimTduValue',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'TimInSrcSel',0
	.word	802
	.byte	4,2,35,24,0,16
	.byte	'Gtm_TimConfigType',0,4,210,9,4
	.word	157344
	.byte	18,8
	.word	133
	.byte	19,7,0,18,32
	.word	157589
	.byte	19,3,0,18,16
	.word	133
	.byte	19,15,0,18,48
	.word	157607
	.byte	19,2,0,18,40
	.word	157589
	.byte	19,4,0,8,4,213,9,11,120,9
	.byte	'Gtm_TimUsage',0
	.word	157598
	.byte	32,2,35,0,9
	.byte	'Gtm_TomUsage',0
	.word	157616
	.byte	48,2,35,32,9
	.byte	'Gtm_AtomUsage',0
	.word	157625
	.byte	40,2,35,80,0,16
	.byte	'Gtm_ModUsageConfigType',0,4,225,9,4
	.word	157634
	.byte	8,4,228,9,11,16,9
	.byte	'GtmAtomUpdateEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomEndisCtrl',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmAtomEndisStat',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmAtomOutenCtrl',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmAtomOutenStat',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmAtomFupd',0
	.word	802
	.byte	4,2,35,12,0,16
	.byte	'Gtm_AtomAgcConfigGroupType',0,4,236,9,4
	.word	157740
	.byte	10
	.word	157740
	.byte	3
	.word	157933
	.byte	8,4,240,9,9,12,9
	.byte	'GtmAtomIntTrig',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomActTb',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomAgcConfigGrpPtr',0
	.word	157938
	.byte	4,2,35,8,0,16
	.byte	'Gtm_AtomAgcConfigType',0,4,247,9,2
	.word	157943
	.byte	8,4,250,9,9,28,9
	.byte	'GtmAtomIrqEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomRdAddrValue',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomCn0Value',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmAtomCm0Value',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'GtmAtomCm1Value',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'GtmAtomSr0Value',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'GtmAtomSr1Value',0
	.word	802
	.byte	4,2,35,24,0,16
	.byte	'Gtm_AtomChannelConfigType',0,4,131,10,2
	.word	158059
	.byte	10
	.word	158059
	.byte	3
	.word	158276
	.byte	8,4,134,10,9,12,9
	.byte	'GtmAtomUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmAtomIrqMode',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmAtomControlWord',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomChannelCfgPtr',0
	.word	158281
	.byte	4,2,35,8,0,16
	.byte	'Gtm_AtomConfigType',0,4,141,10,2
	.word	158286
	.byte	8,4,154,10,9,16,9
	.byte	'GtmTomUpdateEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmTomEndisCtrl',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmTomEndisStat',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmTomOutenCtrl',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmTomOutenStat',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmTomFupd',0
	.word	802
	.byte	4,2,35,12,0,16
	.byte	'Gtm_TomTgcConfigGroupType',0,4,162,10,2
	.word	158425
	.byte	10
	.word	158425
	.byte	3
	.word	158611
	.byte	8,4,166,10,9,12,9
	.byte	'GtmTomIntTrig',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmTomActTb',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmTomTgcConfigGrpPtr',0
	.word	158616
	.byte	4,2,35,8,0,16
	.byte	'Gtm_TomTgcConfigType',0,4,173,10,2
	.word	158621
	.byte	8,4,176,10,9,12,9
	.byte	'GtmTomIrqEn',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmTomCn0Value',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmTomCm0Value',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmTomCm1Value',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmTomSr0Value',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmTomSr1Value',0
	.word	463
	.byte	2,2,35,10,0,16
	.byte	'Gtm_TomChannelConfigType',0,4,184,10,2
	.word	158733
	.byte	10
	.word	158733
	.byte	3
	.word	158915
	.byte	8,4,188,10,9,12,9
	.byte	'TomUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmTomIrqMode',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'GtmTomControlWord',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmTomChannelCfgPtr',0
	.word	158920
	.byte	4,2,35,8,0,16
	.byte	'Gtm_TomConfigType',0,4,196,10,2
	.word	158925
	.byte	8,4,200,10,9,8,9
	.byte	'CmuEclkNum',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CmuEclkDen',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_ExtClkType',0,4,204,10,2
	.word	159056
	.byte	18,32
	.word	802
	.byte	19,7,0,18,24
	.word	159056
	.byte	19,2,0,8,4,207,10,9,64,9
	.byte	'GtmClockEnable',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'GtmCmuClkCnt',0
	.word	159127
	.byte	32,2,35,4,9
	.byte	'GtmFxdClkControl',0
	.word	802
	.byte	4,2,35,36,9
	.byte	'GtmEclk',0
	.word	159136
	.byte	24,2,35,40,0,16
	.byte	'Gtm_ClockSettingType',0,4,213,10,2
	.word	159145
	.byte	8,4,217,10,9,4,9
	.byte	'GtmCtrlValue',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmIrqEnable',0
	.word	463
	.byte	2,2,35,2,0,16
	.byte	'Gtm_GeneralConfigType',0,4,222,10,2
	.word	159271
	.byte	8,4,226,10,9,8,9
	.byte	'TbuChannelCtrl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TbuBaseValue',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_TbuConfigType',0,4,230,10,2
	.word	159353
	.byte	8,4,234,10,9,8,9
	.byte	'BrcChannelCtrl',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'BrcDestination',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_BrcChannelType',0,4,238,10,2
	.word	159433
	.byte	10
	.word	159433
	.byte	3
	.word	159516
	.byte	8,4,242,10,9,8,9
	.byte	'BrcIrqEnable',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'BrcErrIrqEnable',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'BrcChannelPtr',0
	.word	159521
	.byte	4,2,35,4,0,16
	.byte	'Gtm_BrcConfigType',0,4,248,10,2
	.word	159526
	.byte	8,4,252,10,9,12,9
	.byte	'FifoCtrl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'FifoIrqEnable',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'FifoErrIrqEnable',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'FifoStartAddress',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'FifoEndAddress',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'FifoUpperWatermark',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'FifoLowerWatermark',0
	.word	463
	.byte	2,2,35,10,0,16
	.byte	'Gtm_FifoConfigType',0,4,139,11,2
	.word	159630
	.byte	8,4,143,11,9,4,9
	.byte	'F2aChannelConfig',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'F2aAruAddress',0
	.word	463
	.byte	2,2,35,2,0,16
	.byte	'Gtm_F2aConfigType',0,4,147,11,2
	.word	159838
	.byte	8,4,151,11,9,18,9
	.byte	'McsControl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'McsChannelConfig',0
	.word	157589
	.byte	8,2,35,1,9
	.byte	'McsErrIrqEnable',0
	.word	157589
	.byte	8,2,35,9,0,16
	.byte	'Gtm_McsConfigType',0,4,160,11,2
	.word	159921
	.byte	18,48
	.word	463
	.byte	19,23,0,8,4,164,11,9,96,9
	.byte	'DpllAps1c3',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'DpllNtiCnt',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'DpllApt2c',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'DpllCtrl2',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'DpllCtrl3',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'DpllCtrl4',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'DpllPmtr',0
	.word	160026
	.byte	48,2,35,12,9
	.byte	'DpllCtrl0',0
	.word	802
	.byte	4,2,35,60,9
	.byte	'DpllCtrl1',0
	.word	802
	.byte	4,2,35,64,9
	.byte	'DpllApt',0
	.word	802
	.byte	4,2,35,68,9
	.byte	'DpllAps',0
	.word	802
	.byte	4,2,35,72,9
	.byte	'DpllAssort0',0
	.word	802
	.byte	4,2,35,76,9
	.byte	'DpllIrqEnable',0
	.word	802
	.byte	4,2,35,80,9
	.byte	'DpllErrIntEnable',0
	.word	802
	.byte	4,2,35,84,9
	.byte	'DpllAddInLoad1',0
	.word	802
	.byte	4,2,35,88,9
	.byte	'DpllAddInLoad2',0
	.word	802
	.byte	4,2,35,92,0,16
	.byte	'Gtm_DpllConfigType',0,4,188,11,2
	.word	160035
	.byte	18,16
	.word	463
	.byte	19,7,0,8,4,192,11,9,36,9
	.byte	'SpeIrq',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'SpeErrIrq',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'SpeOutput',0
	.word	160394
	.byte	16,2,35,2,9
	.byte	'SpeCtrlStat',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'SpePattern',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'SpeRevCntr',0
	.word	802
	.byte	4,2,35,28,9
	.byte	'SpeRevCmp',0
	.word	802
	.byte	4,2,35,32,0,16
	.byte	'Gtm_SpeConfigType',0,4,205,11,2
	.word	160403
	.byte	8,4,208,11,9,12,9
	.byte	'CmpEnable',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CmpIntEnable',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'CmpErrIntEnable',0
	.word	802
	.byte	4,2,35,8,0,16
	.byte	'Gtm_CmpConfigType',0,4,215,11,2
	.word	160571
	.byte	8,4,220,11,9,16,9
	.byte	'MscConnection',0
	.word	157156
	.byte	16,2,35,0,0,16
	.byte	'Gtm_MscSetType',0,4,223,11,2
	.word	160671
	.byte	8,4,226,11,9,8,9
	.byte	'MscLowControl',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'MscHighControl',0
	.word	802
	.byte	4,2,35,4,0,16
	.byte	'Gtm_MscInputCtrlType',0,4,230,11,2
	.word	160725
	.byte	10
	.word	160671
	.byte	3
	.word	160809
	.byte	10
	.word	160725
	.byte	3
	.word	160819
	.byte	8,4,233,11,9,8,9
	.byte	'MscSets',0
	.word	160814
	.byte	4,2,35,0,9
	.byte	'MscInputCtrlPtr',0
	.word	160824
	.byte	4,2,35,4,0,16
	.byte	'Gtm_MscConnectionsType',0,4,237,11,2
	.word	160829
	.byte	8,4,241,11,9,20,9
	.byte	'DsadcInsel0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'DsadcInsel1',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'DsadcInsel2',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'DsadcOutsel00',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'DsadcOutsel10',0
	.word	802
	.byte	4,2,35,16,0,16
	.byte	'Gtm_DsadcConnectionsType',0,4,248,11,2
	.word	160910
	.byte	18,8
	.word	802
	.byte	19,1,0,18,4
	.word	802
	.byte	19,0,0,10
	.word	157344
	.byte	3
	.word	161078
	.byte	10
	.word	158621
	.byte	3
	.word	161088
	.byte	18,12
	.word	802
	.byte	19,2,0,10
	.word	158925
	.byte	3
	.word	161107
	.byte	10
	.word	157943
	.byte	3
	.word	161117
	.byte	10
	.word	158286
	.byte	3
	.word	161127
	.byte	10
	.word	157634
	.byte	3
	.word	161137
	.byte	10
	.word	159271
	.byte	3
	.word	161147
	.byte	10
	.word	159353
	.byte	3
	.word	161157
	.byte	10
	.word	159526
	.byte	3
	.word	161167
	.byte	10
	.word	159630
	.byte	3
	.word	161177
	.byte	10
	.word	161182
	.byte	3
	.word	161187
	.byte	10
	.word	159838
	.byte	3
	.word	161197
	.byte	10
	.word	159921
	.byte	3
	.word	161207
	.byte	10
	.word	160035
	.byte	3
	.word	161217
	.byte	10
	.word	160403
	.byte	3
	.word	161227
	.byte	18,8
	.word	161232
	.byte	19,1,0,10
	.word	160571
	.byte	3
	.word	161246
	.byte	10
	.word	160829
	.byte	3
	.word	161256
	.byte	10
	.word	160910
	.byte	3
	.word	161266
	.byte	10
	.word	133
	.byte	3
	.word	161276
	.byte	8,4,251,11,9,172,1,9
	.byte	'GtmAruConfig',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmMcfgConfig',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'GtmModuleSleepEnable',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'GtmGclkNum',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmGclkDen',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmAccessEnable0',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'GtmAccessEnable1',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'GtmTimModuleUsage',0
	.word	161060
	.byte	8,2,35,20,9
	.byte	'GtmTimUsage',0
	.word	161069
	.byte	4,2,35,28,9
	.byte	'GtmTimConfigPtr',0
	.word	161083
	.byte	4,2,35,32,9
	.byte	'GtmTomTgcUsage',0
	.word	161069
	.byte	4,2,35,36,9
	.byte	'GtmTomTgcConfigPtr',0
	.word	161093
	.byte	4,2,35,40,9
	.byte	'GtmTomModuleUsage',0
	.word	161098
	.byte	12,2,35,44,9
	.byte	'GtmTomUsage',0
	.word	161060
	.byte	8,2,35,56,9
	.byte	'GtmTomConfigPtr',0
	.word	161112
	.byte	4,2,35,64,9
	.byte	'GtmAtomAgcUsage',0
	.word	161069
	.byte	4,2,35,68,9
	.byte	'GtmAtomAgcConfigPtr',0
	.word	161122
	.byte	4,2,35,72,9
	.byte	'GtmAtomModuleUsage',0
	.word	161098
	.byte	12,2,35,76,9
	.byte	'GtmAtomUsage',0
	.word	161060
	.byte	8,2,35,88,9
	.byte	'GtmAtomConfigPtr',0
	.word	161132
	.byte	4,2,35,96,9
	.byte	'GtmModUsageConfigPtr',0
	.word	161142
	.byte	4,2,35,100,9
	.byte	'GtmGeneralConfigPtr',0
	.word	161152
	.byte	4,2,35,104,9
	.byte	'GtmTbuConfigPtr',0
	.word	161162
	.byte	4,2,35,108,9
	.byte	'GtmBrcConfigPtr',0
	.word	161172
	.byte	4,2,35,112,9
	.byte	'GtmFifoConfigPtr',0
	.word	161192
	.byte	4,2,35,116,9
	.byte	'GtmF2aConfigPtr',0
	.word	161202
	.byte	4,2,35,120,9
	.byte	'GtmMcsConfigPtr',0
	.word	161212
	.byte	4,2,35,124,9
	.byte	'GtmMapConfig',0
	.word	802
	.byte	4,3,35,128,1,9
	.byte	'GtmDpllConfigPtr',0
	.word	161222
	.byte	4,3,35,132,1,9
	.byte	'GtmSpeConfigPtr',0
	.word	161237
	.byte	8,3,35,136,1,9
	.byte	'GtmCmpConfigPtr',0
	.word	161251
	.byte	4,3,35,144,1,9
	.byte	'GtmMscConnectionsPtr',0
	.word	161261
	.byte	4,3,35,148,1,9
	.byte	'GtmDsadcConnectionsPtr',0
	.word	161271
	.byte	4,3,35,152,1,9
	.byte	'GtmAdcConnectionsPtr',0
	.word	161281
	.byte	4,3,35,156,1,9
	.byte	'GtmTtcanTriggers',0
	.word	161069
	.byte	4,3,35,160,1,9
	.byte	'GtmPsi5OutSelect',0
	.word	802
	.byte	4,3,35,164,1,9
	.byte	'GtmPsi5SOutSelect',0
	.word	802
	.byte	4,3,35,168,1,0,16
	.byte	'Gtm_ModuleConfigType',0,4,188,12,2
	.word	161286
	.byte	10
	.word	159145
	.byte	3
	.word	162283
	.byte	10
	.word	157174
	.byte	3
	.word	162293
	.byte	10
	.word	161286
	.byte	3
	.word	162303
	.byte	17
	.byte	'Gtm_ConfigType',0,4,224,12,16,12,9
	.byte	'GtmClockSettingPtr',0
	.word	162288
	.byte	4,2,35,0,9
	.byte	'GtmPortConfigPtr',0
	.word	162298
	.byte	4,2,35,4,9
	.byte	'GtmModuleConfigPtr',0
	.word	162308
	.byte	4,2,35,8,0,16
	.byte	'Gtm_ConfigType',0,4,229,12,2
	.word	162313
	.byte	16
	.byte	'Mcu_ClockType',0,23,156,3,18
	.word	802
	.byte	16
	.byte	'Mcu_ModeType',0,23,162,3,18
	.word	802
	.byte	16
	.byte	'Mcu_RamSectionType',0,23,168,3,18
	.word	802
	.byte	16
	.byte	'Mcu_RamBaseAdrType',0,23,178,3,18
	.word	6791
	.byte	16
	.byte	'Mcu_RamSizeType',0,23,181,3,17
	.word	802
	.byte	16
	.byte	'Mcu_RamPrstDatType',0,23,184,3,16
	.word	133
	.byte	31
	.byte	'Mcu_ResetType',0,23,212,3,14,4,13
	.byte	'MCU_ESR0_RESET',0,0,13
	.byte	'MCU_ESR1_RESET',0,1,13
	.byte	'MCU_SMU_RESET',0,2,13
	.byte	'MCU_SW_RESET',0,3,13
	.byte	'MCU_STM0_RESET',0,4,13
	.byte	'MCU_STM1_RESET',0,5,13
	.byte	'MCU_STM2_RESET',0,6,13
	.byte	'MCU_POWER_ON_RESET',0,7,13
	.byte	'MCU_CB0_RESET',0,8,13
	.byte	'MCU_CB1_RESET',0,9,13
	.byte	'MCU_CB3_RESET',0,10,13
	.byte	'MCU_TP_RESET',0,11,13
	.byte	'MCU_EVR13_RESET',0,12,13
	.byte	'MCU_EVR33_RESET',0,13,13
	.byte	'MCU_SUPPLY_WDOG_RESET',0,14,13
	.byte	'MCU_STBYR_RESET',0,15,13
	.byte	'MCU_RESET_MULTIPLE',0,254,1,13
	.byte	'MCU_RESET_UNDEFINED',0,255,1,0,16
	.byte	'Mcu_ResetType',0,23,232,3,2
	.word	162595
	.byte	8,23,247,3,3,4,34
	.byte	'K1div',0,1
	.word	133
	.byte	7,1,2,35,0,34
	.byte	'K3div',0,2
	.word	463
	.byte	7,2,2,35,0,34
	.byte	'Ndiv',0,4
	.word	802
	.byte	7,11,2,35,0,34
	.byte	'Pdiv',0,2
	.word	463
	.byte	4,7,2,35,2,34
	.byte	'K2steps',0,1
	.word	133
	.byte	4,3,2,35,3,34
	.byte	'PllMode',0,1
	.word	133
	.byte	1,2,2,35,3,34
	.byte	'Reserved',0,1
	.word	133
	.byte	2,0,2,35,3,0,8,23,132,4,3,4,34
	.byte	'McuErayNDivider',0,1
	.word	133
	.byte	5,3,2,35,0,34
	.byte	'McuErayK2Divider',0,2
	.word	463
	.byte	7,4,2,35,0,34
	.byte	'McuErayK3Divider',0,4
	.word	802
	.byte	7,13,2,35,0,34
	.byte	'McuErayPDivider',0,1
	.word	133
	.byte	4,1,2,35,2,34
	.byte	'Reserved',0,2
	.word	463
	.byte	9,0,2,35,2,0,17
	.byte	'Mcu_ClockCfgType',0,23,236,3,16,80,9
	.byte	'K2div',0
	.word	157589
	.byte	8,2,35,0,9
	.byte	'K2RampToPllDelayTicks',0
	.word	159127
	.byte	32,2,35,8,9
	.byte	'Mcu_ClockDivValues',0
	.word	162962
	.byte	4,2,35,40,9
	.byte	'MCU_ErayPllDivValues',0
	.word	163093
	.byte	4,2,35,44,9
	.byte	'Ccucon0',0
	.word	802
	.byte	4,2,35,48,9
	.byte	'Ccucon1',0
	.word	802
	.byte	4,2,35,52,9
	.byte	'Ccucon2',0
	.word	802
	.byte	4,2,35,56,9
	.byte	'Ccucon5',0
	.word	802
	.byte	4,2,35,60,9
	.byte	'Ccucon6',0
	.word	802
	.byte	4,2,35,64,9
	.byte	'Ccucon7',0
	.word	802
	.byte	4,2,35,68,9
	.byte	'Ccucon8',0
	.word	802
	.byte	4,2,35,72,9
	.byte	'K2RampToPllDelayConf',0
	.word	133
	.byte	1,2,35,76,0,16
	.byte	'Mcu_ClockCfgType',0,23,162,4,2
	.word	163230
	.byte	17
	.byte	'Mcu_RamCfgType',0,23,164,4,16,12,9
	.byte	'RamBaseAdrPtr',0
	.word	162514
	.byte	4,2,35,0,9
	.byte	'RamSize',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'RamPrstData',0
	.word	133
	.byte	1,2,35,8,0,16
	.byte	'Mcu_RamCfgType',0,23,169,4,2
	.word	163533
	.byte	3
	.word	6785
	.byte	17
	.byte	'Mcu_StandbyModeType',0,23,171,4,16,8,9
	.byte	'PMSWCR0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CrcCheckEnable',0
	.word	133
	.byte	1,2,35,4,0,16
	.byte	'Mcu_StandbyModeType',0,23,175,4,2
	.word	163645
	.byte	16
	.byte	'rba_BswSrv_uint64',0,24,66,28
	.word	5304
	.byte	12,25,176,6,9,4,13
	.byte	'STANDARD_CAN',0,0,13
	.byte	'STANDARD_FD_CAN',0,1,13
	.byte	'EXTENDED_CAN',0,2,13
	.byte	'EXTENDED_FD_CAN',0,3,0,16
	.byte	'CanIf_Cfg_TxPduCanIdType_ten',0,25,182,6,2
	.word	163768
	.byte	12,25,244,6,9,4,13
	.byte	'CANIF_NO_UL',0,0,13
	.byte	'CAN_NM',0,1,13
	.byte	'CAN_TP',0,2,13
	.byte	'CAN_TSYN',0,3,13
	.byte	'J1939NM',0,4,13
	.byte	'J1939TP',0,5,13
	.byte	'PDUR',0,6,13
	.byte	'XCP',0,7,13
	.byte	'CDD',0,8,13
	.byte	'USER',0,9,13
	.byte	'MAX_USER_TYPE',0,10,0,16
	.byte	'CanIf_Cfg_UserType_ten',0,25,130,7,2
	.word	163879
	.byte	12,25,133,7,9,4,13
	.byte	'CANIF_BASIC',0,0,13
	.byte	'CANIF_FULL',0,1,0,16
	.byte	'CanIf_Cfg_CanHandleType_ten',0,25,138,7,2
	.word	164023
	.byte	12,25,141,7,9,4,13
	.byte	'CANIF_PRV_FULL_E',0,0,13
	.byte	'CANIF_PRV_BASIC_RANGE_E',0,1,13
	.byte	'CANIF_PRV_BASIC_LIST_E',0,2,0,16
	.byte	'CanIf_Prv_HrhType_ten',0,25,148,7,2
	.word	164094
	.byte	12,25,151,7,9,4,13
	.byte	'CANIF_DLC_OK',0,0,13
	.byte	'CANIF_DLC_E_FAILED',0,1,0,16
	.byte	'CanIf_DlcErrorReturnType',0,25,156,7,2
	.word	164202
	.byte	8,25,220,7,9,20,9
	.byte	'HrhInfo_e',0
	.word	164094
	.byte	4,2,35,0,9
	.byte	'PduIdx_t',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'NumRxPdus_u32',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'HrhRangeMask_b',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'ControllerId_u8',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'CanId_t',0
	.word	802
	.byte	4,2,35,16,0,16
	.byte	'CanIf_Cfg_Hrhtype_tst',0,25,255,7,2
	.word	164279
	.byte	8,25,134,8,9,20,9
	.byte	'RxPduReadNotifyReadDataStatus_u8',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'IndexForUL_u8',0
	.word	5361
	.byte	4,2,35,4,9
	.byte	'CanIdtype_u8',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'RxPduDlc_u8',0
	.word	133
	.byte	1,2,35,9,9
	.byte	'RxPduCanId',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'Hrhref_t',0
	.word	463
	.byte	2,2,35,16,9
	.byte	'RxPduTargetId_t',0
	.word	463
	.byte	2,2,35,18,0,16
	.byte	'CanIf_Cfg_RxPduType_tst',0,25,230,8,2
	.word	164443
	.byte	10
	.word	1637
	.byte	3
	.word	164654
	.byte	14,1,1,15
	.word	463
	.byte	15
	.word	164659
	.byte	0,3
	.word	164664
	.byte	8,25,234,8,9,4,9
	.byte	'CanIfRxPduIndicationName',0
	.word	164678
	.byte	4,2,35,0,0,16
	.byte	'CanIf_RxCbk_Prototype',0,25,237,8,2
	.word	164683
	.byte	8,25,168,9,9,4,9
	.byte	'CtrlId',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'CtrlCanCtrlRef',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'CtrlWakeupSupport',0
	.word	133
	.byte	1,2,35,2,0,16
	.byte	'CanIf_Cfg_CtrlConfig_tst',0,25,182,9,2
	.word	164755
	.byte	10
	.word	164755
	.byte	3
	.word	164863
	.byte	8,25,184,9,9,12,9
	.byte	'CanIf_CtrlConfigPtr',0
	.word	164868
	.byte	4,2,35,0,9
	.byte	'CanObjectId',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'CanHandleType',0
	.word	164023
	.byte	4,2,35,8,0,16
	.byte	'CanIf_Cfg_HthConfig_tst',0,25,191,9,2
	.word	164873
	.byte	10
	.word	164873
	.byte	3
	.word	164986
	.byte	8,25,194,9,9,4,9
	.byte	'CanIf_HthConfigPtr',0
	.word	164991
	.byte	4,2,35,0,0,16
	.byte	'CanIf_Cfg_TxBufferConfig_tst',0,25,205,9,2
	.word	164996
	.byte	10
	.word	164996
	.byte	3
	.word	165069
	.byte	14,1,1,15
	.word	463
	.byte	0,3
	.word	165079
	.byte	3
	.word	1637
	.byte	36
	.word	133
	.byte	1,1,15
	.word	463
	.byte	15
	.word	165093
	.byte	0,3
	.word	165098
	.byte	8,25,207,9,9,40,9
	.byte	'CanIf_TxBufferConfigPtr',0
	.word	165074
	.byte	4,2,35,0,9
	.byte	'TxPduId',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'TxPduTargetPduId',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'TxPduType',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'TxPduCanIdType',0
	.word	163768
	.byte	4,2,35,12,9
	.byte	'TxPduTxUserUL',0
	.word	163879
	.byte	4,2,35,16,9
	.byte	'UserTxConfirmation',0
	.word	165088
	.byte	4,2,35,20,9
	.byte	'TxPduCanId',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'TxPduReadNotifyStatus',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'UserTriggerTransmit',0
	.word	165116
	.byte	4,2,35,32,9
	.byte	'TxPduTriggerTransmit',0
	.word	133
	.byte	1,2,35,36,9
	.byte	'TxTruncEnabled_b',0
	.word	133
	.byte	1,2,35,37,9
	.byte	'TxPduLength_u8',0
	.word	133
	.byte	1,2,35,38,0,16
	.byte	'CanIf_Cfg_TxPduConfig_tst',0,25,239,9,2
	.word	165121
	.byte	36
	.word	133
	.byte	1,1,15
	.word	133
	.byte	15
	.word	165093
	.byte	0,3
	.word	165493
	.byte	16
	.byte	'CanTp_CreateFrameType',0,5,198,1,26
	.word	165511
	.byte	16
	.byte	'CanTp_RxContextType',0,5,218,1,2
	.word	2097
	.byte	16
	.byte	'CanTp_TxContextType',0,5,233,1,2
	.word	1783
	.byte	10
	.word	2097
	.byte	3
	.word	165605
	.byte	14,1,1,15
	.word	165610
	.byte	15
	.word	164659
	.byte	0,3
	.word	165615
	.byte	16
	.byte	'CanTp_ProcessFrameType',0,5,235,1,16
	.word	165629
	.byte	14,1,1,15
	.word	133
	.byte	0,3
	.word	165666
	.byte	16
	.byte	'CanTp_StateFuncType',0,5,251,1,16
	.word	165675
	.byte	16
	.byte	'CanTp_ChannelType',0,5,142,2,2
	.word	4091
	.byte	14,1,1,15
	.word	463
	.byte	15
	.word	133
	.byte	0,3
	.word	165736
	.byte	16
	.byte	'CanTp_PduRConfirmationApiType',0,5,145,2,16
	.word	165750
	.byte	18,40
	.word	4091
	.byte	19,1,0,27
	.byte	'CanTp_Channel',0,5,155,2,26
	.word	165794
	.byte	1,1,18,1
	.word	133
	.byte	19,0,0,27
	.byte	'CanTp_TxConfirmationChannel',0,5,156,2,28
	.word	165828
	.byte	1,1,33
	.word	463
	.byte	27
	.byte	'CanTp_MainFunctionTicks',0,5,164,2,32
	.word	165876
	.byte	1,1,27
	.byte	'CanTp_CfgPtr',0,5,166,2,32
	.word	4071
	.byte	1,1,27
	.byte	'CanTp_SubState',0,5,172,2,14
	.word	3747
	.byte	1,1,18,9
	.word	133
	.byte	19,8,0,10
	.word	165966
	.byte	27
	.byte	'CanTp_State',0,5,178,2,20
	.word	165975
	.byte	1,1,18,5
	.word	133
	.byte	19,4,0,10
	.word	166003
	.byte	27
	.byte	'CanTp_AddressSize',0,5,179,2,20
	.word	166012
	.byte	1,1,18,6
	.word	133
	.byte	19,5,0,10
	.word	166046
	.byte	27
	.byte	'CanTp_PciFrameType',0,5,180,2,20
	.word	166055
	.byte	1,1,10
	.word	166046
	.byte	27
	.byte	'CanTp_PciSize',0,5,181,2,20
	.word	166090
	.byte	1,1,18,65
	.word	133
	.byte	19,64,0,10
	.word	166120
	.byte	27
	.byte	'CanTp_CanDlTable',0,5,183,2,20
	.word	166129
	.byte	1,1,18,16
	.word	165634
	.byte	19,3,0,10
	.word	166162
	.byte	27
	.byte	'CanTp_ProcessFrame',0,5,190,2,37
	.word	166171
	.byte	1,1,3
	.word	165615
	.byte	18,16
	.word	165516
	.byte	19,3,0,10
	.word	166211
	.byte	27
	.byte	'CanTp_CreateFrame',0,5,191,2,36
	.word	166220
	.byte	1,1,3
	.word	165493
	.byte	18,36
	.word	165680
	.byte	19,8,0,10
	.word	166259
	.byte	27
	.byte	'CanTp_StateFunctions',0,5,192,2,34
	.word	166268
	.byte	1,1,3
	.word	165666
	.byte	18,8
	.word	165755
	.byte	19,1,0,10
	.word	166310
	.byte	27
	.byte	'CanTp_PduRConfirmationApis',0,5,193,2,45
	.word	166319
	.byte	1,1,3
	.word	165736
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L331:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,19,1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9
	.byte	0,0,10,38,0,73,19,0,0,11,11,1,0,0,12,4,1,58,15,59,15,57,15,11,15,0,0,13,40,0,3,8,28,13,0,0,14,21,1,54
	.byte	15,39,12,0,0,15,5,0,73,19,0,0,16,22,0,3,8,58,15,59,15,57,15,73,19,0,0,17,19,1,3,8,58,15,59,15,57,15,11
	.byte	15,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,46,1,49,19,0,0,21,5,0,49,19,0,0,22,46,1,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,23,29,1,49,19,0,0,24,11,0,49,19,0,0,25,46,0,3,8,58,15,59,15
	.byte	57,15,54,15,63,12,60,12,0,0,26,21,0,54,15,0,0,27,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,28,21
	.byte	0,54,15,39,12,0,0,29,59,0,3,8,0,0,30,23,1,58,15,59,15,57,15,11,15,0,0,31,4,1,3,8,58,15,59,15,57,15,11
	.byte	15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,53,0,73,19,0,0,34,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,35
	.byte	13,0,73,19,11,15,56,9,0,0,36,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L332:
	.word	.L774-.L773
.L773:
	.half	3
	.word	.L776-.L775
.L775:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Gtm.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanTp_PreCompile\\CanTp_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanTp_PreCompile\\CanTp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxScu_regdef.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxGtm_regdef.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Mcu.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanIf\\CanIf_Cfg.h',0,0,0,0,0
.L776:
.L774:
	.sdecl	'.debug_info',debug,cluster('CanTp_Init')
	.sect	'.debug_info'
.L333:
	.word	339
	.half	3
	.word	.L334
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L336,.L335
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_Init',0,1,50,6,1,1,1
	.word	.L312,.L380,.L311
	.byte	4
	.byte	'CfgPtr',0,1,50,41
	.word	.L381,.L382
	.byte	5
	.word	.L312,.L380
	.byte	6
	.word	.L383,.L384,.L385
	.byte	7
	.word	.L386,.L387
	.byte	7
	.word	.L388,.L389
	.byte	7
	.word	.L390,.L391
	.byte	8
	.word	.L392,.L384,.L385
	.byte	9
	.byte	'i',0,2,145,3,12
	.word	.L393,.L394
	.byte	0,0,6
	.word	.L383,.L395,.L396
	.byte	7
	.word	.L386,.L387
	.byte	7
	.word	.L388,.L389
	.byte	7
	.word	.L390,.L391
	.byte	8
	.word	.L392,.L395,.L396
	.byte	9
	.byte	'i',0,2,145,3,12
	.word	.L393,.L397
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Init')
	.sect	'.debug_abbrev'
.L334:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Init')
	.sect	'.debug_line'
.L335:
	.word	.L778-.L777
.L777:
	.half	3
	.word	.L780-.L779
.L779:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L780:
	.byte	5,5,7,0,5,2
	.word	.L312
	.byte	3,51,1,5,23,9
	.half	.L781-.L312
	.byte	1,5,21,9
	.half	.L782-.L781
	.byte	1,5,5,9
	.half	.L783-.L782
	.byte	3,3,1,5,21,9
	.half	.L784-.L783
	.byte	1,5,18,9
	.half	.L785-.L784
	.byte	1,5,24,9
	.half	.L786-.L785
	.byte	3,21,1,5,43,9
	.half	.L787-.L786
	.byte	1,5,55,9
	.half	.L788-.L787
	.byte	1,5,75,9
	.half	.L789-.L788
	.byte	1,4,2,5,11,9
	.half	.L384-.L789
	.byte	3,199,2,1,5,26,9
	.half	.L630-.L384
	.byte	1,5,17,9
	.half	.L3-.L630
	.byte	3,2,1,5,21,9
	.half	.L790-.L3
	.byte	1,5,29,9
	.half	.L791-.L790
	.byte	3,126,1,5,26,9
	.half	.L2-.L791
	.byte	1,4,1,5,30,7,9
	.half	.L385-.L2
	.byte	3,186,125,1,5,74,9
	.half	.L792-.L385
	.byte	1,5,92,9
	.half	.L631-.L792
	.byte	1,4,2,5,11,9
	.half	.L395-.L631
	.byte	3,198,2,1,5,26,9
	.half	.L632-.L395
	.byte	1,5,17,9
	.half	.L5-.L632
	.byte	3,2,1,5,21,9
	.half	.L793-.L5
	.byte	1,5,29,9
	.half	.L794-.L793
	.byte	3,126,1,5,26,9
	.half	.L4-.L794
	.byte	1,4,1,5,21,7,9
	.half	.L396-.L4
	.byte	3,188,125,1,5,19,9
	.half	.L795-.L396
	.byte	1,5,1,9
	.half	.L796-.L795
	.byte	3,2,1,7,9
	.half	.L337-.L796
	.byte	0,1,1
.L778:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Init')
	.sect	'.debug_ranges'
.L336:
	.word	-1,.L312,0,.L337-.L312,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_info'
.L338:
	.word	324
	.half	3
	.word	.L339
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L341,.L340
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_Shutdown',0,1,91,6,1,1,1
	.word	.L314,.L398,.L313
	.byte	4
	.word	.L314,.L398
	.byte	5
	.word	.L383,.L399,.L400
	.byte	6
	.word	.L386,.L401
	.byte	6
	.word	.L388,.L402
	.byte	6
	.word	.L390,.L403
	.byte	7
	.word	.L392,.L399,.L400
	.byte	8
	.byte	'i',0,2,145,3,12
	.word	.L393,.L404
	.byte	0,0,5
	.word	.L383,.L405,.L406
	.byte	6
	.word	.L386,.L401
	.byte	6
	.word	.L388,.L402
	.byte	6
	.word	.L390,.L403
	.byte	7
	.word	.L392,.L405,.L406
	.byte	8
	.byte	'i',0,2,145,3,12
	.word	.L393,.L407
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_abbrev'
.L339:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11
	.byte	1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_line'
.L340:
	.word	.L798-.L797
.L797:
	.half	3
	.word	.L800-.L799
.L799:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L800:
	.byte	5,8,7,0,5,2
	.word	.L314
	.byte	3,221,0,1,5,5,9
	.half	.L801-.L314
	.byte	1,5,9,7,9
	.half	.L802-.L801
	.byte	3,2,1,5,62,9
	.half	.L803-.L802
	.byte	1,5,27,9
	.half	.L6-.L803
	.byte	3,5,1,5,25,9
	.half	.L804-.L6
	.byte	1,5,30,9
	.half	.L805-.L804
	.byte	3,4,1,5,49,9
	.half	.L806-.L805
	.byte	1,5,61,9
	.half	.L807-.L806
	.byte	1,5,81,9
	.half	.L808-.L807
	.byte	1,4,2,5,11,9
	.half	.L399-.L808
	.byte	3,170,2,1,5,26,9
	.half	.L633-.L399
	.byte	1,5,17,9
	.half	.L9-.L633
	.byte	3,2,1,5,21,9
	.half	.L809-.L9
	.byte	1,5,29,9
	.half	.L810-.L809
	.byte	3,126,1,5,26,9
	.half	.L8-.L810
	.byte	1,4,1,5,30,7,9
	.half	.L400-.L8
	.byte	3,215,125,1,5,74,9
	.half	.L811-.L400
	.byte	1,5,92,9
	.half	.L634-.L811
	.byte	1,4,2,5,11,9
	.half	.L405-.L634
	.byte	3,169,2,1,5,26,9
	.half	.L635-.L405
	.byte	1,5,17,9
	.half	.L11-.L635
	.byte	3,2,1,5,21,9
	.half	.L812-.L11
	.byte	1,5,29,9
	.half	.L813-.L812
	.byte	3,126,1,5,26,9
	.half	.L10-.L813
	.byte	1,4,1,5,24,7,9
	.half	.L406-.L10
	.byte	3,216,125,1,5,22,9
	.half	.L814-.L406
	.byte	1,5,1,9
	.half	.L7-.L814
	.byte	3,2,1,7,9
	.half	.L342-.L7
	.byte	0,1,1
.L798:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_ranges'
.L341:
	.word	-1,.L314,0,.L342-.L314,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Transmit')
	.sect	'.debug_info'
.L343:
	.word	817
	.half	3
	.word	.L344
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L346,.L345
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_Transmit',0,1,239,1,16
	.word	.L408
	.byte	1,1,1
	.word	.L318,.L409,.L317
	.byte	4
	.byte	'CanTpTxSduId',0,1,239,1,41
	.word	.L410,.L411
	.byte	4
	.byte	'CanTpTxInfoPtr',0,1,239,1,74
	.word	.L412,.L413
	.byte	5
	.word	.L318,.L409
	.byte	6
	.byte	'RetVal',0,1,241,1,20
	.word	.L408,.L414
	.byte	6
	.byte	'Value',0,1,242,1,20
	.word	.L410,.L415
	.byte	6
	.byte	'ElapsedValue',0,1,243,1,20
	.word	.L410,.L416
	.byte	6
	.byte	'MaxLength',0,1,244,1,9
	.word	.L393,.L417
	.byte	6
	.byte	'PciId',0,1,245,1,11
	.word	.L408,.L418
	.byte	6
	.byte	'ErrorId',0,1,246,1,11
	.word	.L408,.L419
	.byte	6
	.byte	'PayloadLength',0,1,247,1,8
	.word	.L408,.L420
	.byte	6
	.byte	'TX_DL',0,1,248,1,8
	.word	.L408,.L421
	.byte	6
	.byte	'Connection',0,1,249,1,28
	.word	.L422,.L423
	.byte	6
	.byte	'Channel',0,1,250,1,24
	.word	.L424,.L425
	.byte	7
	.word	.L426,.L427,.L428
	.byte	8
	.word	.L429,.L430
	.byte	8
	.word	.L431,.L432
	.byte	8
	.word	.L433,.L434
	.byte	9
	.word	.L435,.L427,.L428
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L436
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L437
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L438
	.byte	0,0,7
	.word	.L439,.L440,.L42
	.byte	8
	.word	.L441,.L442
	.byte	8
	.word	.L443,.L444
	.byte	8
	.word	.L445,.L446
	.byte	9
	.word	.L447,.L440,.L42
	.byte	6
	.byte	'Connection',0,2,128,5,28
	.word	.L422,.L448
	.byte	6
	.byte	'AddressLength',0,2,129,5,11
	.word	.L408,.L449
	.byte	6
	.byte	'TX_DL',0,2,131,5,11
	.word	.L408,.L450
	.byte	0,0,7
	.word	.L451,.L452,.L453
	.byte	8
	.word	.L454,.L455
	.byte	8
	.word	.L456,.L457
	.byte	10
	.word	.L458,.L452,.L453
	.byte	0,7
	.word	.L459,.L460,.L461
	.byte	8
	.word	.L462,.L463
	.byte	8
	.word	.L464,.L465
	.byte	9
	.word	.L466,.L460,.L461
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L410,.L467
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Transmit')
	.sect	'.debug_abbrev'
.L344:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Transmit')
	.sect	'.debug_line'
.L345:
	.word	.L816-.L815
.L815:
	.half	3
	.word	.L818-.L817
.L817:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L818:
	.byte	5,16,7,0,5,2
	.word	.L318
	.byte	3,238,1,1,5,27,9
	.half	.L645-.L318
	.byte	3,2,1,5,28,9
	.half	.L646-.L645
	.byte	3,1,1,5,26,9
	.half	.L819-.L646
	.byte	1,5,45,9
	.half	.L820-.L819
	.byte	3,11,1,5,61,9
	.half	.L821-.L820
	.byte	1,4,2,5,21,9
	.half	.L427-.L821
	.byte	3,166,1,1,5,20,9
	.half	.L647-.L427
	.byte	3,1,1,5,8,9
	.half	.L648-.L647
	.byte	3,2,1,5,5,9
	.half	.L822-.L648
	.byte	1,5,17,7,9
	.half	.L823-.L822
	.byte	3,2,1,5,33,9
	.half	.L824-.L823
	.byte	1,5,18,9
	.half	.L16-.L824
	.byte	3,11,1,9
	.half	.L825-.L16
	.byte	3,1,1,9
	.half	.L826-.L825
	.byte	3,124,1,9
	.half	.L827-.L826
	.byte	3,126,1,5,9,9
	.half	.L828-.L827
	.byte	3,1,1,9
	.half	.L829-.L828
	.byte	3,9,1,9
	.half	.L830-.L829
	.byte	3,127,1,9
	.half	.L831-.L830
	.byte	3,4,1,5,28,9
	.half	.L20-.L831
	.byte	3,118,1,5,40,9
	.half	.L832-.L20
	.byte	1,5,17,9
	.half	.L833-.L832
	.byte	3,1,1,5,28,9
	.half	.L19-.L833
	.byte	3,3,1,5,40,9
	.half	.L834-.L19
	.byte	1,5,17,9
	.half	.L835-.L834
	.byte	3,1,1,5,28,9
	.half	.L23-.L835
	.byte	3,3,1,5,40,9
	.half	.L836-.L23
	.byte	1,5,5,9
	.half	.L837-.L836
	.byte	3,1,1,5,28,9
	.half	.L25-.L837
	.byte	3,2,1,5,40,9
	.half	.L838-.L25
	.byte	1,5,5,9
	.half	.L839-.L838
	.byte	3,1,1,5,17,9
	.half	.L26-.L839
	.byte	3,2,1,5,9,9
	.half	.L27-.L26
	.byte	3,3,1,5,38,7,9
	.half	.L840-.L27
	.byte	3,2,1,5,21,9
	.half	.L32-.L840
	.byte	3,4,1,5,5,9
	.half	.L17-.L32
	.byte	3,4,1,5,9,7,9
	.half	.L841-.L17
	.byte	3,2,1,5,16,9
	.half	.L642-.L841
	.byte	3,1,1,5,5,9
	.half	.L34-.L642
	.byte	3,3,1,4,1,9
	.half	.L35-.L34
	.byte	3,171,126,1,5,22,7,9
	.half	.L428-.L35
	.byte	3,3,1,5,34,9
	.half	.L842-.L428
	.byte	1,5,42,9
	.half	.L843-.L842
	.byte	1,5,45,9
	.half	.L650-.L843
	.byte	3,1,1,5,33,9
	.half	.L844-.L650
	.byte	1,5,19,9
	.half	.L845-.L844
	.byte	1,5,33,9
	.half	.L846-.L845
	.byte	1,5,3,9
	.half	.L651-.L846
	.byte	3,2,1,5,12,7,9
	.half	.L847-.L651
	.byte	3,2,1,5,35,9
	.half	.L652-.L847
	.byte	1,5,25,9
	.half	.L37-.L652
	.byte	3,2,1,5,8,9
	.half	.L848-.L37
	.byte	1,5,12,7,9
	.half	.L849-.L848
	.byte	3,2,1,5,25,9
	.half	.L653-.L849
	.byte	1,5,31,9
	.half	.L39-.L653
	.byte	3,4,1,4,2,5,61,9
	.half	.L440-.L39
	.byte	3,243,2,1,5,19,9
	.half	.L654-.L440
	.byte	3,3,1,5,21,9
	.half	.L649-.L654
	.byte	3,3,1,5,49,9
	.half	.L850-.L649
	.byte	1,5,38,9
	.half	.L851-.L850
	.byte	1,5,23,9
	.half	.L655-.L851
	.byte	3,2,1,5,35,9
	.half	.L852-.L655
	.byte	1,5,60,9
	.half	.L853-.L852
	.byte	1,5,5,9
	.half	.L656-.L853
	.byte	1,5,18,7,9
	.half	.L854-.L656
	.byte	3,2,1,5,16,9
	.half	.L855-.L854
	.byte	1,5,34,9
	.half	.L856-.L855
	.byte	1,5,13,9
	.half	.L41-.L856
	.byte	3,3,1,5,91,7,9
	.half	.L857-.L41
	.byte	1,5,97,9
	.half	.L858-.L857
	.byte	1,5,18,7,9
	.half	.L859-.L858
	.byte	3,2,1,5,16,9
	.half	.L860-.L859
	.byte	1,5,36,9
	.half	.L861-.L860
	.byte	1,5,13,9
	.half	.L43-.L861
	.byte	3,2,1,5,76,7,9
	.half	.L862-.L43
	.byte	1,5,74,9
	.half	.L863-.L862
	.byte	1,5,18,7,9
	.half	.L864-.L863
	.byte	3,2,1,5,16,9
	.half	.L865-.L864
	.byte	1,5,36,9
	.half	.L866-.L865
	.byte	1,5,18,9
	.half	.L46-.L866
	.byte	3,5,1,5,16,9
	.half	.L867-.L46
	.byte	1,4,1,5,12,9
	.half	.L42-.L867
	.byte	3,246,124,1,5,34,9
	.half	.L657-.L42
	.byte	3,2,1,4,2,5,12,9
	.half	.L452-.L657
	.byte	3,230,0,1,5,44,9
	.half	.L868-.L452
	.byte	1,5,37,9
	.half	.L49-.L868
	.byte	1,5,5,9
	.half	.L50-.L49
	.byte	1,4,1,5,4,9
	.half	.L51-.L50
	.byte	3,154,127,1,5,64,7,9
	.half	.L453-.L51
	.byte	3,2,1,5,53,9
	.half	.L869-.L453
	.byte	1,5,34,9
	.half	.L870-.L869
	.byte	1,5,30,9
	.half	.L658-.L870
	.byte	1,5,34,9
	.half	.L871-.L658
	.byte	1,5,18,9
	.half	.L659-.L871
	.byte	3,1,1,5,17,9
	.half	.L872-.L659
	.byte	1,5,62,7,9
	.half	.L873-.L872
	.byte	1,5,79,9
	.half	.L53-.L873
	.byte	1,5,98,9
	.half	.L54-.L53
	.byte	1,5,26,9
	.half	.L52-.L54
	.byte	3,5,1,5,57,9
	.half	.L874-.L52
	.byte	1,5,75,9
	.half	.L875-.L874
	.byte	1,5,57,9
	.half	.L56-.L875
	.byte	1,5,17,9
	.half	.L57-.L56
	.byte	1,5,29,9
	.half	.L55-.L57
	.byte	3,6,1,5,14,9
	.half	.L876-.L55
	.byte	1,5,54,9
	.half	.L661-.L876
	.byte	1,5,79,9
	.half	.L662-.L661
	.byte	1,5,54,9
	.half	.L58-.L662
	.byte	1,5,9,9
	.half	.L38-.L58
	.byte	3,3,1,5,13,7,9
	.half	.L877-.L38
	.byte	3,2,1,5,66,9
	.half	.L663-.L877
	.byte	1,5,36,9
	.half	.L60-.L663
	.byte	3,4,1,5,44,9
	.half	.L878-.L60
	.byte	1,4,2,5,30,9
	.half	.L460-.L878
	.byte	3,61,1,5,14,9
	.half	.L664-.L460
	.byte	3,2,1,5,12,9
	.half	.L879-.L664
	.byte	1,5,21,9
	.half	.L880-.L879
	.byte	3,2,1,5,28,9
	.half	.L881-.L880
	.byte	1,5,19,9
	.half	.L882-.L881
	.byte	1,4,1,5,16,9
	.half	.L461-.L882
	.byte	3,67,1,5,13,9
	.half	.L883-.L461
	.byte	1,5,38,7,9
	.half	.L884-.L883
	.byte	3,3,1,5,34,9
	.half	.L885-.L884
	.byte	3,1,1,5,32,9
	.half	.L886-.L885
	.byte	1,5,52,9
	.half	.L887-.L886
	.byte	3,1,1,5,36,9
	.half	.L888-.L887
	.byte	1,5,41,9
	.half	.L889-.L888
	.byte	3,1,1,5,39,9
	.half	.L890-.L889
	.byte	1,5,43,9
	.half	.L891-.L890
	.byte	3,1,1,5,41,9
	.half	.L892-.L891
	.byte	1,5,39,9
	.half	.L893-.L892
	.byte	3,2,1,5,37,9
	.half	.L894-.L893
	.byte	1,5,42,9
	.half	.L895-.L894
	.byte	3,1,1,5,31,9
	.half	.L896-.L895
	.byte	1,5,57,9
	.half	.L897-.L896
	.byte	1,5,55,9
	.half	.L898-.L897
	.byte	1,5,24,9
	.half	.L899-.L898
	.byte	3,1,1,5,5,9
	.half	.L36-.L899
	.byte	3,7,1,5,1,9
	.half	.L63-.L36
	.byte	3,1,1,7,9
	.half	.L347-.L63
	.byte	0,1,1
.L816:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Transmit')
	.sect	'.debug_ranges'
.L346:
	.word	-1,.L318,0,.L347-.L318,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_info'
.L348:
	.word	452
	.half	3
	.word	.L349
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L351,.L350
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_CancelTransmit',0,1,201,2,16
	.word	.L408
	.byte	1,1,1
	.word	.L320,.L468,.L319
	.byte	4
	.byte	'CanTpTxSduId',0,1,201,2,47
	.word	.L410,.L469
	.byte	5
	.word	.L320,.L468
	.byte	6
	.byte	'RetVal',0,1,203,2,20
	.word	.L408,.L470
	.byte	6
	.byte	'Connection',0,1,204,2,28
	.word	.L422,.L471
	.byte	6
	.byte	'TcDisabled',0,1,205,2,13
	.word	.L408,.L472
	.byte	7
	.word	.L426,.L473,.L474
	.byte	8
	.word	.L429,.L475
	.byte	8
	.word	.L431,.L476
	.byte	8
	.word	.L433,.L477
	.byte	9
	.word	.L435,.L473,.L474
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L478
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L479
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L480
	.byte	0,0,7
	.word	.L451,.L481,.L482
	.byte	8
	.word	.L454,.L483
	.byte	8
	.word	.L456,.L484
	.byte	10
	.word	.L458,.L481,.L482
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_abbrev'
.L349:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_line'
.L350:
	.word	.L901-.L900
.L900:
	.half	3
	.word	.L903-.L902
.L902:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L903:
	.byte	5,16,7,0,5,2
	.word	.L320
	.byte	3,200,2,1,5,27,9
	.half	.L668-.L320
	.byte	3,2,1,5,45,9
	.half	.L669-.L668
	.byte	3,5,1,5,67,9
	.half	.L904-.L669
	.byte	1,4,2,5,21,9
	.half	.L473-.L904
	.byte	3,211,0,1,5,20,9
	.half	.L671-.L473
	.byte	3,1,1,5,8,9
	.half	.L672-.L671
	.byte	3,2,1,5,5,9
	.half	.L905-.L672
	.byte	1,5,17,7,9
	.half	.L906-.L905
	.byte	3,2,1,5,33,9
	.half	.L907-.L906
	.byte	1,5,18,9
	.half	.L64-.L907
	.byte	3,11,1,9
	.half	.L908-.L64
	.byte	3,1,1,9
	.half	.L909-.L908
	.byte	3,124,1,9
	.half	.L910-.L909
	.byte	3,126,1,5,9,9
	.half	.L911-.L910
	.byte	3,1,1,9
	.half	.L912-.L911
	.byte	3,9,1,9
	.half	.L913-.L912
	.byte	3,127,1,9
	.half	.L914-.L913
	.byte	3,4,1,5,28,9
	.half	.L68-.L914
	.byte	3,118,1,5,40,9
	.half	.L915-.L68
	.byte	1,5,17,9
	.half	.L916-.L915
	.byte	3,1,1,5,28,9
	.half	.L67-.L916
	.byte	3,3,1,5,40,9
	.half	.L917-.L67
	.byte	1,5,17,9
	.half	.L918-.L917
	.byte	3,1,1,5,28,9
	.half	.L71-.L918
	.byte	3,3,1,5,40,9
	.half	.L919-.L71
	.byte	1,5,5,9
	.half	.L920-.L919
	.byte	3,1,1,5,28,9
	.half	.L73-.L920
	.byte	3,2,1,5,40,9
	.half	.L921-.L73
	.byte	1,5,5,9
	.half	.L922-.L921
	.byte	3,1,1,5,17,9
	.half	.L74-.L922
	.byte	3,2,1,5,9,9
	.half	.L75-.L74
	.byte	3,3,1,5,38,7,9
	.half	.L923-.L75
	.byte	3,2,1,5,21,9
	.half	.L80-.L923
	.byte	3,4,1,5,5,9
	.half	.L65-.L80
	.byte	3,4,1,5,9,7,9
	.half	.L924-.L65
	.byte	3,2,1,5,16,9
	.half	.L670-.L924
	.byte	3,1,1,5,5,9
	.half	.L82-.L670
	.byte	3,3,1,4,1,9
	.half	.L83-.L82
	.byte	3,254,126,1,5,42,7,9
	.half	.L474-.L83
	.byte	3,3,1,5,22,9
	.half	.L925-.L474
	.byte	1,5,34,9
	.half	.L926-.L925
	.byte	1,5,42,9
	.half	.L927-.L926
	.byte	1,5,49,9
	.half	.L673-.L927
	.byte	3,1,1,4,2,5,12,9
	.half	.L481-.L673
	.byte	3,34,1,5,44,9
	.half	.L928-.L481
	.byte	1,5,37,9
	.half	.L85-.L928
	.byte	1,5,5,9
	.half	.L86-.L85
	.byte	1,4,1,5,12,9
	.half	.L87-.L86
	.byte	3,98,1,5,29,7,9
	.half	.L482-.L87
	.byte	1,5,71,9
	.half	.L929-.L482
	.byte	1,5,42,7,9
	.half	.L930-.L929
	.byte	3,1,1,5,29,9
	.half	.L931-.L930
	.byte	1,5,42,9
	.half	.L932-.L931
	.byte	1,5,65,9
	.half	.L933-.L932
	.byte	1,5,26,9
	.half	.L934-.L933
	.byte	1,5,4,7,9
	.half	.L88-.L934
	.byte	3,2,1,5,82,9
	.half	.L675-.L88
	.byte	1,5,4,9
	.half	.L90-.L675
	.byte	3,5,1,5,32,9
	.half	.L676-.L90
	.byte	3,2,1,5,21,9
	.half	.L935-.L676
	.byte	1,5,4,9
	.half	.L936-.L935
	.byte	1,5,46,7,9
	.half	.L937-.L936
	.byte	3,2,1,5,8,9
	.half	.L938-.L937
	.byte	1,5,35,9
	.half	.L939-.L938
	.byte	1,5,68,9
	.half	.L940-.L939
	.byte	1,5,66,9
	.half	.L941-.L940
	.byte	1,5,29,9
	.half	.L92-.L941
	.byte	3,3,1,5,18,9
	.half	.L942-.L92
	.byte	1,5,44,9
	.half	.L674-.L942
	.byte	1,5,42,9
	.half	.L943-.L674
	.byte	1,5,11,9
	.half	.L944-.L943
	.byte	3,1,1,5,5,9
	.half	.L84-.L944
	.byte	3,6,1,5,1,9
	.half	.L93-.L84
	.byte	3,1,1,7,9
	.half	.L352-.L93
	.byte	0,1,1
.L901:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_ranges'
.L351:
	.word	-1,.L320,0,.L352-.L320,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_info'
.L353:
	.word	409
	.half	3
	.word	.L354
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L356,.L355
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_CancelReceive',0,1,249,2,16
	.word	.L408
	.byte	1,1,1
	.word	.L322,.L485,.L321
	.byte	4
	.byte	'CanTpRxSduId',0,1,249,2,46
	.word	.L410,.L486
	.byte	5
	.word	.L322,.L485
	.byte	6
	.byte	'PayLoadLength',0,1,251,2,11
	.word	.L408,.L487
	.byte	6
	.byte	'RetVal',0,1,252,2,20
	.word	.L408,.L488
	.byte	6
	.byte	'Connection',0,1,253,2,28
	.word	.L489,.L490
	.byte	7
	.word	.L426,.L491,.L492
	.byte	8
	.word	.L429,.L493
	.byte	8
	.word	.L431,.L494
	.byte	8
	.word	.L433,.L495
	.byte	9
	.word	.L435,.L491,.L492
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L496
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L497
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L498
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_abbrev'
.L354:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_line'
.L355:
	.word	.L946-.L945
.L945:
	.half	3
	.word	.L948-.L947
.L947:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L948:
	.byte	5,16,7,0,5,2
	.word	.L322
	.byte	3,248,2,1,5,27,9
	.half	.L678-.L322
	.byte	3,3,1,5,45,9
	.half	.L679-.L678
	.byte	3,4,1,4,2,5,21,9
	.half	.L491-.L679
	.byte	3,35,1,5,20,9
	.half	.L680-.L491
	.byte	3,1,1,5,8,9
	.half	.L681-.L680
	.byte	3,2,1,5,5,9
	.half	.L949-.L681
	.byte	1,5,17,7,9
	.half	.L950-.L949
	.byte	3,2,1,5,33,9
	.half	.L682-.L950
	.byte	1,5,18,9
	.half	.L94-.L682
	.byte	3,11,1,9
	.half	.L951-.L94
	.byte	3,1,1,9
	.half	.L952-.L951
	.byte	3,124,1,9
	.half	.L953-.L952
	.byte	3,126,1,5,9,9
	.half	.L954-.L953
	.byte	3,1,1,9
	.half	.L955-.L954
	.byte	3,9,1,9
	.half	.L956-.L955
	.byte	3,127,1,9
	.half	.L957-.L956
	.byte	3,4,1,5,28,9
	.half	.L98-.L957
	.byte	3,118,1,5,40,9
	.half	.L958-.L98
	.byte	1,5,17,9
	.half	.L959-.L958
	.byte	3,1,1,5,28,9
	.half	.L97-.L959
	.byte	3,3,1,5,40,9
	.half	.L960-.L97
	.byte	1,5,17,9
	.half	.L961-.L960
	.byte	3,1,1,5,28,9
	.half	.L101-.L961
	.byte	3,3,1,5,40,9
	.half	.L962-.L101
	.byte	1,5,5,9
	.half	.L963-.L962
	.byte	3,1,1,5,28,9
	.half	.L103-.L963
	.byte	3,2,1,5,40,9
	.half	.L964-.L103
	.byte	1,5,5,9
	.half	.L965-.L964
	.byte	3,1,1,5,17,9
	.half	.L104-.L965
	.byte	3,2,1,5,9,9
	.half	.L105-.L104
	.byte	3,3,1,5,21,9
	.half	.L966-.L105
	.byte	3,2,1,5,38,9
	.half	.L967-.L966
	.byte	1,5,21,9
	.half	.L110-.L967
	.byte	3,4,1,5,5,9
	.half	.L95-.L110
	.byte	3,4,1,5,9,7,9
	.half	.L968-.L95
	.byte	3,2,1,5,16,9
	.half	.L685-.L968
	.byte	3,1,1,5,5,9
	.half	.L112-.L685
	.byte	3,3,1,4,1,9
	.half	.L113-.L112
	.byte	3,174,127,1,5,42,7,9
	.half	.L492-.L113
	.byte	3,3,1,5,22,9
	.half	.L969-.L492
	.byte	1,5,34,9
	.half	.L970-.L969
	.byte	1,5,42,9
	.half	.L971-.L970
	.byte	1,5,13,9
	.half	.L687-.L971
	.byte	3,4,1,5,12,9
	.half	.L972-.L687
	.byte	1,5,42,7,9
	.half	.L973-.L972
	.byte	3,1,1,5,29,9
	.half	.L974-.L973
	.byte	1,5,42,9
	.half	.L975-.L974
	.byte	1,5,65,9
	.half	.L976-.L975
	.byte	1,5,26,9
	.half	.L977-.L976
	.byte	1,5,13,7,9
	.half	.L115-.L977
	.byte	3,2,1,5,90,9
	.half	.L686-.L115
	.byte	1,5,29,9
	.half	.L116-.L686
	.byte	3,4,1,5,57,9
	.half	.L978-.L116
	.byte	3,1,1,5,29,9
	.half	.L979-.L978
	.byte	1,5,46,9
	.half	.L980-.L979
	.byte	1,5,70,9
	.half	.L981-.L980
	.byte	3,127,1,5,76,9
	.half	.L982-.L981
	.byte	3,1,1,5,52,9
	.half	.L689-.L982
	.byte	3,2,1,5,13,9
	.half	.L983-.L689
	.byte	1,5,17,7,9
	.half	.L984-.L983
	.byte	3,3,1,5,45,9
	.half	.L688-.L984
	.byte	3,2,1,5,34,9
	.half	.L690-.L688
	.byte	1,5,17,9
	.half	.L985-.L690
	.byte	1,5,59,7,9
	.half	.L986-.L985
	.byte	3,2,1,5,21,9
	.half	.L987-.L986
	.byte	1,5,48,9
	.half	.L988-.L987
	.byte	1,5,81,9
	.half	.L989-.L988
	.byte	1,5,79,9
	.half	.L990-.L989
	.byte	1,5,42,9
	.half	.L119-.L990
	.byte	3,3,1,5,31,9
	.half	.L991-.L119
	.byte	1,5,57,9
	.half	.L992-.L991
	.byte	1,5,55,9
	.half	.L993-.L992
	.byte	1,5,24,9
	.half	.L994-.L993
	.byte	3,1,1,5,5,9
	.half	.L114-.L994
	.byte	3,7,1,5,1,9
	.half	.L120-.L114
	.byte	3,1,1,7,9
	.half	.L357-.L120
	.byte	0,1,1
.L946:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_ranges'
.L356:
	.word	-1,.L322,0,.L357-.L322,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_info'
.L358:
	.word	681
	.half	3
	.word	.L359
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L361,.L360
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_TxConfirmation',0,1,176,3,6,1,1,1
	.word	.L324,.L499,.L323
	.byte	4
	.byte	'TxPduId',0,1,176,3,37
	.word	.L410,.L500
	.byte	5
	.word	.L324,.L499
	.byte	6
	.byte	'Channel',0,1,178,3,21
	.word	.L424,.L501
	.byte	6
	.byte	'ChannelId',0,1,179,3,22
	.word	.L408,.L502
	.byte	6
	.byte	'SubState',0,1,180,3,8
	.word	.L408,.L503
	.byte	6
	.byte	'Value',0,1,181,3,20
	.word	.L410,.L504
	.byte	6
	.byte	'ElapsedValue',0,1,182,3,17
	.word	.L410,.L505
	.byte	6
	.byte	'MaxCopyLength',0,1,183,3,11
	.word	.L408,.L506
	.byte	6
	.byte	'TxConnection',0,1,184,3,25
	.word	.L422,.L507
	.byte	7
	.word	.L426,.L508,.L509
	.byte	8
	.word	.L429,.L510
	.byte	8
	.word	.L431,.L511
	.byte	8
	.word	.L433,.L512
	.byte	9
	.word	.L435,.L508,.L509
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L513
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L514
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L515
	.byte	0,0,7
	.word	.L459,.L516,.L517
	.byte	8
	.word	.L462,.L518
	.byte	8
	.word	.L464,.L519
	.byte	9
	.word	.L466,.L516,.L517
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L410,.L520
	.byte	0,0,7
	.word	.L521,.L522,.L153
	.byte	8
	.word	.L523,.L524
	.byte	9
	.word	.L525,.L522,.L153
	.byte	6
	.byte	'Channel',0,2,164,9,30
	.word	.L526,.L527
	.byte	6
	.byte	'RxConnection',0,2,165,9,28
	.word	.L489,.L528
	.byte	0,0,7
	.word	.L529,.L165,.L164
	.byte	8
	.word	.L530,.L531
	.byte	10
	.word	.L532,.L165,.L164
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_abbrev'
.L359:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_line'
.L360:
	.word	.L996-.L995
.L995:
	.half	3
	.word	.L998-.L997
.L997:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L998:
	.byte	5,6,7,0,5,2
	.word	.L324
	.byte	3,175,3,1,5,28,9
	.half	.L694-.L324
	.byte	3,5,1,5,26,9
	.half	.L999-.L694
	.byte	1,5,37,9
	.half	.L1000-.L999
	.byte	3,6,1,5,59,9
	.half	.L1001-.L1000
	.byte	1,4,2,5,21,9
	.half	.L508-.L1001
	.byte	3,104,1,5,20,9
	.half	.L697-.L508
	.byte	3,1,1,5,8,9
	.half	.L698-.L697
	.byte	3,2,1,5,5,9
	.half	.L1002-.L698
	.byte	1,5,17,7,9
	.half	.L1003-.L1002
	.byte	3,2,1,5,33,9
	.half	.L1004-.L1003
	.byte	1,5,18,9
	.half	.L121-.L1004
	.byte	3,11,1,9
	.half	.L1005-.L121
	.byte	3,1,1,9
	.half	.L1006-.L1005
	.byte	3,124,1,9
	.half	.L1007-.L1006
	.byte	3,126,1,5,9,9
	.half	.L1008-.L1007
	.byte	3,1,1,9
	.half	.L1009-.L1008
	.byte	3,9,1,9
	.half	.L1010-.L1009
	.byte	3,127,1,9
	.half	.L1011-.L1010
	.byte	3,4,1,5,28,9
	.half	.L125-.L1011
	.byte	3,118,1,5,40,9
	.half	.L1012-.L125
	.byte	1,5,17,9
	.half	.L1013-.L1012
	.byte	3,1,1,5,28,9
	.half	.L124-.L1013
	.byte	3,3,1,5,40,9
	.half	.L1014-.L124
	.byte	1,5,17,9
	.half	.L1015-.L1014
	.byte	3,1,1,5,28,9
	.half	.L128-.L1015
	.byte	3,3,1,5,40,9
	.half	.L1016-.L128
	.byte	1,5,5,9
	.half	.L1017-.L1016
	.byte	3,1,1,5,28,9
	.half	.L130-.L1017
	.byte	3,2,1,5,40,9
	.half	.L1018-.L130
	.byte	1,5,5,9
	.half	.L1019-.L1018
	.byte	3,1,1,5,17,9
	.half	.L131-.L1019
	.byte	3,2,1,5,9,9
	.half	.L132-.L131
	.byte	3,3,1,5,38,7,9
	.half	.L1020-.L132
	.byte	3,2,1,5,21,9
	.half	.L137-.L1020
	.byte	3,4,1,5,5,9
	.half	.L122-.L137
	.byte	3,4,1,5,9,7,9
	.half	.L1021-.L122
	.byte	3,2,1,5,16,9
	.half	.L696-.L1021
	.byte	3,1,1,5,5,9
	.half	.L139-.L696
	.byte	3,3,1,4,1,5,2,9
	.half	.L140-.L139
	.byte	3,105,1,5,29,7,9
	.half	.L509-.L140
	.byte	3,3,1,5,37,9
	.half	.L1022-.L509
	.byte	1,4,2,5,30,9
	.half	.L516-.L1022
	.byte	3,166,127,1,5,14,9
	.half	.L700-.L516
	.byte	3,2,1,5,12,9
	.half	.L1023-.L700
	.byte	1,5,21,9
	.half	.L1024-.L1023
	.byte	3,2,1,5,28,9
	.half	.L1025-.L1024
	.byte	1,5,19,9
	.half	.L1026-.L1025
	.byte	1,4,1,5,21,9
	.half	.L517-.L1026
	.byte	3,218,0,1,5,48,9
	.half	.L1027-.L517
	.byte	1,5,49,9
	.half	.L695-.L1027
	.byte	3,1,1,5,61,9
	.half	.L1028-.L695
	.byte	1,5,36,9
	.half	.L1029-.L1028
	.byte	1,5,81,9
	.half	.L701-.L1029
	.byte	1,5,93,9
	.half	.L699-.L701
	.byte	1,5,81,9
	.half	.L142-.L699
	.byte	1,5,19,9
	.half	.L143-.L142
	.byte	1,5,33,9
	.half	.L1030-.L143
	.byte	1,5,20,9
	.half	.L702-.L1030
	.byte	3,1,1,5,67,7,9
	.half	.L1031-.L702
	.byte	1,5,81,9
	.half	.L1032-.L1031
	.byte	1,5,93,9
	.half	.L704-.L1032
	.byte	1,5,65,9
	.half	.L144-.L704
	.byte	1,5,18,9
	.half	.L145-.L144
	.byte	3,11,1,5,12,9
	.half	.L1033-.L145
	.byte	3,121,1,5,41,9
	.half	.L147-.L1033
	.byte	3,2,1,5,39,9
	.half	.L1034-.L147
	.byte	1,4,2,5,54,9
	.half	.L522-.L1034
	.byte	3,218,5,1,5,72,9
	.half	.L703-.L522
	.byte	3,1,1,5,63,9
	.half	.L1035-.L703
	.byte	1,5,55,9
	.half	.L1036-.L1035
	.byte	1,5,63,9
	.half	.L1037-.L1036
	.byte	1,5,19,9
	.half	.L707-.L1037
	.byte	3,2,1,5,14,9
	.half	.L1038-.L707
	.byte	3,2,1,9
	.half	.L1039-.L1038
	.byte	3,3,1,9
	.half	.L1040-.L1039
	.byte	3,3,1,5,13,9
	.half	.L149-.L1040
	.byte	3,123,1,5,27,9
	.half	.L1041-.L149
	.byte	1,5,41,9
	.half	.L1042-.L1041
	.byte	1,5,39,9
	.half	.L1043-.L1042
	.byte	1,5,13,9
	.half	.L1044-.L1043
	.byte	3,1,1,5,49,9
	.half	.L150-.L1044
	.byte	3,2,1,5,76,9
	.half	.L1045-.L150
	.byte	1,5,95,9
	.half	.L1046-.L1045
	.byte	1,5,76,9
	.half	.L154-.L1046
	.byte	1,5,13,9
	.half	.L155-.L154
	.byte	1,5,27,9
	.half	.L1047-.L155
	.byte	1,5,39,9
	.half	.L1048-.L1047
	.byte	1,5,13,9
	.half	.L1049-.L1048
	.byte	3,1,1,9
	.half	.L151-.L1049
	.byte	3,2,1,9
	.half	.L709-.L151
	.byte	3,1,1,5,27,9
	.half	.L1050-.L709
	.byte	1,5,41,9
	.half	.L1051-.L1050
	.byte	1,5,39,9
	.half	.L1052-.L1051
	.byte	1,5,13,9
	.half	.L1053-.L1052
	.byte	3,1,1,9
	.half	.L152-.L1053
	.byte	3,2,1,4,1,5,56,9
	.half	.L153-.L152
	.byte	3,152,122,1,5,54,9
	.half	.L1054-.L153
	.byte	1,5,17,9
	.half	.L1055-.L1054
	.byte	3,1,1,5,41,9
	.half	.L146-.L1055
	.byte	3,4,1,5,39,9
	.half	.L1056-.L146
	.byte	1,5,61,9
	.half	.L1057-.L1056
	.byte	3,1,1,5,52,9
	.half	.L1058-.L1057
	.byte	1,5,44,9
	.half	.L1059-.L1058
	.byte	1,5,52,9
	.half	.L1060-.L1059
	.byte	1,5,33,9
	.half	.L713-.L1060
	.byte	3,1,1,5,63,9
	.half	.L712-.L713
	.byte	3,1,1,5,33,9
	.half	.L1061-.L712
	.byte	1,5,50,9
	.half	.L1062-.L1061
	.byte	1,5,65,9
	.half	.L1063-.L1062
	.byte	3,127,1,5,105,9
	.half	.L1064-.L1063
	.byte	3,1,1,5,84,9
	.half	.L1065-.L1064
	.byte	1,5,97,9
	.half	.L1066-.L1065
	.byte	1,5,82,9
	.half	.L1067-.L1066
	.byte	1,5,55,9
	.half	.L715-.L1067
	.byte	3,1,1,5,47,9
	.half	.L1068-.L715
	.byte	1,5,93,7,9
	.half	.L1069-.L1068
	.byte	1,5,98,9
	.half	.L1070-.L1069
	.byte	1,5,76,9
	.half	.L160-.L1070
	.byte	3,1,1,5,45,9
	.half	.L161-.L160
	.byte	3,127,1,5,27,9
	.half	.L1071-.L161
	.byte	3,3,1,5,17,9
	.half	.L1072-.L1071
	.byte	1,5,28,7,9
	.half	.L1073-.L1072
	.byte	3,2,1,5,32,9
	.half	.L1074-.L1073
	.byte	1,5,28,9
	.half	.L1075-.L1074
	.byte	3,1,1,5,33,9
	.half	.L1076-.L1075
	.byte	1,5,28,9
	.half	.L1077-.L1076
	.byte	3,1,1,5,47,9
	.half	.L1078-.L1077
	.byte	1,5,67,9
	.half	.L162-.L1078
	.byte	3,104,1,5,27,9
	.half	.L1079-.L162
	.byte	3,27,1,5,17,9
	.half	.L1080-.L1079
	.byte	1,5,35,7,9
	.half	.L1081-.L1080
	.byte	3,2,1,5,49,9
	.half	.L1082-.L1081
	.byte	1,5,47,9
	.half	.L1083-.L1082
	.byte	1,5,21,9
	.half	.L1084-.L1083
	.byte	3,1,1,5,59,9
	.half	.L714-.L1084
	.byte	3,127,1,5,31,9
	.half	.L163-.L714
	.byte	3,5,1,5,21,9
	.half	.L1085-.L163
	.byte	1,5,39,7,9
	.half	.L1086-.L1085
	.byte	3,2,1,5,53,9
	.half	.L716-.L1086
	.byte	1,5,51,9
	.half	.L1087-.L716
	.byte	1,5,84,9
	.half	.L1088-.L1087
	.byte	1,4,2,5,23,9
	.half	.L165-.L1088
	.byte	3,245,5,1,5,37,9
	.half	.L717-.L165
	.byte	1,5,35,9
	.half	.L1089-.L717
	.byte	1,5,15,9
	.half	.L1090-.L1089
	.byte	3,3,1,5,35,9
	.half	.L1091-.L1090
	.byte	1,5,33,9
	.half	.L1092-.L1091
	.byte	1,4,1,5,56,9
	.half	.L164-.L1092
	.byte	3,144,122,1,5,54,9
	.half	.L1093-.L164
	.byte	1,5,17,9
	.half	.L1094-.L1093
	.byte	3,1,1,9
	.half	.L148-.L1094
	.byte	3,3,1,5,1,9
	.half	.L141-.L148
	.byte	3,7,1,7,9
	.half	.L362-.L141
	.byte	0,1,1
.L996:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_ranges'
.L361:
	.word	-1,.L324,0,.L362-.L324,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_info'
.L363:
	.word	1260
	.half	3
	.word	.L364
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L366,.L365
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_RxIndication',0,1,134,4,6,1,1,1
	.word	.L326,.L533,.L325
	.byte	4
	.byte	'RxPduId',0,1,134,4,35
	.word	.L410,.L534
	.byte	4
	.byte	'PduInfoPtr',0,1,134,4,63
	.word	.L412,.L535
	.byte	5
	.word	.L326,.L533
	.byte	6
	.byte	'Context',0,1,136,4,22
	.word	.L536,.L537
	.byte	6
	.byte	'ErrorId',0,1,137,4,8
	.word	.L408,.L538
	.byte	7
	.word	.L426,.L539,.L540
	.byte	8
	.word	.L429,.L541
	.byte	8
	.word	.L431,.L542
	.byte	8
	.word	.L433,.L543
	.byte	9
	.word	.L435,.L539,.L540
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L544
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L545
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L546
	.byte	0,0,7
	.word	.L547,.L548,.L218
	.byte	8
	.word	.L549,.L550
	.byte	8
	.word	.L551,.L552
	.byte	9
	.word	.L553,.L548,.L218
	.byte	6
	.byte	'ErrorId',0,2,174,6,11
	.word	.L408,.L554
	.byte	6
	.byte	'TxSduId',0,2,175,6,21
	.word	.L408,.L555
	.byte	6
	.byte	'RxSduId',0,2,176,6,21
	.word	.L408,.L556
	.byte	6
	.byte	'FrameType',0,2,177,6,11
	.word	.L408,.L557
	.byte	6
	.byte	'SduDataPtr',0,2,178,6,12
	.word	.L558,.L559
	.byte	6
	.byte	'TxConnection',0,2,179,6,25
	.word	.L422,.L560
	.byte	6
	.byte	'RxConnection',0,2,180,6,25
	.word	.L489,.L561
	.byte	6
	.byte	'RxPdu',0,2,181,6,28
	.word	.L562,.L563
	.byte	7
	.word	.L564,.L565,.L566
	.byte	8
	.word	.L567,.L568
	.byte	10
	.word	.L569,.L570
	.byte	6
	.byte	'Status',0,2,248,5,20
	.word	.L408,.L573
	.byte	6
	.byte	'TxConnection',0,2,249,5,28
	.word	.L422,.L574
	.byte	0,0,7
	.word	.L564,.L571,.L572
	.byte	8
	.word	.L567,.L568
	.byte	0,7
	.word	.L451,.L575,.L576
	.byte	8
	.word	.L454,.L577
	.byte	8
	.word	.L456,.L578
	.byte	11
	.word	.L458,.L575,.L576
	.byte	0,7
	.word	.L451,.L579,.L580
	.byte	8
	.word	.L454,.L577
	.byte	8
	.word	.L456,.L578
	.byte	11
	.word	.L458,.L579,.L580
	.byte	0,7
	.word	.L451,.L581,.L582
	.byte	8
	.word	.L454,.L577
	.byte	8
	.word	.L456,.L578
	.byte	11
	.word	.L458,.L581,.L582
	.byte	0,7
	.word	.L451,.L583,.L584
	.byte	8
	.word	.L454,.L577
	.byte	8
	.word	.L456,.L578
	.byte	11
	.word	.L458,.L583,.L584
	.byte	0,0,0,7
	.word	.L585,.L586,.L587
	.byte	8
	.word	.L588,.L589
	.byte	8
	.word	.L590,.L591
	.byte	9
	.word	.L592,.L586,.L587
	.byte	6
	.byte	'CAN_DL',0,2,251,6,11
	.word	.L408,.L593
	.byte	6
	.byte	'PciLowerNibble',0,2,252,6,11
	.word	.L408,.L594
	.byte	6
	.byte	'Data',0,2,253,6,12
	.word	.L558,.L595
	.byte	6
	.byte	'DataOffset',0,2,254,6,11
	.word	.L408,.L596
	.byte	6
	.byte	'SF_DL',0,2,255,6,11
	.word	.L408,.L597
	.byte	6
	.byte	'FF_DL',0,2,128,7,12
	.word	.L393,.L598
	.byte	6
	.byte	'FF_DLmin',0,2,129,7,19
	.word	.L410,.L599
	.byte	6
	.byte	'FfDlValue12bit',0,2,130,7,19
	.word	.L410,.L600
	.byte	6
	.byte	'MaxCfSduLength',0,2,131,7,8
	.word	.L408,.L601
	.byte	6
	.byte	'SduLengthRemaining',0,2,132,7,16
	.word	.L410,.L602
	.byte	6
	.byte	'RX_DL',0,2,133,7,8
	.word	.L408,.L603
	.byte	0,0,7
	.word	.L604,.L587,.L279
	.byte	8
	.word	.L605,.L606
	.byte	9
	.word	.L607,.L587,.L279
	.byte	6
	.byte	'Api',0,2,236,9,11
	.word	.L408,.L608
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_abbrev'
.L364:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_line'
.L365:
	.word	.L1096-.L1095
.L1095:
	.half	3
	.word	.L1098-.L1097
.L1097:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1098:
	.byte	5,6,7,0,5,2
	.word	.L326
	.byte	3,133,4,1,5,16,9
	.half	.L721-.L326
	.byte	3,5,1,5,25,9
	.half	.L1099-.L721
	.byte	3,1,1,5,23,9
	.half	.L1100-.L1099
	.byte	1,5,25,9
	.half	.L1101-.L1100
	.byte	3,1,1,5,23,9
	.half	.L1102-.L1101
	.byte	1,5,40,9
	.half	.L1103-.L1102
	.byte	3,3,1,5,60,9
	.half	.L1104-.L1103
	.byte	1,4,2,5,21,9
	.half	.L539-.L1104
	.byte	3,147,127,1,5,20,9
	.half	.L722-.L539
	.byte	3,1,1,5,8,9
	.half	.L723-.L722
	.byte	3,2,1,5,5,9
	.half	.L1105-.L723
	.byte	1,5,17,7,9
	.half	.L1106-.L1105
	.byte	3,2,1,5,33,9
	.half	.L1107-.L1106
	.byte	1,5,18,9
	.half	.L169-.L1107
	.byte	3,11,1,9
	.half	.L1108-.L169
	.byte	3,1,1,9
	.half	.L1109-.L1108
	.byte	3,124,1,9
	.half	.L1110-.L1109
	.byte	3,126,1,5,9,9
	.half	.L1111-.L1110
	.byte	3,1,1,9
	.half	.L1112-.L1111
	.byte	3,9,1,9
	.half	.L1113-.L1112
	.byte	3,127,1,9
	.half	.L1114-.L1113
	.byte	3,4,1,5,28,9
	.half	.L173-.L1114
	.byte	3,118,1,5,40,9
	.half	.L1115-.L173
	.byte	1,5,17,9
	.half	.L1116-.L1115
	.byte	3,1,1,5,28,9
	.half	.L172-.L1116
	.byte	3,3,1,5,40,9
	.half	.L1117-.L172
	.byte	1,5,17,9
	.half	.L1118-.L1117
	.byte	3,1,1,5,28,9
	.half	.L176-.L1118
	.byte	3,3,1,5,40,9
	.half	.L1119-.L176
	.byte	1,5,5,9
	.half	.L1120-.L1119
	.byte	3,1,1,5,28,9
	.half	.L178-.L1120
	.byte	3,2,1,5,40,9
	.half	.L1121-.L178
	.byte	1,5,5,9
	.half	.L1122-.L1121
	.byte	3,1,1,5,17,9
	.half	.L179-.L1122
	.byte	3,2,1,5,9,9
	.half	.L180-.L179
	.byte	3,3,1,5,38,7,9
	.half	.L1123-.L180
	.byte	3,2,1,5,21,9
	.half	.L185-.L1123
	.byte	3,4,1,5,5,9
	.half	.L170-.L185
	.byte	3,4,1,5,9,7,9
	.half	.L1124-.L170
	.byte	3,2,1,5,16,9
	.half	.L719-.L1124
	.byte	3,1,1,5,5,9
	.half	.L187-.L719
	.byte	3,3,1,4,1,9
	.half	.L188-.L187
	.byte	3,62,1,5,3,7,9
	.half	.L540-.L188
	.byte	3,3,1,5,7,7,9
	.half	.L1125-.L540
	.byte	3,2,1,5,78,9
	.half	.L724-.L1125
	.byte	1,5,41,9
	.half	.L190-.L724
	.byte	3,4,1,4,2,5,19,9
	.half	.L548-.L190
	.byte	3,149,2,1,5,36,9
	.half	.L725-.L548
	.byte	3,7,1,5,48,9
	.half	.L1126-.L725
	.byte	1,5,65,9
	.half	.L1127-.L1126
	.byte	1,5,56,9
	.half	.L1128-.L1127
	.byte	1,5,18,9
	.half	.L726-.L1128
	.byte	3,2,1,5,5,9
	.half	.L728-.L726
	.byte	1,5,17,7,9
	.half	.L1129-.L728
	.byte	3,2,1,5,40,9
	.half	.L1130-.L1129
	.byte	1,5,28,9
	.half	.L192-.L1130
	.byte	3,5,1,5,26,9
	.half	.L1131-.L192
	.byte	1,5,24,9
	.half	.L1132-.L1131
	.byte	3,1,1,5,17,9
	.half	.L1133-.L1132
	.byte	1,5,24,9
	.half	.L1134-.L1133
	.byte	3,1,1,5,17,9
	.half	.L1135-.L1134
	.byte	1,9
	.half	.L1136-.L1135
	.byte	3,2,1,5,9,9
	.half	.L1137-.L1136
	.byte	1,5,32,7,9
	.half	.L1138-.L1137
	.byte	3,2,1,5,30,9
	.half	.L1139-.L1138
	.byte	1,5,23,9
	.half	.L1140-.L1139
	.byte	3,1,1,5,18,9
	.half	.L1141-.L1140
	.byte	3,1,1,5,32,9
	.half	.L727-.L1141
	.byte	1,5,42,9
	.half	.L1142-.L727
	.byte	1,5,58,9
	.half	.L1143-.L1142
	.byte	1,5,21,9
	.half	.L194-.L1143
	.byte	3,3,1,5,33,9
	.half	.L1144-.L194
	.byte	1,5,9,9
	.half	.L729-.L1144
	.byte	3,2,1,5,32,7,9
	.half	.L1145-.L729
	.byte	3,2,1,5,25,9
	.half	.L565-.L1145
	.byte	3,174,127,1,5,13,9
	.half	.L566-.L565
	.byte	3,212,0,1,5,34,7,9
	.half	.L1146-.L566
	.byte	3,2,1,5,32,9
	.half	.L1147-.L1146
	.byte	1,5,27,9
	.half	.L571-.L1147
	.byte	3,167,127,1,5,15,9
	.half	.L731-.L571
	.byte	3,3,1,5,37,9
	.half	.L730-.L731
	.byte	1,5,5,9
	.half	.L1148-.L730
	.byte	1,5,44,7,9
	.half	.L1149-.L1148
	.byte	3,2,1,5,36,9
	.half	.L1150-.L1149
	.byte	1,5,44,9
	.half	.L1151-.L1150
	.byte	1,5,39,9
	.half	.L732-.L1151
	.byte	3,2,1,5,12,9
	.half	.L1152-.L732
	.byte	1,5,26,9
	.half	.L1153-.L1152
	.byte	1,5,9,9
	.half	.L1154-.L1153
	.byte	1,5,32,7,9
	.half	.L1155-.L1154
	.byte	3,2,1,5,20,9
	.half	.L1156-.L1155
	.byte	3,1,1,5,5,9
	.half	.L197-.L1156
	.byte	3,32,1,5,17,9
	.half	.L199-.L197
	.byte	3,48,1,5,65,7,9
	.half	.L572-.L199
	.byte	3,2,1,5,56,9
	.half	.L1157-.L572
	.byte	1,5,48,9
	.half	.L1158-.L1157
	.byte	1,5,56,9
	.half	.L1159-.L1158
	.byte	1,5,60,9
	.half	.L734-.L1159
	.byte	3,1,1,5,46,9
	.half	.L1160-.L734
	.byte	1,5,74,9
	.half	.L1161-.L1160
	.byte	3,1,1,5,44,9
	.half	.L1162-.L1161
	.byte	1,5,61,9
	.half	.L1163-.L1162
	.byte	1,5,42,9
	.half	.L1164-.L1163
	.byte	1,5,73,9
	.half	.L1165-.L1164
	.byte	3,1,1,5,12,9
	.half	.L575-.L1165
	.byte	3,159,124,1,5,44,9
	.half	.L1166-.L575
	.byte	1,5,37,9
	.half	.L201-.L1166
	.byte	1,5,5,9
	.half	.L202-.L201
	.byte	1,5,42,9
	.half	.L203-.L202
	.byte	3,225,3,1,5,29,9
	.half	.L576-.L203
	.byte	3,1,1,5,17,9
	.half	.L200-.L576
	.byte	3,122,1,5,34,9
	.half	.L196-.L200
	.byte	3,11,1,5,32,9
	.half	.L1167-.L196
	.byte	1,5,27,9
	.half	.L1168-.L1167
	.byte	3,1,1,5,49,9
	.half	.L1169-.L1168
	.byte	1,5,17,9
	.half	.L1170-.L1169
	.byte	1,5,58,7,9
	.half	.L1171-.L1170
	.byte	3,2,1,5,56,9
	.half	.L1172-.L1171
	.byte	1,5,48,9
	.half	.L1173-.L1172
	.byte	1,5,56,9
	.half	.L1174-.L1173
	.byte	1,5,54,9
	.half	.L735-.L1174
	.byte	3,1,1,5,40,9
	.half	.L1175-.L735
	.byte	1,5,60,9
	.half	.L1176-.L1175
	.byte	3,1,1,5,46,9
	.half	.L1177-.L1176
	.byte	1,5,74,9
	.half	.L1178-.L1177
	.byte	3,1,1,5,44,9
	.half	.L1179-.L1178
	.byte	1,5,61,9
	.half	.L1180-.L1179
	.byte	1,5,42,9
	.half	.L1181-.L1180
	.byte	1,5,73,9
	.half	.L1182-.L1181
	.byte	3,1,1,5,12,9
	.half	.L579-.L1182
	.byte	3,146,124,1,5,44,9
	.half	.L1183-.L579
	.byte	1,5,37,9
	.half	.L206-.L1183
	.byte	1,5,5,9
	.half	.L207-.L206
	.byte	1,5,42,9
	.half	.L208-.L207
	.byte	3,238,3,1,5,73,9
	.half	.L580-.L208
	.byte	3,1,1,5,12,9
	.half	.L581-.L580
	.byte	3,145,124,1,5,44,9
	.half	.L1184-.L581
	.byte	1,5,37,9
	.half	.L209-.L1184
	.byte	1,5,5,9
	.half	.L210-.L209
	.byte	1,5,42,9
	.half	.L211-.L210
	.byte	3,239,3,1,5,74,9
	.half	.L582-.L211
	.byte	3,1,1,5,12,9
	.half	.L583-.L582
	.byte	3,144,124,1,5,44,9
	.half	.L1185-.L583
	.byte	1,5,37,9
	.half	.L212-.L1185
	.byte	1,5,5,9
	.half	.L213-.L212
	.byte	1,5,43,9
	.half	.L214-.L213
	.byte	3,240,3,1,5,32,9
	.half	.L1186-.L214
	.byte	3,1,1,5,70,7,9
	.half	.L584-.L1186
	.byte	1,5,94,7,9
	.half	.L1187-.L584
	.byte	1,5,52,9
	.half	.L1188-.L1187
	.byte	3,1,1,5,94,9
	.half	.L215-.L1188
	.byte	3,127,1,5,5,9
	.half	.L193-.L215
	.byte	3,7,1,4,1,5,7,9
	.half	.L218-.L193
	.byte	3,173,125,1,5,17,7,9
	.half	.L1189-.L218
	.byte	3,2,1,5,74,9
	.half	.L1190-.L1189
	.byte	1,5,49,9
	.half	.L219-.L1190
	.byte	3,2,1,4,2,5,18,9
	.half	.L586-.L219
	.byte	3,220,2,1,5,22,9
	.half	.L736-.L586
	.byte	3,3,1,5,17,9
	.half	.L737-.L736
	.byte	3,1,1,5,18,9
	.half	.L738-.L737
	.byte	3,1,1,5,41,9
	.half	.L739-.L738
	.byte	3,7,1,5,19,9
	.half	.L1191-.L739
	.byte	1,5,32,9
	.half	.L1192-.L1191
	.byte	1,5,23,9
	.half	.L740-.L1192
	.byte	3,1,1,5,27,9
	.half	.L1193-.L740
	.byte	1,5,16,9
	.half	.L1194-.L1193
	.byte	3,2,1,5,8,9
	.half	.L1195-.L1194
	.byte	3,2,1,9
	.half	.L1196-.L1195
	.byte	3,28,1,9
	.half	.L1197-.L1196
	.byte	3,25,1,9
	.half	.L1198-.L1197
	.byte	3,10,1,5,41,9
	.half	.L221-.L1198
	.byte	3,68,1,5,17,9
	.half	.L1199-.L221
	.byte	3,126,1,5,4,9
	.half	.L1200-.L1199
	.byte	1,5,54,7,9
	.half	.L1201-.L1200
	.byte	3,2,1,5,39,9
	.half	.L1202-.L1201
	.byte	1,5,11,9
	.half	.L1203-.L1202
	.byte	3,1,1,5,8,9
	.half	.L1204-.L1203
	.byte	3,2,1,5,76,7,9
	.half	.L1205-.L1204
	.byte	1,5,51,9
	.half	.L1206-.L1205
	.byte	1,5,24,7,9
	.half	.L1207-.L1206
	.byte	3,2,1,5,15,9
	.half	.L1208-.L1207
	.byte	1,5,40,7,9
	.half	.L1209-.L1208
	.byte	1,5,63,9
	.half	.L1210-.L1209
	.byte	1,5,77,9
	.half	.L229-.L1210
	.byte	1,5,40,9
	.half	.L230-.L229
	.byte	1,5,91,9
	.half	.L227-.L230
	.byte	3,126,1,5,54,9
	.half	.L226-.L227
	.byte	3,8,1,5,39,9
	.half	.L1211-.L226
	.byte	1,5,17,9
	.half	.L1212-.L1211
	.byte	3,1,1,5,8,9
	.half	.L1213-.L1212
	.byte	3,2,1,5,21,7,9
	.half	.L1214-.L1213
	.byte	3,1,1,5,15,9
	.half	.L1215-.L1214
	.byte	1,5,42,7,9
	.half	.L1216-.L1215
	.byte	3,1,1,5,15,9
	.half	.L1217-.L1216
	.byte	1,5,36,7,9
	.half	.L1218-.L1217
	.byte	3,1,1,5,48,9
	.half	.L1219-.L1218
	.byte	1,5,45,9
	.half	.L1220-.L1219
	.byte	1,5,42,7,9
	.half	.L1221-.L1220
	.byte	3,2,1,5,24,9
	.half	.L1222-.L1221
	.byte	1,5,15,9
	.half	.L1223-.L1222
	.byte	1,5,42,7,9
	.half	.L1224-.L1223
	.byte	1,5,81,9
	.half	.L1225-.L1224
	.byte	1,5,40,9
	.half	.L237-.L1225
	.byte	1,5,4,9
	.half	.L231-.L237
	.byte	3,4,1,5,31,9
	.half	.L222-.L231
	.byte	3,3,1,5,13,9
	.half	.L1226-.L222
	.byte	1,5,12,9
	.half	.L742-.L1226
	.byte	3,1,1,5,44,9
	.half	.L1227-.L742
	.byte	1,5,63,9
	.half	.L1228-.L1227
	.byte	1,5,44,9
	.half	.L239-.L1228
	.byte	1,5,47,9
	.half	.L247-.L239
	.byte	3,2,1,5,79,9
	.half	.L743-.L247
	.byte	1,5,84,9
	.half	.L1229-.L743
	.byte	1,5,79,9
	.half	.L248-.L1229
	.byte	1,5,21,9
	.half	.L249-.L248
	.byte	1,5,44,9
	.half	.L1230-.L249
	.byte	1,5,73,9
	.half	.L746-.L1230
	.byte	3,2,1,5,31,9
	.half	.L1231-.L746
	.byte	1,5,67,9
	.half	.L1232-.L1231
	.byte	1,5,41,9
	.half	.L1233-.L1232
	.byte	3,97,1,5,13,9
	.half	.L1234-.L1233
	.byte	3,33,1,5,30,7,9
	.half	.L1235-.L1234
	.byte	3,2,1,5,55,9
	.half	.L1236-.L1235
	.byte	1,5,48,9
	.half	.L1237-.L1236
	.byte	1,5,78,9
	.half	.L1238-.L1237
	.byte	1,5,71,9
	.half	.L745-.L1238
	.byte	1,5,98,9
	.half	.L1239-.L745
	.byte	1,5,92,9
	.half	.L747-.L1239
	.byte	1,5,66,9
	.half	.L1240-.L747
	.byte	3,1,1,5,51,9
	.half	.L1241-.L1240
	.byte	1,5,35,9
	.half	.L1242-.L1241
	.byte	3,1,1,5,26,9
	.half	.L1243-.L1242
	.byte	1,5,65,7,9
	.half	.L1244-.L1243
	.byte	1,5,62,9
	.half	.L1245-.L1244
	.byte	1,5,81,7,9
	.half	.L251-.L1245
	.byte	1,5,100,9
	.half	.L1246-.L251
	.byte	1,5,107,9
	.half	.L253-.L1246
	.byte	1,5,66,9
	.half	.L250-.L253
	.byte	3,5,1,5,51,9
	.half	.L1247-.L250
	.byte	1,5,21,9
	.half	.L254-.L1247
	.byte	3,4,1,5,13,9
	.half	.L1248-.L254
	.byte	1,5,47,7,9
	.half	.L1249-.L1248
	.byte	1,5,60,7,9
	.half	.L255-.L1249
	.byte	1,5,79,9
	.half	.L1250-.L255
	.byte	1,5,4,9
	.half	.L257-.L1250
	.byte	3,2,1,5,25,9
	.half	.L223-.L257
	.byte	3,3,1,5,46,9
	.half	.L1251-.L223
	.byte	1,5,38,9
	.half	.L1252-.L1251
	.byte	1,5,58,9
	.half	.L1253-.L1252
	.byte	1,5,16,9
	.half	.L748-.L1253
	.byte	3,1,1,5,12,9
	.half	.L1254-.L748
	.byte	3,1,1,5,24,9
	.half	.L1255-.L1254
	.byte	3,1,1,5,38,9
	.half	.L1256-.L1255
	.byte	1,5,27,9
	.half	.L1257-.L1256
	.byte	3,1,1,5,13,9
	.half	.L750-.L1257
	.byte	3,1,1,5,80,7,9
	.half	.L1258-.L750
	.byte	1,5,53,9
	.half	.L749-.L1258
	.byte	1,5,94,9
	.half	.L1259-.L749
	.byte	1,5,21,9
	.half	.L260-.L1259
	.byte	3,1,1,5,13,9
	.half	.L751-.L260
	.byte	1,5,38,7,9
	.half	.L1260-.L751
	.byte	1,5,65,9
	.half	.L1261-.L1260
	.byte	1,5,4,9
	.half	.L262-.L1261
	.byte	3,1,1,5,24,9
	.half	.L224-.L262
	.byte	3,3,1,5,33,9
	.half	.L1262-.L224
	.byte	3,1,1,5,47,9
	.half	.L1263-.L1262
	.byte	1,5,21,9
	.half	.L1264-.L1263
	.byte	3,1,1,5,13,9
	.half	.L1265-.L1264
	.byte	1,5,36,7,9
	.half	.L1266-.L1265
	.byte	1,5,59,9
	.half	.L1267-.L1266
	.byte	1,5,80,9
	.half	.L264-.L1267
	.byte	1,5,36,9
	.half	.L265-.L264
	.byte	1,5,4,9
	.half	.L1268-.L265
	.byte	3,1,1,9
	.half	.L225-.L1268
	.byte	3,3,1,5,18,9
	.half	.L238-.L225
	.byte	3,3,1,5,22,9
	.half	.L1269-.L238
	.byte	3,1,1,5,31,9
	.half	.L1270-.L1269
	.byte	3,1,1,5,23,9
	.half	.L1271-.L1270
	.byte	1,5,66,7,9
	.half	.L1272-.L1271
	.byte	1,5,74,9
	.half	.L1273-.L1272
	.byte	1,5,76,9
	.half	.L268-.L1273
	.byte	1,5,21,9
	.half	.L269-.L268
	.byte	1,5,9,9
	.half	.L1274-.L269
	.byte	3,2,1,5,2,9
	.half	.L271-.L1274
	.byte	1,4,1,5,18,9
	.half	.L272-.L271
	.byte	3,198,124,1,4,2,5,19,7,9
	.half	.L587-.L272
	.byte	3,207,5,1,5,11,9
	.half	.L1275-.L587
	.byte	1,5,88,9
	.half	.L752-.L1275
	.byte	1,5,59,9
	.half	.L274-.L752
	.byte	1,5,9,9
	.half	.L275-.L274
	.byte	3,2,1,5,31,9
	.half	.L1276-.L275
	.byte	1,5,23,9
	.half	.L1277-.L1276
	.byte	1,5,8,9
	.half	.L1278-.L1277
	.byte	1,5,47,7,9
	.half	.L1279-.L1278
	.byte	3,1,1,5,44,9
	.half	.L1280-.L1279
	.byte	1,5,9,7,9
	.half	.L276-.L1280
	.byte	3,2,1,5,31,9
	.half	.L753-.L276
	.byte	3,1,1,5,23,9
	.half	.L1281-.L753
	.byte	1,5,46,9
	.half	.L1282-.L1281
	.byte	1,5,44,9
	.half	.L1283-.L1282
	.byte	1,5,15,9
	.half	.L277-.L1283
	.byte	3,4,1,5,5,9
	.half	.L1284-.L277
	.byte	1,5,9,7,9
	.half	.L1285-.L1284
	.byte	3,2,1,5,67,9
	.half	.L1286-.L1285
	.byte	1,5,9,9
	.half	.L278-.L1286
	.byte	3,4,1,4,1,5,48,9
	.half	.L279-.L278
	.byte	3,163,122,1,5,17,9
	.half	.L273-.L279
	.byte	3,4,1,5,1,9
	.half	.L189-.L273
	.byte	3,6,1,7,9
	.half	.L367-.L189
	.byte	0,1,1
.L1096:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_ranges'
.L366:
	.word	-1,.L326,0,.L367-.L326,0,0
.L570:
	.word	-1,.L326,.L565-.L326,.L566-.L326,.L571-.L326,.L572-.L326,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_info'
.L368:
	.word	421
	.half	3
	.word	.L369
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L371,.L370
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_TriggerTransmit',0,1,182,4,16
	.word	.L408
	.byte	1,1,1
	.word	.L328,.L609,.L327
	.byte	4
	.byte	'TxPduId',0,1,182,4,48
	.word	.L410,.L610
	.byte	4
	.byte	'PduInfoPtr',0,1,182,4,70
	.word	.L611,.L612
	.byte	5
	.word	.L328,.L609
	.byte	6
	.byte	'Status',0,1,184,4,20
	.word	.L408,.L613
	.byte	6
	.byte	'ChannelId',0,1,185,4,25
	.word	.L408,.L614
	.byte	6
	.byte	'TX_DL',0,1,186,4,11
	.word	.L408,.L615
	.byte	7
	.word	.L426,.L616,.L617
	.byte	8
	.word	.L429,.L618
	.byte	8
	.word	.L431,.L619
	.byte	8
	.word	.L433,.L620
	.byte	9
	.word	.L435,.L616,.L617
	.byte	6
	.byte	'ErrorId',0,2,162,3,11
	.word	.L408,.L621
	.byte	6
	.byte	'TotalIds',0,2,163,3,12
	.word	.L393,.L622
	.byte	6
	.byte	'Status',0,2,164,3,13
	.word	.L408,.L623
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_abbrev'
.L369:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_line'
.L370:
	.word	.L1288-.L1287
.L1287:
	.half	3
	.word	.L1290-.L1289
.L1289:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1290:
	.byte	5,16,7,0,5,2
	.word	.L328
	.byte	3,181,4,1,5,27,9
	.half	.L760-.L328
	.byte	3,2,1,5,17,9
	.half	.L761-.L760
	.byte	3,2,1,5,40,9
	.half	.L763-.L761
	.byte	3,3,1,5,63,9
	.half	.L1291-.L763
	.byte	1,4,2,5,21,9
	.half	.L616-.L1291
	.byte	3,230,126,1,5,20,9
	.half	.L764-.L616
	.byte	3,1,1,5,8,9
	.half	.L765-.L764
	.byte	3,2,1,5,5,9
	.half	.L1292-.L765
	.byte	1,5,17,7,9
	.half	.L1293-.L1292
	.byte	3,2,1,5,33,9
	.half	.L1294-.L1293
	.byte	1,5,18,9
	.half	.L281-.L1294
	.byte	3,11,1,9
	.half	.L1295-.L281
	.byte	3,1,1,9
	.half	.L1296-.L1295
	.byte	3,124,1,9
	.half	.L1297-.L1296
	.byte	3,126,1,5,9,9
	.half	.L1298-.L1297
	.byte	3,1,1,9
	.half	.L1299-.L1298
	.byte	3,9,1,9
	.half	.L1300-.L1299
	.byte	3,127,1,9
	.half	.L1301-.L1300
	.byte	3,4,1,5,28,9
	.half	.L285-.L1301
	.byte	3,118,1,5,40,9
	.half	.L1302-.L285
	.byte	1,5,17,9
	.half	.L1303-.L1302
	.byte	3,1,1,5,28,9
	.half	.L284-.L1303
	.byte	3,3,1,5,40,9
	.half	.L1304-.L284
	.byte	1,5,17,9
	.half	.L1305-.L1304
	.byte	3,1,1,5,28,9
	.half	.L288-.L1305
	.byte	3,3,1,5,40,9
	.half	.L1306-.L288
	.byte	1,5,5,9
	.half	.L1307-.L1306
	.byte	3,1,1,5,28,9
	.half	.L290-.L1307
	.byte	3,2,1,5,40,9
	.half	.L1308-.L290
	.byte	1,5,5,9
	.half	.L1309-.L1308
	.byte	3,1,1,5,17,9
	.half	.L291-.L1309
	.byte	3,2,1,5,9,9
	.half	.L292-.L291
	.byte	3,3,1,5,38,7,9
	.half	.L1310-.L292
	.byte	3,2,1,5,21,9
	.half	.L297-.L1310
	.byte	3,4,1,5,5,9
	.half	.L282-.L297
	.byte	3,4,1,5,9,7,9
	.half	.L1311-.L282
	.byte	3,2,1,5,16,9
	.half	.L757-.L1311
	.byte	3,1,1,5,5,9
	.half	.L299-.L757
	.byte	3,3,1,4,1,9
	.half	.L300-.L299
	.byte	3,235,0,1,5,9,7,9
	.half	.L617-.L300
	.byte	3,3,1,5,13,7,9
	.half	.L1312-.L617
	.byte	3,2,1,5,87,9
	.half	.L766-.L1312
	.byte	1,5,25,9
	.half	.L302-.L766
	.byte	3,4,1,5,52,9
	.half	.L1313-.L302
	.byte	1,5,28,9
	.half	.L768-.L1313
	.byte	3,3,1,5,40,9
	.half	.L1314-.L768
	.byte	1,5,13,9
	.half	.L1315-.L1314
	.byte	1,5,26,7,9
	.half	.L1316-.L1315
	.byte	3,2,1,5,40,9
	.half	.L1317-.L1316
	.byte	1,5,25,9
	.half	.L1318-.L1317
	.byte	1,7,9
	.half	.L1319-.L1318
	.byte	3,1,1,5,103,9
	.half	.L1320-.L1319
	.byte	1,5,31,9
	.half	.L306-.L1320
	.byte	3,2,1,5,20,9
	.half	.L1321-.L306
	.byte	1,5,66,7,9
	.half	.L1322-.L1321
	.byte	1,5,79,9
	.half	.L1323-.L1322
	.byte	1,5,21,7,9
	.half	.L307-.L1323
	.byte	3,2,1,5,95,9
	.half	.L767-.L307
	.byte	1,5,30,9
	.half	.L308-.L767
	.byte	3,4,1,5,28,9
	.half	.L762-.L308
	.byte	1,5,5,9
	.half	.L301-.L762
	.byte	3,7,1,5,1,9
	.half	.L310-.L301
	.byte	3,1,1,7,9
	.half	.L372-.L310
	.byte	0,1,1
.L1288:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_ranges'
.L371:
	.word	-1,.L328,0,.L372-.L328,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_info'
.L373:
	.word	237
	.half	3
	.word	.L374
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L376,.L375
	.byte	2
	.word	.L329
	.byte	3
	.byte	'CanTp_MainFunction',0,1,122,6,1,1,1
	.word	.L316,.L624,.L315
	.byte	4
	.word	.L316,.L624
	.byte	5
	.byte	'ChannelId',0,1,124,25
	.word	.L408,.L625
	.byte	6
	.word	.L626,.L627,.L13
	.byte	7
	.word	.L628,.L627,.L13
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_abbrev'
.L374:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_line'
.L375:
	.word	.L1325-.L1324
.L1324:
	.half	3
	.word	.L1327-.L1326
.L1326:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1327:
	.byte	5,8,7,0,5,2
	.word	.L316
	.byte	3,254,0,1,5,5,9
	.half	.L1328-.L316
	.byte	1,5,9,7,9
	.half	.L1329-.L1328
	.byte	3,2,1,5,66,9
	.half	.L1330-.L1329
	.byte	1,5,27,9
	.half	.L12-.L1330
	.byte	3,13,1,5,74,9
	.half	.L636-.L12
	.byte	1,5,17,9
	.half	.L15-.L636
	.byte	3,2,1,5,85,9
	.half	.L639-.L15
	.byte	3,126,1,5,44,9
	.half	.L14-.L639
	.byte	1,5,56,9
	.half	.L1331-.L14
	.byte	1,5,74,9
	.half	.L1332-.L1331
	.byte	1,4,2,5,5,7,9
	.half	.L627-.L1332
	.byte	3,245,1,1,5,29,9
	.half	.L640-.L627
	.byte	1,4,1,5,1,9
	.half	.L13-.L640
	.byte	3,147,126,1,7,9
	.half	.L377-.L13
	.byte	0,1,1
.L1325:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_ranges'
.L376:
	.word	-1,.L316,0,.L377-.L316,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_MainState')
	.sect	'.debug_info'
.L378:
	.word	162
	.half	3
	.word	.L379
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'CanTp_MainState',0,9,10,7
	.word	.L408
	.byte	1,5,3
	.word	CanTp_MainState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_MainState')
	.sect	'.debug_abbrev'
.L379:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_loc'
.L494:
	.word	0,0
.L495:
	.word	0,0
.L486:
	.word	-1,.L322,0,.L110-.L322
	.half	1
	.byte	84
	.word	.L678-.L322,.L110-.L322
	.half	1
	.byte	88
	.word	.L95-.L322,.L485-.L322
	.half	1
	.byte	88
	.word	.L95-.L322,.L684-.L322
	.half	1
	.byte	84
	.word	0,0
.L321:
	.word	-1,.L322,0,.L485-.L322
	.half	2
	.byte	138,0
	.word	0,0
.L490:
	.word	-1,.L322,.L687-.L322,.L114-.L322
	.half	1
	.byte	108
	.word	0,0
.L496:
	.word	-1,.L322,.L682-.L322,.L94-.L322
	.half	1
	.byte	87
	.word	.L683-.L322,.L110-.L322
	.half	1
	.byte	87
	.word	.L95-.L322,.L685-.L322
	.half	1
	.byte	87
	.word	0,0
.L487:
	.word	-1,.L322,.L689-.L322,.L690-.L322
	.half	1
	.byte	95
	.word	0,0
.L488:
	.word	-1,.L322,.L679-.L322,.L110-.L322
	.half	1
	.byte	89
	.word	.L95-.L322,.L485-.L322
	.half	1
	.byte	89
	.word	.L691-.L322,.L485-.L322
	.half	1
	.byte	82
	.word	0,0
.L498:
	.word	-1,.L322,.L681-.L322,.L110-.L322
	.half	1
	.byte	82
	.word	.L95-.L322,.L685-.L322
	.half	1
	.byte	82
	.word	.L112-.L322,.L686-.L322
	.half	1
	.byte	82
	.word	.L116-.L322,.L688-.L322
	.half	1
	.byte	82
	.word	0,0
.L497:
	.word	-1,.L322,.L680-.L322,.L110-.L322
	.half	5
	.byte	144,32,157,32,0
	.word	.L95-.L322,.L685-.L322
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L493:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_loc'
.L476:
	.word	0,0
.L477:
	.word	0,0
.L469:
	.word	-1,.L320,0,.L667-.L320
	.half	1
	.byte	84
	.word	.L668-.L320,.L85-.L320
	.half	1
	.byte	88
	.word	.L86-.L320,.L468-.L320
	.half	1
	.byte	88
	.word	0,0
.L319:
	.word	-1,.L320,0,.L468-.L320
	.half	2
	.byte	138,0
	.word	0,0
.L471:
	.word	-1,.L320,.L673-.L320,.L85-.L320
	.half	1
	.byte	111
	.word	.L86-.L320,.L674-.L320
	.half	1
	.byte	111
	.word	0,0
.L478:
	.word	-1,.L320,.L473-.L320,.L670-.L320
	.half	1
	.byte	87
	.word	0,0
.L484:
	.word	0,0
.L470:
	.word	-1,.L320,.L669-.L320,.L85-.L320
	.half	1
	.byte	89
	.word	.L86-.L320,.L468-.L320
	.half	1
	.byte	89
	.word	.L677-.L320,.L468-.L320
	.half	1
	.byte	82
	.word	0,0
.L480:
	.word	-1,.L320,.L672-.L320,.L670-.L320
	.half	1
	.byte	81
	.word	.L82-.L320,.L85-.L320
	.half	1
	.byte	81
	.word	.L86-.L320,.L675-.L320
	.half	1
	.byte	81
	.word	.L90-.L320,.L676-.L320
	.half	1
	.byte	81
	.word	0,0
.L472:
	.word	0,0
.L479:
	.word	-1,.L320,.L671-.L320,.L670-.L320
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L483:
	.word	0,0
.L475:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Init')
	.sect	'.debug_loc'
.L387:
	.word	0,0
.L311:
	.word	-1,.L312,0,.L380-.L312
	.half	2
	.byte	138,0
	.word	0,0
.L382:
	.word	-1,.L312,0,.L629-.L312
	.half	1
	.byte	100
	.word	0,0
.L391:
	.word	0,0
.L389:
	.word	0,0
.L394:
	.word	-1,.L312,.L630-.L312,.L631-.L312
	.half	1
	.byte	95
	.word	0,0
.L397:
	.word	-1,.L312,.L632-.L312,.L380-.L312
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_loc'
.L315:
	.word	-1,.L316,0,.L624-.L316
	.half	2
	.byte	138,0
	.word	0,0
.L625:
	.word	-1,.L316,.L636-.L316,.L637-.L316
	.half	1
	.byte	95
	.word	.L638-.L316,.L639-.L316
	.half	1
	.byte	84
	.word	.L14-.L316,.L640-.L316
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_loc'
.L608:
	.word	-1,.L326,.L752-.L326,.L274-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	.L275-.L326,.L753-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L542:
	.word	0,0
.L593:
	.word	-1,.L326,.L742-.L326,.L743-.L326
	.half	1
	.byte	95
	.word	0,0
.L543:
	.word	0,0
.L325:
	.word	-1,.L326,0,.L718-.L326
	.half	2
	.byte	138,0
	.word	.L718-.L326,.L533-.L326
	.half	2
	.byte	138,24
	.word	.L533-.L326,.L533-.L326
	.half	2
	.byte	138,0
	.word	0,0
.L537:
	.word	-1,.L326,0,.L201-.L326
	.half	2
	.byte	145,104
	.word	.L202-.L326,.L206-.L326
	.half	2
	.byte	145,104
	.word	.L207-.L326,.L209-.L326
	.half	2
	.byte	145,104
	.word	.L210-.L326,.L212-.L326
	.half	2
	.byte	145,104
	.word	.L213-.L326,.L248-.L326
	.half	2
	.byte	145,104
	.word	.L249-.L326,.L270-.L326
	.half	2
	.byte	145,104
	.word	.L271-.L326,.L274-.L326
	.half	2
	.byte	145,104
	.word	.L275-.L326,.L533-.L326
	.half	2
	.byte	145,104
	.word	0,0
.L568:
	.word	0,0
.L550:
	.word	0,0
.L589:
	.word	0,0
.L606:
	.word	0,0
.L595:
	.word	-1,.L326,.L740-.L326,.L741-.L326
	.half	1
	.byte	111
	.word	.L222-.L326,.L248-.L326
	.half	1
	.byte	111
	.word	.L249-.L326,.L744-.L326
	.half	1
	.byte	111
	.word	.L224-.L326,.L238-.L326
	.half	1
	.byte	111
	.word	0,0
.L596:
	.word	-1,.L326,.L737-.L326,.L248-.L326
	.half	1
	.byte	83
	.word	.L249-.L326,.L270-.L326
	.half	1
	.byte	83
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	83
	.word	.L275-.L326,.L753-.L326
	.half	1
	.byte	83
	.word	.L273-.L326,.L189-.L326
	.half	1
	.byte	83
	.word	0,0
.L544:
	.word	-1,.L326,.L539-.L326,.L719-.L326
	.half	1
	.byte	87
	.word	0,0
.L538:
	.word	0,0
.L554:
	.word	-1,.L326,.L725-.L326,.L201-.L326
	.half	1
	.byte	88
	.word	.L202-.L326,.L206-.L326
	.half	1
	.byte	88
	.word	.L207-.L326,.L209-.L326
	.half	1
	.byte	88
	.word	.L210-.L326,.L212-.L326
	.half	1
	.byte	88
	.word	.L213-.L326,.L248-.L326
	.half	1
	.byte	88
	.word	.L249-.L326,.L270-.L326
	.half	1
	.byte	88
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	88
	.word	.L275-.L326,.L189-.L326
	.half	1
	.byte	88
	.word	0,0
.L598:
	.word	0,0
.L599:
	.word	-1,.L326,.L746-.L326,.L223-.L326
	.half	1
	.byte	81
	.word	0,0
.L600:
	.word	-1,.L326,.L739-.L326,.L248-.L326
	.half	1
	.byte	82
	.word	.L249-.L326,.L745-.L326
	.half	1
	.byte	82
	.word	.L747-.L326,.L270-.L326
	.half	1
	.byte	82
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	82
	.word	.L275-.L326,.L753-.L326
	.half	1
	.byte	82
	.word	.L273-.L326,.L189-.L326
	.half	1
	.byte	82
	.word	0,0
.L557:
	.word	-1,.L326,.L729-.L326,.L730-.L326
	.half	1
	.byte	81
	.word	.L196-.L326,.L206-.L326
	.half	1
	.byte	81
	.word	.L207-.L326,.L209-.L326
	.half	1
	.byte	81
	.word	.L210-.L326,.L212-.L326
	.half	1
	.byte	81
	.word	.L213-.L326,.L193-.L326
	.half	1
	.byte	81
	.word	0,0
.L578:
	.word	0,0
.L601:
	.word	-1,.L326,.L750-.L326,.L751-.L326
	.half	1
	.byte	95
	.word	0,0
.L594:
	.word	0,0
.L535:
	.word	-1,.L326,0,.L719-.L326
	.half	1
	.byte	100
	.word	.L721-.L326,.L201-.L326
	.half	1
	.byte	108
	.word	.L202-.L326,.L206-.L326
	.half	1
	.byte	108
	.word	.L207-.L326,.L209-.L326
	.half	1
	.byte	108
	.word	.L210-.L326,.L212-.L326
	.half	1
	.byte	108
	.word	.L213-.L326,.L248-.L326
	.half	1
	.byte	108
	.word	.L249-.L326,.L270-.L326
	.half	1
	.byte	108
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	108
	.word	.L275-.L326,.L754-.L326
	.half	1
	.byte	108
	.word	.L273-.L326,.L189-.L326
	.half	1
	.byte	108
	.word	.L756-.L326,.L189-.L326
	.half	1
	.byte	101
	.word	0,0
.L552:
	.word	0,0
.L591:
	.word	0,0
.L603:
	.word	-1,.L326,.L736-.L326,.L248-.L326
	.half	1
	.byte	84
	.word	.L249-.L326,.L270-.L326
	.half	1
	.byte	84
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	84
	.word	.L275-.L326,.L755-.L326
	.half	1
	.byte	84
	.word	.L273-.L326,.L189-.L326
	.half	1
	.byte	84
	.word	0,0
.L561:
	.word	-1,.L326,.L735-.L326,.L206-.L326
	.half	1
	.byte	111
	.word	.L207-.L326,.L209-.L326
	.half	1
	.byte	111
	.word	.L210-.L326,.L212-.L326
	.half	1
	.byte	111
	.word	.L213-.L326,.L193-.L326
	.half	1
	.byte	111
	.word	0,0
.L563:
	.word	-1,.L326,.L726-.L326,.L727-.L326
	.half	1
	.byte	98
	.word	0,0
.L534:
	.word	-1,.L326,0,.L720-.L326
	.half	1
	.byte	84
	.word	0,0
.L556:
	.word	-1,.L326,0,.L201-.L326
	.half	2
	.byte	145,125
	.word	.L202-.L326,.L206-.L326
	.half	2
	.byte	145,125
	.word	.L207-.L326,.L209-.L326
	.half	2
	.byte	145,125
	.word	.L210-.L326,.L212-.L326
	.half	2
	.byte	145,125
	.word	.L213-.L326,.L248-.L326
	.half	2
	.byte	145,125
	.word	.L249-.L326,.L270-.L326
	.half	2
	.byte	145,125
	.word	.L271-.L326,.L274-.L326
	.half	2
	.byte	145,125
	.word	.L275-.L326,.L533-.L326
	.half	2
	.byte	145,125
	.word	0,0
.L597:
	.word	-1,.L326,.L738-.L326,.L248-.L326
	.half	1
	.byte	86
	.word	.L249-.L326,.L270-.L326
	.half	1
	.byte	86
	.word	.L271-.L326,.L274-.L326
	.half	1
	.byte	86
	.word	.L275-.L326,.L753-.L326
	.half	1
	.byte	86
	.word	.L273-.L326,.L189-.L326
	.half	1
	.byte	86
	.word	0,0
.L559:
	.word	-1,.L326,.L728-.L326,.L566-.L326
	.half	1
	.byte	111
	.word	0,0
.L602:
	.word	-1,.L326,.L748-.L326,.L749-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L546:
	.word	-1,.L326,.L723-.L326,.L719-.L326
	.half	1
	.byte	81
	.word	.L187-.L326,.L724-.L326
	.half	1
	.byte	81
	.word	.L190-.L326,.L194-.L326
	.half	1
	.byte	81
	.word	0,0
.L573:
	.word	-1,.L326,.L731-.L326,.L201-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	.L202-.L326,.L196-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L545:
	.word	-1,.L326,.L722-.L326,.L719-.L326
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L574:
	.word	-1,.L326,.L732-.L326,.L733-.L326
	.half	1
	.byte	98
	.word	0,0
.L560:
	.word	-1,.L326,.L734-.L326,.L201-.L326
	.half	1
	.byte	111
	.word	.L202-.L326,.L200-.L326
	.half	1
	.byte	111
	.word	0,0
.L555:
	.word	-1,.L326,0,.L201-.L326
	.half	2
	.byte	145,124
	.word	.L202-.L326,.L206-.L326
	.half	2
	.byte	145,124
	.word	.L207-.L326,.L209-.L326
	.half	2
	.byte	145,124
	.word	.L210-.L326,.L212-.L326
	.half	2
	.byte	145,124
	.word	.L213-.L326,.L248-.L326
	.half	2
	.byte	145,124
	.word	.L249-.L326,.L270-.L326
	.half	2
	.byte	145,124
	.word	.L271-.L326,.L274-.L326
	.half	2
	.byte	145,124
	.word	.L275-.L326,.L533-.L326
	.half	2
	.byte	145,124
	.word	0,0
.L577:
	.word	0,0
.L541:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_loc'
.L401:
	.word	0,0
.L313:
	.word	-1,.L314,0,.L398-.L314
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	0,0
.L402:
	.word	0,0
.L404:
	.word	-1,.L314,.L633-.L314,.L634-.L314
	.half	1
	.byte	95
	.word	0,0
.L407:
	.word	-1,.L314,.L635-.L314,.L7-.L314
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Transmit')
	.sect	'.debug_loc'
.L449:
	.word	-1,.L318,.L655-.L318,.L656-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L432:
	.word	0,0
.L434:
	.word	0,0
.L413:
	.word	-1,.L318,0,.L642-.L318
	.half	1
	.byte	100
	.word	.L645-.L318,.L49-.L318
	.half	1
	.byte	108
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	108
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	108
	.word	.L38-.L318,.L409-.L318
	.half	1
	.byte	108
	.word	0,0
.L446:
	.word	0,0
.L411:
	.word	-1,.L318,0,.L643-.L318
	.half	1
	.byte	84
	.word	.L644-.L318,.L49-.L318
	.half	1
	.byte	88
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	88
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	88
	.word	.L38-.L318,.L409-.L318
	.half	1
	.byte	88
	.word	0,0
.L444:
	.word	0,0
.L317:
	.word	-1,.L318,0,.L641-.L318
	.half	2
	.byte	138,0
	.word	.L641-.L318,.L409-.L318
	.half	2
	.byte	138,8
	.word	.L409-.L318,.L409-.L318
	.half	2
	.byte	138,0
	.word	0,0
.L425:
	.word	-1,.L318,.L651-.L318,.L49-.L318
	.half	1
	.byte	103
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	103
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	103
	.word	.L38-.L318,.L663-.L318
	.half	1
	.byte	103
	.word	.L60-.L318,.L36-.L318
	.half	1
	.byte	103
	.word	0,0
.L423:
	.word	-1,.L318,.L650-.L318,.L49-.L318
	.half	1
	.byte	102
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	102
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	102
	.word	.L38-.L318,.L663-.L318
	.half	1
	.byte	102
	.word	.L60-.L318,.L36-.L318
	.half	1
	.byte	102
	.word	0,0
.L448:
	.word	-1,.L318,.L654-.L318,.L49-.L318
	.half	1
	.byte	111
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	111
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	111
	.word	0,0
.L416:
	.word	-1,.L318,0,.L49-.L318
	.half	2
	.byte	145,122
	.word	.L50-.L318,.L56-.L318
	.half	2
	.byte	145,122
	.word	.L57-.L318,.L58-.L318
	.half	2
	.byte	145,122
	.word	.L38-.L318,.L409-.L318
	.half	2
	.byte	145,122
	.word	0,0
.L465:
	.word	0,0
.L419:
	.word	-1,.L318,.L652-.L318,.L37-.L318
	.half	1
	.byte	87
	.word	.L653-.L318,.L39-.L318
	.half	1
	.byte	87
	.word	.L662-.L318,.L58-.L318
	.half	1
	.byte	87
	.word	.L38-.L318,.L663-.L318
	.half	1
	.byte	87
	.word	.L60-.L318,.L36-.L318
	.half	1
	.byte	87
	.word	0,0
.L436:
	.word	-1,.L318,.L427-.L318,.L642-.L318
	.half	1
	.byte	87
	.word	0,0
.L457:
	.word	0,0
.L417:
	.word	0,0
.L420:
	.word	-1,.L318,.L659-.L318,.L52-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	.L55-.L318,.L661-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L418:
	.word	-1,.L318,0,.L49-.L318
	.half	2
	.byte	145,124
	.word	.L50-.L318,.L56-.L318
	.half	2
	.byte	145,124
	.word	.L57-.L318,.L58-.L318
	.half	2
	.byte	145,124
	.word	.L38-.L318,.L409-.L318
	.half	2
	.byte	145,124
	.word	0,0
.L442:
	.word	0,0
.L414:
	.word	-1,.L318,.L646-.L318,.L49-.L318
	.half	1
	.byte	89
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	89
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	89
	.word	.L38-.L318,.L409-.L318
	.half	1
	.byte	89
	.word	.L666-.L318,.L409-.L318
	.half	1
	.byte	82
	.word	0,0
.L438:
	.word	-1,.L318,.L648-.L318,.L642-.L318
	.half	1
	.byte	81
	.word	.L34-.L318,.L649-.L318
	.half	1
	.byte	81
	.word	0,0
.L421:
	.word	-1,.L318,.L657-.L318,.L49-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	.L50-.L318,.L658-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	.L52-.L318,.L660-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L450:
	.word	-1,.L318,.L649-.L318,.L49-.L318
	.half	1
	.byte	81
	.word	.L50-.L318,.L56-.L318
	.half	1
	.byte	81
	.word	.L57-.L318,.L58-.L318
	.half	1
	.byte	81
	.word	0,0
.L437:
	.word	-1,.L318,.L647-.L318,.L642-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L415:
	.word	-1,.L318,0,.L49-.L318
	.half	2
	.byte	145,120
	.word	.L50-.L318,.L56-.L318
	.half	2
	.byte	145,120
	.word	.L57-.L318,.L58-.L318
	.half	2
	.byte	145,120
	.word	.L38-.L318,.L409-.L318
	.half	2
	.byte	145,120
	.word	0,0
.L463:
	.word	0,0
.L455:
	.word	0,0
.L467:
	.word	-1,.L318,.L664-.L318,.L665-.L318
	.half	1
	.byte	95
	.word	0,0
.L430:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_loc'
.L619:
	.word	0,0
.L620:
	.word	0,0
.L327:
	.word	-1,.L328,0,.L609-.L328
	.half	2
	.byte	138,0
	.word	0,0
.L614:
	.word	-1,.L328,.L768-.L328,.L769-.L328
	.half	1
	.byte	84
	.word	.L308-.L328,.L762-.L328
	.half	1
	.byte	84
	.word	0,0
.L621:
	.word	-1,.L328,.L616-.L328,.L757-.L328
	.half	1
	.byte	87
	.word	0,0
.L612:
	.word	-1,.L328,0,.L757-.L328
	.half	1
	.byte	100
	.word	.L760-.L328,.L609-.L328
	.half	1
	.byte	108
	.word	.L770-.L328,.L762-.L328
	.half	1
	.byte	100
	.word	0,0
.L623:
	.word	-1,.L328,.L765-.L328,.L757-.L328
	.half	1
	.byte	81
	.word	.L299-.L328,.L766-.L328
	.half	1
	.byte	81
	.word	.L302-.L328,.L767-.L328
	.half	1
	.byte	81
	.word	.L308-.L328,.L762-.L328
	.half	1
	.byte	81
	.word	0,0
.L613:
	.word	-1,.L328,.L761-.L328,.L762-.L328
	.half	1
	.byte	89
	.word	.L762-.L328,.L301-.L328
	.half	1
	.byte	82
	.word	.L301-.L328,.L609-.L328
	.half	1
	.byte	89
	.word	.L771-.L328,.L609-.L328
	.half	1
	.byte	82
	.word	0,0
.L615:
	.word	-1,.L328,.L763-.L328,.L609-.L328
	.half	1
	.byte	90
	.word	0,0
.L622:
	.word	-1,.L328,.L764-.L328,.L757-.L328
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L610:
	.word	-1,.L328,0,.L758-.L328
	.half	1
	.byte	84
	.word	.L759-.L328,.L609-.L328
	.half	1
	.byte	88
	.word	0,0
.L618:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_loc'
.L511:
	.word	0,0
.L512:
	.word	0,0
.L323:
	.word	-1,.L324,0,.L692-.L324
	.half	2
	.byte	138,0
	.word	.L692-.L324,.L499-.L324
	.half	2
	.byte	138,8
	.word	.L499-.L324,.L499-.L324
	.half	2
	.byte	138,0
	.word	0,0
.L501:
	.word	-1,.L324,.L702-.L324,.L703-.L324
	.half	1
	.byte	111
	.word	.L146-.L324,.L711-.L324
	.half	1
	.byte	111
	.word	.L163-.L324,.L716-.L324
	.half	1
	.byte	111
	.word	.L165-.L324,.L717-.L324
	.half	1
	.byte	111
	.word	.L148-.L324,.L141-.L324
	.half	1
	.byte	111
	.word	0,0
.L527:
	.word	-1,.L324,.L703-.L324,.L706-.L324
	.half	1
	.byte	111
	.word	.L150-.L324,.L154-.L324
	.half	1
	.byte	111
	.word	.L155-.L324,.L708-.L324
	.half	1
	.byte	111
	.word	.L151-.L324,.L710-.L324
	.half	1
	.byte	111
	.word	.L152-.L324,.L153-.L324
	.half	1
	.byte	111
	.word	0,0
.L502:
	.word	-1,.L324,.L695-.L324,.L142-.L324
	.half	1
	.byte	88
	.word	.L143-.L324,.L154-.L324
	.half	1
	.byte	88
	.word	.L155-.L324,.L141-.L324
	.half	1
	.byte	88
	.word	0,0
.L524:
	.word	0,0
.L531:
	.word	0,0
.L519:
	.word	0,0
.L505:
	.word	-1,.L324,0,.L142-.L324
	.half	2
	.byte	145,122
	.word	.L143-.L324,.L154-.L324
	.half	2
	.byte	145,122
	.word	.L155-.L324,.L499-.L324
	.half	2
	.byte	145,122
	.word	0,0
.L513:
	.word	-1,.L324,.L508-.L324,.L696-.L324
	.half	1
	.byte	87
	.word	0,0
.L506:
	.word	-1,.L324,.L715-.L324,.L714-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	.L163-.L324,.L164-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L528:
	.word	-1,.L324,.L707-.L324,.L154-.L324
	.half	1
	.byte	98
	.word	.L155-.L324,.L709-.L324
	.half	1
	.byte	98
	.word	.L152-.L324,.L153-.L324
	.half	1
	.byte	98
	.word	0,0
.L515:
	.word	-1,.L324,.L698-.L324,.L696-.L324
	.half	1
	.byte	81
	.word	.L139-.L324,.L699-.L324
	.half	1
	.byte	81
	.word	0,0
.L503:
	.word	-1,.L324,.L704-.L324,.L144-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	.L145-.L324,.L705-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	.L146-.L324,.L712-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	.L148-.L324,.L141-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L514:
	.word	-1,.L324,.L697-.L324,.L696-.L324
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L507:
	.word	-1,.L324,.L713-.L324,.L714-.L324
	.half	1
	.byte	100
	.word	.L163-.L324,.L164-.L324
	.half	1
	.byte	100
	.word	0,0
.L500:
	.word	-1,.L324,0,.L693-.L324
	.half	1
	.byte	84
	.word	.L694-.L324,.L695-.L324
	.half	1
	.byte	88
	.word	0,0
.L518:
	.word	0,0
.L504:
	.word	-1,.L324,0,.L142-.L324
	.half	2
	.byte	145,120
	.word	.L143-.L324,.L154-.L324
	.half	2
	.byte	145,120
	.word	.L155-.L324,.L499-.L324
	.half	2
	.byte	145,120
	.word	0,0
.L520:
	.word	-1,.L324,.L700-.L324,.L701-.L324
	.half	1
	.byte	95
	.word	0,0
.L510:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1333:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanTp_Init')
	.sect	'.debug_frame'
	.word	20
	.word	.L1333,.L312,.L380-.L312
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Shutdown')
	.sect	'.debug_frame'
	.word	12
	.word	.L1333,.L314,.L398-.L314
	.sdecl	'.debug_frame',debug,cluster('CanTp_MainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L1333,.L316,.L624-.L316
	.sdecl	'.debug_frame',debug,cluster('CanTp_Transmit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1333,.L318,.L409-.L318
	.byte	4
	.word	(.L641-.L318)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L409-.L641)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_CancelTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1333,.L320,.L468-.L320
	.sdecl	'.debug_frame',debug,cluster('CanTp_CancelReceive')
	.sect	'.debug_frame'
	.word	12
	.word	.L1333,.L322,.L485-.L322
	.sdecl	'.debug_frame',debug,cluster('CanTp_TxConfirmation')
	.sect	'.debug_frame'
	.word	36
	.word	.L1333,.L324,.L499-.L324
	.byte	4
	.word	(.L692-.L324)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L499-.L692)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_RxIndication')
	.sect	'.debug_frame'
	.word	36
	.word	.L1333,.L326,.L533-.L326
	.byte	4
	.word	(.L718-.L326)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L533-.L718)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_TriggerTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1333,.L328,.L609-.L328

; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   605  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   606  
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   607  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp.c	   608  #include "CanTp_MemMap.h"

	; Module end
