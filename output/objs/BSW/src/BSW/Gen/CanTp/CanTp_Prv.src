	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc12508a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\CanTp\\CanTp_Prv.src BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c'

	
$TC16X
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_GetTxBuffer',code,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.text.CanTp_Prv.CanTp_Prv_GetTxBuffer'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     2  #include "CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     3  #include "CanTp_Cbk.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     4  #include "CanTp_Prv.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     6  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     7  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     8  CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	     9  CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    10  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    11  CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    12  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    13  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    14  CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];                 /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    15  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    16  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    17  volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    19  const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    20  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    21  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    22  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    23  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    24  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    25  uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    26  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    27  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    28  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    29  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    30  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    31  const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES] = {0, 1, 1, 1, 1, 2, 2, 2, 2};   /* Channel SubState-State Mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    32  const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE] = {0, 1, 1, 1, 0};          /* STANDARD-EXTENDED-MIXED */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    33  const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE] = {0, 0, 1, 1, 2, 3};          /* PCI Frame Type Mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    34  const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE] = {1, 2, 2, 6, 1, 3};               /* PCI Size Mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    35  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    36  const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    37  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    38  	0x08,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    39  	0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0c,0x0c,0x0c,0x0c,0x10,0x10,0x10,0x10,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    40  	0x14,0x14,0x14,0x14,0x18,0x18,0x18,0x18,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    41  	0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    42  	0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    43  }; /* CANFD Data Length Mapping table */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    44  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    45  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    46  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    47  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    48  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    49  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    50  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    51  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    52   Function name    : CanTp_Prv_GetTxBuffer
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    53   Syntax           : CanTp_Prv_GetTxBuffer(&Context, &SduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    54   Description      : This is a wrapper function to negotiate the Tx Buffer for FF/CF/SF Transmission.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    55   Parameter        : const CanTp_TxContextType*, PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    56   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    57  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    58  static void CanTp_Prv_GetTxBuffer(const CanTp_TxContextType *Context, PduInfoType* SduInfoPtr)
; Function CanTp_Prv_GetTxBuffer
.L224:
CanTp_Prv_GetTxBuffer:	.type	func
	sub.a	a10,#8
.L809:
	mov.aa	a15,a4
.L812:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    59  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    60      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    61  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    62      if(Context->ElapsedValue < Context->CsTicks)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    63      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    64          if(CanTp_Channel[Context->ChannelId].TxBufferStatus != CANTP_BUFFER_AVAILABLE)
	ld.bu	d15,[a15]3
.L1070:
	mul	d15,d15,#20
.L1071:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L1072:
	addsc.a	a2,a2,d15,#0
.L1073:
	ld.bu	d15,[a2]
.L1074:
	ld.hu	d0,[a15]14
.L1075:
	ld.hu	d1,[a15]16
.L1076:
	jge.u	d0,d1,.L2
.L1077:
	jeq	d15,#2,.L3
.L1078:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    65          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    66              switch(PduR_CanTpCopyTxData(Context->PduRPduHandleId, SduInfoPtr, NULL_PTR, &RemBufSize))
	ld.hu	d4,[a15]8
.L1079:
	mov.a	a2,#0
.L1080:
	lea	a6,[a10]0
	mov.aa	a4,a5
.L810:
	mov.aa	a5,a2
.L811:
	call	PduR_CanTpCopyTxData
.L814:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    67              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    68                  case BUFREQ_OK: /* Register message for transmission with CanIf */
	mov	d15,#0
	jeq	d15,d2,.L4
.L1081:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    69                      if(RemBufSize >= Context->PayLoadLength)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    70                      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    71                          CanTp_Channel[Context->ChannelId].TxBufferStatus = CANTP_BUFFER_AVAILABLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    72                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    73  #if (CANTP_PAGE_CONFIRMATION == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    74                      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    75                      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    76                          CanTp_Prv_PageConfirmation(Context);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    77                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    78  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    79                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    80                  case BUFREQ_E_BUSY:
	mov	d15,#2
	jeq	d15,d2,.L5
	j	.L6
.L4:
	ld.hu	d0,[a10]0
.L1082:
	ld.bu	d15,[a15]1
.L1083:
	jlt.u	d0,d15,.L7
.L1084:
	ld.bu	d15,[a15]3
.L1085:
	mul	d15,d15,#20
.L1086:
	movh.a	a15,#@his(CanTp_Channel)
.L813:
	lea	a15,[a15]@los(CanTp_Channel)
.L1087:
	addsc.a	a15,a15,d15,#0
.L1088:
	mov	d15,#2
.L1089:
	st.b	[a15],d15
.L7:
	j	.L8
.L5:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    81                      /* TRACE[SWS_CanTp_00184][SWS_CanTp_00089] If PduR returns E_BUSY, CanTp retry to copy data. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    82                      break;
	j	.L9

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    83                  default:  /* TRACE[SWS_CanTp_00087] */
.L6:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    84                      CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a15]
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
	ld.hu	d4,[a15]8
	mov	d5,#1
	calli	a2
.L1090:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    85                      CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1091:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    86                      CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a15]3
.L1092:
	movh.a	a15,#@his(CanTp_SubState)
.L815:
	lea	a15,[a15]@los(CanTp_SubState)
.L1093:
	addsc.a	a15,a15,d15,#0
.L1094:
	mov	d15,#0
.L1095:
	st.b	[a15],d15
.L1096:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    87                      break;
	j	.L10

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    88              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    89          }
.L10:
.L9:
.L8:
.L3:
	j	.L11
.L2:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    90      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    91      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    92      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    93          if(CanTp_Channel[Context->ChannelId].TxBufferStatus != CANTP_BUFFER_AVAILABLE)
	jeq	d15,#2,.L12
.L1097:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    94          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    95              /* TRACE[SWS_CanTp_00167][SWS_CanTp_00280][SWS_CanTp_00229][SWS_CanTp_00205] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    96              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a15]
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
	ld.hu	d4,[a15]8
	mov	d5,#1
	calli	a2
.L817:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    97              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_TX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#208
	call	Det_ReportRuntimeError
.L1098:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    98              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a15]3
.L1099:
	movh.a	a15,#@his(CanTp_SubState)
.L816:
	lea	a15,[a15]@los(CanTp_SubState)
.L1100:
	addsc.a	a15,a15,d15,#0
.L1101:
	mov	d15,#0
.L1102:
	st.b	[a15],d15
.L12:
.L11:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	    99          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   100      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   101  }
	ret
.L381:
	
__CanTp_Prv_GetTxBuffer_function_end:
	.size	CanTp_Prv_GetTxBuffer,__CanTp_Prv_GetTxBuffer_function_end-CanTp_Prv_GetTxBuffer
.L267:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_ProcessRxSingleFrame',code,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_ProcessRxSingleFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   102  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   103  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   104   Function name    : CanTp_Prv_ProcessRxSingleFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   105   Syntax           : CanTp_Prv_ProcessRxSingleFrame(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   106   Description      : Library function to process single frame reception in RxIndication from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   107   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   110  static void CanTp_Prv_ProcessRxSingleFrame(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; Function CanTp_Prv_ProcessRxSingleFrame
.L226:
CanTp_Prv_ProcessRxSingleFrame:	.type	func
	sub.a	a10,#24
.L818:
	mov.aa	a12,a4
.L821:
	st.a	[a10]16,a5
.L822:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   112      Std_ReturnType Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   113  	PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   114  	PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   115      BufReq_ReturnType RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   116      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   117      CanTp_TickType Value = 0;
	mov	d15,#0
.L1107:
	st.h	[a10]12,d15
.L1108:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   118      CanTp_ChannelType *Channel = &CanTp_Channel[Context->ChannelId];
	movh.a	a13,#@his(CanTp_Channel)
	lea	a13,[a13]@los(CanTp_Channel)
.L1109:
	ld.bu	d15,[a12]11
.L1110:
	mul	d15,d15,#20
	addsc.a	a14,a13,d15,#0
.L823:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   120      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]12
.L1111:
	lea	a15,[a10]10
.L405:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]12
.L824:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a4,#@his(CanTp_MainFunctionTicks)
.L819:
	lea	a4,[a4]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a4]0
.L1112:
	st.h	[a2],d0
.L1113:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]12
.L1114:
	sub	d0,d15
.L1115:
	st.h	[a15],d0
.L406:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   121  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   122  	SduInfo.SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset; /* TRACE[SWS_CanTp_00116] */
	ld.a	a15,[a10]16
.L820:
	ld.a	a15,[a15]
.L826:
	ld.bu	d15,[a12]7
.L825:
	addsc.a	a15,a15,d15,#0
.L1116:
	st.a	[a10],a15
.L1117:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   123      SduInfo.SduLength = Context->SduLength;
	ld.hu	d15,[a12]18
.L1118:
	st.h	[a10]4,d15
.L414:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
	mov	d8,#1
.L827:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
	mov	d9,#0
.L828:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
	ld.bu	d15,[a12]11
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
	st.a	[a10]20,a15
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]
	movh.a	a15,#@his(CanTp_State)
	lea	a15,[a15]@los(CanTp_State)
	addsc.a	a15,a15,d0,#0
	ld.bu	d0,[a15]
.L829:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)      (inlined)
	jne	d0,#0,.L13
.L1119:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	mov	d9,#5
.L1120:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;      (inlined)
	j	.L14

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)      (inlined)
.L13:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
	jne	d0,#2,.L15
.L1121:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
	mul	d15,d15,#20
	addsc.a	a15,a13,d15,#0
.L1122:
	ld.bu	d0,[a15]6
.L830:
	ld.bu	d15,[a12]12
.L1123:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
	jne	d15,d0,.L16
.L1124:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	mov	d9,#5
.L1125:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	add.a	a15,#4
	ld.a	a15,[a15]
	ld.hu	d4,[a12]16
	mov	d5,#1
	calli	a15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
.L16:
.L15:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else      (inlined)
.L14:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)      (inlined)
	jne	d9,#5,.L17
.L1126:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	ld.bu	d15,[a12]11
.L1127:
	ld.a	a15,[a10]20
	addsc.a	a15,a15,d15,#0
.L1128:
	mov	d15,#5
.L1129:
	st.b	[a15],d15
.L1130:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
	mov	d8,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)      (inlined)
.L17:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;      (inlined)
	j	.L18

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }      (inlined)
.L18:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   124  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   125      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   127  	/* Accept the request for reception if old state is idle or reception(in reception case kill older one.) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   128      if(CanTp_Prv_GetConnectionAcceptance(Context, PduInfoPtr) == E_OK)
	jne	d8,#0,.L19
.L415:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   129      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   130          Channel->ActiveSduId = Context->SduId;
	ld.bu	d15,[a12]12
.L1131:
	st.b	[a14]6,d15
.L1132:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   131          Channel->SduLength = Context->SduLength;
	ld.hu	d15,[a12]18
.L1133:
	st.h	[a14]14,d15
.L1134:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   132          Channel->SduLengthRemaining = Context->SduLength;
	ld.hu	d15,[a12]18
.L1135:
	st.h	[a14]12,d15
.L1136:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   134          /* RX_DL is set to have valid value to be used in CanTp_CancelReceive */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   135          CanTp_Prv_SetRxDl(Context->ChannelId, ((uint8)(PduInfoPtr->SduLength)));
	ld.bu	d15,[a12]11
	mul	d15,d15,#20
	addsc.a	a2,a13,d15,#0
	ld.a	a15,[a10]16
.L831:
	ld.hu	d15,[a15]4
	st.b	[a2]1,d15
.L1137:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   136  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   137          Channel->InitialTicks = Value;
	ld.hu	d15,[a10]12
.L1138:
	st.h	[a14]16,d15
.L1139:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   138  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   139          /* Request is accepted. indicate to upper layer and ask for buffer. check for sufficient
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   140           * buffer availability. copy data. change state to idle. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   141          /* TRACE[SWS_CanTp_00079][SWS_CanTp_00329] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   142          RetValue = PduR_CanTpStartOfReception(Context->PduRPduHandleId, &SduInfo, Context->SduLength, &RemBufSize);
	ld.hu	d4,[a12]16
.L1140:
	lea	a4,[a10]0
.L1141:
	ld.hu	d5,[a12]18
.L1142:
	lea	a5,[a10]8
	call	PduR_CanTpStartOfReception
.L833:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   143  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   144          switch(RetValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   145          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   146              case BUFREQ_OK:
	mov	d15,#0
	jeq	d15,d2,.L20
.L1143:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   147                  if(RemBufSize >= Context->SduLength)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   148                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   149                      RetValue = PduR_CanTpCopyRxData(Context->PduRPduHandleId, &SduInfo, &RemBufSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   150                      Result = (RetValue != BUFREQ_OK) ?  E_NOT_OK: E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   151                      CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, Result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   152                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   153                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   154                  {   /* TRACE[SWS_CanTp_00339] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   155                      CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   156                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   157                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   158              case BUFREQ_E_OVFL: /* TRACE[SWS_CanTp_00353] */
	mov	d15,#3
	jeq	d15,d2,.L21
	j	.L22
.L20:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L832:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	add.a	a15,#4
.L422:
	ld.hu	d4,[a12]16
.L1144:
	ld.hu	d15,[a10]8
.L1145:
	ld.hu	d0,[a12]18
.L1146:
	jlt.u	d15,d0,.L23
.L1147:
	lea	a4,[a10]0
.L1148:
	lea	a5,[a10]8
	call	PduR_CanTpCopyRxData
.L1149:
	ne	d5,d2,#0
.L834:
	j	.L25
.L24:
	mov	d5,#0
.L25:
	ld.a	a15,[a15]
	ld.hu	d4,[a12]16
	calli	a15
.L835:
	j	.L26
.L23:
	ld.a	a15,[a15]
	mov	d5,#1
	calli	a15
.L26:
	j	.L27
.L21:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   159                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
	ld.hu	d4,[a12]16
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L836:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	add.a	a15,#4
	ld.a	a15,[a15]
	mov	d5,#1
	calli	a15
.L837:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   160                  break;
	j	.L28

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   161              default: /* TRACE[SWS_CanTp_00081] */
.L22:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   162                  break;
	j	.L29

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   163          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   164  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   165          CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
.L29:
.L28:
.L27:
	ld.bu	d15,[a12]11
.L1150:
	ld.a	a15,[a10]20
	addsc.a	a15,a15,d15,#0
.L1151:
	mov	d15,#0
.L1152:
	st.b	[a15],d15
.L19:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   166      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   167  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   168      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   169  }
	ret
.L388:
	
__CanTp_Prv_ProcessRxSingleFrame_function_end:
	.size	CanTp_Prv_ProcessRxSingleFrame,__CanTp_Prv_ProcessRxSingleFrame_function_end-CanTp_Prv_ProcessRxSingleFrame
.L272:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_ProcessRxFirstFrame',code,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_ProcessRxFirstFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   170  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   171  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   172   Function name    : CanTp_Prv_ProcessRxFirstFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   173   Syntax           : CanTp_Prv_ProcessRxFirstFrame(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   174   Description      : Library function to process first frame reception in RxIndication from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   175   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   176   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   177  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   178  static void CanTp_Prv_ProcessRxFirstFrame(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; Function CanTp_Prv_ProcessRxFirstFrame
.L228:
CanTp_Prv_ProcessRxFirstFrame:	.type	func
	sub.a	a10,#24
.L838:
	mov.aa	a12,a4
.L840:
	st.a	[a10]16,a5
.L841:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   179  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   180      CanTp_ChannelType *Channel = &CanTp_Channel[Context->ChannelId];
	movh.a	a13,#@his(CanTp_Channel)
	lea	a13,[a13]@los(CanTp_Channel)
.L1157:
	ld.bu	d15,[a12]11
.L1158:
	mul	d15,d15,#20
	addsc.a	a15,a13,d15,#0
.L842:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   181      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   182      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   183      uint8 NewSubState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   184      uint8 FlowStatus = CANTP_FC_WAIT;
	mov	d8,#1
.L844:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   185      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   186      CanTp_TickType Value = 0;
	mov	d15,#0
.L1159:
	st.h	[a10]10,d15
.L1160:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   187      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   188      BufReq_ReturnType RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   189  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   190      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]10
.L1161:
	lea	a4,[a10]12
.L438:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d0,[a10]10
.L845:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
.L839:
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d1,[a5]0
.L1162:
	st.h	[a2],d1
.L1163:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d1,[a10]10
.L1164:
	sub	d1,d0
.L1165:
	st.h	[a4],d1
.L439:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   191  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   192      PayLoadLength = (uint8)(PduInfoPtr->SduLength - Context->DataOffset);
	ld.bu	d15,[a12]7
.L1166:
	ld.a	a2,[a10]16
.L847:
	ld.hu	d0,[a2]4
.L846:
	sub	d0,d15
.L1167:
	extr.u	d10,d0,#0,#8
.L849:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   194  	SduInfo.SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset; /* TRACE[SWS_CanTp_00116] */
	ld.a	a2,[a2]
.L848:
	addsc.a	a2,a2,d15,#0
.L1168:
	st.a	[a10],a2
.L1169:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   195      SduInfo.SduLength = (PduLengthType)PayLoadLength;
	st.h	[a10]4,d10
.L443:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
	mov	d9,#1
.L850:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
	mov	d11,#0
.L851:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
	ld.bu	d0,[a12]11
	movh.a	a14,#@his(CanTp_SubState)
	lea	a14,[a14]@los(CanTp_SubState)
	addsc.a	a2,a14,d0,#0
	ld.bu	d15,[a2]
	movh.a	a2,#@his(CanTp_State)
	lea	a2,[a2]@los(CanTp_State)
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L852:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)      (inlined)
	jne	d15,#0,.L30
.L1170:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	mov	d11,#5
.L1171:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;      (inlined)
	j	.L31

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)      (inlined)
.L30:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
	jne	d15,#2,.L32
.L1172:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
	mul	d15,d0,#20
.L853:
	addsc.a	a2,a13,d15,#0
.L1173:
	ld.bu	d0,[a2]6
.L1174:
	ld.bu	d15,[a12]12
.L1175:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
	jne	d15,d0,.L33
.L1176:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	mov	d11,#5
.L1177:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	ld.a	a2,[a2]4
	ld.hu	d4,[a12]16
	mov	d5,#1
	calli	a2

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))      (inlined)
.L33:
.L32:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else      (inlined)
.L31:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)      (inlined)
	jne	d11,#5,.L34
.L1178:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
	ld.bu	d15,[a12]11
.L1179:
	addsc.a	a2,a14,d15,#0
.L1180:
	mov	d15,#5
.L1181:
	st.b	[a2],d15
.L1182:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
	mov	d9,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)      (inlined)
.L34:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;      (inlined)
	j	.L35

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }      (inlined)
.L35:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   196  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   197      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   198  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   199      /* Accept the request for reception if old state is idle or reception(in reception case kill older one.) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   200      if(CanTp_Prv_GetConnectionAcceptance(Context, PduInfoPtr) == E_OK)
	jne	d9,#0,.L36
.L1183:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   201      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   202          Channel->ActiveSduId = Context->SduId;
	ld.bu	d15,[a12]12
.L1184:
	st.b	[a15]6,d15
.L1185:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   203          Channel->SduLength = Context->SduLength;
	ld.hu	d15,[a12]18
.L1186:
	st.h	[a15]14,d15
.L1187:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   204          CanTp_Prv_SetRxDl(Context->ChannelId, ((uint8)(PduInfoPtr->SduLength)));
	ld.bu	d15,[a12]11
	mul	d15,d15,#20
	addsc.a	a2,a13,d15,#0
	ld.a	a4,[a10]16
.L854:
	ld.hu	d15,[a4]4
	st.b	[a2]1,d15
.L1188:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   205  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   206          Channel->InitialTicks = Value; /* TRACE[SWS_CanTp_00166] */
	ld.hu	d15,[a10]10
.L1189:
	st.h	[a15]16,d15
.L1190:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   207  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   208          /* Request is accepted. indicate to upper layer and ask for buffer.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   209           * check for sufficient buffer availability. copy data. change state to idle. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   210          /* TRACE[SWS_CanTp_00079][SWS_CanTp_00329][SWS_CanTp_00277] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   211          RetValue = PduR_CanTpStartOfReception(Context->PduRPduHandleId, &SduInfo, Context->SduLength, &RemBufSize);
	ld.hu	d4,[a12]16
.L1191:
	lea	a4,[a10]0
.L855:
	ld.hu	d5,[a12]18
.L1192:
	lea	a5,[a10]8
	call	PduR_CanTpStartOfReception
.L856:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   212  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   213  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   214          switch(RetValue) /* TRACE[SWS_CanTp_00064] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   215          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   216              case BUFREQ_OK:
	mov	d15,#0
	jeq	d15,d2,.L37
.L1193:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   217                  if(RemBufSize >= PayLoadLength) /* TRACE[SWS_CanTp_00080] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   218                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   219                      if(PduR_CanTpCopyRxData(Context->PduRPduHandleId, &SduInfo, &RemBufSize) != BUFREQ_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   220                      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   221                          CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   222                          CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   223                          NewSubState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   224                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   225                      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   226                      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   227                          NewSubState = CANTP_RX_SEND_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   228                          Channel->SduLengthRemaining = Context->SduLength - PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   229                          Channel->BS = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   230                          Channel->STminTicks = CANTP_INVALID_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   231                          Channel->FcWait = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   232                          Channel->SN = 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   233                      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   235                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   236                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   237                  {   /* TRACE[SWS_CanTp_00339] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   238                      CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   239                      NewSubState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   240                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   241                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   242              case BUFREQ_E_OVFL: /* TRACE[SWS_CanTp_00318] */
	mov	d15,#3
	jeq	d15,d2,.L38
	j	.L39
.L37:
	ld.hu	d4,[a12]16
.L1194:
	ld.hu	d15,[a10]8
.L1195:
	jlt.u	d15,d10,.L40
.L1196:
	lea	a4,[a10]0
.L1197:
	lea	a5,[a10]8
	call	PduR_CanTpCopyRxData
.L857:
	jeq	d2,#0,.L41
.L1198:
	ld.hu	d4,[a12]16
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	ld.a	a2,[a2]4
	mov	d5,#1
	calli	a2
.L1199:
	mov	d4,#35
	mov	d5,#0
	mov	d6,#66
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1200:
	mov	d0,#0
.L858:
	j	.L42
.L41:
	mov	d0,#6
.L859:
	ld.hu	d15,[a12]18
.L1201:
	sub	d15,d10
.L1202:
	st.h	[a15]12,d15
.L1203:
	mov	d15,#0
.L1204:
	st.b	[a15]5,d15
.L1205:
	mov	d15,#128
.L1206:
	st.h	[a15]18,d15
.L1207:
	mov	d15,#0
.L1208:
	st.h	[a15]8,d15
.L1209:
	mov	d15,#1
.L1210:
	st.b	[a15]4,d15
.L42:
	j	.L43
.L40:
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	ld.a	a2,[a2]4
	mov	d5,#1
	calli	a2
.L860:
	mov	d0,#0
.L43:
	j	.L44
.L38:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   243                  FlowStatus = CANTP_FC_OVERFLOW; /* Set FC status to OVFLW. The FC will be sent from the main function */
	mov	d8,#2
.L1211:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   244                  NewSubState = CANTP_RX_SEND_FC;
	mov	d0,#6
.L861:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   245                  Channel->BS = 0;
	mov	d15,#0
.L1212:
	st.b	[a15]5,d15
.L1213:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   246                  break;
	j	.L45

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   247              default:
.L39:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   248                  NewSubState = CANTP_IDLE; /* TRACE[SWS_CanTp_00081] */
	mov	d0,#0
.L862:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   249                  break;
	j	.L46

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   250          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   251  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   252          if(CanTp_SubState[Context->ChannelId] == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
.L46:
.L45:
.L44:
	ld.bu	d15,[a12]11
.L1214:
	addsc.a	a2,a14,d15,#0
	ld.bu	d15,[a2]
.L1215:
	jne	d15,#5,.L47
.L1216:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   253          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   254              Channel->FlowStatus = FlowStatus;
	st.b	[a15]3,d8
.L1217:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   255              CanTp_SubState[Context->ChannelId] = NewSubState;
	ld.bu	d15,[a12]11
.L1218:
	addsc.a	a15,a14,d15,#0
.L843:
	st.b	[a15],d0
.L47:
.L36:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   256          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   257      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   258  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   259      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   260  }
	ret
.L426:
	
__CanTp_Prv_ProcessRxFirstFrame_function_end:
	.size	CanTp_Prv_ProcessRxFirstFrame,__CanTp_Prv_ProcessRxFirstFrame_function_end-CanTp_Prv_ProcessRxFirstFrame
.L277:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_ProcessRxConsecutiveFrame',code,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_ProcessRxConsecutiveFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   261  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   262  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   263   Function name    : CanTp_Prv_ProcessRxConsecutiveFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   264   Syntax           : CanTp_Prv_ProcessRxConsecutiveFrame(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   265   Description      : Library function to process consecutive frame reception in RxIndication from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   266   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   267   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   268  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   269  static void CanTp_Prv_ProcessRxConsecutiveFrame(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; Function CanTp_Prv_ProcessRxConsecutiveFrame
.L230:
CanTp_Prv_ProcessRxConsecutiveFrame:	.type	func
	sub.a	a10,#16
.L863:
	mov.aa	a12,a4
.L865:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   270  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   271  	PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   272  	PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   273  	uint8 PayloadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   274      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   275      BufReq_ReturnType RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   276      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
	movh.a	a13,#@his(CanTp_Channel)
	lea	a13,[a13]@los(CanTp_Channel)
.L1223:
	ld.bu	d15,[a12]11
.L1224:
	mul	d15,d15,#20
	addsc.a	a15,a13,d15,#0
.L866:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   277      CanTp_TickType Value = Channel->InitialTicks; /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a15]16
.L1225:
	st.h	[a10]12,d15
.L1226:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   278      Std_ReturnType NotifyValue = CANTP_INVALID_NOTIFY_VALUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   279  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   280      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]12
.L1227:
	lea	a4,[a10]10
.L461:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]12
.L867:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a6,#@his(CanTp_MainFunctionTicks)
	lea	a6,[a6]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a6]0
.L1228:
	st.h	[a2],d0
.L1229:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]12
.L1230:
	sub	d0,d15
.L1231:
	st.h	[a4],d0
.L462:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   281  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   282      PayloadLength = Context->CAN_DL - Context->DataOffset;
	ld.bu	d0,[a12]7
.L1232:
	ld.bu	d15,[a12]10
.L868:
	sub	d15,d0
	extr.u	d1,d15,#0,#8
.L869:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   283  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   284  	SduInfo.SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset; /* TRACE[SWS_CanTp_00116] */
	ld.a	a2,[a5]
.L1233:
	addsc.a	a2,a2,d0,#0
.L1234:
	st.a	[a10],a2
.L1235:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   285  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   286      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   287  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   288  	if((CanTp_SubState[Context->ChannelId] == CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME) &&
	movh.a	a14,#@his(CanTp_SubState)
	lea	a14,[a14]@los(CanTp_SubState)
.L1236:
	ld.bu	d15,[a12]11
.L1237:
	addsc.a	a2,a14,d15,#0
	ld.bu	d0,[a2]
.L1238:
	mov	d15,#8
.L1239:
	jne	d15,d0,.L48
.L1240:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   289  	   (Context->SduId == Channel->ActiveSduId) && (Channel->BlockCfsRemaining > 0u))
	ld.bu	d0,[a12]12
.L1241:
	ld.bu	d15,[a15]6
.L1242:
	jne	d15,d0,.L49
.L1243:
	ld.hu	d15,[a15]10
.L1244:
	jeq	d15,#0,.L50
.L1245:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   290  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   291  		#if(CANTP_STRICT_BSCRTIMEOUT_CHECK == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   292  		if(ElapsedValue > CanTp_Prv_GetCfgCsCrTicks(CanTp_CfgPtr->RxSdu + Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   293  		{ /* This time out check is only allowed if OS/Mcu supports the call of there Api in interrupt context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   294  			CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   295  			CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, CANTP_E_RX_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   296  			CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   297  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   298  		else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   299  		#endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   300  		{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   301  			NotifyValue = E_NOT_OK; /* TRACE[SWS_CanTp_00271][SWS_CanTp_00314] */
	mov	d8,#1
.L871:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   302  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   303  			if(Context->SN == Channel->SN) /* Received Sequence number should be expected Sequence Number else Error */
	ld.bu	d0,[a12]6
.L1246:
	ld.bu	d15,[a15]4
.L1247:
	jne	d15,d0,.L51
.L1248:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   304  			{  /* TRACE[SWS_CanTp_00166][SWS_CanTp_00325][SWS_CanTp_00312] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   305  				Channel->InitialTicks = Value; /* This storage of time stamp is for next CF or FC initiation */
	ld.hu	d15,[a10]12
.L1249:
	st.h	[a15]16,d15
.L1250:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   306  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   307  			    SduInfo.SduLength = (Channel->SduLengthRemaining > PayloadLength) ? PayloadLength :
	ld.hu	d15,[a15]12
.L1251:
	jge.u	d1,d15,.L52
.L1252:
	j	.L53
.L52:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   308  			                         (uint8)Channel->SduLengthRemaining;
	extr.u	d1,d15,#0,#8
.L53:
	st.h	[a10]4,d1
.L1253:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   309  			    /* TRACE[SWS_CanTp_00269] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   310  				RetValue = PduR_CanTpCopyRxData(Context->PduRPduHandleId, &SduInfo, &RemBufSize);
	ld.hu	d4,[a12]16
.L1254:
	lea	a4,[a10]0
.L1255:
	lea	a5,[a10]8
.L864:
	call	PduR_CanTpCopyRxData
.L870:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   311  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   312  				if(RetValue == BUFREQ_OK)
	jne	d2,#0,.L54
.L1256:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   313  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   314  					Channel->SN++;
	ld.bu	d15,[a15]4
.L1257:
	add	d15,#1
	st.b	[a15]4,d15
.L1258:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   315  					Channel->SN &= CANTP_LOWERNIBBLE_MASK;
	ld.bu	d15,[a15]4
.L1259:
	and	d15,#15
	st.b	[a15]4,d15
.L1260:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   316  					Channel->SduLengthRemaining -= SduInfo.SduLength;
	ld.hu	d15,[a15]12
.L1261:
	ld.hu	d0,[a10]4
.L1262:
	sub	d15,d0
	st.h	[a15]12,d15
.L1263:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   317  					Channel->BlockCfsRemaining--;
	ld.hu	d15,[a15]10
.L1264:
	add	d15,#-1
	st.h	[a15]10,d15
.L1265:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   318  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   319  					CanTp_Prv_PrepareFcTransmit(Context->ChannelId); /* If last CF of a block then prepare for FC */
	ld.bu	d0,[a12]11
.L467:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1097      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1098      return CanTp_ParamPair[id].Param[value];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1099      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1101  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1102  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1103   Function name    : CanTp_Prv_SetRxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1104   Syntax           : CanTp_Prv_SetRxBlockInfo(ChannelId, RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1105   Description      : Function to initialize the block related parameters for the Rx connection Channel based on the
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1106                      Buffer Availability in PduR and configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1107   Parameter        : CanTp_ChannelIdType, const PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1110  LOCAL_INLINE void CanTp_Prv_SetRxBlockInfo(CanTp_ChannelIdType ChannelId, const PduLengthType RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1112      uint8 BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1113      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1114  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1115      uint8 BS = Channel->BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1116      const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1117      PduLengthType OneFramePayloadLength = CanTp_Prv_GetRxDl(ChannelId) -
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1118                                            CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1120      /* This invalid value of STminTicks case is possible according to [SWS_CanTp_00082] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1121      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1123      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1124      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1125          BSMax = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_BS);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1128          {   /* Enough buffer to recieve all frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1130          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1132          {   /* Enough buffer to recieve Block frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1133              BS = (uint8)(RemBufSize/OneFramePayloadLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1135          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1136      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1140      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1142      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1144      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1145  		BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1147  	    Channel->FlowStatus = CANTP_FC_CTS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1148          #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1149          Channel->STminTicks = 0;  /* BS locking for CANTP_DYNAMIC_FC_SUPPORT Disabled case  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1150          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1151      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1152  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1153      Channel->BS = BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1154  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1155  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1156  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1157   Function name    : CanTp_Prv_PageConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1158   Syntax           : CanTp_Prv_PageConfirmation(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1159   Description      : This is a wrapper function to update for upper layer page refilling.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1160   Parameter        : const CanTp_TxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1161   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1162  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1163  LOCAL_INLINE void CanTp_Prv_PageConfirmation(const CanTp_TxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1164  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1165      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1166      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1167      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1168  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1169      if(CanTp_Channel[Context->ChannelId].TxBufferStatus == CANTP_BUFFER_NOT_ASKED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1170      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1171          SduInfo.SduLength = Context->PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1172          SduInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1173          /* As Page confirmation is done only in case of not availability of buffer so void typecasting is ok. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1174          (void)PduR_CanTpCopyTxData(Context->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1175          CanTp_Channel[Context->ChannelId].TxBufferStatus = CANTP_BUFFER_ASKED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1176      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1177  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1178  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1179  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1180   Function name    : CanTp_Prv_FcTxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1181   Syntax           : CanTp_Prv_FcTxConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1182   Description      : Function to change channel state at confirmation recieved for FC in CanTp_TxConfirmation.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1183   Parameter        : PduIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1184   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1185  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1186  LOCAL_INLINE void CanTp_Prv_FcTxConfirmation(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1187  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1188      const CanTp_ChannelType *Channel = CanTp_Channel + ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1189      const CanTp_RxSduType *RxConnection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1190  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1191      switch(Channel->FlowStatus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1192      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1193          case CANTP_FC_CTS:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1194              CanTp_SubState[ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1195              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1196          case CANTP_FC_WAIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1197              CanTp_SubState[ChannelId] = (Channel->SduLengthRemaining > 0u) ? CANTP_RX_SEND_FC : CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1198              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1199          case CANTP_FC_OVERFLOW:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1200              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, RxConnection->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1201              CanTp_SubState[ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1202              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1203          default:    /* Wrong FlowStatus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1204              break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1205      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1206  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1207  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1208  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1209   Function name    : CanTp_Prv_PrepareFcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1210   Syntax           : CanTp_Prv_PrepareFcTransmit(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1211   Description      : This function sets the context w.r.t. FC transmission for RxConnection of Active Channel.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1212   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1213   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1214  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1215  LOCAL_INLINE void CanTp_Prv_PrepareFcTransmit(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1216  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1217      if(CanTp_Channel[ChannelId].BlockCfsRemaining == 0u)
	mul	d15,d0,#20
	addsc.a	a2,a13,d15,#0
.L1266:
	ld.hu	d15,[a2]10
.L1267:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1217      if(CanTp_Channel[ChannelId].BlockCfsRemaining == 0u)      (inlined)
	jne	d15,#0,.L55
.L1268:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1218      { /* TRACE[SWS_CanTp_00082][SWS_CanTp_00278] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1219          CanTp_Channel[ChannelId].FcWait = 0;
	mov	d15,#0
.L1269:
	st.h	[a2]8,d15
.L1270:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1220          CanTp_Channel[ChannelId].FlowStatus = CANTP_FC_WAIT;
	mov	d15,#1
.L1271:
	st.b	[a2]3,d15
.L1272:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1221          CanTp_SubState[ChannelId] = CANTP_RX_SEND_FC;
	addsc.a	a2,a14,d0,#0
.L1273:
	mov	d15,#6
.L1274:
	st.b	[a2],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1217      if(CanTp_Channel[ChannelId].BlockCfsRemaining == 0u)      (inlined)
.L55:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   320  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   321                      NotifyValue = (Channel->SduLengthRemaining != 0u) ? CANTP_INVALID_NOTIFY_VALUE : E_OK;
	ld.hu	d15,[a15]12
.L1275:
	mov	d8,#255
	cmovn	d8,d15,#0
.L1276:
	j	.L57
.L56:
	mov	d8,#0
.L57:
.L54:
.L51:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   322  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   323  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   324  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   325  			if(NotifyValue != CANTP_INVALID_NOTIFY_VALUE)
	mov	d15,#255
.L1277:
	jeq	d15,d8,.L58
.L1278:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   326  			{ /* TRACE[SWS_CanTp_00084] Terminate Transfer for invalid SN, completion of last CF or Rx not success. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   327                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, NotifyValue);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L872:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a12]16
	mov	d5,d8
	calli	a15
.L1279:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   328                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a12]11
.L1280:
	addsc.a	a15,a14,d15,#0
.L1281:
	mov	d15,#0
.L1282:
	st.b	[a15],d15
.L58:
.L50:
.L49:
.L48:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   329  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   330  		}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   331  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   332  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   333      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   334  }
	ret
.L449:
	
__CanTp_Prv_ProcessRxConsecutiveFrame_function_end:
	.size	CanTp_Prv_ProcessRxConsecutiveFrame,__CanTp_Prv_ProcessRxConsecutiveFrame_function_end-CanTp_Prv_ProcessRxConsecutiveFrame
.L282:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_ProcessRxFlowControlFrame',code,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_ProcessRxFlowControlFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   335  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   336  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   337   Function name    : CanTp_Prv_ProcessRxFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   338   Syntax           : CanTp_Prv_ProcessRxFlowControlFrame(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   339   Description      : Library function to process Flow Control frame reception in RxIndication from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   340   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   341   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   342  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   343  static void CanTp_Prv_ProcessRxFlowControlFrame(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; Function CanTp_Prv_ProcessRxFlowControlFrame
.L232:
CanTp_Prv_ProcessRxFlowControlFrame:	.type	func
	sub.a	a10,#8
.L873:
	mov.aa	a12,a4
.L875:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   344  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   345  	CanTp_ChannelPtrType Channel;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   346      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   347      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   348  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   349  	/* Select the Active channel which is waiting for Flow Control from normal or shared  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   350      Channel = &CanTp_Channel[Context->ChannelId];
	movh.a	a7,#@his(CanTp_Channel)
	lea	a7,[a7]@los(CanTp_Channel)
.L1287:
	ld.bu	d15,[a12]11
.L1288:
	mul	d15,d15,#20
	addsc.a	a15,a7,d15,#0
.L876:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   351      Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a15]16
.L1289:
	st.h	[a10],d15
.L1290:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   352      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]0
.L1291:
	lea	a4,[a10]2
.L477:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L878:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a6,#@his(CanTp_MainFunctionTicks)
	lea	a6,[a6]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a6]0
.L1292:
	st.h	[a2],d0
.L1293:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1294:
	sub	d0,d15
.L1295:
	st.h	[a4],d0
.L478:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   353  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   354      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   355  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   356      /* check for the state to avoid unintentional reception.  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   357      if(CanTp_SubState[Context->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
	movh.a	a13,#@his(CanTp_SubState)
	lea	a13,[a13]@los(CanTp_SubState)
.L1296:
	ld.bu	d15,[a12]11
.L879:
	addsc.a	a2,a13,d15,#0
	ld.bu	d15,[a2]
.L1297:
	jne	d15,#3,.L59
.L1298:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   358      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   359          #if(CANTP_STRICT_BSCRTIMEOUT_CHECK == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   360          if(ElapsedValue > CanTp_Prv_GetCfgBsBrTicks(CanTp_CfgPtr->TxSdu + Channel->ActiveSduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   361          {  /* TRACE[SWS_CanTp_00229] timeout has happened so kill the reception  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   362  			CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   363  			CanTp_Prv_ReportRunTimeError(CANTP_RXINDICATION, CANTP_E_TX_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   364  			CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   365          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   366          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   367          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   368          {   /* TRACE[SWS_CanTp_00315] Restart the timer. Transmission side there is no FcWaitMax !!! */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   369              Channel->InitialTicks = Value; /* Store current time stamp to measure the Time Out. */
	ld.hu	d15,[a10]0
.L1299:
	st.h	[a15]16,d15
.L1300:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   370  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   371              switch(Context->FlowStatus)
	ld.bu	d15,[a12]5
.L1301:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   372              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   373                  case CANTP_FC_WAIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   374                      Channel->FlowStatus = CANTP_FC_WAIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   375                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   376                  case CANTP_FC_CTS:
	mov	d0,#0
	jeq	d15,d0,.L60
.L1302:
	mov	d0,#1
	jeq	d15,d0,.L61
	j	.L62
.L61:
	mov	d15,#1
.L1303:
	st.b	[a15]3,d15
.L1304:
	j	.L63
.L60:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   377                      Channel->FlowStatus = CANTP_FC_CTS;
	mov	d15,#0
.L1305:
	st.b	[a15]3,d15
.L483:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
	ld.bu	d15,[a12]11
.L1306:
	mul	d15,d15,#20
	addsc.a	a15,a7,d15,#0
.L877:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
	ld.a	a2,[a5]
.L1307:
	ld.bu	d15,[a12]7
.L1308:
	addsc.a	a2,a2,d15,#0
.L881:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
	ld.hu	d0,[a15]18
.L1309:
	mov	d15,#128
.L1310:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)      (inlined)
	jne	d15,d0,.L64
.L1311:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
	ld.bu	d15,[a2]
.L1312:
	st.b	[a15]5,d15
.L1313:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
	add.a	a2,#1
.L1314:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
	ld.bu	d0,[a2]
.L1315:
	mov	d15,#127
.L1316:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */      (inlined)
	jlt.u	d15,d0,.L65
.L1317:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
	mov	d15,#15625
	sh	d15,#6
	mul	d0,d15
	div.u	e0,d0,d15
.L1318:
	st.h	[a15]18,d0
.L1319:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);      (inlined)
	j	.L66

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */      (inlined)
.L65:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
	mov	d15,#241
.L1320:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))      (inlined)
	jlt.u	d0,d15,.L67
.L1321:
	mov	d15,#249
.L1322:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))      (inlined)
	jge.u	d15,d0,.L68
.L67:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
	mov	d15,#127
.L1323:
	st.h	[a15]18,d15
.L1324:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);      (inlined)
	j	.L69

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))      (inlined)
.L68:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
	mov	d1,#15625
	sh	d1,#6
	and	d15,d0,#15
	mov	d0,#3125
	sh	d0,#5
	mul	d15,d0
	div.u	e0,d15,d1
.L1325:
	st.h	[a15]18,d0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else      (inlined)
.L69:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))      (inlined)
.L66:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)      (inlined)
.L64:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
	ld.bu	d15,[a12]11
.L494:
	mul	d15,d15,#20
	addsc.a	a2,a7,d15,#0
.L882:
	ld.bu	d15,[a2]6
.L1326:
	mul	d15,d15,#12
.L1327:
	movh.a	a4,#@his(CanTp_CfgPtr)
	lea	a4,[a4]@los(CanTp_CfgPtr)
	ld.a	a4,[a4]
.L1328:
	ld.a	a4,[a4]12
.L1329:
	addsc.a	a4,a4,d15,#0
.L883:
	ld.bu	d0,[a4]
.L885:
	ld.bu	d15,[a4]3
.L1330:
	movh.a	a4,#@his(CanTp_AddressSize)
.L884:
	lea	a4,[a4]@los(CanTp_AddressSize)
.L1331:
	addsc.a	a4,a4,d15,#0
	ld.bu	d15,[a4]
.L887:
	ld.hu	d1,[a2]12
.L889:
	sub	d0,d15
.L886:
	add	d0,#-1
.L1332:
	extr.u	d15,d0,#0,#8
.L888:
	div.u	e2,d1,d15
.L1333:
	div.u	e0,d1,d15
.L890:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
	jne	d1,#0,.L70
.L1334:
	j	.L71
.L70:
	add	d2,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
.L71:
	extr.u	d0,d2,#0,#16
.L1335:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
	j	.L72

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }      (inlined)
.L72:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
	ld.bu	d15,[a15]5
.L891:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))      (inlined)
	jeq	d15,#0,.L73
.L1336:
	jge.u	d0,d15,.L74
.L73:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
	st.h	[a15]10,d0
.L1337:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;      (inlined)
	j	.L75

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))      (inlined)
.L74:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
	st.h	[a15]10,d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else      (inlined)
.L75:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   378                      CanTp_Prv_SetTxBlockInfo(Context, PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   379                      CanTp_SubState[Context->ChannelId] = CANTP_TX_SEND_CONSECUTIVE_FRAME;
	ld.bu	d15,[a12]11
.L1338:
	addsc.a	a15,a13,d15,#0
.L880:
	mov	d15,#4
.L1339:
	st.b	[a15],d15
.L1340:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   380                      break;
	j	.L76

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   381                  default: /* TRACE[SWS_CanTp_00317][SWS_CanTp_00309][SWS_CanTp_00205] */
.L62:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   382                      /* If Flow Control status is not FC_WAIT or FC_CTS then it is time to kill the Transmission */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   383                      CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
.L892:
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]
	ld.hu	d4,[a12]16
	mov	d5,#1
	calli	a15
.L874:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   384                      CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a12]11
.L1341:
	addsc.a	a15,a13,d15,#0
.L1342:
	mov	d15,#0
.L1343:
	st.b	[a15],d15
.L1344:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   385                      break;
	j	.L77

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   386              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   387          }
.L77:
.L76:
.L63:
.L59:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   388      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   389  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   390      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   391  }
	ret
.L471:
	
__CanTp_Prv_ProcessRxFlowControlFrame_function_end:
	.size	CanTp_Prv_ProcessRxFlowControlFrame,__CanTp_Prv_ProcessRxFlowControlFrame_function_end-CanTp_Prv_ProcessRxFlowControlFrame
.L287:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_CreateTxSingleFrame',code,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_CreateTxSingleFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   392  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   393  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   394   Function name    : CanTp_Prv_CreateTxSingleFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   395   Syntax           : CanTp_Prv_CreateTxSingleFrame(ChannelId, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   396   Description      : Library function to assemble Single Frame in TriggerTransmit function from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   397   Parameter        : CanTp_ChannelIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   398   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   399  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   400  static Std_ReturnType CanTp_Prv_CreateTxSingleFrame(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr)
; Function CanTp_Prv_CreateTxSingleFrame
.L234:
CanTp_Prv_CreateTxSingleFrame:	.type	func
	sub.a	a10,#16
.L893:
	mov.aa	a12,a4
.L896:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   401  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   402  	PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   403  	PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   404  	uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   405  	uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   406      uint8 PaddingOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   407      uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   408      uint8 PciId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   409      uint32 SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   410      uint32 SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   411      Std_ReturnType Status = E_NOT_OK;
	mov	d8,#1
.L897:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   412  	CanTp_ChannelPtrType Channel = CanTp_Channel + ChannelId;
	mul	d15,d4,#20
.L1349:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L1350:
	addsc.a	a2,a2,d15,#0
.L898:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   413  	const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   414  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   415  	if(CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION)
	movh.a	a4,#@his(CanTp_SubState)
.L895:
	lea	a4,[a4]@los(CanTp_SubState)
.L1351:
	addsc.a	a15,a4,d4,#0
	ld.bu	d15,[a15]
.L1352:
	jne	d15,#2,.L78
.L1353:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   416  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   417  	    Connection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	ld.bu	d15,[a2]6
.L1354:
	mul	d15,d15,#12
.L1355:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1356:
	ld.a	a15,[a15]12
.L1357:
	addsc.a	a15,a15,d15,#0
.L900:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   418  	    PciId = Channel->PciId;
	ld.bu	d9,[a2]2
.L901:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   419  	    SduLength = Channel->SduLength;
	ld.hu	d10,[a2]14
.L902:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   420  	    SduLengthRemaining = Channel->SduLengthRemaining;
	ld.hu	d1,[a2]12
.L903:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   422  		DataOffset = CanTp_AddressSize[Connection->AddressFormatId] + CanTp_PciSize[PciId];
	ld.bu	d15,[a15]3
.L1358:
	movh.a	a2,#@his(CanTp_AddressSize)
.L899:
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1359:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
.L1360:
	movh.a	a2,#@his(CanTp_PciSize)
	lea	a2,[a2]@los(CanTp_PciSize)
.L1361:
	addsc.a	a2,a2,d9,#0
	ld.bu	d2,[a2]
.L1362:
	add	d0,d2
	extr.u	d11,d0,#0,#8
.L905:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   423  	    CAN_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   424  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   425  	    SduDataPtr = PduInfoPtr->SduDataPtr + DataOffset;
	ld.a	a2,[a12]
.L1363:
	addsc.a	a2,a2,d11,#0
.L906:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   426  	    SduInfo.SduDataPtr = SduDataPtr;
	st.a	[a10],a2
.L1364:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   427  	    SduInfo.SduLength = (uint8)SduLengthRemaining;
	extr.u	d15,d1,#0,#8
.L1365:
	st.h	[a10]4,d15
.L1366:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   428  	    PduInfoPtr->SduLength = 0;
	mov	d15,#0
.L1367:
	st.h	[a12]4,d15
.L1368:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   429  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   430  	    /* Step1: TRACE[SWS_CanTp_00086][SWS_CanTp_00272]take the data bytes from PduR */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   431          if(PduR_CanTpCopyTxData(Connection->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize) != BUFREQ_OK)
	ld.hu	d4,[a15]10
.L894:
	lea	a4,[a10]0
.L1369:
	mov.a	a5,#0
.L1370:
	lea	a6,[a10]8
	call	PduR_CanTpCopyTxData
.L904:
	jeq	d2,#0,.L79
.L1371:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   432          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   433              CanTp_Prv_ReportRunTimeError(CANTP_TRIGGERTRANSMIT, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#12
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1372:
	j	.L80
.L79:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   434          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   435          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   436          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   437              /* Step2: if padding is ON then assemble Padding bytes. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   438              if(CanTp_Prv_GetBit(Connection->BitFields, CANTP_PADDINGON))
	ld.bu	d15,[a15]1
.L521:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#8
	ne	d15,d15,#0
.L1373:
	j	.L82
.L81:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L82:
	j	.L83

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L83:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   439              {   /* TRACE[SWS_CanTp_00351] If data length which shall be transmitted via CanIf_Transmit() does not */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   440                  CAN_DL = CanTp_Prv_GetCanDl(DataOffset + SduInfo.SduLength); /* TRACE[SWS_CanTp_00351] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   441                  PaddingOffset = (uint8)(DataOffset + SduInfo.SduLength);
	ld.hu	d0,[a10]4
.L1374:
	add	d11,d0
.L907:
	extr.u	d0,d11,#0,#8
.L528:
	jeq	d15,#0,.L84
.L529:
	movh.a	a2,#@his(CanTp_CanDlTable)
	lea	a2,[a2]@los(CanTp_CanDlTable)
	addsc.a	a2,a2,d11,#0
	ld.bu	d1,[a2]
.L908:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   442                  SduDataPtr = PduInfoPtr->SduDataPtr + PaddingOffset; /* TRACE[SWS_CanTp_00059][SWS_CanTp_00348] */
	ld.a	a2,[a12]
.L1375:
	addsc.a	a2,a2,d0,#0
.L909:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   443                  CanTp_Prv_ArrayInit(SduDataPtr, CAN_DL - PaddingOffset, CANTP_PADDING_BYTE);
	sub	d0,d1,d0
.L1376:
	mov	d2,#0
.L531:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d15,#0
.L910:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L85
.L86:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a4,a2,d15,#0
.L1377:
	st.b	[a4],d2
.L1378:
	add	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L85:
	jlt.u	d15,d0,.L86
.L532:
	j	.L87
.L84:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   444              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   445              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   446              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   447                  CAN_DL = (uint8)(DataOffset + SduInfo.SduLength);
	mov	d1,d0
.L87:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   448              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   450              SduDataPtr = PduInfoPtr->SduDataPtr;
	ld.a	a2,[a12]
.L911:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   451              if(Connection->AddressFormatId != 0)
	ld.bu	d15,[a15]3
.L1379:
	jeq	d15,#0,.L88
.L1380:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   452              {/* Step3: TRACE[SWS_CanTp_00281] Prepend the Address byte if extended addressing or Mixed addressing */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   453                  *SduDataPtr = Connection->Address;
	ld.bu	d15,[a15]2
.L1381:
	st.b	[a2],d15
.L1382:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   454                  SduDataPtr++;
	add.a	a2,#1
.L88:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   455              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   456  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   457              /* Step4: PCI bytes calculation and assembly */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   458              if(PciId == CANTP_NPCI_SFCAN)
	jne	d9,#0,.L89
.L1383:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   459              {	/* SingleFrame (SF) (CAN_DL <= 8)  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   460                  *SduDataPtr = (uint8)SduLength;
	st.b	[a2],d10
.L1384:
	j	.L90
.L89:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   461              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   462              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   463              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   464                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   465                  if(PciId == CANTP_NPCI_SFCANFD)
	jne	d9,#1,.L91
.L1385:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   466                  {   /* SingleFrame (SF) (CAN_DL > 8)  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   467                      SduDataPtr[0] = 0x00;
	mov	d15,#0
.L1386:
	st.b	[a2],d15
.L1387:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   468                      SduDataPtr[1] = (uint8)SduLength;
	st.b	[a2]1,d10
.L91:
.L90:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   469                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   470                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   471              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   472  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   473              PduInfoPtr->SduLength = CAN_DL;
	st.h	[a12]4,d1
.L1388:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   474              Status = E_OK;
	mov	d8,#0
.L80:
.L78:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   475          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   476  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   477  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   478  	return Status;
	mov	d2,d8
.L912:
	j	.L92

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   479  }
.L92:
	ret
.L504:
	
__CanTp_Prv_CreateTxSingleFrame_function_end:
	.size	CanTp_Prv_CreateTxSingleFrame,__CanTp_Prv_CreateTxSingleFrame_function_end-CanTp_Prv_CreateTxSingleFrame
.L292:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_CreateTxFirstFrame',code,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_CreateTxFirstFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   480  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   481  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   482   Function name    : CanTp_Prv_CreateTxFirstFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   483   Syntax           : CanTp_Prv_CreateTxFirstFrame(ChannelId, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   484   Description      : Library function to assemble First frame in TriggerTransmit function from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   485   Parameter        : CanTp_ChannelIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   486   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   487  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   488  static Std_ReturnType CanTp_Prv_CreateTxFirstFrame(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr)
; Function CanTp_Prv_CreateTxFirstFrame
.L236:
CanTp_Prv_CreateTxFirstFrame:	.type	func
	sub.a	a10,#16
.L913:
	mov.aa	a12,a4
.L916:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   489  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   490  	PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   491  	PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   492      uint32 SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   493  	uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   494  	uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   495  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   496  	uint8 PciId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   497  	CanTp_ChannelPtrType Channel = CanTp_Channel + ChannelId;
	mul	d15,d4,#20
.L1393:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L1394:
	addsc.a	a4,a2,d15,#0
.L915:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   498      Std_ReturnType Status = E_NOT_OK;
	mov	d8,#1
.L918:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   499  	const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   500  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   501      if(CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION)
	movh.a	a2,#@his(CanTp_SubState)
	lea	a2,[a2]@los(CanTp_SubState)
.L1395:
	addsc.a	a2,a2,d4,#0
	ld.bu	d15,[a2]
.L1396:
	jne	d15,#2,.L93
.L1397:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   502      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   503          Connection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	ld.bu	d15,[a4]6
.L1398:
	mul	d15,d15,#12
.L1399:
	movh.a	a2,#@his(CanTp_CfgPtr)
	lea	a2,[a2]@los(CanTp_CfgPtr)
	ld.a	a15,[a2]
.L1400:
	ld.a	a2,[a15]12
.L1401:
	addsc.a	a13,a2,d15,#0
.L919:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   504          PciId = Channel->PciId;
	ld.bu	d9,[a4]2
.L920:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   505          DataOffset = CanTp_AddressSize[Connection->AddressFormatId] + CanTp_PciSize[PciId];
	ld.bu	d15,[a13]3
.L1402:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1403:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
.L1404:
	movh.a	a15,#@his(CanTp_PciSize)
	lea	a15,[a15]@los(CanTp_PciSize)
.L1405:
	addsc.a	a15,a15,d9,#0
	ld.bu	d1,[a15]
.L1406:
	add	d0,d1
	extr.u	d15,d0,#0,#8
.L921:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   506          CAN_DL = CanTp_Prv_GetTxDl(Connection);
	ld.bu	d10,[a13]
.L923:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   507          SduLength = Channel->SduLength;
	ld.hu	d11,[a4]14
.L924:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   509          SduDataPtr = PduInfoPtr->SduDataPtr + DataOffset;
	ld.a	a15,[a12]
.L1407:
	addsc.a	a15,a15,d15,#0
.L925:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   510          SduInfo.SduDataPtr = SduDataPtr;
	st.a	[a10],a15
.L1408:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   511          SduInfo.SduLength = CAN_DL - DataOffset;
	sub	d15,d10,d15
.L922:
	st.h	[a10]4,d15
.L1409:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   512          PduInfoPtr->SduLength = 0;
	mov	d15,#0
.L1410:
	st.h	[a12]4,d15
.L1411:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   513  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   514          /* Step1: TRACE[SWS_CanTp_00086][SWS_CanTp_00272]take the data bytes from PduR */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   515          if(PduR_CanTpCopyTxData(Connection->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize) != BUFREQ_OK)
	ld.hu	d4,[a13]10
.L914:
	lea	a4,[a10]0
.L917:
	mov.a	a5,#0
.L1412:
	lea	a6,[a10]8
	call	PduR_CanTpCopyTxData
.L1413:
	jeq	d2,#0,.L94
.L1414:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   516          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   517              CanTp_Prv_ReportRunTimeError(CANTP_TRIGGERTRANSMIT, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#12
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1415:
	j	.L95
.L94:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   518          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   519          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   520          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   521              SduDataPtr = PduInfoPtr->SduDataPtr;
	ld.a	a15,[a12]
.L1416:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   522              if(Connection->AddressFormatId != CANTP_STANDARD)
	ld.bu	d15,[a13]3
.L1417:
	jeq	d15,#0,.L96
.L1418:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   523              {/* Step2: TRACE[SWS_CanTp_00281] Prepend the Address byte if extended addressing or Mixed addressing */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   524                  *SduDataPtr = Connection->Address;
	ld.bu	d15,[a13]2
.L1419:
	st.b	[a15],d15
.L1420:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   525                  SduDataPtr++;
	add.a	a15,#1
.L96:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   526              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   528              /* Step3: PCI bytes calculation and assembly */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   529              if(PciId == CANTP_NPCI_FFCAN)
	jne	d9,#2,.L97
.L1421:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   530              {   /* FirstFrame (FF) (FF_DL <= 4095)  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   531                  SduDataPtr[0] = 0x10 + (uint8)(SduLength >> 0x08u);
	sh	d15,d11,#-8
.L1422:
	add	d15,d15,#16
.L1423:
	st.b	[a15],d15
.L1424:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   532                  SduDataPtr[1] = (uint8)SduLength;
	st.b	[a15]1,d11
.L1425:
	j	.L98
.L97:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   533              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   534              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   535              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   536                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   537                  if(PciId == CANTP_NPCI_FFCANFD)
	jne	d9,#3,.L99
.L1426:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   538                  {   /* FirstFrame (FF) (FF_DL > 4095)  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   539                      SduDataPtr[0] = 0x10;
	mov	d15,#16
.L1427:
	st.b	[a15],d15
.L1428:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   540                      SduDataPtr[1] = 0x00;
	mov	d15,#0
.L1429:
	st.b	[a15]1,d15
.L1430:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   541                      SduDataPtr[2] = (uint8)(SduLength >> 0x18u);
	sh	d15,d11,#-24
.L1431:
	st.b	[a15]2,d15
.L1432:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   542                      SduDataPtr[3] = (uint8)(SduLength >> 0x10u);
	sh	d15,d11,#-16
.L1433:
	st.b	[a15]3,d15
.L1434:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   543                      SduDataPtr[4] = (uint8)(SduLength >> 0x08u);
	sh	d15,d11,#-8
.L1435:
	st.b	[a15]4,d15
.L1436:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   544                      SduDataPtr[5] = (uint8)SduLength;
	st.b	[a15]5,d11
.L99:
.L98:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   545                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   546                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   547              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   548  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   549              PduInfoPtr->SduLength = CAN_DL;
	st.h	[a12]4,d10
.L1437:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   550              Status = E_OK;
	mov	d8,#0
.L95:
.L93:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   551          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   552      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   553  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   554      return Status;
	mov	d2,d8
.L926:
	j	.L100

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   555  }
.L100:
	ret
.L541:
	
__CanTp_Prv_CreateTxFirstFrame_function_end:
	.size	CanTp_Prv_CreateTxFirstFrame,__CanTp_Prv_CreateTxFirstFrame_function_end-CanTp_Prv_CreateTxFirstFrame
.L297:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_CreateTxConsecutiveFrame',code,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_CreateTxConsecutiveFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   556  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   557  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   558   Function name    : CanTp_Prv_CreateTxConsecutiveFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   559   Syntax           : CanTp_Prv_CreateTxConsecutiveFrame(ChannelId, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   560   Description      : Library function to assemble consecutive Frame in TriggerTransmit function from CanIf.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   561   Parameter        : CanTp_ChannelIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   562   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   563  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   564  static Std_ReturnType CanTp_Prv_CreateTxConsecutiveFrame(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr)
; Function CanTp_Prv_CreateTxConsecutiveFrame
.L238:
CanTp_Prv_CreateTxConsecutiveFrame:	.type	func
	sub.a	a10,#16
.L927:
	mov.aa	a12,a4
.L930:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   565  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   566  	PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   567  	PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   568      uint8 PaddingOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   569  	uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   570  	uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   571  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   572      uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   573  	uint8 MaxCopyLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   574  	uint32 SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   575  	CanTp_ChannelPtrType Channel = CanTp_Channel + ChannelId;
	mul	d15,d4,#20
.L1442:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L1443:
	addsc.a	a2,a2,d15,#0
.L931:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   576      Std_ReturnType Status = E_NOT_OK;
	mov	d8,#1
.L933:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   577  	const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   578  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   579      if(CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION)
	movh.a	a4,#@his(CanTp_SubState)
.L929:
	lea	a4,[a4]@los(CanTp_SubState)
.L1444:
	addsc.a	a15,a4,d4,#0
	ld.bu	d15,[a15]
.L1445:
	jne	d15,#2,.L101
.L1446:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   580      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   581          Connection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	ld.bu	d15,[a2]6
.L1447:
	mul	d15,d15,#12
.L1448:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1449:
	ld.a	a15,[a15]12
.L1450:
	addsc.a	a13,a15,d15,#0
.L934:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   582          SN = Channel->SN;
	ld.bu	d10,[a2]4
.L935:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   583          SduLengthRemaining = Channel->SduLengthRemaining;
	ld.hu	d11,[a2]12
.L936:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   584  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   585          DataOffset = CanTp_AddressSize[Connection->AddressFormatId] + CANTP_CF_PCISIZE;
	ld.bu	d15,[a13]3
.L1451:
	movh.a	a2,#@his(CanTp_AddressSize)
.L932:
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1452:
	addsc.a	a15,a2,d15,#0
	ld.bu	d0,[a15]
.L1453:
	add	d0,#1
	extr.u	d12,d0,#0,#8
.L937:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   586          CAN_DL = CanTp_Prv_GetTxDl(Connection);
	ld.bu	d13,[a13]
.L938:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   587          MaxCopyLength = CAN_DL - DataOffset;
	sub	d0,d13,d12
	extr.u	d9,d0,#0,#8
.L939:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   588          SduInfo.SduDataPtr = PduInfoPtr->SduDataPtr + DataOffset;
	ld.a	a15,[a12]
.L1454:
	addsc.a	a15,a15,d12,#0
.L1455:
	st.a	[a10]4,a15
.L1456:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   589          SduInfo.SduLength = (SduLengthRemaining > MaxCopyLength) ? MaxCopyLength : (uint8)SduLengthRemaining;
	jge.u	d9,d11,.L102
.L1457:
	mov	d15,d9
.L1458:
	j	.L103
.L102:
	extr.u	d15,d11,#0,#8
.L103:
	st.h	[a10]8,d15
.L1459:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   590          PduInfoPtr->SduLength = 0;
	mov	d15,#0
.L1460:
	st.h	[a12]4,d15
.L1461:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   591  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   592          /* Step1: TRACE[SWS_CanTp_00086][SWS_CanTp_00272]take the data bytes from PduR */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   593          if(PduR_CanTpCopyTxData(Connection->PduRPduHandleId, &SduInfo, NULL_PTR, &RemBufSize) != BUFREQ_OK)
	ld.hu	d4,[a13]10
.L928:
	lea	a4,[a10]4
.L1462:
	mov.a	a5,#0
.L1463:
	lea	a6,[a10]0
	call	PduR_CanTpCopyTxData
.L1464:
	jeq	d2,#0,.L104
.L1465:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   594          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   595              CanTp_Prv_ReportRunTimeError(CANTP_TRIGGERTRANSMIT, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#12
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1466:
	j	.L105
.L104:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   596          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   597          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   598          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   599              if(SduLengthRemaining < MaxCopyLength)
	jge.u	d11,d9,.L106
.L1467:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   600              {   /* Step2: if padding is ON then assemble Padding bytes. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   601                  if(CanTp_Prv_GetBit(Connection->BitFields, CANTP_PADDINGON))
	ld.bu	d15,[a13]1
.L569:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#8
	ne	d15,d15,#0
.L1468:
	j	.L108
.L107:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L108:
	j	.L109

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L109:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   602                  {   /* TRACE[SWS_CanTp_00351] If data length which shall be transmitted via CanIf_Transmit() does not */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   603                      CAN_DL = CanTp_Prv_GetCanDl(DataOffset + SduInfo.SduLength); /* TRACE[SWS_CanTp_00351] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   604                      PaddingOffset = (uint8)(DataOffset + SduInfo.SduLength);
	ld.hu	d0,[a10]8
.L1469:
	add	d12,d0
.L940:
	extr.u	d0,d12,#0,#8
.L573:
	jeq	d15,#0,.L110
.L574:
	movh.a	a15,#@his(CanTp_CanDlTable)
	lea	a15,[a15]@los(CanTp_CanDlTable)
	addsc.a	a15,a15,d12,#0
	ld.bu	d13,[a15]
.L1470:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   605                      SduDataPtr = PduInfoPtr->SduDataPtr + PaddingOffset; /* TRACE[SWS_CanTp_00059] */
	ld.a	a15,[a12]
.L1471:
	addsc.a	a15,a15,d0,#0
.L941:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   606                      CanTp_Prv_ArrayInit(SduDataPtr, CAN_DL - PaddingOffset, CANTP_PADDING_BYTE);
	sub	d0,d13,d0
.L1472:
	mov	d1,#0
.L575:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d15,#0
.L942:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L111
.L112:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a2,a15,d15,#0
.L1473:
	st.b	[a2],d1
.L1474:
	add	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L111:
	jlt.u	d15,d0,.L112
.L576:
	j	.L113
.L110:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   607                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   608                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   609                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   610                      CAN_DL = (uint8)(DataOffset + SduInfo.SduLength);
	mov	d13,d0
.L113:
.L106:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   611                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   612              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   613  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   614              SduDataPtr = PduInfoPtr->SduDataPtr;
	ld.a	a15,[a12]
.L943:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   616              if(Connection->AddressFormatId != CANTP_STANDARD)
	ld.bu	d15,[a13]3
.L1475:
	jeq	d15,#0,.L114
.L1476:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   617              {   /* Step3: TRACE[SWS_CanTp_00281] if Addressing is mixed or extended then assemble Addressing byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   618                  *SduDataPtr = Connection->Address;
	ld.bu	d15,[a13]2
.L1477:
	st.b	[a15],d15
.L1478:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   619                  SduDataPtr++;
	add.a	a15,#1
.L114:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   620              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   621  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   622              *SduDataPtr = (CANTP_CF_HIGHNIBBLE | SN); /* Step4: assemble Sequence number */
	or	d15,d10,#32
.L1479:
	st.b	[a15],d15
.L1480:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   623              PduInfoPtr->SduLength = CAN_DL;
	st.h	[a12]4,d13
.L1481:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   624              Status = E_OK;
	mov	d8,#0
.L105:
.L101:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   625          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   626      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   627  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   628      return Status;
	mov	d2,d8
.L944:
	j	.L115

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   629  }
.L115:
	ret
.L554:
	
__CanTp_Prv_CreateTxConsecutiveFrame_function_end:
	.size	CanTp_Prv_CreateTxConsecutiveFrame,__CanTp_Prv_CreateTxConsecutiveFrame_function_end-CanTp_Prv_CreateTxConsecutiveFrame
.L302:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_CreateTxFlowControlFrame',code,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_CreateTxFlowControlFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   632   Function name    : CanTp_Prv_CreateTxFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   633   Syntax           : CanTp_Prv_CreateTxFlowControlFrame(ChannelId, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   634   Description      : TRACE[SWS_CanTp_00282] Library function to assemble flow control Frame in TriggerTransmit function
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   635                      from CanIf. TxPduId is same as Channel Id (also TxFcNpduId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   636   Parameter        : CanTp_ChannelIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   637   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   638  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   639  static Std_ReturnType CanTp_Prv_CreateTxFlowControlFrame(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr)
; Function CanTp_Prv_CreateTxFlowControlFrame
.L240:
CanTp_Prv_CreateTxFlowControlFrame:	.type	func
	mov.aa	a5,a4
.L945:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   640  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   641  	uint8 *SduDataPtr = PduInfoPtr->SduDataPtr;
	ld.a	a6,[a5]
.L946:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   642      uint8 PaddingOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   643  	PduLengthType SduLength = CANTP_FC_PCISIZE;
	mov	d3,#3
.L947:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   644      CanTp_ChannelPtrType Channel = CanTp_Channel + ChannelId;
	mul	d15,d4,#20
.L1486:
	movh.a	a2,#@his(CanTp_Channel)
	lea	a2,[a2]@los(CanTp_Channel)
.L1487:
	addsc.a	a7,a2,d15,#0
.L948:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   645      Std_ReturnType Status = E_NOT_OK;
	mov	d2,#1
.L949:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   646      uint8 BS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   647      uint8 STMin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   648      uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   649      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   650  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   651  	PduInfoPtr->SduLength = 0;
	mov	d15,#0
.L1488:
	st.h	[a5]4,d15
.L1489:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   652  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   653      if(CanTp_SubState[ChannelId] == CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION)
	movh.a	a2,#@his(CanTp_SubState)
	lea	a2,[a2]@los(CanTp_SubState)
.L1490:
	addsc.a	a2,a2,d4,#0
	ld.bu	d0,[a2]
.L1491:
	jne	d0,#7,.L116
.L1492:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   655          Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	ld.bu	d0,[a7]6
.L1493:
	movh.a	a2,#@his(CanTp_CfgPtr)
	lea	a2,[a2]@los(CanTp_CfgPtr)
	ld.a	a15,[a2]
.L1494:
	ld.a	a2,[a15]16
.L1495:
	mul	d15,d0,#12
	addsc.a	a12,a2,d15,#0
.L950:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   656          STMin = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_STMIN);
	mov	d1,#0
.L595:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);      (inlined)
	ne	d1,d1,#0
.L951:
	j	.L118
.L117:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
	mov	d1,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);      (inlined)
.L118:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
	ld.a	a4,[a15]24
.L952:
	mul	d15,d0,#12
	addsc.a	a15,a2,d15,#0
	ld.bu	d15,[a15]4
	addsc.a	a2,a4,d15,#2
	addsc.a	a2,a2,d1,#0
	ld.bu	d0,[a2]
.L1496:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);      (inlined)
	j	.L119

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }      (inlined)
.L119:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   657          FlowStatus = Channel->FlowStatus;
	ld.bu	d1,[a7]3
.L954:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   658          BS = Channel->BS;
	ld.bu	d2,[a7]5
.L953:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   659  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   660          if(Connection->AddressFormatId != CANTP_STANDARD)
	ld.bu	d15,[a12]2
.L1497:
	jeq	d15,#0,.L120
.L1498:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   661          {   /* Step1: TRACE[SWS_CanTp_00281][SWS_CanTp_00283] addressing byte for extended or mixed addressing. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   662              *SduDataPtr = Connection->Address;
	ld.bu	d15,[a12]1
.L1499:
	st.b	[a6],d15
.L1500:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   663              SduDataPtr++;
	add.a	a6,#1
.L1501:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   664              SduLength++;
	add	d3,#1
.L120:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   665          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   666  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   667          *SduDataPtr =  (uint8)(CANTP_FC_HIGHNIBBLE | FlowStatus);
	or	d15,d1,#48
.L1502:
	st.b	[a6],d15
.L1503:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   668          SduDataPtr++;
	add.a	a6,#1
.L1504:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   669  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   670          /* Step2: assemble block size from configuration */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   671          *SduDataPtr = BS;
	st.b	[a6],d2
.L1505:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   672  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   673          SduDataPtr++;
	add.a	a6,#1
.L1506:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   674          /* Step3: assemble STMin value from configuration */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   675          *SduDataPtr = STMin;
	st.b	[a6],d0
.L1507:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   676          SduDataPtr++;
	add.a	a6,#1
.L1508:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   677  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   678          if(CanTp_Prv_GetBit(Connection->BitFields, CANTP_PADDINGON)) /* Step4: assemble padding bytes if enabled. */
	ld.bu	d15,[a12]
.L602:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#8
	ne	d15,d15,#0
.L1509:
	j	.L122
.L121:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L122:
	j	.L123

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L123:
	jeq	d15,#0,.L124
.L603:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   679          {   /* TRACE[SWS_CanTp_00351] If the data length which shall be transmitted via CanIf_Transmit() does not */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   680              PaddingOffset = CanTp_AddressSize[Connection->AddressFormatId] + CANTP_FC_PCISIZE;
	ld.bu	d15,[a12]2
.L1510:
	movh.a	a15,#@his(CanTp_AddressSize)
	lea	a15,[a15]@los(CanTp_AddressSize)
.L1511:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1512:
	add	d15,#3
	extr.u	d15,d15,#0,#8
.L955:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   681              /* TRACE[SWS_CanTp_00059][SWS_CanTp_00347] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   682              CanTp_Prv_ArrayInit(SduDataPtr, CANTP_DEFAULT_CAN_DL - PaddingOffset, CANTP_PADDING_BYTE);
	rsub	d0,d15,#8
.L1513:
	mov	d1,#0
.L606:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
	mov	d15,#0
.L956:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
	j	.L125
.L126:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
	addsc.a	a15,a6,d15,#0
.L1514:
	st.b	[a15],d1
.L1515:
	add	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)      (inlined)
.L125:
	jlt.u	d15,d0,.L126
.L607:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   683              SduLength = CANTP_DEFAULT_CAN_DL;
	mov	d3,#8
.L124:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   684          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   685  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   686          PduInfoPtr->SduLength = SduLength;
	st.h	[a5]4,d3
.L1516:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   687          Status = E_OK;
	mov	d2,#0
.L116:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   689  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   690      return Status;
	j	.L127

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   691  }
.L127:
	ret
.L581:
	
__CanTp_Prv_CreateTxFlowControlFrame_function_end:
	.size	CanTp_Prv_CreateTxFlowControlFrame,__CanTp_Prv_CreateTxFlowControlFrame_function_end-CanTp_Prv_CreateTxFlowControlFrame
.L307:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_TxSendConsecutiveFrame',code,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_TxSendConsecutiveFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   692  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   693  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   694   Function name    : CanTp_Prv_TxSendConsecutiveFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   695   Syntax           : CanTp_Prv_TxSendConsecutiveFrame(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   696   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   697                      CANTP_TX_SEND_CONSECUTIVE_FRAME.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   698   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   699   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   700  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   701  static void CanTp_Prv_TxSendConsecutiveFrame(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_TxSendConsecutiveFrame
.L242:
CanTp_Prv_TxSendConsecutiveFrame:	.type	func
	sub.a	a10,#112
.L957:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   702  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   703  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   704      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   705  	PduInfoType PduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   706      CanTp_ChannelIdType TxConfirmationChannel;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   707      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   708  	uint8 MaxLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   709  	CanTp_TxContextType Context;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   710      CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	movh.a	a12,#@his(CanTp_Channel)
	lea	a12,[a12]@los(CanTp_Channel)
.L1521:
	mul	d15,d4,#20
	addsc.a	a13,a12,d15,#0
.L959:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   711  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   712      Context.ChannelId = ChannelId;
	st.b	[a10]19,d4
.L1522:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   713      Context.PduRApiId = CANTP_TX_PDUR_CONFIRMATION;
	mov	d15,#0
.L1523:
	st.b	[a10]16,d15
.L1524:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   714  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   715      Context.Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a13]16
.L1525:
	st.h	[a10]28,d15
.L1526:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   716  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   717      CanTp_GetElapsedValue(&(Context.Value), &(Context.ElapsedValue));
	lea	a2,[a10]28
.L1527:
	lea	a4,[a10]30
.L623:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]28
.L960:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a15,#@his(CanTp_MainFunctionTicks)
	lea	a15,[a15]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a15]0
.L1528:
	st.h	[a2],d0
.L1529:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]28
.L1530:
	sub	d0,d15
.L1531:
	st.h	[a4],d0
.L624:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   718  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   719      SduInfo.SduLength = 0;
	mov	d15,#0
.L961:
	st.h	[a10]4,d15
.L1532:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   720      SduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1533:
	st.a	[a10],a15
.L1534:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   721  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   722      PduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1535:
	st.a	[a10]8,a15
.L1536:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   723  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   724  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   725  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   726  	Connection = (CanTp_SubState[ChannelId] == CANTP_TX_SEND_CONSECUTIVE_FRAME) ?
	movh.a	a14,#@his(CanTp_SubState)
	lea	a14,[a14]@los(CanTp_SubState)
.L1537:
	addsc.a	a15,a14,d4,#0
	st.a	[a10]108,a15
	ld.bu	d15,[a15]
.L1538:
	jne	d15,#4,.L128
.L1539:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   727  	             (CanTp_CfgPtr->TxSdu + Channel->ActiveSduId) : NULL_PTR;
	ld.bu	d15,[a13]6
.L1540:
	mul	d15,d15,#12
.L1541:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1542:
	ld.a	a15,[a15]12
.L1543:
	addsc.a	a2,a15,d15,#0
.L962:
	j	.L129
.L128:
	mov.a	a2,#0
.L129:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   728  	TxConfirmationChannel = (Connection != NULL_PTR) ? CanTp_TxConfirmationChannel[Connection->TxConfirmationId] : 0;
	jz.a	a2,.L130
.L1544:
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L1545:
	ld.hu	d15,[a2]6
.L1546:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L963:
	j	.L131
.L130:
	mov	d15,#0
.L131:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   729  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   730  	if(TxConfirmationChannel == CANTP_INVALID_CHANNEL) /* It means confirmation is not pending for this Pdu. */
	jne	d15,#2,.L132
.L1547:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   731  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   732          Context.PduRPduHandleId = Connection->PduRPduHandleId;
	ld.hu	d15,[a2]10
.L964:
	st.h	[a10]24,d15
.L1548:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   733          Context.PduId = Connection->TxPduId;
	ld.hu	d15,[a2]8
.L1549:
	st.h	[a10]22,d15
.L1550:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   734          Context.TxConfirmationId = Connection->TxConfirmationId;
	ld.hu	d15,[a2]6
.L1551:
	st.h	[a10]20,d15
.L1552:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   735          CAN_DL = CanTp_Prv_GetTxDl(Connection);
	ld.bu	d0,[a2]
.L965:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   736          PduInfo.SduLength = CAN_DL;
	st.h	[a10]12,d0
.L1553:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   737          Context.CsTicks = CanTp_Prv_GetCfgCsCrTicks(Connection);
	ld.bu	d15,[a2]4
	mul	d15,d15,#6
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
	ld.a	a15,[a15]20
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]4
.L1554:
	st.h	[a10]32,d15
.L1555:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   738          Context.BitFields = Connection->BitFields;
	ld.bu	d15,[a2]1
.L1556:
	st.b	[a10]18,d15
.L1557:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   739  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   740          MaxLength = CAN_DL - CANTP_CF_PCISIZE - CanTp_AddressSize[Connection->AddressFormatId];
	ld.bu	d15,[a2]3
.L1558:
	movh.a	a15,#@his(CanTp_AddressSize)
	lea	a15,[a15]@los(CanTp_AddressSize)
.L1559:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1560:
	sub	d0,d15
.L966:
	add	d0,#-1
.L1561:
	extr.u	d15,d0,#0,#8
.L967:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   741          Context.PayLoadLength = (Channel->SduLengthRemaining < MaxLength) ?
	ld.hu	d0,[a13]12
.L1562:
	jge.u	d0,d15,.L133
.L1563:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   742                                  (uint8)(Channel->SduLengthRemaining) : MaxLength;
	extr.u	d15,d0,#0,#8
.L1564:
	j	.L134
.L133:
.L134:
	st.b	[a10]17,d15
.L1565:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   743  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   744          CanTp_Prv_GetTxBuffer(&Context, &SduInfo);
	lea	a4,[a10]16
.L1566:
	lea	a5,[a10]0
	call	CanTp_Prv_GetTxBuffer
.L958:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   745  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   746          if((Channel->TxBufferStatus == CANTP_BUFFER_AVAILABLE) &&
	ld.bu	d15,[a13]
.L968:
	jne	d15,#2,.L135
.L1567:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   747             ((Context.ElapsedValue >= Channel->STminTicks) || (Channel->PciId != CANTP_NPCI_CF)))
	ld.hu	d15,[a10]30
.L1568:
	ld.hu	d0,[a13]18
.L1569:
	jge.u	d15,d0,.L136
.L1570:
	ld.bu	d15,[a13]2
.L1571:
	jeq	d15,#4,.L137
.L136:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   748          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   749              Channel->PciId = CANTP_NPCI_CF;
	mov	d15,#4
.L1572:
	st.b	[a13]2,d15
.L1573:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   750              Channel->InitialTicks = Context.Value;
	ld.hu	d15,[a10]28
.L1574:
	st.h	[a13]16,d15
.L1575:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   751              CanTp_SubState[ChannelId] = CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION;
	mov	d15,#2
.L1576:
	ld.a	a15,[a10]108
	st.b	[a15],d15
.L1577:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   752              CanTp_Prv_CanIfTransmit(&Context, &PduInfo);
	lea	a15,[a10]8
.L629:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
	ld.hu	d15,[a10]12
.L1578:
	st.h	[a10]40,d15
.L1579:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
	ld.bu	d15,[a10]18
.L642:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#32
	ne	d15,d15,#0
.L1580:
	j	.L139
.L138:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L139:
	j	.L140

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L140:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
	jeq	d15,#0,.L141
.L643:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
	ld.a	a15,[a15]
.L1581:
	st.a	[a10]36,a15
.L1582:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
	mov	d15,#0
.L969:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;      (inlined)
	j	.L142

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
.L141:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
	lea	a15,[a10]44
.L1583:
	st.a	[a10]36,a15
.L1584:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
	ld.bu	d4,[a10]19
	mul	d15,d4,#20
	addsc.a	a15,a12,d15,#0
	ld.bu	d15,[a15]2
	movh.a	a15,#@his(CanTp_PciFrameType)
	lea	a15,[a15]@los(CanTp_PciFrameType)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_CreateFrame)
	lea	a15,[a15]@los(CanTp_CreateFrame)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	lea	a4,[a10]36
	calli	a15
.L1585:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
	ne	d15,d2,#0
.L970:
	j	.L144
.L143:
	mov	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
.L144:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else      (inlined)
.L142:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
	jne	d15,#0,.L145
.L1586:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
	ld.bu	d0,[a10]19
.L1587:
	movh.a	a12,#@his(CanTp_TxConfirmationChannel)
	lea	a12,[a12]@los(CanTp_TxConfirmationChannel)
.L1588:
	ld.hu	d15,[a10]20
.L971:
	addsc.a	a15,a12,d15,#0
.L1589:
	st.b	[a15],d0
.L1590:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
	ld.hu	d4,[a10]22
.L1591:
	lea	a4,[a10]36
	call	CanIf_Transmit
.L1592:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
	jeq	d2,#0,.L146
.L630:
	lea	a15,[a10]16
.L637:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ld.hu	d4,[a10]24
	mov	d5,#1
	calli	a15
.L1593:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1594:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a10]19
.L1595:
	addsc.a	a15,a14,d15,#0
.L1596:
	mov	d15,#0
.L1597:
	st.b	[a15],d15
.L1598:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a10]20
.L1599:
	addsc.a	a15,a12,d15,#0
.L1600:
	mov	d15,#2
.L1601:
	st.b	[a15],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
.L146:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
.L145:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   753              Channel->TxBufferStatus = CANTP_BUFFER_NOT_ASKED;
	mov	d15,#0
.L1602:
	st.b	[a13],d15
.L137:
.L135:
.L132:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   754          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   755  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   756  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   757  	SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   758  }
	ret
.L612:
	
__CanTp_Prv_TxSendConsecutiveFrame_function_end:
	.size	CanTp_Prv_TxSendConsecutiveFrame,__CanTp_Prv_TxSendConsecutiveFrame_function_end-CanTp_Prv_TxSendConsecutiveFrame
.L312:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_TxWaitForFlowControlFrame',code,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_TxWaitForFlowControlFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   759  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   760  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   761   Function name    : CanTp_Prv_TxWaitForFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   762   Syntax           : CanTp_Prv_TxWaitForFlowControlFrame(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   763   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   764                      CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   765   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   766   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   767  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   768  static void CanTp_Prv_TxWaitForFlowControlFrame(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_TxWaitForFlowControlFrame
.L244:
CanTp_Prv_TxWaitForFlowControlFrame:	.type	func
	sub.a	a10,#8
.L972:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   769  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   770  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d4,#20
.L1607:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L1608:
	addsc.a	a2,a15,d15,#0
.L974:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   771      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   772      CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a2]16
.L1609:
	st.h	[a10],d15
.L1610:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   773      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   774  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   775      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1611:
	lea	a4,[a10]2
.L652:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L976:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a5]0
.L1612:
	st.h	[a15],d0
.L1613:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1614:
	sub	d0,d15
.L1615:
	st.h	[a4],d0
.L653:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   776  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   777  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   778  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   779      if(CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1616:
	addsc.a	a12,a15,d4,#0
	ld.bu	d15,[a12]
.L977:
	jne	d15,#3,.L147
.L1617:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   780      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   781          Connection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1618:
	ld.bu	d15,[a2]6
.L1619:
	mul	d15,d15,#12
.L1620:
	ld.a	a2,[a15]12
.L975:
	addsc.a	a2,a2,d15,#0
.L978:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   782          if(ElapsedValue > CanTp_Prv_GetCfgBsBrTicks(Connection)) /* TRACE[SWS_CanTp_00315] */
	ld.hu	d0,[a10]2
.L1621:
	ld.bu	d15,[a2]4
	mul	d15,d15,#6
	ld.a	a15,[a15]20
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]2
.L1622:
	jge.u	d15,d0,.L148
.L1623:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   783          { /* TRACE[SWS_CanTp_00316][SWS_CanTp_00229][SWS_CanTp_00205][SWS_CanTp_00205] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   784              CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]
	ld.hu	d4,[a2]10
.L973:
	mov	d5,#1
	calli	a15
.L979:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   785              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_TX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#208
	call	Det_ReportRuntimeError
.L1624:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   786              CanTp_SubState[ChannelId] = CANTP_IDLE;
	mov	d15,#0
.L1625:
	st.b	[a12],d15
.L148:
.L147:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   787          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   788      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   789  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   790      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   791  }
	ret
.L646:
	
__CanTp_Prv_TxWaitForFlowControlFrame_function_end:
	.size	CanTp_Prv_TxWaitForFlowControlFrame,__CanTp_Prv_TxWaitForFlowControlFrame_function_end-CanTp_Prv_TxWaitForFlowControlFrame
.L317:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_TxWaitForTransmitConfirmation',code,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.text.CanTp_Prv.CanTp_Prv_TxWaitForTransmitConfirmation'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   792  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   793  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   794   Function name    : CanTp_Prv_TxWaitForTransmitConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   795   Syntax           : CanTp_Prv_TxWaitForTransmitConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   796   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   797                      CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   798   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   799   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   800  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   801  static void CanTp_Prv_TxWaitForTransmitConfirmation(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_TxWaitForTransmitConfirmation
.L246:
CanTp_Prv_TxWaitForTransmitConfirmation:	.type	func
	sub.a	a10,#8
.L980:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   802  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   803  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d4,#20
.L1630:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L1631:
	addsc.a	a2,a15,d15,#0
.L982:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   804      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   805      CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a2]16
.L1632:
	st.h	[a10],d15
.L1633:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   806      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   807  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   808      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1634:
	lea	a4,[a10]2
.L663:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L984:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a5]0
.L1635:
	st.h	[a15],d0
.L1636:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1637:
	sub	d0,d15
.L1638:
	st.h	[a4],d0
.L664:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   809  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   810  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   811  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   812      if(CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1639:
	addsc.a	a12,a15,d4,#0
	ld.bu	d15,[a12]
.L985:
	jne	d15,#2,.L149
.L1640:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   813      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   814          Connection = CanTp_CfgPtr->TxSdu + Channel->ActiveSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1641:
	ld.bu	d15,[a2]6
.L1642:
	mul	d15,d15,#12
.L1643:
	ld.a	a2,[a15]12
.L983:
	addsc.a	a13,a2,d15,#0
.L986:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   815          if(ElapsedValue > CanTp_Prv_GetCfgAsArTicks(Connection))
	ld.hu	d0,[a10]2
.L1644:
	ld.bu	d15,[a13]4
	mul	d15,d15,#6
	ld.a	a2,[a15]20
	addsc.a	a15,a2,d15,#0
	ld.hu	d15,[a15]0
.L1645:
	jge.u	d15,d0,.L150
.L1646:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   816          {   /* TRACE[SWS_CanTp_00310][SWS_CanTp_00075][SWS_CanTp_00229][SWS_CanTp_00205] In case of N_As timeout Stop
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   817                 connection  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   818              CanTp_Prv_PduRConfirmation(CANTP_TX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]
	ld.hu	d4,[a13]10
.L981:
	mov	d5,#1
	calli	a15
.L1647:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   819              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_TX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#208
	call	Det_ReportRuntimeError
.L1648:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   820              /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   821              CanTp_TxConfirmationChannel[Connection->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a13]6
.L1649:
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L1650:
	addsc.a	a15,a15,d15,#0
.L1651:
	mov	d15,#2
.L1652:
	st.b	[a15],d15
.L1653:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   822              CanTp_SubState[ChannelId] = CANTP_IDLE;
	mov	d15,#0
.L1654:
	st.b	[a12],d15
.L150:
.L149:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   823          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   824      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   825  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   826      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   827  }
	ret
.L657:
	
__CanTp_Prv_TxWaitForTransmitConfirmation_function_end:
	.size	CanTp_Prv_TxWaitForTransmitConfirmation,__CanTp_Prv_TxWaitForTransmitConfirmation_function_end-CanTp_Prv_TxWaitForTransmitConfirmation
.L322:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_TxTransmissionRequestAccepted',code,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.text.CanTp_Prv.CanTp_Prv_TxTransmissionRequestAccepted'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   828  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   829  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   830   Function name    : CanTp_Prv_TxTransmissionRequestAccepted
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   831   Syntax           : CanTp_Prv_TxTransmissionRequestAccepted(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   832   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   833                      CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   834   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   835   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   836  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   837  static void CanTp_Prv_TxTransmissionRequestAccepted(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_TxTransmissionRequestAccepted
.L248:
CanTp_Prv_TxTransmissionRequestAccepted:	.type	func
	sub.a	a10,#112
.L987:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   838  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   839  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   840  	uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   841      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   842  	PduInfoType PduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   843      CanTp_ChannelIdType TxConfirmationChannel;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   844  	CanTp_ChannelType *Channel = &CanTp_Channel[ChannelId];
	movh.a	a12,#@his(CanTp_Channel)
	lea	a12,[a12]@los(CanTp_Channel)
.L1659:
	mul	d15,d4,#20
	addsc.a	a13,a12,d15,#0
.L989:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   845      const CanTp_TxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   846      CanTp_TxContextType Context;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   847  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   848      Context.ChannelId = ChannelId;
	st.b	[a10]19,d4
.L1660:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   849      Context.PduRApiId = CANTP_TX_PDUR_CONFIRMATION;
	mov	d15,#0
.L1661:
	st.b	[a10]16,d15
.L1662:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   850  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   851      Context.Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a13]16
.L1663:
	st.h	[a10]28,d15
.L1664:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   852  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   853      CanTp_GetElapsedValue(&(Context.Value), &(Context.ElapsedValue));
	lea	a2,[a10]28
.L1665:
	lea	a4,[a10]30
.L678:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]28
.L990:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a15,#@his(CanTp_MainFunctionTicks)
	lea	a15,[a15]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a15]0
.L1666:
	st.h	[a2],d0
.L1667:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]28
.L1668:
	sub	d0,d15
.L1669:
	st.h	[a4],d0
.L679:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   854  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   855  	SduInfo.SduLength = 0;
	mov	d15,#0
.L991:
	st.h	[a10]4,d15
.L1670:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   856  	SduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1671:
	st.a	[a10],a15
.L1672:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   857  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   858      PduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1673:
	st.a	[a10]8,a15
.L1674:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   859  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   860      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   861  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   862      Connection = (CanTp_SubState[ChannelId] == CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED) ?
	movh.a	a14,#@his(CanTp_SubState)
	lea	a14,[a14]@los(CanTp_SubState)
.L1675:
	addsc.a	a15,a14,d4,#0
	st.a	[a10]108,a15
	ld.bu	d15,[a15]
.L1676:
	jne	d15,#1,.L151
.L1677:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   863                   (CanTp_CfgPtr->TxSdu + Channel->ActiveSduId) : NULL_PTR;
	ld.bu	d15,[a13]6
.L1678:
	mul	d15,d15,#12
.L1679:
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1680:
	ld.a	a15,[a15]12
.L1681:
	addsc.a	a4,a15,d15,#0
.L992:
	j	.L152
.L151:
	mov.a	a4,#0
.L152:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   864      TxConfirmationChannel = (Connection != NULL_PTR) ? CanTp_TxConfirmationChannel[Connection->TxConfirmationId] : 0;
	jz.a	a4,.L153
.L1682:
	movh.a	a2,#@his(CanTp_TxConfirmationChannel)
	lea	a2,[a2]@los(CanTp_TxConfirmationChannel)
.L1683:
	ld.hu	d15,[a4]6
.L1684:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L994:
	j	.L154
.L153:
	mov	d15,#0
.L154:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   865  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   866      if(TxConfirmationChannel == CANTP_INVALID_CHANNEL) /* It means confirmation is not pending for this Pdu. */
	jne	d15,#2,.L155
.L1685:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   867      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   868          Context.PduRPduHandleId = Connection->PduRPduHandleId;
	ld.hu	d15,[a4]10
.L995:
	st.h	[a10]24,d15
.L1686:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   869          Context.PduId = Connection->TxPduId;
	ld.hu	d15,[a4]8
.L1687:
	st.h	[a10]22,d15
.L1688:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   870          Context.TxConfirmationId = Connection->TxConfirmationId;
	ld.hu	d15,[a4]6
.L1689:
	st.h	[a10]20,d15
.L1690:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   871          Channel->BlockCfsRemaining = 0;
	mov	d15,#0
.L1691:
	st.h	[a13]10,d15
.L1692:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   872          Channel->SduLengthRemaining = Channel->SduLength;
	ld.hu	d15,[a13]14
.L1693:
	st.h	[a13]12,d15
.L1694:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   873          Channel->SN = 1;
	mov	d15,#1
.L1695:
	st.b	[a13]4,d15
.L1696:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   874  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   875          DataOffset = CanTp_AddressSize[Connection->AddressFormatId] + CanTp_PciSize[Channel->PciId];
	ld.bu	d15,[a4]3
.L1697:
	movh.a	a2,#@his(CanTp_AddressSize)
	lea	a2,[a2]@los(CanTp_AddressSize)
.L1698:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
.L1699:
	ld.bu	d15,[a13]2
.L1700:
	movh.a	a2,#@his(CanTp_PciSize)
	lea	a2,[a2]@los(CanTp_PciSize)
.L1701:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1702:
	add	d0,d15
	extr.u	d0,d0,#0,#8
.L996:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   876          CAN_DL = CanTp_Prv_GetTxDl(Connection);
	ld.bu	d15,[a4]
.L997:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   877          PduInfo.SduLength = CAN_DL;
	st.h	[a10]12,d15
.L1703:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   878          Context.PayLoadLength = (Channel->PciId >= CANTP_NPCI_FFCAN) ? (CAN_DL - DataOffset) :
	ld.bu	d1,[a13]2
.L1704:
	jlt.u	d1,#2,.L156
.L1705:
	sub	d15,d0
.L998:
	j	.L157
.L156:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   879                                                                         (uint8)(Channel->SduLength);
	ld.hu	d15,[a13]14
.L999:
	extr.u	d15,d15,#0,#8
.L157:
	st.b	[a10]17,d15
.L1706:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   880          Context.CsTicks = CanTp_Prv_GetCfgCsCrTicks(Connection);
	ld.bu	d15,[a4]4
	mul	d15,d15,#6
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
	ld.a	a15,[a15]20
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]4
.L1707:
	st.h	[a10]32,d15
.L1708:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   881          Context.BitFields = Connection->BitFields;
	ld.bu	d15,[a4]1
.L1709:
	st.b	[a10]18,d15
.L1710:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   882  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   883          CanTp_Prv_GetTxBuffer(&Context, &SduInfo);
	lea	a4,[a10]16
.L993:
	lea	a5,[a10]0
	call	CanTp_Prv_GetTxBuffer
.L988:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   884  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   885          if(Channel->TxBufferStatus == CANTP_BUFFER_AVAILABLE)
	ld.bu	d15,[a13]
.L1711:
	jne	d15,#2,.L158
.L1712:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   886          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   887              Channel->InitialTicks = Context.Value;
	ld.hu	d15,[a10]28
.L1713:
	st.h	[a13]16,d15
.L1714:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   888              CanTp_SubState[ChannelId] = CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION;
	mov	d15,#2
.L1715:
	ld.a	a15,[a10]108
	st.b	[a15],d15
.L1716:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   889              CanTp_Prv_CanIfTransmit(&Context, &PduInfo);
	lea	a15,[a10]8
.L683:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
	ld.hu	d15,[a10]12
.L1717:
	st.h	[a10]40,d15
.L1718:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
	ld.bu	d15,[a10]18
.L692:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#32
	ne	d15,d15,#0
.L1719:
	j	.L160
.L159:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L160:
	j	.L161

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L161:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
	jeq	d15,#0,.L162
.L693:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
	ld.a	a15,[a15]
.L1720:
	st.a	[a10]36,a15
.L1721:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
	mov	d15,#0
.L1000:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;      (inlined)
	j	.L163

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
.L162:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
	lea	a15,[a10]44
.L1722:
	st.a	[a10]36,a15
.L1723:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
	ld.bu	d4,[a10]19
	mul	d15,d4,#20
	addsc.a	a15,a12,d15,#0
	ld.bu	d15,[a15]2
	movh.a	a15,#@his(CanTp_PciFrameType)
	lea	a15,[a15]@los(CanTp_PciFrameType)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_CreateFrame)
	lea	a15,[a15]@los(CanTp_CreateFrame)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	lea	a4,[a10]36
	calli	a15
.L1724:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
	ne	d15,d2,#0
.L1001:
	j	.L165
.L164:
	mov	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
.L165:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else      (inlined)
.L163:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
	jne	d15,#0,.L166
.L1725:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
	ld.bu	d0,[a10]19
.L1726:
	movh.a	a12,#@his(CanTp_TxConfirmationChannel)
	lea	a12,[a12]@los(CanTp_TxConfirmationChannel)
.L1727:
	ld.hu	d15,[a10]20
.L1002:
	addsc.a	a15,a12,d15,#0
.L1728:
	st.b	[a15],d0
.L1729:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
	ld.hu	d4,[a10]22
.L1730:
	lea	a4,[a10]36
	call	CanIf_Transmit
.L1731:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
	jeq	d2,#0,.L167
.L684:
	lea	a15,[a10]16
.L688:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ld.hu	d4,[a10]24
	mov	d5,#1
	calli	a15
.L1732:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1733:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a10]19
.L1734:
	addsc.a	a15,a14,d15,#0
.L1735:
	mov	d15,#0
.L1736:
	st.b	[a15],d15
.L1737:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a10]20
.L1738:
	addsc.a	a15,a12,d15,#0
.L1739:
	mov	d15,#2
.L1740:
	st.b	[a15],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
.L167:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
.L166:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   890              Channel->TxBufferStatus = CANTP_BUFFER_NOT_ASKED;
	mov	d15,#0
.L1741:
	st.b	[a13],d15
.L158:
.L155:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   891          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   892      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   893  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   894      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   895  }
	ret
.L668:
	
__CanTp_Prv_TxTransmissionRequestAccepted_function_end:
	.size	CanTp_Prv_TxTransmissionRequestAccepted,__CanTp_Prv_TxTransmissionRequestAccepted_function_end-CanTp_Prv_TxTransmissionRequestAccepted
.L327:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_Idle',code,cluster('CanTp_Prv_Idle')
	.sect	'.text.CanTp_Prv.CanTp_Prv_Idle'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   896  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   897  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   898   Function name    : CanTp_Prv_Idle
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   899   Syntax           : CanTp_Prv_Idle(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   900   Description      : Dummy State function to handle for CanTp Channel w.r.t. State CANTP_IDLE.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   901   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   902   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   903  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   904  static void CanTp_Prv_Idle(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_Idle
.L250:
CanTp_Prv_Idle:	.type	func

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   905  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   906  	(void)ChannelId; /* Great to see you here. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   907  }
	ret
.L696:
	
__CanTp_Prv_Idle_function_end:
	.size	CanTp_Prv_Idle,__CanTp_Prv_Idle_function_end-CanTp_Prv_Idle
.L332:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_RxReceptionRequestAccepted',code,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.text.CanTp_Prv.CanTp_Prv_RxReceptionRequestAccepted'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   908  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   909  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   910   Function name    : CanTp_Prv_RxReceptionRequestAccepted
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   911   Syntax           : CanTp_Prv_RxReceptionRequestAccepted(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   912   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   913                      CANTP_RX_RECEPTION_REQUEST_ACCEPTED.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   914   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   915   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   916  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   917  static void CanTp_Prv_RxReceptionRequestAccepted(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_RxReceptionRequestAccepted
.L252:
CanTp_Prv_RxReceptionRequestAccepted:	.type	func
	sub.a	a10,#8
.L1003:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   918  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   919  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d4,#20
.L1750:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L1751:
	addsc.a	a2,a15,d15,#0
.L1005:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   920      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   921      CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a2]16
.L1752:
	st.h	[a10],d15
.L1753:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   922      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   923  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   924      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1754:
	lea	a4,[a10]2
.L704:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L1007:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a5]0
.L1755:
	st.h	[a15],d0
.L1756:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1757:
	sub	d0,d15
.L1758:
	st.h	[a4],d0
.L705:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   925  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   926  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   927  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   928      if(CanTp_SubState[ChannelId] == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1759:
	addsc.a	a12,a15,d4,#0
	ld.bu	d15,[a12]
.L1008:
	jne	d15,#5,.L168
.L1760:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   929      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   930          Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1761:
	ld.bu	d15,[a2]6
.L1762:
	mul	d15,d15,#12
.L1763:
	ld.a	a2,[a15]16
.L1006:
	addsc.a	a2,a2,d15,#0
.L1009:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   931          if(ElapsedValue > CanTp_Prv_GetCfgBsBrTicks(Connection))
	ld.hu	d0,[a10]2
.L1764:
	ld.bu	d15,[a2]3
	mul	d15,d15,#6
	ld.a	a15,[a15]20
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]2
.L1765:
	jge.u	d15,d0,.L169
.L1766:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   932          {  /* TRACE[SWS_CanTp_00166][SWS_CanTp_00229] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   933              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a2]10
.L1004:
	mov	d5,#1
	calli	a15
.L1010:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   934              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_RX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#192
	call	Det_ReportRuntimeError
.L1767:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   935              CanTp_SubState[ChannelId] = CANTP_IDLE;
	mov	d15,#0
.L1768:
	st.b	[a12],d15
.L169:
.L168:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   936          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   937      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   938  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   939      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   940  }
	ret
.L698:
	
__CanTp_Prv_RxReceptionRequestAccepted_function_end:
	.size	CanTp_Prv_RxReceptionRequestAccepted,__CanTp_Prv_RxReceptionRequestAccepted_function_end-CanTp_Prv_RxReceptionRequestAccepted
.L337:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_RxSendFlowControlFrame',code,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_RxSendFlowControlFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   942  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   943   Function name    : CanTp_Prv_RxSendFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   944   Syntax           : CanTp_Prv_RxSendFlowControlFrame(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   945   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   946                      CANTP_RX_SEND_FC.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   947   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   948   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   949  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   950  static void CanTp_Prv_RxSendFlowControlFrame(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_RxSendFlowControlFrame
.L254:
CanTp_Prv_RxSendFlowControlFrame:	.type	func
	sub.a	a10,#112
.L1011:
	mov	d9,d4
.L1012:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   951  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   952  	PduInfoType PduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   953      PduInfoType SduInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   954      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   955      CanTp_ChannelIdType TxConfirmationChannel;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   956  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	movh.a	a12,#@his(CanTp_Channel)
	lea	a12,[a12]@los(CanTp_Channel)
.L1773:
	mul	d15,d9,#20
	addsc.a	a13,a12,d15,#0
.L1013:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   957      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   958  	CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a13]16
.L1774:
	st.h	[a10]18,d15
.L1775:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   959      boolean IsFcReady = (Channel->FlowStatus > CANTP_FC_WAIT) ? TRUE : FALSE;
	ld.bu	d15,[a13]3
.L1776:
	lt.u	d15,d15,#2
.L1777:
	mov	d8,#1
.L1014:
	cmov	d8,d15,#0
.L1778:
	j	.L171
.L170:
	mov	d8,#0
.L171:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   960      CanTp_TxContextType Context;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   961  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   962      Context.ChannelId = ChannelId;
	st.b	[a10]23,d9
.L1779:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   963      Context.PduRApiId = CANTP_RX_PDUR_CONFIRMATION;
	mov	d0,#1
.L1780:
	st.b	[a10]20,d0
.L1781:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   964  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   965      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a2,[a10]18
.L1782:
	lea	a4,[a10]16
.L720:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d0,[a10]18
.L1016:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a15,#@his(CanTp_MainFunctionTicks)
	lea	a15,[a15]@los(CanTp_MainFunctionTicks)
	ld.hu	d15,[a15]0
.L1783:
	st.h	[a2],d15
.L1784:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d15,[a10]18
.L1785:
	sub	d15,d0
.L1786:
	st.h	[a4],d15
.L721:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   966  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   967  	SduInfo.SduLength = 0;
	mov	d15,#0
.L1787:
	st.h	[a10]12,d15
.L1788:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   968  	SduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1789:
	st.a	[a10]8,a15
.L1790:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   969  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   970      PduInfo.SduLength = CANTP_DEFAULT_CAN_DL;
	mov	d15,#8
.L1791:
	st.h	[a10]4,d15
.L1792:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   971      PduInfo.SduDataPtr = NULL_PTR;
	mov.a	a15,#0
.L1793:
	st.a	[a10],a15
.L1794:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   972  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   973      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   974  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   975      Connection = (CanTp_SubState[ChannelId] == CANTP_RX_SEND_FC) ?
	movh.a	a14,#@his(CanTp_SubState)
	lea	a14,[a14]@los(CanTp_SubState)
.L1795:
	addsc.a	a15,a14,d9,#0
	ld.bu	d15,[a15]
.L1796:
	jne	d15,#6,.L172
.L1797:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   976                   (CanTp_CfgPtr->RxSdu + Channel->ActiveSduId) : NULL_PTR;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1798:
	ld.bu	d15,[a13]6
.L1799:
	mul	d15,d15,#12
.L1800:
	ld.a	a15,[a15]16
.L1801:
	addsc.a	a15,a15,d15,#0
.L1018:
	j	.L173
.L172:
	mov.a	a15,#0
.L173:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   977      TxConfirmationChannel = (Connection != NULL_PTR) ? CanTp_TxConfirmationChannel[Connection->TxConfirmationId] : 0;
	jz.a	a15,.L174
.L1802:
	movh.a	a2,#@his(CanTp_TxConfirmationChannel)
	lea	a2,[a2]@los(CanTp_TxConfirmationChannel)
.L1803:
	ld.hu	d15,[a15]6
.L1804:
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]
.L1019:
	j	.L175
.L174:
	mov	d15,#0
.L175:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   978  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   979      if(TxConfirmationChannel == CANTP_INVALID_CHANNEL) /* It means confirmation is not pending for this Pdu. */
	jne	d15,#2,.L176
.L1805:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   980      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   981          Channel->BlockCfsRemaining = 0;
	mov	d15,#0
.L1020:
	st.h	[a13]10,d15
.L1806:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   982          Context.PduRPduHandleId = Connection->PduRPduHandleId;
	ld.hu	d15,[a15]10
.L1807:
	st.h	[a10]28,d15
.L1808:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   983          Context.PduId = Connection->TxPduId;
	ld.hu	d15,[a15]8
.L1809:
	st.h	[a10]26,d15
.L1810:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   984          Context.TxConfirmationId = Connection->TxConfirmationId;
	ld.hu	d15,[a15]6
.L1811:
	st.h	[a10]24,d15
.L1812:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   985          Context.BitFields = Connection->BitFields;
	ld.bu	d15,[a15]
.L1813:
	st.b	[a10]22,d15
.L1814:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   986  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   987          if(Channel->FlowStatus != CANTP_FC_OVERFLOW)
	ld.bu	d15,[a13]3
.L1815:
	jeq	d15,#2,.L177
.L1816:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   988          {   /* TRACE[SWS_CanTp_00222] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   989              if(PduR_CanTpCopyRxData(Context.PduRPduHandleId, &SduInfo, &(Context.RemBufSize)) != BUFREQ_OK)
	ld.hu	d4,[a10]28
.L1015:
	lea	a4,[a10]8
.L1817:
	lea	a5,[a10]30
	call	PduR_CanTpCopyRxData
.L1017:
	jeq	d2,#0,.L178
.L1818:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   990              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   991                  CanTp_Prv_PduRConfirmation(Context.PduRApiId, Context.PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a10]20
	movh.a	a2,#@his(CanTp_PduRConfirmationApis)
	lea	a2,[a2]@los(CanTp_PduRConfirmationApis)
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
	ld.hu	d4,[a10]28
	mov	d5,#1
	calli	a2
.L1819:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   992                  CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1820:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   993                  CanTp_SubState[Context.ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a10]23
.L1821:
	addsc.a	a2,a14,d15,#0
.L1822:
	mov	d15,#0
.L1823:
	st.b	[a2],d15
.L1824:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   994                  IsFcReady = FALSE;
	mov	d8,#0
.L1825:
	j	.L179
.L178:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   995              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   996  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   997  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   998  				if(Channel->FlowStatus != CANTP_FC_CTS)
	ld.bu	d15,[a13]3
.L1826:
	jeq	d15,#0,.L180
.L1827:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	   999  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1000  					/* TRACE[SWS_CanTp_00325] Preparation for N_Br Timer if required. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1001  					CanTp_Prv_SetRxBlockInfo(ChannelId, Context.RemBufSize);
	ld.hu	d3,[a10]30
.L726:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   726  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   727          #if(CANTP_FC_DISABLE_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   728          if(CanTp_Prv_GetBit(CanTp_Prv_GetRxActiveBits(Context->ChannelId), CANTP_FC_DISABLED))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   729          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   730              if((CanTp_Channel[Context->ChannelId].FlowStatus != CANTP_FC_OVERFLOW) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   731                 (CanTp_Channel[Context->ChannelId].SduLengthRemaining <= Context->RemBufSize))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   732              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   733                  CanTp_Channel[Context->ChannelId].BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   734                  CanTp_Channel[Context->ChannelId].STminTicks = CANTP_DEFAULT_STMIN_TICKS;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   735                  CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   736              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   737              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   738              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   739                  CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   740                  CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   741              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   742          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   743          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   744          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   745          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   746              CanTp_Prv_CanIfTransmit(Context, CanIfTxInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   747          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   748      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   749  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   750  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   751  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   752   Function name    : CanTp_Prv_GetFcActiveChannel
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   753   Syntax           : CanTp_Prv_GetFcActiveChannel(&Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   754   Description      : This function sets the context by extracting the relavant Channel attribute for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   755   Parameter        : CanTp_RxContextType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   756   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   757  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   758  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFcActiveChannel(CanTp_RxContextType *Context)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   759  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   760      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   761      const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   762  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   763      if(Context->SduId < CanTp_CfgPtr->NumberOfTxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   764      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   765          TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   766  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   767          if(CanTp_SubState[TxConnection->ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   768          {  /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   769              Context->ChannelId = TxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   770              Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   771          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   772      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   773  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   774      #if(CANTP_LEGACY_SHARED_FC_SUPPORT == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   775      if(Status == E_NOT_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   776      {  /* This is for UDS-OBD shared FC case */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   777          uint8 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   778          CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   779          CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   780          const CanTp_SharedFcType *SharedFc = CanTp_CfgPtr->SharedFc;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   781  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   782          for(i = 0; i < CanTp_CfgPtr->NumberOfSharedFc; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   783          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   784              if((SharedFc[i].RxFcPduId == Context->PduId) && (SharedFc[i].TxSduId != Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   785              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   786                  ChannelId = CanTp_Prv_GetTxChannelId(SharedFc[i].TxSduId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   787                  /* Channel objects access outside lock is certified in State check inside CanTp_Prv_ProcessFrame() */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   788                  SduId = CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   789                  if((CanTp_SubState[ChannelId] == CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME) && (SharedFc[i].TxSduId == SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   790                  { /* Context->ChannelId is to correspond to the intended Channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   791                      Context->ChannelId = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   792                      Context->SduId = SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   793                      Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   794                      break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   795                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   796              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   797          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   798  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   799      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   800      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   801  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   802      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   803  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   804  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   805  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   806   Function name    : CanTp_Prv_GetRxContext
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   807   Syntax           : CanTp_Prv_GetRxContext(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   808   Description      : This function sets the context by extracting the relavant attributes for RxConnection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   809   Parameter        : CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   810   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   811  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   812  LOCAL_INLINE uint8 CanTp_Prv_GetRxContext(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   813  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   814      uint8 ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   815      CanTp_SduIdType TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   816      CanTp_SduIdType RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   817      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   818      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   819  	const CanTp_TxSduType *TxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   820  	const CanTp_RxSduType *RxConnection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   821      const CanTp_RxPduType *RxPdu = CanTp_CfgPtr->RxPdu + Context->PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   822  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   823      if(PduInfoPtr->SduDataPtr == NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   824      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   825          ErrorId = CANTP_E_PARAM_POINTER;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   826      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   827      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   828      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   829          SduDataPtr = PduInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   830          Context->Address = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   831          RxSduId = RxPdu->RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   832          TxSduId = RxPdu->TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   833  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   834          if(RxPdu->GetSduPair != NULL_PTR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   835          {  /* Check if Address Format is EXTENDED. if so then FrameType is not at 0th byte */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   836              Context->Address = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   837              SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   838              RxPdu->GetSduPair(&TxSduId, &RxSduId, Context->Address); /* TRACE[SWS_CanTp_00284][SWS_CanTp_00095] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   839          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   840  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   841          FrameType = *SduDataPtr >> CANTP_FRAMETYPE_OFFSET;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   842  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   843          if(FrameType < CANTP_NUMBER_OF_FRAME_TYPES)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   844          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   845              Context->FrameType = FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   846  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   847              if(FrameType == CANTP_FLOWCONTROL_FRAME)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   848              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   849                  Context->SduId = TxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   850                  if(CanTp_Prv_GetFcActiveChannel(Context) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   851                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   852                      TxConnection = CanTp_CfgPtr->TxSdu + Context->SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   853                      Context->PduRPduHandleId = TxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   854                      Context->AddressSize = CanTp_AddressSize[TxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   855                      Context->IsPaddingOn = CanTp_Prv_GetBit(TxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   856                      ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   857                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   858              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   859              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   860              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   861                  Context->SduId = RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   862                  if(Context->SduId < CanTp_CfgPtr->NumberOfRxSdus)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   863                  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   864                      RxConnection = CanTp_CfgPtr->RxSdu + RxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   865                      Context->ChannelId = RxConnection->ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   866                      Context->PduRPduHandleId = RxConnection->PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   867                      Context->AddressSize = CanTp_AddressSize[RxConnection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   868                      Context->IsPaddingOn = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_PADDINGON);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   869                      Context->IsFdEnabled = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FD_ENABLED);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   870                      Context->IsFunctional = CanTp_Prv_GetBit(RxConnection->BitFields, CANTP_FUNCTIONAL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   871                      ErrorId = ((Context->IsFunctional) && (FrameType != CANTP_SINGLE_FRAME)) ?
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   872                              CANTP_E_INVALID_TATYPE : CANTP_NO_ERROR; /* TRACE[SWS_CanTp_00093] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   873                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   874              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   875          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   876      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   877  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   878      return ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   879  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   880  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   881  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   882   Function name    : CanTp_Prv_RxSduLengthCheck
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   883   Syntax           : CanTp_Prv_RxSduLengthCheck(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   884   Description      : Function to process SduLength check as per ISO_15765-2_2016-04.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   885                      Figure 9 - State flow - Verifying received CAN frames.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   886   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   887   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   888  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   889  LOCAL_INLINE Std_ReturnType CanTp_Prv_RxSduLengthCheck(CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   890  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   891      uint8 CAN_DL = CANTP_INVALID_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   892      uint8 PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   893      uint8 *Data;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   894      uint8 DataOffset = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   895      uint8 SF_DL = 0;                     /* Will be used only in case of SF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   896      uint32 FF_DL = 0;                    /* Will be used only in case of FF */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   897      PduLengthType FF_DLmin;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   898      PduLengthType FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   899  	uint8 MaxCfSduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   900  	PduLengthType SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   901  	uint8 RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   902  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   903  	Data = PduInfoPtr->SduDataPtr + Context->AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   904  	PciLowerNibble = Data[0] & CANTP_LOWERNIBBLE_MASK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   905  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   906  	switch(Context->FrameType)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   907  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   908  		case CANTP_SINGLE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   909  			if(PduInfoPtr->SduLength <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   910  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   911  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   912  				SF_DL = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   913  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   914  				if((PciLowerNibble != 0u) && ((PciLowerNibble <= (CANTP_DEFAULT_CAN_DL - DataOffset))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   915  				{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   916  					CAN_DL = ((Context->IsPaddingOn)) ? CANTP_DEFAULT_CAN_DL : (DataOffset + (uint8)PciLowerNibble);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   917  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   918  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   919  			else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   920  			{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   921                  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   922  				DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_SFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   923  				SF_DL = Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   924  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   925  				if((PciLowerNibble == 0u) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   926  				   (SF_DL > (7u - Context->AddressSize)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   927  				   (SF_DL <=  (PduInfoPtr->SduLength - DataOffset)) &&
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   928  				   ((Context->AddressSize + 2u + SF_DL) <= CANTP_MAX_NPDU_LENGTH))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   929  				{   /* TRACE[SWS_CanTp_00344] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   930  					CAN_DL = ((Context->IsPaddingOn)) ? CanTp_Prv_GetCanDl(DataOffset + SF_DL) : (DataOffset + SF_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   931  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   932                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   933  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   934  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   935  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   936  		case CANTP_FIRST_FRAME:/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   937  			CAN_DL = (uint8)(PduInfoPtr->SduLength);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   938  			RX_DL = CanTp_Prv_IsRxDlInValid(CAN_DL) ? CANTP_INVALID_DL : CAN_DL; /* TRACE[SWS_CanTp_00350] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   939  			/* All 4 cases of "Table 14-FF_DLmin" of ISO_15765-2"Table 14-FF_DLmin" of ISO_15765-2  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   940  			FF_DLmin = RX_DL - Context->AddressSize - ((CAN_DL > CANTP_DEFAULT_CAN_DL) ? 1u : 0u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   941  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   942  			FfDlValue12bit = ((Data[0] & CANTP_LOWERNIBBLE_MASK) * 0x100u) + Data[1];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   943  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   944              if(FfDlValue12bit == 0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   945              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   946                  FF_DL = (Data[2] * 0x1000000u) + (Data[3] * 0x10000u) + (Data[4] * 0x100u) + Data[5];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   947                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCANFD];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   948                  RX_DL = ((FF_DL > CANTP_MAXFDFFDL) || (FF_DL <= CANTP_MAXFFDL)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   949              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   950              else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   951              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   952                  FF_DL = FfDlValue12bit;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   953                  DataOffset = Context->AddressSize + CanTp_PciSize[CANTP_NPCI_FFCAN];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   954              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   955  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   956  			/* To satisfy "Table 14-FF_DLmin" of ISO_15765-2 and Physical Addressing need for Segmented Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   957  			RX_DL = ((Context->IsFunctional) || (FF_DL < FF_DLmin)) ? CANTP_INVALID_DL : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   958  			CAN_DL = RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   959  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   960  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   961  		case CANTP_CONSECUTIVE_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   962  			SduLengthRemaining = CanTp_Channel[Context->ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   963  			Context->SN = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   964  			RX_DL = CanTp_Prv_GetRxDl(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   965  			DataOffset = Context->AddressSize + CANTP_CF_PCISIZE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   966  			MaxCfSduLength = RX_DL - DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   967  			CAN_DL = (SduLengthRemaining < MaxCfSduLength) ? (uint8)(SduLengthRemaining + DataOffset) : RX_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   968  			CAN_DL = (Context->IsPaddingOn) ? CanTp_Prv_GetCanDl(CAN_DL) : CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   969  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   970  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   971  		case CANTP_FLOWCONTROL_FRAME:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   972  			Context->FlowStatus = PciLowerNibble;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   973              DataOffset = Context->AddressSize + 1; /* Offset for STMin/BS or for CF Data in CanTp_Prv_SetTxBlockInfo */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   974  			CAN_DL = (Context->IsPaddingOn) ? CANTP_DEFAULT_CAN_DL : (CANTP_FC_PCISIZE  + Context->AddressSize);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   975  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   976  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   977  		default:    /* Wrong Frame Type */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   978  			break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   979  	}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   980  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   981  	Context->CAN_DL = CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   982  	Context->DataOffset = DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   983  	Context->SduLength = (Context->FrameType == CANTP_SINGLE_FRAME) ? SF_DL : (PduLengthType)FF_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   984  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   985  	return CanTp_Cfg_DlcCheck(PduInfoPtr->SduLength, Context->CAN_DL);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   986  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   987  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   988  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   989   Function name    : CanTp_Prv_GetConnectionAcceptance
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   990   Syntax           : CanTp_Prv_GetConnectionAcceptance(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   991   Description      : Function to process first or single frame reception acceptance criteria in RxIndication
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   992                      from Can Interface.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   993   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   994   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   995  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   996  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetConnectionAcceptance(const CanTp_RxContextType *Context,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   997                                                                const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   998  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   999      Std_ReturnType RetValue = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1000      uint8 NewChannelState = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1001      uint8 OldChannelState = CanTp_Prv_GetState(Context->ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1002  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1003      #if(CANTP_FD_CALLOUT_SUPPORT == STD_ON)/* indicate to application Flexible Data rate supported info */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1004      if((CanTp_FdCallOut(Context->PduId, PduInfoPtr, Context->IsFdEnabled)) == E_OK) /* FD supported ? */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1005      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1006      (void)PduInfoPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1007      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1008      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1009          if(OldChannelState == CANTP_IDLE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1010          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1011              NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1012          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1013          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1014          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1015              if((OldChannelState == CANTP_RECEPTION)&&(CanTp_Channel[Context->ChannelId].ActiveSduId == Context->SduId))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1016              {   /* TRACE[SWS_CanTp_00124] Reject older and accept new one and free application buffer with E_NOT_OK  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1017                  NewChannelState = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1018                  CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1019              }/* TRACE[SWS_CanTp_00287][SWS_CanTp_00288] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1020          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1021  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1022          if(NewChannelState == CANTP_RX_RECEPTION_REQUEST_ACCEPTED)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1023          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1024              CanTp_SubState[Context->ChannelId] = CANTP_RX_RECEPTION_REQUEST_ACCEPTED;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1025              RetValue = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1026          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1027      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1028  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1029      return RetValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1030  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1031  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1032  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1033   Function name    : CanTp_Prv_SetTxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1034   Syntax           : CanTp_Prv_SetTxBlockInfo(&Context, &PduInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1035   Description      : Function to initialize the block related parameters for the Tx connection Channel which is recieved
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1036                      in FC Frame.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1037   Parameter        : const CanTp_RxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1038   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1039  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1040  LOCAL_INLINE void CanTp_Prv_SetTxBlockInfo(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1041  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1042      uint8 *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1043      CanTp_ChannelPtrType Channel = &CanTp_Channel[Context->ChannelId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1044      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1045  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1046      SduDataPtr = PduInfoPtr->SduDataPtr + Context->DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1047  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1048      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1049      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1050      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1051      { /* FC-CTS received set Block Size and STmin */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1052  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1053          Channel->BS = *SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1054          SduDataPtr++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1055  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1056          if(*SduDataPtr <= CANTP_MILLISEC_MAX_RANGE) /* Adapt the STmin received in the FC frame to local */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1057          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1058              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(*SduDataPtr * 1000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1060          else if((*SduDataPtr < CANTP_MICROSEC_MIN_RANGE) || (*SduDataPtr > CANTP_MICROSEC_MAX_RANGE))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1061          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1062              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks(127000u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1063          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1064          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1065          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1066              Channel->STminTicks = (CanTp_TickType)CanTp_Cfg_GetUsToTicks((*SduDataPtr & CANTP_LOWERNIBBLE_MASK) * 100u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1067          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1068      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1069  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1070      BlockCfsRemaining = CanTp_Prv_GetTxBlockCfs(Context->ChannelId); /* Estimated total block size in terms of Cfs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1071  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1072      if((Channel->BS == 0u) || (Channel->BS > BlockCfsRemaining))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1073      {   /* If Block size is zero or greater than remaining CFs, then no more FCs */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1074          Channel->BlockCfsRemaining = BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1075      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1076      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1077      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1078          Channel->BlockCfsRemaining = (uint16)Channel->BS; /* Wait for FC until block size */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1079      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1080  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1082  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1083   Function name    : CanTp_Prv_GetRxParam
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1084   Syntax           : CanTp_Prv_GetRxParam(id, parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1085   Description      : Function to return the STMin and/or BS type.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1086   Parameter        : CanTp_SduIdType, TPParameterType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1087   Return value     : uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1088  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1089  LOCAL_INLINE uint8 CanTp_Prv_GetRxParam(CanTp_SduIdType id, TPParameterType parameter)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1090  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1091      uint8 value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1092  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1095      #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1097      #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1098      return CanTp_ParamPair[id].Param[value];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1099      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1101  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1102  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1103   Function name    : CanTp_Prv_SetRxBlockInfo
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1104   Syntax           : CanTp_Prv_SetRxBlockInfo(ChannelId, RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1105   Description      : Function to initialize the block related parameters for the Rx connection Channel based on the
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1106                      Buffer Availability in PduR and configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1107   Parameter        : CanTp_ChannelIdType, const PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1108   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1109  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1110  LOCAL_INLINE void CanTp_Prv_SetRxBlockInfo(CanTp_ChannelIdType ChannelId, const PduLengthType RemBufSize)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1111  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1112      uint8 BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1113      PduLengthType BlockCfsRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1114  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d9,#20
	addsc.a	a6,a12,d15,#0
.L1828:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1115      uint8 BS = Channel->BS;
	ld.bu	d4,[a6]5
.L1021:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1116      const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	ld.bu	d0,[a6]6
.L1829:
	movh.a	a2,#@his(CanTp_CfgPtr)
	lea	a2,[a2]@los(CanTp_CfgPtr)
	ld.a	a2,[a2]
.L1830:
	ld.a	a5,[a2]16
.L1831:
	mul	d15,d0,#12
	addsc.a	a4,a5,d15,#0
.L1022:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1117      PduLengthType OneFramePayloadLength = CanTp_Prv_GetRxDl(ChannelId) -
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1118                                            CanTp_AddressSize[Connection->AddressFormatId] - CANTP_CF_PCISIZE;
	movh.a	a7,#@his(CanTp_AddressSize)
	lea	a7,[a7]@los(CanTp_AddressSize)
.L1832:
	ld.bu	d1,[a6]1
.L1833:
	ld.bu	d15,[a4]2
.L1834:
	addsc.a	a4,a7,d15,#0
.L1023:
	ld.bu	d2,[a4]
.L1835:
	sub	d1,d2
.L1836:
	add	d1,#-1
	extr.u	d2,d1,#0,#16
.L1024:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1119  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1120      /* This invalid value of STminTicks case is possible according to [SWS_CanTp_00082] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1121      #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */
	ld.hu	d1,[a6]18
.L1837:
	mov	d15,#128
.L1838:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */      (inlined)
	jne	d15,d1,.L181
.L1839:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1123      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1124      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1125          BSMax = CanTp_Prv_GetRxParam(Channel->ActiveSduId, TP_BS);
	mov	d15,#1
.L739:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);      (inlined)
	ne	d1,d15,#0
.L1025:
	j	.L183
.L182:
	mov	d1,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1093      value = (parameter == TP_STMIN)? (0u) : (1u);      (inlined)
.L183:
	ld.a	a2,[a2]24
	mul	d15,d0,#12
	addsc.a	a4,a5,d15,#0
	ld.bu	d15,[a4]4
	addsc.a	a2,a2,d15,#2
	addsc.a	a2,a2,d1,#0
	ld.bu	d4,[a2]
.L1840:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1096      return CanTp_Prv_GetRxCfgParam(id, value);      (inlined)
	j	.L184

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1100  }      (inlined)
.L184:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)
	ld.hu	d0,[a6]12
.L1841:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)      (inlined)
	jlt.u	d3,d0,.L185
.L1842:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;      (inlined)
	j	.L186

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1127          if(RemBufSize >= Channel->SduLengthRemaining)      (inlined)
.L185:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1128          {   /* Enough buffer to recieve all frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1129              BS = BSMax;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1130          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1132          {   /* Enough buffer to recieve Block frames. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1133              BS = (uint8)(RemBufSize/OneFramePayloadLength);
	div	e0,d3,d2
.L1030:
	extr.u	d15,d0,#0,#8
.L1031:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;      (inlined)
	jeq	d4,#0,.L187
.L1843:
	jge.u	d4,d15,.L188
.L1026:
	j	.L189
.L188:
.L187:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;
	mov	d4,d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1134              BS = ((BSMax != 0u) && (BS > BSMax)) ? BSMax : BS;      (inlined)
.L189:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1131          else      (inlined)
.L186:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1122      if(Channel->STminTicks == CANTP_INVALID_STMIN_TICKS) /* TRACE[SWS_CanTp_00067] */      (inlined)
.L181:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||      (inlined)
	jne	d4,#0,.L190
.L1032:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1135          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1136      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||
	ld.hu	d15,[a6]12
.L1844:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||      (inlined)
	jlt.u	d3,d15,.L191
.L190:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))      (inlined)
	jeq	d4,#0,.L192
.L1845:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))
	mul	d2,d4
.L1029:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))      (inlined)
	jge	d3,d2,.L193
.L1846:
	ld.hu	d15,[a6]12
.L1847:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))      (inlined)
	jge.u	d3,d15,.L194

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||      (inlined)
.L191:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1140      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;
	mov	d15,#1
.L1848:
	st.b	[a6]3,d15
.L1849:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1141          Channel->FlowStatus = CANTP_FC_WAIT;      (inlined)
	j	.L195

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1138      if(((BS == 0) && (RemBufSize < Channel->SduLengthRemaining)) ||      (inlined)
.L194:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1139  	   ((BS != 0) && (RemBufSize < (BS * OneFramePayloadLength)) && (RemBufSize < Channel->SduLengthRemaining)))      (inlined)
.L193:
.L192:
	mul	d15,d9,#20
	addsc.a	a2,a12,d15,#0
.L1850:
	ld.bu	d15,[a2]6
.L1851:
	mul	d15,d15,#12
	addsc.a	a4,a5,d15,#0
.L1033:
	ld.bu	d0,[a2]1
.L1035:
	ld.bu	d15,[a4]2
.L1852:
	addsc.a	a4,a7,d15,#0
.L1034:
	ld.bu	d15,[a4]
.L1037:
	ld.hu	d1,[a2]12
.L1039:
	sub	d0,d15
.L1036:
	add	d0,#-1
.L1853:
	extr.u	d15,d0,#0,#8
.L1038:
	div.u	e2,d1,d15
.L1854:
	div.u	e0,d1,d15
.L1040:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
	jne	d1,#0,.L196
.L1855:
	j	.L197
.L196:
	add	d2,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
.L197:
	extr.u	d15,d2,#0,#16
.L1041:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);      (inlined)
	j	.L198

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }      (inlined)
.L198:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;      (inlined)
	jeq	d4,#0,.L199
.L1856:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1142      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1144      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1145  		BlockCfsRemaining = CanTp_Prv_GetRxBlockCfs(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;
	mov	d15,d4
.L1042:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1146          Channel->BlockCfsRemaining = (BS != 0u) ? BS : BlockCfsRemaining;      (inlined)
	j	.L200
.L199:
.L200:
	st.h	[a6]10,d15
.L1857:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1147  	    Channel->FlowStatus = CANTP_FC_CTS;
	mov	d15,#0
.L1858:
	st.b	[a6]3,d15
.L1859:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1148          #if(CANTP_DYNAMIC_FC_SUPPORT != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1149          Channel->STminTicks = 0;  /* BS locking for CANTP_DYNAMIC_FC_SUPPORT Disabled case  */
	mov	d15,#0
.L1860:
	st.h	[a6]18,d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1143      else      (inlined)
.L195:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1150          #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1151      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1152  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	  1153      Channel->BS = BS;
	st.b	[a6]5,d4
.L727:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1002  					IsFcReady = (Channel->FlowStatus != CANTP_FC_CTS) ? IsFcReady : TRUE; /* TRACE[SWS_CanTp_00224] */
	ld.bu	d15,[a13]3
.L1861:
	jeq	d15,#0,.L201
.L1862:
	j	.L202
.L201:
	mov	d8,#1
.L202:
.L180:
.L179:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1003  				}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1004  			}
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1005  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1006  			if((Channel->FlowStatus == CANTP_FC_WAIT) && ((ElapsedValue >= CanTp_Prv_GetCfgBsBrTicks(Connection)) ||
	ld.bu	d15,[a13]3
.L1863:
	jne	d15,#1,.L203
.L1864:
	movh.a	a2,#@his(CanTp_CfgPtr)
	lea	a2,[a2]@los(CanTp_CfgPtr)
	ld.a	a2,[a2]
.L1865:
	ld.hu	d0,[a10]16
.L1866:
	ld.bu	d15,[a15]3
	mul	d15,d15,#6
	ld.a	a15,[a2]20
.L1028:
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]2
.L1867:
	jge.u	d0,d15,.L204
.L1868:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1007  			   (Channel->FcWait == 0)))
	ld.hu	d15,[a13]8
.L1869:
	jne	d15,#0,.L205
.L204:
	ld.hu	d0,[a13]8
.L1870:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1008              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1009                  if(Channel->FcWait < CanTp_Prv_GetRxCfgFcWaitMax(Channel->ActiveSduId))
	ld.a	a4,[a2]24
	ld.bu	d15,[a13]6
	mul	d15,d15,#12
	ld.a	a15,[a2]16
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]4
	addsc.a	a15,a4,d15,#2
	ld.hu	d15,[a15]2
.L1871:
	jge.u	d0,d15,.L206
.L1872:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1010                  {    /* TRACE[SWS_CanTp_00082][SWS_CanTp_00325][SWS_CanTp_00341]If N_Br timer expires reload N_Br */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1011                       Channel->FcWait++;
	add	d15,d0,#1
	st.h	[a13]8,d15
.L1873:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1012                       Channel->InitialTicks = Value;
	ld.hu	d15,[a10]18
.L1874:
	st.h	[a13]16,d15
.L1875:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1013                       IsFcReady = TRUE;
	mov	d8,#1
.L1876:
	j	.L207
.L206:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1014                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1015                  else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1016                  {   /* TRACE[SWS_CanTp_00223] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1017                      CanTp_Prv_PduRConfirmation(Context.PduRApiId, Context.PduRPduHandleId, E_NOT_OK);
	ld.bu	d15,[a10]20
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ld.hu	d4,[a10]28
	mov	d5,#1
	calli	a15
.L1877:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1018                      CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_RX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#192
	call	Det_ReportRuntimeError
.L1878:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1019                      CanTp_SubState[Context.ChannelId] = CANTP_IDLE;
	ld.bu	d15,[a10]23
.L1879:
	addsc.a	a15,a14,d15,#0
.L1880:
	mov	d15,#0
.L1881:
	st.b	[a15],d15
.L207:
.L205:
.L203:
.L177:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1020                  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1021              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1022          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1023  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1024          CanTp_Prv_FcTransmit(&Context, &PduInfo, IsFcReady, Value);
	lea	a13,[a10]20
.L1027:
	lea	a2,[a10]0
.L1882:
	ld.hu	d0,[a10]18
.L753:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))      (inlined)
	jeq	d8,#0,.L208
.L1883:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   361  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   362  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   363  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   364  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   365  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   366   Function name    : CanTp_Prv_GetBit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   367   Syntax           : CanTp_Prv_GetBit(Value, Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   368   Description      : Library function check whether particular Value bit pattern is same as to Mask.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   369   Parameter        : uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   370   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   371  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   372  LOCAL_INLINE boolean CanTp_Prv_GetBit(uint8 Value, uint8 Mask)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   373  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   376  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   377  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   378   Function name    : CanTp_IncrementCounter
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   379   Syntax           : CanTp_IncrementCounter()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   380   Description      : Library function to increment MainFunction ticks in case Cyclic timer is used.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   381   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   382   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   383  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   384  LOCAL_INLINE void CanTp_IncrementCounter(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   385  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   386      #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   387      CanTp_MainFunctionTicks += 1;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   388      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   389  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   390  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   391  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   392  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   393   Function name    : CanTp_Prv_ArrayInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   394   Syntax           : CanTp_Prv_ArrayInit(&Array[0], Length, Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   395   Description      : Library function to initilize array.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   396   Parameter        : uint8*, uint32, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   397   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   398  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   399  LOCAL_INLINE void CanTp_Prv_ArrayInit(uint8 *ArrayPtr, uint32 Length, uint8 Item)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   400  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   401      uint32 i;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   402  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   403      for(i = 0; i < Length; i++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   404      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   405          ArrayPtr[i] = Item;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   406      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   407  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   408  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   409  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   410   Function name    : CanTp_Prv_IsNoDevError
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   411   Syntax           : CanTp_Prv_IsNoDevError(id, TotalIds, ApiId, CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   412   Description      : Library function to check InitState and Invalid Id passed in CanTp Api by CanIf/PduR.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   413   Parameter        : uint32, uint32, uint8, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   414   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   415  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   416  LOCAL_INLINE boolean CanTp_Prv_IsNoDevError(uint32 id, uint8 ApiId, uint8 CanTpEInvalidId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   417  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   418      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   419      uint32 TotalIds = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   420      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   421  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   422      if(CanTp_MainState != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   423      {   /* TRACE[SWS_CanTp_00031] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   424          ErrorId = CANTP_E_UNINIT;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   425      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   426      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   427      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   428          switch(ApiId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   429          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   430              case CANTP_CHANGEPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   431  			case CANTP_READPARAMETER:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   432              case CANTP_CANCELRECEIVE:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   433                  TotalIds = CanTp_CfgPtr->NumberOfRxSdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   434                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   435              case CANTP_TRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   436              case CANTP_CANCELTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   437                  TotalIds = CanTp_CfgPtr->NumberOfTxSdus; /* TRACE[SWS_CanTp_00254] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   438                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   439  			case CANTP_TXCONFIRMATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   440  			case CANTP_TRIGGERTRANSMIT:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   441                  TotalIds = CanTp_CfgPtr->NumberOfTxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   442  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   443  			case CANTP_RXINDICATION:
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   444                  TotalIds = CanTp_CfgPtr->NumberOfRxPdus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   445  				break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   446              default:    /* Wrong API ID */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   447                  break;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   448          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   449  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   450          if(id >= TotalIds)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   451          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   452              ErrorId = CanTpEInvalidId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   453          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   454          else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   455          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   456              ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   457          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   458      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   459  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   460      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   461      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   462          CanTp_Prv_ReportError(ApiId, ErrorId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   463          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   464      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   465  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   466      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   467  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   468  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   469  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   470  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   471   Function name    : CanTp_Prv_IsChangeParameterOk
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   472   Syntax           : CanTp_Prv_IsChangeParameterOk(parameter, value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   473   Description      : Function to do parameter check in CanTp_ChangeParameter Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   474   Parameter        : TPParameterType, uint16
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   475   Return value     : boolean
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   476  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   477  LOCAL_INLINE boolean CanTp_Prv_IsChangeParameterOk(TPParameterType parameter, uint16 value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   478  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   479      uint8 ErrorId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   480      boolean Status = TRUE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   481  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   482      if((parameter != TP_BS) && (parameter != TP_STMIN))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   483      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   484          ErrorId = CANTP_E_PARAM_ID;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   485      } /* MILLISEC_MAX_RANGE=0x7F , MICROSEC_MIN_RANGE = F1, MICROSEC_MAX_RANGE = F9 */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   486      else if((parameter == TP_STMIN) && (!(( value <= CANTP_MILLISEC_MAX_RANGE) || ((value >= CANTP_MICROSEC_MIN_RANGE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   487              && ( value <= CANTP_MICROSEC_MAX_RANGE)))))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   488      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   489          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   490      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   491      else if((parameter == TP_BS) && (value > CANTP_MAX_BS_VALUE))  /*MAX_BS_VALUE = 0xFF*/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   492      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   493          ErrorId = CANTP_E_PARAM_CONFIG;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   494      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   495      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   496      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   497          ErrorId = CANTP_NO_ERROR;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   498      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   499  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   500      if(ErrorId != CANTP_NO_ERROR)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   501      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   502          CanTp_Prv_ReportRunTimeError(CANTP_CHANGEPARAMETER, ErrorId); /* TRACE[SWS_CanTp_00305] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   503          Status = FALSE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   504      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   505  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   506      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   507  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   508  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   509  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   510   Function name    : CanTp_Prv_RxParamInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   511   Syntax           : CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   512   Description      : Initialize STMin and BS for all the RX connections from configuration.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   513   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   514   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   515  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   516  LOCAL_INLINE void CanTp_Prv_RxParamInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   517  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   518      CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   519  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   520      for(SduId = 0; SduId < CanTp_CfgPtr->NumberOfRxSdus; SduId++)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   521      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   522          CanTp_ParamPair[SduId].Param[0] = CanTp_Prv_GetRxCfgParam(SduId, 0);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   523          CanTp_ParamPair[SduId].Param[1] = CanTp_Prv_GetRxCfgParam(SduId, 1);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   524      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   525  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   526  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   527  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   528  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   529   Function name    : CanTp_Prv_GetTxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   530   Syntax           : CanTp_Prv_GetTxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   531   Description      : Initialize Total number of Consecutive Frames in a Block for Tx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   532   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   533   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   534  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   535  LOCAL_INLINE PduLengthType CanTp_Prv_GetTxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   536  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   537      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   538  	const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   539      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   540      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   541      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   542  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   543      PayLoadLength = TX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   544      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   545  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   546  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   547  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   548   Function name    : CanTp_Prv_GetRxBlockCfs
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   549   Syntax           : CanTp_Prv_GetRxBlockCfs(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   550   Description      : Initialize Total number of Consecutive Frames in a Block for Rx Connection.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   551   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   552   Return value     : PduLengthType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   553  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   554  LOCAL_INLINE PduLengthType CanTp_Prv_GetRxBlockCfs(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   555  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   556      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   557  	const CanTp_RxSduType *Connection = CanTp_CfgPtr->RxSdu + CanTp_Channel[ChannelId].ActiveSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   558      uint8 RX_DL = CanTp_Prv_GetRxDl(ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   559      uint8 AddressSize = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   560      PduLengthType SduLength = CanTp_Channel[ChannelId].SduLengthRemaining;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   561  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   562      PayLoadLength = RX_DL - CANTP_CF_PCISIZE - AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   563      return ((SduLength % PayLoadLength) == 0u) ? (SduLength / PayLoadLength) : ((SduLength / PayLoadLength) + 1u);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   564  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   565  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   566  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   567  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   568   Function name    : CanTp_Prv_QInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   569   Syntax           : CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   570   Description      : Initialize Burst Queue by making its Head and Tail equal.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   571   Parameter        : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   572   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   573  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   574  LOCAL_INLINE void CanTp_Prv_QInit(void)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   575  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   576      CanTp_BurstQ.Tail_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   577      CanTp_BurstQ.Head_u8 = 0;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   578  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   579  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   580  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   581   Function name    : CanTp_Prv_PutInQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   582   Syntax           : CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   583   Description      : This function puts in queue the ChannelId later to be retrieved.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   584   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   585   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   586  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   587  LOCAL_INLINE Std_ReturnType CanTp_Prv_PutInQ(CanTp_ChannelIdType ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   588  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   589      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   590  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   591      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   592  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   593      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != CANTP_BURST_QUEUE_SIZE) /* only put into Q if it is not full */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   594      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   595          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   596          CanTp_BurstQ.Tail_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   597          CanTp_BurstQ.Queue[CanTp_BurstQ.Tail_u8 % CANTP_BURST_QUEUE_SIZE] = ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   598      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   599  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   600      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   601  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   602      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   603  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   604  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   605  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   606   Function name    : CanTp_Prv_GetFromQ
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   607   Syntax           : CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   608   Description      : This function gets the ChannelId from queue which was entered by CanTp_Prv_PutInQ.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   609   Parameter        : CanTp_ChannelIdType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   610   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   611  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   612  LOCAL_INLINE Std_ReturnType CanTp_Prv_GetFromQ(CanTp_ChannelIdType *ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   613  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   614      Std_ReturnType Status = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   615  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   616      SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   617  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   618      if((CanTp_BurstQ.Tail_u8 - CanTp_BurstQ.Head_u8) != 0) /* only take from Q if it is not empty */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   619      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   620          Status = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   621          CanTp_BurstQ.Head_u8++;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   622          *ChannelId = CanTp_BurstQ.Queue[CanTp_BurstQ.Head_u8 % CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   623      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   624  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   625      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   626  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   627      return Status;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   628  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   629  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   630  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   631  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   632   Function name    : CanTp_Prv_TxPciInit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   633   Syntax           : CanTp_Prv_TxPciInit(PciId, CanTpTxSduId, CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   634   Description      : This function initializes the Protocol Control Information type. To be called in CanTp_Transmit Api.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   635   Parameter        : uint8*, PduIdType, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   636   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   637  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   638  LOCAL_INLINE void CanTp_Prv_TxPciInit(uint8 *PciId, PduIdType CanTpTxSduId, const PduInfoType *CanTpTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   639  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   640      const CanTp_TxSduType *Connection = CanTp_CfgPtr->TxSdu + CanTpTxSduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   641      uint8 AddressLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   642      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   643      uint8 TX_DL = CanTp_Prv_GetTxDl(Connection);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   644      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   645  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   646      AddressLength = CanTp_AddressSize[Connection->AddressFormatId];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   647  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   648      if((CanTpTxInfoPtr->SduLength + AddressLength + 1u) <= CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   649      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   650          *PciId = CANTP_NPCI_SFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   651      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   652      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   653      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && ((CanTpTxInfoPtr->SduLength + AddressLength + 2u) <= TX_DL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   654      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   655          *PciId = CANTP_NPCI_SFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   656      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   657      else if((TX_DL > CANTP_DEFAULT_CAN_DL) && (CanTpTxInfoPtr->SduLength > CANTP_MAXFFDL))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   658      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   659          *PciId = CANTP_NPCI_FFCANFD;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   660      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   661      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   662      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   663      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   664          *PciId = CANTP_NPCI_FFCAN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   665      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   666  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   667  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   668  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   669   Function name    : CanTp_Prv_CanIfTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   670   Syntax           : CanTp_Prv_CanIfTransmit(&Context, &CanIfTxInfo)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   671   Description      : This is a wrapper function to CanIf_Transmit. It also abstracts negative reporting to PduR/DET and
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   672                      provides internal stack buffer in case Trigger Transmit feature is disabled.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   673   Parameter        : const CanTp_TxContextType*, const PduInfoType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   674   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   675  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   676  LOCAL_INLINE void CanTp_Prv_CanIfTransmit(const CanTp_TxContextType *Context, const PduInfoType *CanIfTxInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   677  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   678      Std_ReturnType Result = E_NOT_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   679      PduInfoType CanIfTxInfo;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   680      uint8 SduBuffer[CANTP_MAX_NPDU_LENGTH];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   681  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   682      CanIfTxInfo.SduLength = CanIfTxInfoPtr->SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   683      #if(CANTP_TRIGGER_TRANSMIT_API == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   685      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   687          Result = E_OK;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   688      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   690      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   691      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   692          CanIfTxInfo.SduDataPtr = SduBuffer;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   694      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   695  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   697      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   698          CanTp_TxConfirmationChannel[Context->TxConfirmationId] = Context->ChannelId; /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   700          {   /*TRACE[SWS_CanTp_00342][SWS_CanTp_00343]CanTp shall terminate connection if E_NOT_OK */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   701              CanTp_Prv_PduRConfirmation(Context->PduRApiId, Context->PduRPduHandleId, E_NOT_OK);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   702              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_COM);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   703              CanTp_SubState[Context->ChannelId] = CANTP_IDLE;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   704              CanTp_TxConfirmationChannel[Context->TxConfirmationId] = CANTP_INVALID_CHANNEL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   705          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   706  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   707      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   708  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   709  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   710  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   711   Function name    : CanTp_Prv_FcTransmit
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   712   Syntax           : CanTp_Prv_FcTransmit(&Context, &CanIfTxInfo, IsFcTransmitReady, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   713   Description      : This is a wrapper function to FC Transmission. It abstracts the case of FC deactivation by moving
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   714                      state to next level.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   715   Parameter        : const CanTp_TxContextType*, const PduInfoType*, boolean, CanTp_TickType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   716   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   717  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   718  LOCAL_INLINE void CanTp_Prv_FcTransmit(const CanTp_TxContextType *Context, const PduInfoType* CanIfTxInfoPtr,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   719                                         boolean IsFcTransmitReady, CanTp_TickType Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   720  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))
	ld.bu	d15,[a10]23
.L1884:
	addsc.a	a15,a14,d15,#0
	ld.bu	d1,[a15]
.L1885:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))      (inlined)
	jne	d1,#6,.L209
.L1886:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   722      {   /* TRACE[SWS_CanTp_00341]If N_Br timer expires then reload the N_Br timer. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   723          CanTp_Channel[Context->ChannelId].InitialTicks = Value;
	mul	d15,d15,#20
	addsc.a	a15,a12,d15,#0
.L1887:
	st.h	[a15]16,d0
.L1888:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   724          CanTp_Channel[Context->ChannelId].PciId = CANTP_NPCI_FC;
	ld.bu	d15,[a10]23
.L1889:
	mul	d15,d15,#20
	addsc.a	a15,a12,d15,#0
.L1890:
	mov	d15,#5
.L1891:
	st.b	[a15]2,d15
.L1892:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   725          CanTp_SubState[Context->ChannelId] = CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION;
	ld.bu	d15,[a10]23
.L1893:
	addsc.a	a15,a14,d15,#0
.L1894:
	mov	d15,#7
.L1895:
	st.b	[a15],d15
.L763:
	ld.hu	d15,[a2]4
.L1896:
	st.h	[a10]44,d15
.L1897:
	ld.bu	d15,[a13]2
.L769:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
	and	d15,#32
	ne	d15,d15,#0
.L1898:
	j	.L211
.L210:
	mov	d15,#0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   374      return ((Value & Mask) == Mask) ? TRUE : FALSE;      (inlined)
.L211:
	j	.L212

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   375  }      (inlined)
.L212:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
	jeq	d15,#0,.L213
.L770:
	ld.a	a15,[a2]
.L1899:
	st.a	[a10]40,a15
.L1900:
	mov	d15,#0
.L1043:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   686          CanIfTxInfo.SduDataPtr = CanIfTxInfoPtr->SduDataPtr;      (inlined)
	j	.L214

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   684      if(CanTp_Prv_GetBit(Context->BitFields, CANTP_TRIGGER_TRANSMIT_ON))      (inlined)
.L213:
	lea	a15,[a10]48
.L1901:
	st.a	[a10]40,a15
.L1902:
	ld.bu	d4,[a13]3
	mul	d15,d4,#20
	addsc.a	a15,a12,d15,#0
	ld.bu	d15,[a15]2
	movh.a	a15,#@his(CanTp_PciFrameType)
	lea	a15,[a15]@los(CanTp_PciFrameType)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
	movh.a	a15,#@his(CanTp_CreateFrame)
	lea	a15,[a15]@los(CanTp_CreateFrame)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	lea	a4,[a10]40
	calli	a15
.L1903:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
	ne	d15,d2,#0
.L1044:
	j	.L216
.L215:
	mov	d15,#1

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   693          Result = (CanTp_Prv_CreateFrame(Context->ChannelId, &CanIfTxInfo) == E_OK) ? E_OK : Result;      (inlined)
.L216:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   689      else      (inlined)
.L214:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
	jne	d15,#0,.L217
.L1904:
	ld.bu	d15,[a13]3
.L1045:
	movh.a	a12,#@his(CanTp_TxConfirmationChannel)
	lea	a12,[a12]@los(CanTp_TxConfirmationChannel)
.L1905:
	ld.hu	d0,[a13]4
.L1906:
	addsc.a	a15,a12,d0,#0
.L1907:
	st.b	[a15],d15
.L1908:
	ld.hu	d4,[a13]6
.L1909:
	lea	a4,[a10]40
	call	CanIf_Transmit
.L1910:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
	jeq	d2,#0,.L218
.L1911:
	ld.bu	d15,[a13]
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ld.hu	d4,[a13]8
	mov	d5,#1
	calli	a15
.L1912:
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#176
	call	Det_ReportRuntimeError
.L1913:
	ld.bu	d15,[a13]3
.L1914:
	addsc.a	a15,a14,d15,#0
.L1915:
	mov	d15,#0
.L1916:
	st.b	[a15],d15
.L1917:
	ld.hu	d15,[a13]4
.L1918:
	addsc.a	a15,a12,d15,#0
.L1919:
	mov	d15,#2
.L1920:
	st.b	[a15],d15

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   699          if(CanIf_Transmit(Context->PduId, &CanIfTxInfo) != E_OK)      (inlined)
.L218:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   696      if(Result == E_OK)      (inlined)
.L217:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   721      if(IsFcTransmitReady && (CanTp_SubState[Context->ChannelId] == CANTP_RX_SEND_FC))      (inlined)
.L209:
.L208:
.L176:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1025      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1026  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1027      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1028  }
	ret
.L709:
	
__CanTp_Prv_RxSendFlowControlFrame_function_end:
	.size	CanTp_Prv_RxSendFlowControlFrame,__CanTp_Prv_RxSendFlowControlFrame_function_end-CanTp_Prv_RxSendFlowControlFrame
.L342:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_RxWaitForFcTransmitConfirmation',code,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.text.CanTp_Prv.CanTp_Prv_RxWaitForFcTransmitConfirmation'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1029  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1030  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1031   Function name    : CanTp_Prv_RxWaitForFcTransmitConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1032   Syntax           : CanTp_Prv_RxWaitForFcTransmitConfirmation(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1033   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1034                      CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1035   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1036   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1037  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1038  static void CanTp_Prv_RxWaitForFcTransmitConfirmation(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_RxWaitForFcTransmitConfirmation
.L256:
CanTp_Prv_RxWaitForFcTransmitConfirmation:	.type	func
	sub.a	a10,#8
.L1046:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1039  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1040  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d4,#20
.L1925:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L1926:
	addsc.a	a2,a15,d15,#0
.L1048:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1041      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1042      CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a2]16
.L1927:
	st.h	[a10],d15
.L1928:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1043      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1044  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1045      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1929:
	lea	a4,[a10]2
.L779:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L1050:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a5]0
.L1930:
	st.h	[a15],d0
.L1931:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1932:
	sub	d0,d15
.L1933:
	st.h	[a4],d0
.L780:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1046  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1047  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1048  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1049      if(CanTp_SubState[ChannelId] == CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1934:
	addsc.a	a12,a15,d4,#0
	ld.bu	d15,[a12]
.L1051:
	jne	d15,#7,.L219
.L1935:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1050      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1051          Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1936:
	ld.bu	d15,[a2]6
.L1937:
	mul	d15,d15,#12
.L1938:
	ld.a	a2,[a15]16
.L1049:
	addsc.a	a13,a2,d15,#0
.L1052:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1052          if(ElapsedValue > CanTp_Prv_GetCfgAsArTicks(Connection))
	ld.hu	d0,[a10]2
.L1939:
	ld.bu	d15,[a13]3
	mul	d15,d15,#6
	ld.a	a2,[a15]20
	addsc.a	a15,a2,d15,#0
	ld.hu	d15,[a15]0
.L1940:
	jge.u	d15,d0,.L220
.L1941:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1053          {   /* TRACE[SWS_CanTp_00311][SWS_CanTp_00229] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1054              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a13]10
.L1047:
	mov	d5,#1
	calli	a15
.L1942:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1055              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_RX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#192
	call	Det_ReportRuntimeError
.L1943:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1056              /* TRACE[SWS_CanTp_00248] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1057              CanTp_TxConfirmationChannel[Connection->TxConfirmationId] = CANTP_INVALID_CHANNEL;
	ld.hu	d15,[a13]6
.L1944:
	movh.a	a15,#@his(CanTp_TxConfirmationChannel)
	lea	a15,[a15]@los(CanTp_TxConfirmationChannel)
.L1945:
	addsc.a	a15,a15,d15,#0
.L1946:
	mov	d15,#2
.L1947:
	st.b	[a15],d15
.L1948:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1058              CanTp_SubState[ChannelId] = CANTP_IDLE;
	mov	d15,#0
.L1949:
	st.b	[a12],d15
.L220:
.L219:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1059          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1060      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1061  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1062      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1063  }
	ret
.L773:
	
__CanTp_Prv_RxWaitForFcTransmitConfirmation_function_end:
	.size	CanTp_Prv_RxWaitForFcTransmitConfirmation,__CanTp_Prv_RxWaitForFcTransmitConfirmation_function_end-CanTp_Prv_RxWaitForFcTransmitConfirmation
.L347:
	; End of function
	
	.sdecl	'.text.CanTp_Prv.CanTp_Prv_RxWaitForConsecutiveFrame',code,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.text.CanTp_Prv.CanTp_Prv_RxWaitForConsecutiveFrame'
	.align	2
	

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1064  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1065  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1066   Function name    : CanTp_Prv_RxWaitForConsecutiveFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1067   Syntax           : CanTp_Prv_RxWaitForConsecutiveFrame(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1068   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1069                      CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1070   Parameter        : CanTp_ChannelIdType
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1071   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1072  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1073  static void CanTp_Prv_RxWaitForConsecutiveFrame(CanTp_ChannelIdType ChannelId)
; Function CanTp_Prv_RxWaitForConsecutiveFrame
.L258:
CanTp_Prv_RxWaitForConsecutiveFrame:	.type	func
	sub.a	a10,#8
.L1053:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1074  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1075  	CanTp_ChannelPtrType Channel = &CanTp_Channel[ChannelId];
	mul	d15,d4,#20
.L1954:
	movh.a	a15,#@his(CanTp_Channel)
	lea	a15,[a15]@los(CanTp_Channel)
.L1955:
	addsc.a	a2,a15,d15,#0
.L1055:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1076      const CanTp_RxSduType *Connection;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1077  	CanTp_TickType Value = Channel->InitialTicks;  /* Channel objects access outside lock is certified in State check */
	ld.hu	d15,[a2]16
.L1956:
	st.h	[a10],d15
.L1957:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1078  	CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1079  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1080      CanTp_GetElapsedValue(&Value, &ElapsedValue);
	lea	a15,[a10]0
.L1958:
	lea	a4,[a10]2
.L790:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     1  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     2  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     3  #ifndef CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     4  #define CANTP_PRV_H
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     5  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     6  #include "CanTp.h" /* CanTp.h must be included before CanTp_Types.h */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     7  #if(CANTP_CYCLE_COUNTER != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     8  #include "CanTp_Timer.h"              /*  External Timer Handling */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	     9  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    10  #include "CanTp_Types.h" /* TRACE[SWS_CanTp_00264] Indirect inclusion of ComStack_Types.h  */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    11  #include "CanTp_Cfg_SchM.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    12  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    13  #include "SchM_CanTp.h"  /* SchM version not checked as it is not provided in SchM_CanTp.h file */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    14  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    15  #include "PduR_CanTp.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    16  #if (!defined(PDUR_AR_RELEASE_MAJOR_VERSION) || (PDUR_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    17  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    18  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    19  #if (!defined(PDUR_AR_RELEASE_MINOR_VERSION) || (PDUR_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    20  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    21  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    22  #include "CanIf.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    23  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    24  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    25  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    26  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    27  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    28  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    29  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    30  #include "Det.h" /* TRACE[SWS_CanTp_00264] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    31  #if (!defined(DET_AR_RELEASE_MAJOR_VERSION) || (DET_AR_RELEASE_MAJOR_VERSION != 4))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    32  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    33  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    34  #if (!defined(DET_AR_RELEASE_MINOR_VERSION) || (DET_AR_RELEASE_MINOR_VERSION != 2))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    35  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    36  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    37  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    38  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    39   /**********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    40   *    Internal Defines
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    41   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    42  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    43  /* Frame Types of CanTp Module */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    44  #define CANTP_SF_HIGHNIBBLE                          (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    45  #define CANTP_FF_HIGHNIBBLE                          (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    46  #define CANTP_CF_HIGHNIBBLE                          (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    47  #define CANTP_FC_HIGHNIBBLE                          (0x30u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    48  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    49  #define CANTP_DEFAULT_CAN_DL                         (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    50  #define CANTP_DLCERROR                               (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    51  #define CANTP_NO_ERROR                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    52  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    53  /* PCI Size of SF and FF are not fixed. they vary based on FD and SduLength. */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    54  #define CANTP_CF_PCISIZE                             (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    55  #define CANTP_FC_PCISIZE                             (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    56  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    57  /* Table 9 - Summary of N_PCI bytes. This is used as PciId */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    58  #define CANTP_NPCI_SFCAN                             (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    59  #define CANTP_NPCI_SFCANFD                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    60  #define CANTP_NPCI_FFCAN                             (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    61  #define CANTP_NPCI_FFCANFD                           (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    62  #define CANTP_NPCI_CF                                (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    63  #define CANTP_NPCI_FC                                (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    64  #define CANTP_NPCI_INVALID                           (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    65  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    66  /* Maximum Payload Supported by CanTp for Transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    67  #define CANTP_MAXFFDL                                (0xFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    68  #define CANTP_MAXFDFFDL                              (0xFFFFFFFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    69  #define CANTP_MAXBLOCKSIZE                           (0xFFu)    /* Maximum Block Size on the bus */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    70  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    71  #define CANTP_CANDL_ARRAY_SIZE                       (65u)      /* CAN_DL Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    72  #define CANTP_PCI_ARRAY_SIZE                         (6u)       /* PCI Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    73  #define CANTP_ADDRESS_ARRAY_SIZE                     (5u)       /* ADDRESS Table size for mapping */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    74  #define CANTP_FDSFDL_PCI                             (1u)       /* SF_DL bytes in case of CAN-FD */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    75  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    76  /* Address Type Format */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    77  #define CANTP_STANDARD                               (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    78  #define CANTP_EXTENDED                               (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    79  #define CANTP_MIXED                                  (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    80  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    81  /* Buffer enquiry states */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    82  #define CANTP_BUFFER_NOT_ASKED                       (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    83  #define CANTP_BUFFER_ASKED                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    84  #define CANTP_BUFFER_AVAILABLE                       (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    85  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    86  /* STMin and BS range of values */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    87  #define CANTP_MILLISEC_MAX_RANGE                     (0x7Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    88  #define CANTP_MICROSEC_MIN_RANGE                     (0xF1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    89  #define CANTP_MICROSEC_MAX_RANGE                     (0xF9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    90  #define CANTP_MAX_BS_VALUE                           (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    91  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    92  /* BitFields Mask */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    93  #define CANTP_TRIGGER_TRANSMIT_ON                    (0x20u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    94  #define CANTP_TC_DISABLED                            (0x10u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    95  #define CANTP_PADDINGON                              (0x08u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    96  #define CANTP_FUNCTIONAL                             (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    97  #define CANTP_FC_DISABLED                            (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    98  #define CANTP_FD_ENABLED                             (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	    99  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   100  /* Frame related defines */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   101  #define CANTP_SINGLE_FRAME                           (0x00u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   102  #define CANTP_FIRST_FRAME                            (0x01u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   103  #define CANTP_CONSECUTIVE_FRAME                      (0x02u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   104  #define CANTP_FLOWCONTROL_FRAME                      (0x03u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   105  #define CANTP_NUMBER_OF_FRAME_TYPES                  (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   106  #define CANTP_FRAMETYPE_OFFSET                       (0x04u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   107  #define CANTP_LOWERNIBBLE_MASK                       (0x0Fu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   108  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   109  #define CANTP_INVALID_DL                             (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   110  #define CANTP_INVALID_NOTIFY_VALUE                   (0xFFu)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   111  #define CANTP_INVALID_CHANNEL                        (CANTP_MAX_CHANNEL_SIZE)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   112  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   113  /* Idle Channel State */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   114  #define CANTP_IDLE                                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   115  /* Transmission Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   116  #define CANTP_TRANSMISSION                           (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   117  #define CANTP_TX_TRANSMISSION_REQUEST_ACCEPTED       (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   118  #define CANTP_TX_WAIT_FOR_TRANSMIT_CONFIRMATION      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   119  #define CANTP_TX_WAIT_FOR_FLOWCONTROL_FRAME          (3u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   120  #define CANTP_TX_SEND_CONSECUTIVE_FRAME              (4u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   121  /* Reception Channel States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   122  #define CANTP_RECEPTION                              (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   123  #define CANTP_RX_RECEPTION_REQUEST_ACCEPTED          (5u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   124  #define CANTP_RX_SEND_FC                             (6u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   125  #define CANTP_RX_WAIT_FOR_FCTRANSMIT_CONFIRMATION    (7u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   126  #define CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME          (8u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   127  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   128  #define CANTP_NUMBER_OF_SUBSTATES                    (9u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   130  #define CANTP_TX_PDUR_CONFIRMATION                   (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   131  #define CANTP_RX_PDUR_CONFIRMATION                   (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   132  #define CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES      (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   134  #define CANTP_TRIGGER_TX_CONFIRMATION                (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   135  #define CANTP_TRIGGER_RX_INDICATION                  (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   136  #define CANTP_NUMBER_OF_TRIGGER_POINTS               (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   137  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   138  /* Flow Control States */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   139  #define CANTP_FC_CTS                                 (0u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   140  #define CANTP_FC_WAIT                                (1u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   141  #define CANTP_FC_OVERFLOW                            (2u)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   142  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   143  /* Function like Macros */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   144  #define CanTp_Prv_PduRConfirmation(Api, id, result)  CanTp_PduRConfirmationApis[Api](id, result)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   145  #define CanTp_Prv_ActivateMainFunction(TriggerPoint) CanTp_SchMTriggerApis[TriggerPoint]()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   146  #define CanTp_Prv_ProcessFrame(Context, PduInfoPtr)  CanTp_ProcessFrame[(Context)->FrameType](Context, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   147  #define CanTp_Prv_FrameType(id)                      CanTp_PciFrameType[CanTp_Channel[id].PciId]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   148  #define CanTp_Prv_CreateFrame(id, PduInfoPtr)        CanTp_CreateFrame[CanTp_Prv_FrameType(id)](id, PduInfoPtr)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   149  #define CanTp_Prv_ExecuteState(ChannelId)            CanTp_StateFunctions[CanTp_SubState[ChannelId]](ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   150  #define CanTp_Prv_GetTxChannelId(id)                 CanTp_CfgPtr->TxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   151  #define CanTp_Prv_GetRxChannelId(id)                 CanTp_CfgPtr->RxSdu[id].ChannelId
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   152  #define CanTp_Prv_GetState(ChannelId)           	 CanTp_State[CanTp_SubState[ChannelId]]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   153  #define CanTp_Prv_GetRxCfgParam(id, param)           CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].Param[param]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   154  #define CanTp_Prv_GetRxCfgFcWaitMax(id)              CanTp_CfgPtr->Param[CanTp_CfgPtr->RxSdu[id].ParamId].FcWaitMax
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   155  #define CanTp_Prv_GetCfgAsArTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].AsArTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   156  #define CanTp_Prv_GetCfgBsBrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].BsBrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   157  #define CanTp_Prv_GetCfgCsCrTicks(Connection)        CanTp_CfgPtr->TimeOut[(Connection)->TimeOutId].CsCrTicks
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   158  #define CanTp_Prv_GetTxActiveBits(id)                CanTp_CfgPtr->TxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   159  #define CanTp_Prv_GetRxActiveBits(id)                CanTp_CfgPtr->RxSdu[CanTp_Channel[id].ActiveSduId].BitFields
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   160  #if(CANTP_DEV_ERROR_DETECT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   161  #define CanTp_Prv_ReportError(Api, Err)              (void)Det_ReportError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   162  #define CanTp_Prv_ReportRunTimeError(Api, Err)       (void)Det_ReportRuntimeError(CANTP_MODULE_ID, CANTP_INSTANCE_ID, \ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   163                                                        Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   164  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   165  #define CanTp_Prv_ReportError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   166  #define CanTp_Prv_ReportRunTimeError(Api, Err)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   167  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   168  #if(CANTP_CHANGE_PARAMETER_API != STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   169  #define CanTp_Prv_RxParamInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   170  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   171  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   172  #define CanTp_Prv_GetTxDl(Connection)                ((Connection)->TX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   173  #define CanTp_Prv_GetCanDl(FrameLength)              (CanTp_CanDlTable[FrameLength])
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   174  #define CanTp_Prv_GetRxDl(ChannelId)                 (CanTp_Channel[ChannelId].RX_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   175  #define CanTp_Prv_SetRxDl(ChannelId, Value)          (CanTp_Channel[ChannelId].RX_DL = (Value))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   176  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08) && ((RX_DL) != 0x0C) && ((RX_DL) != 0x10) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   177                                                        ((RX_DL) != 0x14) && ((RX_DL) != 0x18) && ((RX_DL) != 0x20) &&\ 
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   178                                                        ((RX_DL) != 0x30) && ((RX_DL) != 0x40))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   179  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   180  #define CanTp_Prv_GetTxDl(Connection)                (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   181  #define CanTp_Prv_GetCanDl(FrameLength)              (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   182  #define CanTp_Prv_GetRxDl(ChannelId)                 (CANTP_DEFAULT_CAN_DL)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   183  #define CanTp_Prv_SetRxDl(ChannelId, Value)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   184  #define CanTp_Prv_IsRxDlInValid(RX_DL)               (((RX_DL) != 0x08))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   185  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   186  #if(CANTP_TX_BURST_MODE != CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   187  #define CanTp_Prv_QInit()
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   188  #define CanTp_Prv_PutInQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   189  #define CanTp_Prv_GetFromQ(ChannelId)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   190  #define CanTp_Prv_BurstMainFunction(Id, Point)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   191  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   192  #define CanTp_Prv_BuildBugOn(condition)              ((void)sizeof(char[1 - 2*!!(condition)]))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   193  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   194  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   195   *    Internal Type definitions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   196   **********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   197  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   198  typedef Std_ReturnType (*CanTp_CreateFrameType)(CanTp_ChannelIdType ChannelId, PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   199  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   200  typedef struct /* To be used in CanTp_RxIndication context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   201  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   202  	boolean IsFunctional;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   203  	boolean IsPaddingOn;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   204  	boolean IsFdEnabled;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   205      uint8 Address;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   206      uint8 FrameType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   207  	uint8 FlowStatus;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   208  	uint8 SN;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   209      uint8 DataOffset;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   210  	uint8 AddressFormatId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   211  	uint8 AddressSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   212  	uint8 CAN_DL;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   213      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   214  	CanTp_SduIdType SduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   215      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   216      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   217      PduLengthType SduLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   218  }CanTp_RxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   219  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   220  typedef struct  /* To be used in CanTp_MainFunction CanIf Transmission context */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   221  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   222      uint8 PduRApiId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   223      uint8 PayLoadLength;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   224      uint8 BitFields;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   225      CanTp_ChannelIdType ChannelId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   226      PduIdType TxConfirmationId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   227      PduIdType PduId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   228      PduIdType PduRPduHandleId;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   229      PduLengthType RemBufSize;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   230      CanTp_TickType Value;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   231      CanTp_TickType ElapsedValue;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   232      CanTp_TickType CsTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   233  }CanTp_TxContextType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   234  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   235  typedef void (*CanTp_ProcessFrameType)(const CanTp_RxContextType *Context, const PduInfoType *PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   236  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   237  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   238  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   239  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   240      uint8 Head_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   241      uint8 Tail_u8;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   242      CanTp_ChannelIdType Queue[CANTP_BURST_QUEUE_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   243  }CanTp_QType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   244  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   245  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   246  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   247  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   248      uint8 Param[2];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   249  }CanTp_ParamPairType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   250  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   251  typedef void (*CanTp_StateFuncType)(CanTp_ChannelIdType ChannelId);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   252  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   253  typedef struct
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   254  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   255      uint8 TxBufferStatus;                           /* Buffer enquiry State management */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   256      #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   257      uint8 RX_DL;                                    /* CanFd Support: Receive Data Length */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   258      #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   259      uint8 PciId;                                    /* PCI mapping Id for Frame type under progress */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   260      uint8 FlowStatus;                               /* Flow Status of Flow Control Frames */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   261      uint8 SN;                                       /* Current Sequence Number */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   262      uint8 BS;                                       /* Block Size for transfer */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   263      CanTp_SduIdType ActiveSduId;                    /* Index of the currently active connection */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   264      uint16 FcWait;                                  /* No of FC WT Frames sent */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   265      PduLengthType BlockCfsRemaining;                /* Total no of CF before waiting/sending another FC */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   266      PduLengthType SduLengthRemaining;               /* Total no of CF required to be transferred */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   267      PduLengthType SduLength;                        /* Total Transfer Length during Transfer (Rx/Tx) */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   268      CanTp_TickType InitialTicks;                    /* Timestamp of Free Running Timer during events */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   269      CanTp_TickType STminTicks;                      /* STmin for this channel */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   270  }CanTp_ChannelType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   271  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   272  typedef CanTp_ChannelType *CanTp_ChannelPtrType;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   273  typedef void (*CanTp_PduRConfirmationApiType)(PduIdType id, Std_ReturnType result);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   274  typedef void (*CanTp_SchMTriggerApiType)(void);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   275  typedef Std_ReturnType (*CanTp_CanIfTransmitApiType)(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   276  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   277  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   278   *    Module Specific External data
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   279  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   280  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   281  #define CANTP_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   282  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   283  extern CanTp_ChannelType CanTp_Channel[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   284  extern CanTp_ChannelIdType CanTp_TxConfirmationChannel[CANTP_MAX_NO_OF_TX_NPDU];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   285  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   286  extern CanTp_QType CanTp_BurstQ;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   287  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   288  #if(CANTP_CHANGE_PARAMETER_API == STD_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   289  extern CanTp_ParamPairType CanTp_ParamPair[CANTP_MAX_RX_CONNECTION_SIZE];        /* Parameter pair is STMin and BS */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   290  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   291  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   292  extern volatile CanTp_TickType CanTp_MainFunctionTicks;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   293  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   294  extern const CanTp_ConfigType *CanTp_CfgPtr;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   295  #define CANTP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   296  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   297  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   298  #define CANTP_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   299  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   300  extern uint8 CanTp_SubState[CANTP_MAX_CHANNEL_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   301  #define CANTP_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   302  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   303  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   304  #define CANTP_START_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   305  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   306  extern const uint8 CanTp_State[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   307  extern const uint8 CanTp_AddressSize[CANTP_ADDRESS_ARRAY_SIZE]; /* [0->STANDARD][1->EXTENDED][2->MIXED] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   308  extern const uint8 CanTp_PciFrameType[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   309  extern const uint8 CanTp_PciSize[CANTP_PCI_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   310  #if(CANTP_CANFD_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   311  extern const uint8 CanTp_CanDlTable[CANTP_CANDL_ARRAY_SIZE];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   312  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   313  #define CANTP_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   314  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   315  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   316  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   317  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   318  extern const CanTp_ProcessFrameType CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   319  extern const CanTp_CreateFrameType CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   320  extern const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   321  extern const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   322  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   323  extern const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS];
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   324  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   325  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   326  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   327  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   328  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   329   *    Module Specific External(private) functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   330  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   331  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   332  #define CANTP_START_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   333  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   334  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   335  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   336  extern void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   337  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   338  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   339  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   340  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   341  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   342  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   343   *    Module Specific Inline functions
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   344  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   345  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   346  #if(CANTP_CYCLE_COUNTER == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   347  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   348   Function name    : CanTp_GetElapsedValue
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   349   Syntax           : CanTp_GetElapsedValue(&Value, &ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   350   Description      : Library function to emulate GetElapsedValue Api of Os.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   351   Parameter        : CanTp_TickType*, CanTp_TickType*
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   352   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   353  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   354  LOCAL_INLINE void CanTp_GetElapsedValue(CanTp_TickType *Value, CanTp_TickType *ElapsedValue)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   355  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   356      CanTp_TickType ValueIn = *Value;
	ld.hu	d15,[a10]0
.L1057:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   357  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   358      *Value = CanTp_MainFunctionTicks;
	movh.a	a5,#@his(CanTp_MainFunctionTicks)
	lea	a5,[a5]@los(CanTp_MainFunctionTicks)
	ld.hu	d0,[a5]0
.L1959:
	st.h	[a15],d0
.L1960:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   359  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.h	   360      *ElapsedValue = *Value - ValueIn;  /* As both are positive, wrap-around case will be taken care automatically. */
	ld.hu	d0,[a10]0
.L1961:
	sub	d0,d15
.L1962:
	st.h	[a4],d0
.L791:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1081  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1082  	SchM_Enter_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1083  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1084  	if(CanTp_SubState[ChannelId] == CANTP_RX_WAIT_FOR_CONSECUTIVE_FRAME)
	movh.a	a15,#@his(CanTp_SubState)
	lea	a15,[a15]@los(CanTp_SubState)
.L1963:
	addsc.a	a12,a15,d4,#0
	ld.bu	d0,[a12]
.L1964:
	mov	d15,#8
.L1058:
	jne	d15,d0,.L221
.L1965:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1085  	{
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1086  	    Connection = CanTp_CfgPtr->RxSdu + Channel->ActiveSduId;
	movh.a	a15,#@his(CanTp_CfgPtr)
	lea	a15,[a15]@los(CanTp_CfgPtr)
	ld.a	a15,[a15]
.L1966:
	ld.bu	d15,[a2]6
.L1967:
	mul	d15,d15,#12
.L1968:
	ld.a	a2,[a15]16
.L1056:
	addsc.a	a2,a2,d15,#0
.L1059:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1087          if(ElapsedValue > CanTp_Prv_GetCfgCsCrTicks(Connection))
	ld.hu	d0,[a10]2
.L1969:
	ld.bu	d15,[a2]3
	mul	d15,d15,#6
	ld.a	a15,[a15]20
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]4
.L1970:
	jge.u	d15,d0,.L222
.L1971:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1088          {   /* TRACE[SWS_CanTp_00313][SWS_CanTp_00229] */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1089              CanTp_Prv_PduRConfirmation(CANTP_RX_PDUR_CONFIRMATION, Connection->PduRPduHandleId, E_NOT_OK);
	movh.a	a15,#@his(CanTp_PduRConfirmationApis)
	lea	a15,[a15]@los(CanTp_PduRConfirmationApis)
	ld.a	a15,[a15]4
	ld.hu	d4,[a2]10
.L1054:
	mov	d5,#1
	calli	a15
.L1060:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1090              CanTp_Prv_ReportRunTimeError(CANTP_MAINFUNCTION, CANTP_E_RX_COM);
	mov	d4,#35
	mov	d5,#0
	mov	d6,#6
	mov	d7,#192
	call	Det_ReportRuntimeError
.L1972:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1091              CanTp_SubState[ChannelId] = CANTP_IDLE;
	mov	d15,#0
.L1973:
	st.b	[a12],d15
.L222:
.L221:

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1092          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1093      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1094  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1095      SchM_Exit_CanTp_EXCLUSIVE_AREA();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1096  }
	ret
.L784:
	
__CanTp_Prv_RxWaitForConsecutiveFrame_function_end:
	.size	CanTp_Prv_RxWaitForConsecutiveFrame,__CanTp_Prv_RxWaitForConsecutiveFrame_function_end-CanTp_Prv_RxWaitForConsecutiveFrame
.L352:
	; End of function
	
	.sdecl	'.bss.CanTp_Prv.CanTp_Channel',data,cluster('CanTp_Channel')
	.sect	'.bss.CanTp_Prv.CanTp_Channel'
	.global	CanTp_Channel
	.align	2
CanTp_Channel:	.type	object
	.size	CanTp_Channel,40
	.space	40
	.sdecl	'.bss.CanTp_Prv.CanTp_TxConfirmationChannel',data,cluster('CanTp_TxConfirmationChannel')
	.sect	'.bss.CanTp_Prv.CanTp_TxConfirmationChannel'
	.global	CanTp_TxConfirmationChannel
CanTp_TxConfirmationChannel:	.type	object
	.size	CanTp_TxConfirmationChannel,1
	.space	1
	.sdecl	'.bss.CanTp_Prv.CanTp_MainFunctionTicks',data,cluster('CanTp_MainFunctionTicks')
	.sect	'.bss.CanTp_Prv.CanTp_MainFunctionTicks'
	.global	CanTp_MainFunctionTicks
	.align	2
CanTp_MainFunctionTicks:	.type	object
	.size	CanTp_MainFunctionTicks,2
	.space	2
	.sdecl	'.bss.CanTp_Prv.CanTp_CfgPtr',data,cluster('CanTp_CfgPtr')
	.sect	'.bss.CanTp_Prv.CanTp_CfgPtr'
	.global	CanTp_CfgPtr
	.align	4
CanTp_CfgPtr:	.type	object
	.size	CanTp_CfgPtr,4
	.space	4
	.sdecl	'.bss.CanTp_Prv.CanTp_SubState',data,cluster('CanTp_SubState')
	.sect	'.bss.CanTp_Prv.CanTp_SubState'
	.global	CanTp_SubState
CanTp_SubState:	.type	object
	.size	CanTp_SubState,2
	.space	2
	.sdecl	'.rodata.CanTp_Prv.CanTp_State',data,rom,cluster('CanTp_State')
	.sect	'.rodata.CanTp_Prv.CanTp_State'
	.global	CanTp_State
CanTp_State:	.type	object
	.size	CanTp_State,9
	.space	1
	.byte	1,1,1,1
	.byte	2,2,2,2
	.sdecl	'.rodata.CanTp_Prv.CanTp_AddressSize',data,rom,cluster('CanTp_AddressSize')
	.sect	'.rodata.CanTp_Prv.CanTp_AddressSize'
	.global	CanTp_AddressSize
CanTp_AddressSize:	.type	object
	.size	CanTp_AddressSize,5
	.space	1
	.byte	1,1,1
	.space	1
	.sdecl	'.rodata.CanTp_Prv.CanTp_PciFrameType',data,rom,cluster('CanTp_PciFrameType')
	.sect	'.rodata.CanTp_Prv.CanTp_PciFrameType'
	.global	CanTp_PciFrameType
CanTp_PciFrameType:	.type	object
	.size	CanTp_PciFrameType,6
	.space	2
	.byte	1,1,2,3
	.sdecl	'.rodata.CanTp_Prv.CanTp_PciSize',data,rom,cluster('CanTp_PciSize')
	.sect	'.rodata.CanTp_Prv.CanTp_PciSize'
	.global	CanTp_PciSize
CanTp_PciSize:	.type	object
	.size	CanTp_PciSize,6
	.byte	1,2,2,6
	.byte	1,3
	.sdecl	'.rodata.CanTp_Prv.CanTp_CanDlTable',data,rom,cluster('CanTp_CanDlTable')
	.sect	'.rodata.CanTp_Prv.CanTp_CanDlTable'
	.global	CanTp_CanDlTable
CanTp_CanDlTable:	.type	object
	.size	CanTp_CanDlTable,65
	.byte	8,8,8,8
	.byte	8,8,8,8
	.byte	8,12,12,12
	.byte	12,16,16,16
	.byte	16,20,20,20
	.byte	20,24,24,24
	.byte	24,32,32,32
	.byte	32,32,32,32
	.byte	32,48,48,48
	.byte	48,48,48,48
	.byte	48,48,48,48
	.byte	48,48,48,48
	.byte	48,64,64,64
	.byte	64,64,64,64
	.byte	64,64,64,64
	.byte	64,64,64,64
	.byte	64
	.sdecl	'.rodata.CanTp_Prv.CanTp_StateFunctions',data,rom,cluster('CanTp_StateFunctions')
	.sect	'.rodata.CanTp_Prv.CanTp_StateFunctions'
	.global	CanTp_StateFunctions
	.align	4
CanTp_StateFunctions:	.type	object
	.size	CanTp_StateFunctions,36
	.word	CanTp_Prv_Idle,CanTp_Prv_TxTransmissionRequestAccepted,CanTp_Prv_TxWaitForTransmitConfirmation,CanTp_Prv_TxWaitForFlowControlFrame
	.word	CanTp_Prv_TxSendConsecutiveFrame,CanTp_Prv_RxReceptionRequestAccepted,CanTp_Prv_RxSendFlowControlFrame,CanTp_Prv_RxWaitForFcTransmitConfirmation
	.word	CanTp_Prv_RxWaitForConsecutiveFrame
	.sdecl	'.rodata.CanTp_Prv.CanTp_ProcessFrame',data,rom,cluster('CanTp_ProcessFrame')
	.sect	'.rodata.CanTp_Prv.CanTp_ProcessFrame'
	.global	CanTp_ProcessFrame
	.align	4
CanTp_ProcessFrame:	.type	object
	.size	CanTp_ProcessFrame,16
	.word	CanTp_Prv_ProcessRxSingleFrame,CanTp_Prv_ProcessRxFirstFrame,CanTp_Prv_ProcessRxConsecutiveFrame,CanTp_Prv_ProcessRxFlowControlFrame
	.sdecl	'.rodata.CanTp_Prv.CanTp_CreateFrame',data,rom,cluster('CanTp_CreateFrame')
	.sect	'.rodata.CanTp_Prv.CanTp_CreateFrame'
	.global	CanTp_CreateFrame
	.align	4
CanTp_CreateFrame:	.type	object
	.size	CanTp_CreateFrame,16
	.word	CanTp_Prv_CreateTxSingleFrame,CanTp_Prv_CreateTxFirstFrame,CanTp_Prv_CreateTxConsecutiveFrame,CanTp_Prv_CreateTxFlowControlFrame
	.sdecl	'.rodata.CanTp_Prv.CanTp_PduRConfirmationApis',data,rom,cluster('CanTp_PduRConfirmationApis')
	.sect	'.rodata.CanTp_Prv.CanTp_PduRConfirmationApis'
	.global	CanTp_PduRConfirmationApis
	.align	4
CanTp_PduRConfirmationApis:	.type	object
	.size	CanTp_PduRConfirmationApis,8
	.word	PduR_CanTpTxConfirmation,PduR_CanTpRxIndication
	.calls	'__INDIRECT__','PduR_CanTpRxIndication'
	.calls	'__INDIRECT__','PduR_CanTpTxConfirmation'
	.calls	'__INDIRECT__','CanTp_Prv_ProcessRxSingleFrame'
	.calls	'__INDIRECT__','CanTp_Prv_ProcessRxFirstFrame'
	.calls	'__INDIRECT__','CanTp_Prv_ProcessRxConsecutiveFrame'
	.calls	'__INDIRECT__','CanTp_Prv_ProcessRxFlowControlFrame'
	.calls	'__INDIRECT__','CanTp_Prv_CreateTxSingleFrame'
	.calls	'__INDIRECT__','CanTp_Prv_CreateTxFirstFrame'
	.calls	'__INDIRECT__','CanTp_Prv_CreateTxConsecutiveFrame'
	.calls	'__INDIRECT__','CanTp_Prv_CreateTxFlowControlFrame'
	.calls	'__INDIRECT__','CanTp_Prv_TxSendConsecutiveFrame'
	.calls	'__INDIRECT__','CanTp_Prv_TxWaitForFlowControlFrame'
	.calls	'__INDIRECT__','CanTp_Prv_TxWaitForTransmitConfirmation'
	.calls	'__INDIRECT__','CanTp_Prv_TxTransmissionRequestAccepted'
	.calls	'__INDIRECT__','CanTp_Prv_Idle'
	.calls	'__INDIRECT__','CanTp_Prv_RxReceptionRequestAccepted'
	.calls	'__INDIRECT__','CanTp_Prv_RxSendFlowControlFrame'
	.calls	'__INDIRECT__','CanTp_Prv_RxWaitForFcTransmitConfirmation'
	.calls	'__INDIRECT__','CanTp_Prv_RxWaitForConsecutiveFrame'
	.calls	'CanTp_Prv_GetTxBuffer','PduR_CanTpCopyTxData'
	.calls	'CanTp_Prv_GetTxBuffer','__INDIRECT__'
	.calls	'CanTp_Prv_GetTxBuffer','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_ProcessRxSingleFrame','__INDIRECT__'
	.calls	'CanTp_Prv_ProcessRxSingleFrame','PduR_CanTpStartOfReception'
	.calls	'CanTp_Prv_ProcessRxSingleFrame','PduR_CanTpCopyRxData'
	.calls	'CanTp_Prv_ProcessRxFirstFrame','__INDIRECT__'
	.calls	'CanTp_Prv_ProcessRxFirstFrame','PduR_CanTpStartOfReception'
	.calls	'CanTp_Prv_ProcessRxFirstFrame','PduR_CanTpCopyRxData'
	.calls	'CanTp_Prv_ProcessRxFirstFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_ProcessRxConsecutiveFrame','PduR_CanTpCopyRxData'
	.calls	'CanTp_Prv_ProcessRxConsecutiveFrame','__INDIRECT__'
	.calls	'CanTp_Prv_ProcessRxFlowControlFrame','__INDIRECT__'
	.calls	'CanTp_Prv_CreateTxSingleFrame','PduR_CanTpCopyTxData'
	.calls	'CanTp_Prv_CreateTxSingleFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_CreateTxFirstFrame','PduR_CanTpCopyTxData'
	.calls	'CanTp_Prv_CreateTxFirstFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_CreateTxConsecutiveFrame','PduR_CanTpCopyTxData'
	.calls	'CanTp_Prv_CreateTxConsecutiveFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_TxSendConsecutiveFrame','CanTp_Prv_GetTxBuffer'
	.calls	'CanTp_Prv_TxSendConsecutiveFrame','__INDIRECT__'
	.calls	'CanTp_Prv_TxSendConsecutiveFrame','CanIf_Transmit'
	.calls	'CanTp_Prv_TxSendConsecutiveFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_TxWaitForFlowControlFrame','__INDIRECT__'
	.calls	'CanTp_Prv_TxWaitForFlowControlFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_TxWaitForTransmitConfirmation','__INDIRECT__'
	.calls	'CanTp_Prv_TxWaitForTransmitConfirmation','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_TxTransmissionRequestAccepted','CanTp_Prv_GetTxBuffer'
	.calls	'CanTp_Prv_TxTransmissionRequestAccepted','__INDIRECT__'
	.calls	'CanTp_Prv_TxTransmissionRequestAccepted','CanIf_Transmit'
	.calls	'CanTp_Prv_TxTransmissionRequestAccepted','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_RxReceptionRequestAccepted','__INDIRECT__'
	.calls	'CanTp_Prv_RxReceptionRequestAccepted','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_RxSendFlowControlFrame','PduR_CanTpCopyRxData'
	.calls	'CanTp_Prv_RxSendFlowControlFrame','__INDIRECT__'
	.calls	'CanTp_Prv_RxSendFlowControlFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_RxSendFlowControlFrame','CanIf_Transmit'
	.calls	'CanTp_Prv_RxWaitForFcTransmitConfirmation','__INDIRECT__'
	.calls	'CanTp_Prv_RxWaitForFcTransmitConfirmation','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_RxWaitForConsecutiveFrame','__INDIRECT__'
	.calls	'CanTp_Prv_RxWaitForConsecutiveFrame','Det_ReportRuntimeError'
	.calls	'CanTp_Prv_GetTxBuffer','',8
	.calls	'CanTp_Prv_ProcessRxSingleFrame','',24
	.calls	'CanTp_Prv_ProcessRxFirstFrame','',24
	.calls	'CanTp_Prv_ProcessRxConsecutiveFrame','',16
	.calls	'CanTp_Prv_ProcessRxFlowControlFrame','',8
	.calls	'CanTp_Prv_CreateTxSingleFrame','',16
	.calls	'CanTp_Prv_CreateTxFirstFrame','',16
	.calls	'CanTp_Prv_CreateTxConsecutiveFrame','',16
	.calls	'CanTp_Prv_CreateTxFlowControlFrame','',0
	.calls	'CanTp_Prv_TxSendConsecutiveFrame','',112
	.calls	'CanTp_Prv_TxWaitForFlowControlFrame','',8
	.calls	'CanTp_Prv_TxWaitForTransmitConfirmation','',8
	.calls	'CanTp_Prv_TxTransmissionRequestAccepted','',112
	.calls	'CanTp_Prv_Idle','',0
	.calls	'CanTp_Prv_RxReceptionRequestAccepted','',8
	.calls	'CanTp_Prv_RxSendFlowControlFrame','',112
	.calls	'CanTp_Prv_RxWaitForFcTransmitConfirmation','',8
	.extern	PduR_CanTpRxIndication
	.extern	PduR_CanTpTxConfirmation
	.extern	PduR_CanTpCopyRxData
	.extern	PduR_CanTpStartOfReception
	.extern	PduR_CanTpCopyTxData
	.extern	CanIf_Transmit
	.extern	Det_ReportRuntimeError
	.extern	__INDIRECT__
	.calls	'CanTp_Prv_RxWaitForConsecutiveFrame','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L260:
	.word	166341
	.half	3
	.word	.L261
	.byte	4
.L259:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L262
.L393:
	.byte	2
	.byte	'unsigned char',0,1,8
.L489:
	.byte	3
	.word	137
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	154
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	154
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	137
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	137
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	137
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	154
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	137
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	137
	.byte	6,0
.L386:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	467
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	489
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	489
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	137
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	467
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	467
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	489
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	137
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	137
	.byte	6,0
.L514:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	806
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	822
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	822
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	137
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	806
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	806
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	822
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	137
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	137
	.byte	6,0,7
	.byte	'Gtm_GetMcsRamRstStat',0,3,4,221,33,32
	.word	137
	.byte	1,1,5
	.byte	'McsModule',0,4,221,33,60
	.word	137
	.byte	6,0,3
	.word	467
.L404:
	.byte	4
	.byte	'CanTp_GetElapsedValue',0,3,5,226,2,19,1,1
.L407:
	.byte	5
	.byte	'Value',0,5,226,2,57
	.word	1193
.L409:
	.byte	5
	.byte	'ElapsedValue',0,5,226,2,80
	.word	1193
.L411:
	.byte	6,0
.L520:
	.byte	7
	.byte	'CanTp_Prv_GetBit',0,3,5,244,2,22
	.word	137
	.byte	1,1
.L522:
	.byte	5
	.byte	'Value',0,5,244,2,45
	.word	137
.L524:
	.byte	5
	.byte	'Mask',0,5,244,2,58
	.word	137
.L526:
	.byte	6,0
.L530:
	.byte	4
	.byte	'CanTp_Prv_ArrayInit',0,3,5,143,3,19,1,1
.L533:
	.byte	5
	.byte	'ArrayPtr',0,5,143,3,46
	.word	154
.L535:
	.byte	5
	.byte	'Length',0,5,143,3,63
	.word	806
.L537:
	.byte	5
	.byte	'Item',0,5,143,3,77
	.word	137
.L539:
	.byte	6,0
.L493:
	.byte	7
	.byte	'CanTp_Prv_GetTxBlockCfs',0,3,5,151,4,28
	.word	467
	.byte	1,1
.L495:
	.byte	5
	.byte	'ChannelId',0,5,151,4,72
	.word	137
.L497:
	.byte	6,0
.L743:
	.byte	7
	.byte	'CanTp_Prv_GetRxBlockCfs',0,3,5,170,4,28
	.word	467
	.byte	1,1
.L744:
	.byte	5
	.byte	'ChannelId',0,5,170,4,72
	.word	137
.L746:
	.byte	6,0
.L620:
	.byte	8,5,220,1,9,18,9
	.byte	'PduRApiId',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'PayLoadLength',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'BitFields',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'ChannelId',0
	.word	137
	.byte	1,2,35,3,9
	.byte	'TxConfirmationId',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'PduId',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'PduRPduHandleId',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'RemBufSize',0
	.word	467
	.byte	2,2,35,10,9
	.byte	'Value',0
	.word	467
	.byte	2,2,35,12,9
	.byte	'ElapsedValue',0
	.word	467
	.byte	2,2,35,14,9
	.byte	'CsTicks',0
	.word	467
	.byte	2,2,35,16,0,10
	.word	1519
.L382:
	.byte	3
	.word	1746
.L395:
	.byte	8,6,71,9,8,9
	.byte	'SduDataPtr',0
	.word	154
	.byte	4,2,35,0,9
	.byte	'SduLength',0
	.word	467
	.byte	2,2,35,4,0,10
	.word	1756
.L391:
	.byte	3
	.word	1801
.L628:
	.byte	4
	.byte	'CanTp_Prv_CanIfTransmit',0,3,5,164,5,19,1,1
.L631:
	.byte	5
	.byte	'Context',0,5,164,5,70
	.word	1751
.L633:
	.byte	5
	.byte	'CanIfTxInfoPtr',0,5,164,5,98
	.word	1806
.L635:
	.byte	11,6,0,0
.L752:
	.byte	4
	.byte	'CanTp_Prv_FcTransmit',0,3,5,206,5,19,1,1
.L754:
	.byte	5
	.byte	'Context',0,5,206,5,67
	.word	1751
.L756:
	.byte	5
	.byte	'CanIfTxInfoPtr',0,5,206,5,95
	.word	1806
.L758:
	.byte	5
	.byte	'IsFcTransmitReady',0,5,207,5,48
	.word	137
.L760:
	.byte	5
	.byte	'Value',0,5,207,5,82
	.word	467
.L762:
	.byte	11,6,0,0,8,5,200,1,9,20,9
	.byte	'IsFunctional',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'IsPaddingOn',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'IsFdEnabled',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'Address',0
	.word	137
	.byte	1,2,35,3,9
	.byte	'FrameType',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'FlowStatus',0
	.word	137
	.byte	1,2,35,5,9
	.byte	'SN',0
	.word	137
	.byte	1,2,35,6,9
	.byte	'DataOffset',0
	.word	137
	.byte	1,2,35,7,9
	.byte	'AddressFormatId',0
	.word	137
	.byte	1,2,35,8,9
	.byte	'AddressSize',0
	.word	137
	.byte	1,2,35,9,9
	.byte	'CAN_DL',0
	.word	137
	.byte	1,2,35,10,9
	.byte	'ChannelId',0
	.word	137
	.byte	1,2,35,11,9
	.byte	'SduId',0
	.word	137
	.byte	1,2,35,12,9
	.byte	'PduId',0
	.word	467
	.byte	2,2,35,14,9
	.byte	'PduRPduHandleId',0
	.word	467
	.byte	2,2,35,16,9
	.byte	'SduLength',0
	.word	467
	.byte	2,2,35,18,0,3
	.word	2004
	.byte	7
	.byte	'CanTp_Prv_GetFcActiveChannel',0,3,5,246,5,29
	.word	137
	.byte	1,1,5
	.byte	'Context',0,5,246,5,79
	.word	2318
	.byte	6,0,10
	.word	2004
.L389:
	.byte	3
	.word	2383
.L413:
	.byte	7
	.byte	'CanTp_Prv_GetConnectionAcceptance',0,3,5,228,7,29
	.word	137
	.byte	1,1
.L416:
	.byte	5
	.byte	'Context',0,5,228,7,90
	.word	2388
.L418:
	.byte	5
	.byte	'PduInfoPtr',0,5,229,7,82
	.word	1806
.L420:
	.byte	6,0
.L482:
	.byte	4
	.byte	'CanTp_Prv_SetTxBlockInfo',0,3,5,144,8,19,1,1
.L484:
	.byte	5
	.byte	'Context',0,5,144,8,71
	.word	2388
.L486:
	.byte	5
	.byte	'PduInfoPtr',0,5,144,8,99
	.word	1806
.L488:
	.byte	11,6,0,0,12,6,81,9,4,13
	.byte	'TP_STMIN',0,0,13
	.byte	'TP_BS',0,1,13
	.byte	'TP_BC',0,2,13
	.byte	'TP_BFS',0,3,0
.L594:
	.byte	7
	.byte	'CanTp_Prv_GetRxParam',0,3,5,193,8,20
	.word	137
	.byte	1,1
.L596:
	.byte	5
	.byte	'id',0,5,193,8,57
	.word	137
.L598:
	.byte	5
	.byte	'parameter',0,5,193,8,77
	.word	2552
.L600:
	.byte	6,0,10
	.word	467
.L725:
	.byte	4
	.byte	'CanTp_Prv_SetRxBlockInfo',0,3,5,214,8,19,1,1
.L728:
	.byte	5
	.byte	'ChannelId',0,5,214,8,64
	.word	137
.L730:
	.byte	5
	.byte	'RemBufSize',0,5,214,8,95
	.word	2660
.L732:
	.byte	11,6,6,0,0
.L466:
	.byte	4
	.byte	'CanTp_Prv_PrepareFcTransmit',0,3,5,191,9,19,1,1
.L468:
	.byte	5
	.byte	'ChannelId',0,5,191,9,67
	.word	137
.L470:
	.byte	6,0,14
	.word	159
	.byte	15
	.word	189
	.byte	15
	.word	204
	.byte	6,0,14
	.word	227
	.byte	15
	.word	259
	.byte	15
	.word	274
	.byte	6,0,14
	.word	297
	.byte	15
	.word	337
	.byte	15
	.word	351
	.byte	6,0,14
	.word	374
	.byte	15
	.word	407
	.byte	15
	.word	421
	.byte	15
	.word	442
	.byte	6,0,14
	.word	494
	.byte	15
	.word	525
	.byte	15
	.word	540
	.byte	6,0,14
	.word	563
	.byte	15
	.word	596
	.byte	15
	.word	611
	.byte	6,0,14
	.word	634
	.byte	15
	.word	675
	.byte	15
	.word	689
	.byte	6,0,14
	.word	712
	.byte	15
	.word	746
	.byte	15
	.word	760
	.byte	15
	.word	781
	.byte	6,0,14
	.word	827
	.byte	15
	.word	858
	.byte	15
	.word	873
	.byte	6,0,14
	.word	896
	.byte	15
	.word	929
	.byte	15
	.word	944
	.byte	6,0,14
	.word	967
	.byte	15
	.word	1008
	.byte	15
	.word	1022
	.byte	6,0,14
	.word	1045
	.byte	15
	.word	1079
	.byte	15
	.word	1093
	.byte	15
	.word	1114
	.byte	6,0,16
	.byte	'PduR_CanTpRxIndication',0,7,21,32,1,1,1,1,5
	.byte	'id',0,7,21,82
	.word	467
	.byte	5
	.byte	'std',0,7,22,86
	.word	137
	.byte	0,16
	.byte	'PduR_CanTpTxConfirmation',0,7,25,32,1,1,1,1,5
	.byte	'id',0,7,25,84
	.word	467
	.byte	5
	.byte	'std',0,7,26,88
	.word	137
	.byte	0
.L398:
	.byte	12,6,90,9,4,13
	.byte	'BUFREQ_OK',0,0,13
	.byte	'BUFREQ_E_NOT_OK',0,1,13
	.byte	'BUFREQ_E_BUSY',0,2,13
	.byte	'BUFREQ_E_OVFL',0,3,0,3
	.word	467
	.byte	17
	.byte	'PduR_CanTpCopyRxData',0,7,37,45
	.word	3130
	.byte	1,1,1,1,5
	.byte	'id',0,7,37,93
	.word	467
	.byte	5
	.byte	'info',0,7,38,117
	.word	1806
	.byte	5
	.byte	'bufferSizePtr',0,7,39,115
	.word	3198
	.byte	0,17
	.byte	'PduR_CanTpStartOfReception',0,7,42,45
	.word	3130
	.byte	1,1,1,1,5
	.byte	'id',0,7,42,99
	.word	467
	.byte	5
	.byte	'info',0,7,43,117
	.word	1806
	.byte	5
	.byte	'TpSduLength',0,7,44,103
	.word	467
	.byte	5
	.byte	'bufferSizePtr',0,7,45,119
	.word	3198
	.byte	0,12,6,113,9,4,13
	.byte	'TP_DATACONF',0,0,13
	.byte	'TP_DATARETRY',0,1,13
	.byte	'TP_CONFPENDING',0,2,0,8,6,121,9,8,9
	.byte	'TpDataState',0
	.word	3389
	.byte	4,2,35,0,9
	.byte	'TxTpDataCnt',0
	.word	467
	.byte	2,2,35,4,0,3
	.word	3441
	.byte	17
	.byte	'PduR_CanTpCopyTxData',0,7,47,45
	.word	3130
	.byte	1,1,1,1,5
	.byte	'id',0,7,47,93
	.word	467
	.byte	5
	.byte	'info',0,7,48,117
	.word	1806
	.byte	5
	.byte	'retry',0,7,49,115
	.word	3489
	.byte	5
	.byte	'availableDataPtr',0,7,50,117
	.word	3198
	.byte	0,14
	.word	1139
	.byte	15
	.word	1172
	.byte	6,0,17
	.byte	'CanIf_Transmit',0,8,82,41
	.word	137
	.byte	1,1,1,1,5
	.byte	'CanIfTxSduId',0,8,82,81
	.word	467
	.byte	5
	.byte	'CanIfTxInfoPtr',0,8,83,59
	.word	1806
	.byte	0,17
	.byte	'Det_ReportRuntimeError',0,9,126,16
	.word	137
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,9,126,46
	.word	467
	.byte	5
	.byte	'InstanceId',0,9,126,62
	.word	137
	.byte	5
	.byte	'ApiId',0,9,126,80
	.word	137
	.byte	5
	.byte	'ErrorId',0,9,126,93
	.word	137
	.byte	0,14
	.word	1198
	.byte	15
	.word	1228
	.byte	15
	.word	1243
	.byte	6,0,14
	.word	1267
	.byte	15
	.word	1296
	.byte	15
	.word	1311
	.byte	6,0,14
	.word	1327
	.byte	15
	.word	1355
	.byte	15
	.word	1373
	.byte	15
	.word	1389
	.byte	6,0,14
	.word	1405
	.byte	15
	.word	1441
	.byte	6,0,14
	.word	1462
	.byte	15
	.word	1498
	.byte	6,0,14
	.word	1811
	.byte	15
	.word	1843
	.byte	15
	.word	1860
	.byte	11,18
	.word	1267
	.byte	15
	.word	1296
	.byte	15
	.word	1311
	.byte	19
	.word	1325
	.byte	0,6,0,0,14
	.word	1888
	.byte	15
	.word	1917
	.byte	15
	.word	1934
	.byte	15
	.word	1958
	.byte	15
	.word	1985
	.byte	11,18
	.word	1811
	.byte	15
	.word	1843
	.byte	15
	.word	1860
	.byte	20
	.word	1884
	.byte	18
	.word	1267
	.byte	15
	.word	1296
	.byte	15
	.word	1311
	.byte	19
	.word	1325
	.byte	0,19
	.word	1885
	.byte	0,0,6,0,0,14
	.word	2323
	.byte	15
	.word	2364
	.byte	6,0,14
	.word	2393
	.byte	15
	.word	2439
	.byte	15
	.word	2456
	.byte	6,0,14
	.word	2478
	.byte	15
	.word	2511
	.byte	15
	.word	2528
	.byte	11,18
	.word	1405
	.byte	15
	.word	1441
	.byte	19
	.word	1460
	.byte	0,6,0,0,14
	.word	2594
	.byte	15
	.word	2627
	.byte	15
	.word	2639
	.byte	6,0,14
	.word	2665
	.byte	15
	.word	2698
	.byte	15
	.word	2717
	.byte	11,18
	.word	2594
	.byte	15
	.word	2627
	.byte	15
	.word	2639
	.byte	19
	.word	2658
	.byte	0,6,18
	.word	1462
	.byte	15
	.word	1498
	.byte	19
	.word	1517
	.byte	0,6,0,0,14
	.word	2742
	.byte	15
	.word	2778
	.byte	6,0
.L384:
	.byte	3
	.word	1756
	.byte	8,5,253,1,9,20,9
	.byte	'TxBufferStatus',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'RX_DL',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'PciId',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'FlowStatus',0
	.word	137
	.byte	1,2,35,3,9
	.byte	'SN',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'BS',0
	.word	137
	.byte	1,2,35,5,9
	.byte	'ActiveSduId',0
	.word	137
	.byte	1,2,35,6,9
	.byte	'FcWait',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'BlockCfsRemaining',0
	.word	467
	.byte	2,2,35,10,9
	.byte	'SduLengthRemaining',0
	.word	467
	.byte	2,2,35,12,9
	.byte	'SduLength',0
	.word	467
	.byte	2,2,35,14,9
	.byte	'InitialTicks',0
	.word	467
	.byte	2,2,35,16,9
	.byte	'STminTicks',0
	.word	467
	.byte	2,2,35,18,0
.L402:
	.byte	3
	.word	4129
	.byte	3
	.word	4129
.L457:
	.byte	21
	.byte	'CanTp_ChannelPtrType',0,5,144,2,28
	.word	4387
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	22
	.byte	'CanTp_TxSduStructType',0,10,29,8,12,9
	.byte	'TX_DL',0
	.word	4427
	.byte	1,2,35,0,9
	.byte	'BitFields',0
	.word	4432
	.byte	1,2,35,1,9
	.byte	'Address',0
	.word	4437
	.byte	1,2,35,2,9
	.byte	'AddressFormatId',0
	.word	4442
	.byte	1,2,35,3,9
	.byte	'TimeOutId',0
	.word	4447
	.byte	1,2,35,4,9
	.byte	'ChannelId',0
	.word	4452
	.byte	1,2,35,5,9
	.byte	'TxConfirmationId',0
	.word	4457
	.byte	2,2,35,6,9
	.byte	'TxPduId',0
	.word	4462
	.byte	2,2,35,8,9
	.byte	'PduRPduHandleId',0
	.word	4467
	.byte	2,2,35,10,0,10
	.word	4472
.L499:
	.byte	3
	.word	4682
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	22
	.byte	'CanTp_RxSduStructType',0,10,42,8,12,9
	.byte	'BitFields',0
	.word	4692
	.byte	1,2,35,0,9
	.byte	'Address',0
	.word	4697
	.byte	1,2,35,1,9
	.byte	'AddressFormatId',0
	.word	4702
	.byte	1,2,35,2,9
	.byte	'TimeOutId',0
	.word	4707
	.byte	1,2,35,3,9
	.byte	'ParamId',0
	.word	4712
	.byte	1,2,35,4,9
	.byte	'ChannelId',0
	.word	4717
	.byte	1,2,35,5,9
	.byte	'TxConfirmationId',0
	.word	4722
	.byte	2,2,35,6,9
	.byte	'TxPduId',0
	.word	4727
	.byte	2,2,35,8,9
	.byte	'PduRPduHandleId',0
	.word	4732
	.byte	2,2,35,10,0,10
	.word	4737
.L592:
	.byte	3
	.word	4949
.L640:
	.byte	23,64
	.word	137
	.byte	24,63,0,25
	.byte	'__INDIRECT__',0,11,1,1,1,1,1,26,1,3
	.word	4988
	.byte	21
	.byte	'__codeptr',0,11,1,1
	.word	4990
	.byte	2
	.byte	'char',0,1,6,21
	.byte	'sint8',0,12,76,25
	.word	5013
	.byte	21
	.byte	'uint8',0,12,81,25
	.word	137
	.byte	21
	.byte	'uint16',0,12,91,25
	.word	467
	.byte	21
	.byte	'uint32',0,12,106,24
	.word	806
	.byte	2
	.byte	'unsigned long long int',0,8,7,21
	.byte	'uint64',0,12,111,30
	.word	5079
	.byte	21
	.byte	'boolean',0,12,127,25
	.word	137
	.byte	2
	.byte	'unsigned long int',0,4,7,21
	.byte	'uint8_least',0,12,137,1,25
	.word	5136
	.byte	21
	.byte	'uint16_least',0,12,147,1,25
	.word	5136
	.byte	21
	.byte	'StatusType',0,13,191,1,27
	.word	137
	.byte	21
	.byte	'Std_ReturnType',0,13,199,1,15
	.word	137
	.byte	8,13,206,1,9,8,9
	.byte	'vendorID',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'moduleID',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'sw_major_version',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'sw_minor_version',0
	.word	137
	.byte	1,2,35,5,9
	.byte	'sw_patch_version',0
	.word	137
	.byte	1,2,35,6,0,21
	.byte	'Std_VersionInfoType',0,13,213,1,3
	.word	5244
	.byte	21
	.byte	'PduIdType',0,14,22,19
	.word	467
	.byte	21
	.byte	'PduLengthType',0,14,26,19
	.word	467
	.byte	21
	.byte	'PduInfoType',0,6,75,3
	.word	1756
	.byte	21
	.byte	'TPParameterType',0,6,87,3
	.word	2552
	.byte	21
	.byte	'BufReq_ReturnType',0,6,96,3
	.word	3130
	.byte	21
	.byte	'TpDataStateType',0,6,118,3
	.word	3389
	.byte	21
	.byte	'RetryInfoType',0,6,125,3
	.word	3441
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	10
	.word	137
	.byte	3
	.word	137
	.byte	27,1,1,28
	.word	5585
	.byte	28
	.word	5585
	.byte	28
	.word	137
	.byte	0,3
	.word	5590
	.byte	21
	.byte	'CanTp_GetSduPairType',0,10,18,16
	.word	5609
	.byte	10
	.word	5614
	.byte	22
	.byte	'CanTp_RxPduStructType',0,10,22,8,8,9
	.byte	'RxSduId',0
	.word	5575
	.byte	1,2,35,0,9
	.byte	'TxSduId',0
	.word	5580
	.byte	1,2,35,1,9
	.byte	'GetSduPair',0
	.word	5643
	.byte	4,2,35,4,0,10
	.word	5648
	.byte	3
	.word	5730
	.byte	10
	.word	4472
	.byte	3
	.word	5740
	.byte	10
	.word	4737
	.byte	3
	.word	5750
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	10
	.word	467
	.byte	22
	.byte	'CanTp_TimeOutStructType',0,10,55,8,6,9
	.byte	'AsArTicks',0
	.word	5760
	.byte	2,2,35,0,9
	.byte	'BsBrTicks',0
	.word	5765
	.byte	2,2,35,2,9
	.byte	'CsCrTicks',0
	.word	5770
	.byte	2,2,35,4,0,10
	.word	5775
	.byte	3
	.word	5862
.L799:
	.byte	23,2
	.word	137
	.byte	24,1,0,10
	.word	5872
	.byte	10
	.word	467
	.byte	22
	.byte	'CanTp_ParamStructType',0,10,62,8,4,9
	.byte	'Param',0
	.word	5881
	.byte	2,2,35,0,9
	.byte	'FcWaitMax',0
	.word	5886
	.byte	2,2,35,2,0,10
	.word	5891
	.byte	3
	.word	5953
	.byte	22
	.byte	'CanTp_ConfigStructType',0,10,68,8,28,9
	.byte	'NumberOfChannels',0
	.word	5550
	.byte	1,2,35,0,9
	.byte	'NumberOfRxPdus',0
	.word	5555
	.byte	1,2,35,1,9
	.byte	'NumberOfTxPdus',0
	.word	5560
	.byte	1,2,35,2,9
	.byte	'NumberOfRxSdus',0
	.word	5565
	.byte	1,2,35,3,9
	.byte	'NumberOfTxSdus',0
	.word	5570
	.byte	1,2,35,4,9
	.byte	'RxPdu',0
	.word	5735
	.byte	4,2,35,8,9
	.byte	'TxSdu',0
	.word	5745
	.byte	4,2,35,12,9
	.byte	'RxSdu',0
	.word	5755
	.byte	4,2,35,16,9
	.byte	'TimeOut',0
	.word	5867
	.byte	4,2,35,20,9
	.byte	'Param',0
	.word	5958
	.byte	4,2,35,24,0,21
	.byte	'CanTp_ConfigType',0,15,94,39
	.word	5963
	.byte	3
	.word	5590
	.byte	21
	.byte	'CanTp_TickType',0,10,15,16
	.word	467
	.byte	21
	.byte	'CanTp_SduIdType',0,10,16,15
	.word	137
	.byte	21
	.byte	'CanTp_ChannelIdType',0,10,17,15
	.word	137
	.byte	21
	.byte	'Can_IdType',0,16,32,16
	.word	806
	.byte	21
	.byte	'Can_HwHandleType',0,16,43,16
	.word	467
	.byte	8,17,93,9,8,9
	.byte	'Class',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'TIN',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'ReturnAddress',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'OsTrapInfoType',0,17,97,3
	.word	6340
	.byte	23,68
	.word	806
	.byte	24,16,0,8,17,154,1,9,68,9
	.byte	'store',0
	.word	6420
	.byte	68,2,35,0,0,23,68
	.word	6429
	.byte	24,0,0,21
	.byte	'Os_JumpBufType',0,17,156,1,3
	.word	6451
	.byte	21
	.byte	'Os_StackTraceType',0,17,174,1,18
	.word	806
	.byte	8,17,175,1,9,8,9
	.byte	'sp',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'ctx',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Os_StackValueType',0,17,175,1,63
	.word	6511
	.byte	21
	.byte	'Os_StackSizeType',0,17,176,1,27
	.word	6511
	.byte	29,1,1,3
	.word	6596
	.byte	21
	.byte	'Os_VoidVoidFunctionType',0,17,179,1,16
	.word	6599
	.byte	21
	.byte	'ApplicationType',0,17,193,1,23
	.word	137
	.byte	22
	.byte	'Os_ApplicationConfigurationType_s',0,17,198,1,16,2,9
	.byte	'app_id',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,1,0,21
	.byte	'Os_ApplicationConfigurationType',0,17,201,1,3
	.word	6662
	.byte	21
	.byte	'Os_CoreStateType',0,17,203,1,16
	.word	806
	.byte	21
	.byte	'AreaIdType',0,17,204,1,16
	.word	467
	.byte	21
	.byte	'Os_PeripheralAddressType',0,17,212,1,22
	.word	806
	.byte	21
	.byte	'TickType',0,17,221,1,22
	.word	806
	.byte	21
	.byte	'Os_StopwatchTickType',0,17,225,1,22
	.word	806
	.byte	21
	.byte	'Os_Lockable',0,17,234,1,18
	.word	822
	.byte	21
	.byte	'CoreIdType',0,17,236,1,16
	.word	467
	.byte	21
	.byte	'SpinlockIdType',0,17,237,1,16
	.word	467
	.byte	12,17,239,1,9,4,13
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,13
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,21
	.byte	'TryToGetSpinlockType',0,17,239,1,74
	.word	6969
	.byte	12,17,174,2,9,4,13
	.byte	'APPLICATION_ACCESSIBLE',0,0,13
	.byte	'APPLICATION_RESTARTING',0,1,13
	.byte	'APPLICATION_TERMINATED',0,2,0,21
	.byte	'ApplicationStateType',0,17,174,2,92
	.word	7062
	.byte	30
	.byte	'void',0,3
	.word	7174
	.byte	27,1,1,28
	.word	137
	.byte	28
	.word	7180
	.byte	0,3
	.word	7185
	.byte	21
	.byte	'Os_FunctionEntryType',0,17,183,2,16
	.word	7199
	.byte	22
	.byte	'Os_MeterInfoType_s',0,17,193,2,16,48,9
	.byte	'elapsed',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'previous',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'max',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'cumulative',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'stackbase',0
	.word	6511
	.byte	8,2,35,16,9
	.byte	'stackusage',0
	.word	6511
	.byte	8,2,35,24,9
	.byte	'stackmax',0
	.word	6511
	.byte	8,2,35,32,9
	.byte	'stackbudget',0
	.word	6511
	.byte	8,2,35,40,0,21
	.byte	'Os_MeterInfoType',0,17,202,2,3
	.word	7234
	.byte	3
	.word	7234
	.byte	21
	.byte	'Os_MeterInfoRefType',0,17,203,2,50
	.word	7432
	.byte	21
	.byte	'EventMaskType',0,17,206,2,15
	.word	137
	.byte	21
	.byte	'Os_imaskType',0,17,211,2,16
	.word	806
	.byte	22
	.byte	'Os_ISRDynType_s',0,17,213,2,16,48,9
	.byte	'meter',0
	.word	7234
	.byte	48,2,35,0,0,21
	.byte	'Os_ISRDynType',0,17,215,2,3
	.word	7511
	.byte	3
	.word	7511
	.byte	10
	.word	7572
	.byte	22
	.byte	'Os_ISRType_s',0,17,216,2,16,24,9
	.byte	'entry_function',0
	.word	6604
	.byte	4,2,35,0,9
	.byte	'dynamic',0
	.word	7577
	.byte	4,2,35,4,9
	.byte	'imask',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'stackbudget',0
	.word	6511
	.byte	8,2,35,12,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,20,9
	.byte	'application',0
	.word	137
	.byte	1,2,35,21,0,21
	.byte	'Os_ISRType',0,17,223,2,3
	.word	7582
	.byte	3
	.word	6596
	.byte	10
	.word	7582
	.byte	3
	.word	7741
	.byte	21
	.byte	'ISRType',0,17,224,2,46
	.word	7746
	.byte	21
	.byte	'Os_bitmask',0,17,239,2,22
	.word	806
	.byte	21
	.byte	'Os_pset0Type',0,17,240,2,20
	.word	806
	.byte	21
	.byte	'Os_pset1Type',0,17,241,2,20
	.word	806
	.byte	21
	.byte	'Os_pset2Type',0,17,242,2,20
	.word	806
	.byte	31,17,243,2,9,4,9
	.byte	'p0',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'p1',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'p2',0
	.word	806
	.byte	4,2,35,0,0,21
	.byte	'Os_psetType',0,17,247,2,3
	.word	7854
	.byte	31,17,249,2,9,4,9
	.byte	't0',0
	.word	806
	.byte	4,2,35,0,9
	.byte	't1',0
	.word	806
	.byte	4,2,35,0,9
	.byte	't2',0
	.word	806
	.byte	4,2,35,0,0,21
	.byte	'Os_tpmaskType',0,17,253,2,3
	.word	7918
	.byte	21
	.byte	'Os_ActivationCountType',0,17,254,2,23
	.word	137
	.byte	22
	.byte	'Os_TaskDynType_s',0,17,128,3,16,120,9
	.byte	'terminate_jump_buf',0
	.word	6460
	.byte	68,2,35,0,9
	.byte	'meter',0
	.word	7234
	.byte	48,2,35,68,9
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,116,0,21
	.byte	'Os_TaskDynType',0,17,132,3,3
	.word	8016
	.byte	23,68
	.word	6429
	.byte	24,0,0,3
	.word	8016
	.byte	10
	.word	8142
	.byte	22
	.byte	'Os_TaskType_s',0,17,134,3,16,40,9
	.byte	'dynamic',0
	.word	8147
	.byte	4,2,35,0,9
	.byte	'entry_function',0
	.word	6604
	.byte	4,2,35,4,9
	.byte	'pset',0
	.word	7854
	.byte	4,2,35,8,9
	.byte	'base_tpmask',0
	.word	7918
	.byte	4,2,35,12,9
	.byte	'tpmask',0
	.word	7918
	.byte	4,2,35,16,9
	.byte	'core_id',0
	.word	467
	.byte	2,2,35,20,9
	.byte	'index',0
	.word	806
	.byte	4,2,35,24,9
	.byte	'stackbudget',0
	.word	6511
	.byte	8,2,35,28,9
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,36,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,37,9
	.byte	'application',0
	.word	137
	.byte	1,2,35,38,0,21
	.byte	'Os_TaskType',0,17,146,3,3
	.word	8152
	.byte	10
	.word	8152
	.byte	3
	.word	8402
	.byte	21
	.byte	'TaskType',0,17,147,3,47
	.word	8407
	.byte	32
	.byte	'Os_TaskStateType',0,17,155,3,6,4,13
	.byte	'SUSPENDED',0,0,13
	.byte	'READY',0,1,13
	.byte	'WAITING',0,2,13
	.byte	'RUNNING',0,3,0,21
	.byte	'TaskStateType',0,17,156,3,31
	.word	8430
	.byte	31,17,167,3,3,4,9
	.byte	'tpmask',0
	.word	7918
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType_s',0,17,166,3,16,4,9
	.byte	'saved_priority',0
	.word	8517
	.byte	4,2,35,0,0,21
	.byte	'Os_ResourceDynType',0,17,170,3,3
	.word	8540
	.byte	3
	.word	8540
	.byte	10
	.word	8620
	.byte	22
	.byte	'Os_ResourceType_s',0,17,171,3,16,12,9
	.byte	'dynamic',0
	.word	8625
	.byte	4,2,35,0,9
	.byte	'tpmask',0
	.word	7918
	.byte	4,2,35,4,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,8,0,21
	.byte	'Os_ResourceType',0,17,175,3,3
	.word	8630
	.byte	8,17,181,3,9,12,9
	.byte	'maxallowedvalue',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'ticksperbase',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'mincycle',0
	.word	806
	.byte	4,2,35,8,0,21
	.byte	'AlarmBaseType',0,17,185,3,3
	.word	8729
	.byte	8,17,206,3,9,8,9
	.byte	'Running',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'Pending',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'Delay',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Os_CounterStatusType',0,17,210,3,3
	.word	8824
	.byte	33
	.word	137
	.byte	1,1,3
	.word	8910
	.byte	21
	.byte	'Os_CounterIncrAdvType',0,17,217,3,22
	.word	8917
	.byte	22
	.byte	's_swd',0,17,222,3,12,4,9
	.byte	'count',0
	.word	806
	.byte	4,2,35,0,0,31,17,221,3,3,4,9
	.byte	'sw',0
	.word	8953
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType_s',0,17,220,3,16,4,9
	.byte	'type_dependent',0
	.word	8981
	.byte	4,2,35,0,0,21
	.byte	'Os_CounterDynType',0,17,226,3,3
	.word	9000
	.byte	3
	.word	9000
	.byte	10
	.word	9078
	.byte	22
	.byte	'Os_CounterType_s',0,17,227,3,16,28,9
	.byte	'dynamic',0
	.word	9083
	.byte	4,2,35,0,9
	.byte	'advincr',0
	.word	8922
	.byte	4,2,35,4,9
	.byte	'base',0
	.word	8729
	.byte	12,2,35,8,9
	.byte	'core',0
	.word	7180
	.byte	4,2,35,20,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,24,9
	.byte	'application',0
	.word	137
	.byte	1,2,35,25,0,21
	.byte	'Os_CounterType',0,17,234,3,3
	.word	9088
	.byte	3
	.word	8910
	.byte	10
	.word	9088
	.byte	3
	.word	9240
	.byte	21
	.byte	'CounterType',0,17,235,3,52
	.word	9245
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,17,240,3,6,4,13
	.byte	'SCHEDULETABLE_STOPPED',0,0,13
	.byte	'SCHEDULETABLE_NEXT',0,1,13
	.byte	'SCHEDULETABLE_WAITING',0,2,13
	.byte	'SCHEDULETABLE_RUNNING',0,3,13
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,21
	.byte	'ScheduleTableStatusType',0,17,241,3,41
	.word	9271
	.byte	10
	.word	.L1061-.L260
	.byte	3
	.word	9471
	.byte	21
	.byte	'ScheduleTableType',0,17,128,4,58
	.word	9476
	.byte	22
	.byte	'Os_ScheduleTableDynType_s',0,17,130,4,16,16,9
	.byte	'match',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'next',0
	.word	9481
	.byte	4,2,35,4,9
	.byte	'state',0
	.word	9271
	.byte	4,2,35,8,9
	.byte	'config',0
	.word	467
	.byte	2,2,35,12,0,3
	.word	9508
	.byte	10
	.word	9601
.L1061:
	.byte	22
	.byte	'Os_ScheduleTableType_s',0,17,247,3,16,16,9
	.byte	'dynamic',0
	.word	9606
	.byte	4,2,35,0,9
	.byte	'counter',0
	.word	9250
	.byte	4,2,35,4,9
	.byte	'repeat',0
	.word	137
	.byte	1,2,35,8,9
	.byte	'config',0
	.word	467
	.byte	2,2,35,10,9
	.byte	'initial',0
	.word	137
	.byte	1,2,35,12,9
	.byte	'access',0
	.word	137
	.byte	1,2,35,13,9
	.byte	'application',0
	.word	137
	.byte	1,2,35,14,0,21
	.byte	'Os_ScheduleTableType',0,17,255,3,3
	.word	9611
	.byte	10
	.word	9611
	.byte	3
	.word	9791
	.byte	10
	.word	9088
	.byte	3
	.word	9801
	.byte	34
	.word	6904
	.byte	34
	.word	7854
	.byte	34
	.word	7751
	.byte	34
	.word	8412
	.byte	34
	.word	7918
	.byte	34
	.word	137
	.byte	34
	.word	8412
	.byte	22
	.byte	'Os_ControlledCoreType_s',0,17,251,6,16,112,9
	.byte	'TrapInfo',0
	.word	6340
	.byte	8,2,35,0,9
	.byte	'lock_taskaccess',0
	.word	9811
	.byte	4,2,35,8,9
	.byte	'ReadyTasks',0
	.word	9816
	.byte	4,2,35,12,9
	.byte	'RunningISR',0
	.word	9821
	.byte	4,2,35,16,9
	.byte	'RunningTask',0
	.word	9826
	.byte	4,2,35,20,9
	.byte	'RunningTPMask',0
	.word	9831
	.byte	4,2,35,24,9
	.byte	'CurrentMeteredObject',0
	.word	7437
	.byte	4,2,35,28,9
	.byte	'IdleMeter',0
	.word	7234
	.byte	48,2,35,32,9
	.byte	'AppAccess',0
	.word	137
	.byte	1,2,35,80,9
	.byte	'AppOverride',0
	.word	9836
	.byte	1,2,35,81,9
	.byte	'GetStackValueAdjust',0
	.word	6511
	.byte	8,2,35,84,9
	.byte	'InErrorHook',0
	.word	137
	.byte	1,2,35,92,9
	.byte	'ChainTaskRef',0
	.word	9841
	.byte	4,2,35,96,9
	.byte	'GetStackUsageAdjust',0
	.word	6511
	.byte	8,2,35,100,9
	.byte	'InProtectionHook',0
	.word	137
	.byte	1,2,35,108,9
	.byte	'CoreIsActive',0
	.word	137
	.byte	1,2,35,109,9
	.byte	'InShutdownHook',0
	.word	137
	.byte	1,2,35,110,0,21
	.byte	'Os_ControlledCoreType',0,17,141,7,3
	.word	9846
	.byte	3
	.word	806
	.byte	10
	.word	7582
	.byte	3
	.word	10302
	.byte	10
	.word	8152
	.byte	3
	.word	10312
	.byte	3
	.word	7234
	.byte	22
	.byte	'Os_AnyCoreType_s',0,17,151,7,16,96,9
	.byte	'DisableAllImask',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'SuspendAllImask',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'SuspendOSImask',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'DisableAllCount',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'SuspendAllCount',0
	.word	806
	.byte	4,2,35,16,9
	.byte	'SuspendOSCount',0
	.word	806
	.byte	4,2,35,20,9
	.byte	'RestartJumpBuf',0
	.word	6460
	.byte	68,2,35,24,9
	.byte	'Restartable',0
	.word	137
	.byte	1,2,35,92,0,21
	.byte	'Os_AnyCoreType',0,17,160,7,3
	.word	10327
	.byte	2
	.byte	'int',0,4,5,21
	.byte	'signed_int',0,18,114,20
	.word	10568
	.byte	21
	.byte	'unsigned_int',0,18,116,22
	.word	806
	.byte	21
	.byte	'Can_TxObjPriorityClassType',0,19,219,3,16
	.word	806
	.byte	22
	.byte	'Can_TxHwObjectConfigType',0,19,231,3,16,8,9
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'TxObjPriorityClass',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Can_TxHwObjectConfigType',0,19,252,3,3
	.word	10651
	.byte	22
	.byte	'Can_RxHwObjectConfigType',0,19,129,4,16,12,9
	.byte	'MaskRef',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'MsgId',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,8,9
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,9,0,21
	.byte	'Can_RxHwObjectConfigType',0,19,147,4,3
	.word	10787
	.byte	23,4
	.word	137
	.byte	24,3,0,22
	.byte	'Can_ControllerMOMapConfigType',0,19,181,4,16,4,9
	.byte	'ControllerMOMap',0
	.word	10927
	.byte	4,2,35,0,0,21
	.byte	'Can_ControllerMOMapConfigType',0,19,184,4,3
	.word	10936
	.byte	22
	.byte	'Can_NPCRValueType',0,19,188,4,16,2,9
	.byte	'Can_NPCRValue',0
	.word	467
	.byte	2,2,35,0,0,21
	.byte	'Can_NPCRValueType',0,19,191,4,3
	.word	11037
	.byte	22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,19,194,4,16,8,9
	.byte	'CanControllerBaudrate',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'CanControllerBaudrateCfg',0
	.word	467
	.byte	2,2,35,4,0,21
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,19,198,4,3
	.word	11112
	.byte	10
	.word	11112
	.byte	3
	.word	11277
	.byte	22
	.byte	'Can_BaudrateConfigPtrType',0,19,201,4,16,4,9
	.byte	'Can_kBaudrateConfigPtr',0
	.word	11282
	.byte	4,2,35,0,0,21
	.byte	'Can_BaudrateConfigPtrType',0,19,204,4,3
	.word	11287
	.byte	22
	.byte	'Can_EventHandlingType',0,19,226,4,16,4,9
	.byte	'CanEventType',0
	.word	10927
	.byte	4,2,35,0,0,21
	.byte	'Can_EventHandlingType',0,19,229,4,3
	.word	11387
	.byte	21
	.byte	'Rte_TransformerErrorCode',0,20,130,1,15
	.word	137
	.byte	21
	.byte	'Rte_TransformerClass',0,20,131,1,15
	.word	137
	.byte	8,20,168,1,9,12,9
	.byte	'in',0
	.word	7180
	.byte	4,2,35,0,9
	.byte	'out',0
	.word	7180
	.byte	4,2,35,4,9
	.byte	'used',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'lost_data',0
	.word	137
	.byte	1,2,35,10,0,21
	.byte	'Rte_QDynType',0,20,173,1,3
	.word	11533
	.byte	12,20,175,1,9,4,13
	.byte	'RTE_DRA',0,0,13
	.byte	'RTE_WOWP',0,1,13
	.byte	'RTE_TASK',0,2,13
	.byte	'RTE_ARE',0,3,13
	.byte	'RTE_EV',0,4,13
	.byte	'RTE_MSI',0,5,0,21
	.byte	'Rte_NotificationType',0,20,182,1,3
	.word	11620
	.byte	3
	.word	11533
	.byte	22
	.byte	'Rte_QCmnType',0,20,184,1,16,24,9
	.byte	'dynamic',0
	.word	11718
	.byte	4,2,35,0,9
	.byte	'copy',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'queue_size',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'element_size',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'buffer_start',0
	.word	7180
	.byte	4,2,35,12,9
	.byte	'buffer_end',0
	.word	7180
	.byte	4,2,35,16,9
	.byte	'notification_type',0
	.word	11620
	.byte	4,2,35,20,0,21
	.byte	'Rte_QCmnType',0,20,192,1,3
	.word	11723
	.byte	21
	.byte	'Rte_AlarmRefType',0,20,224,1,32
	.word	806
	.byte	21
	.byte	'Rte_AlarmIndexType',0,20,226,1,32
	.word	467
	.byte	23,128,8
	.word	137
	.byte	24,255,7,0,21
	.byte	'Impl_NVM_DstPtrType_1024',0,21,50,15
	.word	11961
	.byte	21
	.byte	'CanIf_u32_impl',0,21,69,16
	.word	806
	.byte	21
	.byte	'CanIf_u16_impl',0,21,71,16
	.word	467
	.byte	21
	.byte	'CanIf_u8_impl',0,21,73,15
	.word	137
	.byte	21
	.byte	'CanIf_ControllerModeType_Enum_impl',0,21,88,15
	.word	137
	.byte	21
	.byte	'CanIf_PduModeType_Enum_impl',0,21,90,15
	.word	137
	.byte	8,21,92,9,2,9
	.byte	'DeviceMode',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'ChannelMode',0
	.word	137
	.byte	1,2,35,1,0,21
	.byte	'CanIf_ControllerStateType_struct_impl',0,21,95,3
	.word	12152
	.byte	21
	.byte	'CanIf_NotifStatusType_Enum_impl',0,21,100,15
	.word	137
	.byte	21
	.byte	'CanSM_boolean_Impl',0,21,120,15
	.word	137
	.byte	21
	.byte	'CanSM_u8_Impl',0,21,123,15
	.word	137
	.byte	21
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,21,128,1,15
	.word	137
	.byte	21
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,21,132,1,15
	.word	137
	.byte	21
	.byte	'CanSM_u16_Impl',0,21,136,1,16
	.word	467
	.byte	21
	.byte	'CanSM_TimerStateType_Enum_impl',0,21,138,1,15
	.word	137
	.byte	8,21,140,1,9,4,9
	.byte	'cntTick_u16',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'stTimer',0
	.word	137
	.byte	1,2,35,2,0,21
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,21,143,1,3
	.word	12493
	.byte	21
	.byte	'Com_impl_u16',0,21,154,1,16
	.word	467
	.byte	21
	.byte	'Com_impl_u8',0,21,157,1,15
	.word	137
	.byte	21
	.byte	'ComM_uint32_Impl',0,21,173,1,16
	.word	806
	.byte	21
	.byte	'ComM_uint16_Impl',0,21,175,1,16
	.word	467
	.byte	21
	.byte	'ComM_uint8_Impl',0,21,177,1,15
	.word	137
	.byte	21
	.byte	'ComM_bool_Impl',0,21,179,1,15
	.word	137
	.byte	8,21,181,1,9,24,9
	.byte	'ChannelState_e',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'LightTimeoutCtr_u32',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'ChannelMode_u8',0
	.word	137
	.byte	1,2,35,10,9
	.byte	'BusSmMode_u8',0
	.word	137
	.byte	1,2,35,11,9
	.byte	'UserRequestCtr_u8',0
	.word	137
	.byte	1,2,35,12,9
	.byte	'PassiveRequestState_u8',0
	.word	137
	.byte	1,2,35,13,9
	.byte	'PncRequestCtr_u8',0
	.word	137
	.byte	1,2,35,14,9
	.byte	'InhibitionReqStatus_u8',0
	.word	137
	.byte	1,2,35,15,9
	.byte	'NmNetworkRequestStatus_b',0
	.word	137
	.byte	1,2,35,16,9
	.byte	'DiagnosticRequestState_b',0
	.word	137
	.byte	1,2,35,17,9
	.byte	'CommunicationAllowed_b',0
	.word	137
	.byte	1,2,35,18,9
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,19,9
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,20,9
	.byte	'NmNetworkModeStatus_b',0
	.word	137
	.byte	1,2,35,21,0,21
	.byte	'ComM_ChannelStruct_Impl',0,21,197,1,3
	.word	12725
	.byte	8,21,206,1,9,10,9
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'LimitToNoComCtr_u16',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'RequestedUserMode_t',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'IndicatedUserMode_t',0
	.word	137
	.byte	1,2,35,5,9
	.byte	'numChannelsInFullCom_u8',0
	.word	137
	.byte	1,2,35,6,9
	.byte	'numChannelsInSilentCom_u8',0
	.word	137
	.byte	1,2,35,7,9
	.byte	'numChannelsInNoCom_u8',0
	.word	137
	.byte	1,2,35,8,0,21
	.byte	'ComM_UserStruct_Impl',0,21,214,1,3
	.word	13229
	.byte	21
	.byte	'Dcm_IOOperationResponseType',0,21,252,1,15
	.word	137
	.byte	21
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	21,138,2,15
	.word	137
	.byte	21
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,21,146,2,15
	.word	137
	.byte	21
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,21,150,2,15
	.word	137
	.byte	21
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,21,154,2,15
	.word	137
	.byte	21
	.byte	'EcuM_ShutdownCauseType',0,21,191,2,15
	.word	137
	.byte	21
	.byte	'EcuM_ShutdownModeType',0,21,195,2,16
	.word	467
	.byte	21
	.byte	'EcuM_ShutdownTargetType',0,21,197,2,15
	.word	137
	.byte	21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,21,243,3,34
	.word	11972
	.byte	23,128,8
	.word	137
	.byte	24,255,7,0,21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,21,246,3,34
	.word	11972
	.byte	21
	.byte	'Rte_TaskRefType',0,22,184,1,32
	.word	8412
	.byte	21
	.byte	'Rte_EventRefType',0,22,185,1,32
	.word	137
	.byte	21
	.byte	'Rte_EventType',0,22,186,1,32
	.word	806
	.byte	21
	.byte	'Rte_REActCounterType',0,22,252,1,15
	.word	137
	.byte	3
	.word	137
	.byte	21
	.byte	'Rte_REActCounterRefType',0,22,253,1,58
	.word	14247
	.byte	8,22,255,1,9,8,9
	.byte	'task',0
	.word	14143
	.byte	4,2,35,0,9
	.byte	'acnt',0
	.word	14252
	.byte	4,2,35,4,0,21
	.byte	'Rte_REContainerType',0,22,130,2,3
	.word	14285
	.byte	10
	.word	8152
	.byte	3
	.word	14349
	.byte	3
	.word	137
	.byte	10
	.word	14285
	.byte	3
	.word	14364
	.byte	21
	.byte	'Rte_REContainerRefType',0,22,132,2,60
	.word	14369
	.byte	21
	.byte	'Rte_MSICounterType',0,22,149,2,16
	.word	467
	.byte	3
	.word	467
	.byte	21
	.byte	'Rte_MSICounterRefType',0,22,150,2,56
	.word	14434
	.byte	21
	.byte	'Rte_MSIPendingFlagType',0,22,152,2,17
	.word	137
	.byte	3
	.word	137
	.byte	21
	.byte	'Rte_MSIPendingFlagRefType',0,22,153,2,60
	.word	14502
	.byte	8,22,163,2,9,24,9
	.byte	'counter',0
	.word	14439
	.byte	4,2,35,0,9
	.byte	'incCounter',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'pending',0
	.word	14507
	.byte	4,2,35,8,9
	.byte	'osTask',0
	.word	14143
	.byte	4,2,35,12,9
	.byte	'acnt',0
	.word	14252
	.byte	4,2,35,16,9
	.byte	'osEvent',0
	.word	137
	.byte	1,2,35,20,9
	.byte	'MSIInit',0
	.word	467
	.byte	2,2,35,22,0,21
	.byte	'Rte_MSITableEntry',0,22,172,2,3
	.word	14542
	.byte	3
	.word	467
	.byte	3
	.word	137
	.byte	21
	.byte	'Rte_TaskArrayIndex',0,22,179,2,16
	.word	137
	.byte	21
	.byte	'Rte_NrWaitingTasks',0,22,180,2,16
	.word	137
	.byte	8,22,182,2,9,4,9
	.byte	'pending',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'count',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'firstWaitingTask',0
	.word	137
	.byte	1,2,35,2,0,21
	.byte	'Rte_WaitableDatum',0,22,186,2,3
	.word	14760
	.byte	3
	.word	14760
	.byte	8,22,226,2,9,12,9
	.byte	'event_id',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'wd',0
	.word	14852
	.byte	4,2,35,4,9
	.byte	'timeout',0
	.word	806
	.byte	4,2,35,8,0,21
	.byte	'Rte_WOWP_NotificationType',0,22,230,2,3
	.word	14857
	.byte	10
	.word	14857
	.byte	3
	.word	14946
	.byte	21
	.byte	'Rte_WOWP_NotificationRefType',0,22,232,2,66
	.word	14951
	.byte	21
	.byte	'Rte_ARE_NotificationType',0,22,234,2,29
	.word	14285
	.byte	22
	.byte	'Rte_QTaskType',0,22,243,2,16,28,9
	.byte	'cmn',0
	.word	11723
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	14143
	.byte	4,2,35,24,0,21
	.byte	'Rte_QTaskType',0,22,246,2,3
	.word	15028
	.byte	22
	.byte	'Rte_QREType',0,22,250,2,16,28,9
	.byte	'cmn',0
	.word	11723
	.byte	24,2,35,0,9
	.byte	're',0
	.word	14374
	.byte	4,2,35,24,0,21
	.byte	'Rte_QREType',0,22,253,2,3
	.word	15099
	.byte	10
	.word	14285
	.byte	3
	.word	15164
	.byte	22
	.byte	'Rte_QWWPType',0,22,129,3,16,28,9
	.byte	'cmn',0
	.word	11723
	.byte	24,2,35,0,9
	.byte	'wwp',0
	.word	14956
	.byte	4,2,35,24,0,21
	.byte	'Rte_QWWPType',0,22,132,3,3
	.word	15174
	.byte	10
	.word	14857
	.byte	3
	.word	15242
	.byte	22
	.byte	'Rte_QEvType',0,22,136,3,16,36,9
	.byte	'cmn',0
	.word	11723
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	14143
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	137
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	14252
	.byte	4,2,35,32,0,21
	.byte	'Rte_QEvType',0,22,141,3,3
	.word	15252
	.byte	22
	.byte	'Rte_QMSIType',0,22,145,3,16,48,9
	.byte	'cmn',0
	.word	11723
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	14143
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	137
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	14252
	.byte	4,2,35,32,9
	.byte	'msiCounter',0
	.word	14439
	.byte	4,2,35,36,9
	.byte	'msiPending',0
	.word	14507
	.byte	4,2,35,40,9
	.byte	'msiLimit',0
	.word	467
	.byte	2,2,35,44,0,21
	.byte	'Rte_QMSIType',0,22,153,3,3
	.word	15347
	.byte	22
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,23,45,16,4,35
	.byte	'EN0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'EN1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'EN2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'EN3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'EN4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'EN5',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'EN6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'EN7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'EN8',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'EN9',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'EN10',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'EN11',0,1
	.word	137
	.byte	1,4,2,35,1,35
	.byte	'EN12',0,1
	.word	137
	.byte	1,3,2,35,1,35
	.byte	'EN13',0,1
	.word	137
	.byte	1,2,2,35,1,35
	.byte	'EN14',0,1
	.word	137
	.byte	1,1,2,35,1,35
	.byte	'EN15',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'EN16',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'EN17',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'EN18',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'EN19',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'EN20',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'EN21',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'EN22',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'EN23',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'EN24',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'EN25',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'EN26',0,1
	.word	137
	.byte	1,5,2,35,3,35
	.byte	'EN27',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'EN28',0,1
	.word	137
	.byte	1,3,2,35,3,35
	.byte	'EN29',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'EN30',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'EN31',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_ACCEN0_Bits',0,23,79,3
	.word	15502
	.byte	22
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,23,82,16,4,35
	.byte	'reserved_0',0,4
	.word	806
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN1_Bits',0,23,85,3
	.word	16059
	.byte	22
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,23,88,16,4,35
	.byte	'STM0DIS',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'STM1DIS',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'STM2DIS',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'reserved_3',0,4
	.word	806
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,23,94,3
	.word	16136
	.byte	22
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,23,97,16,4,35
	.byte	'BAUD1DIV',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'BAUD2DIV',0,1
	.word	137
	.byte	4,0,2,35,0,35
	.byte	'SRIDIV',0,1
	.word	137
	.byte	4,4,2,35,1,35
	.byte	'LPDIV',0,1
	.word	137
	.byte	4,0,2,35,1,35
	.byte	'SPBDIV',0,1
	.word	137
	.byte	4,4,2,35,2,35
	.byte	'FSI2DIV',0,1
	.word	137
	.byte	2,2,2,35,2,35
	.byte	'reserved_22',0,1
	.word	137
	.byte	2,0,2,35,2,35
	.byte	'FSIDIV',0,1
	.word	137
	.byte	2,6,2,35,3,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	2,4,2,35,3,35
	.byte	'CLKSEL',0,1
	.word	137
	.byte	2,2,2,35,3,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON0_Bits',0,23,111,3
	.word	16272
	.byte	22
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,23,114,16,4,35
	.byte	'CANDIV',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'ERAYDIV',0,1
	.word	137
	.byte	4,0,2,35,0,35
	.byte	'STMDIV',0,1
	.word	137
	.byte	4,4,2,35,1,35
	.byte	'GTMDIV',0,1
	.word	137
	.byte	4,0,2,35,1,35
	.byte	'ETHDIV',0,1
	.word	137
	.byte	4,4,2,35,2,35
	.byte	'ASCLINFDIV',0,1
	.word	137
	.byte	4,0,2,35,2,35
	.byte	'ASCLINSDIV',0,1
	.word	137
	.byte	4,4,2,35,3,35
	.byte	'INSEL',0,1
	.word	137
	.byte	2,2,2,35,3,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON1_Bits',0,23,126,3
	.word	16552
	.byte	22
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,23,129,1,16,4,35
	.byte	'BBBDIV',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	26,2,2,35,0,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON2_Bits',0,23,135,1,3
	.word	16790
	.byte	22
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,23,138,1,16,4,35
	.byte	'PLLDIV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'PLLSEL',0,1
	.word	137
	.byte	2,0,2,35,0,35
	.byte	'PLLERAYDIV',0,1
	.word	137
	.byte	6,2,2,35,1,35
	.byte	'PLLERAYSEL',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'SRIDIV',0,1
	.word	137
	.byte	6,2,2,35,2,35
	.byte	'SRISEL',0,1
	.word	137
	.byte	2,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	5,3,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON3_Bits',0,23,150,1,3
	.word	16918
	.byte	22
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,23,153,1,16,4,35
	.byte	'SPBDIV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'SPBSEL',0,1
	.word	137
	.byte	2,0,2,35,0,35
	.byte	'GTMDIV',0,1
	.word	137
	.byte	6,2,2,35,1,35
	.byte	'GTMSEL',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'STMDIV',0,1
	.word	137
	.byte	6,2,2,35,2,35
	.byte	'STMSEL',0,1
	.word	137
	.byte	2,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	5,3,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON4_Bits',0,23,165,1,3
	.word	17161
	.byte	22
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,23,168,1,16,4,35
	.byte	'MAXDIV',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	26,2,2,35,0,35
	.byte	'UP',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON5_Bits',0,23,174,1,3
	.word	17396
	.byte	22
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,23,177,1,16,4,35
	.byte	'CPU0DIV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'reserved_6',0,4
	.word	806
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON6_Bits',0,23,181,1,3
	.word	17524
	.byte	22
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,23,184,1,16,4,35
	.byte	'CPU1DIV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'reserved_6',0,4
	.word	806
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON7_Bits',0,23,188,1,3
	.word	17624
	.byte	22
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,23,191,1,16,4,35
	.byte	'CPU2DIV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'reserved_6',0,4
	.word	806
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON8_Bits',0,23,195,1,3
	.word	17724
	.byte	22
	.byte	'_Ifx_SCU_CHIPID_Bits',0,23,198,1,16,4,35
	.byte	'CHREV',0,1
	.word	137
	.byte	6,2,2,35,0,35
	.byte	'CHTEC',0,1
	.word	137
	.byte	2,0,2,35,0,35
	.byte	'CHID',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'EEA',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'UCODE',0,1
	.word	137
	.byte	7,0,2,35,2,35
	.byte	'FSIZE',0,1
	.word	137
	.byte	4,4,2,35,3,35
	.byte	'SP',0,1
	.word	137
	.byte	2,2,2,35,3,35
	.byte	'SEC',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'reserved_31',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CHIPID_Bits',0,23,209,1,3
	.word	17824
	.byte	22
	.byte	'_Ifx_SCU_DTSCON_Bits',0,23,212,1,16,4,35
	.byte	'PWD',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'START',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	2,4,2,35,0,35
	.byte	'CAL',0,4
	.word	806
	.byte	22,6,2,35,0,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	5,1,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_DTSCON_Bits',0,23,220,1,3
	.word	18032
	.byte	22
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,23,223,1,16,4,35
	.byte	'LOWER',0,2
	.word	467
	.byte	10,6,2,35,0,35
	.byte	'reserved_10',0,1
	.word	137
	.byte	5,1,2,35,1,35
	.byte	'LLU',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'UPPER',0,2
	.word	467
	.byte	10,6,2,35,2,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	4,2,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'UOF',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_DTSLIM_Bits',0,23,232,1,3
	.word	18197
	.byte	22
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,23,235,1,16,4,35
	.byte	'RESULT',0,2
	.word	467
	.byte	10,6,2,35,0,35
	.byte	'reserved_10',0,1
	.word	137
	.byte	4,2,2,35,1,35
	.byte	'RDY',0,1
	.word	137
	.byte	1,1,2,35,1,35
	.byte	'BUSY',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,23,242,1,3
	.word	18380
	.byte	22
	.byte	'_Ifx_SCU_EICR_Bits',0,23,245,1,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'EXIS0',0,1
	.word	137
	.byte	3,1,2,35,0,35
	.byte	'reserved_7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'FEN0',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'REN0',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'LDEN0',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'EIEN0',0,1
	.word	137
	.byte	1,4,2,35,1,35
	.byte	'INP0',0,1
	.word	137
	.byte	3,1,2,35,1,35
	.byte	'reserved_15',0,4
	.word	806
	.byte	5,12,2,35,0,35
	.byte	'EXIS1',0,1
	.word	137
	.byte	3,1,2,35,2,35
	.byte	'reserved_23',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'FEN1',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'REN1',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'LDEN1',0,1
	.word	137
	.byte	1,5,2,35,3,35
	.byte	'EIEN1',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'INP1',0,1
	.word	137
	.byte	3,1,2,35,3,35
	.byte	'reserved_31',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EICR_Bits',0,23,136,2,3
	.word	18534
	.byte	22
	.byte	'_Ifx_SCU_EIFR_Bits',0,23,139,2,16,4,35
	.byte	'INTF0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'INTF1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'INTF2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'INTF3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'INTF4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'INTF5',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'INTF6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'INTF7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,4
	.word	806
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_EIFR_Bits',0,23,150,2,3
	.word	18898
	.byte	22
	.byte	'_Ifx_SCU_EMSR_Bits',0,23,153,2,16,4,35
	.byte	'POL',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'MODE',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'ENON',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'PSEL',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,2
	.word	467
	.byte	12,0,2,35,0,35
	.byte	'EMSF',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'SEMSF',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'reserved_18',0,1
	.word	137
	.byte	6,0,2,35,2,35
	.byte	'EMSFM',0,1
	.word	137
	.byte	2,6,2,35,3,35
	.byte	'SEMSFM',0,1
	.word	137
	.byte	2,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_EMSR_Bits',0,23,166,2,3
	.word	19109
	.byte	22
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,23,169,2,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	7,1,2,35,0,35
	.byte	'EDCON',0,2
	.word	467
	.byte	2,7,2,35,0,35
	.byte	'reserved_9',0,4
	.word	806
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_SCU_ESRCFG_Bits',0,23,174,2,3
	.word	19361
	.byte	22
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,23,177,2,16,4,35
	.byte	'ARI',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ARC',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_ESROCFG_Bits',0,23,182,2,3
	.word	19479
	.byte	22
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,23,185,2,16,4,35
	.byte	'reserved_0',0,4
	.word	806
	.byte	28,4,2,35,0,35
	.byte	'EVR13OFF',0,1
	.word	137
	.byte	1,3,2,35,3,35
	.byte	'BPEVR13OFF',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'reserved_30',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVR13CON_Bits',0,23,192,2,3
	.word	19590
	.byte	22
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,23,195,2,16,4,35
	.byte	'reserved_0',0,4
	.word	806
	.byte	28,4,2,35,0,35
	.byte	'EVR33OFF',0,1
	.word	137
	.byte	1,3,2,35,3,35
	.byte	'BPEVR33OFF',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'reserved_30',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVR33CON_Bits',0,23,202,2,3
	.word	19753
	.byte	22
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,23,205,2,16,4,35
	.byte	'ADC13V',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'ADC33V',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'ADCSWDV',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'VAL',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,23,212,2,3
	.word	19916
	.byte	22
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,23,215,2,16,4,35
	.byte	'DVS13TRIM',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'reserved_8',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'DVS33TRIM',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'VAL',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,23,222,2,3
	.word	20074
	.byte	22
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,23,225,2,16,4,35
	.byte	'EVR13OVMOD',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	2,4,2,35,0,35
	.byte	'EVR13UVMOD',0,1
	.word	137
	.byte	2,2,2,35,0,35
	.byte	'reserved_6',0,1
	.word	137
	.byte	2,0,2,35,0,35
	.byte	'EVR33OVMOD',0,1
	.word	137
	.byte	2,6,2,35,1,35
	.byte	'reserved_10',0,1
	.word	137
	.byte	2,4,2,35,1,35
	.byte	'EVR33UVMOD',0,1
	.word	137
	.byte	2,2,2,35,1,35
	.byte	'reserved_14',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'SWDOVMOD',0,1
	.word	137
	.byte	2,6,2,35,2,35
	.byte	'reserved_18',0,1
	.word	137
	.byte	2,4,2,35,2,35
	.byte	'SWDUVMOD',0,1
	.word	137
	.byte	2,2,2,35,2,35
	.byte	'reserved_22',0,2
	.word	467
	.byte	8,2,2,35,2,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'reserved_31',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,23,241,2,3
	.word	20239
	.byte	22
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,23,244,2,16,4,35
	.byte	'EVR13OVVAL',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'EVR33OVVAL',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'SWDOVVAL',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	6,2,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVROVMON_Bits',0,23,252,2,3
	.word	20607
	.byte	22
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,23,255,2,16,4,35
	.byte	'RST13TRIM',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'reserved_8',0,4
	.word	806
	.byte	16,8,2,35,0,35
	.byte	'RST13OFF',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'BPRST13OFF',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'RST33OFF',0,1
	.word	137
	.byte	1,5,2,35,3,35
	.byte	'BPRST33OFF',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'RSTSWDOFF',0,1
	.word	137
	.byte	1,3,2,35,3,35
	.byte	'BPRSTSWDOFF',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,23,139,3,3
	.word	20786
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,23,142,3,16,4,35
	.byte	'SD5P',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SD5I',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'SD5D',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,23,149,3,3
	.word	21051
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,23,152,3,16,4,35
	.byte	'SD33P',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SD33I',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'SD33D',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,23,159,3,3
	.word	21204
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,23,162,3,16,4,35
	.byte	'CT5REG0',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'CT5REG1',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'CT5REG2',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,23,169,3,3
	.word	21360
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,23,172,3,16,4,35
	.byte	'CT5REG3',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'CT5REG4',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	15,1,2,35,2,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,23,178,3,3
	.word	21522
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,23,181,3,16,4,35
	.byte	'CT33REG0',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'CT33REG1',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'CT33REG2',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,23,188,3,3
	.word	21665
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,23,191,3,16,4,35
	.byte	'CT33REG3',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'CT33REG4',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	15,1,2,35,2,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,23,197,3,3
	.word	21830
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,23,200,3,16,4,35
	.byte	'SDFREQSPRD',0,2
	.word	467
	.byte	16,0,2,35,0,35
	.byte	'SDFREQ',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'SDSTEP',0,1
	.word	137
	.byte	4,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	2,2,2,35,3,35
	.byte	'SDSAMPLE',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,23,208,3,3
	.word	21975
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,23,211,3,16,4,35
	.byte	'DRVP',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SDMINMAXDC',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'DRVN',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'SDLUT',0,1
	.word	137
	.byte	6,2,2,35,3,35
	.byte	'reserved_30',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,23,219,3,3
	.word	22156
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,23,222,3,16,4,35
	.byte	'SDPWMPRE',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SDPID',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'SDVOKLVL',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,23,229,3,3
	.word	22330
	.byte	22
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,23,232,3,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SYNCDIV',0,1
	.word	137
	.byte	3,5,2,35,1,35
	.byte	'reserved_11',0,4
	.word	806
	.byte	20,1,2,35,0,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,23,238,3,3
	.word	22490
	.byte	22
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,23,241,3,16,4,35
	.byte	'EVR13',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'OV13',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'EVR33',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'OV33',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'OVSWD',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'UV13',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'UV33',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'UVSWD',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'EXTPASS13',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'EXTPASS33',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'BGPROK',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'reserved_11',0,4
	.word	806
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,23,255,3,3
	.word	22634
	.byte	22
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,23,130,4,16,4,35
	.byte	'EVR13TRIM',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'SDVOUTSEL',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	14,2,2,35,2,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,23,137,4,3
	.word	22908
	.byte	22
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,23,140,4,16,4,35
	.byte	'EVR13UVVAL',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'EVR33UVVAL',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'SWDUVVAL',0,1
	.word	137
	.byte	8,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	6,2,2,35,3,35
	.byte	'SLCK',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,23,148,4,3
	.word	23063
	.byte	22
	.byte	'_Ifx_SCU_EXTCON_Bits',0,23,151,4,16,4,35
	.byte	'EN0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'reserved_1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'SEL0',0,1
	.word	137
	.byte	4,2,2,35,0,35
	.byte	'reserved_6',0,2
	.word	467
	.byte	10,0,2,35,0,35
	.byte	'EN1',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'NSEL',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'SEL1',0,1
	.word	137
	.byte	4,2,2,35,2,35
	.byte	'reserved_22',0,1
	.word	137
	.byte	2,0,2,35,2,35
	.byte	'DIV1',0,1
	.word	137
	.byte	8,0,2,35,3,0,21
	.byte	'Ifx_SCU_EXTCON_Bits',0,23,162,4,3
	.word	23242
	.byte	22
	.byte	'_Ifx_SCU_FDR_Bits',0,23,165,4,16,4,35
	.byte	'STEP',0,2
	.word	467
	.byte	10,6,2,35,0,35
	.byte	'reserved_10',0,1
	.word	137
	.byte	4,2,2,35,1,35
	.byte	'DM',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'RESULT',0,2
	.word	467
	.byte	10,6,2,35,2,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	5,1,2,35,3,35
	.byte	'DISCLK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_FDR_Bits',0,23,173,4,3
	.word	23460
	.byte	22
	.byte	'_Ifx_SCU_FMR_Bits',0,23,176,4,16,4,35
	.byte	'FS0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'FS1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'FS2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'FS3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'FS4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'FS5',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'FS6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'FS7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'FC0',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'FC1',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'FC2',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'FC3',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'FC4',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'FC5',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'FC6',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'FC7',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	8,0,2,35,3,0,21
	.byte	'Ifx_SCU_FMR_Bits',0,23,196,4,3
	.word	23623
	.byte	22
	.byte	'_Ifx_SCU_ID_Bits',0,23,199,4,16,4,35
	.byte	'MODREV',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'MODTYPE',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'MODNUMBER',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_ID_Bits',0,23,204,4,3
	.word	23959
	.byte	22
	.byte	'_Ifx_SCU_IGCR_Bits',0,23,207,4,16,4,35
	.byte	'IPEN00',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'IPEN01',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'IPEN02',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'IPEN03',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'IPEN04',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'IPEN05',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'IPEN06',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'IPEN07',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,1
	.word	137
	.byte	5,3,2,35,1,35
	.byte	'GEEN0',0,1
	.word	137
	.byte	1,2,2,35,1,35
	.byte	'IGP0',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'IPEN10',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'IPEN11',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'IPEN12',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'IPEN13',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'IPEN14',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'IPEN15',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'IPEN16',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'IPEN17',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	5,3,2,35,3,35
	.byte	'GEEN1',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'IGP1',0,1
	.word	137
	.byte	2,0,2,35,3,0,21
	.byte	'Ifx_SCU_IGCR_Bits',0,23,231,4,3
	.word	24066
	.byte	22
	.byte	'_Ifx_SCU_IN_Bits',0,23,234,4,16,4,35
	.byte	'P0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'P1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_IN_Bits',0,23,239,4,3
	.word	24518
	.byte	22
	.byte	'_Ifx_SCU_IOCR_Bits',0,23,242,4,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	4,4,2,35,0,35
	.byte	'PC0',0,1
	.word	137
	.byte	4,0,2,35,0,35
	.byte	'reserved_8',0,1
	.word	137
	.byte	4,4,2,35,1,35
	.byte	'PC1',0,1
	.word	137
	.byte	4,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_IOCR_Bits',0,23,249,4,3
	.word	24617
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,23,252,4,16,4,35
	.byte	'LBISTREQ',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'LBISTREQP',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'PATTERNS',0,2
	.word	467
	.byte	14,0,2,35,0,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,23,130,5,3
	.word	24767
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,23,133,5,16,4,35
	.byte	'SEED',0,4
	.word	806
	.byte	23,9,2,35,0,35
	.byte	'reserved_23',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'SPLITSH',0,1
	.word	137
	.byte	3,5,2,35,3,35
	.byte	'BODY',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'LBISTFREQU',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,23,140,5,3
	.word	24916
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,23,143,5,16,4,35
	.byte	'SIGNATURE',0,4
	.word	806
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,1
	.word	137
	.byte	7,1,2,35,3,35
	.byte	'LBISTDONE',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,23,148,5,3
	.word	25077
	.byte	22
	.byte	'_Ifx_SCU_LCLCON_Bits',0,23,151,5,16,4,35
	.byte	'reserved_0',0,2
	.word	467
	.byte	16,0,2,35,0,35
	.byte	'LS',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'reserved_17',0,2
	.word	467
	.byte	14,1,2,35,2,35
	.byte	'LSEN',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_LCLCON_Bits',0,23,157,5,3
	.word	25207
	.byte	22
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,23,160,5,16,4,35
	.byte	'LCLT0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'LCLT1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_LCLTEST_Bits',0,23,165,5,3
	.word	25339
	.byte	22
	.byte	'_Ifx_SCU_MANID_Bits',0,23,168,5,16,4,35
	.byte	'DEPT',0,1
	.word	137
	.byte	5,3,2,35,0,35
	.byte	'MANUF',0,2
	.word	467
	.byte	11,0,2,35,0,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_MANID_Bits',0,23,173,5,3
	.word	25454
	.byte	22
	.byte	'_Ifx_SCU_OMR_Bits',0,23,176,5,16,4,35
	.byte	'PS0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'PS1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,2
	.word	467
	.byte	14,0,2,35,0,35
	.byte	'PCL0',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'PCL1',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'reserved_18',0,2
	.word	467
	.byte	14,0,2,35,2,0,21
	.byte	'Ifx_SCU_OMR_Bits',0,23,184,5,3
	.word	25565
	.byte	22
	.byte	'_Ifx_SCU_OSCCON_Bits',0,23,187,5,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'PLLLV',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'OSCRES',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'GAINSEL',0,1
	.word	137
	.byte	2,3,2,35,0,35
	.byte	'MODE',0,1
	.word	137
	.byte	2,1,2,35,0,35
	.byte	'SHBY',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'PLLHV',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'reserved_9',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'X1D',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'X1DEN',0,1
	.word	137
	.byte	1,4,2,35,1,35
	.byte	'reserved_12',0,1
	.word	137
	.byte	4,0,2,35,1,35
	.byte	'OSCVAL',0,1
	.word	137
	.byte	5,3,2,35,2,35
	.byte	'reserved_21',0,1
	.word	137
	.byte	2,1,2,35,2,35
	.byte	'APREN',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'CAP0EN',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'CAP1EN',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'CAP2EN',0,1
	.word	137
	.byte	1,5,2,35,3,35
	.byte	'CAP3EN',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_OSCCON_Bits',0,23,208,5,3
	.word	25723
	.byte	22
	.byte	'_Ifx_SCU_OUT_Bits',0,23,211,5,16,4,35
	.byte	'P0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'P1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_OUT_Bits',0,23,216,5,3
	.word	26135
	.byte	22
	.byte	'_Ifx_SCU_OVCCON_Bits',0,23,219,5,16,4,35
	.byte	'CSEL0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'CSEL1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'CSEL2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'reserved_3',0,2
	.word	467
	.byte	13,0,2,35,0,35
	.byte	'OVSTRT',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'OVSTP',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'DCINVAL',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'reserved_19',0,1
	.word	137
	.byte	5,0,2,35,2,35
	.byte	'OVCONF',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'POVCONF',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	6,0,2,35,3,0,21
	.byte	'Ifx_SCU_OVCCON_Bits',0,23,232,5,3
	.word	26236
	.byte	22
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,23,235,5,16,4,35
	.byte	'OVEN0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'OVEN1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'OVEN2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'reserved_3',0,4
	.word	806
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,23,241,5,3
	.word	26503
	.byte	22
	.byte	'_Ifx_SCU_PDISC_Bits',0,23,244,5,16,4,35
	.byte	'PDIS0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'PDIS1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDISC_Bits',0,23,249,5,3
	.word	26639
	.byte	22
	.byte	'_Ifx_SCU_PDR_Bits',0,23,252,5,16,4,35
	.byte	'PD0',0,1
	.word	137
	.byte	3,5,2,35,0,35
	.byte	'PL0',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'PD1',0,1
	.word	137
	.byte	3,1,2,35,0,35
	.byte	'PL1',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,4
	.word	806
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDR_Bits',0,23,131,6,3
	.word	26750
	.byte	22
	.byte	'_Ifx_SCU_PDRR_Bits',0,23,134,6,16,4,35
	.byte	'PDR0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'PDR1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'PDR2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'PDR3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'PDR4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'PDR5',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'PDR6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PDR7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,4
	.word	806
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDRR_Bits',0,23,145,6,3
	.word	26883
	.byte	22
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,23,148,6,16,4,35
	.byte	'VCOBYP',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'VCOPWD',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'MODEN',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'reserved_3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'SETFINDIS',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'CLRFINDIS',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'OSCDISCDIS',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'reserved_7',0,2
	.word	467
	.byte	2,7,2,35,0,35
	.byte	'NDIV',0,1
	.word	137
	.byte	7,0,2,35,1,35
	.byte	'PLLPWD',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'reserved_17',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'RESLD',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'reserved_19',0,1
	.word	137
	.byte	5,0,2,35,2,35
	.byte	'PDIV',0,1
	.word	137
	.byte	4,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_PLLCON0_Bits',0,23,165,6,3
	.word	27086
	.byte	22
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,23,168,6,16,4,35
	.byte	'K2DIV',0,1
	.word	137
	.byte	7,1,2,35,0,35
	.byte	'reserved_7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'K3DIV',0,1
	.word	137
	.byte	7,1,2,35,1,35
	.byte	'reserved_15',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'K1DIV',0,1
	.word	137
	.byte	7,1,2,35,2,35
	.byte	'reserved_23',0,2
	.word	467
	.byte	9,0,2,35,2,0,21
	.byte	'Ifx_SCU_PLLCON1_Bits',0,23,176,6,3
	.word	27442
	.byte	22
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,23,179,6,16,4,35
	.byte	'MODCFG',0,2
	.word	467
	.byte	16,0,2,35,0,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_PLLCON2_Bits',0,23,183,6,3
	.word	27620
	.byte	22
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,23,186,6,16,4,35
	.byte	'VCOBYP',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'VCOPWD',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	2,4,2,35,0,35
	.byte	'SETFINDIS',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'CLRFINDIS',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'OSCDISCDIS',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'reserved_7',0,2
	.word	467
	.byte	2,7,2,35,0,35
	.byte	'NDIV',0,1
	.word	137
	.byte	5,2,2,35,1,35
	.byte	'reserved_14',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'PLLPWD',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'reserved_17',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'RESLD',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'reserved_19',0,1
	.word	137
	.byte	5,0,2,35,2,35
	.byte	'PDIV',0,1
	.word	137
	.byte	4,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,23,203,6,3
	.word	27720
	.byte	22
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,23,206,6,16,4,35
	.byte	'K2DIV',0,1
	.word	137
	.byte	7,1,2,35,0,35
	.byte	'reserved_7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'K3DIV',0,1
	.word	137
	.byte	4,4,2,35,1,35
	.byte	'reserved_12',0,1
	.word	137
	.byte	4,0,2,35,1,35
	.byte	'K1DIV',0,1
	.word	137
	.byte	7,1,2,35,2,35
	.byte	'reserved_23',0,2
	.word	467
	.byte	9,0,2,35,2,0,21
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,23,214,6,3
	.word	28090
	.byte	22
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,23,217,6,16,4,35
	.byte	'VCOBYST',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'PWDSTAT',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'VCOLOCK',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'FINDIS',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'K1RDY',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'K2RDY',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'reserved_6',0,4
	.word	806
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,23,226,6,3
	.word	28276
	.byte	22
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,23,229,6,16,4,35
	.byte	'VCOBYST',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'reserved_1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'VCOLOCK',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'FINDIS',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'K1RDY',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'K2RDY',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'reserved_6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'MODRUN',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,4
	.word	806
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,23,240,6,3
	.word	28474
	.byte	22
	.byte	'_Ifx_SCU_PMCSR_Bits',0,23,243,6,16,4,35
	.byte	'REQSLP',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'SMUSLP',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'reserved_3',0,1
	.word	137
	.byte	5,0,2,35,0,35
	.byte	'PMST',0,1
	.word	137
	.byte	3,5,2,35,1,35
	.byte	'reserved_11',0,4
	.word	806
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR_Bits',0,23,250,6,3
	.word	28707
	.byte	22
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,23,253,6,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1WKEN',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'PINAWKEN',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'PINBWKEN',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'ESR0DFEN',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'ESR0EDCON',0,1
	.word	137
	.byte	2,1,2,35,0,35
	.byte	'ESR1DFEN',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'ESR1EDCON',0,1
	.word	137
	.byte	2,6,2,35,1,35
	.byte	'PINADFEN',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'PINAEDCON',0,1
	.word	137
	.byte	2,3,2,35,1,35
	.byte	'PINBDFEN',0,1
	.word	137
	.byte	1,2,2,35,1,35
	.byte	'PINBEDCON',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'reserved_16',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'STBYRAMSEL',0,1
	.word	137
	.byte	2,5,2,35,2,35
	.byte	'reserved_19',0,1
	.word	137
	.byte	2,3,2,35,2,35
	.byte	'TRISTEN',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'TRISTREQ',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'PORSTDF',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'PWRWKEN',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'DCDCSYNC',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'BLNKFIL',0,1
	.word	137
	.byte	3,3,2,35,3,35
	.byte	'ESR0TRIST',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'reserved_30',0,1
	.word	137
	.byte	1,1,2,35,3,35
	.byte	'LCK',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,23,151,7,3
	.word	28859
	.byte	22
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,23,154,7,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'CPUIDLSEL',0,1
	.word	137
	.byte	3,5,2,35,1,35
	.byte	'reserved_11',0,1
	.word	137
	.byte	1,4,2,35,1,35
	.byte	'IRADIS',0,1
	.word	137
	.byte	1,3,2,35,1,35
	.byte	'reserved_13',0,4
	.word	806
	.byte	11,8,2,35,0,35
	.byte	'CPUSEL',0,1
	.word	137
	.byte	3,5,2,35,3,35
	.byte	'STBYEVEN',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'STBYEV',0,1
	.word	137
	.byte	3,1,2,35,3,35
	.byte	'reserved_31',0,1
	.word	137
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,23,165,7,3
	.word	29407
	.byte	22
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,23,168,7,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'ESR1WKP',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'ESR1OVRUN',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'PINAWKP',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'PINAOVRUN',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'PINBWKP',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PINBOVRUN',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'PWRWKP',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'PORSTDF',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'HWCFGEVR',0,1
	.word	137
	.byte	3,3,2,35,1,35
	.byte	'STBYRAM',0,1
	.word	137
	.byte	2,1,2,35,1,35
	.byte	'TRIST',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'reserved_16',0,1
	.word	137
	.byte	4,4,2,35,2,35
	.byte	'ESR1WKEN',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'PINAWKEN',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'PINBWKEN',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'PWRWKEN',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'BLNKFIL',0,1
	.word	137
	.byte	3,5,2,35,3,35
	.byte	'ESR0TRIST',0,1
	.word	137
	.byte	1,4,2,35,3,35
	.byte	'reserved_28',0,1
	.word	137
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,23,190,7,3
	.word	29652
	.byte	22
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,23,193,7,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'ESR1WKPCLR',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'ESR1OVRUNCLR',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'PINAWKPCLR',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'PINAOVRUNCLR',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'PINBWKPCLR',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PINBOVRUNCLR',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'PWRWKPCLR',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'reserved_9',0,4
	.word	806
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,23,204,7,3
	.word	30113
	.byte	22
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,23,207,7,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'CLRC',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,2
	.word	467
	.byte	10,4,2,35,0,35
	.byte	'CSS0',0,1
	.word	137
	.byte	1,3,2,35,1,35
	.byte	'CSS1',0,1
	.word	137
	.byte	1,2,2,35,1,35
	.byte	'CSS2',0,1
	.word	137
	.byte	1,1,2,35,1,35
	.byte	'reserved_15',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'USRINFO',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_RSTCON2_Bits',0,23,217,7,3
	.word	30383
	.byte	22
	.byte	'_Ifx_SCU_RSTCON_Bits',0,23,220,7,16,4,35
	.byte	'ESR0',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'ESR1',0,1
	.word	137
	.byte	2,4,2,35,0,35
	.byte	'reserved_4',0,1
	.word	137
	.byte	2,2,2,35,0,35
	.byte	'SMU',0,1
	.word	137
	.byte	2,0,2,35,0,35
	.byte	'SW',0,1
	.word	137
	.byte	2,6,2,35,1,35
	.byte	'STM0',0,1
	.word	137
	.byte	2,4,2,35,1,35
	.byte	'STM1',0,1
	.word	137
	.byte	2,2,2,35,1,35
	.byte	'STM2',0,1
	.word	137
	.byte	2,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_RSTCON_Bits',0,23,231,7,3
	.word	30592
	.byte	22
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,23,234,7,16,4,35
	.byte	'ESR0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'SMU',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'SW',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'STM0',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'STM1',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'STM2',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'reserved_8',0,1
	.word	137
	.byte	8,0,2,35,1,35
	.byte	'PORST',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'reserved_17',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'CB0',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'CB1',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'CB3',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'reserved_21',0,1
	.word	137
	.byte	2,1,2,35,2,35
	.byte	'EVR13',0,1
	.word	137
	.byte	1,0,2,35,2,35
	.byte	'EVR33',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'SWD',0,1
	.word	137
	.byte	1,6,2,35,3,35
	.byte	'reserved_26',0,1
	.word	137
	.byte	2,4,2,35,3,35
	.byte	'STBYR',0,1
	.word	137
	.byte	1,3,2,35,3,35
	.byte	'reserved_29',0,1
	.word	137
	.byte	3,0,2,35,3,0,21
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,23,129,8,3
	.word	30803
	.byte	22
	.byte	'_Ifx_SCU_SAFECON_Bits',0,23,132,8,16,4,35
	.byte	'HBT',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'reserved_1',0,4
	.word	806
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_SCU_SAFECON_Bits',0,23,136,8,3
	.word	31235
	.byte	22
	.byte	'_Ifx_SCU_STSTAT_Bits',0,23,139,8,16,4,35
	.byte	'HWCFG',0,1
	.word	137
	.byte	8,0,2,35,0,35
	.byte	'FTM',0,1
	.word	137
	.byte	7,1,2,35,1,35
	.byte	'MODE',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'reserved_16',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'LUDIS',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'reserved_18',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'TRSTL',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'SPDEN',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'reserved_21',0,1
	.word	137
	.byte	3,0,2,35,2,35
	.byte	'RAMINT',0,1
	.word	137
	.byte	1,7,2,35,3,35
	.byte	'reserved_25',0,1
	.word	137
	.byte	7,0,2,35,3,0,21
	.byte	'Ifx_SCU_STSTAT_Bits',0,23,152,8,3
	.word	31331
	.byte	22
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,23,155,8,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'SWRSTREQ',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,4
	.word	806
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,23,160,8,3
	.word	31597
	.byte	22
	.byte	'_Ifx_SCU_SYSCON_Bits',0,23,163,8,16,4,35
	.byte	'CCTRIG0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'reserved_1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'RAMINTM',0,1
	.word	137
	.byte	2,4,2,35,0,35
	.byte	'SETLUDIS',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'reserved_5',0,1
	.word	137
	.byte	3,0,2,35,0,35
	.byte	'DATM',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'reserved_9',0,4
	.word	806
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_SCU_SYSCON_Bits',0,23,172,8,3
	.word	31722
	.byte	22
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,23,175,8,16,4,35
	.byte	'ESR0T',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1T',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'SMUT',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,23,182,8,3
	.word	31919
	.byte	22
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,23,185,8,16,4,35
	.byte	'ESR0T',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1T',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'SMUT',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,23,192,8,3
	.word	32072
	.byte	22
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,23,195,8,16,4,35
	.byte	'ESR0T',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1T',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'SMUT',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSET_Bits',0,23,202,8,3
	.word	32225
	.byte	22
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,23,205,8,16,4,35
	.byte	'ESR0T',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'ESR1T',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'reserved_2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'SMUT',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,4
	.word	806
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,23,212,8,3
	.word	32378
	.byte	2
	.byte	'unsigned int',0,4,7,22
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,23,215,8,16,4,35
	.byte	'ENDINIT',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'LCK',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'PW',0,4
	.word	32533
	.byte	14,16,2,35,0,35
	.byte	'REL',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,23,221,8,3
	.word	32549
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,23,224,8,16,4,35
	.byte	'reserved_0',0,1
	.word	137
	.byte	2,6,2,35,0,35
	.byte	'IR0',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'DR',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'IR1',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'UR',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PAR',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'TCR',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'TCTR',0,1
	.word	137
	.byte	7,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,23,236,8,3
	.word	32679
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,23,239,8,16,4,35
	.byte	'AE',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'OE',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'IS0',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'DS',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'TO',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'IS1',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'US',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PAS',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'TCS',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'TCT',0,1
	.word	137
	.byte	7,0,2,35,1,35
	.byte	'TIM',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,23,252,8,3
	.word	32917
	.byte	22
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,23,255,8,16,4,35
	.byte	'ENDINIT',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'LCK',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'PW',0,4
	.word	32533
	.byte	14,16,2,35,0,35
	.byte	'REL',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,23,133,9,3
	.word	33140
	.byte	22
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,23,136,9,16,4,35
	.byte	'CLRIRF',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'reserved_1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'IR0',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'DR',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'reserved_4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'IR1',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'UR',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PAR',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'TCR',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'TCTR',0,1
	.word	137
	.byte	7,0,2,35,1,35
	.byte	'reserved_16',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,23,149,9,3
	.word	33266
	.byte	22
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,23,152,9,16,4,35
	.byte	'AE',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'OE',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'IS0',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'DS',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'TO',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'IS1',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'US',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'PAS',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'TCS',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'TCT',0,1
	.word	137
	.byte	7,0,2,35,1,35
	.byte	'TIM',0,2
	.word	467
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,23,165,9,3
	.word	33518
	.byte	31,23,173,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	15502
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN0',0,23,178,9,3
	.word	33737
	.byte	31,23,181,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16059
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN1',0,23,186,9,3
	.word	33801
	.byte	31,23,189,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16136
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ARSTDIS',0,23,194,9,3
	.word	33865
	.byte	31,23,197,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16272
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON0',0,23,202,9,3
	.word	33930
	.byte	31,23,205,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16552
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON1',0,23,210,9,3
	.word	33995
	.byte	31,23,213,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16790
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON2',0,23,218,9,3
	.word	34060
	.byte	31,23,221,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16918
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON3',0,23,226,9,3
	.word	34125
	.byte	31,23,229,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17161
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON4',0,23,234,9,3
	.word	34190
	.byte	31,23,237,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17396
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON5',0,23,242,9,3
	.word	34255
	.byte	31,23,245,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17524
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON6',0,23,250,9,3
	.word	34320
	.byte	31,23,253,9,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17624
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON7',0,23,130,10,3
	.word	34385
	.byte	31,23,133,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17724
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON8',0,23,138,10,3
	.word	34450
	.byte	31,23,141,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17824
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CHIPID',0,23,146,10,3
	.word	34515
	.byte	31,23,149,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18032
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_DTSCON',0,23,154,10,3
	.word	34579
	.byte	31,23,157,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18197
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_DTSLIM',0,23,162,10,3
	.word	34643
	.byte	31,23,165,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18380
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_DTSSTAT',0,23,170,10,3
	.word	34707
	.byte	31,23,173,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18534
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EICR',0,23,178,10,3
	.word	34772
	.byte	31,23,181,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18898
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EIFR',0,23,186,10,3
	.word	34834
	.byte	31,23,189,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19109
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EMSR',0,23,194,10,3
	.word	34896
	.byte	31,23,197,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19361
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ESRCFG',0,23,202,10,3
	.word	34958
	.byte	31,23,205,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19479
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ESROCFG',0,23,210,10,3
	.word	35022
	.byte	31,23,213,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19590
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVR13CON',0,23,218,10,3
	.word	35087
	.byte	31,23,221,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19753
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVR33CON',0,23,226,10,3
	.word	35153
	.byte	31,23,229,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19916
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRADCSTAT',0,23,234,10,3
	.word	35219
	.byte	31,23,237,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20074
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRDVSTAT',0,23,242,10,3
	.word	35287
	.byte	31,23,245,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20239
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRMONCTRL',0,23,250,10,3
	.word	35354
	.byte	31,23,253,10,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20607
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVROVMON',0,23,130,11,3
	.word	35422
	.byte	31,23,133,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20786
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRRSTCON',0,23,138,11,3
	.word	35488
	.byte	31,23,141,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21051
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,23,146,11,3
	.word	35555
	.byte	31,23,149,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21204
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,23,154,11,3
	.word	35624
	.byte	31,23,157,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21360
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,23,162,11,3
	.word	35693
	.byte	31,23,165,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21522
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,23,170,11,3
	.word	35762
	.byte	31,23,173,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21665
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,23,178,11,3
	.word	35831
	.byte	31,23,181,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21830
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,23,186,11,3
	.word	35900
	.byte	31,23,189,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21975
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCTRL1',0,23,194,11,3
	.word	35969
	.byte	31,23,197,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22156
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCTRL2',0,23,202,11,3
	.word	36037
	.byte	31,23,205,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22330
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCTRL3',0,23,210,11,3
	.word	36105
	.byte	31,23,213,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22490
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSDCTRL4',0,23,218,11,3
	.word	36173
	.byte	31,23,221,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22634
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRSTAT',0,23,226,11,3
	.word	36241
	.byte	31,23,229,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22908
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRTRIM',0,23,234,11,3
	.word	36306
	.byte	31,23,237,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23063
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EVRUVMON',0,23,242,11,3
	.word	36371
	.byte	31,23,245,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23242
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EXTCON',0,23,250,11,3
	.word	36437
	.byte	31,23,253,11,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23460
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_FDR',0,23,130,12,3
	.word	36501
	.byte	31,23,133,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23623
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_FMR',0,23,138,12,3
	.word	36562
	.byte	31,23,141,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23959
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ID',0,23,146,12,3
	.word	36623
	.byte	31,23,149,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24066
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IGCR',0,23,154,12,3
	.word	36683
	.byte	31,23,157,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24518
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IN',0,23,162,12,3
	.word	36745
	.byte	31,23,165,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24617
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IOCR',0,23,170,12,3
	.word	36805
	.byte	31,23,173,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24767
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL0',0,23,178,12,3
	.word	36867
	.byte	31,23,181,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24916
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL1',0,23,186,12,3
	.word	36935
	.byte	31,23,189,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25077
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL2',0,23,194,12,3
	.word	37003
	.byte	31,23,197,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25207
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LCLCON',0,23,202,12,3
	.word	37071
	.byte	31,23,205,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25339
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LCLTEST',0,23,210,12,3
	.word	37135
	.byte	31,23,213,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25454
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_MANID',0,23,218,12,3
	.word	37200
	.byte	31,23,221,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25565
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OMR',0,23,226,12,3
	.word	37263
	.byte	31,23,229,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25723
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OSCCON',0,23,234,12,3
	.word	37324
	.byte	31,23,237,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26135
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OUT',0,23,242,12,3
	.word	37388
	.byte	31,23,245,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26236
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OVCCON',0,23,250,12,3
	.word	37449
	.byte	31,23,253,12,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26503
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OVCENABLE',0,23,130,13,3
	.word	37513
	.byte	31,23,133,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26639
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDISC',0,23,138,13,3
	.word	37580
	.byte	31,23,141,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26750
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDR',0,23,146,13,3
	.word	37643
	.byte	31,23,149,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26883
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDRR',0,23,154,13,3
	.word	37704
	.byte	31,23,157,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27086
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLCON0',0,23,162,13,3
	.word	37766
	.byte	31,23,165,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27442
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLCON1',0,23,170,13,3
	.word	37831
	.byte	31,23,173,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27620
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLCON2',0,23,178,13,3
	.word	37896
	.byte	31,23,181,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27720
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLERAYCON0',0,23,186,13,3
	.word	37961
	.byte	31,23,189,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28090
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLERAYCON1',0,23,194,13,3
	.word	38030
	.byte	31,23,197,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28276
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLERAYSTAT',0,23,202,13,3
	.word	38099
	.byte	31,23,205,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28474
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PLLSTAT',0,23,210,13,3
	.word	38168
	.byte	31,23,213,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28707
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR',0,23,218,13,3
	.word	38233
	.byte	31,23,221,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28859
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWCR0',0,23,226,13,3
	.word	38296
	.byte	31,23,229,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29407
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWCR1',0,23,234,13,3
	.word	38361
	.byte	31,23,237,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29652
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWSTAT',0,23,242,13,3
	.word	38426
	.byte	31,23,245,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30113
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWSTATCLR',0,23,250,13,3
	.word	38492
	.byte	31,23,253,13,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30592
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON',0,23,130,14,3
	.word	38561
	.byte	31,23,133,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30383
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON2',0,23,138,14,3
	.word	38625
	.byte	31,23,141,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30803
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTSTAT',0,23,146,14,3
	.word	38690
	.byte	31,23,149,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31235
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SAFECON',0,23,154,14,3
	.word	38755
	.byte	31,23,157,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31331
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STSTAT',0,23,162,14,3
	.word	38820
	.byte	31,23,165,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31597
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SWRSTCON',0,23,170,14,3
	.word	38884
	.byte	31,23,173,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31722
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSCON',0,23,178,14,3
	.word	38950
	.byte	31,23,181,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31919
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPCLR',0,23,186,14,3
	.word	39014
	.byte	31,23,189,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32072
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPDIS',0,23,194,14,3
	.word	39079
	.byte	31,23,197,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32225
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSET',0,23,202,14,3
	.word	39144
	.byte	31,23,205,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32378
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSTAT',0,23,210,14,3
	.word	39209
	.byte	31,23,213,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32549
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTCPU_CON0',0,23,218,14,3
	.word	39275
	.byte	31,23,221,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32679
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTCPU_CON1',0,23,226,14,3
	.word	39344
	.byte	31,23,229,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32917
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTCPU_SR',0,23,234,14,3
	.word	39413
	.byte	31,23,237,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33140
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTS_CON0',0,23,242,14,3
	.word	39480
	.byte	31,23,245,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33266
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTS_CON1',0,23,250,14,3
	.word	39547
	.byte	31,23,253,14,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33518
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_WDTS_SR',0,23,130,15,3
	.word	39614
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU',0,23,141,15,25,12,9
	.byte	'CON0',0
	.word	39275
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	39344
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	39413
	.byte	4,2,35,8,0,34
	.word	39679
	.byte	21
	.byte	'Ifx_SCU_WDTCPU',0,23,146,15,3
	.word	39742
	.byte	22
	.byte	'_Ifx_SCU_WDTS',0,23,149,15,25,12,9
	.byte	'CON0',0
	.word	39480
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	39547
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	39614
	.byte	4,2,35,8,0,34
	.word	39771
	.byte	21
	.byte	'Ifx_SCU_WDTS',0,23,154,15,3
	.word	39832
	.byte	22
	.byte	'_Ifx_GTM_ACCEN0_Bits',0,24,49,16,4,35
	.byte	'EN0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN22',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'EN23',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'EN24',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'EN25',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'EN26',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'EN27',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'EN28',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'EN29',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'EN30',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'EN31',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ACCEN0_Bits',0,24,83,3
	.word	39859
	.byte	22
	.byte	'_Ifx_GTM_ACCEN1_Bits',0,24,86,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_GTM_ACCEN1_Bits',0,24,89,3
	.word	40416
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG0OUT0_Bits',0,24,92,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG0OUT0_Bits',0,24,102,3
	.word	40493
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG0OUT1_Bits',0,24,105,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG0OUT1_Bits',0,24,109,3
	.word	40688
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG1OUT0_Bits',0,24,112,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG1OUT0_Bits',0,24,122,3
	.word	40793
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG1OUT1_Bits',0,24,125,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG1OUT1_Bits',0,24,129,1,3
	.word	40988
	.byte	22
	.byte	'_Ifx_GTM_AEI_ADDR_XPT_Bits',0,24,132,1,16,4,35
	.byte	'TO_ADDR',0,4
	.word	32533
	.byte	20,12,2,35,0,35
	.byte	'TO_W1R0',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	11,0,2,35,0,0,21
	.byte	'Ifx_GTM_AEI_ADDR_XPT_Bits',0,24,137,1,3
	.word	41094
	.byte	22
	.byte	'_Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,24,140,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,24,144,1,3
	.word	41224
	.byte	22
	.byte	'_Ifx_GTM_ARU_ARU_ACCESS_Bits',0,24,147,1,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'RREQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'WREQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'reserved_14',0,4
	.word	32533
	.byte	18,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_ARU_ACCESS_Bits',0,24,154,1,3
	.word	41336
	.byte	22
	.byte	'_Ifx_GTM_ARU_DATA_H_Bits',0,24,157,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DATA_H_Bits',0,24,161,1,3
	.word	41502
	.byte	22
	.byte	'_Ifx_GTM_ARU_DATA_L_Bits',0,24,164,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DATA_L_Bits',0,24,168,1,3
	.word	41606
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,24,171,1,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,24,175,1,3
	.word	41710
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,24,178,1,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,24,182,1,3
	.word	41823
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,24,185,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,24,189,1,3
	.word	41936
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,24,192,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,24,196,1,3
	.word	42050
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,24,199,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,24,203,1,3
	.word	42164
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,24,206,1,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	29,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,24,210,1,3
	.word	42278
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_EN_Bits',0,24,213,1,16,4,35
	.byte	'NEW_DATA0_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'NEW_DATA1_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ACC_ACK_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_EN_Bits',0,24,219,1,3
	.word	42392
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,24,222,1,16,4,35
	.byte	'TRG_NEW_DATA0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_NEW_DATA',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_ACC_ACK',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,24,228,1,3
	.word	42561
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_MODE_Bits',0,24,231,1,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_MODE_Bits',0,24,235,1,3
	.word	42730
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,24,238,1,16,4,35
	.byte	'NEW_DATA0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'NEW_DATA1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ACC_ACK',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,24,244,1,3
	.word	42841
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,24,247,1,16,4,35
	.byte	'ACT_TB',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'TB_TRIG',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TBU_SEL',0,4
	.word	32533
	.byte	2,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,24,253,1,3
	.word	42997
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,24,128,2,16,4,35
	.byte	'ENDIS_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,24,139,2,3
	.word	43151
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,24,142,2,16,4,35
	.byte	'ENDIS_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,24,153,2,3
	.word	43441
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,24,156,2,16,4,35
	.byte	'FUPD_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'FUPD_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'FUPD_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'FUPD_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'FUPD_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'FUPD_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'FUPD_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'FUPD_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'RSTCN0_CH0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'RSTCN0_CH1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'RSTCN0_CH2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'RSTCN0_CH3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'RSTCN0_CH4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'RSTCN0_CH5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'RSTCN0_CH6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'RSTCN0_CH7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,24,174,2,3
	.word	43731
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,24,177,2,16,4,35
	.byte	'HOST_TRIG',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	7,24,2,35,0,35
	.byte	'RST_CH0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'RST_CH1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'RST_CH2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'RST_CH3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'RST_CH4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'RST_CH5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'RST_CH6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'RST_CH7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'UPEN_CTRL0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'UPEN_CTRL1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'UPEN_CTRL2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'UPEN_CTRL3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'UPEN_CTRL4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'UPEN_CTRL5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'UPEN_CTRL6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'UPEN_CTRL7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,24,197,2,3
	.word	44164
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,24,200,2,16,4,35
	.byte	'INT_TRIG0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'INT_TRIG1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'INT_TRIG2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'INT_TRIG3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'INT_TRIG4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'INT_TRIG5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'INT_TRIG6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'INT_TRIG7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,24,211,2,3
	.word	44614
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,24,214,2,16,4,35
	.byte	'OUTEN_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,24,225,2,3
	.word	44884
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,24,228,2,16,4,35
	.byte	'OUTEN_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,24,239,2,3
	.word	45174
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CM0_Bits',0,24,242,2,16,4,35
	.byte	'CM0',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CM0_Bits',0,24,246,2,3
	.word	45464
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CM1_Bits',0,24,249,2,16,4,35
	.byte	'CM1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CM1_Bits',0,24,253,2,3
	.word	45569
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CN0_Bits',0,24,128,3,16,4,35
	.byte	'CN0',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CN0_Bits',0,24,132,3,3
	.word	45674
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CTRL_Bits',0,24,135,3,16,4,35
	.byte	'MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'TB12_SEL',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACB',0,4
	.word	32533
	.byte	5,23,2,35,0,35
	.byte	'CMP_CTRL',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'CLK_SRCCLK_SRC_SR',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'reserved_15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'WR_REQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'reserved_17',0,4
	.word	32533
	.byte	3,12,2,35,0,35
	.byte	'RST_CCU0',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'TRIGOUT',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'SLA',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'OSM',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'ABM',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CTRL_Bits',0,24,155,3,3
	.word	45779
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,24,158,3,16,4,35
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,24,163,3,3
	.word	46197
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,24,166,3,16,4,35
	.byte	'TRG_CCU0TC',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_CCU1TC',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,24,171,3,3
	.word	46342
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,24,174,3,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,24,178,3,3
	.word	46491
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,24,181,3,16,4,35
	.byte	'CCU0TC',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CCU1TC',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,24,186,3,3
	.word	46610
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_RDADDR_Bits',0,24,189,3,16,4,35
	.byte	'RDADDR0',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	7,16,2,35,0,35
	.byte	'RDADDR1',0,4
	.word	32533
	.byte	9,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	7,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_RDADDR_Bits',0,24,195,3,3
	.word	46749
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMC_Bits',0,24,198,3,16,4,35
	.byte	'MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'TB12_SEL',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACB10',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ACB42',0,4
	.word	32533
	.byte	3,23,2,35,0,35
	.byte	'CMP_CTRL',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'WR_REQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'reserved_17',0,4
	.word	32533
	.byte	7,8,2,35,0,35
	.byte	'TRIGOUT',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'SLA',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'reserved_26',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'ABM',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMC_Bits',0,24,216,3,3
	.word	46905
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMI_Bits',0,24,219,3,16,4,35
	.byte	'MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACB0',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	6,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	20,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMI_Bits',0,24,228,3,3
	.word	47278
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMP_Bits',0,24,231,3,16,4,35
	.byte	'MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ADL',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	5,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'CLK_SRC_SR',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'reserved_15',0,4
	.word	32533
	.byte	5,12,2,35,0,35
	.byte	'RST_CCU0',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'TRIGOUT',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'OSM',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMP_Bits',0,24,247,3,3
	.word	47478
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMS_Bits',0,24,250,3,16,4,35
	.byte	'MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACB0',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	6,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'CLK_SRC',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'reserved_15',0,4
	.word	32533
	.byte	11,6,2,35,0,35
	.byte	'OSM',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMS_Bits',0,24,134,4,3
	.word	47822
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SR0_Bits',0,24,137,4,16,4,35
	.byte	'SR0',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SR0_Bits',0,24,141,4,3
	.word	48079
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SR1_Bits',0,24,144,4,16,4,35
	.byte	'SR1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SR1_Bits',0,24,148,4,3
	.word	48184
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_STAT_Bits',0,24,151,4,16,4,35
	.byte	'OL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	15,16,2,35,0,35
	.byte	'ACBI',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'DV',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'WRF',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'ACBO',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_STAT_Bits',0,24,161,4,3
	.word	48289
	.byte	22
	.byte	'_Ifx_GTM_BRC_EIRQ_EN_Bits',0,24,164,4,16,4,35
	.byte	'DEST_ERR_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DID_EN0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'DID_EN1',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'DID_EN2',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'DID_EN3',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'DID_EN4',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DID_EN5',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'DID_EN6',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'DID_EN7',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DID_EN8',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'DID_EN9',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'DID_EN10',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'DID_EN11',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_EIRQ_EN_Bits',0,24,180,4,3
	.word	48501
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_EN_Bits',0,24,183,4,16,4,35
	.byte	'DEST_ERR_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DID_EN0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'DID_EN1',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'DID_EN2',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'DID_EN3',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'DID_EN4',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DID_EN5',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'DID_EN6',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'DID_EN7',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DID_EN8',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'DID_EN9',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'DID_EN10',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'DID_EN11',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_EN_Bits',0,24,199,4,3
	.word	48844
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,24,202,4,16,4,35
	.byte	'TRG_DEST_ERR',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_DID0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_DID1',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_DID2',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG_DID3',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG_DID4',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TRG_DID5',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TRG_DID6',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TRG_DID7',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TRG_DID8',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TRG_DID9',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TRG_DID10',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TRG_DID11',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,24,218,4,3
	.word	49185
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_MODE_Bits',0,24,221,4,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_MODE_Bits',0,24,225,4,3
	.word	49549
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,24,228,4,16,4,35
	.byte	'DEST_ERR',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DID0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'DID1',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'DID2',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'DID3',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'DID4',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DID5',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'DID6',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'DID7',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DID8',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'DID9',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'DID10',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'DID11',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,24,244,4,3
	.word	49660
	.byte	22
	.byte	'_Ifx_GTM_BRC_RST_Bits',0,24,247,4,16,4,35
	.byte	'RST',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_RST_Bits',0,24,251,4,3
	.word	49970
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC0_ADDR_Bits',0,24,254,4,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC0_ADDR_Bits',0,24,132,5,3
	.word	50066
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC0_DEST_Bits',0,24,135,5,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC0_DEST_Bits',0,24,161,5,3
	.word	50218
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC10_ADDR_Bits',0,24,164,5,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC10_ADDR_Bits',0,24,170,5,3
	.word	50787
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC10_DEST_Bits',0,24,173,5,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC10_DEST_Bits',0,24,199,5,3
	.word	50941
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC11_ADDR_Bits',0,24,202,5,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC11_ADDR_Bits',0,24,208,5,3
	.word	51512
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC11_DEST_Bits',0,24,211,5,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC11_DEST_Bits',0,24,237,5,3
	.word	51666
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC1_ADDR_Bits',0,24,240,5,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC1_ADDR_Bits',0,24,246,5,3
	.word	52237
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC1_DEST_Bits',0,24,249,5,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC1_DEST_Bits',0,24,147,6,3
	.word	52389
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC2_ADDR_Bits',0,24,150,6,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC2_ADDR_Bits',0,24,156,6,3
	.word	52958
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC2_DEST_Bits',0,24,159,6,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC2_DEST_Bits',0,24,185,6,3
	.word	53110
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC3_ADDR_Bits',0,24,188,6,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC3_ADDR_Bits',0,24,194,6,3
	.word	53679
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC3_DEST_Bits',0,24,197,6,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC3_DEST_Bits',0,24,223,6,3
	.word	53831
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC4_ADDR_Bits',0,24,226,6,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC4_ADDR_Bits',0,24,232,6,3
	.word	54400
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC4_DEST_Bits',0,24,235,6,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC4_DEST_Bits',0,24,133,7,3
	.word	54552
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC5_ADDR_Bits',0,24,136,7,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC5_ADDR_Bits',0,24,142,7,3
	.word	55121
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC5_DEST_Bits',0,24,145,7,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC5_DEST_Bits',0,24,171,7,3
	.word	55273
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC6_ADDR_Bits',0,24,174,7,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC6_ADDR_Bits',0,24,180,7,3
	.word	55842
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC6_DEST_Bits',0,24,183,7,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC6_DEST_Bits',0,24,209,7,3
	.word	55994
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC7_ADDR_Bits',0,24,212,7,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC7_ADDR_Bits',0,24,218,7,3
	.word	56563
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC7_DEST_Bits',0,24,221,7,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC7_DEST_Bits',0,24,247,7,3
	.word	56715
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC8_ADDR_Bits',0,24,250,7,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC8_ADDR_Bits',0,24,128,8,3
	.word	57284
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC8_DEST_Bits',0,24,131,8,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC8_DEST_Bits',0,24,157,8,3
	.word	57436
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC9_ADDR_Bits',0,24,160,8,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'BRC_MODE',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC9_ADDR_Bits',0,24,166,8,3
	.word	58005
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC9_DEST_Bits',0,24,169,8,16,4,35
	.byte	'EN_DEST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'EN_DEST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'EN_DEST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EN_DEST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'EN_DEST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'EN_DEST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'EN_DEST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'EN_DEST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'EN_DEST8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'EN_DEST9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'EN_DEST10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'EN_DEST11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'EN_DEST12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'EN_DEST13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'EN_DEST14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EN_DEST15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'EN_DEST16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'EN_DEST17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'EN_DEST18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'EN_DEST19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'EN_DEST20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'EN_DEST21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'EN_TRASHBIN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC9_DEST_Bits',0,24,195,8,3
	.word	58157
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_MODE_Bits',0,24,198,8,16,4,35
	.byte	'BRG_MODE',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MSK_WR_RSP',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	6,24,2,35,0,35
	.byte	'MODE_UP_PGR',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'BUFF_OVL',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'SYNC_INPUT_REG',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'BRG_RST',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'reserved_17',0,4
	.word	32533
	.byte	7,8,2,35,0,35
	.byte	'BUFF_DPT',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_MODE_Bits',0,24,211,8,3
	.word	58726
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_PTR1_Bits',0,24,214,8,16,4,35
	.byte	'NEW_TRAN_PTR',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'FIRST_RSP_PTR',0,4
	.word	32533
	.byte	5,22,2,35,0,35
	.byte	'TRAN_IN_PGR',0,4
	.word	32533
	.byte	5,17,2,35,0,35
	.byte	'ABT_TRAN_PGR',0,4
	.word	32533
	.byte	5,12,2,35,0,35
	.byte	'FBC',0,4
	.word	32533
	.byte	6,6,2,35,0,35
	.byte	'RSP_TRAN_RDY',0,4
	.word	32533
	.byte	6,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_PTR1_Bits',0,24,222,8,3
	.word	59034
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_PTR2_Bits',0,24,225,8,16,4,35
	.byte	'TRAN_IN_PGR2',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_PTR2_Bits',0,24,229,8,3
	.word	59236
	.byte	22
	.byte	'_Ifx_GTM_CLC_Bits',0,24,232,8,16,4,35
	.byte	'DISR',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DISS',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'EDIS',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_CLC_Bits',0,24,239,8,3
	.word	59349
	.byte	22
	.byte	'_Ifx_GTM_CMP_EIRQ_EN_Bits',0,24,242,8,16,4,35
	.byte	'ABWC0_EN_EIRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ABWC1_EN_EIRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ABWC2_EN_EIRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ABWC3_EN_EIRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ABWC4_EN_EIRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ABWC5_EN_EIRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ABWC6_EN_EIRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ABWC7_EN_EIRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ABWC8_EN_EIRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ABWC9_EN_EIRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ABWC10_EN_EIRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ABWC11_EN_EIRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TBWC0_EN_EIRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TBWC1_EN_EIRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TBWC2_EN_EIRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TBWC3_EN_EIRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TBWC4_EN_EIRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TBWC5_EN_EIRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TBWC6_EN_EIRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TBWC7_EN_EIRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TBWC8_EN_EIRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TBWC9_EN_EIRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TBWC10_EN_EIRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TBWC11_EN_EIRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_EIRQ_EN_Bits',0,24,141,9,3
	.word	59492
	.byte	22
	.byte	'_Ifx_GTM_CMP_EN_Bits',0,24,144,9,16,4,35
	.byte	'ABWC0_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ABWC1_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ABWC2_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ABWC3_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ABWC4_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ABWC5_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ABWC6_EN',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ABWC7_EN',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ABWC8_EN',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ABWC9_EN',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ABWC10_EN',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ABWC11_EN',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TBWC0_EN',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TBWC1_EN',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TBWC2_EN',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TBWC3_EN',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TBWC4_EN',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TBWC5_EN',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TBWC6_EN',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TBWC7_EN',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TBWC8_EN',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TBWC9_EN',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TBWC10_EN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TBWC11_EN',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_EN_Bits',0,24,171,9,3
	.word	60186
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_EN_Bits',0,24,174,9,16,4,35
	.byte	'ABWC0_EN_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ABWC1_EN_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ABWC2_EN_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ABWC3_EN_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ABWC4_EN_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ABWC5_EN_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ABWC6_EN_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ABWC7_EN_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ABWC8_EN_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ABWC9_EN_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ABWC10_EN_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ABWC11_EN_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TBWC0_EN_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TBWC1_EN_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TBWC2_EN_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TBWC3_EN_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TBWC4_EN_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TBWC5_EN_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TBWC6_EN_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TBWC7_EN_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TBWC8_EN_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TBWC9_EN_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TBWC10_EN_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TBWC11_EN_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_EN_Bits',0,24,201,9,3
	.word	60750
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,24,204,9,16,4,35
	.byte	'TRG_ABWC0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_ABWC1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_ABWC2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_ABWC3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG_ABWC4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG_ABWC5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TRG_ABWC6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TRG_ABWC7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TRG_ABWC8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TRG_ABWC9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TRG_ABWC10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TRG_ABWC11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TRG_TBWC0',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TRG_TBWC1',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TRG_TBWC2',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TRG_TBWC3',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TRG_TBWC4',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TRG_TBWC5',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TRG_TBWC6',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TRG_TBWC7',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TRG_TBWC8',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TRG_TBWC9',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TRG_TBWC10',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TRG_TBWC11',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,24,231,9,3
	.word	61418
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_MODE_Bits',0,24,234,9,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_MODE_Bits',0,24,238,9,3
	.word	62024
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,24,241,9,16,4,35
	.byte	'ABWC0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ABWC1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ABWC2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ABWC3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ABWC4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ABWC5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ABWC6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ABWC7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ABWC8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ABWC9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ABWC10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ABWC11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TBWC0',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TBWC1',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TBWC2',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TBWC3',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TBWC4',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TBWC5',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TBWC6',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TBWC7',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TBWC8',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TBWC9',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TBWC10',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TBWC11',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,24,140,10,3
	.word	62135
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,24,143,10,16,4,35
	.byte	'CLK_CNT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,24,147,10,3
	.word	62643
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,24,150,10,16,4,35
	.byte	'CLK_CNT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'CLK6_SEL',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	7,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,24,155,10,3
	.word	62760
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,24,158,10,16,4,35
	.byte	'CLK_CNT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'CLK7_SEL',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	7,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,24,163,10,3
	.word	62895
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_EN_Bits',0,24,166,10,16,4,35
	.byte	'EN_CLK0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'EN_CLK1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'EN_CLK2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'EN_CLK3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'EN_CLK4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'EN_CLK5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'EN_CLK6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'EN_CLK7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'EN_ECLK0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'EN_ECLK1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'EN_ECLK2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'EN_FXCLK',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_EN_Bits',0,24,181,10,3
	.word	63030
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK_DEN_Bits',0,24,184,10,16,4,35
	.byte	'ECLK_DEN',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_ECLK_DEN_Bits',0,24,188,10,3
	.word	63350
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK_NUM_Bits',0,24,191,10,16,4,35
	.byte	'ECLK_NUM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_ECLK_NUM_Bits',0,24,195,10,3
	.word	63462
	.byte	22
	.byte	'_Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,24,198,10,16,4,35
	.byte	'FXCLK_SEL',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,24,202,10,3
	.word	63574
	.byte	22
	.byte	'_Ifx_GTM_CMU_GCLK_DEN_Bits',0,24,205,10,16,4,35
	.byte	'GCLK_DEN',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_GCLK_DEN_Bits',0,24,209,10,3
	.word	63690
	.byte	22
	.byte	'_Ifx_GTM_CMU_GCLK_NUM_Bits',0,24,212,10,16,4,35
	.byte	'GCLK_NUM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_GCLK_NUM_Bits',0,24,216,10,3
	.word	63802
	.byte	22
	.byte	'_Ifx_GTM_CTRL_Bits',0,24,219,10,16,4,35
	.byte	'RF_PROT',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TO_MODE',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'TO_VAL',0,4
	.word	32533
	.byte	5,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_GTM_CTRL_Bits',0,24,226,10,3
	.word	63914
	.byte	22
	.byte	'_Ifx_GTM_DATAIN_Bits',0,24,229,10,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_GTM_DATAIN_Bits',0,24,232,10,3
	.word	64067
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ACB_Bits',0,24,235,10,16,4,35
	.byte	'ACB_0',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'ACB_1',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'ACB_2',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'ACB_3',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ACB_Bits',0,24,245,10,3
	.word	64140
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ACT_STA_Bits',0,24,248,10,16,4,35
	.byte	'ACT_Ni',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ACT_STA_Bits',0,24,252,10,3
	.word	64360
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,24,255,10,16,4,35
	.byte	'ADD_IN_CAL_1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,24,131,11,3
	.word	64470
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,24,134,11,16,4,35
	.byte	'ADD_IN_CAL_2',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,24,138,11,3
	.word	64594
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,24,141,11,16,4,35
	.byte	'ADD_IN_LD_1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,24,145,11,3
	.word	64718
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,24,148,11,16,4,35
	.byte	'ADD_IN_LD_2',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,24,152,11,3
	.word	64839
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADT_S_Bits',0,24,155,11,16,4,35
	.byte	'PD_S',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'NS',0,4
	.word	32533
	.byte	6,10,2,35,0,35
	.byte	'reserved_22',0,4
	.word	32533
	.byte	10,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADT_S_Bits',0,24,160,11,3
	.word	64960
	.byte	22
	.byte	'_Ifx_GTM_DPLL_AOSV_2_Bits',0,24,163,11,16,4,35
	.byte	'AOSV_2A',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'AOSV_2B',0,4
	.word	32533
	.byte	8,16,2,35,0,35
	.byte	'AOSV_2C',0,4
	.word	32533
	.byte	8,8,2,35,0,35
	.byte	'AOSV_2D',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_AOSV_2_Bits',0,24,169,11,3
	.word	65078
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_1C3_Bits',0,24,172,11,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'APS_1C3',0,4
	.word	32533
	.byte	6,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS_1C3_Bits',0,24,177,11,3
	.word	65221
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_Bits',0,24,180,11,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'WAPS',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'APS',0,4
	.word	32533
	.byte	6,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'WAPS_1C2',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'APS_1C2',0,4
	.word	32533
	.byte	6,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS_Bits',0,24,189,11,3
	.word	65353
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_Bits',0,24,192,11,16,4,35
	.byte	'APS_1C2_EXT',0,4
	.word	32533
	.byte	6,26,2,35,0,35
	.byte	'APS_1C2_STATUS',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'reserved_7',0,4
	.word	32533
	.byte	7,18,2,35,0,35
	.byte	'APS_1C2_OLD',0,4
	.word	32533
	.byte	6,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS_SYNC_Bits',0,24,199,11,3
	.word	65551
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_2C_Bits',0,24,202,11,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'APT_2C',0,4
	.word	32533
	.byte	10,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	20,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT_2C_Bits',0,24,207,11,3
	.word	65739
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_Bits',0,24,210,11,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'WAPT',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'APT',0,4
	.word	32533
	.byte	10,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'WAPT_2B',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'APT_2B',0,4
	.word	32533
	.byte	10,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT_Bits',0,24,219,11,3
	.word	65869
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_SYNC_Bits',0,24,222,11,16,4,35
	.byte	'APT_2B_EXT',0,4
	.word	32533
	.byte	6,26,2,35,0,35
	.byte	'APT_2B_STATUS',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'reserved_7',0,4
	.word	32533
	.byte	7,18,2,35,0,35
	.byte	'APT_2B_OLD',0,4
	.word	32533
	.byte	10,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT_SYNC_Bits',0,24,229,11,3
	.word	66066
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_SX_Bits',0,24,232,11,16,4,35
	.byte	'CDT_SX',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_SX_Bits',0,24,236,11,3
	.word	66251
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,24,239,11,16,4,35
	.byte	'CDT_SX_NOM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,24,243,11,3
	.word	66359
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_TX_Bits',0,24,246,11,16,4,35
	.byte	'CDT_TX',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_TX_Bits',0,24,250,11,3
	.word	66479
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,24,253,11,16,4,35
	.byte	'CDT_TX_NOM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,24,129,12,3
	.word	66587
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CNT_NUM1_Bits',0,24,132,12,16,4,35
	.byte	'CNT_NUM_1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CNT_NUM1_Bits',0,24,136,12,3
	.word	66707
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CNT_NUM2_Bits',0,24,139,12,16,4,35
	.byte	'CNT_NUM_2',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CNT_NUM2_Bits',0,24,143,12,3
	.word	66822
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,24,146,12,16,4,35
	.byte	'DMO',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	2,29,2,35,0,35
	.byte	'COA',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'PIT',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'SGE1',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DLM1',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'PCM1',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SGE2',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DLM2',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'PCM2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'SYN_NS',0,4
	.word	32533
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,24,159,12,3
	.word	66937
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_Bits',0,24,162,12,16,4,35
	.byte	'MLT',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'IFP',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'SNU',0,4
	.word	32533
	.byte	5,16,2,35,0,35
	.byte	'TNU',0,4
	.word	32533
	.byte	9,7,2,35,0,35
	.byte	'AMS',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'AMT',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'IDS',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'IDT',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'SEN',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TEN',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'RMO',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0_Bits',0,24,175,12,3
	.word	67211
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,24,178,12,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'IFP',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	14,7,2,35,0,35
	.byte	'AMS',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'reserved_26',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'IDS',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	3,1,2,35,0,35
	.byte	'RMO',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,24,188,12,3
	.word	67443
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,24,191,12,16,4,35
	.byte	'MLT',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'IFP',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	15,6,2,35,0,35
	.byte	'AMT',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'IDS',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'IDT',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	2,1,2,35,0,35
	.byte	'RMO',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,24,201,12,3
	.word	67687
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_1_Bits',0,24,204,12,16,4,35
	.byte	'DMO',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DEN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'IDDS',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'COA',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'PIT',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'SGE1',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DLM1',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'PCM1',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SGE2',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DLM2',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'PCM2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'SYN_NS',0,4
	.word	32533
	.byte	5,16,2,35,0,35
	.byte	'SYN_NT',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'LCD',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'SWR',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'SYSF',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TS0_HRS',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'TS0_HRT',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'SMC',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'SSL',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'TSL',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_1_Bits',0,24,228,12,3
	.word	67920
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,24,231,12,16,4,35
	.byte	'DMO',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	2,29,2,35,0,35
	.byte	'COA',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'PIT',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'SGE1',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DLM1',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'PCM1',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,24,241,12,3
	.word	68347
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_2_Bits',0,24,244,12,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'AEN0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'AEN1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'AEN2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'AEN3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'AEN4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'AEN5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'AEN6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'AEN7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'WAD0',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'WAD1',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'WAD2',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'WAD3',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'WAD4',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'WAD5',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'WAD6',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'WAD7',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_2_Bits',0,24,136,13,3
	.word	68581
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_3_Bits',0,24,139,13,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'AEN8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'AEN9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'AEN10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'AEN11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'AEN12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'AEN13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'AEN14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'AEN15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'WAD8',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'WAD9',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'WAD10',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'WAD11',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'WAD12',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'WAD13',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'WAD14',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'WAD15',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_3_Bits',0,24,159,13,3
	.word	68949
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_4_Bits',0,24,162,13,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'AEN16',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'AEN17',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'AEN18',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'AEN19',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'AEN20',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'AEN21',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'AEN22',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'AEN23',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'WAD16',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'WAD17',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'WAD18',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'WAD19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'WAD20',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'WAD21',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'WAD22',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'WAD23',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_4_Bits',0,24,182,13,3
	.word	69329
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DLA_Bits',0,24,185,13,16,4,35
	.byte	'DLA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DLA_Bits',0,24,189,13,3
	.word	69713
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_S_ACT_Bits',0,24,192,13,16,4,35
	.byte	'DT_S_ACT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_S_ACT_Bits',0,24,196,13,3
	.word	69812
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_S_Bits',0,24,199,13,16,4,35
	.byte	'DT_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_S_Bits',0,24,203,13,3
	.word	69926
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_T_ACT_Bits',0,24,206,13,16,4,35
	.byte	'DT_T_ACT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_T_ACT_Bits',0,24,210,13,3
	.word	70028
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DTA_Bits',0,24,213,13,16,4,35
	.byte	'DTA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DTA_Bits',0,24,217,13,3
	.word	70142
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EDT_S_Bits',0,24,221,13,16,4,35
	.byte	'EDT_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EDT_S_Bits',0,24,225,13,3
	.word	70241
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EDT_T_Bits',0,24,229,13,16,4,35
	.byte	'EDT_T',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EDT_T_Bits',0,24,233,13,3
	.word	70346
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EIRQ_EN_Bits',0,24,236,13,16,4,35
	.byte	'PDI_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'PEI_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TINI_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TAXI_EIRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SISI_EIRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TISI_EIRQ_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MSI_EIRQ_EN',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MTI_EIRQ_EN',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SASI_EIRQ_EN',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TASI_EIRQ_EN',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'PWI_EIRQ_EN',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'W2I_EIRQ_EN',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'W1I_EIRQ_EN',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'GL1I_EIRQ_EN',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'LL1I_EIRQ_EN',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EI_EIRQ_EN',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'GL2I_EIRQ_EN',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'LL2I_EIRQ_EN',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TE0I_EIRQ_EN',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TE1I_EIRQ_EN',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TE2I_EIRQ_EN',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TE3I_EIRQ_EN',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TE4I_EIRQ_EN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'CDTI_EIRQ_EN',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'CDSI_EIRQ_EN',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TORI',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'SORI',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'DCGI',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EIRQ_EN_Bits',0,24,139,14,3
	.word	70451
	.byte	22
	.byte	'_Ifx_GTM_DPLL_FTV_S_Bits',0,24,142,14,16,4,35
	.byte	'STATE_FT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_FTV_S_Bits',0,24,146,14,3
	.word	71182
	.byte	22
	.byte	'_Ifx_GTM_DPLL_FTV_T_Bits',0,24,149,14,16,4,35
	.byte	'TRIGGER_FT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_FTV_T_Bits',0,24,153,14,3
	.word	71290
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ID_PMTR_Bits',0,24,156,14,16,4,35
	.byte	'ID_PMTR_x',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ID_PMTR_Bits',0,24,160,14,3
	.word	71400
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_Bits',0,24,163,14,16,4,35
	.byte	'INC_CNT1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_INC_CNT1_Bits',0,24,167,14,3
	.word	71512
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_Bits',0,24,171,14,16,4,35
	.byte	'INC_CNT2',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_INC_CNT2_Bits',0,24,175,14,3
	.word	71626
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_EN_Bits',0,24,178,14,16,4,35
	.byte	'PDI_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'PEI_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TINI_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TAXI_IRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SISI_IRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TISI_IRQ_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MSI_IRQ_EN',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MTI_IRQ_EN',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SASI_IRQ_EN',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TASI_IRQ_EN',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'PWI_IRQ_EN',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'W2I_IRQ_EN',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'W1I_IRQ_EN',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'GL1I_IRQ_EN',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'LL1I_IRQ_EN',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EI_IRQ_EN',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'GL2I_IRQ_EN',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'LL2I_IRQ_EN',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TE0I_IRQ_EN',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TE1I_IRQ_EN',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TE2I_IRQ_EN',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TE3I_IRQ_EN',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TE4I_IRQ_EN',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'CDTI_IRQ_EN',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'CDSI_IRQ_EN',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TORI',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'SORI',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'DCGI',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_EN_Bits',0,24,209,14,3
	.word	71740
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,24,212,14,16,4,35
	.byte	'TRG_PDI',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_PEI',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_TINI',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_TAXI',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG_SISI',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG_TISI',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TRG_MSI',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TRG_MTI',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TRG_SASI',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TRG_TASI',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TRG_PWI',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TRG_W2I',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TRG_W1I',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TRG_GL1I',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TRG_LL1I',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TRG_EI',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TRG_GL2I',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TRG_LL2I',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TRG_TE0I',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TRG_TE1I',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TRG_TE2I',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TRG_TE3I',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TRG_TE4I',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TRG_CDTI',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'TRG_CDSI',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TRG_TORI',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'TRG_SORI',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'TRG_DCGI',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,24,243,14,3
	.word	72444
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_MODE_Bits',0,24,246,14,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_MODE_Bits',0,24,250,14,3
	.word	73095
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,24,253,14,16,4,35
	.byte	'PDI',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'PEI',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TINI',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TAXI',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SISI',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TISI',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MSI',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MTI',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SASI',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TASI',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'PWI',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'W2I',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'W1I',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'GL1I',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'LL1I',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'EI',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'GL2I',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'LL2I',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TE0I',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TE1I',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TE2I',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TE3I',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TE4I',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'CDTI',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'CDSI',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TORI',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'SORI',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'DCGI',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,24,156,15,3
	.word	73208
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MEDT_S_Bits',0,24,160,15,16,4,35
	.byte	'MEDT_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MEDT_S_Bits',0,24,164,15,3
	.word	73745
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MEDT_T_Bits',0,24,168,15,16,4,35
	.byte	'MEDT_T',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MEDT_T_Bits',0,24,172,15,3
	.word	73853
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MLS1_Bits',0,24,175,15,16,4,35
	.byte	'MLS1',0,4
	.word	32533
	.byte	18,14,2,35,0,35
	.byte	'reserved_18',0,4
	.word	32533
	.byte	14,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MLS1_Bits',0,24,179,15,3
	.word	73961
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MLS2_Bits',0,24,182,15,16,4,35
	.byte	'MLS2',0,4
	.word	32533
	.byte	18,14,2,35,0,35
	.byte	'reserved_18',0,4
	.word	32533
	.byte	14,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MLS2_Bits',0,24,186,15,3
	.word	74063
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MPVAL1_Bits',0,24,190,15,16,4,35
	.byte	'MPVAL1',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'SIX1',0,4
	.word	32533
	.byte	8,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MPVAL1_Bits',0,24,195,15,3
	.word	74165
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MPVAL2_Bits',0,24,199,15,16,4,35
	.byte	'MPVAL2',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'SIX2',0,4
	.word	32533
	.byte	8,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MPVAL2_Bits',0,24,204,15,3
	.word	74289
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NA_Bits',0,24,207,15,16,4,35
	.byte	'DB',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'DW',0,4
	.word	32533
	.byte	10,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NA_Bits',0,24,212,15,3
	.word	74413
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_Bits',0,24,215,15,16,4,35
	.byte	'NMB_S',0,4
	.word	32533
	.byte	20,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S_Bits',0,24,219,15,3
	.word	74523
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,24,222,15,16,4,35
	.byte	'NMB_S_TAR',0,4
	.word	32533
	.byte	20,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,24,226,15,3
	.word	74628
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,24,229,15,16,4,35
	.byte	'NMB_S_TAR_OLD',0,4
	.word	32533
	.byte	20,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,24,233,15,3
	.word	74745
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_Bits',0,24,236,15,16,4,35
	.byte	'NMB_T',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T_Bits',0,24,240,15,3
	.word	74874
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,24,243,15,16,4,35
	.byte	'NMB_T_TAR',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,24,247,15,3
	.word	74979
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,24,250,15,16,4,35
	.byte	'NMB_T_TAR_OLD',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,24,254,15,3
	.word	75096
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NTI_CNT_Bits',0,24,129,16,16,4,35
	.byte	'NTI_CNT',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NTI_CNT_Bits',0,24,133,16,3
	.word	75225
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUSC_Bits',0,24,136,16,16,4,35
	.byte	'NUSE',0,4
	.word	32533
	.byte	6,26,2,35,0,35
	.byte	'FSS',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'SYN_S',0,4
	.word	32533
	.byte	6,19,2,35,0,35
	.byte	'SYN_S_OLD',0,4
	.word	32533
	.byte	6,13,2,35,0,35
	.byte	'VSN',0,4
	.word	32533
	.byte	6,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	4,3,2,35,0,35
	.byte	'WNUS',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'WSYN',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'WVSN',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NUSC_Bits',0,24,147,16,3
	.word	75336
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUTC_Bits',0,24,150,16,16,4,35
	.byte	'NUTE',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'FST',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	2,19,2,35,0,35
	.byte	'SYN_T',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'SYN_T_OLD',0,4
	.word	32533
	.byte	3,13,2,35,0,35
	.byte	'VTN',0,4
	.word	32533
	.byte	6,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	4,3,2,35,0,35
	.byte	'WNUT',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'WSYN',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'WVTN',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NUTC_Bits',0,24,162,16,3
	.word	75554
	.byte	22
	.byte	'_Ifx_GTM_DPLL_OSW_Bits',0,24,165,16,16,4,35
	.byte	'SWON_S',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SWON_T',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	6,24,2,35,0,35
	.byte	'OSS',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_OSW_Bits',0,24,172,16,3
	.word	75795
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PDT_T_Bits',0,24,175,16,16,4,35
	.byte	'DB',0,4
	.word	32533
	.byte	14,18,2,35,0,35
	.byte	'DW',0,4
	.word	32533
	.byte	10,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PDT_T_Bits',0,24,180,16,3
	.word	75952
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSA_Bits',0,24,183,16,16,4,35
	.byte	'PSA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSA_Bits',0,24,187,16,3
	.word	76068
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSAC_Bits',0,24,190,16,16,4,35
	.byte	'PSAC',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSAC_Bits',0,24,194,16,3
	.word	76167
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSC_Bits',0,24,197,16,16,4,35
	.byte	'PSSC',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSC_Bits',0,24,201,16,3
	.word	76269
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSM_0_Bits',0,24,204,16,16,4,35
	.byte	'PSSM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSM_0_Bits',0,24,208,16,3
	.word	76371
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSM_1_Bits',0,24,211,16,16,4,35
	.byte	'PSSM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSM_1_Bits',0,24,215,16,3
	.word	76477
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTC_Bits',0,24,218,16,16,4,35
	.byte	'PSTC',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTC_Bits',0,24,222,16,3
	.word	76583
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTM_0_Bits',0,24,225,16,16,4,35
	.byte	'PSTM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTM_0_Bits',0,24,229,16,3
	.word	76685
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTM_1_Bits',0,24,232,16,16,4,35
	.byte	'PSTM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTM_1_Bits',0,24,236,16,3
	.word	76791
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PVT_Bits',0,24,239,16,16,4,35
	.byte	'PVT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PVT_Bits',0,24,243,16,3
	.word	76897
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RAM_INI_Bits',0,24,246,16,16,4,35
	.byte	'INIT_1A',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'INIT_1B',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'INIT_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'INIT_RAM',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RAM_INI_Bits',0,24,254,16,3
	.word	76996
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_Bits',0,24,129,17,16,4,35
	.byte	'RCDT_SX',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_SX_Bits',0,24,133,17,3
	.word	77185
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,24,137,17,16,4,35
	.byte	'RCDT_SX_NOM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,24,141,17,3
	.word	77296
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_Bits',0,24,144,17,16,4,35
	.byte	'RCDT_TX',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_TX_Bits',0,24,148,17,3
	.word	77419
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,24,152,17,16,4,35
	.byte	'RCDT_TX_NOM',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,24,156,17,3
	.word	77530
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,24,159,17,16,4,35
	.byte	'RDT_S_ACT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,24,163,17,3
	.word	77653
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_S_Bits',0,24,166,17,16,4,35
	.byte	'RDT_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_S_Bits',0,24,170,17,3
	.word	77770
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,24,173,17,16,4,35
	.byte	'RDT_T_ACT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,24,177,17,3
	.word	77875
	.byte	22
	.byte	'_Ifx_GTM_DPLL_SLR_Bits',0,24,180,17,16,4,35
	.byte	'SLR',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_SLR_Bits',0,24,184,17,3
	.word	77992
	.byte	22
	.byte	'_Ifx_GTM_DPLL_STATUS_Bits',0,24,187,17,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CSO',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'CTO',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'CRO',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'RCS',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'RCT',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'PSE',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SOR',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MS',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TOR',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MT',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'RAM2_ERR',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	2,17,2,35,0,35
	.byte	'LOW_RES',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'CSVS',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'CSVT',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'CAIP2',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'CAIP1',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'ISN',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'ITN',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'BWD2',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'BWD1',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'LOCK2',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'SYS',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'SYT',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'FSD',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'FTD',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'LOCK1',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'ERR',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_STATUS_Bits',0,24,220,17,3
	.word	78090
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,24,223,17,16,4,35
	.byte	'TBU_TS0_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,24,227,17,3
	.word	78671
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,24,230,17,16,4,35
	.byte	'TBU_TS0_T',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,24,234,17,3
	.word	78788
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THMA_Bits',0,24,237,17,16,4,35
	.byte	'THMA',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THMA_Bits',0,24,241,17,3
	.word	78905
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THMI_Bits',0,24,244,17,16,4,35
	.byte	'THMI',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THMI_Bits',0,24,248,17,3
	.word	79007
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THVAL_Bits',0,24,251,17,16,4,35
	.byte	'THVAL',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THVAL_Bits',0,24,255,17,3
	.word	79109
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TLR_Bits',0,24,130,18,16,4,35
	.byte	'TLR',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TLR_Bits',0,24,134,18,3
	.word	79214
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TOV_Bits',0,24,137,18,16,4,35
	.byte	'DB',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'DW',0,4
	.word	32533
	.byte	6,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TOV_Bits',0,24,142,18,3
	.word	79312
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TOV_S_Bits',0,24,145,18,16,4,35
	.byte	'DB',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'DW',0,4
	.word	32533
	.byte	6,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TOV_S_Bits',0,24,150,18,3
	.word	79424
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_S_0_Bits',0,24,153,18,16,4,35
	.byte	'STATE_TS',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_S_0_Bits',0,24,157,18,3
	.word	79540
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_S_1_Bits',0,24,160,18,16,4,35
	.byte	'STATE_TS',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_S_1_Bits',0,24,164,18,3
	.word	79650
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_T_0_Bits',0,24,167,18,16,4,35
	.byte	'TRIGGER_TS',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_T_0_Bits',0,24,171,18,3
	.word	79760
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_T_1_Bits',0,24,174,18,16,4,35
	.byte	'TRIGGER_TS',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_T_1_Bits',0,24,178,18,3
	.word	79872
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TSAC_Bits',0,24,181,18,16,4,35
	.byte	'TSAC',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TSAC_Bits',0,24,185,18,3
	.word	79984
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TSF_S_Bits',0,24,188,18,16,4,35
	.byte	'TSF_S',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TSF_S_Bits',0,24,192,18,3
	.word	80086
	.byte	22
	.byte	'_Ifx_GTM_DXINCON_Bits',0,24,195,18,16,4,35
	.byte	'IN00',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'IN01',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'IN02',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'IN03',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'IN10',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'IN11',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'IN12',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'IN13',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'DSS00',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'DSS01',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'DSS02',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'DSS03',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'DSS10',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'DSS11',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'DSS12',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'DSS13',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'reserved_28',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_DXINCON_Bits',0,24,217,18,3
	.word	80191
	.byte	22
	.byte	'_Ifx_GTM_DXOUTCON_Bits',0,24,220,18,16,4,35
	.byte	'OUT00',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'OUT01',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'OUT02',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'OUT03',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'OUT10',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'OUT11',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'OUT12',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'OUT13',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	20,0,2,35,0,0,21
	.byte	'Ifx_GTM_DXOUTCON_Bits',0,24,232,18,3
	.word	80605
	.byte	22
	.byte	'_Ifx_GTM_EIRQ_EN_Bits',0,24,235,18,16,4,35
	.byte	'AEI_TO_XPT_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'AEI_USP_ADDR_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'AEI_IM_ADDR_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'AEI_USP_BE_EIRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_EIRQ_EN_Bits',0,24,242,18,3
	.word	80847
	.byte	22
	.byte	'_Ifx_GTM_F2A_ENABLE_Bits',0,24,245,18,16,4,35
	.byte	'STR0_EN',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'STR1_EN',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'STR2_EN',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'STR3_EN',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'STR4_EN',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'STR5_EN',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'STR6_EN',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'STR7_EN',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_ENABLE_Bits',0,24,128,19,3
	.word	81051
	.byte	22
	.byte	'_Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,24,131,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	9,23,2,35,0,35
	.byte	'reserved_9',0,4
	.word	32533
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,24,135,19,3
	.word	81291
	.byte	22
	.byte	'_Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,24,138,19,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'TMODE',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'DIR',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'reserved_19',0,4
	.word	32533
	.byte	13,0,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,24,144,19,3
	.word	81416
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_CTRL_Bits',0,24,147,19,16,4,35
	.byte	'RBM',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'RAP',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FLUSH',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'WULOCK',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_CTRL_Bits',0,24,154,19,3
	.word	81574
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,24,157,19,16,4,35
	.byte	'FIFO_EMPTY_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'FIFO_FULL_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FIFO_LWM_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'FIFO_UWM_EIRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'Reserved',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,24,164,19,3
	.word	81730
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,24,167,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,24,171,19,3
	.word	81940
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,24,174,19,16,4,35
	.byte	'LEVEL',0,4
	.word	32533
	.byte	11,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,24,178,19,3
	.word	82056
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,24,181,19,16,4,35
	.byte	'FIFO_EMPTY_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'FIFO_FULL_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FIFO_LWM_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'FIFO_UWM_IRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,24,188,19,3
	.word	82177
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,24,191,19,16,4,35
	.byte	'TRG_FIFO_EMPTY',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_FIFO_FULL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_FIFO_LWM',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_FIFO_UWM',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,24,198,19,3
	.word	82383
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,24,201,19,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'DMA_HYSTERESIS',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'DMA_HYST_DIR',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,24,207,19,3
	.word	82587
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,24,210,19,16,4,35
	.byte	'FIFO_EMPTY',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'FIFO_FULL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FIFO_LWM',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'FIFO_UWM',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,24,217,19,3
	.word	82756
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,24,220,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,24,224,19,3
	.word	82942
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,24,227,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,24,231,19,3
	.word	83058
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,24,234,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,24,238,19,3
	.word	83170
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_STATUS_Bits',0,24,241,19,16,4,35
	.byte	'EMPTY',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'FULL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'LOW_WM',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'UP_WM',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_STATUS_Bits',0,24,248,19,3
	.word	83290
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,24,251,19,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,24,255,19,3
	.word	83453
	.byte	22
	.byte	'_Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,24,130,20,16,4,35
	.byte	'ADDR',0,4
	.word	32533
	.byte	10,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,24,134,20,3
	.word	83569
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_0_Bits',0,24,137,20,16,4,35
	.byte	'ARU_NEW_DATA0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ARU_NEW_DATA1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ARU_ACC_ACK_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'BRC_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'AEI_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'CMP_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'SPE0_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'SPE1_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	8,16,2,35,0,35
	.byte	'PSM0_CH0_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'PSM0_CH1_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'PSM0_CH2_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'PSM0_CH3_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'PSM0_CH4_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'PSM0_CH5_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'PSM0_CH6_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'PSM0_CH7_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_0_Bits',0,24,157,20,3
	.word	83681
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_10_Bits',0,24,160,20,16,4,35
	.byte	'ATOM4_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ATOM4_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ATOM4_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ATOM4_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ATOM4_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ATOM4_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ATOM4_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ATOM4_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_10_Bits',0,24,171,20,3
	.word	84165
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_1_Bits',0,24,174,20,16,4,35
	.byte	'DPLL_DCG_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DPLL_EDI_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'DPLL_TIN_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'DPLL_TAX_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'DPLL_SIS_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'DPLL_TIS_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'DPLL_MSI_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'DPLL_MTI_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'DPLL_SAS_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'DPLL_TAS_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'DPLL_PWI_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'DPLL_W2I_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'DPLL_W1I_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'DPLL_GLI_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'DPLL_LLI_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'DPLL_EI_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'DPLL_GL2I_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'DPLL_LL2I_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'DPLL_TE0_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'DPLL_TE1_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'DPLL_TE2_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'DPLL_TE3_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'DPLL_TE4_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'DPLL_CDIT_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'DPLL_CDIS_IRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'DPLL_TORI_IRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'DPLL_SORI_IRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_1_Bits',0,24,204,20,3
	.word	84454
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_2_Bits',0,24,207,20,16,4,35
	.byte	'TIM0_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TIM0_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TIM0_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TIM0_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TIM0_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TIM0_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TIM0_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TIM0_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TIM1_CH0_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TIM1_CH1_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TIM1_CH2_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TIM1_CH3_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TIM1_CH4_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TIM1_CH5_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TIM1_CH6_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TIM1_CH7_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TIM2_CH0_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TIM2_CH1_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TIM2_CH2_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TIM2_CH3_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TIM2_CH4_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TIM2_CH5_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TIM2_CH6_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TIM2_CH7_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'TIM3_CH0_IRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TIM3_CH1_IRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'TIM3_CH2_IRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'TIM3_CH3_IRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'TIM3_CH4_IRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'TIM3_CH5_IRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TIM3_CH6_IRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'TIM3_CH7_IRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_2_Bits',0,24,241,20,3
	.word	85195
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_4_Bits',0,24,244,20,16,4,35
	.byte	'MCS0_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MCS0_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MCS0_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'MCS0_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'MCS0_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'MCS0_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MCS0_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MCS0_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'MCS1_CH0_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MCS1_CH1_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'MCS1_CH2_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MCS1_CH3_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'MCS1_CH4_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCS1_CH5_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCS1_CH6_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCS1_CH7_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'MCS2_CH0_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'MCS2_CH1_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'MCS2_CH2_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'MCS2_CH3_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'MCS2_CH4_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'MCS2_CH5_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'MCS2_CH6_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'MCS2_CH7_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'MCS3_CH0_IRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'MCS3_CH1_IRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'MCS3_CH2_IRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'MCS3_CH3_IRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'MCS3_CH4_IRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'MCS3_CH5_IRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'MCS3_CH6_IRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'MCS3_CH7_IRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_4_Bits',0,24,150,21,3
	.word	86028
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_6_Bits',0,24,153,21,16,4,35
	.byte	'TOM0_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TOM0_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TOM0_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TOM0_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TOM0_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TOM0_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TOM0_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TOM0_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TOM0_CH8_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TOM0_CH9_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TOM0_CH10_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TOM0_CH11_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TOM0_CH12_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TOM0_CH13_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TOM0_CH14_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TOM0_CH15_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TOM1_CH0_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TOM1_CH1_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TOM1_CH2_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TOM1_CH3_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TOM1_CH4_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TOM1_CH5_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TOM1_CH6_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TOM1_CH7_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'TOM1_CH8_IRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TOM1_CH9_IRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'TOM1_CH10_IRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'TOM1_CH11_IRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'TOM1_CH12_IRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'TOM1_CH13_IRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TOM1_CH14_IRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'TOM1_CH15_IRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_6_Bits',0,24,187,21,3
	.word	86861
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_7_Bits',0,24,190,21,16,4,35
	.byte	'TOM2_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TOM2_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TOM2_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TOM2_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TOM2_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TOM2_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TOM2_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TOM2_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TOM2_CH8_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TOM2_CH9_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TOM2_CH10_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TOM2_CH11_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TOM2_CH12_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TOM2_CH13_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TOM2_CH14_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TOM2_CH15_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_7_Bits',0,24,209,21,3
	.word	87706
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_9_Bits',0,24,212,21,16,4,35
	.byte	'ATOM0_CH0_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ATOM0_CH1_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ATOM0_CH2_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ATOM0_CH3_IRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ATOM0_CH4_IRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ATOM0_CH5_IRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ATOM0_CH6_IRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ATOM0_CH7_IRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ATOM1_CH0_IRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ATOM1_CH1_IRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ATOM1_CH2_IRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ATOM1_CH3_IRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'ATOM1_CH4_IRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'ATOM1_CH5_IRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'ATOM1_CH6_IRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'ATOM1_CH7_IRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'ATOM2_CH0_IRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'ATOM2_CH1_IRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'ATOM2_CH2_IRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'ATOM2_CH3_IRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'ATOM2_CH4_IRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'ATOM2_CH5_IRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'ATOM2_CH6_IRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'ATOM2_CH7_IRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'ATOM3_CH0_IRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'ATOM3_CH1_IRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'ATOM3_CH2_IRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'ATOM3_CH3_IRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'ATOM3_CH4_IRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'ATOM3_CH5_IRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'ATOM3_CH6_IRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'ATOM3_CH7_IRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_9_Bits',0,24,246,21,3
	.word	88184
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI0_Bits',0,24,249,21,16,4,35
	.byte	'FIFO0_CH0_EIRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'FIFO0_CH1_EIRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FIFO0_CH2_EIRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'FIFO0_CH3_EIRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'FIFO0_CH4_EIRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'FIFO0_CH5_EIRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'FIFO0_CH6_EIRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'FIFO0_CH7_EIRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI0_Bits',0,24,132,22,3
	.word	89049
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI1_Bits',0,24,135,22,16,4,35
	.byte	'TIM0_CH0_EIRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TIM0_CH1_EIRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TIM0_CH2_EIRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TIM0_CH3_EIRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TIM0_CH4_EIRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TIM0_CH5_EIRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TIM0_CH6_EIRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TIM0_CH7_EIRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TIM1_CH0_EIRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TIM1_CH1_EIRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TIM1_CH2_EIRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TIM1_CH3_EIRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TIM1_CH4_EIRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TIM1_CH5_EIRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TIM1_CH6_EIRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TIM1_CH7_EIRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'TIM2_CH0_EIRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TIM2_CH1_EIRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'TIM2_CH2_EIRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'TIM2_CH3_EIRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'TIM2_CH4_EIRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TIM2_CH5_EIRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TIM2_CH6_EIRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'TIM2_CH7_EIRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'TIM3_CH0_EIRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TIM3_CH1_EIRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'TIM3_CH2_EIRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'TIM3_CH3_EIRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'TIM3_CH4_EIRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'TIM3_CH5_IRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TIM3_CH6_EIRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'TIM3_CH7_EIRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI1_Bits',0,24,169,22,3
	.word	89350
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI3_Bits',0,24,172,22,16,4,35
	.byte	'MCS0_CH0_EIRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MCS0_CH1_EIRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MCS0_CH2_EIRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'MCS0_CH3_EIRQ',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'MCS0_CH4_EIRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'MCS0_CH5_EIRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MCS0_CH6_EIRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MCS0_CH7_EIRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'MCS1_CH0_EIRQ',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MCS1_CH1_EIRQ',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'MCS1_CH2_EIRQ',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MCS1_CH3_EIRQ',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'MCS1_CH4_EIRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCS1_CH5_EIRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCS1_CH6_EIRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCS1_CH7_EIRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'MCS2_CH0_EIRQ',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'MCS2_CH1_EIRQ',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'MCS2_CH2_EIRQ',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'MCS2_CH3_EIRQ',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'MCS2_CH4_EIRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'MCS2_CH5_EIRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'MCS2_CH6_EIRQ',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'MCS2_CH7_EIRQ',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'MCS3_CH0_EIRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'MCS3_CH1_EIRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'MCS3_CH2_EIRQ',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'MCS3_CH3_EIRQ',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'MCS3_CH4_EIRQ',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'MCS3_CH5_EIRQ',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'MCS3_CH6_EIRQ',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'MCS3_CH7_EIRQ',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI3_Bits',0,24,206,22,3
	.word	90220
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_Bits',0,24,209,22,16,4,35
	.byte	'GTM_EIRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'BRC_EIRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'FIFO0_EIRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TIM0_EIRQ',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TIM1_EIRQ',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TIM2_EIRQ',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TIM3_EIRQ',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'MCS0_EIRQ',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCS1_EIRQ',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCS2_EIRQ',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCS3_EIRQ',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SPE0_EIRQ',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'SPE1_EIRQ',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'reserved_22',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'CMP_EIRQ',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'DPLL_EIRQ',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'reserved_26',0,4
	.word	32533
	.byte	6,0,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_MEI_Bits',0,24,231,22,3
	.word	91091
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,24,234,22,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,24,244,22,3
	.word	91586
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,24,247,22,16,4,35
	.byte	'INSEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'INSEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'INSEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'INSEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'INSEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'INSEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'INSEL6',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'INSEL7',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,24,129,23,3
	.word	91797
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,24,132,23,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	3,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	3,25,2,35,0,35
	.byte	'reserved_7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	3,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'reserved_15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	3,13,2,35,0,35
	.byte	'reserved_19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	3,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	9,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,24,146,23,3
	.word	92026
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,24,149,23,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,24,158,23,3
	.word	92347
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,24,161,23,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,24,171,23,3
	.word	92553
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,24,174,23,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'SEL8',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'SEL9',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'SEL10',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'SEL11',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'SEL12',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'SEL13',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'SEL14',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'SEL15',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,24,192,23,3
	.word	92768
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,24,195,23,16,4,35
	.byte	'CH0SEL',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'CH1SEL',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'CH2SEL',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'CH3SEL',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'CH4SEL',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'CH5SEL',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'CH6SEL',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'CH7SEL',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,24,205,23,3
	.word	93109
	.byte	22
	.byte	'_Ifx_GTM_IRQ_EN_Bits',0,24,208,23,16,4,35
	.byte	'AEI_TO_XPT_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'AEI_USP_ADDR_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'AEI_IM_ADDR_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'AEI_USP_BE_IRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_EN_Bits',0,24,215,23,3
	.word	93334
	.byte	22
	.byte	'_Ifx_GTM_IRQ_FORCINT_Bits',0,24,218,23,16,4,35
	.byte	'TRG_AEI_TO_XPT',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_AEI_USP_ADDR',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_AEI_IM_ADDR',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_AEI_USP_BE',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_FORCINT_Bits',0,24,225,23,3
	.word	93532
	.byte	22
	.byte	'_Ifx_GTM_IRQ_MODE_Bits',0,24,228,23,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_MODE_Bits',0,24,232,23,3
	.word	93728
	.byte	22
	.byte	'_Ifx_GTM_IRQ_NOTIFY_Bits',0,24,235,23,16,4,35
	.byte	'AEI_TO_XPT',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'AEI_USP_ADDR',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'AEI_IM_ADDR',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'AEI_USP_BE',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_NOTIFY_Bits',0,24,242,23,3
	.word	93831
	.byte	22
	.byte	'_Ifx_GTM_KRST0_Bits',0,24,245,23,16,4,35
	.byte	'RST',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'RSTSTAT',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_KRST0_Bits',0,24,250,23,3
	.word	94009
	.byte	22
	.byte	'_Ifx_GTM_KRST1_Bits',0,24,253,23,16,4,35
	.byte	'RST',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_GTM_KRST1_Bits',0,24,129,24,3
	.word	94120
	.byte	22
	.byte	'_Ifx_GTM_KRSTCLR_Bits',0,24,132,24,16,4,35
	.byte	'CLR',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_GTM_KRSTCLR_Bits',0,24,136,24,3
	.word	94212
	.byte	22
	.byte	'_Ifx_GTM_MAP_CTRL_Bits',0,24,139,24,16,4,35
	.byte	'TSEL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SSL',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'LSEL',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	11,16,2,35,0,35
	.byte	'TSPP0_EN',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'TSPP0_DLD',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'reserved_18',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'TSPP0_I0V',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'TSPP0_I1V',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'TSPP0_I2V',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'TSPP1_EN',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TSPP1_DLD',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'reserved_26',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'TSPP1_I0V',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'TSPP1_I1V',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TSPP1_I2V',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'reserved_31',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_MAP_CTRL_Bits',0,24,159,24,3
	.word	94308
	.byte	22
	.byte	'_Ifx_GTM_MCFG_CTRL_Bits',0,24,162,24,16,4,35
	.byte	'MEM0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'MEM1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'MEM2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'MEM3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCFG_CTRL_Bits',0,24,169,24,3
	.word	94738
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH0_CTRG_Bits',0,24,172,24,16,4,35
	.byte	'TRG0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TRG6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TRG7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TRG8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TRG9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TRG10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TRG11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TRG12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TRG13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TRG14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TRG15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH0_CTRG_Bits',0,24,191,24,3
	.word	94887
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH0_STRG_Bits',0,24,194,24,16,4,35
	.byte	'TRG0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'TRG6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TRG7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'TRG8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'TRG9',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'TRG10',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'TRG11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'TRG12',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'TRG13',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'TRG14',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'TRG15',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH0_STRG_Bits',0,24,213,24,3
	.word	95241
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_ACB_Bits',0,24,216,24,16,4,35
	.byte	'ACB0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ACB1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ACB2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ACB3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACB4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_ACB_Bits',0,24,224,24,3
	.word	95595
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_CTRL_Bits',0,24,227,24,16,4,35
	.byte	'EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ERR',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'CY',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'Z',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'V',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'N',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'CAT',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'CWT',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	6,16,2,35,0,35
	.byte	'SP_CNT',0,4
	.word	32533
	.byte	3,13,2,35,0,35
	.byte	'reserved_19',0,4
	.word	32533
	.byte	13,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_CTRL_Bits',0,24,242,24,3
	.word	95762
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,24,245,24,16,4,35
	.byte	'MCS_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'STK_ERR_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MEM_ERR_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,24,251,24,3
	.word	96042
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,24,254,24,16,4,35
	.byte	'MCS_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'STK_ERR_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MEM_ERR_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,24,132,25,3
	.word	96214
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,24,135,25,16,4,35
	.byte	'TRG_MCS_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_STK_ERR_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_MEM_ERR_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,24,141,25,3
	.word	96381
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,24,144,25,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,24,148,25,3
	.word	96561
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,24,151,25,16,4,35
	.byte	'MCS_IRQ',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'STK_ERR_IRQ',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MEM_ERR_IRQ',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,24,157,25,3
	.word	96678
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_PC_Bits',0,24,160,25,16,4,35
	.byte	'PC',0,4
	.word	32533
	.byte	14,18,2,35,0,35
	.byte	'reserved_14',0,4
	.word	32533
	.byte	18,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_PC_Bits',0,24,164,25,3
	.word	96844
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R0_Bits',0,24,167,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R0_Bits',0,24,171,25,3
	.word	96944
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R1_Bits',0,24,174,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R1_Bits',0,24,178,25,3
	.word	97046
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R2_Bits',0,24,181,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R2_Bits',0,24,185,25,3
	.word	97148
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R3_Bits',0,24,188,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R3_Bits',0,24,192,25,3
	.word	97250
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R4_Bits',0,24,195,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R4_Bits',0,24,199,25,3
	.word	97352
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R5_Bits',0,24,202,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R5_Bits',0,24,206,25,3
	.word	97454
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R6_Bits',0,24,209,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R6_Bits',0,24,213,25,3
	.word	97556
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R7_Bits',0,24,216,25,16,4,35
	.byte	'DATA',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R7_Bits',0,24,220,25,3
	.word	97658
	.byte	22
	.byte	'_Ifx_GTM_MCS_CTRL_Bits',0,24,223,25,16,4,35
	.byte	'SCHED',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'HLT_SP_OFL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	14,16,2,35,0,35
	.byte	'RAM_RST',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'reserved_17',0,4
	.word	32533
	.byte	15,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CTRL_Bits',0,24,230,25,3
	.word	97760
	.byte	22
	.byte	'_Ifx_GTM_MCS_ERR_Bits',0,24,233,25,16,4,35
	.byte	'ERR0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ERR1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ERR2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ERR3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ERR4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ERR5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ERR6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ERR7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_ERR_Bits',0,24,244,25,3
	.word	97924
	.byte	22
	.byte	'_Ifx_GTM_MCS_RST_Bits',0,24,247,25,16,4,35
	.byte	'RST0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'RST1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'RST2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'RST3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'RST4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'RST5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'RST6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'RST7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'CAT0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'CAT1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'CAT2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'CAT3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'CAT4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'CAT5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'CAT6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'CAT7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'CWT0',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'CWT1',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'CWT2',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'CWT3',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'CWT4',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'CWT5',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'CWT6',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'CWT7',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_RST_Bits',0,24,146,26,3
	.word	98133
	.byte	22
	.byte	'_Ifx_GTM_MCSINTCLR_Bits',0,24,149,26,16,4,35
	.byte	'MCS000',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MCS001',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MCS010',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'MCS011',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'MCS100',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'MCS101',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MCS110',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MCS111',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'MCS200',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MCS201',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'MCS210',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MCS211',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'MCS300',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCS301',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCS310',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCS311',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCSINTCLR_Bits',0,24,168,26,3
	.word	98599
	.byte	22
	.byte	'_Ifx_GTM_MCSINTSTAT_Bits',0,24,171,26,16,4,35
	.byte	'MCS000',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MCS001',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MCS010',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'MCS011',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'MCS100',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'MCS101',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MCS110',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MCS111',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'MCS200',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MCS201',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'MCS210',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MCS211',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'MCS300',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCS301',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCS310',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCS311',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_MCSINTSTAT_Bits',0,24,190,26,3
	.word	98973
	.byte	22
	.byte	'_Ifx_GTM_MON_ACTIVITY_0_Bits',0,24,193,26,16,4,35
	.byte	'MCA_0_0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'MCA_0_1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'MCA_0_2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'MCA_0_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'MCA_0_4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'MCA_0_5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'MCA_0_6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'MCA_0_7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'MCA_1_0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MCA_1_1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'MCA_1_2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'MCA_1_3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'MCA_1_4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'MCA_1_5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'MCA_1_6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'MCA_1_7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'MCA_2_0',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'MCA_2_1',0,4
	.word	32533
	.byte	1,14,2,35,0,35
	.byte	'MCA_2_2',0,4
	.word	32533
	.byte	1,13,2,35,0,35
	.byte	'MCA_2_3',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'MCA_2_4',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'MCA_2_5',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'MCA_2_6',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'MCA_2_7',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'MCA_3_0',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'MCA_3_1',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'MCA_3_2',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'MCA_3_3',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'MCA_3_4',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'MCA_3_5',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'MCA_3_6',0,4
	.word	32533
	.byte	1,1,2,35,0,35
	.byte	'MCA_3_7',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_MON_ACTIVITY_0_Bits',0,24,227,26,3
	.word	99349
	.byte	22
	.byte	'_Ifx_GTM_MON_STATUS_Bits',0,24,230,26,16,4,35
	.byte	'ACT_CMU0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ACT_CMU1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'ACT_CMU2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'ACT_CMU3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'ACT_CMU4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ACT_CMU5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'ACT_CMU6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'ACT_CMU7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'ACT_CMUFX0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'ACT_CMUFX1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'ACT_CMUFX2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'ACT_CMUFX3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'ACT_CMUFX4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'CMP_ERR',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'reserved_17',0,4
	.word	32533
	.byte	3,12,2,35,0,35
	.byte	'MCS0_ERR',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'MCS1_ERR',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'MCS2_ERR',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'MCS3_ERR',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_MON_STATUS_Bits',0,24,253,26,3
	.word	100030
	.byte	22
	.byte	'_Ifx_GTM_MSCIN_INHCON_Bits',0,24,128,27,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'SEL8',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'SEL9',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'SEL10',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'SEL11',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'SEL12',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'SEL13',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'SEL14',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'SEL15',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCIN_INHCON_Bits',0,24,146,27,3
	.word	100533
	.byte	22
	.byte	'_Ifx_GTM_MSCIN_INLCON_Bits',0,24,149,27,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'SEL8',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'SEL9',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'SEL10',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'SEL11',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'SEL12',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'SEL13',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'SEL14',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'SEL15',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCIN_INLCON_Bits',0,24,167,27,3
	.word	100864
	.byte	22
	.byte	'_Ifx_GTM_MSCSET_CON0_Bits',0,24,170,27,16,4,35
	.byte	'SEL0',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'SEL1',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'SEL2',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'SEL3',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON0_Bits',0,24,180,27,3
	.word	101195
	.byte	22
	.byte	'_Ifx_GTM_MSCSET_CON1_Bits',0,24,183,27,16,4,35
	.byte	'SEL4',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'SEL5',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'SEL6',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'SEL7',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON1_Bits',0,24,193,27,3
	.word	101417
	.byte	22
	.byte	'_Ifx_GTM_MSCSET_CON2_Bits',0,24,196,27,16,4,35
	.byte	'SEL8',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'SEL9',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'SEL10',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'SEL11',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON2_Bits',0,24,206,27,3
	.word	101639
	.byte	22
	.byte	'_Ifx_GTM_MSCSET_CON3_Bits',0,24,209,27,16,4,35
	.byte	'SEL12',0,4
	.word	32533
	.byte	5,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'SEL13',0,4
	.word	32533
	.byte	5,19,2,35,0,35
	.byte	'reserved_13',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'SEL14',0,4
	.word	32533
	.byte	5,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'SEL15',0,4
	.word	32533
	.byte	5,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON3_Bits',0,24,219,27,3
	.word	101863
	.byte	22
	.byte	'_Ifx_GTM_OCS_Bits',0,24,222,27,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'SUS',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'SUS_P',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'SUSSTA',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'reserved_30',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_OCS_Bits',0,24,229,27,3
	.word	102089
	.byte	22
	.byte	'_Ifx_GTM_ODA_Bits',0,24,232,27,16,4,35
	.byte	'DDREN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'DREN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_ODA_Bits',0,24,237,27,3
	.word	102235
	.byte	22
	.byte	'_Ifx_GTM_OTBU0T_Bits',0,24,240,27,16,4,35
	.byte	'CV',0,4
	.word	32533
	.byte	27,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'CM',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'reserved_30',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU0T_Bits',0,24,246,27,3
	.word	102341
	.byte	22
	.byte	'_Ifx_GTM_OTBU1T_Bits',0,24,249,27,16,4,35
	.byte	'CV',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'EN',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU1T_Bits',0,24,255,27,3
	.word	102472
	.byte	22
	.byte	'_Ifx_GTM_OTBU2T_Bits',0,24,130,28,16,4,35
	.byte	'CV',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'EN',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'reserved_29',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU2T_Bits',0,24,136,28,3
	.word	102603
	.byte	22
	.byte	'_Ifx_GTM_OTSC0_Bits',0,24,139,28,16,4,35
	.byte	'B0LMT',0,4
	.word	32533
	.byte	3,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'B0LMI',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'B0HMT',0,4
	.word	32533
	.byte	3,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'B0HMI',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'B1LMT',0,4
	.word	32533
	.byte	3,13,2,35,0,35
	.byte	'reserved_19',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'B1LMI',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'B1HMT',0,4
	.word	32533
	.byte	3,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'B1HMI',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTSC0_Bits',0,24,153,28,3
	.word	102734
	.byte	22
	.byte	'_Ifx_GTM_OTSC1_Bits',0,24,156,28,16,4,35
	.byte	'MCS',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'MI',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'MOE',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'reserved_10',0,4
	.word	32533
	.byte	22,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTSC1_Bits',0,24,163,28,3
	.word	103016
	.byte	22
	.byte	'_Ifx_GTM_OTSS_Bits',0,24,166,28,16,4,35
	.byte	'OTGB0',0,4
	.word	32533
	.byte	4,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	4,24,2,35,0,35
	.byte	'OTGB1',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'reserved_12',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'OTGB2',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'reserved_20',0,4
	.word	32533
	.byte	12,0,2,35,0,0,21
	.byte	'Ifx_GTM_OTSS_Bits',0,24,174,28,3
	.word	103160
	.byte	22
	.byte	'_Ifx_GTM_REV_Bits',0,24,177,28,16,4,35
	.byte	'STEP',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'NO',0,4
	.word	32533
	.byte	4,20,2,35,0,35
	.byte	'MINOR',0,4
	.word	32533
	.byte	4,16,2,35,0,35
	.byte	'MAJOR',0,4
	.word	32533
	.byte	4,12,2,35,0,35
	.byte	'DEV_CODE0',0,4
	.word	32533
	.byte	4,8,2,35,0,35
	.byte	'DEV_CODE1',0,4
	.word	32533
	.byte	4,4,2,35,0,35
	.byte	'DEV_CODE2',0,4
	.word	32533
	.byte	4,0,2,35,0,0,21
	.byte	'Ifx_GTM_REV_Bits',0,24,186,28,3
	.word	103332
	.byte	22
	.byte	'_Ifx_GTM_RST_Bits',0,24,189,28,16,4,35
	.byte	'RST',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_GTM_RST_Bits',0,24,193,28,3
	.word	103510
	.byte	22
	.byte	'_Ifx_GTM_SPE_CMP_Bits',0,24,196,28,16,4,35
	.byte	'CMP',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CMP_Bits',0,24,200,28,3
	.word	103598
	.byte	22
	.byte	'_Ifx_GTM_SPE_CNT_Bits',0,24,203,28,16,4,35
	.byte	'CNT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CNT_Bits',0,24,207,28,3
	.word	103695
	.byte	22
	.byte	'_Ifx_GTM_SPE_CTRL_STAT_Bits',0,24,210,28,16,4,35
	.byte	'SPE_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SIE0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'SIE1',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'SIE2',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRIG_SEL',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'TIM_SEL',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'FSOM',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'SPE_PAT_PTR',0,4
	.word	32533
	.byte	3,21,2,35,0,35
	.byte	'reserved_11',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'AIP',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'ADIR',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'PIP',0,4
	.word	32533
	.byte	3,13,2,35,0,35
	.byte	'PDIR',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'NIP',0,4
	.word	32533
	.byte	3,9,2,35,0,35
	.byte	'reserved_23',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'FSOL',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CTRL_STAT_Bits',0,24,228,28,3
	.word	103792
	.byte	22
	.byte	'_Ifx_GTM_SPE_EIRQ_EN_Bits',0,24,231,28,16,4,35
	.byte	'SPE_NIPD_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SPE_DCHG_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'SPE_PERR_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'SPE_BIS_EIRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SPE_RCMP_EIRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_EIRQ_EN_Bits',0,24,239,28,3
	.word	104146
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_EN_Bits',0,24,242,28,16,4,35
	.byte	'SPE_NIPD_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SPE_DCHG_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'SPE_PERR_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'SPE_BIS_IRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SPE_RCMP_IRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_EN_Bits',0,24,250,28,3
	.word	104374
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,24,253,28,16,4,35
	.byte	'TRG_SPE_NIPD',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_SPE_DCHG',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_SPE_PERR',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_SPE_BIS',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG_SPE_RCMP',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,24,133,29,3
	.word	104595
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_MODE_Bits',0,24,136,29,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_MODE_Bits',0,24,140,29,3
	.word	104811
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,24,143,29,16,4,35
	.byte	'SPE_NIPD',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SPE_DCHG',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'SPE_PERR',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'SPE_BIS',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SPE_RCMP',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'reserved_5',0,4
	.word	32533
	.byte	27,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,24,151,29,3
	.word	104922
	.byte	22
	.byte	'_Ifx_GTM_SPE_OUT_CTRL_Bits',0,24,154,29,16,4,35
	.byte	'SPE_OUT_CTRL',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_OUT_CTRL_Bits',0,24,158,29,3
	.word	105116
	.byte	22
	.byte	'_Ifx_GTM_SPE_OUT_PAT_Bits',0,24,161,29,16,4,35
	.byte	'SPE_OUT_PAT',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_OUT_PAT_Bits',0,24,165,29,3
	.word	105232
	.byte	22
	.byte	'_Ifx_GTM_SPE_PAT_Bits',0,24,168,29,16,4,35
	.byte	'IP0_VAL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'IP0_PAT',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'IP1_VAL',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'IP1_PAT',0,4
	.word	32533
	.byte	3,24,2,35,0,35
	.byte	'IP2_VAL',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'IP2_PAT',0,4
	.word	32533
	.byte	3,20,2,35,0,35
	.byte	'IP3_VAL',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'IP3_PAT',0,4
	.word	32533
	.byte	3,16,2,35,0,35
	.byte	'IP4_VAL',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'IP4_PAT',0,4
	.word	32533
	.byte	3,12,2,35,0,35
	.byte	'IP5_VAL',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'IP5_PAT',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'IP6_VAL',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'IP6_PAT',0,4
	.word	32533
	.byte	3,4,2,35,0,35
	.byte	'IP7_VAL',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'IP7_PAT',0,4
	.word	32533
	.byte	3,0,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_PAT_Bits',0,24,186,29,3
	.word	105345
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH0_BASE_Bits',0,24,189,29,16,4,35
	.byte	'BASE',0,4
	.word	32533
	.byte	27,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH0_BASE_Bits',0,24,193,29,3
	.word	105708
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH0_CTRL_Bits',0,24,196,29,16,4,35
	.byte	'LOW_RES',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CH_CLK_SRC',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH0_CTRL_Bits',0,24,201,29,3
	.word	105816
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH1_BASE_Bits',0,24,204,29,16,4,35
	.byte	'BASE',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH1_BASE_Bits',0,24,208,29,3
	.word	105948
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH1_CTRL_Bits',0,24,211,29,16,4,35
	.byte	'CH_MODE',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CH_CLK_SRC',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH1_CTRL_Bits',0,24,216,29,3
	.word	106056
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH2_BASE_Bits',0,24,219,29,16,4,35
	.byte	'BASE',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH2_BASE_Bits',0,24,223,29,3
	.word	106188
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH2_CTRL_Bits',0,24,226,29,16,4,35
	.byte	'CH_MODE',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CH_CLK_SRC',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'reserved_4',0,4
	.word	32533
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH2_CTRL_Bits',0,24,231,29,3
	.word	106296
	.byte	22
	.byte	'_Ifx_GTM_TBU_CHEN_Bits',0,24,234,29,16,4,35
	.byte	'ENDIS_CH0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_CH1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_CH2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CHEN_Bits',0,24,240,29,3
	.word	106428
	.byte	22
	.byte	'_Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,24,243,29,16,4,35
	.byte	'SRC_CH0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'SRC_CH1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'SRC_CH2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'SRC_CH3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'SRC_CH4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'SRC_CH5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'SRC_CH6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'SRC_CH7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,24,254,29,3
	.word	106574
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CNT_Bits',0,24,129,30,16,4,35
	.byte	'CNT',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CNT_Bits',0,24,133,30,3
	.word	106821
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CNTS_Bits',0,24,136,30,16,4,35
	.byte	'CNTS',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'ECNT',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CNTS_Bits',0,24,140,30,3
	.word	106924
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CTRL_Bits',0,24,143,30,16,4,35
	.byte	'TIM_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TIM_MODE',0,4
	.word	32533
	.byte	3,28,2,35,0,35
	.byte	'OSM',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'ARU_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'CICTRL',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'TBU0_SEL',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'GPR0_SEL',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'GPR1_SEL',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'CNTS_SEL',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'DSL',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'ISL',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'ECNT_RESET',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'FLT_EN',0,4
	.word	32533
	.byte	1,15,2,35,0,35
	.byte	'FLT_CNT_FRQ',0,4
	.word	32533
	.byte	2,13,2,35,0,35
	.byte	'EXT_CAP_EN',0,4
	.word	32533
	.byte	1,12,2,35,0,35
	.byte	'FLT_MODE_RE',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'FLT_CTR_RE',0,4
	.word	32533
	.byte	1,10,2,35,0,35
	.byte	'FLT_MODE_FE',0,4
	.word	32533
	.byte	1,9,2,35,0,35
	.byte	'FLT_CTR_FE',0,4
	.word	32533
	.byte	1,8,2,35,0,35
	.byte	'CLK_SEL',0,4
	.word	32533
	.byte	3,5,2,35,0,35
	.byte	'FR_ECNT_OFL',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'EGPR0_SEL',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'EGPR1_SEL',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'TOCTRL',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CTRL_Bits',0,24,169,30,3
	.word	107023
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_ECNT_Bits',0,24,172,30,16,4,35
	.byte	'ECNT',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_ECNT_Bits',0,24,176,30,3
	.word	107566
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_ECTRL_Bits',0,24,179,30,16,4,35
	.byte	'EXT_CAP_SRC',0,4
	.word	32533
	.byte	3,29,2,35,0,35
	.byte	'reserved_3',0,4
	.word	32533
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_ECTRL_Bits',0,24,183,30,3
	.word	107672
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,24,186,30,16,4,35
	.byte	'NEWVAL_EIRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ECNTOFL_EIRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'CNTOFL_EIRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'GPROFL_EIRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TODET_EIRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'GLITCHDET_EIRQ_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,24,195,30,3
	.word	107786
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_FLT_FE_Bits',0,24,198,30,16,4,35
	.byte	'FLT_FE',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_FLT_FE_Bits',0,24,202,30,3
	.word	108040
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_FLT_RE_Bits',0,24,205,30,16,4,35
	.byte	'FLT_RE',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'reserved_24',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_FLT_RE_Bits',0,24,209,30,3
	.word	108152
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_GPR0_Bits',0,24,212,30,16,4,35
	.byte	'GPR0',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'ECNT',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_GPR0_Bits',0,24,216,30,3
	.word	108264
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_GPR1_Bits',0,24,219,30,16,4,35
	.byte	'GPR1',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'ECNT',0,4
	.word	32533
	.byte	8,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_GPR1_Bits',0,24,223,30,3
	.word	108363
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,24,226,30,16,4,35
	.byte	'NEWVAL_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ECNTOFL_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'CNTOFL_IRQ_EN',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'GPROFL_IRQ_EN',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TODET_IRQ_EN',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'GLITCHDET_IRQ_EN',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,24,235,30,3
	.word	108462
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,24,238,30,16,4,35
	.byte	'TRG_NEWVAL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_ECNTOFL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'TRG_CNTOFL',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'TRG_GPROFL',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TRG_TODET',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'TRG_GLITCHDET',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,24,247,30,3
	.word	108708
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,24,250,30,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,24,254,30,3
	.word	108946
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,24,129,31,16,4,35
	.byte	'NEWVAL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'ECNTOFL',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'CNTOFL',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'GPROFL',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'TODET',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'GLITCHDET',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'reserved_6',0,4
	.word	32533
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,24,138,31,3
	.word	109063
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_TDUC_Bits',0,24,141,31,16,4,35
	.byte	'TO_CNT',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_TDUC_Bits',0,24,145,31,3
	.word	109275
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_TDUV_Bits',0,24,148,31,16,4,35
	.byte	'TOV',0,4
	.word	32533
	.byte	8,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	20,4,2,35,0,35
	.byte	'TCS',0,4
	.word	32533
	.byte	3,1,2,35,0,35
	.byte	'reserved_31',0,4
	.word	32533
	.byte	1,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_TDUV_Bits',0,24,154,31,3
	.word	109382
	.byte	22
	.byte	'_Ifx_GTM_TIM_IN_SRC_Bits',0,24,157,31,16,4,35
	.byte	'VAL_0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'MODE_0',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'VAL_1',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'MODE_1',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'VAL_2',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'MODE_2',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'VAL_3',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'MODE_3',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'VAL_4',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'MODE_4',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'VAL_5',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'MODE_5',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'VAL_6',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'MODE_6',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'VAL_7',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'MODE_7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_IN_SRC_Bits',0,24,175,31,3
	.word	109524
	.byte	22
	.byte	'_Ifx_GTM_TIM_RST_Bits',0,24,178,31,16,4,35
	.byte	'RST_CH0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'RST_CH1',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'RST_CH2',0,4
	.word	32533
	.byte	1,29,2,35,0,35
	.byte	'RST_CH3',0,4
	.word	32533
	.byte	1,28,2,35,0,35
	.byte	'RST_CH4',0,4
	.word	32533
	.byte	1,27,2,35,0,35
	.byte	'RST_CH5',0,4
	.word	32533
	.byte	1,26,2,35,0,35
	.byte	'RST_CH6',0,4
	.word	32533
	.byte	1,25,2,35,0,35
	.byte	'RST_CH7',0,4
	.word	32533
	.byte	1,24,2,35,0,35
	.byte	'reserved_8',0,4
	.word	32533
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_RST_Bits',0,24,189,31,3
	.word	109869
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CM0_Bits',0,24,192,31,16,4,35
	.byte	'CM0',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CM0_Bits',0,24,196,31,3
	.word	110102
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CM1_Bits',0,24,199,31,16,4,35
	.byte	'CM1',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CM1_Bits',0,24,203,31,3
	.word	110205
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CN0_Bits',0,24,206,31,16,4,35
	.byte	'CN0',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CN0_Bits',0,24,210,31,3
	.word	110308
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CTRL_Bits',0,24,213,31,16,4,35
	.byte	'reserved_0',0,4
	.word	32533
	.byte	11,21,2,35,0,35
	.byte	'SL',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'CLK_SRC_SR',0,4
	.word	32533
	.byte	3,17,2,35,0,35
	.byte	'reserved_15',0,4
	.word	32533
	.byte	5,12,2,35,0,35
	.byte	'RST_CCU0',0,4
	.word	32533
	.byte	1,11,2,35,0,35
	.byte	'reserved_21',0,4
	.word	32533
	.byte	3,8,2,35,0,35
	.byte	'TRIGOUT',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'reserved_25',0,4
	.word	32533
	.byte	1,6,2,35,0,35
	.byte	'OSM',0,4
	.word	32533
	.byte	1,5,2,35,0,35
	.byte	'BITREV',0,4
	.word	32533
	.byte	1,4,2,35,0,35
	.byte	'SPEM',0,4
	.word	32533
	.byte	1,3,2,35,0,35
	.byte	'GCM',0,4
	.word	32533
	.byte	1,2,2,35,0,35
	.byte	'reserved_30',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CTRL_Bits',0,24,228,31,3
	.word	110411
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,24,231,31,16,4,35
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,24,236,31,3
	.word	110731
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,24,239,31,16,4,35
	.byte	'TRG_CCU0TC0',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'TRG_CCU1TC0',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,24,244,31,3
	.word	110874
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,24,247,31,16,4,35
	.byte	'IRQ_MODE',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,24,251,31,3
	.word	111023
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,24,254,31,16,4,35
	.byte	'CCU0TC',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'CCU1TC',0,4
	.word	32533
	.byte	1,30,2,35,0,35
	.byte	'reserved_2',0,4
	.word	32533
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,24,131,32,3
	.word	111140
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_SR0_Bits',0,24,134,32,16,4,35
	.byte	'SR0',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_SR0_Bits',0,24,138,32,3
	.word	111277
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_SR1_Bits',0,24,141,32,16,4,35
	.byte	'SR1',0,4
	.word	32533
	.byte	16,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_SR1_Bits',0,24,145,32,3
	.word	111380
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_STAT_Bits',0,24,148,32,16,4,35
	.byte	'OL',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	31,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_STAT_Bits',0,24,152,32,3
	.word	111483
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,24,155,32,16,4,35
	.byte	'ACT_TB',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'TB_TRIG',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TBU_SEL',0,4
	.word	32533
	.byte	2,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,24,161,32,3
	.word	111586
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,24,164,32,16,4,35
	.byte	'ENDIS_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,24,175,32,3
	.word	111740
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,24,178,32,16,4,35
	.byte	'ENDIS_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,24,189,32,3
	.word	112030
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,24,192,32,16,4,35
	.byte	'FUPD_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'FUPD_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'FUPD_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'FUPD_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'FUPD_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'FUPD_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'FUPD_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'FUPD_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'RSTCN0_CH0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'RSTCN0_CH1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'RSTCN0_CH2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'RSTCN0_CH3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'RSTCN0_CH4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'RSTCN0_CH5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'RSTCN0_CH6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'RSTCN0_CH7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,24,210,32,3
	.word	112320
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,24,213,32,16,4,35
	.byte	'HOST_TRIG',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	7,24,2,35,0,35
	.byte	'RST_CH0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'RST_CH1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'RST_CH2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'RST_CH3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'RST_CH4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'RST_CH5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'RST_CH6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'RST_CH7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'UPEN_CTRL0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'UPEN_CTRL1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'UPEN_CTRL2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'UPEN_CTRL3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'UPEN_CTRL4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'UPEN_CTRL5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'UPEN_CTRL6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'UPEN_CTRL7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,24,233,32,3
	.word	112753
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,24,236,32,16,4,35
	.byte	'INT_TRIG0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'INT_TRIG1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'INT_TRIG2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'INT_TRIG3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'INT_TRIG4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'INT_TRIG5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'INT_TRIG6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'INT_TRIG7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,24,247,32,3
	.word	113203
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,24,250,32,16,4,35
	.byte	'OUTEN_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,24,133,33,3
	.word	113473
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,24,136,33,16,4,35
	.byte	'OUTEN_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,24,147,33,3
	.word	113763
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,24,150,33,16,4,35
	.byte	'ACT_TB',0,4
	.word	32533
	.byte	24,8,2,35,0,35
	.byte	'TB_TRIG',0,4
	.word	32533
	.byte	1,7,2,35,0,35
	.byte	'TBU_SEL',0,4
	.word	32533
	.byte	2,5,2,35,0,35
	.byte	'reserved_27',0,4
	.word	32533
	.byte	5,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,24,156,33,3
	.word	114053
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,24,159,33,16,4,35
	.byte	'ENDIS_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,24,170,33,3
	.word	114207
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,24,173,33,16,4,35
	.byte	'ENDIS_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'ENDIS_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'ENDIS_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'ENDIS_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'ENDIS_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'ENDIS_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'ENDIS_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'ENDIS_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,24,184,33,3
	.word	114497
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,24,187,33,16,4,35
	.byte	'FUPD_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'FUPD_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'FUPD_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'FUPD_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'FUPD_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'FUPD_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'FUPD_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'FUPD_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'RSTCN0_CH0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'RSTCN0_CH1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'RSTCN0_CH2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'RSTCN0_CH3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'RSTCN0_CH4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'RSTCN0_CH5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'RSTCN0_CH6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'RSTCN0_CH7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,24,205,33,3
	.word	114787
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,24,208,33,16,4,35
	.byte	'HOST_TRIG',0,4
	.word	32533
	.byte	1,31,2,35,0,35
	.byte	'reserved_1',0,4
	.word	32533
	.byte	7,24,2,35,0,35
	.byte	'RST_CH0',0,4
	.word	32533
	.byte	1,23,2,35,0,35
	.byte	'RST_CH1',0,4
	.word	32533
	.byte	1,22,2,35,0,35
	.byte	'RST_CH2',0,4
	.word	32533
	.byte	1,21,2,35,0,35
	.byte	'RST_CH3',0,4
	.word	32533
	.byte	1,20,2,35,0,35
	.byte	'RST_CH4',0,4
	.word	32533
	.byte	1,19,2,35,0,35
	.byte	'RST_CH5',0,4
	.word	32533
	.byte	1,18,2,35,0,35
	.byte	'RST_CH6',0,4
	.word	32533
	.byte	1,17,2,35,0,35
	.byte	'RST_CH7',0,4
	.word	32533
	.byte	1,16,2,35,0,35
	.byte	'UPEN_CTRL0',0,4
	.word	32533
	.byte	2,14,2,35,0,35
	.byte	'UPEN_CTRL1',0,4
	.word	32533
	.byte	2,12,2,35,0,35
	.byte	'UPEN_CTRL2',0,4
	.word	32533
	.byte	2,10,2,35,0,35
	.byte	'UPEN_CTRL3',0,4
	.word	32533
	.byte	2,8,2,35,0,35
	.byte	'UPEN_CTRL4',0,4
	.word	32533
	.byte	2,6,2,35,0,35
	.byte	'UPEN_CTRL5',0,4
	.word	32533
	.byte	2,4,2,35,0,35
	.byte	'UPEN_CTRL6',0,4
	.word	32533
	.byte	2,2,2,35,0,35
	.byte	'UPEN_CTRL7',0,4
	.word	32533
	.byte	2,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,24,228,33,3
	.word	115220
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,24,231,33,16,4,35
	.byte	'INT_TRIG0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'INT_TRIG1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'INT_TRIG2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'INT_TRIG3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'INT_TRIG4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'INT_TRIG5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'INT_TRIG6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'INT_TRIG7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,24,242,33,3
	.word	115670
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,24,245,33,16,4,35
	.byte	'OUTEN_CTRL0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_CTRL1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_CTRL2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_CTRL3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_CTRL4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_CTRL5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_CTRL6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_CTRL7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,24,128,34,3
	.word	115940
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,24,131,34,16,4,35
	.byte	'OUTEN_STAT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'OUTEN_STAT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'OUTEN_STAT2',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'OUTEN_STAT3',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'OUTEN_STAT4',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'OUTEN_STAT5',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'OUTEN_STAT6',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'OUTEN_STAT7',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,24,142,34,3
	.word	116230
	.byte	22
	.byte	'_Ifx_GTM_TRIGOUT_Bits',0,24,145,34,16,4,35
	.byte	'INT0',0,4
	.word	32533
	.byte	2,30,2,35,0,35
	.byte	'INT1',0,4
	.word	32533
	.byte	2,28,2,35,0,35
	.byte	'TRIG0',0,4
	.word	32533
	.byte	2,26,2,35,0,35
	.byte	'TRIG1',0,4
	.word	32533
	.byte	2,24,2,35,0,35
	.byte	'TRIG2',0,4
	.word	32533
	.byte	2,22,2,35,0,35
	.byte	'TRIG3',0,4
	.word	32533
	.byte	2,20,2,35,0,35
	.byte	'TRIG4',0,4
	.word	32533
	.byte	2,18,2,35,0,35
	.byte	'TRIG5',0,4
	.word	32533
	.byte	2,16,2,35,0,35
	.byte	'reserved_16',0,4
	.word	32533
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_GTM_TRIGOUT_Bits',0,24,156,34,3
	.word	116520
	.byte	31,24,164,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	39859
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ACCEN0',0,24,169,34,3
	.word	116736
	.byte	31,24,172,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40416
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ACCEN1',0,24,177,34,3
	.word	116800
	.byte	31,24,180,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40493
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG0OUT0',0,24,185,34,3
	.word	116864
	.byte	31,24,188,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40688
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG0OUT1',0,24,193,34,3
	.word	116934
	.byte	31,24,196,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40793
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG1OUT0',0,24,201,34,3
	.word	117004
	.byte	31,24,204,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40988
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ADCTRIG1OUT1',0,24,209,34,3
	.word	117074
	.byte	31,24,212,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41094
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_AEI_ADDR_XPT',0,24,217,34,3
	.word	117144
	.byte	31,24,220,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41224
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC',0,24,225,34,3
	.word	117214
	.byte	31,24,228,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41336
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_ARU_ACCESS',0,24,233,34,3
	.word	117286
	.byte	31,24,236,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41502
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DATA_H',0,24,241,34,3
	.word	117358
	.byte	31,24,244,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41606
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DATA_L',0,24,249,34,3
	.word	117426
	.byte	31,24,252,34,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41710
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0',0,24,129,35,3
	.word	117494
	.byte	31,24,132,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41823
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1',0,24,137,35,3
	.word	117567
	.byte	31,24,140,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41936
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H',0,24,145,35,3
	.word	117640
	.byte	31,24,148,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42050
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L',0,24,153,35,3
	.word	117713
	.byte	31,24,156,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42164
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H',0,24,161,35,3
	.word	117786
	.byte	31,24,164,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42278
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L',0,24,169,35,3
	.word	117859
	.byte	31,24,172,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42392
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_EN',0,24,177,35,3
	.word	117932
	.byte	31,24,180,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42561
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT',0,24,185,35,3
	.word	118000
	.byte	31,24,188,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42730
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_MODE',0,24,193,35,3
	.word	118073
	.byte	31,24,196,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42841
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY',0,24,201,35,3
	.word	118143
	.byte	31,24,204,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42997
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB',0,24,209,35,3
	.word	118215
	.byte	31,24,212,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43151
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL',0,24,217,35,3
	.word	118288
	.byte	31,24,220,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43441
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT',0,24,225,35,3
	.word	118365
	.byte	31,24,228,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43731
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL',0,24,233,35,3
	.word	118442
	.byte	31,24,236,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44164
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL',0,24,241,35,3
	.word	118518
	.byte	31,24,244,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44614
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG',0,24,249,35,3
	.word	118593
	.byte	31,24,252,35,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44884
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL',0,24,129,36,3
	.word	118668
	.byte	31,24,132,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45174
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT',0,24,137,36,3
	.word	118745
	.byte	31,24,140,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45464
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CM0',0,24,145,36,3
	.word	118822
	.byte	31,24,148,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45569
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CM1',0,24,153,36,3
	.word	118891
	.byte	31,24,156,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45674
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CN0',0,24,161,36,3
	.word	118960
	.byte	31,24,164,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45779
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_CTRL',0,24,169,36,3
	.word	119029
	.byte	31,24,172,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46197
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN',0,24,177,36,3
	.word	119099
	.byte	31,24,180,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46342
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT',0,24,185,36,3
	.word	119171
	.byte	31,24,188,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46491
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE',0,24,193,36,3
	.word	119248
	.byte	31,24,196,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46610
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY',0,24,201,36,3
	.word	119322
	.byte	31,24,204,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46749
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_RDADDR',0,24,209,36,3
	.word	119398
	.byte	31,24,212,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46905
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMC',0,24,217,36,3
	.word	119470
	.byte	31,24,220,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47278
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMI',0,24,225,36,3
	.word	119540
	.byte	31,24,228,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47478
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMP',0,24,233,36,3
	.word	119610
	.byte	31,24,236,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47822
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SOMS',0,24,241,36,3
	.word	119680
	.byte	31,24,244,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48079
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SR0',0,24,249,36,3
	.word	119750
	.byte	31,24,252,36,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48184
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_SR1',0,24,129,37,3
	.word	119819
	.byte	31,24,132,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48289
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ATOM_CH_STAT',0,24,137,37,3
	.word	119888
	.byte	31,24,140,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48501
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_EIRQ_EN',0,24,145,37,3
	.word	119958
	.byte	31,24,148,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48844
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_EN',0,24,153,37,3
	.word	120027
	.byte	31,24,156,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49185
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT',0,24,161,37,3
	.word	120095
	.byte	31,24,164,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49549
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_MODE',0,24,169,37,3
	.word	120168
	.byte	31,24,172,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49660
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY',0,24,177,37,3
	.word	120238
	.byte	31,24,180,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49970
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_RST',0,24,185,37,3
	.word	120310
	.byte	31,24,188,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50066
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC0_ADDR',0,24,193,37,3
	.word	120375
	.byte	31,24,196,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50218
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC0_DEST',0,24,201,37,3
	.word	120446
	.byte	31,24,204,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50787
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC10_ADDR',0,24,209,37,3
	.word	120517
	.byte	31,24,212,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50941
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC10_DEST',0,24,217,37,3
	.word	120589
	.byte	31,24,220,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51512
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC11_ADDR',0,24,225,37,3
	.word	120661
	.byte	31,24,228,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51666
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC11_DEST',0,24,233,37,3
	.word	120733
	.byte	31,24,236,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52237
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC1_ADDR',0,24,241,37,3
	.word	120805
	.byte	31,24,244,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52389
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC1_DEST',0,24,249,37,3
	.word	120876
	.byte	31,24,252,37,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52958
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC2_ADDR',0,24,129,38,3
	.word	120947
	.byte	31,24,132,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53110
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC2_DEST',0,24,137,38,3
	.word	121018
	.byte	31,24,140,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53679
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC3_ADDR',0,24,145,38,3
	.word	121089
	.byte	31,24,148,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53831
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC3_DEST',0,24,153,38,3
	.word	121160
	.byte	31,24,156,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54400
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC4_ADDR',0,24,161,38,3
	.word	121231
	.byte	31,24,164,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54552
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC4_DEST',0,24,169,38,3
	.word	121302
	.byte	31,24,172,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55121
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC5_ADDR',0,24,177,38,3
	.word	121373
	.byte	31,24,180,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55273
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC5_DEST',0,24,185,38,3
	.word	121444
	.byte	31,24,188,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55842
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC6_ADDR',0,24,193,38,3
	.word	121515
	.byte	31,24,196,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55994
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC6_DEST',0,24,201,38,3
	.word	121586
	.byte	31,24,204,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56563
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC7_ADDR',0,24,209,38,3
	.word	121657
	.byte	31,24,212,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56715
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC7_DEST',0,24,217,38,3
	.word	121728
	.byte	31,24,220,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57284
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC8_ADDR',0,24,225,38,3
	.word	121799
	.byte	31,24,228,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57436
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC8_DEST',0,24,233,38,3
	.word	121870
	.byte	31,24,236,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58005
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC9_ADDR',0,24,241,38,3
	.word	121941
	.byte	31,24,244,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58157
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC9_DEST',0,24,249,38,3
	.word	122012
	.byte	31,24,252,38,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58726
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_MODE',0,24,129,39,3
	.word	122083
	.byte	31,24,132,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59034
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_PTR1',0,24,137,39,3
	.word	122152
	.byte	31,24,140,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59236
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRIDGE_PTR2',0,24,145,39,3
	.word	122221
	.byte	31,24,148,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59349
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CLC',0,24,153,39,3
	.word	122290
	.byte	31,24,156,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59492
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_EIRQ_EN',0,24,161,39,3
	.word	122351
	.byte	31,24,164,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60186
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_EN',0,24,169,39,3
	.word	122420
	.byte	31,24,172,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60750
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_EN',0,24,177,39,3
	.word	122484
	.byte	31,24,180,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61418
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT',0,24,185,39,3
	.word	122552
	.byte	31,24,188,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62024
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_MODE',0,24,193,39,3
	.word	122625
	.byte	31,24,196,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62135
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY',0,24,201,39,3
	.word	122695
	.byte	31,24,204,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62643
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL',0,24,209,39,3
	.word	122767
	.byte	31,24,212,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62760
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL',0,24,217,39,3
	.word	122840
	.byte	31,24,220,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62895
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL',0,24,225,39,3
	.word	122912
	.byte	31,24,228,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63030
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_CLK_EN',0,24,233,39,3
	.word	122984
	.byte	31,24,236,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63350
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_ECLK_DEN',0,24,241,39,3
	.word	123052
	.byte	31,24,244,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63462
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_ECLK_NUM',0,24,249,39,3
	.word	123122
	.byte	31,24,252,39,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63574
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL',0,24,129,40,3
	.word	123192
	.byte	31,24,132,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63690
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_GCLK_DEN',0,24,137,40,3
	.word	123264
	.byte	31,24,140,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63802
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CMU_GCLK_NUM',0,24,145,40,3
	.word	123334
	.byte	31,24,148,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63914
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_CTRL',0,24,153,40,3
	.word	123404
	.byte	31,24,156,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64067
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DATAIN',0,24,161,40,3
	.word	123466
	.byte	31,24,164,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64140
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ACB',0,24,169,40,3
	.word	123530
	.byte	31,24,172,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64360
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ACT_STA',0,24,177,40,3
	.word	123596
	.byte	31,24,180,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64470
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1',0,24,185,40,3
	.word	123666
	.byte	31,24,188,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64594
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2',0,24,193,40,3
	.word	123740
	.byte	31,24,196,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64718
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1',0,24,201,40,3
	.word	123814
	.byte	31,24,204,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64839
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2',0,24,209,40,3
	.word	123887
	.byte	31,24,212,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64960
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ADT_S',0,24,217,40,3
	.word	123960
	.byte	31,24,220,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65078
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_AOSV_2',0,24,225,40,3
	.word	124028
	.byte	31,24,228,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65353
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS',0,24,233,40,3
	.word	124097
	.byte	31,24,236,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65221
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS_1C3',0,24,241,40,3
	.word	124163
	.byte	31,24,244,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65551
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APS_SYNC',0,24,249,40,3
	.word	124233
	.byte	31,24,252,40,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65869
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT',0,24,129,41,3
	.word	124304
	.byte	31,24,132,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65739
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT_2C',0,24,137,41,3
	.word	124370
	.byte	31,24,140,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66066
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_APT_SYNC',0,24,145,41,3
	.word	124439
	.byte	31,24,148,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66251
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_SX',0,24,153,41,3
	.word	124510
	.byte	31,24,156,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66359
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM',0,24,161,41,3
	.word	124579
	.byte	31,24,164,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66479
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_TX',0,24,169,41,3
	.word	124652
	.byte	31,24,172,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66587
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM',0,24,177,41,3
	.word	124721
	.byte	31,24,180,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66707
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CNT_NUM1',0,24,185,41,3
	.word	124794
	.byte	31,24,188,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66822
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CNT_NUM2',0,24,193,41,3
	.word	124865
	.byte	31,24,196,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66937
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE',0,24,201,41,3
	.word	124936
	.byte	31,24,204,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67211
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0',0,24,209,41,3
	.word	125018
	.byte	31,24,212,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67443
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE',0,24,217,41,3
	.word	125087
	.byte	31,24,220,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67687
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER',0,24,225,41,3
	.word	125169
	.byte	31,24,228,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67920
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_1',0,24,233,41,3
	.word	125253
	.byte	31,24,236,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68347
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER',0,24,241,41,3
	.word	125322
	.byte	31,24,244,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68581
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_2',0,24,249,41,3
	.word	125406
	.byte	31,24,252,41,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68949
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_3',0,24,129,42,3
	.word	125475
	.byte	31,24,132,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69329
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_CTRL_4',0,24,137,42,3
	.word	125544
	.byte	31,24,140,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69713
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DLA',0,24,145,42,3
	.word	125613
	.byte	31,24,148,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69926
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_S',0,24,153,42,3
	.word	125679
	.byte	31,24,156,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69812
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_S_ACT',0,24,161,42,3
	.word	125746
	.byte	31,24,164,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70028
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DT_T_ACT',0,24,169,42,3
	.word	125817
	.byte	31,24,172,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70142
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_DTA',0,24,177,42,3
	.word	125888
	.byte	31,24,181,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70241
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EDT_S',0,24,186,42,3
	.word	125954
	.byte	31,24,190,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70346
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EDT_T',0,24,195,42,3
	.word	126022
	.byte	31,24,198,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70451
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_EIRQ_EN',0,24,203,42,3
	.word	126090
	.byte	31,24,206,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71182
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_FTV_S',0,24,211,42,3
	.word	126160
	.byte	31,24,214,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71290
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_FTV_T',0,24,219,42,3
	.word	126228
	.byte	31,24,222,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71400
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_ID_PMTR',0,24,227,42,3
	.word	126296
	.byte	31,24,230,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71512
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_INC_CNT1',0,24,235,42,3
	.word	126366
	.byte	31,24,239,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71626
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_INC_CNT2',0,24,244,42,3
	.word	126437
	.byte	31,24,247,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71740
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_EN',0,24,252,42,3
	.word	126508
	.byte	31,24,255,42,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72444
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT',0,24,132,43,3
	.word	126577
	.byte	31,24,135,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73095
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_MODE',0,24,140,43,3
	.word	126651
	.byte	31,24,143,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73208
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY',0,24,148,43,3
	.word	126722
	.byte	31,24,152,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73745
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MEDT_S',0,24,157,43,3
	.word	126795
	.byte	31,24,161,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73853
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MEDT_T',0,24,166,43,3
	.word	126864
	.byte	31,24,169,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73961
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MLS1',0,24,174,43,3
	.word	126933
	.byte	31,24,177,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74063
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MLS2',0,24,182,43,3
	.word	127000
	.byte	31,24,186,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74165
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MPVAL1',0,24,191,43,3
	.word	127067
	.byte	31,24,195,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74289
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_MPVAL2',0,24,200,43,3
	.word	127136
	.byte	31,24,203,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74413
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NA',0,24,208,43,3
	.word	127205
	.byte	31,24,211,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74523
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S',0,24,216,43,3
	.word	127270
	.byte	31,24,219,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74628
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR',0,24,224,43,3
	.word	127338
	.byte	31,24,227,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74745
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD',0,24,232,43,3
	.word	127410
	.byte	31,24,235,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74874
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T',0,24,240,43,3
	.word	127486
	.byte	31,24,243,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74979
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR',0,24,248,43,3
	.word	127554
	.byte	31,24,251,43,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75096
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD',0,24,128,44,3
	.word	127626
	.byte	31,24,131,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75225
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NTI_CNT',0,24,136,44,3
	.word	127702
	.byte	31,24,139,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75336
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NUSC',0,24,144,44,3
	.word	127772
	.byte	31,24,147,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75554
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_NUTC',0,24,152,44,3
	.word	127839
	.byte	31,24,155,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75795
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_OSW',0,24,160,44,3
	.word	127906
	.byte	31,24,163,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75952
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PDT_T',0,24,168,44,3
	.word	127972
	.byte	31,24,171,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76068
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSA',0,24,176,44,3
	.word	128040
	.byte	31,24,179,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76167
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSAC',0,24,184,44,3
	.word	128106
	.byte	31,24,187,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76269
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSC',0,24,192,44,3
	.word	128173
	.byte	31,24,195,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76371
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSM_0',0,24,200,44,3
	.word	128240
	.byte	31,24,203,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76477
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSSM_1',0,24,208,44,3
	.word	128309
	.byte	31,24,211,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76583
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTC',0,24,216,44,3
	.word	128378
	.byte	31,24,219,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76685
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTM_0',0,24,224,44,3
	.word	128445
	.byte	31,24,227,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76791
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PSTM_1',0,24,232,44,3
	.word	128514
	.byte	31,24,235,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76897
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_PVT',0,24,240,44,3
	.word	128583
	.byte	31,24,243,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76996
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RAM_INI',0,24,248,44,3
	.word	128649
	.byte	31,24,251,44,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77185
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_SX',0,24,128,45,3
	.word	128719
	.byte	31,24,132,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77296
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM',0,24,137,45,3
	.word	128789
	.byte	31,24,140,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77419
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_TX',0,24,145,45,3
	.word	128863
	.byte	31,24,149,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77530
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM',0,24,154,45,3
	.word	128933
	.byte	31,24,157,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77770
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_S',0,24,162,45,3
	.word	129007
	.byte	31,24,165,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77653
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT',0,24,170,45,3
	.word	129075
	.byte	31,24,173,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77875
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT',0,24,178,45,3
	.word	129147
	.byte	31,24,181,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77992
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_SLR',0,24,186,45,3
	.word	129219
	.byte	31,24,189,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78090
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_STATUS',0,24,194,45,3
	.word	129285
	.byte	31,24,197,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78671
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S',0,24,202,45,3
	.word	129354
	.byte	31,24,205,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78788
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T',0,24,210,45,3
	.word	129426
	.byte	31,24,213,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78905
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THMA',0,24,218,45,3
	.word	129498
	.byte	31,24,221,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79007
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THMI',0,24,226,45,3
	.word	129565
	.byte	31,24,229,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79109
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_THVAL',0,24,234,45,3
	.word	129632
	.byte	31,24,237,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79214
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TLR',0,24,242,45,3
	.word	129700
	.byte	31,24,245,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79312
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TOV',0,24,250,45,3
	.word	129766
	.byte	31,24,253,45,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79424
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TOV_S',0,24,130,46,3
	.word	129832
	.byte	31,24,133,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79540
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_S_0',0,24,138,46,3
	.word	129900
	.byte	31,24,141,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79650
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_S_1',0,24,146,46,3
	.word	129969
	.byte	31,24,149,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79760
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_T_0',0,24,154,46,3
	.word	130038
	.byte	31,24,157,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79872
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TS_T_1',0,24,162,46,3
	.word	130107
	.byte	31,24,165,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79984
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TSAC',0,24,170,46,3
	.word	130176
	.byte	31,24,173,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80086
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DPLL_TSF_S',0,24,178,46,3
	.word	130243
	.byte	31,24,181,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80191
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DXINCON',0,24,186,46,3
	.word	130311
	.byte	31,24,189,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80605
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_DXOUTCON',0,24,194,46,3
	.word	130376
	.byte	31,24,197,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80847
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_EIRQ_EN',0,24,202,46,3
	.word	130442
	.byte	31,24,205,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81051
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_ENABLE',0,24,210,46,3
	.word	130507
	.byte	31,24,213,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81291
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO',0,24,218,46,3
	.word	130575
	.byte	31,24,221,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81416
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG',0,24,226,46,3
	.word	130654
	.byte	31,24,229,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81574
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_CTRL',0,24,234,46,3
	.word	130730
	.byte	31,24,237,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81730
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN',0,24,242,46,3
	.word	130800
	.byte	31,24,245,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81940
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR',0,24,250,46,3
	.word	130873
	.byte	31,24,253,46,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82056
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL',0,24,130,47,3
	.word	130947
	.byte	31,24,133,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82177
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN',0,24,138,47,3
	.word	131023
	.byte	31,24,141,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82383
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT',0,24,146,47,3
	.word	131095
	.byte	31,24,149,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82587
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE',0,24,154,47,3
	.word	131172
	.byte	31,24,157,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82756
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY',0,24,162,47,3
	.word	131246
	.byte	31,24,165,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82942
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM',0,24,170,47,3
	.word	131322
	.byte	31,24,173,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83058
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR',0,24,178,47,3
	.word	131396
	.byte	31,24,181,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83170
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR',0,24,186,47,3
	.word	131468
	.byte	31,24,189,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83290
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_STATUS',0,24,194,47,3
	.word	131544
	.byte	31,24,197,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83453
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM',0,24,202,47,3
	.word	131616
	.byte	31,24,205,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83569
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR',0,24,210,47,3
	.word	131690
	.byte	31,24,213,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83681
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_0',0,24,218,47,3
	.word	131762
	.byte	31,24,221,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84454
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_1',0,24,226,47,3
	.word	131830
	.byte	31,24,229,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84165
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_10',0,24,234,47,3
	.word	131898
	.byte	31,24,237,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	85195
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_2',0,24,242,47,3
	.word	131967
	.byte	31,24,245,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	86028
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_4',0,24,250,47,3
	.word	132035
	.byte	31,24,253,47,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	86861
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_6',0,24,130,48,3
	.word	132103
	.byte	31,24,133,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	87706
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_7',0,24,138,48,3
	.word	132171
	.byte	31,24,141,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	88184
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_9',0,24,146,48,3
	.word	132239
	.byte	31,24,149,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	89049
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI0',0,24,154,48,3
	.word	132307
	.byte	31,24,157,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	89350
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI1',0,24,162,48,3
	.word	132378
	.byte	31,24,165,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	90220
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_CEI3',0,24,170,48,3
	.word	132449
	.byte	31,24,173,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91091
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ICM_IRQG_MEI',0,24,178,48,3
	.word	132520
	.byte	31,24,181,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91586
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL',0,24,186,48,3
	.word	132590
	.byte	31,24,189,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91797
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL',0,24,194,48,3
	.word	132667
	.byte	31,24,197,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92026
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0',0,24,202,48,3
	.word	132745
	.byte	31,24,205,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92347
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0',0,24,210,48,3
	.word	132825
	.byte	31,24,213,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92553
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL',0,24,218,48,3
	.word	132904
	.byte	31,24,221,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92768
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL',0,24,226,48,3
	.word	132983
	.byte	31,24,229,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93109
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL',0,24,234,48,3
	.word	133058
	.byte	31,24,237,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93334
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_EN',0,24,242,48,3
	.word	133134
	.byte	31,24,245,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93532
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_FORCINT',0,24,250,48,3
	.word	133198
	.byte	31,24,253,48,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93728
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_MODE',0,24,130,49,3
	.word	133267
	.byte	31,24,133,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93831
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_IRQ_NOTIFY',0,24,138,49,3
	.word	133333
	.byte	31,24,141,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94009
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_KRST0',0,24,146,49,3
	.word	133401
	.byte	31,24,149,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94120
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_KRST1',0,24,154,49,3
	.word	133464
	.byte	31,24,157,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94212
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_KRSTCLR',0,24,162,49,3
	.word	133527
	.byte	31,24,165,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94308
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MAP_CTRL',0,24,170,49,3
	.word	133592
	.byte	31,24,173,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94738
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCFG_CTRL',0,24,178,49,3
	.word	133658
	.byte	31,24,181,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94887
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH0_CTRG',0,24,186,49,3
	.word	133725
	.byte	31,24,189,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95241
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH0_STRG',0,24,194,49,3
	.word	133795
	.byte	31,24,197,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95595
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_ACB',0,24,202,49,3
	.word	133865
	.byte	31,24,205,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95762
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_CTRL',0,24,210,49,3
	.word	133933
	.byte	31,24,213,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96042
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN',0,24,218,49,3
	.word	134002
	.byte	31,24,221,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96214
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN',0,24,226,49,3
	.word	134074
	.byte	31,24,229,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96381
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT',0,24,234,49,3
	.word	134145
	.byte	31,24,237,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96561
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE',0,24,242,49,3
	.word	134221
	.byte	31,24,245,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96678
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY',0,24,250,49,3
	.word	134294
	.byte	31,24,253,49,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96844
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_PC',0,24,130,50,3
	.word	134369
	.byte	31,24,133,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96944
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R0',0,24,138,50,3
	.word	134436
	.byte	31,24,141,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97046
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R1',0,24,146,50,3
	.word	134503
	.byte	31,24,149,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97148
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R2',0,24,154,50,3
	.word	134570
	.byte	31,24,157,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97250
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R3',0,24,162,50,3
	.word	134637
	.byte	31,24,165,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97352
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R4',0,24,170,50,3
	.word	134704
	.byte	31,24,173,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97454
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R5',0,24,178,50,3
	.word	134771
	.byte	31,24,181,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97556
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R6',0,24,186,50,3
	.word	134838
	.byte	31,24,189,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97658
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CH_R7',0,24,194,50,3
	.word	134905
	.byte	31,24,197,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97760
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_CTRL',0,24,202,50,3
	.word	134972
	.byte	31,24,205,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97924
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_ERR',0,24,210,50,3
	.word	135038
	.byte	31,24,213,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98133
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCS_RST',0,24,218,50,3
	.word	135103
	.byte	31,24,221,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98599
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCSINTCLR',0,24,226,50,3
	.word	135168
	.byte	31,24,229,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98973
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MCSINTSTAT',0,24,234,50,3
	.word	135235
	.byte	31,24,237,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	99349
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MON_ACTIVITY_0',0,24,242,50,3
	.word	135303
	.byte	31,24,245,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100030
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MON_STATUS',0,24,250,50,3
	.word	135375
	.byte	31,24,253,50,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100533
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCIN_INHCON',0,24,130,51,3
	.word	135443
	.byte	31,24,133,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100864
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCIN_INLCON',0,24,138,51,3
	.word	135513
	.byte	31,24,141,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101195
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON0',0,24,146,51,3
	.word	135583
	.byte	31,24,149,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101417
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON1',0,24,154,51,3
	.word	135652
	.byte	31,24,157,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101639
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON2',0,24,162,51,3
	.word	135721
	.byte	31,24,165,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101863
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_MSCSET_CON3',0,24,170,51,3
	.word	135790
	.byte	31,24,173,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102089
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OCS',0,24,178,51,3
	.word	135859
	.byte	31,24,181,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102235
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_ODA',0,24,186,51,3
	.word	135920
	.byte	31,24,189,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102341
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU0T',0,24,194,51,3
	.word	135981
	.byte	31,24,197,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102472
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU1T',0,24,202,51,3
	.word	136045
	.byte	31,24,205,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102603
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTBU2T',0,24,210,51,3
	.word	136109
	.byte	31,24,213,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102734
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTSC0',0,24,218,51,3
	.word	136173
	.byte	31,24,221,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103016
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTSC1',0,24,226,51,3
	.word	136236
	.byte	31,24,229,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103160
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_OTSS',0,24,234,51,3
	.word	136299
	.byte	31,24,237,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103332
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_REV',0,24,242,51,3
	.word	136361
	.byte	31,24,245,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103510
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_RST',0,24,250,51,3
	.word	136422
	.byte	31,24,253,51,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103598
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CMP',0,24,130,52,3
	.word	136483
	.byte	31,24,133,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103695
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CNT',0,24,138,52,3
	.word	136548
	.byte	31,24,141,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103792
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_CTRL_STAT',0,24,146,52,3
	.word	136613
	.byte	31,24,149,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104146
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_EIRQ_EN',0,24,154,52,3
	.word	136684
	.byte	31,24,157,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104374
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_EN',0,24,162,52,3
	.word	136753
	.byte	31,24,165,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104595
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT',0,24,170,52,3
	.word	136821
	.byte	31,24,173,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104811
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_MODE',0,24,178,52,3
	.word	136894
	.byte	31,24,181,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104922
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY',0,24,186,52,3
	.word	136964
	.byte	31,24,189,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105116
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_OUT_CTRL',0,24,194,52,3
	.word	137036
	.byte	31,24,197,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105232
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_OUT_PAT',0,24,202,52,3
	.word	137106
	.byte	31,24,205,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105345
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_SPE_PAT',0,24,210,52,3
	.word	137175
	.byte	31,24,213,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105708
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH0_BASE',0,24,218,52,3
	.word	137240
	.byte	31,24,221,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105816
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH0_CTRL',0,24,226,52,3
	.word	137310
	.byte	31,24,229,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105948
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH1_BASE',0,24,234,52,3
	.word	137380
	.byte	31,24,237,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106056
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH1_CTRL',0,24,242,52,3
	.word	137450
	.byte	31,24,245,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106188
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH2_BASE',0,24,250,52,3
	.word	137520
	.byte	31,24,253,52,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106296
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CH2_CTRL',0,24,130,53,3
	.word	137590
	.byte	31,24,133,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106428
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TBU_CHEN',0,24,138,53,3
	.word	137660
	.byte	31,24,141,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106574
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC',0,24,146,53,3
	.word	137726
	.byte	31,24,149,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106821
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CNT',0,24,154,53,3
	.word	137798
	.byte	31,24,157,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106924
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CNTS',0,24,162,53,3
	.word	137866
	.byte	31,24,165,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107023
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_CTRL',0,24,170,53,3
	.word	137935
	.byte	31,24,173,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107566
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_ECNT',0,24,178,53,3
	.word	138004
	.byte	31,24,181,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107672
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_ECTRL',0,24,186,53,3
	.word	138073
	.byte	31,24,189,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107786
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN',0,24,194,53,3
	.word	138143
	.byte	31,24,197,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108040
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_FLT_FE',0,24,202,53,3
	.word	138215
	.byte	31,24,205,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108152
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_FLT_RE',0,24,210,53,3
	.word	138286
	.byte	31,24,213,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108264
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_GPR0',0,24,218,53,3
	.word	138357
	.byte	31,24,221,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108363
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_GPR1',0,24,226,53,3
	.word	138426
	.byte	31,24,229,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108462
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN',0,24,234,53,3
	.word	138495
	.byte	31,24,237,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108708
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT',0,24,242,53,3
	.word	138566
	.byte	31,24,245,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108946
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE',0,24,250,53,3
	.word	138642
	.byte	31,24,253,53,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109063
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY',0,24,130,54,3
	.word	138715
	.byte	31,24,133,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109275
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_TDUC',0,24,138,54,3
	.word	138790
	.byte	31,24,141,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109382
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_CH_TDUV',0,24,146,54,3
	.word	138859
	.byte	31,24,149,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109524
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_IN_SRC',0,24,154,54,3
	.word	138928
	.byte	31,24,157,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109869
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TIM_RST',0,24,162,54,3
	.word	138996
	.byte	31,24,165,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110102
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CM0',0,24,170,54,3
	.word	139061
	.byte	31,24,173,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110205
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CM1',0,24,178,54,3
	.word	139129
	.byte	31,24,181,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110308
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CN0',0,24,186,54,3
	.word	139197
	.byte	31,24,189,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110411
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_CTRL',0,24,194,54,3
	.word	139265
	.byte	31,24,197,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110731
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN',0,24,202,54,3
	.word	139334
	.byte	31,24,205,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110874
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT',0,24,210,54,3
	.word	139405
	.byte	31,24,213,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111023
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE',0,24,218,54,3
	.word	139481
	.byte	31,24,221,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111140
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY',0,24,226,54,3
	.word	139554
	.byte	31,24,229,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111277
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_SR0',0,24,234,54,3
	.word	139629
	.byte	31,24,237,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111380
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_SR1',0,24,242,54,3
	.word	139697
	.byte	31,24,245,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111483
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_CH_STAT',0,24,250,54,3
	.word	139765
	.byte	31,24,253,54,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111586
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB',0,24,130,55,3
	.word	139834
	.byte	31,24,133,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111740
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL',0,24,138,55,3
	.word	139907
	.byte	31,24,141,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112030
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT',0,24,146,55,3
	.word	139984
	.byte	31,24,149,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112320
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL',0,24,154,55,3
	.word	140061
	.byte	31,24,157,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112753
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL',0,24,162,55,3
	.word	140137
	.byte	31,24,165,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113203
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG',0,24,170,55,3
	.word	140212
	.byte	31,24,173,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113473
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL',0,24,178,55,3
	.word	140287
	.byte	31,24,181,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113763
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT',0,24,186,55,3
	.word	140364
	.byte	31,24,189,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114053
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB',0,24,194,55,3
	.word	140441
	.byte	31,24,197,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114207
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL',0,24,202,55,3
	.word	140514
	.byte	31,24,205,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114497
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT',0,24,210,55,3
	.word	140591
	.byte	31,24,213,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114787
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL',0,24,218,55,3
	.word	140668
	.byte	31,24,221,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115220
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL',0,24,226,55,3
	.word	140744
	.byte	31,24,229,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115670
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG',0,24,234,55,3
	.word	140819
	.byte	31,24,237,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115940
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL',0,24,242,55,3
	.word	140894
	.byte	31,24,245,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116230
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT',0,24,250,55,3
	.word	140971
	.byte	31,24,253,55,9,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116520
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_TRIGOUT',0,24,130,56,3
	.word	141048
	.byte	23,12
	.word	137
	.byte	24,11,0,22
	.byte	'_Ifx_GTM_AFD_CH',0,24,141,56,25,16,9
	.byte	'BUF_ACC',0
	.word	117214
	.byte	4,2,35,0,9
	.byte	'reserved_4',0
	.word	141113
	.byte	12,2,35,4,0,34
	.word	141122
	.byte	21
	.byte	'Ifx_GTM_AFD_CH',0,24,145,56,3
	.word	141182
	.byte	23,32
	.word	137
	.byte	24,31,0,22
	.byte	'_Ifx_GTM_ATOM_AGC',0,24,148,56,25,64,9
	.byte	'GLB_CTRL',0
	.word	118518
	.byte	4,2,35,0,9
	.byte	'ENDIS_CTRL',0
	.word	118288
	.byte	4,2,35,4,9
	.byte	'ENDIS_STAT',0
	.word	118365
	.byte	4,2,35,8,9
	.byte	'ACT_TB',0
	.word	118215
	.byte	4,2,35,12,9
	.byte	'OUTEN_CTRL',0
	.word	118668
	.byte	4,2,35,16,9
	.byte	'OUTEN_STAT',0
	.word	118745
	.byte	4,2,35,20,9
	.byte	'FUPD_CTRL',0
	.word	118442
	.byte	4,2,35,24,9
	.byte	'INT_TRIG',0
	.word	118593
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	141211
	.byte	32,2,35,32,0,34
	.word	141220
	.byte	21
	.byte	'Ifx_GTM_ATOM_AGC',0,24,159,56,3
	.word	141417
	.byte	31,24,165,56,5,4,9
	.byte	'CTRL',0
	.word	119029
	.byte	4,2,35,0,9
	.byte	'SOMC',0
	.word	119470
	.byte	4,2,35,0,9
	.byte	'SOMI',0
	.word	119540
	.byte	4,2,35,0,9
	.byte	'SOMP',0
	.word	119610
	.byte	4,2,35,0,9
	.byte	'SOMS',0
	.word	119680
	.byte	4,2,35,0,0,23,16
	.word	137
	.byte	24,15,0,22
	.byte	'_Ifx_GTM_ATOM_CH',0,24,162,56,25,64,9
	.byte	'RDADDR',0
	.word	119398
	.byte	4,2,35,0,36
	.word	141448
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	119750
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	119819
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	118822
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	118891
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	118960
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	119888
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	119322
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	119099
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	119171
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	119248
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	141525
	.byte	16,2,35,48,0,34
	.word	141534
	.byte	21
	.byte	'Ifx_GTM_ATOM_CH',0,24,185,56,3
	.word	141758
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK0_5',0,24,188,56,25,4,9
	.byte	'CTRL',0
	.word	122767
	.byte	4,2,35,0,0,34
	.word	141788
	.byte	21
	.byte	'Ifx_GTM_CMU_CLK0_5',0,24,191,56,3
	.word	141829
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_6',0,24,194,56,25,4,9
	.byte	'CTRL',0
	.word	122840
	.byte	4,2,35,0,0,34
	.word	141862
	.byte	21
	.byte	'Ifx_GTM_CMU_CLK_6',0,24,197,56,3
	.word	141902
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_7',0,24,200,56,25,4,9
	.byte	'CTRL',0
	.word	122912
	.byte	4,2,35,0,0,34
	.word	141934
	.byte	21
	.byte	'Ifx_GTM_CMU_CLK_7',0,24,203,56,3
	.word	141974
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK',0,24,206,56,25,8,9
	.byte	'NUM',0
	.word	123122
	.byte	4,2,35,0,9
	.byte	'DEN',0
	.word	123052
	.byte	4,2,35,4,0,34
	.word	142006
	.byte	21
	.byte	'Ifx_GTM_CMU_ECLK',0,24,210,56,3
	.word	142057
	.byte	22
	.byte	'_Ifx_GTM_CMU_FXCLK',0,24,213,56,25,4,9
	.byte	'CTRL',0
	.word	123192
	.byte	4,2,35,0,0,34
	.word	142088
	.byte	21
	.byte	'Ifx_GTM_CMU_FXCLK',0,24,216,56,3
	.word	142128
	.byte	22
	.byte	'_Ifx_GTM_F2A_RD_CH',0,24,219,56,25,4,9
	.byte	'ARU_RD_FIFO',0
	.word	130575
	.byte	4,2,35,0,0,34
	.word	142160
	.byte	21
	.byte	'Ifx_GTM_F2A_RD_CH',0,24,222,56,3
	.word	142207
	.byte	22
	.byte	'_Ifx_GTM_F2A_STR_CH',0,24,225,56,25,4,9
	.byte	'STR_CFG',0
	.word	130654
	.byte	4,2,35,0,0,34
	.word	142239
	.byte	21
	.byte	'Ifx_GTM_F2A_STR_CH',0,24,228,56,3
	.word	142283
	.byte	23,8
	.word	137
	.byte	24,7,0,22
	.byte	'_Ifx_GTM_FIFO_CH',0,24,231,56,25,64,9
	.byte	'CTRL',0
	.word	130730
	.byte	4,2,35,0,9
	.byte	'END_ADDR',0
	.word	130873
	.byte	4,2,35,4,9
	.byte	'START_ADDR',0
	.word	131468
	.byte	4,2,35,8,9
	.byte	'UPPER_WM',0
	.word	131616
	.byte	4,2,35,12,9
	.byte	'LOWER_WM',0
	.word	131322
	.byte	4,2,35,16,9
	.byte	'STATUS',0
	.word	131544
	.byte	4,2,35,20,9
	.byte	'FILL_LEVEL',0
	.word	130947
	.byte	4,2,35,24,9
	.byte	'WR_PTR',0
	.word	131690
	.byte	4,2,35,28,9
	.byte	'RD_PTR',0
	.word	131396
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	131246
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	131023
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	131095
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	131172
	.byte	4,2,35,48,9
	.byte	'EIRQ_EN',0
	.word	130800
	.byte	4,2,35,52,9
	.byte	'reserved_38',0
	.word	142316
	.byte	8,2,35,56,0,34
	.word	142325
	.byte	21
	.byte	'Ifx_GTM_FIFO_CH',0,24,248,56,3
	.word	142618
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_CAN',0,24,251,56,25,4,9
	.byte	'OUTSEL',0
	.word	132590
	.byte	4,2,35,0,0,34
	.word	142648
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_CAN',0,24,254,56,3
	.word	142693
	.byte	23,12
	.word	132667
	.byte	24,2,0,23,4
	.word	137
	.byte	24,3,0,22
	.byte	'_Ifx_GTM_INOUTSEL_DSADC',0,24,129,57,25,24,9
	.byte	'INSEL',0
	.word	142728
	.byte	12,2,35,0,9
	.byte	'OUTSEL00',0
	.word	132745
	.byte	4,2,35,12,9
	.byte	'reserved_10',0
	.word	142737
	.byte	4,2,35,16,9
	.byte	'OUTSEL10',0
	.word	132745
	.byte	4,2,35,20,0,34
	.word	142746
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_DSADC',0,24,135,57,3
	.word	142849
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_PSI5',0,24,138,57,25,4,9
	.byte	'OUTSEL0',0
	.word	132825
	.byte	4,2,35,0,0,34
	.word	142886
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_PSI5',0,24,141,57,3
	.word	142933
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S',0,24,144,57,25,4,9
	.byte	'OUTSEL',0
	.word	132904
	.byte	4,2,35,0,0,34
	.word	142969
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_PSI5S',0,24,147,57,3
	.word	143016
	.byte	23,60
	.word	132983
	.byte	24,14,0,22
	.byte	'_Ifx_GTM_INOUTSEL_T',0,24,150,57,25,60,9
	.byte	'OUTSEL',0
	.word	143053
	.byte	60,2,35,0,0,34
	.word	143062
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_T',0,24,153,57,3
	.word	143105
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL_TIM',0,24,156,57,25,4,9
	.byte	'INSEL',0
	.word	133058
	.byte	4,2,35,0,0,34
	.word	143138
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL_TIM',0,24,159,57,3
	.word	143182
	.byte	23,24
	.word	137
	.byte	24,23,0,23,40
	.word	137
	.byte	24,39,0,22
	.byte	'_Ifx_GTM_MCS_CH',0,24,162,57,25,128,1,9
	.byte	'R0',0
	.word	134436
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	134503
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	134570
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	134637
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	134704
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	134771
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	134838
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	134905
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	133933
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	133865
	.byte	4,2,35,36,9
	.byte	'reserved_28',0
	.word	143217
	.byte	24,2,35,40,9
	.byte	'PC',0
	.word	134369
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	134294
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	134074
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	134145
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	134221
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	134002
	.byte	4,2,35,84,9
	.byte	'reserved_58',0
	.word	143226
	.byte	40,2,35,88,0,34
	.word	143235
	.byte	21
	.byte	'Ifx_GTM_MCS_CH',0,24,182,57,3
	.word	143528
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH0',0,24,185,57,25,88,9
	.byte	'R0',0
	.word	134436
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	134503
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	134570
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	134637
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	134704
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	134771
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	134838
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	134905
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	133933
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	133865
	.byte	4,2,35,36,9
	.byte	'CTRG',0
	.word	133725
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	133795
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	141525
	.byte	16,2,35,48,9
	.byte	'PC',0
	.word	134369
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	134294
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	134074
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	134145
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	134221
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	134002
	.byte	4,2,35,84,0,34
	.word	143557
	.byte	21
	.byte	'Ifx_GTM_MCS_CH0',0,24,206,57,3
	.word	143857
	.byte	23,56
	.word	137
	.byte	24,55,0,22
	.byte	'_Ifx_GTM_TIM_CH',0,24,209,57,25,120,9
	.byte	'GPR0',0
	.word	138357
	.byte	4,2,35,0,9
	.byte	'GPR1',0
	.word	138426
	.byte	4,2,35,4,9
	.byte	'CNT',0
	.word	137798
	.byte	4,2,35,8,9
	.byte	'ECNT',0
	.word	138004
	.byte	4,2,35,12,9
	.byte	'CNTS',0
	.word	137866
	.byte	4,2,35,16,9
	.byte	'TDUC',0
	.word	138790
	.byte	4,2,35,20,9
	.byte	'TDUV',0
	.word	138859
	.byte	4,2,35,24,9
	.byte	'FLT_RE',0
	.word	138286
	.byte	4,2,35,28,9
	.byte	'FLT_FE',0
	.word	138215
	.byte	4,2,35,32,9
	.byte	'CTRL',0
	.word	137935
	.byte	4,2,35,36,9
	.byte	'ECTRL',0
	.word	138073
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	138715
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	138495
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	138566
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	138642
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	138143
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	143887
	.byte	56,2,35,64,0,34
	.word	143896
	.byte	21
	.byte	'Ifx_GTM_TIM_CH',0,24,228,57,3
	.word	144190
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH',0,24,231,57,25,48,9
	.byte	'CTRL',0
	.word	139265
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	139629
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	139697
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	139061
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	139129
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	139197
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	139765
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	139554
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	139334
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	139405
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	139481
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	142737
	.byte	4,2,35,44,0,34
	.word	144219
	.byte	21
	.byte	'Ifx_GTM_TOM_CH',0,24,245,57,3
	.word	144431
	.byte	23,128,1
	.word	141122
	.byte	24,7,0,34
	.word	144460
	.byte	22
	.byte	'_Ifx_GTM_AFD',0,24,130,58,25,128,1,9
	.byte	'CH',0
	.word	144470
	.byte	128,1,2,35,0,0,34
	.word	144475
	.byte	21
	.byte	'Ifx_GTM_AFD',0,24,133,58,3
	.word	144509
	.byte	22
	.byte	'_Ifx_GTM_ARU',0,24,136,58,25,52,9
	.byte	'ARU_ACCESS',0
	.word	117286
	.byte	4,2,35,0,9
	.byte	'DATA_H',0
	.word	117358
	.byte	4,2,35,4,9
	.byte	'DATA_L',0
	.word	117426
	.byte	4,2,35,8,9
	.byte	'DBG_ACCESS0',0
	.word	117494
	.byte	4,2,35,12,9
	.byte	'DBG_DATA0_H',0
	.word	117640
	.byte	4,2,35,16,9
	.byte	'DBG_DATA0_L',0
	.word	117713
	.byte	4,2,35,20,9
	.byte	'DBG_ACCESS1',0
	.word	117567
	.byte	4,2,35,24,9
	.byte	'DBG_DATA1_H',0
	.word	117786
	.byte	4,2,35,28,9
	.byte	'DBG_DATA1_L',0
	.word	117859
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	118143
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	117932
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	118000
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	118073
	.byte	4,2,35,48,0,34
	.word	144535
	.byte	21
	.byte	'Ifx_GTM_ARU',0,24,151,58,3
	.word	144808
	.byte	34
	.word	141534
	.byte	34
	.word	141220
	.byte	34
	.word	141534
	.byte	23,64
	.word	137
	.byte	24,63,0,34
	.word	141534
	.byte	34
	.word	141534
	.byte	34
	.word	141534
	.byte	34
	.word	141534
	.byte	34
	.word	141534
	.byte	34
	.word	141534
	.byte	23,192,8
	.word	137
	.byte	24,191,8,0,22
	.byte	'_Ifx_GTM_ATOM',0,24,154,58,25,128,16,9
	.byte	'CH0',0
	.word	144834
	.byte	64,2,35,0,9
	.byte	'AGC',0
	.word	144839
	.byte	64,2,35,64,9
	.byte	'CH1',0
	.word	144844
	.byte	64,3,35,128,1,9
	.byte	'reserved_C0',0
	.word	144849
	.byte	64,3,35,192,1,9
	.byte	'CH2',0
	.word	144858
	.byte	64,3,35,128,2,9
	.byte	'reserved_140',0
	.word	144849
	.byte	64,3,35,192,2,9
	.byte	'CH3',0
	.word	144863
	.byte	64,3,35,128,3,9
	.byte	'reserved_1C0',0
	.word	144849
	.byte	64,3,35,192,3,9
	.byte	'CH4',0
	.word	144868
	.byte	64,3,35,128,4,9
	.byte	'reserved_240',0
	.word	144849
	.byte	64,3,35,192,4,9
	.byte	'CH5',0
	.word	144873
	.byte	64,3,35,128,5,9
	.byte	'reserved_2C0',0
	.word	144849
	.byte	64,3,35,192,5,9
	.byte	'CH6',0
	.word	144878
	.byte	64,3,35,128,6,9
	.byte	'reserved_340',0
	.word	144849
	.byte	64,3,35,192,6,9
	.byte	'CH7',0
	.word	144883
	.byte	64,3,35,128,7,9
	.byte	'reserved_3C0',0
	.word	144888
	.byte	192,8,3,35,192,7,0,34
	.word	144899
	.byte	21
	.byte	'Ifx_GTM_ATOM',0,24,172,58,3
	.word	145206
	.byte	22
	.byte	'_Ifx_GTM_BRC',0,24,175,58,25,120,9
	.byte	'SRC0_ADDR',0
	.word	120375
	.byte	4,2,35,0,9
	.byte	'SRC0_DEST',0
	.word	120446
	.byte	4,2,35,4,9
	.byte	'SRC1_ADDR',0
	.word	120805
	.byte	4,2,35,8,9
	.byte	'SRC1_DEST',0
	.word	120876
	.byte	4,2,35,12,9
	.byte	'SRC2_ADDR',0
	.word	120947
	.byte	4,2,35,16,9
	.byte	'SRC2_DEST',0
	.word	121018
	.byte	4,2,35,20,9
	.byte	'SRC3_ADDR',0
	.word	121089
	.byte	4,2,35,24,9
	.byte	'SRC3_DEST',0
	.word	121160
	.byte	4,2,35,28,9
	.byte	'SRC4_ADDR',0
	.word	121231
	.byte	4,2,35,32,9
	.byte	'SRC4_DEST',0
	.word	121302
	.byte	4,2,35,36,9
	.byte	'SRC5_ADDR',0
	.word	121373
	.byte	4,2,35,40,9
	.byte	'SRC5_DEST',0
	.word	121444
	.byte	4,2,35,44,9
	.byte	'SRC6_ADDR',0
	.word	121515
	.byte	4,2,35,48,9
	.byte	'SRC6_DEST',0
	.word	121586
	.byte	4,2,35,52,9
	.byte	'SRC7_ADDR',0
	.word	121657
	.byte	4,2,35,56,9
	.byte	'SRC7_DEST',0
	.word	121728
	.byte	4,2,35,60,9
	.byte	'SRC8_ADDR',0
	.word	121799
	.byte	4,2,35,64,9
	.byte	'SRC8_DEST',0
	.word	121870
	.byte	4,2,35,68,9
	.byte	'SRC9_ADDR',0
	.word	121941
	.byte	4,2,35,72,9
	.byte	'SRC9_DEST',0
	.word	122012
	.byte	4,2,35,76,9
	.byte	'SRC10_ADDR',0
	.word	120517
	.byte	4,2,35,80,9
	.byte	'SRC10_DEST',0
	.word	120589
	.byte	4,2,35,84,9
	.byte	'SRC11_ADDR',0
	.word	120661
	.byte	4,2,35,88,9
	.byte	'SRC11_DEST',0
	.word	120733
	.byte	4,2,35,92,9
	.byte	'IRQ_NOTIFY',0
	.word	120238
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	120027
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	120095
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	120168
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	120310
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	119958
	.byte	4,2,35,116,0,34
	.word	145233
	.byte	21
	.byte	'Ifx_GTM_BRC',0,24,207,58,3
	.word	145818
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE',0,24,210,58,25,12,9
	.byte	'MODE',0
	.word	122083
	.byte	4,2,35,0,9
	.byte	'PTR1',0
	.word	122152
	.byte	4,2,35,4,9
	.byte	'PTR2',0
	.word	122221
	.byte	4,2,35,8,0,34
	.word	145844
	.byte	21
	.byte	'Ifx_GTM_BRIDGE',0,24,215,58,3
	.word	145909
	.byte	22
	.byte	'_Ifx_GTM_CMP',0,24,218,58,25,24,9
	.byte	'EN',0
	.word	122420
	.byte	4,2,35,0,9
	.byte	'IRQ_NOTIFY',0
	.word	122695
	.byte	4,2,35,4,9
	.byte	'IRQ_EN',0
	.word	122484
	.byte	4,2,35,8,9
	.byte	'IRQ_FORCINT',0
	.word	122552
	.byte	4,2,35,12,9
	.byte	'IRQ_MODE',0
	.word	122625
	.byte	4,2,35,16,9
	.byte	'EIRQ_EN',0
	.word	122351
	.byte	4,2,35,20,0,34
	.word	145938
	.byte	21
	.byte	'Ifx_GTM_CMP',0,24,226,58,3
	.word	146062
	.byte	23,24
	.word	141788
	.byte	24,5,0,34
	.word	146088
	.byte	34
	.word	141862
	.byte	34
	.word	141934
	.byte	23,24
	.word	142006
	.byte	24,2,0,34
	.word	146112
	.byte	34
	.word	142088
	.byte	22
	.byte	'_Ifx_GTM_CMU',0,24,229,58,25,72,9
	.byte	'CLK_EN',0
	.word	122984
	.byte	4,2,35,0,9
	.byte	'GCLK_NUM',0
	.word	123334
	.byte	4,2,35,4,9
	.byte	'GCLK_DEN',0
	.word	123264
	.byte	4,2,35,8,9
	.byte	'CLK0_5',0
	.word	146097
	.byte	24,2,35,12,9
	.byte	'CLK_6',0
	.word	146102
	.byte	4,2,35,36,9
	.byte	'CLK_7',0
	.word	146107
	.byte	4,2,35,40,9
	.byte	'ECLK',0
	.word	146121
	.byte	24,2,35,44,9
	.byte	'FXCLK',0
	.word	146126
	.byte	4,2,35,68,0,34
	.word	146131
	.byte	21
	.byte	'Ifx_GTM_CMU',0,24,239,58,3
	.word	146278
	.byte	23,92
	.word	137
	.byte	24,91,0,23,44
	.word	137
	.byte	24,43,0,23,96
	.word	126296
	.byte	24,23,0,23,128,1
	.word	137
	.byte	24,127,0,23,96
	.word	128040
	.byte	24,23,0,23,96
	.word	125613
	.byte	24,23,0,23,96
	.word	127205
	.byte	24,23,0,23,96
	.word	125888
	.byte	24,23,0,23,88
	.word	137
	.byte	24,87,0,23,96
	.word	127972
	.byte	24,23,0,23,96
	.word	137
	.byte	24,95,0,23,128,2
	.word	129007
	.byte	24,63,0,23,128,2
	.word	130243
	.byte	24,63,0,23,128,2
	.word	123960
	.byte	24,63,0,23,128,2
	.word	125679
	.byte	24,63,0,23,128,8
	.word	137
	.byte	24,255,7,0,23,96
	.word	130176
	.byte	24,23,0,23,96
	.word	128106
	.byte	24,23,0,23,24
	.word	123530
	.byte	24,5,0,22
	.byte	'_Ifx_GTM_DPLL',0,24,242,58,25,152,30,9
	.byte	'CTRL_0',0
	.word	125018
	.byte	4,2,35,0,9
	.byte	'CTRL_1',0
	.word	125253
	.byte	4,2,35,4,9
	.byte	'CTRL_2',0
	.word	125406
	.byte	4,2,35,8,9
	.byte	'CTRL_3',0
	.word	125475
	.byte	4,2,35,12,9
	.byte	'CTRL_4',0
	.word	125544
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	142737
	.byte	4,2,35,20,9
	.byte	'ACT_STA',0
	.word	123596
	.byte	4,2,35,24,9
	.byte	'OSW',0
	.word	127906
	.byte	4,2,35,28,9
	.byte	'AOSV_2',0
	.word	124028
	.byte	4,2,35,32,9
	.byte	'APT',0
	.word	124304
	.byte	4,2,35,36,9
	.byte	'APS',0
	.word	124097
	.byte	4,2,35,40,9
	.byte	'APT_2C',0
	.word	124370
	.byte	4,2,35,44,9
	.byte	'APS_1C3',0
	.word	124163
	.byte	4,2,35,48,9
	.byte	'NUTC',0
	.word	127839
	.byte	4,2,35,52,9
	.byte	'NUSC',0
	.word	127772
	.byte	4,2,35,56,9
	.byte	'NTI_CNT',0
	.word	127702
	.byte	4,2,35,60,9
	.byte	'IRQ_NOTIFY',0
	.word	126722
	.byte	4,2,35,64,9
	.byte	'IRQ_EN',0
	.word	126508
	.byte	4,2,35,68,9
	.byte	'IRQ_FORCINT',0
	.word	126577
	.byte	4,2,35,72,9
	.byte	'IRQ_MODE',0
	.word	126651
	.byte	4,2,35,76,9
	.byte	'EIRQ_EN',0
	.word	126090
	.byte	4,2,35,80,9
	.byte	'reserved_54',0
	.word	146304
	.byte	92,2,35,84,9
	.byte	'INC_CNT1',0
	.word	126366
	.byte	4,3,35,176,1,9
	.byte	'INC_CNT2',0
	.word	126437
	.byte	4,3,35,180,1,9
	.byte	'APT_SYNC',0
	.word	124439
	.byte	4,3,35,184,1,9
	.byte	'APS_SYNC',0
	.word	124233
	.byte	4,3,35,188,1,9
	.byte	'TBU_TS0_T',0
	.word	129426
	.byte	4,3,35,192,1,9
	.byte	'TBU_TS0_S',0
	.word	129354
	.byte	4,3,35,196,1,9
	.byte	'ADD_IN_LD1',0
	.word	123814
	.byte	4,3,35,200,1,9
	.byte	'ADD_IN_LD2',0
	.word	123887
	.byte	4,3,35,204,1,9
	.byte	'reserved_D0',0
	.word	146313
	.byte	44,3,35,208,1,9
	.byte	'STATUS',0
	.word	129285
	.byte	4,3,35,252,1,9
	.byte	'ID_PMTR',0
	.word	146322
	.byte	96,3,35,128,2,9
	.byte	'reserved_160',0
	.word	146331
	.byte	128,1,3,35,224,2,9
	.byte	'CTRL_0_SHADOW_TRIGGER',0
	.word	125169
	.byte	4,3,35,224,3,9
	.byte	'CTRL_0_SHADOW_STATE',0
	.word	125087
	.byte	4,3,35,228,3,9
	.byte	'CTRL_1_SHADOW_TRIGGER',0
	.word	125322
	.byte	4,3,35,232,3,9
	.byte	'CRTL_1_SHADOW_STATE',0
	.word	124936
	.byte	4,3,35,236,3,9
	.byte	'reserved_1F0',0
	.word	141113
	.byte	12,3,35,240,3,9
	.byte	'RAM_INI',0
	.word	128649
	.byte	4,3,35,252,3,9
	.byte	'PSA',0
	.word	146341
	.byte	96,3,35,128,4,9
	.byte	'reserved_260',0
	.word	141211
	.byte	32,3,35,224,4,9
	.byte	'DLA',0
	.word	146350
	.byte	96,3,35,128,5,9
	.byte	'reserved_2E0',0
	.word	141211
	.byte	32,3,35,224,5,9
	.byte	'NA',0
	.word	146359
	.byte	96,3,35,128,6,9
	.byte	'reserved_360',0
	.word	141211
	.byte	32,3,35,224,6,9
	.byte	'DTA',0
	.word	146368
	.byte	96,3,35,128,7,9
	.byte	'reserved_3E0',0
	.word	141211
	.byte	32,3,35,224,7,9
	.byte	'TS_T_0',0
	.word	130038
	.byte	4,3,35,128,8,9
	.byte	'TS_T_1',0
	.word	130107
	.byte	4,3,35,132,8,9
	.byte	'FTV_T',0
	.word	126228
	.byte	4,3,35,136,8,9
	.byte	'reserved_40C',0
	.word	142737
	.byte	4,3,35,140,8,9
	.byte	'TS_S_0',0
	.word	129900
	.byte	4,3,35,144,8,9
	.byte	'TS_S_1',0
	.word	129969
	.byte	4,3,35,148,8,9
	.byte	'FTV_S',0
	.word	126160
	.byte	4,3,35,152,8,9
	.byte	'reserved_41C',0
	.word	142737
	.byte	4,3,35,156,8,9
	.byte	'THMI',0
	.word	129565
	.byte	4,3,35,160,8,9
	.byte	'THMA',0
	.word	129498
	.byte	4,3,35,164,8,9
	.byte	'THVAL',0
	.word	129632
	.byte	4,3,35,168,8,9
	.byte	'reserved_42C',0
	.word	142737
	.byte	4,3,35,172,8,9
	.byte	'TOV',0
	.word	129766
	.byte	4,3,35,176,8,9
	.byte	'TOV_S',0
	.word	129832
	.byte	4,3,35,180,8,9
	.byte	'ADD_IN_CAL1',0
	.word	123666
	.byte	4,3,35,184,8,9
	.byte	'ADD_IN_CAL2',0
	.word	123740
	.byte	4,3,35,188,8,9
	.byte	'MPVAL1',0
	.word	127067
	.byte	4,3,35,192,8,9
	.byte	'MPVAL2',0
	.word	127136
	.byte	4,3,35,196,8,9
	.byte	'NMB_T_TAR',0
	.word	127554
	.byte	4,3,35,200,8,9
	.byte	'NMB_T_TAR_OLD',0
	.word	127626
	.byte	4,3,35,204,8,9
	.byte	'NMB_S_TAR',0
	.word	127338
	.byte	4,3,35,208,8,9
	.byte	'NMB_S_TAR_OLD',0
	.word	127410
	.byte	4,3,35,212,8,9
	.byte	'reserved_458',0
	.word	142316
	.byte	8,3,35,216,8,9
	.byte	'RCDT_TX',0
	.word	128863
	.byte	4,3,35,224,8,9
	.byte	'RCDT_SX',0
	.word	128719
	.byte	4,3,35,228,8,9
	.byte	'RCDT_TX_NOM',0
	.word	128933
	.byte	4,3,35,232,8,9
	.byte	'RCDT_SX_NOM',0
	.word	128789
	.byte	4,3,35,236,8,9
	.byte	'RDT_T_ACT',0
	.word	129147
	.byte	4,3,35,240,8,9
	.byte	'RDT_S_ACT',0
	.word	129075
	.byte	4,3,35,244,8,9
	.byte	'DT_T_ACT',0
	.word	125817
	.byte	4,3,35,248,8,9
	.byte	'DT_S_ACT',0
	.word	125746
	.byte	4,3,35,252,8,9
	.byte	'EDT_T',0
	.word	126022
	.byte	4,3,35,128,9,9
	.byte	'MEDT_T',0
	.word	126864
	.byte	4,3,35,132,9,9
	.byte	'EDT_S',0
	.word	125954
	.byte	4,3,35,136,9,9
	.byte	'MEDT_S',0
	.word	126795
	.byte	4,3,35,140,9,9
	.byte	'CDT_TX',0
	.word	124652
	.byte	4,3,35,144,9,9
	.byte	'CDT_SX',0
	.word	124510
	.byte	4,3,35,148,9,9
	.byte	'CDT_TX_NOM',0
	.word	124721
	.byte	4,3,35,152,9,9
	.byte	'CDT_SX_NOM',0
	.word	124579
	.byte	4,3,35,156,9,9
	.byte	'TLR',0
	.word	129700
	.byte	4,3,35,160,9,9
	.byte	'SLR',0
	.word	129219
	.byte	4,3,35,164,9,9
	.byte	'reserved_4A8',0
	.word	146377
	.byte	88,3,35,168,9,9
	.byte	'PDT_T',0
	.word	146386
	.byte	96,3,35,128,10,9
	.byte	'reserved_560',0
	.word	146395
	.byte	96,3,35,224,10,9
	.byte	'MLS1',0
	.word	126933
	.byte	4,3,35,192,11,9
	.byte	'MLS2',0
	.word	127000
	.byte	4,3,35,196,11,9
	.byte	'CNT_NUM1',0
	.word	124794
	.byte	4,3,35,200,11,9
	.byte	'CNT_NUM2',0
	.word	124865
	.byte	4,3,35,204,11,9
	.byte	'PVT',0
	.word	128583
	.byte	4,3,35,208,11,9
	.byte	'reserved_5D4',0
	.word	141113
	.byte	12,3,35,212,11,9
	.byte	'PSTC',0
	.word	128378
	.byte	4,3,35,224,11,9
	.byte	'PSSC',0
	.word	128173
	.byte	4,3,35,228,11,9
	.byte	'PSTM_0',0
	.word	128445
	.byte	4,3,35,232,11,9
	.byte	'PSTM_1',0
	.word	128514
	.byte	4,3,35,236,11,9
	.byte	'PSSM_0',0
	.word	128240
	.byte	4,3,35,240,11,9
	.byte	'PSSM_1',0
	.word	128309
	.byte	4,3,35,244,11,9
	.byte	'NMB_T',0
	.word	127486
	.byte	4,3,35,248,11,9
	.byte	'NMB_S',0
	.word	127270
	.byte	4,3,35,252,11,9
	.byte	'RDT_S',0
	.word	146404
	.byte	128,2,3,35,128,12,9
	.byte	'TSF_S',0
	.word	146414
	.byte	128,2,3,35,128,14,9
	.byte	'ADT_S',0
	.word	146424
	.byte	128,2,3,35,128,16,9
	.byte	'DT_S',0
	.word	146434
	.byte	128,2,3,35,128,18,9
	.byte	'reserved_A00',0
	.word	146444
	.byte	128,8,3,35,128,20,9
	.byte	'TSAC',0
	.word	146455
	.byte	96,3,35,128,28,9
	.byte	'reserved_E60',0
	.word	141211
	.byte	32,3,35,224,28,9
	.byte	'PSAC',0
	.word	146464
	.byte	96,3,35,128,29,9
	.byte	'reserved_EE0',0
	.word	141211
	.byte	32,3,35,224,29,9
	.byte	'ACB',0
	.word	146473
	.byte	24,3,35,128,30,0,34
	.word	146482
	.byte	21
	.byte	'Ifx_GTM_DPLL',0,24,232,59,3
	.word	148659
	.byte	23,32
	.word	142160
	.byte	24,7,0,34
	.word	148686
	.byte	23,32
	.word	142239
	.byte	24,7,0,34
	.word	148700
	.byte	22
	.byte	'_Ifx_GTM_F2A',0,24,235,59,25,68,9
	.byte	'RD_CH',0
	.word	148695
	.byte	32,2,35,0,9
	.byte	'STR_CH',0
	.word	148709
	.byte	32,2,35,32,9
	.byte	'ENABLE',0
	.word	130507
	.byte	4,2,35,64,0,34
	.word	148714
	.byte	21
	.byte	'Ifx_GTM_F2A',0,24,240,59,3
	.word	148781
	.byte	23,128,4
	.word	142325
	.byte	24,7,0,34
	.word	148807
	.byte	22
	.byte	'_Ifx_GTM_FIFO',0,24,243,59,25,128,4,9
	.byte	'CH',0
	.word	148817
	.byte	128,4,2,35,0,0,34
	.word	148822
	.byte	21
	.byte	'Ifx_GTM_FIFO',0,24,246,59,3
	.word	148857
	.byte	22
	.byte	'_Ifx_GTM_ICM',0,24,249,59,25,68,9
	.byte	'IRQG_0',0
	.word	131762
	.byte	4,2,35,0,9
	.byte	'IRQG_1',0
	.word	131830
	.byte	4,2,35,4,9
	.byte	'IRQG_2',0
	.word	131967
	.byte	4,2,35,8,9
	.byte	'reserved_C',0
	.word	142737
	.byte	4,2,35,12,9
	.byte	'IRQG_4',0
	.word	132035
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	142737
	.byte	4,2,35,20,9
	.byte	'IRQG_6',0
	.word	132103
	.byte	4,2,35,24,9
	.byte	'IRQG_7',0
	.word	132171
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	142737
	.byte	4,2,35,32,9
	.byte	'IRQG_9',0
	.word	132239
	.byte	4,2,35,36,9
	.byte	'IRQG_10',0
	.word	131898
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	142737
	.byte	4,2,35,44,9
	.byte	'IRQG_MEI',0
	.word	132520
	.byte	4,2,35,48,9
	.byte	'IRQG_CEI0',0
	.word	132307
	.byte	4,2,35,52,9
	.byte	'IRQG_CEI1',0
	.word	132378
	.byte	4,2,35,56,9
	.byte	'reserved_3C',0
	.word	142737
	.byte	4,2,35,60,9
	.byte	'IRQG_CEI3',0
	.word	132449
	.byte	4,2,35,64,0,34
	.word	148884
	.byte	21
	.byte	'Ifx_GTM_ICM',0,24,140,60,3
	.word	149212
	.byte	23,16
	.word	143138
	.byte	24,3,0,34
	.word	149238
	.byte	34
	.word	143062
	.byte	34
	.word	142746
	.byte	34
	.word	142648
	.byte	34
	.word	142886
	.byte	34
	.word	142969
	.byte	22
	.byte	'_Ifx_GTM_INOUTSEL',0,24,143,60,25,156,1,9
	.byte	'TIM',0
	.word	149247
	.byte	16,2,35,0,9
	.byte	'reserved_10',0
	.word	141525
	.byte	16,2,35,16,9
	.byte	'T',0
	.word	149252
	.byte	60,2,35,32,9
	.byte	'reserved_5C',0
	.word	141525
	.byte	16,2,35,92,9
	.byte	'DSADC',0
	.word	149257
	.byte	24,2,35,108,9
	.byte	'reserved_84',0
	.word	141113
	.byte	12,3,35,132,1,9
	.byte	'CAN',0
	.word	149262
	.byte	4,3,35,144,1,9
	.byte	'PSI5',0
	.word	149267
	.byte	4,3,35,148,1,9
	.byte	'PSI5S',0
	.word	149272
	.byte	4,3,35,152,1,0,34
	.word	149277
	.byte	21
	.byte	'Ifx_GTM_INOUTSEL',0,24,154,60,3
	.word	149451
	.byte	34
	.word	143557
	.byte	23,28
	.word	137
	.byte	24,27,0,34
	.word	143235
	.byte	34
	.word	143235
	.byte	34
	.word	143235
	.byte	34
	.word	143235
	.byte	34
	.word	143235
	.byte	34
	.word	143235
	.byte	34
	.word	143235
	.byte	23,128,24
	.word	137
	.byte	24,255,23,0,22
	.byte	'_Ifx_GTM_MCS',0,24,157,60,25,128,32,9
	.byte	'CH0',0
	.word	149482
	.byte	88,2,35,0,9
	.byte	'reserved_58',0
	.word	149487
	.byte	28,2,35,88,9
	.byte	'CTRL',0
	.word	134972
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	135103
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	135038
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	149496
	.byte	128,1,3,35,128,1,9
	.byte	'CH2',0
	.word	149501
	.byte	128,1,3,35,128,2,9
	.byte	'CH3',0
	.word	149506
	.byte	128,1,3,35,128,3,9
	.byte	'CH4',0
	.word	149511
	.byte	128,1,3,35,128,4,9
	.byte	'CH5',0
	.word	149516
	.byte	128,1,3,35,128,5,9
	.byte	'CH6',0
	.word	149521
	.byte	128,1,3,35,128,6,9
	.byte	'CH7',0
	.word	149526
	.byte	128,1,3,35,128,7,9
	.byte	'reserved_400',0
	.word	149531
	.byte	128,24,3,35,128,8,0,34
	.word	149542
	.byte	21
	.byte	'Ifx_GTM_MCS',0,24,172,60,3
	.word	149766
	.byte	22
	.byte	'_Ifx_GTM_MON',0,24,175,60,25,8,9
	.byte	'STATUS',0
	.word	135375
	.byte	4,2,35,0,9
	.byte	'ACTIVITY_0',0
	.word	135303
	.byte	4,2,35,4,0,34
	.word	149792
	.byte	21
	.byte	'Ifx_GTM_MON',0,24,179,60,3
	.word	149848
	.byte	22
	.byte	'_Ifx_GTM_MSCIN',0,24,182,60,25,8,9
	.byte	'INLCON',0
	.word	135513
	.byte	4,2,35,0,9
	.byte	'INHCON',0
	.word	135443
	.byte	4,2,35,4,0,34
	.word	149874
	.byte	21
	.byte	'Ifx_GTM_MSCIN',0,24,186,60,3
	.word	149928
	.byte	22
	.byte	'_Ifx_GTM_MSCSET',0,24,189,60,25,16,9
	.byte	'CON0',0
	.word	135583
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	135652
	.byte	4,2,35,4,9
	.byte	'CON2',0
	.word	135721
	.byte	4,2,35,8,9
	.byte	'CON3',0
	.word	135790
	.byte	4,2,35,12,0,34
	.word	149956
	.byte	21
	.byte	'Ifx_GTM_MSCSET',0,24,195,60,3
	.word	150035
	.byte	23,32
	.word	137106
	.byte	24,7,0,22
	.byte	'_Ifx_GTM_SPE',0,24,198,60,25,128,1,9
	.byte	'CTRL_STAT',0
	.word	136613
	.byte	4,2,35,0,9
	.byte	'PAT',0
	.word	137175
	.byte	4,2,35,4,9
	.byte	'OUT_PAT',0
	.word	150064
	.byte	32,2,35,8,9
	.byte	'OUT_CTRL',0
	.word	137036
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	136964
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	136753
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	136821
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	136894
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	136684
	.byte	4,2,35,60,9
	.byte	'CNT',0
	.word	136548
	.byte	4,2,35,64,9
	.byte	'CMP',0
	.word	136483
	.byte	4,2,35,68,9
	.byte	'reserved_48',0
	.word	143887
	.byte	56,2,35,72,0,34
	.word	150073
	.byte	21
	.byte	'Ifx_GTM_SPE',0,24,212,60,3
	.word	150300
	.byte	22
	.byte	'_Ifx_GTM_TBU',0,24,215,60,25,28,9
	.byte	'CHEN',0
	.word	137660
	.byte	4,2,35,0,9
	.byte	'CH0_CTRL',0
	.word	137310
	.byte	4,2,35,4,9
	.byte	'CH0_BASE',0
	.word	137240
	.byte	4,2,35,8,9
	.byte	'CH1_CTRL',0
	.word	137450
	.byte	4,2,35,12,9
	.byte	'CH1_BASE',0
	.word	137380
	.byte	4,2,35,16,9
	.byte	'CH2_CTRL',0
	.word	137590
	.byte	4,2,35,20,9
	.byte	'CH2_BASE',0
	.word	137520
	.byte	4,2,35,24,0,34
	.word	150326
	.byte	21
	.byte	'Ifx_GTM_TBU',0,24,224,60,3
	.word	150468
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	34
	.word	143896
	.byte	23,136,8
	.word	137
	.byte	24,135,8,0,22
	.byte	'_Ifx_GTM_TIM',0,24,227,60,25,128,16,9
	.byte	'CH0',0
	.word	150494
	.byte	120,2,35,0,9
	.byte	'IN_SRC',0
	.word	138928
	.byte	4,2,35,120,9
	.byte	'RST',0
	.word	138996
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	150499
	.byte	120,3,35,128,1,9
	.byte	'reserved_F8',0
	.word	142316
	.byte	8,3,35,248,1,9
	.byte	'CH2',0
	.word	150504
	.byte	120,3,35,128,2,9
	.byte	'reserved_178',0
	.word	142316
	.byte	8,3,35,248,2,9
	.byte	'CH3',0
	.word	150509
	.byte	120,3,35,128,3,9
	.byte	'reserved_1F8',0
	.word	142316
	.byte	8,3,35,248,3,9
	.byte	'CH4',0
	.word	150514
	.byte	120,3,35,128,4,9
	.byte	'reserved_278',0
	.word	142316
	.byte	8,3,35,248,4,9
	.byte	'CH5',0
	.word	150519
	.byte	120,3,35,128,5,9
	.byte	'reserved_2F8',0
	.word	142316
	.byte	8,3,35,248,5,9
	.byte	'CH6',0
	.word	150524
	.byte	120,3,35,128,6,9
	.byte	'reserved_378',0
	.word	142316
	.byte	8,3,35,248,6,9
	.byte	'CH7',0
	.word	150529
	.byte	120,3,35,128,7,9
	.byte	'reserved_3F8',0
	.word	150534
	.byte	136,8,3,35,248,7,0,34
	.word	150545
	.byte	21
	.byte	'Ifx_GTM_TIM',0,24,246,60,3
	.word	150867
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	34
	.word	144219
	.byte	23,144,8
	.word	137
	.byte	24,143,8,0,22
	.byte	'_Ifx_GTM_TOM',0,24,249,60,25,128,16,9
	.byte	'CH0',0
	.word	150893
	.byte	48,2,35,0,9
	.byte	'TGC0_GLB_CTRL',0
	.word	140137
	.byte	4,2,35,48,9
	.byte	'TGC0_ACT_TB',0
	.word	139834
	.byte	4,2,35,52,9
	.byte	'TGC0_FUPD_CTRL',0
	.word	140061
	.byte	4,2,35,56,9
	.byte	'TGC0_INT_TRIG',0
	.word	140212
	.byte	4,2,35,60,9
	.byte	'CH1',0
	.word	150898
	.byte	48,2,35,64,9
	.byte	'TGC0_ENDIS_CTRL',0
	.word	139907
	.byte	4,2,35,112,9
	.byte	'TGC0_ENDIS_STAT',0
	.word	139984
	.byte	4,2,35,116,9
	.byte	'TGC0_OUTEN_CTRL',0
	.word	140287
	.byte	4,2,35,120,9
	.byte	'TGC0_OUTEN_STAT',0
	.word	140364
	.byte	4,2,35,124,9
	.byte	'CH2',0
	.word	150903
	.byte	48,3,35,128,1,9
	.byte	'reserved_B0',0
	.word	141525
	.byte	16,3,35,176,1,9
	.byte	'CH3',0
	.word	150908
	.byte	48,3,35,192,1,9
	.byte	'reserved_F0',0
	.word	141525
	.byte	16,3,35,240,1,9
	.byte	'CH4',0
	.word	150913
	.byte	48,3,35,128,2,9
	.byte	'reserved_130',0
	.word	141525
	.byte	16,3,35,176,2,9
	.byte	'CH5',0
	.word	150918
	.byte	48,3,35,192,2,9
	.byte	'reserved_170',0
	.word	141525
	.byte	16,3,35,240,2,9
	.byte	'CH6',0
	.word	150923
	.byte	48,3,35,128,3,9
	.byte	'reserved_1B0',0
	.word	141525
	.byte	16,3,35,176,3,9
	.byte	'CH7',0
	.word	150928
	.byte	48,3,35,192,3,9
	.byte	'reserved_1F0',0
	.word	141525
	.byte	16,3,35,240,3,9
	.byte	'CH8',0
	.word	150933
	.byte	48,3,35,128,4,9
	.byte	'TGC1_GLB_CTRL',0
	.word	140744
	.byte	4,3,35,176,4,9
	.byte	'TGC1_ACT_TB',0
	.word	140441
	.byte	4,3,35,180,4,9
	.byte	'TGC1_FUPD_CTRL',0
	.word	140668
	.byte	4,3,35,184,4,9
	.byte	'TGC1_INT_TRIG',0
	.word	140819
	.byte	4,3,35,188,4,9
	.byte	'CH9',0
	.word	150938
	.byte	48,3,35,192,4,9
	.byte	'TGC1_ENDIS_CTRL',0
	.word	140514
	.byte	4,3,35,240,4,9
	.byte	'TGC1_ENDIS_STAT',0
	.word	140591
	.byte	4,3,35,244,4,9
	.byte	'TGC1_OUTEN_CTRL',0
	.word	140894
	.byte	4,3,35,248,4,9
	.byte	'TGC1_OUTEN_STAT',0
	.word	140971
	.byte	4,3,35,252,4,9
	.byte	'CH10',0
	.word	150943
	.byte	48,3,35,128,5,9
	.byte	'reserved_2B0',0
	.word	141525
	.byte	16,3,35,176,5,9
	.byte	'CH11',0
	.word	150948
	.byte	48,3,35,192,5,9
	.byte	'reserved_2F0',0
	.word	141525
	.byte	16,3,35,240,5,9
	.byte	'CH12',0
	.word	150953
	.byte	48,3,35,128,6,9
	.byte	'reserved_330',0
	.word	141525
	.byte	16,3,35,176,6,9
	.byte	'CH13',0
	.word	150958
	.byte	48,3,35,192,6,9
	.byte	'reserved_370',0
	.word	141525
	.byte	16,3,35,240,6,9
	.byte	'CH14',0
	.word	150963
	.byte	48,3,35,128,7,9
	.byte	'reserved_3B0',0
	.word	141525
	.byte	16,3,35,176,7,9
	.byte	'CH15',0
	.word	150968
	.byte	48,3,35,192,7,9
	.byte	'reserved_3F0',0
	.word	150973
	.byte	144,8,3,35,240,7,0,34
	.word	150984
	.byte	21
	.byte	'Ifx_GTM_TOM',0,24,167,61,3
	.word	151898
	.byte	23,20
	.word	137
	.byte	24,19,0,8,4,192,4,20,64,9
	.byte	'CTRL',0
	.word	139265
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	139629
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	139697
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	139061
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	139129
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	139197
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	139765
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	139554
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	139334
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	139405
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	139481
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	151924
	.byte	20,2,35,44,0,34
	.word	151933
	.byte	21
	.byte	'Ifx_GTM_TOM_CH_TYPE',0,4,217,4,4
	.word	152129
	.byte	23,48
	.word	137
	.byte	24,47,0,23,176,3
	.word	137
	.byte	24,175,3,0,8,4,219,4,20,128,4,9
	.byte	'GLB_CTRL',0
	.word	140137
	.byte	4,2,35,0,9
	.byte	'ACT_TB',0
	.word	139834
	.byte	4,2,35,4,9
	.byte	'FUPD_CTRL',0
	.word	140061
	.byte	4,2,35,8,9
	.byte	'INT_TRIG',0
	.word	140212
	.byte	4,2,35,12,9
	.byte	'reserved_tgc0',0
	.word	152163
	.byte	48,2,35,16,9
	.byte	'ENDIS_CTRL',0
	.word	139907
	.byte	4,2,35,64,9
	.byte	'ENDIS_STAT',0
	.word	139984
	.byte	4,2,35,68,9
	.byte	'OUTEN_CTRL',0
	.word	140287
	.byte	4,2,35,72,9
	.byte	'OUTEN_STAT',0
	.word	140364
	.byte	4,2,35,76,9
	.byte	'reserved_tgc1',0
	.word	152172
	.byte	176,3,2,35,80,0,34
	.word	152183
	.byte	21
	.byte	'Ifx_GTM_TOM_TGC_TYPE',0,4,239,4,5
	.word	152389
	.byte	23,128,8
	.word	152183
	.byte	24,1,0,34
	.word	152424
	.byte	23,208,7
	.word	137
	.byte	24,207,7,0,8,4,241,4,20,128,16,9
	.byte	'reserved_tom0',0
	.word	152163
	.byte	48,2,35,0,9
	.byte	'TGC',0
	.word	152434
	.byte	128,8,2,35,48,9
	.byte	'reserved_tgc2',0
	.word	152439
	.byte	208,7,3,35,176,8,0,34
	.word	152450
	.byte	21
	.byte	'Ifx_GTM_TOM_TGCx',0,4,246,4,5
	.word	152520
	.byte	23,128,8
	.word	151933
	.byte	24,15,0,34
	.word	152551
	.byte	8,4,249,4,20,128,16,9
	.byte	'CH',0
	.word	152561
	.byte	128,8,2,35,0,9
	.byte	'reserved_tom1',0
	.word	11961
	.byte	128,8,3,35,128,8,0,34
	.word	152566
	.byte	21
	.byte	'Ifx_GTM_TOM_CHx',0,4,253,4,5
	.word	152612
	.byte	34
	.word	148822
	.byte	23,128,124
	.word	137
	.byte	24,255,123,0,8,4,142,5,20,128,128,1,9
	.byte	'FIFO',0
	.word	152642
	.byte	128,4,2,35,0,9
	.byte	'reserved_Fifo1',0
	.word	152647
	.byte	128,124,3,35,128,4,0,34
	.word	152658
	.byte	21
	.byte	'Ifx_GTM_FIFOx_MOD',0,4,146,5,5
	.word	152708
	.byte	34
	.word	148714
	.byte	23,188,127
	.word	137
	.byte	24,187,127,0,8,4,157,5,20,128,128,1,9
	.byte	'F2A',0
	.word	152740
	.byte	68,2,35,0,9
	.byte	'reserved_F2A1',0
	.word	152745
	.byte	188,127,2,35,68,0,34
	.word	152756
	.byte	21
	.byte	'Ifx_GTM_F2Ax_MOD',0,4,161,5,5
	.word	152802
	.byte	34
	.word	144475
	.byte	23,128,127
	.word	137
	.byte	24,255,126,0,8,4,173,5,20,128,128,1,9
	.byte	'AFD',0
	.word	152833
	.byte	128,1,2,35,0,9
	.byte	'reserved_AFD1',0
	.word	152838
	.byte	128,127,3,35,128,1,0,34
	.word	152849
	.byte	21
	.byte	'Ifx_GTM_AFDx_MOD',0,4,177,5,5
	.word	152897
	.byte	23,80
	.word	137
	.byte	24,79,0,8,4,192,5,20,128,1,9
	.byte	'RDADDR',0
	.word	119398
	.byte	4,2,35,0,9
	.byte	'CTRL',0
	.word	119029
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	119750
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	119819
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	118822
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	118891
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	118960
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	119888
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	119322
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	119099
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	119171
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	119248
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	152928
	.byte	80,2,35,48,0,34
	.word	152937
	.byte	21
	.byte	'Ifx_GTM_ATOM_CH_TYPE',0,4,219,5,4
	.word	153150
	.byte	23,128,8
	.word	152937
	.byte	24,7,0,34
	.word	153185
	.byte	8,4,223,5,20,128,16,9
	.byte	'CH',0
	.word	153195
	.byte	128,8,2,35,0,9
	.byte	'reserved_chx',0
	.word	11961
	.byte	128,8,3,35,128,8,0,34
	.word	153200
	.byte	21
	.byte	'Ifx_GTM_ATOM_CHx',0,4,227,5,4
	.word	153245
	.byte	23,160,15
	.word	137
	.byte	24,159,15,0,8,4,230,5,20,128,16,9
	.byte	'reserved_30',0
	.word	4959
	.byte	64,2,35,0,9
	.byte	'AGC_GLB_CTRL',0
	.word	118518
	.byte	4,2,35,64,9
	.byte	'AGC_ENDIS_CTRL',0
	.word	118288
	.byte	4,2,35,68,9
	.byte	'AGC_ENDIS_STAT',0
	.word	118365
	.byte	4,2,35,72,9
	.byte	'AGC_ACT_TB',0
	.word	118215
	.byte	4,2,35,76,9
	.byte	'AGC_OUTEN_CTRL',0
	.word	118668
	.byte	4,2,35,80,9
	.byte	'AGC_OUTEN_STAT',0
	.word	118745
	.byte	4,2,35,84,9
	.byte	'AGC_FUPD_CTRL',0
	.word	118442
	.byte	4,2,35,88,9
	.byte	'AGC_INT_TRIG',0
	.word	118593
	.byte	4,2,35,92,9
	.byte	'reserved_chx',0
	.word	153276
	.byte	160,15,2,35,96,0,34
	.word	153287
	.byte	21
	.byte	'Ifx_GTM_ATOM_AGCx',0,4,249,5,4
	.word	153522
	.byte	8,4,141,6,20,128,1,9
	.byte	'CH_GPR0',0
	.word	138357
	.byte	4,2,35,0,9
	.byte	'CH_GPR1',0
	.word	138426
	.byte	4,2,35,4,9
	.byte	'CH_CNT',0
	.word	137798
	.byte	4,2,35,8,9
	.byte	'CH_ECNT',0
	.word	138004
	.byte	4,2,35,12,9
	.byte	'CH_CNTS',0
	.word	137866
	.byte	4,2,35,16,9
	.byte	'CH_TDUC',0
	.word	138790
	.byte	4,2,35,20,9
	.byte	'CH_TDUV',0
	.word	138859
	.byte	4,2,35,24,9
	.byte	'CH_FLT_RE',0
	.word	138286
	.byte	4,2,35,28,9
	.byte	'CH_FLT_FE',0
	.word	138215
	.byte	4,2,35,32,9
	.byte	'CH_CTRL',0
	.word	137935
	.byte	4,2,35,36,9
	.byte	'CH_ECTRL',0
	.word	138073
	.byte	4,2,35,40,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	138715
	.byte	4,2,35,44,9
	.byte	'CH_IRQ_EN',0
	.word	138495
	.byte	4,2,35,48,9
	.byte	'CH_IRQ_FORCINT',0
	.word	138566
	.byte	4,2,35,52,9
	.byte	'CH_IRQ_MODE',0
	.word	138642
	.byte	4,2,35,56,9
	.byte	'CH_EIRQ_EN',0
	.word	138143
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	4959
	.byte	64,2,35,64,0,34
	.word	153554
	.byte	21
	.byte	'Ifx_GTM_TIM_CH_TYPE',0,4,177,6,4
	.word	153881
	.byte	8,4,179,6,20,8,9
	.byte	'IN_SRC',0
	.word	138928
	.byte	4,2,35,0,9
	.byte	'RST',0
	.word	138996
	.byte	4,2,35,4,0,34
	.word	153915
	.byte	21
	.byte	'Ifx_GTM_TIM_IN_SRC_RESET_TYPE',0,4,184,6,4
	.word	153951
	.byte	23,128,8
	.word	153554
	.byte	24,7,0,34
	.word	153995
	.byte	8,4,186,6,21,128,16,9
	.byte	'CH',0
	.word	154005
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	11961
	.byte	128,8,3,35,128,8,0,34
	.word	154010
	.byte	21
	.byte	'Ifx_GTM_TIM_CHx',0,4,190,6,4
	.word	154056
	.byte	23,120
	.word	137
	.byte	24,119,0,34
	.word	153915
	.byte	23,128,15
	.word	137
	.byte	24,255,14,0,8,4,192,6,20,128,16,9
	.byte	'reserved_tim2',0
	.word	154086
	.byte	120,2,35,0,9
	.byte	'IN_SRC_RESET',0
	.word	154095
	.byte	8,2,35,120,9
	.byte	'reserved_tim3',0
	.word	154100
	.byte	128,15,3,35,128,1,0,34
	.word	154111
	.byte	21
	.byte	'Ifx_GTM_TIM_IN_SRC_RSTx',0,4,197,6,4
	.word	154189
	.byte	23,24
	.word	137
	.byte	24,23,0,23,40
	.word	137
	.byte	24,39,0,8,4,214,6,20,128,1,9
	.byte	'CH_R0',0
	.word	134436
	.byte	4,2,35,0,9
	.byte	'CH_R1',0
	.word	134503
	.byte	4,2,35,4,9
	.byte	'CH_R2',0
	.word	134570
	.byte	4,2,35,8,9
	.byte	'CH_R3',0
	.word	134637
	.byte	4,2,35,12,9
	.byte	'CH_R4',0
	.word	134704
	.byte	4,2,35,16,9
	.byte	'CH_R5',0
	.word	134771
	.byte	4,2,35,20,9
	.byte	'CH_R6',0
	.word	134838
	.byte	4,2,35,24,9
	.byte	'CH_R7',0
	.word	134905
	.byte	4,2,35,28,9
	.byte	'CH_CTRL',0
	.word	133933
	.byte	4,2,35,32,9
	.byte	'CH_ACB',0
	.word	133865
	.byte	4,2,35,36,9
	.byte	'reserved_A8',0
	.word	154227
	.byte	24,2,35,40,9
	.byte	'CH_PC',0
	.word	134369
	.byte	4,2,35,64,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	134294
	.byte	4,2,35,68,9
	.byte	'CH_IRQ_EN',0
	.word	134074
	.byte	4,2,35,72,9
	.byte	'CH_IRQ_FORCINT',0
	.word	134145
	.byte	4,2,35,76,9
	.byte	'CH_IRQ_MODE',0
	.word	134221
	.byte	4,2,35,80,9
	.byte	'CH_EIRQ_EN',0
	.word	134002
	.byte	4,2,35,84,9
	.byte	'reserved_D8',0
	.word	154236
	.byte	40,2,35,88,0,34
	.word	154245
	.byte	21
	.byte	'Ifx_GTM_MCS_CH_TYPE',0,4,250,6,4
	.word	154570
	.byte	23,128,8
	.word	154245
	.byte	24,7,0,34
	.word	154604
	.byte	23,128,24
	.word	137
	.byte	24,255,23,0,8,4,252,6,20,128,32,9
	.byte	'CH',0
	.word	154614
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	154619
	.byte	128,24,3,35,128,8,0,34
	.word	154630
	.byte	21
	.byte	'Ifx_GTM_MCS_CHx',0,4,128,7,4
	.word	154676
	.byte	23,68
	.word	137
	.byte	24,67,0,23,128,31
	.word	137
	.byte	24,255,30,0,8,4,130,7,20,128,32,9
	.byte	'reserved_tim4',0
	.word	154236
	.byte	40,2,35,0,9
	.byte	'CTRG',0
	.word	133725
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	133795
	.byte	4,2,35,44,9
	.byte	'reserved_tim5',0
	.word	154706
	.byte	68,2,35,48,9
	.byte	'CTRL',0
	.word	134972
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	135103
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	135038
	.byte	4,2,35,124,9
	.byte	'reserved_tim6',0
	.word	154715
	.byte	128,31,3,35,128,1,0,34
	.word	154726
	.byte	21
	.byte	'Ifx_GTM_MCS_TGR_MOD_CTRLx',0,4,143,7,4
	.word	154873
	.byte	8,4,162,7,11,4,35
	.byte	'EN_DEST0',0,1
	.word	137
	.byte	1,7,2,35,0,35
	.byte	'EN_DEST1',0,1
	.word	137
	.byte	1,6,2,35,0,35
	.byte	'EN_DEST2',0,1
	.word	137
	.byte	1,5,2,35,0,35
	.byte	'EN_DEST3',0,1
	.word	137
	.byte	1,4,2,35,0,35
	.byte	'EN_DEST4',0,1
	.word	137
	.byte	1,3,2,35,0,35
	.byte	'EN_DEST5',0,1
	.word	137
	.byte	1,2,2,35,0,35
	.byte	'EN_DEST6',0,1
	.word	137
	.byte	1,1,2,35,0,35
	.byte	'EN_DEST7',0,1
	.word	137
	.byte	1,0,2,35,0,35
	.byte	'EN_DEST8',0,1
	.word	137
	.byte	1,7,2,35,1,35
	.byte	'EN_DEST9',0,1
	.word	137
	.byte	1,6,2,35,1,35
	.byte	'EN_DEST10',0,1
	.word	137
	.byte	1,5,2,35,1,35
	.byte	'EN_DEST11',0,1
	.word	137
	.byte	1,4,2,35,1,35
	.byte	'EN_DEST12',0,1
	.word	137
	.byte	1,3,2,35,1,35
	.byte	'EN_DEST13',0,1
	.word	137
	.byte	1,2,2,35,1,35
	.byte	'EN_DEST14',0,1
	.word	137
	.byte	1,1,2,35,1,35
	.byte	'EN_DEST15',0,1
	.word	137
	.byte	1,0,2,35,1,35
	.byte	'EN_DEST16',0,1
	.word	137
	.byte	1,7,2,35,2,35
	.byte	'EN_DEST17',0,1
	.word	137
	.byte	1,6,2,35,2,35
	.byte	'EN_DEST18',0,1
	.word	137
	.byte	1,5,2,35,2,35
	.byte	'EN_DEST19',0,1
	.word	137
	.byte	1,4,2,35,2,35
	.byte	'EN_DEST20',0,1
	.word	137
	.byte	1,3,2,35,2,35
	.byte	'EN_DEST21',0,1
	.word	137
	.byte	1,2,2,35,2,35
	.byte	'EN_TRASHBIN',0,1
	.word	137
	.byte	1,1,2,35,2,35
	.byte	'reserved_23',0,2
	.word	467
	.byte	9,0,2,35,2,0,21
	.byte	'Ifx_GTM_BRC_SRC_DEST_Bits',0,4,211,7,5
	.word	154913
	.byte	31,4,214,7,11,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	154913
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC_DEST',0,4,221,7,5
	.word	155453
	.byte	8,4,224,7,11,4,35
	.byte	'ADDR',0,2
	.word	467
	.byte	9,7,2,35,0,35
	.byte	'reserved_9',0,1
	.word	137
	.byte	3,4,2,35,1,35
	.byte	'BRC_MODE',0,1
	.word	137
	.byte	1,3,2,35,1,35
	.byte	'reserved_13',0,4
	.word	806
	.byte	19,0,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC_ADDR_Bits',0,4,231,7,5
	.word	155523
	.byte	31,4,233,7,11,4,9
	.byte	'U',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	10568
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	155523
	.byte	4,2,35,0,0,21
	.byte	'Ifx_GTM_BRC_SRC_ADDR',0,4,240,7,5
	.word	155646
	.byte	8,4,242,7,20,8,9
	.byte	'SRC_ADDR',0
	.word	155646
	.byte	4,2,35,0,9
	.byte	'SRC_DEST',0
	.word	155453
	.byte	4,2,35,4,0,34
	.word	155716
	.byte	21
	.byte	'Ifx_GTM_BRC_SRC_ADDRx',0,4,247,7,4
	.word	155759
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	34
	.word	155716
	.byte	8,4,250,7,20,120,9
	.byte	'SRC0',0
	.word	155795
	.byte	8,2,35,0,9
	.byte	'SRC1',0
	.word	155800
	.byte	8,2,35,8,9
	.byte	'SRC2',0
	.word	155805
	.byte	8,2,35,16,9
	.byte	'SRC3',0
	.word	155810
	.byte	8,2,35,24,9
	.byte	'SRC4',0
	.word	155815
	.byte	8,2,35,32,9
	.byte	'SRC5',0
	.word	155820
	.byte	8,2,35,40,9
	.byte	'SRC6',0
	.word	155825
	.byte	8,2,35,48,9
	.byte	'SRC7',0
	.word	155830
	.byte	8,2,35,56,9
	.byte	'SRC8',0
	.word	155835
	.byte	8,2,35,64,9
	.byte	'SRC9',0
	.word	155840
	.byte	8,2,35,72,9
	.byte	'SRC10',0
	.word	155845
	.byte	8,2,35,80,9
	.byte	'SRC11',0
	.word	155850
	.byte	8,2,35,88,9
	.byte	'IRQ_NOTIFY',0
	.word	120238
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	120027
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	120095
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	120168
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	120310
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	119958
	.byte	4,2,35,116,0,34
	.word	155855
	.byte	21
	.byte	'Ifx_GTM_BRC_SRCx',0,4,148,8,4
	.word	156137
	.byte	12,4,197,8,11,4,13
	.byte	'GTM_CONFIGURABLE_CLK0',0,0,13
	.byte	'GTM_CONFIGURABLE_CLK1',0,1,13
	.byte	'GTM_CONFIGURABLE_CLK2',0,2,13
	.byte	'GTM_CONFIGURABLE_CLK3',0,3,13
	.byte	'GTM_CONFIGURABLE_CLK4',0,4,13
	.byte	'GTM_CONFIGURABLE_CLK5',0,5,13
	.byte	'GTM_CONFIGURABLE_CLK6',0,6,13
	.byte	'GTM_CONFIGURABLE_CLK7',0,7,0,21
	.byte	'Gtm_ConfigurableClockType',0,4,207,8,4
	.word	156168
	.byte	12,4,211,8,11,4,13
	.byte	'GTM_LOW',0,0,13
	.byte	'GTM_HIGH',0,1,0,21
	.byte	'Gtm_OutputLevelType',0,4,215,8,4
	.word	156402
	.byte	12,4,218,8,11,4,13
	.byte	'GTM_ARU_WRITE_FAILED',0,0,13
	.byte	'GTM_ARU_WRITE_SUCCESSFUL',0,1,13
	.byte	'GTM_ARU_RD_ISSUED_BUT_NOT_CMPLT',0,2,13
	.byte	'GTM_ARU_RD_ISSUED_AND_COMPLETED',0,3,13
	.byte	'GTM_ARU_READ_NOT_ISSUED',0,4,13
	.byte	'GTM_ARU_READ_FAILED',0,5,13
	.byte	'GTM_ARU_READ_SUCCESSFUL',0,6,13
	.byte	'GTM_INCORRECT_REQUEST',0,7,0,21
	.byte	'Gtm_AruReqStatusType',0,4,228,8,4
	.word	156459
	.byte	12,4,230,8,11,4,13
	.byte	'TOM_GLB_CTRL',0,0,13
	.byte	'TOM_ACT_TB',0,1,13
	.byte	'TOM_FUPD_CTRL',0,2,13
	.byte	'TOM_INT_TRIG',0,3,13
	.byte	'TOM_RESERVED_0',0,4,13
	.byte	'TOM_RESERVED_1',0,5,13
	.byte	'TOM_RESERVED_2',0,6,13
	.byte	'TOM_RESERVED_3',0,7,13
	.byte	'TOM_RESERVED_4',0,8,13
	.byte	'TOM_RESERVED_5',0,9,13
	.byte	'TOM_RESERVED_6',0,10,13
	.byte	'TOM_RESERVED_7',0,11,13
	.byte	'TOM_RESERVED_8',0,12,13
	.byte	'TOM_RESERVED_9',0,13,13
	.byte	'TOM_RESERVED_10',0,14,13
	.byte	'TOM_RESERVED_11',0,15,13
	.byte	'TOM_ENDIS_CTRL',0,16,13
	.byte	'TOM_ENDIS_STAT',0,17,13
	.byte	'TOM_OUTEN_CTRL',0,18,13
	.byte	'TOM_OUTEN_STAT',0,19,0,21
	.byte	'Gtm_TomTimerRegistersType',0,4,252,8,4
	.word	156712
	.byte	12,4,255,8,11,4,13
	.byte	'ATOM_GLB_CTRL',0,0,13
	.byte	'ATOM_ENDIS_CTRL',0,1,13
	.byte	'ATOM_ENDIS_STAT',0,2,13
	.byte	'ATOM_ACT_TB',0,3,13
	.byte	'ATOM_OUTEN_CTRL',0,4,13
	.byte	'ATOM_OUTEN_STAT',0,5,13
	.byte	'ATOM_FUPD_CTRL',0,6,13
	.byte	'ATOM_INT_TRIG',0,7,0,21
	.byte	'Gtm_AtomTimerRegistersType',0,4,137,9,4
	.word	157087
	.byte	8,4,141,9,11,8,9
	.byte	'FltRisingEdge',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'FltFallingEdge',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_TimFilterType',0,4,145,9,4
	.word	157265
	.byte	21
	.byte	'Gtm_TbuChCtrlType',0,4,150,9,32
	.word	137310
	.byte	21
	.byte	'Gtm_TbuChBaseType',0,4,151,9,32
	.word	137240
	.byte	8,4,153,9,11,8,9
	.byte	'CH_CTRL',0
	.word	137310
	.byte	4,2,35,0,9
	.byte	'CH_BASE',0
	.word	137240
	.byte	4,2,35,4,0,21
	.byte	'Gtm_TbuChType',0,4,157,9,4
	.word	157400
	.byte	8,4,171,9,9,8,9
	.byte	'DpllStatus',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'IntStatus',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_DpllStatType',0,4,175,9,2
	.word	157464
	.byte	23,16
	.word	806
	.byte	24,3,0,23,60
	.word	806
	.byte	24,14,0,8,4,178,9,9,76,9
	.byte	'TimInSel',0
	.word	157536
	.byte	16,2,35,0,9
	.byte	'ToutSel',0
	.word	157545
	.byte	60,2,35,16,0,21
	.byte	'Gtm_PortConfigType',0,4,182,9,2
	.word	157554
	.byte	8,4,186,9,9,8,9
	.byte	'TimRisingEdgeFilter',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'TimFallingEdgeFilter',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_TimFltType',0,4,191,9,2
	.word	157624
	.byte	10
	.word	157624
	.byte	3
	.word	157714
	.byte	8,4,195,9,11,28,9
	.byte	'TimUsage',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'TimIrqEn',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'TimErrIrqEn',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'TimAuxInSrcSel',0
	.word	137
	.byte	1,2,35,3,9
	.byte	'TimExtCapSrc',0
	.word	137
	.byte	1,2,35,4,9
	.byte	'TimCtrlValue',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'GtmTimFltPtr',0
	.word	157719
	.byte	4,2,35,12,9
	.byte	'TimCntsValue',0
	.word	806
	.byte	4,2,35,16,9
	.byte	'TimTduValue',0
	.word	806
	.byte	4,2,35,20,9
	.byte	'TimInSrcSel',0
	.word	806
	.byte	4,2,35,24,0,21
	.byte	'Gtm_TimConfigType',0,4,210,9,4
	.word	157724
	.byte	23,8
	.word	137
	.byte	24,7,0,23,32
	.word	157969
	.byte	24,3,0,23,16
	.word	137
	.byte	24,15,0,23,48
	.word	157987
	.byte	24,2,0,23,40
	.word	157969
	.byte	24,4,0,8,4,213,9,11,120,9
	.byte	'Gtm_TimUsage',0
	.word	157978
	.byte	32,2,35,0,9
	.byte	'Gtm_TomUsage',0
	.word	157996
	.byte	48,2,35,32,9
	.byte	'Gtm_AtomUsage',0
	.word	158005
	.byte	40,2,35,80,0,21
	.byte	'Gtm_ModUsageConfigType',0,4,225,9,4
	.word	158014
	.byte	8,4,228,9,11,16,9
	.byte	'GtmAtomUpdateEn',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmAtomEndisCtrl',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'GtmAtomEndisStat',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'GtmAtomOutenCtrl',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'GtmAtomOutenStat',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'GtmAtomFupd',0
	.word	806
	.byte	4,2,35,12,0,21
	.byte	'Gtm_AtomAgcConfigGroupType',0,4,236,9,4
	.word	158120
	.byte	10
	.word	158120
	.byte	3
	.word	158313
	.byte	8,4,240,9,9,12,9
	.byte	'GtmAtomIntTrig',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmAtomActTb',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmAtomAgcConfigGrpPtr',0
	.word	158318
	.byte	4,2,35,8,0,21
	.byte	'Gtm_AtomAgcConfigType',0,4,247,9,2
	.word	158323
	.byte	8,4,250,9,9,28,9
	.byte	'GtmAtomIrqEn',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmAtomRdAddrValue',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmAtomCn0Value',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'GtmAtomCm0Value',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'GtmAtomCm1Value',0
	.word	806
	.byte	4,2,35,16,9
	.byte	'GtmAtomSr0Value',0
	.word	806
	.byte	4,2,35,20,9
	.byte	'GtmAtomSr1Value',0
	.word	806
	.byte	4,2,35,24,0,21
	.byte	'Gtm_AtomChannelConfigType',0,4,131,10,2
	.word	158439
	.byte	10
	.word	158439
	.byte	3
	.word	158656
	.byte	8,4,134,10,9,12,9
	.byte	'GtmAtomUsage',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'GtmAtomIrqMode',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'GtmAtomControlWord',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmAtomChannelCfgPtr',0
	.word	158661
	.byte	4,2,35,8,0,21
	.byte	'Gtm_AtomConfigType',0,4,141,10,2
	.word	158666
	.byte	8,4,154,10,9,16,9
	.byte	'GtmTomUpdateEn',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmTomEndisCtrl',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'GtmTomEndisStat',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'GtmTomOutenCtrl',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'GtmTomOutenStat',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'GtmTomFupd',0
	.word	806
	.byte	4,2,35,12,0,21
	.byte	'Gtm_TomTgcConfigGroupType',0,4,162,10,2
	.word	158805
	.byte	10
	.word	158805
	.byte	3
	.word	158991
	.byte	8,4,166,10,9,12,9
	.byte	'GtmTomIntTrig',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmTomActTb',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmTomTgcConfigGrpPtr',0
	.word	158996
	.byte	4,2,35,8,0,21
	.byte	'Gtm_TomTgcConfigType',0,4,173,10,2
	.word	159001
	.byte	8,4,176,10,9,12,9
	.byte	'GtmTomIrqEn',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'GtmTomCn0Value',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'GtmTomCm0Value',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'GtmTomCm1Value',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'GtmTomSr0Value',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'GtmTomSr1Value',0
	.word	467
	.byte	2,2,35,10,0,21
	.byte	'Gtm_TomChannelConfigType',0,4,184,10,2
	.word	159113
	.byte	10
	.word	159113
	.byte	3
	.word	159295
	.byte	8,4,188,10,9,12,9
	.byte	'TomUsage',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'GtmTomIrqMode',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'GtmTomControlWord',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmTomChannelCfgPtr',0
	.word	159300
	.byte	4,2,35,8,0,21
	.byte	'Gtm_TomConfigType',0,4,196,10,2
	.word	159305
	.byte	8,4,200,10,9,8,9
	.byte	'CmuEclkNum',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'CmuEclkDen',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_ExtClkType',0,4,204,10,2
	.word	159436
	.byte	23,32
	.word	806
	.byte	24,7,0,23,24
	.word	159436
	.byte	24,2,0,8,4,207,10,9,64,9
	.byte	'GtmClockEnable',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'GtmCmuClkCnt',0
	.word	159507
	.byte	32,2,35,4,9
	.byte	'GtmFxdClkControl',0
	.word	806
	.byte	4,2,35,36,9
	.byte	'GtmEclk',0
	.word	159516
	.byte	24,2,35,40,0,21
	.byte	'Gtm_ClockSettingType',0,4,213,10,2
	.word	159525
	.byte	8,4,217,10,9,4,9
	.byte	'GtmCtrlValue',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'GtmIrqEnable',0
	.word	467
	.byte	2,2,35,2,0,21
	.byte	'Gtm_GeneralConfigType',0,4,222,10,2
	.word	159651
	.byte	8,4,226,10,9,8,9
	.byte	'TbuChannelCtrl',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'TbuBaseValue',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_TbuConfigType',0,4,230,10,2
	.word	159733
	.byte	8,4,234,10,9,8,9
	.byte	'BrcChannelCtrl',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'BrcDestination',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_BrcChannelType',0,4,238,10,2
	.word	159813
	.byte	10
	.word	159813
	.byte	3
	.word	159896
	.byte	8,4,242,10,9,8,9
	.byte	'BrcIrqEnable',0
	.word	467
	.byte	2,2,35,0,9
	.byte	'BrcErrIrqEnable',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'BrcChannelPtr',0
	.word	159901
	.byte	4,2,35,4,0,21
	.byte	'Gtm_BrcConfigType',0,4,248,10,2
	.word	159906
	.byte	8,4,252,10,9,12,9
	.byte	'FifoCtrl',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'FifoIrqEnable',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'FifoErrIrqEnable',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'FifoStartAddress',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'FifoEndAddress',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'FifoUpperWatermark',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'FifoLowerWatermark',0
	.word	467
	.byte	2,2,35,10,0,21
	.byte	'Gtm_FifoConfigType',0,4,139,11,2
	.word	160010
	.byte	8,4,143,11,9,4,9
	.byte	'F2aChannelConfig',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'F2aAruAddress',0
	.word	467
	.byte	2,2,35,2,0,21
	.byte	'Gtm_F2aConfigType',0,4,147,11,2
	.word	160218
	.byte	8,4,151,11,9,18,9
	.byte	'McsControl',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'McsChannelConfig',0
	.word	157969
	.byte	8,2,35,1,9
	.byte	'McsErrIrqEnable',0
	.word	157969
	.byte	8,2,35,9,0,21
	.byte	'Gtm_McsConfigType',0,4,160,11,2
	.word	160301
	.byte	23,48
	.word	467
	.byte	24,23,0,8,4,164,11,9,96,9
	.byte	'DpllAps1c3',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'DpllNtiCnt',0
	.word	467
	.byte	2,2,35,2,9
	.byte	'DpllApt2c',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'DpllCtrl2',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'DpllCtrl3',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'DpllCtrl4',0
	.word	467
	.byte	2,2,35,10,9
	.byte	'DpllPmtr',0
	.word	160406
	.byte	48,2,35,12,9
	.byte	'DpllCtrl0',0
	.word	806
	.byte	4,2,35,60,9
	.byte	'DpllCtrl1',0
	.word	806
	.byte	4,2,35,64,9
	.byte	'DpllApt',0
	.word	806
	.byte	4,2,35,68,9
	.byte	'DpllAps',0
	.word	806
	.byte	4,2,35,72,9
	.byte	'DpllAssort0',0
	.word	806
	.byte	4,2,35,76,9
	.byte	'DpllIrqEnable',0
	.word	806
	.byte	4,2,35,80,9
	.byte	'DpllErrIntEnable',0
	.word	806
	.byte	4,2,35,84,9
	.byte	'DpllAddInLoad1',0
	.word	806
	.byte	4,2,35,88,9
	.byte	'DpllAddInLoad2',0
	.word	806
	.byte	4,2,35,92,0,21
	.byte	'Gtm_DpllConfigType',0,4,188,11,2
	.word	160415
	.byte	23,16
	.word	467
	.byte	24,7,0,8,4,192,11,9,36,9
	.byte	'SpeIrq',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'SpeErrIrq',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'SpeOutput',0
	.word	160774
	.byte	16,2,35,2,9
	.byte	'SpeCtrlStat',0
	.word	806
	.byte	4,2,35,20,9
	.byte	'SpePattern',0
	.word	806
	.byte	4,2,35,24,9
	.byte	'SpeRevCntr',0
	.word	806
	.byte	4,2,35,28,9
	.byte	'SpeRevCmp',0
	.word	806
	.byte	4,2,35,32,0,21
	.byte	'Gtm_SpeConfigType',0,4,205,11,2
	.word	160783
	.byte	8,4,208,11,9,12,9
	.byte	'CmpEnable',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'CmpIntEnable',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'CmpErrIntEnable',0
	.word	806
	.byte	4,2,35,8,0,21
	.byte	'Gtm_CmpConfigType',0,4,215,11,2
	.word	160951
	.byte	8,4,220,11,9,16,9
	.byte	'MscConnection',0
	.word	157536
	.byte	16,2,35,0,0,21
	.byte	'Gtm_MscSetType',0,4,223,11,2
	.word	161051
	.byte	8,4,226,11,9,8,9
	.byte	'MscLowControl',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'MscHighControl',0
	.word	806
	.byte	4,2,35,4,0,21
	.byte	'Gtm_MscInputCtrlType',0,4,230,11,2
	.word	161105
	.byte	10
	.word	161051
	.byte	3
	.word	161189
	.byte	10
	.word	161105
	.byte	3
	.word	161199
	.byte	8,4,233,11,9,8,9
	.byte	'MscSets',0
	.word	161194
	.byte	4,2,35,0,9
	.byte	'MscInputCtrlPtr',0
	.word	161204
	.byte	4,2,35,4,0,21
	.byte	'Gtm_MscConnectionsType',0,4,237,11,2
	.word	161209
	.byte	8,4,241,11,9,20,9
	.byte	'DsadcInsel0',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'DsadcInsel1',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'DsadcInsel2',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'DsadcOutsel00',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'DsadcOutsel10',0
	.word	806
	.byte	4,2,35,16,0,21
	.byte	'Gtm_DsadcConnectionsType',0,4,248,11,2
	.word	161290
	.byte	23,8
	.word	806
	.byte	24,1,0,23,4
	.word	806
	.byte	24,0,0,10
	.word	157724
	.byte	3
	.word	161458
	.byte	10
	.word	159001
	.byte	3
	.word	161468
	.byte	23,12
	.word	806
	.byte	24,2,0,10
	.word	159305
	.byte	3
	.word	161487
	.byte	10
	.word	158323
	.byte	3
	.word	161497
	.byte	10
	.word	158666
	.byte	3
	.word	161507
	.byte	10
	.word	158014
	.byte	3
	.word	161517
	.byte	10
	.word	159651
	.byte	3
	.word	161527
	.byte	10
	.word	159733
	.byte	3
	.word	161537
	.byte	10
	.word	159906
	.byte	3
	.word	161547
	.byte	10
	.word	160010
	.byte	3
	.word	161557
	.byte	10
	.word	161562
	.byte	3
	.word	161567
	.byte	10
	.word	160218
	.byte	3
	.word	161577
	.byte	10
	.word	160301
	.byte	3
	.word	161587
	.byte	10
	.word	160415
	.byte	3
	.word	161597
	.byte	10
	.word	160783
	.byte	3
	.word	161607
	.byte	23,8
	.word	161612
	.byte	24,1,0,10
	.word	160951
	.byte	3
	.word	161626
	.byte	10
	.word	161209
	.byte	3
	.word	161636
	.byte	10
	.word	161290
	.byte	3
	.word	161646
	.byte	10
	.word	137
	.byte	3
	.word	161656
	.byte	8,4,251,11,9,172,1,9
	.byte	'GtmAruConfig',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'GtmMcfgConfig',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'GtmModuleSleepEnable',0
	.word	137
	.byte	1,2,35,2,9
	.byte	'GtmGclkNum',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'GtmGclkDen',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'GtmAccessEnable0',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'GtmAccessEnable1',0
	.word	806
	.byte	4,2,35,16,9
	.byte	'GtmTimModuleUsage',0
	.word	161440
	.byte	8,2,35,20,9
	.byte	'GtmTimUsage',0
	.word	161449
	.byte	4,2,35,28,9
	.byte	'GtmTimConfigPtr',0
	.word	161463
	.byte	4,2,35,32,9
	.byte	'GtmTomTgcUsage',0
	.word	161449
	.byte	4,2,35,36,9
	.byte	'GtmTomTgcConfigPtr',0
	.word	161473
	.byte	4,2,35,40,9
	.byte	'GtmTomModuleUsage',0
	.word	161478
	.byte	12,2,35,44,9
	.byte	'GtmTomUsage',0
	.word	161440
	.byte	8,2,35,56,9
	.byte	'GtmTomConfigPtr',0
	.word	161492
	.byte	4,2,35,64,9
	.byte	'GtmAtomAgcUsage',0
	.word	161449
	.byte	4,2,35,68,9
	.byte	'GtmAtomAgcConfigPtr',0
	.word	161502
	.byte	4,2,35,72,9
	.byte	'GtmAtomModuleUsage',0
	.word	161478
	.byte	12,2,35,76,9
	.byte	'GtmAtomUsage',0
	.word	161440
	.byte	8,2,35,88,9
	.byte	'GtmAtomConfigPtr',0
	.word	161512
	.byte	4,2,35,96,9
	.byte	'GtmModUsageConfigPtr',0
	.word	161522
	.byte	4,2,35,100,9
	.byte	'GtmGeneralConfigPtr',0
	.word	161532
	.byte	4,2,35,104,9
	.byte	'GtmTbuConfigPtr',0
	.word	161542
	.byte	4,2,35,108,9
	.byte	'GtmBrcConfigPtr',0
	.word	161552
	.byte	4,2,35,112,9
	.byte	'GtmFifoConfigPtr',0
	.word	161572
	.byte	4,2,35,116,9
	.byte	'GtmF2aConfigPtr',0
	.word	161582
	.byte	4,2,35,120,9
	.byte	'GtmMcsConfigPtr',0
	.word	161592
	.byte	4,2,35,124,9
	.byte	'GtmMapConfig',0
	.word	806
	.byte	4,3,35,128,1,9
	.byte	'GtmDpllConfigPtr',0
	.word	161602
	.byte	4,3,35,132,1,9
	.byte	'GtmSpeConfigPtr',0
	.word	161617
	.byte	8,3,35,136,1,9
	.byte	'GtmCmpConfigPtr',0
	.word	161631
	.byte	4,3,35,144,1,9
	.byte	'GtmMscConnectionsPtr',0
	.word	161641
	.byte	4,3,35,148,1,9
	.byte	'GtmDsadcConnectionsPtr',0
	.word	161651
	.byte	4,3,35,152,1,9
	.byte	'GtmAdcConnectionsPtr',0
	.word	161661
	.byte	4,3,35,156,1,9
	.byte	'GtmTtcanTriggers',0
	.word	161449
	.byte	4,3,35,160,1,9
	.byte	'GtmPsi5OutSelect',0
	.word	806
	.byte	4,3,35,164,1,9
	.byte	'GtmPsi5SOutSelect',0
	.word	806
	.byte	4,3,35,168,1,0,21
	.byte	'Gtm_ModuleConfigType',0,4,188,12,2
	.word	161666
	.byte	10
	.word	159525
	.byte	3
	.word	162663
	.byte	10
	.word	157554
	.byte	3
	.word	162673
	.byte	10
	.word	161666
	.byte	3
	.word	162683
	.byte	22
	.byte	'Gtm_ConfigType',0,4,224,12,16,12,9
	.byte	'GtmClockSettingPtr',0
	.word	162668
	.byte	4,2,35,0,9
	.byte	'GtmPortConfigPtr',0
	.word	162678
	.byte	4,2,35,4,9
	.byte	'GtmModuleConfigPtr',0
	.word	162688
	.byte	4,2,35,8,0,21
	.byte	'Gtm_ConfigType',0,4,229,12,2
	.word	162693
	.byte	21
	.byte	'Mcu_ClockType',0,25,156,3,18
	.word	806
	.byte	21
	.byte	'Mcu_ModeType',0,25,162,3,18
	.word	806
	.byte	21
	.byte	'Mcu_RamSectionType',0,25,168,3,18
	.word	806
	.byte	21
	.byte	'Mcu_RamBaseAdrType',0,25,178,3,18
	.word	7180
	.byte	21
	.byte	'Mcu_RamSizeType',0,25,181,3,17
	.word	806
	.byte	21
	.byte	'Mcu_RamPrstDatType',0,25,184,3,16
	.word	137
	.byte	32
	.byte	'Mcu_ResetType',0,25,212,3,14,4,13
	.byte	'MCU_ESR0_RESET',0,0,13
	.byte	'MCU_ESR1_RESET',0,1,13
	.byte	'MCU_SMU_RESET',0,2,13
	.byte	'MCU_SW_RESET',0,3,13
	.byte	'MCU_STM0_RESET',0,4,13
	.byte	'MCU_STM1_RESET',0,5,13
	.byte	'MCU_STM2_RESET',0,6,13
	.byte	'MCU_POWER_ON_RESET',0,7,13
	.byte	'MCU_CB0_RESET',0,8,13
	.byte	'MCU_CB1_RESET',0,9,13
	.byte	'MCU_CB3_RESET',0,10,13
	.byte	'MCU_TP_RESET',0,11,13
	.byte	'MCU_EVR13_RESET',0,12,13
	.byte	'MCU_EVR33_RESET',0,13,13
	.byte	'MCU_SUPPLY_WDOG_RESET',0,14,13
	.byte	'MCU_STBYR_RESET',0,15,13
	.byte	'MCU_RESET_MULTIPLE',0,254,1,13
	.byte	'MCU_RESET_UNDEFINED',0,255,1,0,21
	.byte	'Mcu_ResetType',0,25,232,3,2
	.word	162975
	.byte	8,25,247,3,3,4,35
	.byte	'K1div',0,1
	.word	137
	.byte	7,1,2,35,0,35
	.byte	'K3div',0,2
	.word	467
	.byte	7,2,2,35,0,35
	.byte	'Ndiv',0,4
	.word	806
	.byte	7,11,2,35,0,35
	.byte	'Pdiv',0,2
	.word	467
	.byte	4,7,2,35,2,35
	.byte	'K2steps',0,1
	.word	137
	.byte	4,3,2,35,3,35
	.byte	'PllMode',0,1
	.word	137
	.byte	1,2,2,35,3,35
	.byte	'Reserved',0,1
	.word	137
	.byte	2,0,2,35,3,0,8,25,132,4,3,4,35
	.byte	'McuErayNDivider',0,1
	.word	137
	.byte	5,3,2,35,0,35
	.byte	'McuErayK2Divider',0,2
	.word	467
	.byte	7,4,2,35,0,35
	.byte	'McuErayK3Divider',0,4
	.word	806
	.byte	7,13,2,35,0,35
	.byte	'McuErayPDivider',0,1
	.word	137
	.byte	4,1,2,35,2,35
	.byte	'Reserved',0,2
	.word	467
	.byte	9,0,2,35,2,0,22
	.byte	'Mcu_ClockCfgType',0,25,236,3,16,80,9
	.byte	'K2div',0
	.word	157969
	.byte	8,2,35,0,9
	.byte	'K2RampToPllDelayTicks',0
	.word	159507
	.byte	32,2,35,8,9
	.byte	'Mcu_ClockDivValues',0
	.word	163342
	.byte	4,2,35,40,9
	.byte	'MCU_ErayPllDivValues',0
	.word	163473
	.byte	4,2,35,44,9
	.byte	'Ccucon0',0
	.word	806
	.byte	4,2,35,48,9
	.byte	'Ccucon1',0
	.word	806
	.byte	4,2,35,52,9
	.byte	'Ccucon2',0
	.word	806
	.byte	4,2,35,56,9
	.byte	'Ccucon5',0
	.word	806
	.byte	4,2,35,60,9
	.byte	'Ccucon6',0
	.word	806
	.byte	4,2,35,64,9
	.byte	'Ccucon7',0
	.word	806
	.byte	4,2,35,68,9
	.byte	'Ccucon8',0
	.word	806
	.byte	4,2,35,72,9
	.byte	'K2RampToPllDelayConf',0
	.word	137
	.byte	1,2,35,76,0,21
	.byte	'Mcu_ClockCfgType',0,25,162,4,2
	.word	163610
	.byte	22
	.byte	'Mcu_RamCfgType',0,25,164,4,16,12,9
	.byte	'RamBaseAdrPtr',0
	.word	162894
	.byte	4,2,35,0,9
	.byte	'RamSize',0
	.word	806
	.byte	4,2,35,4,9
	.byte	'RamPrstData',0
	.word	137
	.byte	1,2,35,8,0,21
	.byte	'Mcu_RamCfgType',0,25,169,4,2
	.word	163913
	.byte	3
	.word	7174
	.byte	22
	.byte	'Mcu_StandbyModeType',0,25,171,4,16,8,9
	.byte	'PMSWCR0',0
	.word	806
	.byte	4,2,35,0,9
	.byte	'CrcCheckEnable',0
	.word	137
	.byte	1,2,35,4,0,21
	.byte	'Mcu_StandbyModeType',0,25,175,4,2
	.word	164025
	.byte	21
	.byte	'rba_BswSrv_uint64',0,26,66,28
	.word	5079
	.byte	12,27,176,6,9,4,13
	.byte	'STANDARD_CAN',0,0,13
	.byte	'STANDARD_FD_CAN',0,1,13
	.byte	'EXTENDED_CAN',0,2,13
	.byte	'EXTENDED_FD_CAN',0,3,0,21
	.byte	'CanIf_Cfg_TxPduCanIdType_ten',0,27,182,6,2
	.word	164148
	.byte	12,27,244,6,9,4,13
	.byte	'CANIF_NO_UL',0,0,13
	.byte	'CAN_NM',0,1,13
	.byte	'CAN_TP',0,2,13
	.byte	'CAN_TSYN',0,3,13
	.byte	'J1939NM',0,4,13
	.byte	'J1939TP',0,5,13
	.byte	'PDUR',0,6,13
	.byte	'XCP',0,7,13
	.byte	'CDD',0,8,13
	.byte	'USER',0,9,13
	.byte	'MAX_USER_TYPE',0,10,0,21
	.byte	'CanIf_Cfg_UserType_ten',0,27,130,7,2
	.word	164259
	.byte	12,27,133,7,9,4,13
	.byte	'CANIF_BASIC',0,0,13
	.byte	'CANIF_FULL',0,1,0,21
	.byte	'CanIf_Cfg_CanHandleType_ten',0,27,138,7,2
	.word	164403
	.byte	12,27,141,7,9,4,13
	.byte	'CANIF_PRV_FULL_E',0,0,13
	.byte	'CANIF_PRV_BASIC_RANGE_E',0,1,13
	.byte	'CANIF_PRV_BASIC_LIST_E',0,2,0,21
	.byte	'CanIf_Prv_HrhType_ten',0,27,148,7,2
	.word	164474
	.byte	12,27,151,7,9,4,13
	.byte	'CANIF_DLC_OK',0,0,13
	.byte	'CANIF_DLC_E_FAILED',0,1,0,21
	.byte	'CanIf_DlcErrorReturnType',0,27,156,7,2
	.word	164582
	.byte	8,27,220,7,9,20,9
	.byte	'HrhInfo_e',0
	.word	164474
	.byte	4,2,35,0,9
	.byte	'PduIdx_t',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'NumRxPdus_u32',0
	.word	806
	.byte	4,2,35,8,9
	.byte	'HrhRangeMask_b',0
	.word	137
	.byte	1,2,35,12,9
	.byte	'ControllerId_u8',0
	.word	137
	.byte	1,2,35,13,9
	.byte	'CanId_t',0
	.word	806
	.byte	4,2,35,16,0,21
	.byte	'CanIf_Cfg_Hrhtype_tst',0,27,255,7,2
	.word	164659
	.byte	8,27,134,8,9,20,9
	.byte	'RxPduReadNotifyReadDataStatus_u8',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'IndexForUL_u8',0
	.word	5136
	.byte	4,2,35,4,9
	.byte	'CanIdtype_u8',0
	.word	137
	.byte	1,2,35,8,9
	.byte	'RxPduDlc_u8',0
	.word	137
	.byte	1,2,35,9,9
	.byte	'RxPduCanId',0
	.word	806
	.byte	4,2,35,12,9
	.byte	'Hrhref_t',0
	.word	467
	.byte	2,2,35,16,9
	.byte	'RxPduTargetId_t',0
	.word	467
	.byte	2,2,35,18,0,21
	.byte	'CanIf_Cfg_RxPduType_tst',0,27,230,8,2
	.word	164823
	.byte	10
	.word	1756
	.byte	3
	.word	165034
	.byte	27,1,1,28
	.word	467
	.byte	28
	.word	165039
	.byte	0,3
	.word	165044
	.byte	8,27,234,8,9,4,9
	.byte	'CanIfRxPduIndicationName',0
	.word	165058
	.byte	4,2,35,0,0,21
	.byte	'CanIf_RxCbk_Prototype',0,27,237,8,2
	.word	165063
	.byte	8,27,168,9,9,4,9
	.byte	'CtrlId',0
	.word	137
	.byte	1,2,35,0,9
	.byte	'CtrlCanCtrlRef',0
	.word	137
	.byte	1,2,35,1,9
	.byte	'CtrlWakeupSupport',0
	.word	137
	.byte	1,2,35,2,0,21
	.byte	'CanIf_Cfg_CtrlConfig_tst',0,27,182,9,2
	.word	165135
	.byte	10
	.word	165135
	.byte	3
	.word	165243
	.byte	8,27,184,9,9,12,9
	.byte	'CanIf_CtrlConfigPtr',0
	.word	165248
	.byte	4,2,35,0,9
	.byte	'CanObjectId',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'CanHandleType',0
	.word	164403
	.byte	4,2,35,8,0,21
	.byte	'CanIf_Cfg_HthConfig_tst',0,27,191,9,2
	.word	165253
	.byte	10
	.word	165253
	.byte	3
	.word	165366
	.byte	8,27,194,9,9,4,9
	.byte	'CanIf_HthConfigPtr',0
	.word	165371
	.byte	4,2,35,0,0,21
	.byte	'CanIf_Cfg_TxBufferConfig_tst',0,27,205,9,2
	.word	165376
	.byte	10
	.word	165376
	.byte	3
	.word	165449
	.byte	27,1,1,28
	.word	467
	.byte	0,3
	.word	165459
	.byte	3
	.word	1756
	.byte	37
	.word	137
	.byte	1,1,28
	.word	467
	.byte	28
	.word	165473
	.byte	0,3
	.word	165478
	.byte	8,27,207,9,9,40,9
	.byte	'CanIf_TxBufferConfigPtr',0
	.word	165454
	.byte	4,2,35,0,9
	.byte	'TxPduId',0
	.word	467
	.byte	2,2,35,4,9
	.byte	'TxPduTargetPduId',0
	.word	467
	.byte	2,2,35,6,9
	.byte	'TxPduType',0
	.word	467
	.byte	2,2,35,8,9
	.byte	'TxPduCanIdType',0
	.word	164148
	.byte	4,2,35,12,9
	.byte	'TxPduTxUserUL',0
	.word	164259
	.byte	4,2,35,16,9
	.byte	'UserTxConfirmation',0
	.word	165468
	.byte	4,2,35,20,9
	.byte	'TxPduCanId',0
	.word	806
	.byte	4,2,35,24,9
	.byte	'TxPduReadNotifyStatus',0
	.word	137
	.byte	1,2,35,28,9
	.byte	'UserTriggerTransmit',0
	.word	165496
	.byte	4,2,35,32,9
	.byte	'TxPduTriggerTransmit',0
	.word	137
	.byte	1,2,35,36,9
	.byte	'TxTruncEnabled_b',0
	.word	137
	.byte	1,2,35,37,9
	.byte	'TxPduLength_u8',0
	.word	137
	.byte	1,2,35,38,0,21
	.byte	'CanIf_Cfg_TxPduConfig_tst',0,27,239,9,2
	.word	165501
	.byte	37
	.word	137
	.byte	1,1,28
	.word	137
	.byte	28
	.word	165473
	.byte	0,3
	.word	165873
	.byte	21
	.byte	'CanTp_CreateFrameType',0,5,198,1,26
	.word	165891
	.byte	21
	.byte	'CanTp_RxContextType',0,5,218,1,2
	.word	2004
	.byte	21
	.byte	'CanTp_TxContextType',0,5,233,1,2
	.word	1519
	.byte	10
	.word	2004
	.byte	3
	.word	165985
	.byte	27,1,1,28
	.word	165990
	.byte	28
	.word	165039
	.byte	0,3
	.word	165995
	.byte	21
	.byte	'CanTp_ProcessFrameType',0,5,235,1,16
	.word	166009
	.byte	27,1,1,28
	.word	137
	.byte	0,3
	.word	166046
	.byte	21
	.byte	'CanTp_StateFuncType',0,5,251,1,16
	.word	166055
	.byte	21
	.byte	'CanTp_ChannelType',0,5,142,2,2
	.word	4129
	.byte	27,1,1,28
	.word	467
	.byte	28
	.word	137
	.byte	0,3
	.word	166116
	.byte	21
	.byte	'CanTp_PduRConfirmationApiType',0,5,145,2,16
	.word	166130
.L795:
	.byte	23,40
	.word	4129
	.byte	24,1,0
.L796:
	.byte	23,1
	.word	137
	.byte	24,0,0
.L797:
	.byte	34
	.word	467
	.byte	10
	.word	5963
.L798:
	.byte	3
	.word	166197
	.byte	23,9
	.word	137
	.byte	24,8,0
.L800:
	.byte	10
	.word	166207
	.byte	23,5
	.word	137
	.byte	24,4,0
.L801:
	.byte	10
	.word	166221
	.byte	23,6
	.word	137
	.byte	24,5,0
.L802:
	.byte	10
	.word	166235
.L803:
	.byte	10
	.word	166235
	.byte	23,65
	.word	137
	.byte	24,64,0
.L804:
	.byte	10
	.word	166254
	.byte	23,16
	.word	166014
	.byte	24,3,0
.L805:
	.byte	10
	.word	166268
	.byte	3
	.word	165995
	.byte	23,16
	.word	165896
	.byte	24,3,0
.L806:
	.byte	10
	.word	166287
	.byte	3
	.word	165873
	.byte	23,36
	.word	166060
	.byte	24,8,0
.L807:
	.byte	10
	.word	166306
	.byte	3
	.word	166046
	.byte	23,8
	.word	166135
	.byte	24,1,0
.L808:
	.byte	10
	.word	166325
	.byte	3
	.word	166116
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L261:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,19,1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9
	.byte	0,0,10,38,0,73,19,0,0,11,11,1,0,0,12,4,1,58,15,59,15,57,15,11,15,0,0,13,40,0,3,8,28,13,0,0,14,46,1,49
	.byte	19,0,0,15,5,0,49,19,0,0,16,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,17,46,1,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20,11,1,49,19,0,0,21,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,22,19,1,3,8,58,15,59,15,57,15,11,15,0,0,23,1,1,11,15,73,19,0,0,24,33
	.byte	0,47,15,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,26,21,0,54,15,0,0,27,21,1,54,15,39,12
	.byte	0,0,28,5,0,73,19,0,0,29,21,0,54,15,39,12,0,0,30,59,0,3,8,0,0,31,23,1,58,15,59,15,57,15,11,15,0,0,32,4
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,33,21,0,73,19,54,15,39,12,0,0,34,53,0,73,19,0,0,35,13,0,3,8,11,15,73
	.byte	19,13,15,12,15,56,9,0,0,36,13,0,73,19,11,15,56,9,0,0,37,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L262:
	.word	.L1063-.L1062
.L1062:
	.half	3
	.word	.L1065-.L1064
.L1064:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Gtm.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\PduR\\PduR_CanTp.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanIf\\api\\CanIf.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanTp_PreCompile\\CanTp_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanTp_PreCompile\\CanTp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxScu_regdef.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxGtm_regdef.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Mcu.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanIf\\CanIf_Cfg.h',0,0,0,0,0
.L1065:
.L1063:
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_info'
.L263:
	.word	260
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_GetTxBuffer',0,1,58,13,1,1
	.word	.L224,.L381,.L223
	.byte	4
	.byte	'Context',0,1,58,62
	.word	.L382,.L383
	.byte	4
	.byte	'SduInfoPtr',0,1,58,84
	.word	.L384,.L385
	.byte	5
	.word	.L224,.L381
	.byte	6
	.byte	'RemBufSize',0,1,60,19
	.word	.L386,.L387
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_line'
.L265:
	.word	.L1067-.L1066
.L1066:
	.half	3
	.word	.L1069-.L1068
.L1068:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0,0
.L1069:
	.byte	5,13,7,0,5,2
	.word	.L224
	.byte	3,57,1,5,33,9
	.half	.L812-.L224
	.byte	3,6,1,5,25,9
	.half	.L1070-.L812
	.byte	1,5,12,9
	.half	.L1071-.L1070
	.byte	1,5,25,9
	.half	.L1072-.L1071
	.byte	1,5,45,9
	.half	.L1073-.L1072
	.byte	1,5,15,9
	.half	.L1074-.L1073
	.byte	3,126,1,5,39,9
	.half	.L1075-.L1074
	.byte	1,5,5,9
	.half	.L1076-.L1075
	.byte	1,5,9,7,9
	.half	.L1077-.L1076
	.byte	3,2,1,5,48,7,9
	.half	.L1078-.L1077
	.byte	3,2,1,5,79,9
	.half	.L1079-.L1078
	.byte	1,5,90,9
	.half	.L1080-.L1079
	.byte	1,5,22,9
	.half	.L814-.L1080
	.byte	3,2,1,9
	.half	.L1081-.L814
	.byte	3,12,1,5,24,9
	.half	.L4-.L1081
	.byte	3,117,1,5,45,9
	.half	.L1082-.L4
	.byte	1,5,21,9
	.half	.L1083-.L1082
	.byte	1,5,46,7,9
	.half	.L1084-.L1083
	.byte	3,2,1,5,38,9
	.half	.L1085-.L1084
	.byte	1,5,25,9
	.half	.L1086-.L1085
	.byte	1,5,38,9
	.half	.L1087-.L1086
	.byte	1,5,76,9
	.half	.L1088-.L1087
	.byte	1,5,74,9
	.half	.L1089-.L1088
	.byte	1,5,21,9
	.half	.L7-.L1089
	.byte	3,8,1,9
	.half	.L5-.L7
	.byte	3,3,1,9
	.half	.L6-.L5
	.byte	3,2,1,9
	.half	.L1090-.L6
	.byte	3,1,1,5,43,9
	.half	.L1091-.L1090
	.byte	3,1,1,5,21,9
	.half	.L1092-.L1091
	.byte	1,5,35,9
	.half	.L1093-.L1092
	.byte	1,5,58,9
	.half	.L1094-.L1093
	.byte	1,5,56,9
	.half	.L1095-.L1094
	.byte	1,5,21,9
	.half	.L1096-.L1095
	.byte	3,1,1,5,9,9
	.half	.L3-.L1096
	.byte	3,105,1,9
	.half	.L2-.L3
	.byte	3,29,1,5,13,7,9
	.half	.L1097-.L2
	.byte	3,3,1,9
	.half	.L817-.L1097
	.byte	3,1,1,5,35,9
	.half	.L1098-.L817
	.byte	3,1,1,5,13,9
	.half	.L1099-.L1098
	.byte	1,5,27,9
	.half	.L1100-.L1099
	.byte	1,5,50,9
	.half	.L1101-.L1100
	.byte	1,5,48,9
	.half	.L1102-.L1101
	.byte	1,5,1,9
	.half	.L11-.L1102
	.byte	3,3,1,7,9
	.half	.L267-.L11
	.byte	0,1,1
.L1067:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L224,0,.L267-.L224,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_info'
.L268:
	.word	613
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L271,.L270
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_ProcessRxSingleFrame',0,1,110,13,1,1
	.word	.L226,.L388,.L225
	.byte	4
	.byte	'Context',0,1,110,71
	.word	.L389,.L390
	.byte	4
	.byte	'PduInfoPtr',0,1,110,99
	.word	.L391,.L392
	.byte	5
	.word	.L226,.L388
	.byte	6
	.byte	'Result',0,1,112,20
	.word	.L393,.L394
	.byte	6
	.byte	'SduInfo',0,1,113,14
	.word	.L395,.L396
	.byte	6
	.byte	'RemBufSize',0,1,114,16
	.word	.L386,.L397
	.byte	6
	.byte	'RetValue',0,1,115,23
	.word	.L398,.L399
	.byte	6
	.byte	'ElapsedValue',0,1,116,20
	.word	.L386,.L400
	.byte	6
	.byte	'Value',0,1,117,20
	.word	.L386,.L401
	.byte	6
	.byte	'Channel',0,1,118,24
	.word	.L402,.L403
	.byte	7
	.word	.L404,.L405,.L406
	.byte	8
	.word	.L407,.L408
	.byte	8
	.word	.L409,.L410
	.byte	9
	.word	.L411,.L405,.L406
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L412
	.byte	0,0,7
	.word	.L413,.L414,.L415
	.byte	8
	.word	.L416,.L417
	.byte	8
	.word	.L418,.L419
	.byte	10
	.word	.L420,.L421
	.byte	6
	.byte	'RetValue',0,2,231,7,20
	.word	.L393,.L423
	.byte	6
	.byte	'NewChannelState',0,2,232,7,11
	.word	.L393,.L424
	.byte	6
	.byte	'OldChannelState',0,2,233,7,11
	.word	.L393,.L425
	.byte	0,0,7
	.word	.L413,.L20,.L422
	.byte	8
	.word	.L416,.L417
	.byte	8
	.word	.L418,.L419
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_line'
.L270:
	.word	.L1104-.L1103
.L1103:
	.half	3
	.word	.L1106-.L1105
.L1105:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1106:
	.byte	5,13,7,0,5,2
	.word	.L226
	.byte	3,237,0,1,5,28,9
	.half	.L822-.L226
	.byte	3,7,1,5,26,9
	.half	.L1107-.L822
	.byte	1,5,35,9
	.half	.L1108-.L1107
	.byte	3,1,1,5,56,9
	.half	.L1109-.L1108
	.byte	1,5,48,9
	.half	.L1110-.L1109
	.byte	1,5,28,9
	.half	.L823-.L1110
	.byte	3,2,1,5,36,9
	.half	.L1111-.L823
	.byte	1,4,2,5,30,9
	.half	.L405-.L1111
	.byte	3,236,1,1,5,14,9
	.half	.L824-.L405
	.byte	3,2,1,5,12,9
	.half	.L1112-.L824
	.byte	1,5,21,9
	.half	.L1113-.L1112
	.byte	3,2,1,5,28,9
	.half	.L1114-.L1113
	.byte	1,5,19,9
	.half	.L1115-.L1114
	.byte	1,4,1,5,33,9
	.half	.L406-.L1115
	.byte	3,146,126,1,5,55,9
	.half	.L826-.L406
	.byte	1,5,46,9
	.half	.L825-.L826
	.byte	1,5,21,9
	.half	.L1116-.L825
	.byte	1,5,32,9
	.half	.L1117-.L1116
	.byte	3,1,1,5,23,9
	.half	.L1118-.L1117
	.byte	1,4,2,5,29,9
	.half	.L414-.L1118
	.byte	3,236,6,1,5,27,9
	.half	.L827-.L414
	.byte	3,1,1,5,29,9
	.half	.L828-.L827
	.byte	3,1,1,5,9,9
	.half	.L829-.L828
	.byte	3,8,1,5,29,7,9
	.half	.L1119-.L829
	.byte	3,2,1,5,66,9
	.half	.L1120-.L1119
	.byte	1,5,16,9
	.half	.L13-.L1120
	.byte	3,4,1,5,68,7,9
	.half	.L1121-.L13
	.byte	1,5,88,9
	.half	.L1122-.L1121
	.byte	1,5,111,9
	.half	.L830-.L1122
	.byte	1,5,101,9
	.half	.L1123-.L830
	.byte	1,5,33,7,9
	.half	.L1124-.L1123
	.byte	3,2,1,5,17,9
	.half	.L1125-.L1124
	.byte	3,1,1,5,9,9
	.half	.L14-.L1125
	.byte	3,4,1,5,35,7,9
	.half	.L1126-.L14
	.byte	3,2,1,5,27,9
	.half	.L1127-.L1126
	.byte	1,5,50,9
	.half	.L1128-.L1127
	.byte	1,5,48,9
	.half	.L1129-.L1128
	.byte	1,5,22,9
	.half	.L1130-.L1129
	.byte	3,1,1,5,5,9
	.half	.L17-.L1130
	.byte	3,4,1,4,1,9
	.half	.L18-.L17
	.byte	3,251,120,1,5,39,7,9
	.half	.L415-.L18
	.byte	3,2,1,5,30,9
	.half	.L1131-.L415
	.byte	1,5,37,9
	.half	.L1132-.L1131
	.byte	3,1,1,5,28,9
	.half	.L1133-.L1132
	.byte	1,5,46,9
	.half	.L1134-.L1133
	.byte	3,1,1,5,37,9
	.half	.L1135-.L1134
	.byte	1,5,9,9
	.half	.L1136-.L1135
	.byte	3,3,1,5,33,9
	.half	.L1137-.L1136
	.byte	3,2,1,5,31,9
	.half	.L1138-.L1137
	.byte	1,5,54,9
	.half	.L1139-.L1138
	.byte	3,5,1,5,74,9
	.half	.L1140-.L1139
	.byte	1,5,90,9
	.half	.L1141-.L1140
	.byte	1,5,104,9
	.half	.L1142-.L1141
	.byte	1,5,18,9
	.half	.L833-.L1142
	.byte	3,4,1,9
	.half	.L1143-.L833
	.byte	3,12,1,4,2,5,17,9
	.half	.L20-.L1143
	.byte	3,220,6,1,4,1,5,60,9
	.half	.L422-.L20
	.byte	3,155,121,1,5,20,9
	.half	.L1144-.L422
	.byte	3,126,1,5,41,9
	.half	.L1145-.L1144
	.byte	1,5,17,9
	.half	.L1146-.L1145
	.byte	1,5,80,7,9
	.half	.L1147-.L1146
	.byte	3,2,1,5,90,9
	.half	.L1148-.L1147
	.byte	1,5,30,9
	.half	.L1149-.L1148
	.byte	3,1,1,5,65,9
	.half	.L834-.L1149
	.byte	1,5,54,9
	.half	.L24-.L834
	.byte	1,5,21,9
	.half	.L25-.L24
	.byte	3,1,1,5,71,9
	.half	.L835-.L25
	.byte	3,127,1,5,21,9
	.half	.L23-.L835
	.byte	3,5,1,5,17,9
	.half	.L26-.L23
	.byte	3,2,1,9
	.half	.L21-.L26
	.byte	3,2,1,9
	.half	.L837-.L21
	.byte	3,1,1,9
	.half	.L22-.L837
	.byte	3,2,1,5,31,9
	.half	.L27-.L22
	.byte	3,3,1,5,23,9
	.half	.L1150-.L27
	.byte	1,5,46,9
	.half	.L1151-.L1150
	.byte	1,5,44,9
	.half	.L1152-.L1151
	.byte	1,5,1,9
	.half	.L19-.L1152
	.byte	3,4,1,7,9
	.half	.L272-.L19
	.byte	0,1,1
.L1104:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_ranges'
.L271:
	.word	-1,.L226,0,.L272-.L226,0,0
.L421:
	.word	-1,.L226,.L414-.L226,.L415-.L226,.L20-.L226,.L422-.L226,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_info'
.L273:
	.word	650
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L276,.L275
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_ProcessRxFirstFrame',0,1,178,1,13,1,1
	.word	.L228,.L426,.L227
	.byte	4
	.byte	'Context',0,1,178,1,70
	.word	.L389,.L427
	.byte	4
	.byte	'PduInfoPtr',0,1,178,1,98
	.word	.L391,.L428
	.byte	5
	.word	.L228,.L426
	.byte	6
	.byte	'Channel',0,1,180,1,24
	.word	.L402,.L429
	.byte	6
	.byte	'SduInfo',0,1,181,1,17
	.word	.L395,.L430
	.byte	6
	.byte	'RemBufSize',0,1,182,1,19
	.word	.L386,.L431
	.byte	6
	.byte	'NewSubState',0,1,183,1,11
	.word	.L393,.L432
	.byte	6
	.byte	'FlowStatus',0,1,184,1,11
	.word	.L393,.L433
	.byte	6
	.byte	'PayLoadLength',0,1,185,1,11
	.word	.L393,.L434
	.byte	6
	.byte	'Value',0,1,186,1,20
	.word	.L386,.L435
	.byte	6
	.byte	'ElapsedValue',0,1,187,1,20
	.word	.L386,.L436
	.byte	6
	.byte	'RetValue',0,1,188,1,23
	.word	.L398,.L437
	.byte	7
	.word	.L404,.L438,.L439
	.byte	8
	.word	.L407,.L440
	.byte	8
	.word	.L409,.L441
	.byte	9
	.word	.L411,.L438,.L439
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L442
	.byte	0,0,7
	.word	.L413,.L443,.L35
	.byte	8
	.word	.L416,.L444
	.byte	8
	.word	.L418,.L445
	.byte	9
	.word	.L420,.L443,.L35
	.byte	6
	.byte	'RetValue',0,2,231,7,20
	.word	.L393,.L446
	.byte	6
	.byte	'NewChannelState',0,2,232,7,11
	.word	.L393,.L447
	.byte	6
	.byte	'OldChannelState',0,2,233,7,11
	.word	.L393,.L448
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_line'
.L275:
	.word	.L1154-.L1153
.L1153:
	.half	3
	.word	.L1156-.L1155
.L1155:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1156:
	.byte	5,13,7,0,5,2
	.word	.L228
	.byte	3,177,1,1,5,35,9
	.half	.L841-.L228
	.byte	3,2,1,5,56,9
	.half	.L1157-.L841
	.byte	1,5,48,9
	.half	.L1158-.L1157
	.byte	1,5,22,9
	.half	.L842-.L1158
	.byte	3,4,1,5,28,9
	.half	.L844-.L842
	.byte	3,2,1,5,26,9
	.half	.L1159-.L844
	.byte	1,5,28,9
	.half	.L1160-.L1159
	.byte	3,4,1,5,36,9
	.half	.L1161-.L1160
	.byte	1,4,2,5,30,9
	.half	.L438-.L1161
	.byte	3,166,1,1,5,14,9
	.half	.L845-.L438
	.byte	3,2,1,5,12,9
	.half	.L1162-.L845
	.byte	1,5,21,9
	.half	.L1163-.L1162
	.byte	3,2,1,5,28,9
	.half	.L1164-.L1163
	.byte	1,5,19,9
	.half	.L1165-.L1164
	.byte	1,4,1,5,60,9
	.half	.L439-.L1165
	.byte	3,216,126,1,5,39,9
	.half	.L1166-.L439
	.byte	1,5,51,9
	.half	.L846-.L1166
	.byte	1,5,21,9
	.half	.L1167-.L846
	.byte	1,5,33,9
	.half	.L849-.L1167
	.byte	3,2,1,5,46,9
	.half	.L848-.L849
	.byte	1,5,21,9
	.half	.L1168-.L848
	.byte	1,5,23,9
	.half	.L1169-.L1168
	.byte	3,1,1,4,2,5,29,9
	.half	.L443-.L1169
	.byte	3,164,6,1,5,27,9
	.half	.L850-.L443
	.byte	3,1,1,5,29,9
	.half	.L851-.L850
	.byte	3,1,1,5,9,9
	.half	.L852-.L851
	.byte	3,8,1,5,29,7,9
	.half	.L1170-.L852
	.byte	3,2,1,5,66,9
	.half	.L1171-.L1170
	.byte	1,5,16,9
	.half	.L30-.L1171
	.byte	3,4,1,5,68,7,9
	.half	.L1172-.L30
	.byte	1,5,88,9
	.half	.L1173-.L1172
	.byte	1,5,111,9
	.half	.L1174-.L1173
	.byte	1,5,101,9
	.half	.L1175-.L1174
	.byte	1,5,33,7,9
	.half	.L1176-.L1175
	.byte	3,2,1,5,17,9
	.half	.L1177-.L1176
	.byte	3,1,1,5,9,9
	.half	.L31-.L1177
	.byte	3,4,1,5,35,7,9
	.half	.L1178-.L31
	.byte	3,2,1,5,27,9
	.half	.L1179-.L1178
	.byte	1,5,50,9
	.half	.L1180-.L1179
	.byte	1,5,48,9
	.half	.L1181-.L1180
	.byte	1,5,22,9
	.half	.L1182-.L1181
	.byte	3,1,1,5,5,9
	.half	.L34-.L1182
	.byte	3,4,1,4,1,9
	.half	.L35-.L34
	.byte	3,195,121,1,5,39,7,9
	.half	.L1183-.L35
	.byte	3,2,1,5,30,9
	.half	.L1184-.L1183
	.byte	1,5,37,9
	.half	.L1185-.L1184
	.byte	3,1,1,5,28,9
	.half	.L1186-.L1185
	.byte	1,5,9,9
	.half	.L1187-.L1186
	.byte	3,1,1,5,33,9
	.half	.L1188-.L1187
	.byte	3,2,1,5,31,9
	.half	.L1189-.L1188
	.byte	1,5,54,9
	.half	.L1190-.L1189
	.byte	3,5,1,5,74,9
	.half	.L1191-.L1190
	.byte	1,5,90,9
	.half	.L855-.L1191
	.byte	1,5,104,9
	.half	.L1192-.L855
	.byte	1,5,18,9
	.half	.L856-.L1192
	.byte	3,5,1,9
	.half	.L1193-.L856
	.byte	3,26,1,5,52,9
	.half	.L37-.L1193
	.byte	3,105,1,5,20,9
	.half	.L1194-.L37
	.byte	3,126,1,5,17,9
	.half	.L1195-.L1194
	.byte	1,5,72,7,9
	.half	.L1196-.L1195
	.byte	3,2,1,5,82,9
	.half	.L1197-.L1196
	.byte	1,5,21,9
	.half	.L857-.L1197
	.byte	1,5,25,7,9
	.half	.L1198-.L857
	.byte	3,2,1,9
	.half	.L1199-.L1198
	.byte	3,1,1,5,37,9
	.half	.L1200-.L1199
	.byte	3,1,1,5,115,9
	.half	.L858-.L1200
	.byte	3,126,1,5,37,9
	.half	.L41-.L858
	.byte	3,6,1,5,62,9
	.half	.L859-.L41
	.byte	3,1,1,5,74,9
	.half	.L1201-.L859
	.byte	1,5,53,9
	.half	.L1202-.L1201
	.byte	1,5,39,9
	.half	.L1203-.L1202
	.byte	3,1,1,5,37,9
	.half	.L1204-.L1203
	.byte	1,5,47,9
	.half	.L1205-.L1204
	.byte	3,1,1,5,45,9
	.half	.L1206-.L1205
	.byte	1,5,43,9
	.half	.L1207-.L1206
	.byte	3,1,1,5,41,9
	.half	.L1208-.L1207
	.byte	1,5,39,9
	.half	.L1209-.L1208
	.byte	3,1,1,5,37,9
	.half	.L1210-.L1209
	.byte	1,5,21,9
	.half	.L42-.L1210
	.byte	3,121,1,9
	.half	.L40-.L42
	.byte	3,13,1,5,33,9
	.half	.L860-.L40
	.byte	3,1,1,5,17,9
	.half	.L43-.L860
	.byte	3,2,1,5,28,9
	.half	.L38-.L43
	.byte	3,2,1,5,29,9
	.half	.L1211-.L38
	.byte	3,1,1,5,31,9
	.half	.L861-.L1211
	.byte	3,1,1,5,29,9
	.half	.L1212-.L861
	.byte	1,5,17,9
	.half	.L1213-.L1212
	.byte	3,1,1,5,29,9
	.half	.L39-.L1213
	.byte	3,2,1,5,17,9
	.half	.L862-.L39
	.byte	3,1,1,5,34,9
	.half	.L44-.L862
	.byte	3,3,1,5,26,9
	.half	.L1214-.L44
	.byte	1,5,9,9
	.half	.L1215-.L1214
	.byte	1,5,33,7,9
	.half	.L1216-.L1215
	.byte	3,2,1,5,35,9
	.half	.L1217-.L1216
	.byte	3,1,1,5,27,9
	.half	.L1218-.L1217
	.byte	1,5,48,9
	.half	.L843-.L1218
	.byte	1,5,1,9
	.half	.L36-.L843
	.byte	3,5,1,7,9
	.half	.L277-.L36
	.byte	0,1,1
.L1154:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_ranges'
.L276:
	.word	-1,.L228,0,.L277-.L228,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_info'
.L278:
	.word	542
	.half	3
	.word	.L279
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L281,.L280
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_ProcessRxConsecutiveFrame',0,1,141,2,13,1,1
	.word	.L230,.L449,.L229
	.byte	4
	.byte	'Context',0,1,141,2,76
	.word	.L389,.L450
	.byte	4
	.byte	'PduInfoPtr',0,1,141,2,104
	.word	.L391,.L451
	.byte	5
	.word	.L230,.L449
	.byte	6
	.byte	'SduInfo',0,1,143,2,14
	.word	.L395,.L452
	.byte	6
	.byte	'RemBufSize',0,1,144,2,16
	.word	.L386,.L453
	.byte	6
	.byte	'PayloadLength',0,1,145,2,8
	.word	.L393,.L454
	.byte	6
	.byte	'ElapsedValue',0,1,146,2,20
	.word	.L386,.L455
	.byte	6
	.byte	'RetValue',0,1,147,2,23
	.word	.L398,.L456
	.byte	6
	.byte	'Channel',0,1,148,2,26
	.word	.L457,.L458
	.byte	6
	.byte	'Value',0,1,149,2,20
	.word	.L386,.L459
	.byte	6
	.byte	'NotifyValue',0,1,150,2,20
	.word	.L393,.L460
	.byte	7
	.word	.L404,.L461,.L462
	.byte	8
	.word	.L407,.L463
	.byte	8
	.word	.L409,.L464
	.byte	9
	.word	.L411,.L461,.L462
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L465
	.byte	0,0,7
	.word	.L466,.L467,.L55
	.byte	8
	.word	.L468,.L469
	.byte	10
	.word	.L470,.L467,.L55
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_abbrev'
.L279:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_line'
.L280:
	.word	.L1220-.L1219
.L1219:
	.half	3
	.word	.L1222-.L1221
.L1221:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1222:
	.byte	5,13,7,0,5,2
	.word	.L230
	.byte	3,140,2,1,5,37,9
	.half	.L865-.L230
	.byte	3,7,1,5,58,9
	.half	.L1223-.L865
	.byte	1,5,50,9
	.half	.L1224-.L1223
	.byte	1,5,35,9
	.half	.L866-.L1224
	.byte	3,1,1,5,26,9
	.half	.L1225-.L866
	.byte	1,5,28,9
	.half	.L1226-.L1225
	.byte	3,3,1,5,36,9
	.half	.L1227-.L1226
	.byte	1,4,2,5,30,9
	.half	.L461-.L1227
	.byte	3,204,0,1,5,14,9
	.half	.L867-.L461
	.byte	3,2,1,5,12,9
	.half	.L1228-.L867
	.byte	1,5,21,9
	.half	.L1229-.L1228
	.byte	3,2,1,5,28,9
	.half	.L1230-.L1229
	.byte	1,5,19,9
	.half	.L1231-.L1230
	.byte	1,4,1,5,46,9
	.half	.L462-.L1231
	.byte	3,178,127,1,5,28,9
	.half	.L1232-.L462
	.byte	1,5,37,9
	.half	.L868-.L1232
	.byte	1,5,33,9
	.half	.L869-.L868
	.byte	3,2,1,5,46,9
	.half	.L1233-.L869
	.byte	1,5,21,9
	.half	.L1234-.L1233
	.byte	1,5,6,9
	.half	.L1235-.L1234
	.byte	3,4,1,5,28,9
	.half	.L1236-.L1235
	.byte	1,5,20,9
	.half	.L1237-.L1236
	.byte	1,5,44,9
	.half	.L1238-.L1237
	.byte	1,5,5,9
	.half	.L1239-.L1238
	.byte	1,5,13,7,9
	.half	.L1240-.L1239
	.byte	3,1,1,5,31,9
	.half	.L1241-.L1240
	.byte	1,5,21,9
	.half	.L1242-.L1241
	.byte	1,5,57,7,9
	.half	.L1243-.L1242
	.byte	1,5,77,9
	.half	.L1244-.L1243
	.byte	1,5,16,7,9
	.half	.L1245-.L1244
	.byte	3,12,1,5,14,9
	.half	.L871-.L1245
	.byte	3,2,1,5,29,9
	.half	.L1246-.L871
	.byte	1,5,4,9
	.half	.L1247-.L1246
	.byte	1,5,29,7,9
	.half	.L1248-.L1247
	.byte	3,2,1,5,27,9
	.half	.L1249-.L1248
	.byte	1,5,36,9
	.half	.L1250-.L1249
	.byte	3,2,1,5,28,9
	.half	.L1251-.L1250
	.byte	1,5,90,7,9
	.half	.L1252-.L1251
	.byte	1,5,29,9
	.half	.L52-.L1252
	.byte	3,1,1,5,26,9
	.half	.L53-.L52
	.byte	3,127,1,5,44,9
	.half	.L1253-.L53
	.byte	3,3,1,5,64,9
	.half	.L1254-.L1253
	.byte	1,5,74,9
	.half	.L1255-.L1254
	.byte	1,5,5,9
	.half	.L870-.L1255
	.byte	3,2,1,5,13,7,9
	.half	.L1256-.L870
	.byte	3,2,1,5,17,9
	.half	.L1257-.L1256
	.byte	1,5,13,9
	.half	.L1258-.L1257
	.byte	3,1,1,5,18,9
	.half	.L1259-.L1258
	.byte	1,5,13,9
	.half	.L1260-.L1259
	.byte	3,1,1,5,44,9
	.half	.L1261-.L1260
	.byte	1,5,34,9
	.half	.L1262-.L1261
	.byte	1,5,13,9
	.half	.L1263-.L1262
	.byte	3,1,1,5,32,9
	.half	.L1264-.L1263
	.byte	1,5,41,9
	.half	.L1265-.L1264
	.byte	3,2,1,4,2,5,21,9
	.half	.L467-.L1265
	.byte	3,130,7,1,5,32,9
	.half	.L1266-.L467
	.byte	1,5,5,9
	.half	.L1267-.L1266
	.byte	1,5,43,7,9
	.half	.L1268-.L1267
	.byte	3,2,1,5,41,9
	.half	.L1269-.L1268
	.byte	1,5,47,9
	.half	.L1270-.L1269
	.byte	3,1,1,5,45,9
	.half	.L1271-.L1270
	.byte	1,5,23,9
	.half	.L1272-.L1271
	.byte	3,1,1,5,37,9
	.half	.L1273-.L1272
	.byte	1,5,35,9
	.half	.L1274-.L1273
	.byte	1,4,1,5,43,9
	.half	.L55-.L1274
	.byte	3,252,120,1,5,71,9
	.half	.L1275-.L55
	.byte	1,5,100,9
	.half	.L1276-.L1275
	.byte	1,5,71,9
	.half	.L56-.L1276
	.byte	1,5,22,9
	.half	.L51-.L56
	.byte	3,4,1,5,4,9
	.half	.L1277-.L51
	.byte	1,5,17,7,9
	.half	.L1278-.L1277
	.byte	3,2,1,5,39,9
	.half	.L1279-.L1278
	.byte	3,1,1,5,31,9
	.half	.L1280-.L1279
	.byte	1,5,54,9
	.half	.L1281-.L1280
	.byte	1,5,52,9
	.half	.L1282-.L1281
	.byte	1,5,1,9
	.half	.L48-.L1282
	.byte	3,6,1,7,9
	.half	.L282-.L48
	.byte	0,1,1
.L1220:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_ranges'
.L281:
	.word	-1,.L230,0,.L282-.L230,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_info'
.L283:
	.word	664
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L286,.L285
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_ProcessRxFlowControlFrame',0,1,215,2,13,1,1
	.word	.L232,.L471,.L231
	.byte	4
	.byte	'Context',0,1,215,2,76
	.word	.L389,.L472
	.byte	4
	.byte	'PduInfoPtr',0,1,215,2,104
	.word	.L391,.L473
	.byte	5
	.word	.L232,.L471
	.byte	6
	.byte	'Channel',0,1,217,2,23
	.word	.L457,.L474
	.byte	6
	.byte	'Value',0,1,218,2,20
	.word	.L386,.L475
	.byte	6
	.byte	'ElapsedValue',0,1,219,2,20
	.word	.L386,.L476
	.byte	7
	.word	.L404,.L477,.L478
	.byte	8
	.word	.L407,.L479
	.byte	8
	.word	.L409,.L480
	.byte	9
	.word	.L411,.L477,.L478
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L481
	.byte	0,0,7
	.word	.L482,.L483,.L75
	.byte	8
	.word	.L484,.L485
	.byte	8
	.word	.L486,.L487
	.byte	9
	.word	.L488,.L483,.L75
	.byte	6
	.byte	'SduDataPtr',0,2,146,8,12
	.word	.L489,.L490
	.byte	6
	.byte	'Channel',0,2,147,8,26
	.word	.L457,.L491
	.byte	6
	.byte	'BlockCfsRemaining',0,2,148,8,19
	.word	.L386,.L492
	.byte	7
	.word	.L493,.L494,.L72
	.byte	8
	.word	.L495,.L496
	.byte	9
	.word	.L497,.L494,.L72
	.byte	6
	.byte	'PayLoadLength',0,2,153,4,11
	.word	.L393,.L498
	.byte	6
	.byte	'Connection',0,2,154,4,25
	.word	.L499,.L500
	.byte	6
	.byte	'TX_DL',0,2,155,4,11
	.word	.L393,.L501
	.byte	6
	.byte	'AddressSize',0,2,156,4,11
	.word	.L393,.L502
	.byte	6
	.byte	'SduLength',0,2,157,4,19
	.word	.L386,.L503
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_line'
.L285:
	.word	.L1284-.L1283
.L1283:
	.half	3
	.word	.L1286-.L1285
.L1285:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1286:
	.byte	5,13,7,0,5,2
	.word	.L232
	.byte	3,214,2,1,5,16,9
	.half	.L875-.L232
	.byte	3,7,1,5,37,9
	.half	.L1287-.L875
	.byte	1,5,29,9
	.half	.L1288-.L1287
	.byte	1,5,20,9
	.half	.L876-.L1288
	.byte	3,1,1,5,11,9
	.half	.L1289-.L876
	.byte	1,5,28,9
	.half	.L1290-.L1289
	.byte	3,1,1,5,36,9
	.half	.L1291-.L1290
	.byte	1,4,2,5,30,9
	.half	.L477-.L1291
	.byte	3,4,1,5,14,9
	.half	.L878-.L477
	.byte	3,2,1,5,12,9
	.half	.L1292-.L878
	.byte	1,5,21,9
	.half	.L1293-.L1292
	.byte	3,2,1,5,28,9
	.half	.L1294-.L1293
	.byte	1,5,19,9
	.half	.L1295-.L1294
	.byte	1,4,1,5,8,9
	.half	.L478-.L1295
	.byte	3,125,1,5,30,9
	.half	.L1296-.L478
	.byte	1,5,22,9
	.half	.L879-.L1296
	.byte	1,5,5,9
	.half	.L1297-.L879
	.byte	1,5,37,7,9
	.half	.L1298-.L1297
	.byte	3,12,1,5,35,9
	.half	.L1299-.L1298
	.byte	1,5,27,9
	.half	.L1300-.L1299
	.byte	3,2,1,5,22,9
	.half	.L1301-.L1300
	.byte	3,5,1,9
	.half	.L1302-.L1301
	.byte	3,125,1,5,43,9
	.half	.L61-.L1302
	.byte	3,1,1,5,41,9
	.half	.L1303-.L61
	.byte	1,5,21,9
	.half	.L1304-.L1303
	.byte	3,1,1,5,43,9
	.half	.L60-.L1304
	.byte	3,2,1,5,41,9
	.half	.L1305-.L60
	.byte	1,4,2,5,58,9
	.half	.L483-.L1305
	.byte	3,154,5,1,5,50,9
	.half	.L1306-.L483
	.byte	1,5,28,9
	.half	.L877-.L1306
	.byte	3,3,1,5,50,9
	.half	.L1307-.L877
	.byte	1,5,41,9
	.half	.L1308-.L1307
	.byte	1,5,15,9
	.half	.L881-.L1308
	.byte	3,3,1,5,31,9
	.half	.L1309-.L881
	.byte	1,5,5,9
	.half	.L1310-.L1309
	.byte	1,5,23,7,9
	.half	.L1311-.L1310
	.byte	3,4,1,5,21,9
	.half	.L1312-.L1311
	.byte	1,5,19,9
	.half	.L1313-.L1312
	.byte	3,1,1,5,12,9
	.half	.L1314-.L1313
	.byte	3,2,1,5,27,9
	.half	.L1315-.L1314
	.byte	1,5,9,9
	.half	.L1316-.L1315
	.byte	1,5,51,7,9
	.half	.L1317-.L1316
	.byte	3,2,1,5,33,9
	.half	.L1318-.L1317
	.byte	1,5,94,9
	.half	.L1319-.L1318
	.byte	1,5,32,9
	.half	.L65-.L1319
	.byte	3,2,1,5,17,9
	.half	.L1320-.L65
	.byte	1,5,76,7,9
	.half	.L1321-.L1320
	.byte	1,5,74,9
	.half	.L1322-.L1321
	.byte	1,5,35,7,9
	.half	.L67-.L1322
	.byte	3,2,1,5,33,9
	.half	.L1323-.L67
	.byte	1,5,82,9
	.half	.L1324-.L1323
	.byte	1,5,51,9
	.half	.L68-.L1324
	.byte	3,4,1,5,33,9
	.half	.L1325-.L68
	.byte	1,5,56,9
	.half	.L64-.L1325
	.byte	3,4,1,5,73,9
	.half	.L494-.L64
	.byte	3,236,123,1,5,84,9
	.half	.L882-.L494
	.byte	1,5,58,9
	.half	.L1326-.L882
	.byte	1,5,38,9
	.half	.L1327-.L1326
	.byte	1,5,50,9
	.half	.L1328-.L1327
	.byte	1,5,58,9
	.half	.L1329-.L1328
	.byte	1,5,19,9
	.half	.L883-.L1329
	.byte	3,1,1,5,53,9
	.half	.L885-.L883
	.byte	3,1,1,5,25,9
	.half	.L1330-.L885
	.byte	1,5,42,9
	.half	.L1331-.L1330
	.byte	1,5,55,9
	.half	.L887-.L1331
	.byte	3,1,1,5,46,9
	.half	.L889-.L887
	.byte	3,2,1,5,27,9
	.half	.L886-.L889
	.byte	1,5,46,9
	.half	.L1332-.L886
	.byte	1,5,61,9
	.half	.L888-.L1332
	.byte	3,1,1,5,24,9
	.half	.L1333-.L888
	.byte	1,5,12,9
	.half	.L890-.L1333
	.byte	1,5,78,7,9
	.half	.L1334-.L890
	.byte	1,5,109,9
	.half	.L70-.L1334
	.byte	1,5,48,9
	.half	.L71-.L70
	.byte	1,5,5,9
	.half	.L1335-.L71
	.byte	1,5,16,9
	.half	.L72-.L1335
	.byte	3,144,4,1,5,8,9
	.half	.L891-.L72
	.byte	1,5,44,7,9
	.half	.L1336-.L891
	.byte	1,5,36,7,9
	.half	.L73-.L1336
	.byte	3,2,1,5,55,9
	.half	.L1337-.L73
	.byte	1,5,36,9
	.half	.L74-.L1337
	.byte	3,4,1,4,1,5,43,9
	.half	.L75-.L74
	.byte	3,197,122,1,5,35,9
	.half	.L1338-.L75
	.byte	1,5,58,9
	.half	.L880-.L1338
	.byte	1,5,56,9
	.half	.L1339-.L880
	.byte	1,5,21,9
	.half	.L1340-.L1339
	.byte	3,1,1,9
	.half	.L62-.L1340
	.byte	3,3,1,5,43,9
	.half	.L874-.L62
	.byte	3,1,1,5,35,9
	.half	.L1341-.L874
	.byte	1,5,58,9
	.half	.L1342-.L1341
	.byte	1,5,56,9
	.half	.L1343-.L1342
	.byte	1,5,21,9
	.half	.L1344-.L1343
	.byte	3,1,1,5,1,9
	.half	.L59-.L1344
	.byte	3,6,1,7,9
	.half	.L287-.L59
	.byte	0,1,1
.L1284:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_ranges'
.L286:
	.word	-1,.L232,0,.L287-.L232,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_info'
.L288:
	.word	676
	.half	3
	.word	.L289
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L291,.L290
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_CreateTxSingleFrame',0,1,144,3,23
	.word	.L393
	.byte	1,1
	.word	.L234,.L504,.L233
	.byte	4
	.byte	'ChannelId',0,1,144,3,73
	.word	.L393,.L505
	.byte	4
	.byte	'PduInfoPtr',0,1,144,3,97
	.word	.L384,.L506
	.byte	5
	.word	.L234,.L504
	.byte	6
	.byte	'SduInfo',0,1,146,3,14
	.word	.L395,.L507
	.byte	6
	.byte	'RemBufSize',0,1,147,3,16
	.word	.L386,.L508
	.byte	6
	.byte	'SduDataPtr',0,1,148,3,9
	.word	.L489,.L509
	.byte	6
	.byte	'DataOffset',0,1,149,3,8
	.word	.L393,.L510
	.byte	6
	.byte	'PaddingOffset',0,1,150,3,11
	.word	.L393,.L511
	.byte	6
	.byte	'CAN_DL',0,1,151,3,11
	.word	.L393,.L512
	.byte	6
	.byte	'PciId',0,1,152,3,11
	.word	.L393,.L513
	.byte	6
	.byte	'SduLength',0,1,153,3,12
	.word	.L514,.L515
	.byte	6
	.byte	'SduLengthRemaining',0,1,154,3,12
	.word	.L514,.L516
	.byte	6
	.byte	'Status',0,1,155,3,20
	.word	.L393,.L517
	.byte	6
	.byte	'Channel',0,1,156,3,23
	.word	.L457,.L518
	.byte	6
	.byte	'Connection',0,1,157,3,25
	.word	.L499,.L519
	.byte	7
	.word	.L520,.L521,.L83
	.byte	8
	.word	.L522,.L523
	.byte	8
	.word	.L524,.L525
	.byte	9
	.word	.L526,.L527
	.byte	0,7
	.word	.L520,.L528,.L529
	.byte	8
	.word	.L522,.L523
	.byte	8
	.word	.L524,.L525
	.byte	0,7
	.word	.L530,.L531,.L532
	.byte	8
	.word	.L533,.L534
	.byte	8
	.word	.L535,.L536
	.byte	8
	.word	.L537,.L538
	.byte	10
	.word	.L539,.L531,.L532
	.byte	6
	.byte	'i',0,2,145,3,12
	.word	.L514,.L540
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_abbrev'
.L289:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_line'
.L290:
	.word	.L1346-.L1345
.L1345:
	.half	3
	.word	.L1348-.L1347
.L1347:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1348:
	.byte	5,23,7,0,5,2
	.word	.L234
	.byte	3,143,3,1,5,27,9
	.half	.L896-.L234
	.byte	3,11,1,5,47,9
	.half	.L897-.L896
	.byte	3,1,1,5,33,9
	.half	.L1349-.L897
	.byte	1,5,47,9
	.half	.L1350-.L1349
	.byte	1,5,5,9
	.half	.L898-.L1350
	.byte	3,3,1,5,19,9
	.half	.L1351-.L898
	.byte	1,5,2,9
	.half	.L1352-.L1351
	.byte	1,5,48,7,9
	.half	.L1353-.L1352
	.byte	3,2,1,5,39,9
	.half	.L1354-.L1353
	.byte	1,5,19,9
	.half	.L1355-.L1354
	.byte	1,5,31,9
	.half	.L1356-.L1355
	.byte	1,5,39,9
	.half	.L1357-.L1356
	.byte	1,5,21,9
	.half	.L900-.L1357
	.byte	3,1,1,5,25,9
	.half	.L901-.L900
	.byte	3,1,1,5,34,9
	.half	.L902-.L901
	.byte	3,1,1,5,44,9
	.half	.L903-.L902
	.byte	3,2,1,5,16,9
	.half	.L1358-.L903
	.byte	1,5,33,9
	.half	.L1359-.L1358
	.byte	1,5,65,9
	.half	.L1360-.L1359
	.byte	1,5,78,9
	.half	.L1361-.L1360
	.byte	1,5,63,9
	.half	.L1362-.L1361
	.byte	1,5,29,9
	.half	.L905-.L1362
	.byte	3,3,1,5,42,9
	.half	.L1363-.L905
	.byte	1,5,25,9
	.half	.L906-.L1363
	.byte	3,1,1,5,26,9
	.half	.L1364-.L906
	.byte	3,1,1,5,24,9
	.half	.L1365-.L1364
	.byte	1,5,30,9
	.half	.L1366-.L1365
	.byte	3,1,1,5,28,9
	.half	.L1367-.L1366
	.byte	1,5,43,9
	.half	.L1368-.L1367
	.byte	3,3,1,5,63,9
	.half	.L894-.L1368
	.byte	1,5,72,9
	.half	.L1369-.L894
	.byte	1,5,83,9
	.half	.L1370-.L1369
	.byte	1,5,9,9
	.half	.L904-.L1370
	.byte	1,5,13,7,9
	.half	.L1371-.L904
	.byte	3,2,1,5,77,9
	.half	.L1372-.L1371
	.byte	1,5,43,9
	.half	.L79-.L1372
	.byte	3,5,1,4,2,5,12,9
	.half	.L521-.L79
	.byte	3,64,1,5,44,9
	.half	.L1373-.L521
	.byte	1,5,37,9
	.half	.L81-.L1373
	.byte	1,5,5,9
	.half	.L82-.L81
	.byte	1,4,1,5,61,9
	.half	.L83-.L82
	.byte	3,195,0,1,5,52,9
	.half	.L1374-.L83
	.byte	1,5,33,9
	.half	.L907-.L1374
	.byte	1,5,13,9
	.half	.L528-.L907
	.byte	3,125,1,5,26,7,9
	.half	.L529-.L528
	.byte	3,2,1,5,40,9
	.half	.L908-.L529
	.byte	3,2,1,5,53,9
	.half	.L1375-.L908
	.byte	1,5,56,9
	.half	.L909-.L1375
	.byte	3,1,1,5,73,9
	.half	.L1376-.L909
	.byte	1,4,2,5,11,9
	.half	.L531-.L1376
	.byte	3,88,1,5,26,9
	.half	.L910-.L531
	.byte	1,5,17,9
	.half	.L86-.L910
	.byte	3,2,1,5,21,9
	.half	.L1377-.L86
	.byte	1,5,29,9
	.half	.L1378-.L1377
	.byte	3,126,1,5,26,9
	.half	.L85-.L1378
	.byte	1,4,1,5,76,7,9
	.half	.L532-.L85
	.byte	3,37,1,5,24,9
	.half	.L84-.L532
	.byte	3,7,1,5,36,9
	.half	.L87-.L84
	.byte	3,3,1,5,26,9
	.half	.L911-.L87
	.byte	3,1,1,5,13,9
	.half	.L1379-.L911
	.byte	1,5,41,7,9
	.half	.L1380-.L1379
	.byte	3,2,1,5,29,9
	.half	.L1381-.L1380
	.byte	1,5,27,9
	.half	.L1382-.L1381
	.byte	3,1,1,5,13,9
	.half	.L88-.L1382
	.byte	3,4,1,5,29,7,9
	.half	.L1383-.L88
	.byte	3,2,1,5,47,9
	.half	.L1384-.L1383
	.byte	1,5,17,9
	.half	.L89-.L1384
	.byte	3,5,1,5,37,7,9
	.half	.L1385-.L89
	.byte	3,2,1,5,35,9
	.half	.L1386-.L1385
	.byte	1,9
	.half	.L1387-.L1386
	.byte	3,1,1,9
	.half	.L90-.L1387
	.byte	3,5,1,5,20,9
	.half	.L1388-.L90
	.byte	3,1,1,5,2,9
	.half	.L78-.L1388
	.byte	3,4,1,5,1,9
	.half	.L92-.L78
	.byte	3,1,1,7,9
	.half	.L292-.L92
	.byte	0,1,1
.L1346:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_ranges'
.L291:
	.word	-1,.L234,0,.L292-.L234,0,0
.L527:
	.word	-1,.L234,.L521-.L234,.L83-.L234,.L528-.L234,.L529-.L234,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_info'
.L293:
	.word	473
	.half	3
	.word	.L294
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L296,.L295
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_CreateTxFirstFrame',0,1,232,3,23
	.word	.L393
	.byte	1,1
	.word	.L236,.L541,.L235
	.byte	4
	.byte	'ChannelId',0,1,232,3,72
	.word	.L393,.L542
	.byte	4
	.byte	'PduInfoPtr',0,1,232,3,96
	.word	.L384,.L543
	.byte	5
	.word	.L236,.L541
	.byte	6
	.byte	'SduInfo',0,1,234,3,14
	.word	.L395,.L544
	.byte	6
	.byte	'RemBufSize',0,1,235,3,16
	.word	.L386,.L545
	.byte	6
	.byte	'SduLength',0,1,236,3,12
	.word	.L514,.L546
	.byte	6
	.byte	'SduDataPtr',0,1,237,3,9
	.word	.L489,.L547
	.byte	6
	.byte	'DataOffset',0,1,238,3,8
	.word	.L393,.L548
	.byte	6
	.byte	'CAN_DL',0,1,239,3,8
	.word	.L393,.L549
	.byte	6
	.byte	'PciId',0,1,240,3,8
	.word	.L393,.L550
	.byte	6
	.byte	'Channel',0,1,241,3,23
	.word	.L457,.L551
	.byte	6
	.byte	'Status',0,1,242,3,20
	.word	.L393,.L552
	.byte	6
	.byte	'Connection',0,1,243,3,25
	.word	.L499,.L553
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_line'
.L295:
	.word	.L1390-.L1389
.L1389:
	.half	3
	.word	.L1392-.L1391
.L1391:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0,0
.L1392:
	.byte	5,23,7,0,5,2
	.word	.L236
	.byte	3,231,3,1,5,47,9
	.half	.L916-.L236
	.byte	3,9,1,5,33,9
	.half	.L1393-.L916
	.byte	1,5,47,9
	.half	.L1394-.L1393
	.byte	1,5,27,9
	.half	.L915-.L1394
	.byte	3,1,1,5,8,9
	.half	.L918-.L915
	.byte	3,3,1,5,22,9
	.half	.L1395-.L918
	.byte	1,5,5,9
	.half	.L1396-.L1395
	.byte	1,5,51,7,9
	.half	.L1397-.L1396
	.byte	3,2,1,5,42,9
	.half	.L1398-.L1397
	.byte	1,5,22,9
	.half	.L1399-.L1398
	.byte	1,5,34,9
	.half	.L1400-.L1399
	.byte	1,5,42,9
	.half	.L1401-.L1400
	.byte	1,5,24,9
	.half	.L919-.L1401
	.byte	3,1,1,5,50,9
	.half	.L920-.L919
	.byte	3,1,1,5,22,9
	.half	.L1402-.L920
	.byte	1,5,39,9
	.half	.L1403-.L1402
	.byte	1,5,71,9
	.half	.L1404-.L1403
	.byte	1,5,84,9
	.half	.L1405-.L1404
	.byte	1,5,69,9
	.half	.L1406-.L1405
	.byte	1,5,18,9
	.half	.L921-.L1406
	.byte	3,1,1,5,28,9
	.half	.L923-.L921
	.byte	3,1,1,5,32,9
	.half	.L924-.L923
	.byte	3,2,1,5,45,9
	.half	.L1407-.L924
	.byte	1,5,28,9
	.half	.L925-.L1407
	.byte	3,1,1,5,36,9
	.half	.L1408-.L925
	.byte	3,1,1,5,27,9
	.half	.L922-.L1408
	.byte	1,5,33,9
	.half	.L1409-.L922
	.byte	3,1,1,5,31,9
	.half	.L1410-.L1409
	.byte	1,5,43,9
	.half	.L1411-.L1410
	.byte	3,3,1,5,63,9
	.half	.L914-.L1411
	.byte	1,5,72,9
	.half	.L917-.L914
	.byte	1,5,83,9
	.half	.L1412-.L917
	.byte	1,5,9,9
	.half	.L1413-.L1412
	.byte	1,5,13,7,9
	.half	.L1414-.L1413
	.byte	3,2,1,5,77,9
	.half	.L1415-.L1414
	.byte	1,5,36,9
	.half	.L94-.L1415
	.byte	3,4,1,5,26,9
	.half	.L1416-.L94
	.byte	3,1,1,5,13,9
	.half	.L1417-.L1416
	.byte	1,5,41,7,9
	.half	.L1418-.L1417
	.byte	3,2,1,5,29,9
	.half	.L1419-.L1418
	.byte	1,5,27,9
	.half	.L1420-.L1419
	.byte	3,1,1,5,13,9
	.half	.L96-.L1420
	.byte	3,4,1,5,58,7,9
	.half	.L1421-.L96
	.byte	3,2,1,5,38,9
	.half	.L1422-.L1421
	.byte	1,5,31,9
	.half	.L1423-.L1422
	.byte	1,9
	.half	.L1424-.L1423
	.byte	3,1,1,5,67,9
	.half	.L1425-.L1424
	.byte	3,127,1,5,17,9
	.half	.L97-.L1425
	.byte	3,6,1,5,37,7,9
	.half	.L1426-.L97
	.byte	3,2,1,5,35,9
	.half	.L1427-.L1426
	.byte	1,5,37,9
	.half	.L1428-.L1427
	.byte	3,1,1,5,35,9
	.half	.L1429-.L1428
	.byte	1,5,55,9
	.half	.L1430-.L1429
	.byte	3,1,1,5,35,9
	.half	.L1431-.L1430
	.byte	1,5,55,9
	.half	.L1432-.L1431
	.byte	3,1,1,5,35,9
	.half	.L1433-.L1432
	.byte	1,5,55,9
	.half	.L1434-.L1433
	.byte	3,1,1,5,35,9
	.half	.L1435-.L1434
	.byte	1,9
	.half	.L1436-.L1435
	.byte	3,1,1,9
	.half	.L98-.L1436
	.byte	3,5,1,5,20,9
	.half	.L1437-.L98
	.byte	3,1,1,5,5,9
	.half	.L93-.L1437
	.byte	3,4,1,5,1,9
	.half	.L100-.L93
	.byte	3,1,1,7,9
	.half	.L297-.L100
	.byte	0,1,1
.L1390:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_ranges'
.L296:
	.word	-1,.L236,0,.L297-.L236,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_info'
.L298:
	.word	682
	.half	3
	.word	.L299
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L301,.L300
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_CreateTxConsecutiveFrame',0,1,180,4,23
	.word	.L393
	.byte	1,1
	.word	.L238,.L554,.L237
	.byte	4
	.byte	'ChannelId',0,1,180,4,78
	.word	.L393,.L555
	.byte	4
	.byte	'PduInfoPtr',0,1,180,4,102
	.word	.L384,.L556
	.byte	5
	.word	.L238,.L554
	.byte	6
	.byte	'RemBufSize',0,1,182,4,16
	.word	.L386,.L557
	.byte	6
	.byte	'SduInfo',0,1,183,4,14
	.word	.L395,.L558
	.byte	6
	.byte	'PaddingOffset',0,1,184,4,11
	.word	.L393,.L559
	.byte	6
	.byte	'SduDataPtr',0,1,185,4,9
	.word	.L489,.L560
	.byte	6
	.byte	'DataOffset',0,1,186,4,8
	.word	.L393,.L561
	.byte	6
	.byte	'CAN_DL',0,1,187,4,8
	.word	.L393,.L562
	.byte	6
	.byte	'SN',0,1,188,4,11
	.word	.L393,.L563
	.byte	6
	.byte	'MaxCopyLength',0,1,189,4,8
	.word	.L393,.L564
	.byte	6
	.byte	'SduLengthRemaining',0,1,190,4,9
	.word	.L514,.L565
	.byte	6
	.byte	'Channel',0,1,191,4,23
	.word	.L457,.L566
	.byte	6
	.byte	'Status',0,1,192,4,20
	.word	.L393,.L567
	.byte	6
	.byte	'Connection',0,1,193,4,25
	.word	.L499,.L568
	.byte	7
	.word	.L520,.L569,.L109
	.byte	8
	.word	.L522,.L570
	.byte	8
	.word	.L524,.L571
	.byte	9
	.word	.L526,.L572
	.byte	0,7
	.word	.L520,.L573,.L574
	.byte	8
	.word	.L522,.L570
	.byte	8
	.word	.L524,.L571
	.byte	0,7
	.word	.L530,.L575,.L576
	.byte	8
	.word	.L533,.L577
	.byte	8
	.word	.L535,.L578
	.byte	8
	.word	.L537,.L579
	.byte	10
	.word	.L539,.L575,.L576
	.byte	6
	.byte	'i',0,2,145,3,12
	.word	.L514,.L580
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_abbrev'
.L299:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_line'
.L300:
	.word	.L1439-.L1438
.L1438:
	.half	3
	.word	.L1441-.L1440
.L1440:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1441:
	.byte	5,23,7,0,5,2
	.word	.L238
	.byte	3,179,4,1,5,47,9
	.half	.L930-.L238
	.byte	3,11,1,5,33,9
	.half	.L1442-.L930
	.byte	1,5,47,9
	.half	.L1443-.L1442
	.byte	1,5,27,9
	.half	.L931-.L1443
	.byte	3,1,1,5,8,9
	.half	.L933-.L931
	.byte	3,3,1,5,22,9
	.half	.L1444-.L933
	.byte	1,5,5,9
	.half	.L1445-.L1444
	.byte	1,5,51,7,9
	.half	.L1446-.L1445
	.byte	3,2,1,5,42,9
	.half	.L1447-.L1446
	.byte	1,5,22,9
	.half	.L1448-.L1447
	.byte	1,5,34,9
	.half	.L1449-.L1448
	.byte	1,5,42,9
	.half	.L1450-.L1449
	.byte	1,5,21,9
	.half	.L934-.L1450
	.byte	3,1,1,5,37,9
	.half	.L935-.L934
	.byte	3,1,1,5,50,9
	.half	.L936-.L935
	.byte	3,2,1,5,22,9
	.half	.L1451-.L936
	.byte	1,5,39,9
	.half	.L1452-.L1451
	.byte	1,5,69,9
	.half	.L1453-.L1452
	.byte	1,5,18,9
	.half	.L937-.L1453
	.byte	3,1,1,5,32,9
	.half	.L938-.L937
	.byte	3,1,1,5,40,9
	.half	.L939-.L938
	.byte	3,1,1,5,53,9
	.half	.L1454-.L939
	.byte	1,5,28,9
	.half	.L1455-.L1454
	.byte	1,5,29,9
	.half	.L1456-.L1455
	.byte	3,1,1,5,66,7,9
	.half	.L1457-.L1456
	.byte	1,5,82,9
	.half	.L1458-.L1457
	.byte	1,5,84,9
	.half	.L102-.L1458
	.byte	1,5,27,9
	.half	.L103-.L102
	.byte	1,5,33,9
	.half	.L1459-.L103
	.byte	3,1,1,5,31,9
	.half	.L1460-.L1459
	.byte	1,5,43,9
	.half	.L1461-.L1460
	.byte	3,3,1,5,63,9
	.half	.L928-.L1461
	.byte	1,5,72,9
	.half	.L1462-.L928
	.byte	1,5,83,9
	.half	.L1463-.L1462
	.byte	1,5,9,9
	.half	.L1464-.L1463
	.byte	1,5,13,7,9
	.half	.L1465-.L1464
	.byte	3,2,1,5,77,9
	.half	.L1466-.L1465
	.byte	1,5,13,9
	.half	.L104-.L1466
	.byte	3,4,1,5,47,7,9
	.half	.L1467-.L104
	.byte	3,2,1,4,2,5,12,9
	.half	.L569-.L1467
	.byte	3,157,126,1,5,44,9
	.half	.L1468-.L569
	.byte	1,5,37,9
	.half	.L107-.L1468
	.byte	1,5,5,9
	.half	.L108-.L107
	.byte	1,4,1,5,65,9
	.half	.L109-.L108
	.byte	3,230,1,1,5,56,9
	.half	.L1469-.L109
	.byte	1,5,37,9
	.half	.L940-.L1469
	.byte	1,5,17,9
	.half	.L573-.L940
	.byte	3,125,1,5,30,7,9
	.half	.L574-.L573
	.byte	3,2,1,5,44,9
	.half	.L1470-.L574
	.byte	3,2,1,5,57,9
	.half	.L1471-.L1470
	.byte	1,5,60,9
	.half	.L941-.L1471
	.byte	3,1,1,5,77,9
	.half	.L1472-.L941
	.byte	1,4,2,5,11,9
	.half	.L575-.L1472
	.byte	3,181,126,1,5,26,9
	.half	.L942-.L575
	.byte	1,5,17,9
	.half	.L112-.L942
	.byte	3,2,1,5,21,9
	.half	.L1473-.L112
	.byte	1,5,29,9
	.half	.L1474-.L1473
	.byte	3,126,1,5,26,9
	.half	.L111-.L1474
	.byte	1,4,1,5,80,7,9
	.half	.L576-.L111
	.byte	3,200,1,1,5,28,9
	.half	.L110-.L576
	.byte	3,7,1,5,36,9
	.half	.L106-.L110
	.byte	3,4,1,5,26,9
	.half	.L943-.L106
	.byte	3,2,1,5,13,9
	.half	.L1475-.L943
	.byte	1,5,41,7,9
	.half	.L1476-.L1475
	.byte	3,2,1,5,29,9
	.half	.L1477-.L1476
	.byte	1,5,27,9
	.half	.L1478-.L1477
	.byte	3,1,1,5,48,9
	.half	.L114-.L1478
	.byte	3,3,1,5,25,9
	.half	.L1479-.L114
	.byte	1,5,35,9
	.half	.L1480-.L1479
	.byte	3,1,1,5,20,9
	.half	.L1481-.L1480
	.byte	3,1,1,5,5,9
	.half	.L101-.L1481
	.byte	3,4,1,5,1,9
	.half	.L115-.L101
	.byte	3,1,1,7,9
	.half	.L302-.L115
	.byte	0,1,1
.L1439:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_ranges'
.L301:
	.word	-1,.L238,0,.L302-.L238,0,0
.L572:
	.word	-1,.L238,.L569-.L238,.L109-.L238,.L573-.L238,.L574-.L238,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_info'
.L303:
	.word	637
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L306,.L305
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_CreateTxFlowControlFrame',0,1,255,4,23
	.word	.L393
	.byte	1,1
	.word	.L240,.L581,.L239
	.byte	4
	.byte	'ChannelId',0,1,255,4,78
	.word	.L393,.L582
	.byte	4
	.byte	'PduInfoPtr',0,1,255,4,102
	.word	.L384,.L583
	.byte	5
	.word	.L240,.L581
	.byte	6
	.byte	'SduDataPtr',0,1,129,5,9
	.word	.L489,.L584
	.byte	6
	.byte	'PaddingOffset',0,1,130,5,11
	.word	.L393,.L585
	.byte	6
	.byte	'SduLength',0,1,131,5,16
	.word	.L386,.L586
	.byte	6
	.byte	'Channel',0,1,132,5,26
	.word	.L457,.L587
	.byte	6
	.byte	'Status',0,1,133,5,20
	.word	.L393,.L588
	.byte	6
	.byte	'BS',0,1,134,5,11
	.word	.L393,.L589
	.byte	6
	.byte	'STMin',0,1,135,5,11
	.word	.L393,.L590
	.byte	6
	.byte	'FlowStatus',0,1,136,5,11
	.word	.L393,.L591
	.byte	6
	.byte	'Connection',0,1,137,5,28
	.word	.L592,.L593
	.byte	7
	.word	.L594,.L595,.L119
	.byte	8
	.word	.L596,.L597
	.byte	8
	.word	.L598,.L599
	.byte	9
	.word	.L600,.L595,.L119
	.byte	6
	.byte	'value',0,2,195,8,11
	.word	.L393,.L601
	.byte	0,0,7
	.word	.L520,.L602,.L603
	.byte	8
	.word	.L522,.L604
	.byte	8
	.word	.L524,.L605
	.byte	10
	.word	.L526,.L602,.L603
	.byte	0,7
	.word	.L530,.L606,.L607
	.byte	8
	.word	.L533,.L608
	.byte	8
	.word	.L535,.L609
	.byte	8
	.word	.L537,.L610
	.byte	9
	.word	.L539,.L606,.L607
	.byte	6
	.byte	'i',0,2,145,3,12
	.word	.L514,.L611
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_line'
.L305:
	.word	.L1483-.L1482
.L1482:
	.half	3
	.word	.L1485-.L1484
.L1484:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1485:
	.byte	5,23,7,0,5,2
	.word	.L240
	.byte	3,254,4,1,5,32,9
	.half	.L945-.L240
	.byte	3,2,1,5,26,9
	.half	.L946-.L945
	.byte	3,2,1,5,50,9
	.half	.L947-.L946
	.byte	3,1,1,5,36,9
	.half	.L1486-.L947
	.byte	1,5,50,9
	.half	.L1487-.L1486
	.byte	1,5,27,9
	.half	.L948-.L1487
	.byte	3,1,1,5,26,9
	.half	.L949-.L948
	.byte	3,6,1,5,24,9
	.half	.L1488-.L949
	.byte	1,5,8,9
	.half	.L1489-.L1488
	.byte	3,2,1,5,22,9
	.half	.L1490-.L1489
	.byte	1,5,5,9
	.half	.L1491-.L1490
	.byte	1,5,51,7,9
	.half	.L1492-.L1491
	.byte	3,2,1,5,22,9
	.half	.L1493-.L1492
	.byte	1,5,34,9
	.half	.L1494-.L1493
	.byte	1,5,42,9
	.half	.L1495-.L1494
	.byte	1,5,60,9
	.half	.L950-.L1495
	.byte	3,1,1,4,2,5,13,9
	.half	.L595-.L950
	.byte	3,181,3,1,5,43,9
	.half	.L951-.L595
	.byte	1,5,36,9
	.half	.L117-.L951
	.byte	1,5,12,9
	.half	.L118-.L117
	.byte	3,3,1,5,5,9
	.half	.L1496-.L118
	.byte	1,4,1,5,29,9
	.half	.L119-.L1496
	.byte	3,201,124,1,5,21,9
	.half	.L954-.L119
	.byte	3,1,1,5,22,9
	.half	.L953-.L954
	.byte	3,2,1,5,9,9
	.half	.L1497-.L953
	.byte	1,5,37,7,9
	.half	.L1498-.L1497
	.byte	3,2,1,5,25,9
	.half	.L1499-.L1498
	.byte	1,5,23,9
	.half	.L1500-.L1499
	.byte	3,1,1,5,22,9
	.half	.L1501-.L1500
	.byte	3,1,1,5,52,9
	.half	.L120-.L1501
	.byte	3,3,1,5,21,9
	.half	.L1502-.L120
	.byte	1,5,19,9
	.half	.L1503-.L1502
	.byte	3,1,1,5,21,9
	.half	.L1504-.L1503
	.byte	3,3,1,5,19,9
	.half	.L1505-.L1504
	.byte	3,2,1,5,21,9
	.half	.L1506-.L1505
	.byte	3,2,1,5,19,9
	.half	.L1507-.L1506
	.byte	3,1,1,5,39,9
	.half	.L1508-.L1507
	.byte	3,2,1,4,2,5,12,9
	.half	.L602-.L1508
	.byte	3,208,125,1,5,44,9
	.half	.L1509-.L602
	.byte	1,5,37,9
	.half	.L121-.L1509
	.byte	1,5,5,9
	.half	.L122-.L121
	.byte	1,4,1,5,9,9
	.half	.L123-.L122
	.byte	3,176,2,1,5,57,7,9
	.half	.L603-.L123
	.byte	3,2,1,5,29,9
	.half	.L1510-.L603
	.byte	1,5,46,9
	.half	.L1511-.L1510
	.byte	1,5,76,9
	.half	.L1512-.L1511
	.byte	1,5,66,9
	.half	.L955-.L1512
	.byte	3,2,1,5,83,9
	.half	.L1513-.L955
	.byte	1,4,2,5,11,9
	.half	.L606-.L1513
	.byte	3,233,125,1,5,26,9
	.half	.L956-.L606
	.byte	1,5,17,9
	.half	.L126-.L956
	.byte	3,2,1,5,21,9
	.half	.L1514-.L126
	.byte	1,5,29,9
	.half	.L1515-.L1514
	.byte	3,126,1,5,26,9
	.half	.L125-.L1515
	.byte	1,4,1,5,23,7,9
	.half	.L607-.L125
	.byte	3,152,2,1,5,31,9
	.half	.L124-.L607
	.byte	3,3,1,5,16,9
	.half	.L1516-.L124
	.byte	3,1,1,5,5,9
	.half	.L116-.L1516
	.byte	3,3,1,5,1,9
	.half	.L127-.L116
	.byte	3,1,1,7,9
	.half	.L307-.L127
	.byte	0,1,1
.L1483:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_ranges'
.L306:
	.word	-1,.L240,0,.L307-.L240,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_info'
.L308:
	.word	669
	.half	3
	.word	.L309
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L311,.L310
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_TxSendConsecutiveFrame',0,1,189,5,13,1,1
	.word	.L242,.L612,.L241
	.byte	4
	.byte	'ChannelId',0,1,189,5,66
	.word	.L393,.L613
	.byte	5
	.word	.L242,.L612
	.byte	6
	.byte	'CAN_DL',0,1,191,5,8
	.word	.L393,.L614
	.byte	6
	.byte	'SduInfo',0,1,192,5,17
	.word	.L395,.L615
	.byte	6
	.byte	'PduInfo',0,1,193,5,14
	.word	.L395,.L616
	.byte	6
	.byte	'TxConfirmationChannel',0,1,194,5,25
	.word	.L393,.L617
	.byte	6
	.byte	'Connection',0,1,195,5,28
	.word	.L499,.L618
	.byte	6
	.byte	'MaxLength',0,1,196,5,8
	.word	.L393,.L619
	.byte	6
	.byte	'Context',0,1,197,5,22
	.word	.L620,.L621
	.byte	6
	.byte	'Channel',0,1,198,5,26
	.word	.L457,.L622
	.byte	7
	.word	.L404,.L623,.L624
	.byte	8
	.word	.L407,.L625
	.byte	8
	.word	.L409,.L626
	.byte	9
	.word	.L411,.L623,.L624
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L627
	.byte	0,0,7
	.word	.L628,.L629,.L630
	.byte	8
	.word	.L631,.L632
	.byte	8
	.word	.L633,.L634
	.byte	10
	.word	.L635,.L636
	.byte	6
	.byte	'Result',0,2,166,5,20
	.word	.L393,.L638
	.byte	6
	.byte	'CanIfTxInfo',0,2,167,5,17
	.word	.L395,.L639
	.byte	6
	.byte	'SduBuffer',0,2,168,5,11
	.word	.L640,.L641
	.byte	7
	.word	.L520,.L642,.L643
	.byte	8
	.word	.L522,.L644
	.byte	8
	.word	.L524,.L645
	.byte	11
	.word	.L526,.L642,.L643
	.byte	0,0,0,7
	.word	.L628,.L637,.L145
	.byte	8
	.word	.L631,.L632
	.byte	8
	.word	.L633,.L634
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_abbrev'
.L309:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,1,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_line'
.L310:
	.word	.L1518-.L1517
.L1517:
	.half	3
	.word	.L1520-.L1519
.L1519:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1520:
	.byte	5,13,7,0,5,2
	.word	.L242
	.byte	3,188,5,1,5,37,9
	.half	.L957-.L242
	.byte	3,9,1,5,50,9
	.half	.L1521-.L957
	.byte	1,5,23,9
	.half	.L959-.L1521
	.byte	3,2,1,5,25,9
	.half	.L1522-.L959
	.byte	3,1,1,5,23,9
	.half	.L1523-.L1522
	.byte	1,5,28,9
	.half	.L1524-.L1523
	.byte	3,2,1,5,19,9
	.half	.L1525-.L1524
	.byte	1,5,36,9
	.half	.L1526-.L1525
	.byte	3,2,1,5,54,9
	.half	.L1527-.L1526
	.byte	1,4,2,5,30,9
	.half	.L623-.L1527
	.byte	3,151,125,1,5,14,9
	.half	.L960-.L623
	.byte	3,2,1,5,12,9
	.half	.L1528-.L960
	.byte	1,5,21,9
	.half	.L1529-.L1528
	.byte	3,2,1,5,28,9
	.half	.L1530-.L1529
	.byte	1,5,19,9
	.half	.L1531-.L1530
	.byte	1,4,1,5,25,9
	.half	.L624-.L1531
	.byte	3,231,2,1,5,23,9
	.half	.L961-.L624
	.byte	1,5,26,9
	.half	.L1532-.L961
	.byte	3,1,1,5,24,9
	.half	.L1533-.L1532
	.byte	1,5,26,9
	.half	.L1534-.L1533
	.byte	3,2,1,5,24,9
	.half	.L1535-.L1534
	.byte	1,5,16,9
	.half	.L1536-.L1535
	.byte	3,4,1,5,30,9
	.half	.L1537-.L1536
	.byte	1,5,15,9
	.half	.L1538-.L1537
	.byte	1,5,45,7,9
	.half	.L1539-.L1538
	.byte	3,1,1,5,36,9
	.half	.L1540-.L1539
	.byte	1,5,16,9
	.half	.L1541-.L1540
	.byte	1,5,28,9
	.half	.L1542-.L1541
	.byte	1,5,36,9
	.half	.L1543-.L1542
	.byte	1,5,60,9
	.half	.L962-.L1543
	.byte	1,5,78,9
	.half	.L128-.L962
	.byte	3,127,1,5,26,9
	.half	.L129-.L128
	.byte	3,2,1,5,53,7,9
	.half	.L1544-.L129
	.byte	1,5,91,9
	.half	.L1545-.L1544
	.byte	1,5,80,9
	.half	.L1546-.L1545
	.byte	1,5,111,9
	.half	.L963-.L1546
	.byte	1,5,51,9
	.half	.L130-.L963
	.byte	1,5,2,9
	.half	.L131-.L130
	.byte	3,2,1,5,45,7,9
	.half	.L1547-.L131
	.byte	3,2,1,5,33,9
	.half	.L964-.L1547
	.byte	1,5,35,9
	.half	.L1548-.L964
	.byte	3,1,1,5,23,9
	.half	.L1549-.L1548
	.byte	1,5,46,9
	.half	.L1550-.L1549
	.byte	3,1,1,5,34,9
	.half	.L1551-.L1550
	.byte	1,5,18,9
	.half	.L1552-.L1551
	.byte	3,1,1,5,27,9
	.half	.L965-.L1552
	.byte	3,1,1,9
	.half	.L1553-.L965
	.byte	3,1,1,5,25,9
	.half	.L1554-.L1553
	.byte	1,5,39,9
	.half	.L1555-.L1554
	.byte	3,1,1,5,27,9
	.half	.L1556-.L1555
	.byte	1,5,77,9
	.half	.L1557-.L1556
	.byte	3,2,1,5,49,9
	.half	.L1558-.L1557
	.byte	1,5,66,9
	.half	.L1559-.L1558
	.byte	1,5,47,9
	.half	.L1560-.L1559
	.byte	1,5,28,9
	.half	.L966-.L1560
	.byte	1,5,47,9
	.half	.L1561-.L966
	.byte	1,5,41,9
	.half	.L967-.L1561
	.byte	3,1,1,5,33,9
	.half	.L1562-.L967
	.byte	1,7,9
	.half	.L1563-.L1562
	.byte	3,1,1,5,70,9
	.half	.L1564-.L1563
	.byte	1,5,31,9
	.half	.L134-.L1564
	.byte	3,127,1,5,32,9
	.half	.L1565-.L134
	.byte	3,3,1,5,42,9
	.half	.L1566-.L1565
	.byte	1,5,20,9
	.half	.L958-.L1566
	.byte	3,2,1,5,12,9
	.half	.L968-.L958
	.byte	1,5,21,7,9
	.half	.L1567-.L968
	.byte	3,1,1,5,45,9
	.half	.L1568-.L1567
	.byte	1,5,13,9
	.half	.L1569-.L1568
	.byte	1,5,70,7,9
	.half	.L1570-.L1569
	.byte	1,5,78,9
	.half	.L1571-.L1570
	.byte	1,5,30,7,9
	.half	.L136-.L1571
	.byte	3,2,1,5,28,9
	.half	.L1572-.L136
	.byte	1,5,44,9
	.half	.L1573-.L1572
	.byte	3,1,1,5,35,9
	.half	.L1574-.L1573
	.byte	1,5,41,9
	.half	.L1575-.L1574
	.byte	3,1,1,5,39,9
	.half	.L1576-.L1575
	.byte	1,5,48,9
	.half	.L1577-.L1576
	.byte	3,1,1,4,2,5,43,9
	.half	.L629-.L1577
	.byte	3,186,127,1,5,27,9
	.half	.L1578-.L629
	.byte	1,5,32,9
	.half	.L1579-.L1578
	.byte	3,2,1,5,12,9
	.half	.L642-.L1579
	.byte	3,202,125,1,5,44,9
	.half	.L1580-.L642
	.byte	1,5,37,9
	.half	.L138-.L1580
	.byte	1,5,5,9
	.half	.L139-.L138
	.byte	1,9
	.half	.L140-.L139
	.byte	3,182,2,1,5,48,7,9
	.half	.L643-.L140
	.byte	3,2,1,5,32,9
	.half	.L1581-.L643
	.byte	1,5,16,9
	.half	.L1582-.L1581
	.byte	3,1,1,5,60,9
	.half	.L969-.L1582
	.byte	3,127,1,5,34,9
	.half	.L141-.L969
	.byte	3,6,1,5,32,9
	.half	.L1583-.L141
	.byte	1,5,19,9
	.half	.L1584-.L1583
	.byte	3,1,1,5,18,9
	.half	.L1585-.L1584
	.byte	1,5,91,9
	.half	.L970-.L1585
	.byte	1,5,84,9
	.half	.L143-.L970
	.byte	1,5,5,9
	.half	.L142-.L143
	.byte	3,3,1,5,73,7,9
	.half	.L1586-.L142
	.byte	3,2,1,5,9,9
	.half	.L1587-.L1586
	.byte	1,5,44,9
	.half	.L1588-.L1587
	.byte	1,5,36,9
	.half	.L971-.L1588
	.byte	1,5,64,9
	.half	.L1589-.L971
	.byte	1,5,34,9
	.half	.L1590-.L1589
	.byte	3,1,1,5,44,9
	.half	.L1591-.L1590
	.byte	1,5,9,9
	.half	.L1592-.L1591
	.byte	1,4,1,5,38,7,9
	.half	.L630-.L1592
	.byte	3,53,1,4,2,5,13,9
	.half	.L637-.L630
	.byte	3,77,1,9
	.half	.L1593-.L637
	.byte	3,1,1,5,35,9
	.half	.L1594-.L1593
	.byte	3,1,1,5,27,9
	.half	.L1595-.L1594
	.byte	1,5,50,9
	.half	.L1596-.L1595
	.byte	1,5,48,9
	.half	.L1597-.L1596
	.byte	1,9
	.half	.L1598-.L1597
	.byte	3,1,1,5,40,9
	.half	.L1599-.L1598
	.byte	1,5,70,9
	.half	.L1600-.L1599
	.byte	1,5,68,9
	.half	.L1601-.L1600
	.byte	1,4,1,5,39,9
	.half	.L145-.L1601
	.byte	3,49,1,5,37,9
	.half	.L1602-.L145
	.byte	1,5,1,9
	.half	.L132-.L1602
	.byte	3,5,1,7,9
	.half	.L312-.L132
	.byte	0,1,1
.L1518:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_ranges'
.L311:
	.word	-1,.L242,0,.L312-.L242,0,0
.L636:
	.word	-1,.L242,.L629-.L242,.L630-.L242,.L637-.L242,.L145-.L242,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_info'
.L313:
	.word	389
	.half	3
	.word	.L314
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L316,.L315
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_TxWaitForFlowControlFrame',0,1,128,6,13,1,1
	.word	.L244,.L646,.L243
	.byte	4
	.byte	'ChannelId',0,1,128,6,69
	.word	.L393,.L647
	.byte	5
	.word	.L244,.L646
	.byte	6
	.byte	'Channel',0,1,130,6,23
	.word	.L457,.L648
	.byte	6
	.byte	'Connection',0,1,131,6,28
	.word	.L499,.L649
	.byte	6
	.byte	'Value',0,1,132,6,20
	.word	.L386,.L650
	.byte	6
	.byte	'ElapsedValue',0,1,133,6,20
	.word	.L386,.L651
	.byte	7
	.word	.L404,.L652,.L653
	.byte	8
	.word	.L407,.L654
	.byte	8
	.word	.L409,.L655
	.byte	9
	.word	.L411,.L652,.L653
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L656
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_abbrev'
.L314:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_line'
.L315:
	.word	.L1604-.L1603
.L1603:
	.half	3
	.word	.L1606-.L1605
.L1605:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1606:
	.byte	5,13,7,0,5,2
	.word	.L244
	.byte	3,255,5,1,5,47,9
	.half	.L972-.L244
	.byte	3,2,1,5,34,9
	.half	.L1607-.L972
	.byte	1,5,47,9
	.half	.L1608-.L1607
	.byte	1,5,35,9
	.half	.L974-.L1608
	.byte	3,2,1,5,26,9
	.half	.L1609-.L974
	.byte	1,5,28,9
	.half	.L1610-.L1609
	.byte	3,3,1,5,36,9
	.half	.L1611-.L1610
	.byte	1,4,2,5,30,9
	.half	.L652-.L1611
	.byte	3,221,124,1,5,14,9
	.half	.L976-.L652
	.byte	3,2,1,5,12,9
	.half	.L1612-.L976
	.byte	1,5,21,9
	.half	.L1613-.L1612
	.byte	3,2,1,5,28,9
	.half	.L1614-.L1613
	.byte	1,5,19,9
	.half	.L1615-.L1614
	.byte	1,4,1,5,8,9
	.half	.L653-.L1615
	.byte	3,163,3,1,5,22,9
	.half	.L1616-.L653
	.byte	1,5,5,9
	.half	.L977-.L1616
	.byte	1,5,22,7,9
	.half	.L1617-.L977
	.byte	3,2,1,5,51,9
	.half	.L1618-.L1617
	.byte	1,5,42,9
	.half	.L1619-.L1618
	.byte	1,5,34,9
	.half	.L1620-.L1619
	.byte	1,5,42,9
	.half	.L975-.L1620
	.byte	1,5,12,9
	.half	.L978-.L975
	.byte	3,1,1,5,27,9
	.half	.L1621-.L978
	.byte	1,5,9,9
	.half	.L1622-.L1621
	.byte	1,5,13,7,9
	.half	.L1623-.L1622
	.byte	3,2,1,9
	.half	.L979-.L1623
	.byte	3,1,1,5,41,9
	.half	.L1624-.L979
	.byte	3,1,1,5,39,9
	.half	.L1625-.L1624
	.byte	1,5,1,9
	.half	.L147-.L1625
	.byte	3,5,1,7,9
	.half	.L317-.L147
	.byte	0,1,1
.L1604:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_ranges'
.L316:
	.word	-1,.L244,0,.L317-.L244,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_info'
.L318:
	.word	393
	.half	3
	.word	.L319
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L321,.L320
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_TxWaitForTransmitConfirmation',0,1,161,6,13,1,1
	.word	.L246,.L657,.L245
	.byte	4
	.byte	'ChannelId',0,1,161,6,73
	.word	.L393,.L658
	.byte	5
	.word	.L246,.L657
	.byte	6
	.byte	'Channel',0,1,163,6,23
	.word	.L457,.L659
	.byte	6
	.byte	'Connection',0,1,164,6,28
	.word	.L499,.L660
	.byte	6
	.byte	'Value',0,1,165,6,20
	.word	.L386,.L661
	.byte	6
	.byte	'ElapsedValue',0,1,166,6,20
	.word	.L386,.L662
	.byte	7
	.word	.L404,.L663,.L664
	.byte	8
	.word	.L407,.L665
	.byte	8
	.word	.L409,.L666
	.byte	9
	.word	.L411,.L663,.L664
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L667
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_abbrev'
.L319:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_line'
.L320:
	.word	.L1627-.L1626
.L1626:
	.half	3
	.word	.L1629-.L1628
.L1628:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1629:
	.byte	5,13,7,0,5,2
	.word	.L246
	.byte	3,160,6,1,5,47,9
	.half	.L980-.L246
	.byte	3,2,1,5,34,9
	.half	.L1630-.L980
	.byte	1,5,47,9
	.half	.L1631-.L1630
	.byte	1,5,35,9
	.half	.L982-.L1631
	.byte	3,2,1,5,26,9
	.half	.L1632-.L982
	.byte	1,5,28,9
	.half	.L1633-.L1632
	.byte	3,3,1,5,36,9
	.half	.L1634-.L1633
	.byte	1,4,2,5,30,9
	.half	.L663-.L1634
	.byte	3,188,124,1,5,14,9
	.half	.L984-.L663
	.byte	3,2,1,5,12,9
	.half	.L1635-.L984
	.byte	1,5,21,9
	.half	.L1636-.L1635
	.byte	3,2,1,5,28,9
	.half	.L1637-.L1636
	.byte	1,5,19,9
	.half	.L1638-.L1637
	.byte	1,4,1,5,8,9
	.half	.L664-.L1638
	.byte	3,196,3,1,5,22,9
	.half	.L1639-.L664
	.byte	1,5,5,9
	.half	.L985-.L1639
	.byte	1,5,22,7,9
	.half	.L1640-.L985
	.byte	3,2,1,5,51,9
	.half	.L1641-.L1640
	.byte	1,5,42,9
	.half	.L1642-.L1641
	.byte	1,5,34,9
	.half	.L1643-.L1642
	.byte	1,5,42,9
	.half	.L983-.L1643
	.byte	1,5,12,9
	.half	.L986-.L983
	.byte	3,1,1,5,27,9
	.half	.L1644-.L986
	.byte	1,5,9,9
	.half	.L1645-.L1644
	.byte	1,5,13,7,9
	.half	.L1646-.L1645
	.byte	3,3,1,9
	.half	.L1647-.L1646
	.byte	3,1,1,5,51,9
	.half	.L1648-.L1647
	.byte	3,2,1,5,13,9
	.half	.L1649-.L1648
	.byte	1,5,40,9
	.half	.L1650-.L1649
	.byte	1,5,73,9
	.half	.L1651-.L1650
	.byte	1,5,71,9
	.half	.L1652-.L1651
	.byte	1,5,41,9
	.half	.L1653-.L1652
	.byte	3,1,1,5,39,9
	.half	.L1654-.L1653
	.byte	1,5,1,9
	.half	.L149-.L1654
	.byte	3,5,1,7,9
	.half	.L322-.L149
	.byte	0,1,1
.L1627:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_ranges'
.L321:
	.word	-1,.L246,0,.L322-.L246,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_info'
.L323:
	.word	677
	.half	3
	.word	.L324
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L326,.L325
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_TxTransmissionRequestAccepted',0,1,197,6,13,1,1
	.word	.L248,.L668,.L247
	.byte	4
	.byte	'ChannelId',0,1,197,6,73
	.word	.L393,.L669
	.byte	5
	.word	.L248,.L668
	.byte	6
	.byte	'CAN_DL',0,1,199,6,8
	.word	.L393,.L670
	.byte	6
	.byte	'DataOffset',0,1,200,6,8
	.word	.L393,.L671
	.byte	6
	.byte	'SduInfo',0,1,201,6,17
	.word	.L395,.L672
	.byte	6
	.byte	'PduInfo',0,1,202,6,14
	.word	.L395,.L673
	.byte	6
	.byte	'TxConfirmationChannel',0,1,203,6,25
	.word	.L393,.L674
	.byte	6
	.byte	'Channel',0,1,204,6,21
	.word	.L402,.L675
	.byte	6
	.byte	'Connection',0,1,205,6,28
	.word	.L499,.L676
	.byte	6
	.byte	'Context',0,1,206,6,25
	.word	.L620,.L677
	.byte	7
	.word	.L404,.L678,.L679
	.byte	8
	.word	.L407,.L680
	.byte	8
	.word	.L409,.L681
	.byte	9
	.word	.L411,.L678,.L679
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L682
	.byte	0,0,7
	.word	.L628,.L683,.L684
	.byte	8
	.word	.L631,.L685
	.byte	8
	.word	.L633,.L686
	.byte	10
	.word	.L635,.L687
	.byte	6
	.byte	'Result',0,2,166,5,20
	.word	.L393,.L689
	.byte	6
	.byte	'CanIfTxInfo',0,2,167,5,17
	.word	.L395,.L690
	.byte	6
	.byte	'SduBuffer',0,2,168,5,11
	.word	.L640,.L691
	.byte	7
	.word	.L520,.L692,.L693
	.byte	8
	.word	.L522,.L694
	.byte	8
	.word	.L524,.L695
	.byte	11
	.word	.L526,.L692,.L693
	.byte	0,0,0,7
	.word	.L628,.L688,.L166
	.byte	8
	.word	.L631,.L685
	.byte	8
	.word	.L633,.L686
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_abbrev'
.L324:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,1,49,16,85,6,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_line'
.L325:
	.word	.L1656-.L1655
.L1655:
	.half	3
	.word	.L1658-.L1657
.L1657:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1658:
	.byte	5,13,7,0,5,2
	.word	.L248
	.byte	3,196,6,1,5,32,9
	.half	.L987-.L248
	.byte	3,7,1,5,45,9
	.half	.L1659-.L987
	.byte	1,5,23,9
	.half	.L989-.L1659
	.byte	3,4,1,5,25,9
	.half	.L1660-.L989
	.byte	3,1,1,5,23,9
	.half	.L1661-.L1660
	.byte	1,5,28,9
	.half	.L1662-.L1661
	.byte	3,2,1,5,19,9
	.half	.L1663-.L1662
	.byte	1,5,36,9
	.half	.L1664-.L1663
	.byte	3,2,1,5,54,9
	.half	.L1665-.L1664
	.byte	1,4,2,5,30,9
	.half	.L678-.L1665
	.byte	3,143,124,1,5,14,9
	.half	.L990-.L678
	.byte	3,2,1,5,12,9
	.half	.L1666-.L990
	.byte	1,5,21,9
	.half	.L1667-.L1666
	.byte	3,2,1,5,28,9
	.half	.L1668-.L1667
	.byte	1,5,19,9
	.half	.L1669-.L1668
	.byte	1,4,1,5,22,9
	.half	.L679-.L1669
	.byte	3,239,3,1,5,20,9
	.half	.L991-.L679
	.byte	1,5,23,9
	.half	.L1670-.L991
	.byte	3,1,1,5,21,9
	.half	.L1671-.L1670
	.byte	1,5,26,9
	.half	.L1672-.L1671
	.byte	3,2,1,5,24,9
	.half	.L1673-.L1672
	.byte	1,5,19,9
	.half	.L1674-.L1673
	.byte	3,4,1,5,33,9
	.half	.L1675-.L1674
	.byte	1,5,18,9
	.half	.L1676-.L1675
	.byte	1,5,48,7,9
	.half	.L1677-.L1676
	.byte	3,1,1,5,39,9
	.half	.L1678-.L1677
	.byte	1,5,19,9
	.half	.L1679-.L1678
	.byte	1,5,31,9
	.half	.L1680-.L1679
	.byte	1,5,39,9
	.half	.L1681-.L1680
	.byte	1,5,63,9
	.half	.L992-.L1681
	.byte	1,5,88,9
	.half	.L151-.L992
	.byte	3,127,1,5,29,9
	.half	.L152-.L151
	.byte	3,2,1,5,56,7,9
	.half	.L1682-.L152
	.byte	1,5,94,9
	.half	.L1683-.L1682
	.byte	1,5,83,9
	.half	.L1684-.L1683
	.byte	1,5,114,9
	.half	.L994-.L1684
	.byte	1,5,54,9
	.half	.L153-.L994
	.byte	1,5,5,9
	.half	.L154-.L153
	.byte	3,2,1,5,45,7,9
	.half	.L1685-.L154
	.byte	3,2,1,5,33,9
	.half	.L995-.L1685
	.byte	1,5,35,9
	.half	.L1686-.L995
	.byte	3,1,1,5,23,9
	.half	.L1687-.L1686
	.byte	1,5,46,9
	.half	.L1688-.L1687
	.byte	3,1,1,5,34,9
	.half	.L1689-.L1688
	.byte	1,5,38,9
	.half	.L1690-.L1689
	.byte	3,1,1,5,36,9
	.half	.L1691-.L1690
	.byte	1,5,46,9
	.half	.L1692-.L1691
	.byte	3,1,1,5,37,9
	.half	.L1693-.L1692
	.byte	1,5,23,9
	.half	.L1694-.L1693
	.byte	3,1,1,5,21,9
	.half	.L1695-.L1694
	.byte	1,5,50,9
	.half	.L1696-.L1695
	.byte	3,2,1,5,22,9
	.half	.L1697-.L1696
	.byte	1,5,39,9
	.half	.L1698-.L1697
	.byte	1,5,92,9
	.half	.L1699-.L1698
	.byte	1,5,71,9
	.half	.L1700-.L1699
	.byte	1,5,84,9
	.half	.L1701-.L1700
	.byte	1,5,69,9
	.half	.L1702-.L1701
	.byte	1,5,18,9
	.half	.L996-.L1702
	.byte	3,1,1,5,27,9
	.half	.L997-.L996
	.byte	3,1,1,5,41,9
	.half	.L1703-.L997
	.byte	3,1,1,5,33,9
	.half	.L1704-.L1703
	.byte	1,5,80,7,9
	.half	.L1705-.L1704
	.byte	1,5,94,9
	.half	.L998-.L1705
	.byte	1,5,87,9
	.half	.L156-.L998
	.byte	3,1,1,5,72,9
	.half	.L999-.L156
	.byte	1,5,31,9
	.half	.L157-.L999
	.byte	3,127,1,5,27,9
	.half	.L1706-.L157
	.byte	3,2,1,5,25,9
	.half	.L1707-.L1706
	.byte	1,5,39,9
	.half	.L1708-.L1707
	.byte	3,1,1,5,27,9
	.half	.L1709-.L1708
	.byte	1,5,32,9
	.half	.L1710-.L1709
	.byte	3,2,1,5,42,9
	.half	.L993-.L1710
	.byte	1,5,19,9
	.half	.L988-.L993
	.byte	3,2,1,5,9,9
	.half	.L1711-.L988
	.byte	1,5,44,7,9
	.half	.L1712-.L1711
	.byte	3,2,1,5,35,9
	.half	.L1713-.L1712
	.byte	1,5,41,9
	.half	.L1714-.L1713
	.byte	3,1,1,5,39,9
	.half	.L1715-.L1714
	.byte	1,5,48,9
	.half	.L1716-.L1715
	.byte	3,1,1,4,2,5,43,9
	.half	.L683-.L1716
	.byte	3,177,126,1,5,27,9
	.half	.L1717-.L683
	.byte	1,5,32,9
	.half	.L1718-.L1717
	.byte	3,2,1,5,12,9
	.half	.L692-.L1718
	.byte	3,202,125,1,5,44,9
	.half	.L1719-.L692
	.byte	1,5,37,9
	.half	.L159-.L1719
	.byte	1,5,5,9
	.half	.L160-.L159
	.byte	1,9
	.half	.L161-.L160
	.byte	3,182,2,1,5,48,7,9
	.half	.L693-.L161
	.byte	3,2,1,5,32,9
	.half	.L1720-.L693
	.byte	1,5,16,9
	.half	.L1721-.L1720
	.byte	3,1,1,5,60,9
	.half	.L1000-.L1721
	.byte	3,127,1,5,34,9
	.half	.L162-.L1000
	.byte	3,6,1,5,32,9
	.half	.L1722-.L162
	.byte	1,5,19,9
	.half	.L1723-.L1722
	.byte	3,1,1,5,18,9
	.half	.L1724-.L1723
	.byte	1,5,91,9
	.half	.L1001-.L1724
	.byte	1,5,84,9
	.half	.L164-.L1001
	.byte	1,5,5,9
	.half	.L163-.L164
	.byte	3,3,1,5,73,7,9
	.half	.L1725-.L163
	.byte	3,2,1,5,9,9
	.half	.L1726-.L1725
	.byte	1,5,44,9
	.half	.L1727-.L1726
	.byte	1,5,36,9
	.half	.L1002-.L1727
	.byte	1,5,64,9
	.half	.L1728-.L1002
	.byte	1,5,34,9
	.half	.L1729-.L1728
	.byte	3,1,1,5,44,9
	.half	.L1730-.L1729
	.byte	1,5,9,9
	.half	.L1731-.L1730
	.byte	1,4,1,5,38,7,9
	.half	.L684-.L1731
	.byte	3,190,1,1,4,2,5,13,9
	.half	.L688-.L684
	.byte	3,196,126,1,9
	.half	.L1732-.L688
	.byte	3,1,1,5,35,9
	.half	.L1733-.L1732
	.byte	3,1,1,5,27,9
	.half	.L1734-.L1733
	.byte	1,5,50,9
	.half	.L1735-.L1734
	.byte	1,5,48,9
	.half	.L1736-.L1735
	.byte	1,9
	.half	.L1737-.L1736
	.byte	3,1,1,5,40,9
	.half	.L1738-.L1737
	.byte	1,5,70,9
	.half	.L1739-.L1738
	.byte	1,5,68,9
	.half	.L1740-.L1739
	.byte	1,4,1,5,39,9
	.half	.L166-.L1740
	.byte	3,186,1,1,5,37,9
	.half	.L1741-.L166
	.byte	1,5,1,9
	.half	.L155-.L1741
	.byte	3,5,1,7,9
	.half	.L327-.L155
	.byte	0,1,1
.L1656:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_ranges'
.L326:
	.word	-1,.L248,0,.L327-.L248,0,0
.L687:
	.word	-1,.L248,.L683-.L248,.L684-.L248,.L688-.L248,.L166-.L248,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_info'
.L328:
	.word	210
	.half	3
	.word	.L329
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L331,.L330
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_Idle',0,1,136,7,13,1,1
	.word	.L250,.L696,.L249
	.byte	4
	.byte	'ChannelId',0,1,136,7,48
	.word	.L393,.L697
	.byte	5
	.word	.L250,.L696
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_abbrev'
.L329:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_line'
.L330:
	.word	.L1743-.L1742
.L1742:
	.half	3
	.word	.L1745-.L1744
.L1744:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0,0
.L1745:
	.byte	5,1,7,0,5,2
	.word	.L250
	.byte	3,138,7,1,7,9
	.half	.L332-.L250
	.byte	0,1,1
.L1743:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_ranges'
.L331:
	.word	-1,.L250,0,.L332-.L250,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_info'
.L333:
	.word	390
	.half	3
	.word	.L334
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L336,.L335
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_RxReceptionRequestAccepted',0,1,149,7,13,1,1
	.word	.L252,.L698,.L251
	.byte	4
	.byte	'ChannelId',0,1,149,7,70
	.word	.L393,.L699
	.byte	5
	.word	.L252,.L698
	.byte	6
	.byte	'Channel',0,1,151,7,23
	.word	.L457,.L700
	.byte	6
	.byte	'Connection',0,1,152,7,28
	.word	.L592,.L701
	.byte	6
	.byte	'Value',0,1,153,7,20
	.word	.L386,.L702
	.byte	6
	.byte	'ElapsedValue',0,1,154,7,20
	.word	.L386,.L703
	.byte	7
	.word	.L404,.L704,.L705
	.byte	8
	.word	.L407,.L706
	.byte	8
	.word	.L409,.L707
	.byte	9
	.word	.L411,.L704,.L705
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L708
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_abbrev'
.L334:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_line'
.L335:
	.word	.L1747-.L1746
.L1746:
	.half	3
	.word	.L1749-.L1748
.L1748:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1749:
	.byte	5,13,7,0,5,2
	.word	.L252
	.byte	3,148,7,1,5,47,9
	.half	.L1003-.L252
	.byte	3,2,1,5,34,9
	.half	.L1750-.L1003
	.byte	1,5,47,9
	.half	.L1751-.L1750
	.byte	1,5,35,9
	.half	.L1005-.L1751
	.byte	3,2,1,5,26,9
	.half	.L1752-.L1005
	.byte	1,5,28,9
	.half	.L1753-.L1752
	.byte	3,3,1,5,36,9
	.half	.L1754-.L1753
	.byte	1,4,2,5,30,9
	.half	.L704-.L1754
	.byte	3,200,123,1,5,14,9
	.half	.L1007-.L704
	.byte	3,2,1,5,12,9
	.half	.L1755-.L1007
	.byte	1,5,21,9
	.half	.L1756-.L1755
	.byte	3,2,1,5,28,9
	.half	.L1757-.L1756
	.byte	1,5,19,9
	.half	.L1758-.L1757
	.byte	1,4,1,5,8,9
	.half	.L705-.L1758
	.byte	3,184,4,1,5,22,9
	.half	.L1759-.L705
	.byte	1,5,5,9
	.half	.L1008-.L1759
	.byte	1,5,22,7,9
	.half	.L1760-.L1008
	.byte	3,2,1,5,51,9
	.half	.L1761-.L1760
	.byte	1,5,42,9
	.half	.L1762-.L1761
	.byte	1,5,34,9
	.half	.L1763-.L1762
	.byte	1,5,42,9
	.half	.L1006-.L1763
	.byte	1,5,12,9
	.half	.L1009-.L1006
	.byte	3,1,1,5,27,9
	.half	.L1764-.L1009
	.byte	1,5,9,9
	.half	.L1765-.L1764
	.byte	1,5,13,7,9
	.half	.L1766-.L1765
	.byte	3,2,1,9
	.half	.L1010-.L1766
	.byte	3,1,1,5,41,9
	.half	.L1767-.L1010
	.byte	3,1,1,5,39,9
	.half	.L1768-.L1767
	.byte	1,5,1,9
	.half	.L168-.L1768
	.byte	3,5,1,7,9
	.half	.L337-.L168
	.byte	0,1,1
.L1747:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_ranges'
.L336:
	.word	-1,.L252,0,.L337-.L252,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_info'
.L338:
	.word	1142
	.half	3
	.word	.L339
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L341,.L340
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_RxSendFlowControlFrame',0,1,182,7,13,1,1
	.word	.L254,.L709,.L253
	.byte	4
	.byte	'ChannelId',0,1,182,7,66
	.word	.L393,.L710
	.byte	5
	.word	.L254,.L709
	.byte	6
	.byte	'PduInfo',0,1,184,7,14
	.word	.L395,.L711
	.byte	6
	.byte	'SduInfo',0,1,185,7,17
	.word	.L395,.L712
	.byte	6
	.byte	'ElapsedValue',0,1,186,7,20
	.word	.L386,.L713
	.byte	6
	.byte	'TxConfirmationChannel',0,1,187,7,25
	.word	.L393,.L714
	.byte	6
	.byte	'Channel',0,1,188,7,23
	.word	.L457,.L715
	.byte	6
	.byte	'Connection',0,1,189,7,28
	.word	.L592,.L716
	.byte	6
	.byte	'Value',0,1,190,7,17
	.word	.L386,.L717
	.byte	6
	.byte	'IsFcReady',0,1,191,7,13
	.word	.L393,.L718
	.byte	6
	.byte	'Context',0,1,192,7,25
	.word	.L620,.L719
	.byte	7
	.word	.L404,.L720,.L721
	.byte	8
	.word	.L407,.L722
	.byte	8
	.word	.L409,.L723
	.byte	9
	.word	.L411,.L720,.L721
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L724
	.byte	0,0,7
	.word	.L725,.L726,.L727
	.byte	8
	.word	.L728,.L729
	.byte	8
	.word	.L730,.L731
	.byte	9
	.word	.L732,.L726,.L727
	.byte	6
	.byte	'BSMax',0,2,216,8,11
	.word	.L393,.L733
	.byte	6
	.byte	'BlockCfsRemaining',0,2,217,8,19
	.word	.L386,.L734
	.byte	6
	.byte	'Channel',0,2,218,8,23
	.word	.L457,.L735
	.byte	6
	.byte	'BS',0,2,219,8,11
	.word	.L393,.L736
	.byte	6
	.byte	'Connection',0,2,220,8,28
	.word	.L592,.L737
	.byte	6
	.byte	'OneFramePayloadLength',0,2,221,8,19
	.word	.L386,.L738
	.byte	7
	.word	.L594,.L739,.L184
	.byte	8
	.word	.L596,.L740
	.byte	8
	.word	.L598,.L741
	.byte	9
	.word	.L600,.L739,.L184
	.byte	6
	.byte	'value',0,2,195,8,11
	.word	.L393,.L742
	.byte	0,0,7
	.word	.L743,.L192,.L198
	.byte	8
	.word	.L744,.L745
	.byte	9
	.word	.L746,.L192,.L198
	.byte	6
	.byte	'PayLoadLength',0,2,172,4,11
	.word	.L393,.L747
	.byte	6
	.byte	'Connection',0,2,173,4,25
	.word	.L592,.L748
	.byte	6
	.byte	'RX_DL',0,2,174,4,11
	.word	.L393,.L749
	.byte	6
	.byte	'AddressSize',0,2,175,4,11
	.word	.L393,.L750
	.byte	6
	.byte	'SduLength',0,2,176,4,19
	.word	.L386,.L751
	.byte	0,0,0,0,7
	.word	.L752,.L753,.L176
	.byte	8
	.word	.L754,.L755
	.byte	8
	.word	.L756,.L757
	.byte	8
	.word	.L758,.L759
	.byte	8
	.word	.L760,.L761
	.byte	9
	.word	.L762,.L753,.L176
	.byte	7
	.word	.L628,.L763,.L176
	.byte	8
	.word	.L631,.L764
	.byte	8
	.word	.L633,.L765
	.byte	9
	.word	.L635,.L763,.L176
	.byte	6
	.byte	'Result',0,2,166,5,20
	.word	.L393,.L766
	.byte	6
	.byte	'CanIfTxInfo',0,2,167,5,17
	.word	.L395,.L767
	.byte	6
	.byte	'SduBuffer',0,2,168,5,11
	.word	.L640,.L768
	.byte	7
	.word	.L520,.L769,.L770
	.byte	8
	.word	.L522,.L771
	.byte	8
	.word	.L524,.L772
	.byte	10
	.word	.L526,.L769,.L770
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_abbrev'
.L339:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_line'
.L340:
	.word	.L1770-.L1769
.L1769:
	.half	3
	.word	.L1772-.L1771
.L1771:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1772:
	.byte	5,13,7,0,5,2
	.word	.L254
	.byte	3,181,7,1,5,34,9
	.half	.L1012-.L254
	.byte	3,6,1,5,47,9
	.half	.L1773-.L1012
	.byte	1,5,32,9
	.half	.L1013-.L1773
	.byte	3,2,1,5,23,9
	.half	.L1774-.L1013
	.byte	1,5,33,9
	.half	.L1775-.L1774
	.byte	3,1,1,5,25,9
	.half	.L1776-.L1775
	.byte	1,5,63,9
	.half	.L1777-.L1776
	.byte	1,5,70,9
	.half	.L1778-.L1777
	.byte	1,5,63,9
	.half	.L170-.L1778
	.byte	1,5,23,9
	.half	.L171-.L170
	.byte	3,3,1,5,25,9
	.half	.L1779-.L171
	.byte	3,1,1,5,23,9
	.half	.L1780-.L1779
	.byte	1,5,28,9
	.half	.L1781-.L1780
	.byte	3,2,1,5,36,9
	.half	.L1782-.L1781
	.byte	1,4,2,5,30,9
	.half	.L720-.L1782
	.byte	3,159,123,1,5,14,9
	.half	.L1016-.L720
	.byte	3,2,1,5,12,9
	.half	.L1783-.L1016
	.byte	1,5,21,9
	.half	.L1784-.L1783
	.byte	3,2,1,5,28,9
	.half	.L1785-.L1784
	.byte	1,5,19,9
	.half	.L1786-.L1785
	.byte	1,4,1,5,22,9
	.half	.L721-.L1786
	.byte	3,223,4,1,5,20,9
	.half	.L1787-.L721
	.byte	1,5,23,9
	.half	.L1788-.L1787
	.byte	3,1,1,5,21,9
	.half	.L1789-.L1788
	.byte	1,5,25,9
	.half	.L1790-.L1789
	.byte	3,2,1,5,23,9
	.half	.L1791-.L1790
	.byte	1,5,26,9
	.half	.L1792-.L1791
	.byte	3,1,1,5,24,9
	.half	.L1793-.L1792
	.byte	1,5,19,9
	.half	.L1794-.L1793
	.byte	3,4,1,5,33,9
	.half	.L1795-.L1794
	.byte	1,5,18,9
	.half	.L1796-.L1795
	.byte	1,5,19,7,9
	.half	.L1797-.L1796
	.byte	3,1,1,5,48,9
	.half	.L1798-.L1797
	.byte	1,5,39,9
	.half	.L1799-.L1798
	.byte	1,5,31,9
	.half	.L1800-.L1799
	.byte	1,5,39,9
	.half	.L1801-.L1800
	.byte	1,5,63,9
	.half	.L1018-.L1801
	.byte	1,5,66,9
	.half	.L172-.L1018
	.byte	3,127,1,5,29,9
	.half	.L173-.L172
	.byte	3,2,1,5,56,7,9
	.half	.L1802-.L173
	.byte	1,5,94,9
	.half	.L1803-.L1802
	.byte	1,5,83,9
	.half	.L1804-.L1803
	.byte	1,5,114,9
	.half	.L1019-.L1804
	.byte	1,5,54,9
	.half	.L174-.L1019
	.byte	1,5,5,9
	.half	.L175-.L174
	.byte	3,2,1,5,38,7,9
	.half	.L1805-.L175
	.byte	3,2,1,5,36,9
	.half	.L1020-.L1805
	.byte	1,5,45,9
	.half	.L1806-.L1020
	.byte	3,1,1,5,33,9
	.half	.L1807-.L1806
	.byte	1,5,35,9
	.half	.L1808-.L1807
	.byte	3,1,1,5,23,9
	.half	.L1809-.L1808
	.byte	1,5,46,9
	.half	.L1810-.L1809
	.byte	3,1,1,5,34,9
	.half	.L1811-.L1810
	.byte	1,5,39,9
	.half	.L1812-.L1811
	.byte	3,1,1,5,27,9
	.half	.L1813-.L1812
	.byte	1,5,19,9
	.half	.L1814-.L1813
	.byte	3,2,1,5,9,9
	.half	.L1815-.L1814
	.byte	1,5,44,7,9
	.half	.L1816-.L1815
	.byte	3,2,1,5,63,9
	.half	.L1015-.L1816
	.byte	1,5,81,9
	.half	.L1817-.L1015
	.byte	1,5,13,9
	.half	.L1017-.L1817
	.byte	1,5,17,7,9
	.half	.L1818-.L1017
	.byte	3,2,1,9
	.half	.L1819-.L1818
	.byte	3,1,1,5,39,9
	.half	.L1820-.L1819
	.byte	3,1,1,5,31,9
	.half	.L1821-.L1820
	.byte	1,5,53,9
	.half	.L1822-.L1821
	.byte	1,5,51,9
	.half	.L1823-.L1822
	.byte	1,5,27,9
	.half	.L1824-.L1823
	.byte	3,1,1,5,97,9
	.half	.L1825-.L1824
	.byte	3,125,1,5,15,9
	.half	.L178-.L1825
	.byte	3,7,1,5,5,9
	.half	.L1826-.L178
	.byte	1,5,49,7,9
	.half	.L1827-.L1826
	.byte	3,3,1,4,2,5,47,9
	.half	.L726-.L1827
	.byte	3,241,0,1,5,23,9
	.half	.L1828-.L726
	.byte	3,1,1,5,70,9
	.half	.L1021-.L1828
	.byte	3,1,1,5,41,9
	.half	.L1829-.L1021
	.byte	1,5,53,9
	.half	.L1830-.L1829
	.byte	1,5,61,9
	.half	.L1831-.L1830
	.byte	1,5,43,9
	.half	.L1022-.L1831
	.byte	3,2,1,9
	.half	.L1832-.L1022
	.byte	3,127,1,5,71,9
	.half	.L1833-.L1832
	.byte	3,1,1,5,60,9
	.half	.L1834-.L1833
	.byte	1,5,72,9
	.half	.L1835-.L1834
	.byte	3,127,1,5,90,9
	.half	.L1836-.L1835
	.byte	3,1,1,5,15,9
	.half	.L1024-.L1836
	.byte	3,4,1,5,31,9
	.half	.L1837-.L1024
	.byte	1,5,5,9
	.half	.L1838-.L1837
	.byte	1,5,60,7,9
	.half	.L1839-.L1838
	.byte	3,3,1,5,13,9
	.half	.L739-.L1839
	.byte	3,96,1,5,43,9
	.half	.L1025-.L739
	.byte	1,5,36,9
	.half	.L182-.L1025
	.byte	1,5,12,9
	.half	.L183-.L182
	.byte	3,3,1,5,5,9
	.half	.L1840-.L183
	.byte	1,5,33,9
	.half	.L184-.L1840
	.byte	3,31,1,5,9,9
	.half	.L1841-.L184
	.byte	1,5,23,7,9
	.half	.L1842-.L1841
	.byte	3,2,1,5,36,9
	.half	.L185-.L1842
	.byte	3,4,1,5,18,9
	.half	.L1030-.L185
	.byte	1,5,19,9
	.half	.L1031-.L1030
	.byte	3,1,1,5,40,7,9
	.half	.L1843-.L1031
	.byte	1,5,58,7,9
	.half	.L1026-.L1843
	.byte	1,5,50,9
	.half	.L187-.L1026
	.byte	1,5,9,9
	.half	.L181-.L187
	.byte	3,4,1,5,43,7,9
	.half	.L1032-.L181
	.byte	1,5,34,9
	.half	.L1844-.L1032
	.byte	1,5,6,7,9
	.half	.L190-.L1844
	.byte	3,1,1,5,37,7,9
	.half	.L1845-.L190
	.byte	1,5,31,9
	.half	.L1029-.L1845
	.byte	1,5,87,7,9
	.half	.L1846-.L1029
	.byte	1,5,78,9
	.half	.L1847-.L1846
	.byte	1,5,31,7,9
	.half	.L191-.L1847
	.byte	3,2,1,5,29,9
	.half	.L1848-.L191
	.byte	1,5,44,9
	.half	.L1849-.L1848
	.byte	1,5,73,9
	.half	.L192-.L1849
	.byte	3,184,123,1,5,84,9
	.half	.L1850-.L192
	.byte	1,5,58,9
	.half	.L1851-.L1850
	.byte	1,5,19,9
	.half	.L1033-.L1851
	.byte	3,1,1,5,53,9
	.half	.L1035-.L1033
	.byte	3,1,1,5,42,9
	.half	.L1852-.L1035
	.byte	1,5,55,9
	.half	.L1037-.L1852
	.byte	3,1,1,5,46,9
	.half	.L1039-.L1037
	.byte	3,2,1,5,27,9
	.half	.L1036-.L1039
	.byte	1,5,46,9
	.half	.L1853-.L1036
	.byte	1,5,61,9
	.half	.L1038-.L1853
	.byte	3,1,1,5,24,9
	.half	.L1854-.L1038
	.byte	1,5,12,9
	.half	.L1040-.L1854
	.byte	1,5,78,7,9
	.half	.L1855-.L1040
	.byte	1,5,109,9
	.half	.L196-.L1855
	.byte	1,5,48,9
	.half	.L197-.L196
	.byte	1,5,5,9
	.half	.L1041-.L197
	.byte	1,5,38,9
	.half	.L198-.L1041
	.byte	3,199,4,1,5,49,7,9
	.half	.L1856-.L198
	.byte	1,5,54,9
	.half	.L1042-.L1856
	.byte	1,5,36,9
	.half	.L200-.L1042
	.byte	1,5,28,9
	.half	.L1857-.L200
	.byte	3,1,1,5,26,9
	.half	.L1858-.L1857
	.byte	1,5,31,9
	.half	.L1859-.L1858
	.byte	3,2,1,5,29,9
	.half	.L1860-.L1859
	.byte	1,5,17,9
	.half	.L195-.L1860
	.byte	3,4,1,4,1,5,26,9
	.half	.L727-.L195
	.byte	3,233,126,1,5,18,9
	.half	.L1861-.L727
	.byte	1,5,68,7,9
	.half	.L1862-.L1861
	.byte	1,5,56,9
	.half	.L201-.L1862
	.byte	1,5,15,9
	.half	.L179-.L201
	.byte	3,4,1,5,7,9
	.half	.L1863-.L179
	.byte	1,5,67,7,9
	.half	.L1864-.L1863
	.byte	1,5,51,9
	.half	.L1865-.L1864
	.byte	1,5,67,9
	.half	.L1866-.L1865
	.byte	1,5,50,9
	.half	.L1867-.L1866
	.byte	1,5,15,7,9
	.half	.L1868-.L1867
	.byte	3,1,1,5,24,9
	.half	.L1869-.L1868
	.byte	1,5,15,7,9
	.half	.L204-.L1869
	.byte	1,5,38,9
	.half	.L1870-.L204
	.byte	3,2,1,5,17,9
	.half	.L1871-.L1870
	.byte	1,5,37,7,9
	.half	.L1872-.L1871
	.byte	3,2,1,5,46,9
	.half	.L1873-.L1872
	.byte	3,1,1,5,44,9
	.half	.L1874-.L1873
	.byte	1,5,32,9
	.half	.L1875-.L1874
	.byte	3,1,1,5,39,9
	.half	.L1876-.L1875
	.byte	3,126,1,5,21,9
	.half	.L206-.L1876
	.byte	3,6,1,9
	.half	.L1877-.L206
	.byte	3,1,1,5,43,9
	.half	.L1878-.L1877
	.byte	3,1,1,5,35,9
	.half	.L1879-.L1878
	.byte	1,5,57,9
	.half	.L1880-.L1879
	.byte	1,5,55,9
	.half	.L1881-.L1880
	.byte	1,5,31,9
	.half	.L177-.L1881
	.byte	3,5,1,5,41,9
	.half	.L1027-.L177
	.byte	1,5,61,9
	.half	.L1882-.L1027
	.byte	1,4,2,5,8,9
	.half	.L753-.L1882
	.byte	3,209,125,1,5,52,7,9
	.half	.L1883-.L753
	.byte	1,5,44,9
	.half	.L1884-.L1883
	.byte	1,5,65,9
	.half	.L1885-.L1884
	.byte	1,5,22,7,9
	.half	.L1886-.L1885
	.byte	3,2,1,5,56,9
	.half	.L1887-.L1886
	.byte	1,5,30,9
	.half	.L1888-.L1887
	.byte	3,1,1,5,22,9
	.half	.L1889-.L1888
	.byte	1,5,51,9
	.half	.L1890-.L1889
	.byte	1,5,49,9
	.half	.L1891-.L1890
	.byte	1,5,31,9
	.half	.L1892-.L1891
	.byte	3,1,1,5,23,9
	.half	.L1893-.L1892
	.byte	1,5,46,9
	.half	.L1894-.L1893
	.byte	1,5,44,9
	.half	.L1895-.L1894
	.byte	1,5,43,9
	.half	.L763-.L1895
	.byte	3,85,1,5,27,9
	.half	.L1896-.L763
	.byte	1,5,32,9
	.half	.L1897-.L1896
	.byte	3,2,1,5,12,9
	.half	.L769-.L1897
	.byte	3,202,125,1,5,44,9
	.half	.L1898-.L769
	.byte	1,5,37,9
	.half	.L210-.L1898
	.byte	1,5,5,9
	.half	.L211-.L210
	.byte	1,9
	.half	.L212-.L211
	.byte	3,182,2,1,5,48,7,9
	.half	.L770-.L212
	.byte	3,2,1,5,32,9
	.half	.L1899-.L770
	.byte	1,5,16,9
	.half	.L1900-.L1899
	.byte	3,1,1,5,60,9
	.half	.L1043-.L1900
	.byte	3,127,1,5,34,9
	.half	.L213-.L1043
	.byte	3,6,1,5,32,9
	.half	.L1901-.L213
	.byte	1,5,19,9
	.half	.L1902-.L1901
	.byte	3,1,1,5,18,9
	.half	.L1903-.L1902
	.byte	1,5,91,9
	.half	.L1044-.L1903
	.byte	1,5,84,9
	.half	.L215-.L1044
	.byte	1,5,5,9
	.half	.L214-.L215
	.byte	3,3,1,5,73,7,9
	.half	.L1904-.L214
	.byte	3,2,1,5,9,9
	.half	.L1045-.L1904
	.byte	1,5,44,9
	.half	.L1905-.L1045
	.byte	1,5,36,9
	.half	.L1906-.L1905
	.byte	1,5,64,9
	.half	.L1907-.L1906
	.byte	1,5,34,9
	.half	.L1908-.L1907
	.byte	3,1,1,5,44,9
	.half	.L1909-.L1908
	.byte	1,5,9,9
	.half	.L1910-.L1909
	.byte	1,5,13,7,9
	.half	.L1911-.L1910
	.byte	3,2,1,9
	.half	.L1912-.L1911
	.byte	3,1,1,5,35,9
	.half	.L1913-.L1912
	.byte	3,1,1,5,27,9
	.half	.L1914-.L1913
	.byte	1,5,50,9
	.half	.L1915-.L1914
	.byte	1,5,48,9
	.half	.L1916-.L1915
	.byte	1,9
	.half	.L1917-.L1916
	.byte	3,1,1,5,40,9
	.half	.L1918-.L1917
	.byte	1,5,70,9
	.half	.L1919-.L1918
	.byte	1,5,68,9
	.half	.L1920-.L1919
	.byte	1,4,1,5,1,9
	.half	.L176-.L1920
	.byte	3,196,2,1,7,9
	.half	.L342-.L176
	.byte	0,1,1
.L1770:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_ranges'
.L341:
	.word	-1,.L254,0,.L342-.L254,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_info'
.L343:
	.word	395
	.half	3
	.word	.L344
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L346,.L345
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_RxWaitForFcTransmitConfirmation',0,1,142,8,13,1,1
	.word	.L256,.L773,.L255
	.byte	4
	.byte	'ChannelId',0,1,142,8,75
	.word	.L393,.L774
	.byte	5
	.word	.L256,.L773
	.byte	6
	.byte	'Channel',0,1,144,8,23
	.word	.L457,.L775
	.byte	6
	.byte	'Connection',0,1,145,8,28
	.word	.L592,.L776
	.byte	6
	.byte	'Value',0,1,146,8,20
	.word	.L386,.L777
	.byte	6
	.byte	'ElapsedValue',0,1,147,8,20
	.word	.L386,.L778
	.byte	7
	.word	.L404,.L779,.L780
	.byte	8
	.word	.L407,.L781
	.byte	8
	.word	.L409,.L782
	.byte	9
	.word	.L411,.L779,.L780
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L783
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_abbrev'
.L344:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_line'
.L345:
	.word	.L1922-.L1921
.L1921:
	.half	3
	.word	.L1924-.L1923
.L1923:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1924:
	.byte	5,13,7,0,5,2
	.word	.L256
	.byte	3,141,8,1,5,47,9
	.half	.L1046-.L256
	.byte	3,2,1,5,34,9
	.half	.L1925-.L1046
	.byte	1,5,47,9
	.half	.L1926-.L1925
	.byte	1,5,35,9
	.half	.L1048-.L1926
	.byte	3,2,1,5,26,9
	.half	.L1927-.L1048
	.byte	1,5,28,9
	.half	.L1928-.L1927
	.byte	3,3,1,5,36,9
	.half	.L1929-.L1928
	.byte	1,4,2,5,30,9
	.half	.L779-.L1929
	.byte	3,207,122,1,5,14,9
	.half	.L1050-.L779
	.byte	3,2,1,5,12,9
	.half	.L1930-.L1050
	.byte	1,5,21,9
	.half	.L1931-.L1930
	.byte	3,2,1,5,28,9
	.half	.L1932-.L1931
	.byte	1,5,19,9
	.half	.L1933-.L1932
	.byte	1,4,1,5,8,9
	.half	.L780-.L1933
	.byte	3,177,5,1,5,22,9
	.half	.L1934-.L780
	.byte	1,5,5,9
	.half	.L1051-.L1934
	.byte	1,5,22,7,9
	.half	.L1935-.L1051
	.byte	3,2,1,5,51,9
	.half	.L1936-.L1935
	.byte	1,5,42,9
	.half	.L1937-.L1936
	.byte	1,5,34,9
	.half	.L1938-.L1937
	.byte	1,5,42,9
	.half	.L1049-.L1938
	.byte	1,5,12,9
	.half	.L1052-.L1049
	.byte	3,1,1,5,27,9
	.half	.L1939-.L1052
	.byte	1,5,9,9
	.half	.L1940-.L1939
	.byte	1,5,13,7,9
	.half	.L1941-.L1940
	.byte	3,2,1,9
	.half	.L1942-.L1941
	.byte	3,1,1,5,51,9
	.half	.L1943-.L1942
	.byte	3,2,1,5,13,9
	.half	.L1944-.L1943
	.byte	1,5,40,9
	.half	.L1945-.L1944
	.byte	1,5,73,9
	.half	.L1946-.L1945
	.byte	1,5,71,9
	.half	.L1947-.L1946
	.byte	1,5,41,9
	.half	.L1948-.L1947
	.byte	3,1,1,5,39,9
	.half	.L1949-.L1948
	.byte	1,5,1,9
	.half	.L219-.L1949
	.byte	3,5,1,7,9
	.half	.L347-.L219
	.byte	0,1,1
.L1922:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_ranges'
.L346:
	.word	-1,.L256,0,.L347-.L256,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_info'
.L348:
	.word	389
	.half	3
	.word	.L349
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L351,.L350
	.byte	2
	.word	.L259
	.byte	3
	.byte	'CanTp_Prv_RxWaitForConsecutiveFrame',0,1,177,8,13,1,1
	.word	.L258,.L784,.L257
	.byte	4
	.byte	'ChannelId',0,1,177,8,69
	.word	.L393,.L785
	.byte	5
	.word	.L258,.L784
	.byte	6
	.byte	'Channel',0,1,179,8,23
	.word	.L457,.L786
	.byte	6
	.byte	'Connection',0,1,180,8,28
	.word	.L592,.L787
	.byte	6
	.byte	'Value',0,1,181,8,17
	.word	.L386,.L788
	.byte	6
	.byte	'ElapsedValue',0,1,182,8,17
	.word	.L386,.L789
	.byte	7
	.word	.L404,.L790,.L791
	.byte	8
	.word	.L407,.L792
	.byte	8
	.word	.L409,.L793
	.byte	9
	.word	.L411,.L790,.L791
	.byte	6
	.byte	'ValueIn',0,2,228,2,20
	.word	.L386,.L794
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_abbrev'
.L349:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_line'
.L350:
	.word	.L1951-.L1950
.L1950:
	.half	3
	.word	.L1953-.L1952
.L1952:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.h',0,0,0,0,0
.L1953:
	.byte	5,13,7,0,5,2
	.word	.L258
	.byte	3,176,8,1,5,47,9
	.half	.L1053-.L258
	.byte	3,2,1,5,34,9
	.half	.L1954-.L1053
	.byte	1,5,47,9
	.half	.L1955-.L1954
	.byte	1,5,32,9
	.half	.L1055-.L1955
	.byte	3,2,1,5,23,9
	.half	.L1956-.L1055
	.byte	1,5,28,9
	.half	.L1957-.L1956
	.byte	3,3,1,5,36,9
	.half	.L1958-.L1957
	.byte	1,4,2,5,30,9
	.half	.L790-.L1958
	.byte	3,172,122,1,5,14,9
	.half	.L1057-.L790
	.byte	3,2,1,5,12,9
	.half	.L1959-.L1057
	.byte	1,5,21,9
	.half	.L1960-.L1959
	.byte	3,2,1,5,28,9
	.half	.L1961-.L1960
	.byte	1,5,19,9
	.half	.L1962-.L1961
	.byte	1,4,1,5,5,9
	.half	.L791-.L1962
	.byte	3,212,5,1,5,19,9
	.half	.L1963-.L791
	.byte	1,5,34,9
	.half	.L1964-.L1963
	.byte	1,5,2,9
	.half	.L1058-.L1964
	.byte	1,5,19,7,9
	.half	.L1965-.L1058
	.byte	3,2,1,5,48,9
	.half	.L1966-.L1965
	.byte	1,5,39,9
	.half	.L1967-.L1966
	.byte	1,5,31,9
	.half	.L1968-.L1967
	.byte	1,5,39,9
	.half	.L1056-.L1968
	.byte	1,5,12,9
	.half	.L1059-.L1056
	.byte	3,1,1,5,27,9
	.half	.L1969-.L1059
	.byte	1,5,9,9
	.half	.L1970-.L1969
	.byte	1,5,13,7,9
	.half	.L1971-.L1970
	.byte	3,2,1,9
	.half	.L1060-.L1971
	.byte	3,1,1,5,41,9
	.half	.L1972-.L1060
	.byte	3,1,1,5,39,9
	.half	.L1973-.L1972
	.byte	1,5,1,9
	.half	.L221-.L1973
	.byte	3,5,1,7,9
	.half	.L352-.L221
	.byte	0,1,1
.L1951:
	.sdecl	'.debug_ranges',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_ranges'
.L351:
	.word	-1,.L258,0,.L352-.L258,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_Channel')
	.sect	'.debug_info'
.L353:
	.word	164
	.half	3
	.word	.L354
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_Channel',0,11,8,19
	.word	.L795
	.byte	1,5,3
	.word	CanTp_Channel
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_Channel')
	.sect	'.debug_abbrev'
.L354:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_TxConfirmationChannel')
	.sect	'.debug_info'
.L355:
	.word	178
	.half	3
	.word	.L356
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_TxConfirmationChannel',0,11,9,21
	.word	.L796
	.byte	1,5,3
	.word	CanTp_TxConfirmationChannel
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_TxConfirmationChannel')
	.sect	'.debug_abbrev'
.L356:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_MainFunctionTicks')
	.sect	'.debug_info'
.L357:
	.word	174
	.half	3
	.word	.L358
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_MainFunctionTicks',0,11,17,25
	.word	.L797
	.byte	1,5,3
	.word	CanTp_MainFunctionTicks
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_MainFunctionTicks')
	.sect	'.debug_abbrev'
.L358:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_CfgPtr')
	.sect	'.debug_info'
.L359:
	.word	163
	.half	3
	.word	.L360
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_CfgPtr',0,11,19,25
	.word	.L798
	.byte	1,5,3
	.word	CanTp_CfgPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_CfgPtr')
	.sect	'.debug_abbrev'
.L360:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_SubState')
	.sect	'.debug_info'
.L361:
	.word	165
	.half	3
	.word	.L362
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_SubState',0,11,25,7
	.word	.L799
	.byte	1,5,3
	.word	CanTp_SubState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_SubState')
	.sect	'.debug_abbrev'
.L362:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_State')
	.sect	'.debug_info'
.L363:
	.word	162
	.half	3
	.word	.L364
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_State',0,11,31,13
	.word	.L800
	.byte	1,5,3
	.word	CanTp_State
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_State')
	.sect	'.debug_abbrev'
.L364:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_AddressSize')
	.sect	'.debug_info'
.L365:
	.word	168
	.half	3
	.word	.L366
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_AddressSize',0,11,32,13
	.word	.L801
	.byte	1,5,3
	.word	CanTp_AddressSize
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_AddressSize')
	.sect	'.debug_abbrev'
.L366:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_PciFrameType')
	.sect	'.debug_info'
.L367:
	.word	169
	.half	3
	.word	.L368
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_PciFrameType',0,11,33,13
	.word	.L802
	.byte	1,5,3
	.word	CanTp_PciFrameType
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_PciFrameType')
	.sect	'.debug_abbrev'
.L368:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_PciSize')
	.sect	'.debug_info'
.L369:
	.word	164
	.half	3
	.word	.L370
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_PciSize',0,11,34,13
	.word	.L803
	.byte	1,5,3
	.word	CanTp_PciSize
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_PciSize')
	.sect	'.debug_abbrev'
.L370:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_CanDlTable')
	.sect	'.debug_info'
.L371:
	.word	167
	.half	3
	.word	.L372
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_CanDlTable',0,11,36,13
	.word	.L804
	.byte	1,5,3
	.word	CanTp_CanDlTable
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_CanDlTable')
	.sect	'.debug_abbrev'
.L372:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_ProcessFrame')
	.sect	'.debug_info'
.L373:
	.word	170
	.half	3
	.word	.L374
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_ProcessFrame',0,11,128,9,31
	.word	.L805
	.byte	1,5,3
	.word	CanTp_ProcessFrame
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_ProcessFrame')
	.sect	'.debug_abbrev'
.L374:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_CreateFrame')
	.sect	'.debug_info'
.L375:
	.word	169
	.half	3
	.word	.L376
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_CreateFrame',0,11,137,9,30
	.word	.L806
	.byte	1,5,3
	.word	CanTp_CreateFrame
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_CreateFrame')
	.sect	'.debug_abbrev'
.L376:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_StateFunctions')
	.sect	'.debug_info'
.L377:
	.word	172
	.half	3
	.word	.L378
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_StateFunctions',0,11,242,8,27
	.word	.L807
	.byte	1,5,3
	.word	CanTp_StateFunctions
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_StateFunctions')
	.sect	'.debug_abbrev'
.L378:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('CanTp_PduRConfirmationApis')
	.sect	'.debug_info'
.L379:
	.word	178
	.half	3
	.word	.L380
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanTp\\src\\CanTp_Prv.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'CanTp_PduRConfirmationApis',0,11,146,9,38
	.word	.L808
	.byte	1,5,3
	.word	CanTp_PduRConfirmationApis
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('CanTp_PduRConfirmationApis')
	.sect	'.debug_abbrev'
.L380:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_loc'
.L577:
	.word	0,0
.L562:
	.word	-1,.L238,.L938-.L238,.L107-.L238
	.half	1
	.byte	93
	.word	.L108-.L238,.L101-.L238
	.half	1
	.byte	93
	.word	0,0
.L237:
	.word	-1,.L238,0,.L927-.L238
	.half	2
	.byte	138,0
	.word	.L927-.L238,.L554-.L238
	.half	2
	.byte	138,16
	.word	.L554-.L238,.L554-.L238
	.half	2
	.byte	138,0
	.word	0,0
.L566:
	.word	-1,.L238,.L931-.L238,.L932-.L238
	.half	1
	.byte	98
	.word	0,0
.L555:
	.word	-1,.L238,0,.L928-.L238
	.half	1
	.byte	84
	.word	0,0
.L568:
	.word	-1,.L238,.L934-.L238,.L107-.L238
	.half	1
	.byte	109
	.word	.L108-.L238,.L101-.L238
	.half	1
	.byte	109
	.word	0,0
.L561:
	.word	-1,.L238,.L937-.L238,.L107-.L238
	.half	1
	.byte	92
	.word	.L108-.L238,.L940-.L238
	.half	1
	.byte	92
	.word	0,0
.L579:
	.word	0,0
.L578:
	.word	0,0
.L571:
	.word	0,0
.L564:
	.word	-1,.L238,.L939-.L238,.L107-.L238
	.half	1
	.byte	89
	.word	.L108-.L238,.L101-.L238
	.half	1
	.byte	89
	.word	0,0
.L559:
	.word	0,0
.L556:
	.word	-1,.L238,0,.L929-.L238
	.half	1
	.byte	100
	.word	.L930-.L238,.L107-.L238
	.half	1
	.byte	108
	.word	.L108-.L238,.L554-.L238
	.half	1
	.byte	108
	.word	0,0
.L557:
	.word	-1,.L238,0,.L107-.L238
	.half	2
	.byte	145,112
	.word	.L108-.L238,.L554-.L238
	.half	2
	.byte	145,112
	.word	0,0
.L563:
	.word	-1,.L238,.L935-.L238,.L107-.L238
	.half	1
	.byte	90
	.word	.L108-.L238,.L101-.L238
	.half	1
	.byte	90
	.word	0,0
.L560:
	.word	-1,.L238,.L941-.L238,.L110-.L238
	.half	1
	.byte	111
	.word	.L943-.L238,.L101-.L238
	.half	1
	.byte	111
	.word	0,0
.L558:
	.word	-1,.L238,0,.L107-.L238
	.half	2
	.byte	145,116
	.word	.L108-.L238,.L554-.L238
	.half	2
	.byte	145,116
	.word	0,0
.L565:
	.word	-1,.L238,.L936-.L238,.L107-.L238
	.half	1
	.byte	91
	.word	.L108-.L238,.L101-.L238
	.half	1
	.byte	91
	.word	0,0
.L567:
	.word	-1,.L238,.L933-.L238,.L107-.L238
	.half	1
	.byte	88
	.word	.L108-.L238,.L554-.L238
	.half	1
	.byte	88
	.word	.L944-.L238,.L554-.L238
	.half	1
	.byte	82
	.word	0,0
.L570:
	.word	0,0
.L580:
	.word	-1,.L238,.L942-.L238,.L110-.L238
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_loc'
.L549:
	.word	-1,.L236,.L923-.L236,.L93-.L236
	.half	1
	.byte	90
	.word	0,0
.L235:
	.word	-1,.L236,0,.L913-.L236
	.half	2
	.byte	138,0
	.word	.L913-.L236,.L541-.L236
	.half	2
	.byte	138,16
	.word	.L541-.L236,.L541-.L236
	.half	2
	.byte	138,0
	.word	0,0
.L551:
	.word	-1,.L236,.L915-.L236,.L917-.L236
	.half	1
	.byte	100
	.word	0,0
.L542:
	.word	-1,.L236,0,.L914-.L236
	.half	1
	.byte	84
	.word	0,0
.L553:
	.word	-1,.L236,.L919-.L236,.L93-.L236
	.half	1
	.byte	109
	.word	0,0
.L548:
	.word	-1,.L236,.L921-.L236,.L922-.L236
	.half	1
	.byte	95
	.word	0,0
.L550:
	.word	-1,.L236,.L920-.L236,.L93-.L236
	.half	1
	.byte	89
	.word	0,0
.L543:
	.word	-1,.L236,0,.L915-.L236
	.half	1
	.byte	100
	.word	.L916-.L236,.L541-.L236
	.half	1
	.byte	108
	.word	0,0
.L545:
	.word	-1,.L236,0,.L541-.L236
	.half	2
	.byte	145,120
	.word	0,0
.L547:
	.word	-1,.L236,.L925-.L236,.L93-.L236
	.half	1
	.byte	111
	.word	0,0
.L544:
	.word	-1,.L236,0,.L541-.L236
	.half	2
	.byte	145,112
	.word	0,0
.L546:
	.word	-1,.L236,.L924-.L236,.L93-.L236
	.half	1
	.byte	91
	.word	0,0
.L552:
	.word	-1,.L236,.L918-.L236,.L541-.L236
	.half	1
	.byte	88
	.word	.L926-.L236,.L541-.L236
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_loc'
.L608:
	.word	0,0
.L589:
	.word	-1,.L240,.L953-.L240,.L121-.L240
	.half	1
	.byte	82
	.word	.L122-.L240,.L116-.L240
	.half	1
	.byte	82
	.word	0,0
.L239:
	.word	-1,.L240,0,.L581-.L240
	.half	2
	.byte	138,0
	.word	0,0
.L587:
	.word	-1,.L240,.L948-.L240,.L117-.L240
	.half	1
	.byte	103
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	103
	.word	.L122-.L240,.L581-.L240
	.half	1
	.byte	103
	.word	0,0
.L582:
	.word	-1,.L240,0,.L117-.L240
	.half	1
	.byte	84
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	84
	.word	.L122-.L240,.L581-.L240
	.half	1
	.byte	84
	.word	0,0
.L593:
	.word	-1,.L240,.L950-.L240,.L117-.L240
	.half	1
	.byte	108
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	108
	.word	.L122-.L240,.L116-.L240
	.half	1
	.byte	108
	.word	0,0
.L591:
	.word	-1,.L240,.L954-.L240,.L121-.L240
	.half	1
	.byte	81
	.word	.L122-.L240,.L606-.L240
	.half	1
	.byte	81
	.word	0,0
.L610:
	.word	0,0
.L609:
	.word	0,0
.L605:
	.word	0,0
.L585:
	.word	-1,.L240,.L955-.L240,.L956-.L240
	.half	1
	.byte	95
	.word	0,0
.L583:
	.word	-1,.L240,0,.L117-.L240
	.half	1
	.byte	100
	.word	.L945-.L240,.L117-.L240
	.half	1
	.byte	101
	.word	.L118-.L240,.L952-.L240
	.half	1
	.byte	100
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	101
	.word	.L122-.L240,.L581-.L240
	.half	1
	.byte	101
	.word	0,0
.L590:
	.word	0,0
.L584:
	.word	-1,.L240,.L946-.L240,.L117-.L240
	.half	1
	.byte	102
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	102
	.word	.L122-.L240,.L581-.L240
	.half	1
	.byte	102
	.word	0,0
.L586:
	.word	-1,.L240,.L947-.L240,.L117-.L240
	.half	1
	.byte	83
	.word	.L118-.L240,.L121-.L240
	.half	1
	.byte	83
	.word	.L122-.L240,.L581-.L240
	.half	1
	.byte	83
	.word	0,0
.L588:
	.word	-1,.L240,.L949-.L240,.L117-.L240
	.half	1
	.byte	82
	.word	.L118-.L240,.L953-.L240
	.half	1
	.byte	82
	.word	.L116-.L240,.L581-.L240
	.half	1
	.byte	82
	.word	0,0
.L604:
	.word	0,0
.L611:
	.word	-1,.L240,.L956-.L240,.L124-.L240
	.half	1
	.byte	95
	.word	0,0
.L597:
	.word	0,0
.L599:
	.word	0,0
.L601:
	.word	-1,.L240,.L951-.L240,.L117-.L240
	.half	1
	.byte	81
	.word	.L118-.L240,.L954-.L240
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_loc'
.L534:
	.word	0,0
.L512:
	.word	-1,.L234,.L908-.L234,.L84-.L234
	.half	1
	.byte	81
	.word	.L87-.L234,.L78-.L234
	.half	1
	.byte	81
	.word	0,0
.L233:
	.word	-1,.L234,0,.L893-.L234
	.half	2
	.byte	138,0
	.word	.L893-.L234,.L504-.L234
	.half	2
	.byte	138,16
	.word	.L504-.L234,.L504-.L234
	.half	2
	.byte	138,0
	.word	0,0
.L518:
	.word	-1,.L234,.L898-.L234,.L899-.L234
	.half	1
	.byte	98
	.word	0,0
.L505:
	.word	-1,.L234,0,.L894-.L234
	.half	1
	.byte	84
	.word	0,0
.L519:
	.word	-1,.L234,.L900-.L234,.L81-.L234
	.half	1
	.byte	111
	.word	.L82-.L234,.L78-.L234
	.half	1
	.byte	111
	.word	0,0
.L510:
	.word	-1,.L234,.L905-.L234,.L81-.L234
	.half	1
	.byte	91
	.word	.L82-.L234,.L907-.L234
	.half	1
	.byte	91
	.word	0,0
.L538:
	.word	0,0
.L536:
	.word	0,0
.L525:
	.word	0,0
.L511:
	.word	0,0
.L513:
	.word	-1,.L234,.L901-.L234,.L81-.L234
	.half	1
	.byte	89
	.word	.L82-.L234,.L78-.L234
	.half	1
	.byte	89
	.word	0,0
.L506:
	.word	-1,.L234,0,.L895-.L234
	.half	1
	.byte	100
	.word	.L896-.L234,.L81-.L234
	.half	1
	.byte	108
	.word	.L82-.L234,.L504-.L234
	.half	1
	.byte	108
	.word	0,0
.L508:
	.word	-1,.L234,0,.L81-.L234
	.half	2
	.byte	145,120
	.word	.L82-.L234,.L504-.L234
	.half	2
	.byte	145,120
	.word	0,0
.L509:
	.word	-1,.L234,.L906-.L234,.L904-.L234
	.half	1
	.byte	98
	.word	.L909-.L234,.L84-.L234
	.half	1
	.byte	98
	.word	.L911-.L234,.L78-.L234
	.half	1
	.byte	98
	.word	0,0
.L507:
	.word	-1,.L234,0,.L81-.L234
	.half	2
	.byte	145,112
	.word	.L82-.L234,.L504-.L234
	.half	2
	.byte	145,112
	.word	0,0
.L515:
	.word	-1,.L234,.L902-.L234,.L81-.L234
	.half	1
	.byte	90
	.word	.L82-.L234,.L78-.L234
	.half	1
	.byte	90
	.word	0,0
.L516:
	.word	-1,.L234,.L903-.L234,.L904-.L234
	.half	1
	.byte	81
	.word	0,0
.L517:
	.word	-1,.L234,.L897-.L234,.L81-.L234
	.half	1
	.byte	88
	.word	.L82-.L234,.L504-.L234
	.half	1
	.byte	88
	.word	.L912-.L234,.L504-.L234
	.half	1
	.byte	82
	.word	0,0
.L523:
	.word	0,0
.L540:
	.word	-1,.L234,.L910-.L234,.L84-.L234
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_loc'
.L223:
	.word	-1,.L224,0,.L809-.L224
	.half	2
	.byte	138,0
	.word	.L809-.L224,.L381-.L224
	.half	2
	.byte	138,8
	.word	.L381-.L224,.L381-.L224
	.half	2
	.byte	138,0
	.word	0,0
.L383:
	.word	-1,.L224,0,.L810-.L224
	.half	1
	.byte	100
	.word	.L812-.L224,.L813-.L224
	.half	1
	.byte	111
	.word	.L5-.L224,.L815-.L224
	.half	1
	.byte	111
	.word	.L2-.L224,.L816-.L224
	.half	1
	.byte	111
	.word	.L2-.L224,.L817-.L224
	.half	1
	.byte	100
	.word	0,0
.L387:
	.word	-1,.L224,0,.L381-.L224
	.half	2
	.byte	145,120
	.word	0,0
.L385:
	.word	-1,.L224,0,.L811-.L224
	.half	1
	.byte	101
	.word	.L810-.L224,.L814-.L224
	.half	1
	.byte	100
	.word	.L2-.L224,.L817-.L224
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_loc'
.L249:
	.word	-1,.L250,0,.L696-.L250
	.half	2
	.byte	138,0
	.word	0,0
.L697:
	.word	-1,.L250,0,.L696-.L250
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_loc'
.L229:
	.word	-1,.L230,0,.L863-.L230
	.half	2
	.byte	138,0
	.word	.L863-.L230,.L449-.L230
	.half	2
	.byte	138,16
	.word	.L449-.L230,.L449-.L230
	.half	2
	.byte	138,0
	.word	0,0
.L458:
	.word	-1,.L230,.L866-.L230,.L56-.L230
	.half	1
	.byte	111
	.word	.L51-.L230,.L872-.L230
	.half	1
	.byte	111
	.word	0,0
.L469:
	.word	0,0
.L450:
	.word	-1,.L230,0,.L461-.L230
	.half	1
	.byte	100
	.word	.L865-.L230,.L56-.L230
	.half	1
	.byte	108
	.word	.L51-.L230,.L449-.L230
	.half	1
	.byte	108
	.word	0,0
.L455:
	.word	-1,.L230,0,.L56-.L230
	.half	2
	.byte	145,122
	.word	.L51-.L230,.L449-.L230
	.half	2
	.byte	145,122
	.word	0,0
.L464:
	.word	0,0
.L460:
	.word	-1,.L230,.L871-.L230,.L56-.L230
	.half	1
	.byte	88
	.word	.L51-.L230,.L48-.L230
	.half	1
	.byte	88
	.word	0,0
.L454:
	.word	-1,.L230,.L869-.L230,.L870-.L230
	.half	1
	.byte	81
	.word	0,0
.L451:
	.word	-1,.L230,0,.L864-.L230
	.half	1
	.byte	101
	.word	0,0
.L453:
	.word	-1,.L230,0,.L56-.L230
	.half	2
	.byte	145,120
	.word	.L51-.L230,.L449-.L230
	.half	2
	.byte	145,120
	.word	0,0
.L456:
	.word	-1,.L230,.L870-.L230,.L56-.L230
	.half	1
	.byte	82
	.word	0,0
.L452:
	.word	-1,.L230,0,.L56-.L230
	.half	2
	.byte	145,112
	.word	.L51-.L230,.L449-.L230
	.half	2
	.byte	145,112
	.word	0,0
.L459:
	.word	-1,.L230,0,.L56-.L230
	.half	2
	.byte	145,124
	.word	.L51-.L230,.L449-.L230
	.half	2
	.byte	145,124
	.word	0,0
.L463:
	.word	0,0
.L465:
	.word	-1,.L230,.L867-.L230,.L868-.L230
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_loc'
.L227:
	.word	-1,.L228,0,.L838-.L228
	.half	2
	.byte	138,0
	.word	.L838-.L228,.L426-.L228
	.half	2
	.byte	138,24
	.word	.L426-.L228,.L426-.L228
	.half	2
	.byte	138,0
	.word	0,0
.L429:
	.word	-1,.L228,.L842-.L228,.L843-.L228
	.half	1
	.byte	111
	.word	0,0
.L427:
	.word	-1,.L228,0,.L438-.L228
	.half	1
	.byte	100
	.word	.L840-.L228,.L426-.L228
	.half	1
	.byte	108
	.word	0,0
.L444:
	.word	0,0
.L436:
	.word	-1,.L228,0,.L426-.L228
	.half	2
	.byte	145,116
	.word	0,0
.L441:
	.word	0,0
.L433:
	.word	-1,.L228,.L844-.L228,.L426-.L228
	.half	1
	.byte	88
	.word	0,0
.L447:
	.word	-1,.L228,.L851-.L228,.L426-.L228
	.half	1
	.byte	91
	.word	0,0
.L432:
	.word	-1,.L228,.L858-.L228,.L41-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	.L859-.L228,.L40-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	.L43-.L228,.L38-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	.L861-.L228,.L39-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	.L862-.L228,.L36-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L448:
	.word	-1,.L228,.L852-.L228,.L853-.L228
	.half	1
	.byte	95
	.word	0,0
.L434:
	.word	-1,.L228,.L849-.L228,.L426-.L228
	.half	1
	.byte	90
	.word	0,0
.L428:
	.word	-1,.L228,0,.L839-.L228
	.half	1
	.byte	101
	.word	.L841-.L228,.L426-.L228
	.half	2
	.byte	145,120
	.word	.L847-.L228,.L848-.L228
	.half	1
	.byte	98
	.word	.L854-.L228,.L855-.L228
	.half	1
	.byte	100
	.word	0,0
.L445:
	.word	0,0
.L431:
	.word	-1,.L228,0,.L426-.L228
	.half	2
	.byte	145,112
	.word	0,0
.L437:
	.word	-1,.L228,.L856-.L228,.L857-.L228
	.half	1
	.byte	82
	.word	.L40-.L228,.L860-.L228
	.half	1
	.byte	82
	.word	.L38-.L228,.L44-.L228
	.half	1
	.byte	82
	.word	0,0
.L446:
	.word	-1,.L228,.L850-.L228,.L426-.L228
	.half	1
	.byte	89
	.word	0,0
.L430:
	.word	-1,.L228,0,.L426-.L228
	.half	2
	.byte	145,104
	.word	0,0
.L435:
	.word	-1,.L228,0,.L426-.L228
	.half	2
	.byte	145,114
	.word	0,0
.L440:
	.word	0,0
.L442:
	.word	-1,.L228,.L845-.L228,.L846-.L228
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_loc'
.L502:
	.word	-1,.L232,.L887-.L232,.L888-.L232
	.half	1
	.byte	95
	.word	0,0
.L492:
	.word	0,0
.L231:
	.word	-1,.L232,0,.L873-.L232
	.half	2
	.byte	138,0
	.word	.L873-.L232,.L471-.L232
	.half	2
	.byte	138,8
	.word	.L471-.L232,.L471-.L232
	.half	2
	.byte	138,0
	.word	0,0
.L474:
	.word	-1,.L232,.L876-.L232,.L877-.L232
	.half	1
	.byte	111
	.word	.L62-.L232,.L892-.L232
	.half	1
	.byte	111
	.word	0,0
.L491:
	.word	-1,.L232,.L877-.L232,.L880-.L232
	.half	1
	.byte	111
	.word	0,0
.L496:
	.word	0,0
.L500:
	.word	-1,.L232,.L883-.L232,.L884-.L232
	.half	1
	.byte	100
	.word	0,0
.L472:
	.word	-1,.L232,0,.L477-.L232
	.half	1
	.byte	100
	.word	.L875-.L232,.L471-.L232
	.half	1
	.byte	108
	.word	0,0
.L485:
	.word	0,0
.L476:
	.word	-1,.L232,0,.L471-.L232
	.half	2
	.byte	145,122
	.word	0,0
.L480:
	.word	0,0
.L498:
	.word	-1,.L232,.L888-.L232,.L891-.L232
	.half	1
	.byte	95
	.word	0,0
.L473:
	.word	-1,.L232,0,.L874-.L232
	.half	1
	.byte	101
	.word	0,0
.L487:
	.word	0,0
.L490:
	.word	-1,.L232,.L881-.L232,.L882-.L232
	.half	1
	.byte	98
	.word	0,0
.L503:
	.word	-1,.L232,.L889-.L232,.L890-.L232
	.half	1
	.byte	81
	.word	0,0
.L501:
	.word	-1,.L232,.L885-.L232,.L886-.L232
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L475:
	.word	-1,.L232,0,.L471-.L232
	.half	2
	.byte	145,120
	.word	0,0
.L479:
	.word	0,0
.L481:
	.word	-1,.L232,.L878-.L232,.L879-.L232
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_loc'
.L225:
	.word	-1,.L226,0,.L818-.L226
	.half	2
	.byte	138,0
	.word	.L818-.L226,.L388-.L226
	.half	2
	.byte	138,24
	.word	.L388-.L226,.L388-.L226
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L226,.L823-.L226,.L24-.L226
	.half	1
	.byte	110
	.word	.L25-.L226,.L388-.L226
	.half	1
	.byte	110
	.word	0,0
.L390:
	.word	-1,.L226,0,.L819-.L226
	.half	1
	.byte	100
	.word	.L821-.L226,.L24-.L226
	.half	1
	.byte	108
	.word	.L25-.L226,.L388-.L226
	.half	1
	.byte	108
	.word	0,0
.L417:
	.word	0,0
.L400:
	.word	-1,.L226,0,.L24-.L226
	.half	2
	.byte	145,114
	.word	.L25-.L226,.L388-.L226
	.half	2
	.byte	145,114
	.word	0,0
.L410:
	.word	0,0
.L424:
	.word	-1,.L226,.L828-.L226,.L24-.L226
	.half	1
	.byte	89
	.word	.L25-.L226,.L388-.L226
	.half	1
	.byte	89
	.word	0,0
.L425:
	.word	-1,.L226,.L829-.L226,.L830-.L226
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L392:
	.word	-1,.L226,0,.L820-.L226
	.half	1
	.byte	101
	.word	.L822-.L226,.L24-.L226
	.half	2
	.byte	145,120
	.word	.L820-.L226,.L826-.L226
	.half	1
	.byte	111
	.word	.L831-.L226,.L832-.L226
	.half	1
	.byte	111
	.word	.L25-.L226,.L388-.L226
	.half	2
	.byte	145,120
	.word	.L21-.L226,.L836-.L226
	.half	1
	.byte	111
	.word	.L22-.L226,.L27-.L226
	.half	1
	.byte	111
	.word	0,0
.L419:
	.word	0,0
.L397:
	.word	-1,.L226,0,.L24-.L226
	.half	2
	.byte	145,112
	.word	.L25-.L226,.L388-.L226
	.half	2
	.byte	145,112
	.word	0,0
.L394:
	.word	-1,.L226,.L834-.L226,.L24-.L226
	.half	1
	.byte	85
	.word	.L25-.L226,.L835-.L226
	.half	1
	.byte	85
	.word	0,0
.L399:
	.word	-1,.L226,.L833-.L226,.L24-.L226
	.half	1
	.byte	82
	.word	.L25-.L226,.L835-.L226
	.half	1
	.byte	82
	.word	.L23-.L226,.L26-.L226
	.half	1
	.byte	82
	.word	.L21-.L226,.L837-.L226
	.half	1
	.byte	82
	.word	.L22-.L226,.L27-.L226
	.half	1
	.byte	82
	.word	0,0
.L423:
	.word	-1,.L226,.L827-.L226,.L24-.L226
	.half	1
	.byte	88
	.word	.L25-.L226,.L388-.L226
	.half	1
	.byte	88
	.word	0,0
.L396:
	.word	-1,.L226,0,.L24-.L226
	.half	2
	.byte	145,104
	.word	.L25-.L226,.L388-.L226
	.half	2
	.byte	145,104
	.word	0,0
.L401:
	.word	-1,.L226,0,.L24-.L226
	.half	2
	.byte	145,116
	.word	.L25-.L226,.L388-.L226
	.half	2
	.byte	145,116
	.word	0,0
.L408:
	.word	0,0
.L412:
	.word	-1,.L226,.L824-.L226,.L825-.L226
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_loc'
.L251:
	.word	-1,.L252,0,.L1003-.L252
	.half	2
	.byte	138,0
	.word	.L1003-.L252,.L698-.L252
	.half	2
	.byte	138,8
	.word	.L698-.L252,.L698-.L252
	.half	2
	.byte	138,0
	.word	0,0
.L700:
	.word	-1,.L252,.L1005-.L252,.L1006-.L252
	.half	1
	.byte	98
	.word	0,0
.L699:
	.word	-1,.L252,0,.L1004-.L252
	.half	1
	.byte	84
	.word	0,0
.L701:
	.word	-1,.L252,.L1009-.L252,.L1010-.L252
	.half	1
	.byte	98
	.word	0,0
.L707:
	.word	0,0
.L703:
	.word	-1,.L252,0,.L698-.L252
	.half	2
	.byte	145,122
	.word	0,0
.L706:
	.word	0,0
.L702:
	.word	-1,.L252,0,.L698-.L252
	.half	2
	.byte	145,120
	.word	0,0
.L708:
	.word	-1,.L252,.L1007-.L252,.L1008-.L252
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_loc'
.L750:
	.word	-1,.L254,.L1037-.L254,.L1038-.L254
	.half	1
	.byte	95
	.word	0,0
.L736:
	.word	-1,.L254,.L1021-.L254,.L182-.L254
	.half	1
	.byte	84
	.word	.L183-.L254,.L1026-.L254
	.half	1
	.byte	84
	.word	.L1031-.L254,.L181-.L254
	.half	1
	.byte	95
	.word	.L181-.L254,.L1032-.L254
	.half	1
	.byte	84
	.word	.L190-.L254,.L1029-.L254
	.half	1
	.byte	84
	.word	.L198-.L254,.L1042-.L254
	.half	1
	.byte	84
	.word	.L195-.L254,.L727-.L254
	.half	1
	.byte	84
	.word	0,0
.L733:
	.word	0,0
.L734:
	.word	0,0
.L767:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,184,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,184,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,184,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,184,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,184,127
	.word	0,0
.L765:
	.word	0,0
.L757:
	.word	0,0
.L253:
	.word	-1,.L254,0,.L1011-.L254
	.half	2
	.byte	138,0
	.word	.L1011-.L254,.L709-.L254
	.half	3
	.byte	138,240,0
	.word	.L709-.L254,.L709-.L254
	.half	2
	.byte	138,0
	.word	0,0
.L715:
	.word	-1,.L254,.L1013-.L254,.L170-.L254
	.half	1
	.byte	109
	.word	.L171-.L254,.L182-.L254
	.half	1
	.byte	109
	.word	.L183-.L254,.L1027-.L254
	.half	1
	.byte	109
	.word	0,0
.L735:
	.word	0,0
.L745:
	.word	0,0
.L710:
	.word	-1,.L254,0,.L170-.L254
	.half	1
	.byte	84
	.word	.L1012-.L254,.L170-.L254
	.half	1
	.byte	89
	.word	.L171-.L254,.L1015-.L254
	.half	1
	.byte	84
	.word	.L171-.L254,.L182-.L254
	.half	1
	.byte	89
	.word	.L183-.L254,.L210-.L254
	.half	1
	.byte	89
	.word	.L211-.L254,.L215-.L254
	.half	1
	.byte	89
	.word	.L214-.L254,.L709-.L254
	.half	1
	.byte	89
	.word	0,0
.L729:
	.word	0,0
.L748:
	.word	-1,.L254,.L1033-.L254,.L1034-.L254
	.half	1
	.byte	100
	.word	0,0
.L716:
	.word	-1,.L254,.L1018-.L254,.L172-.L254
	.half	1
	.byte	111
	.word	.L173-.L254,.L182-.L254
	.half	1
	.byte	111
	.word	.L183-.L254,.L1028-.L254
	.half	1
	.byte	111
	.word	0,0
.L737:
	.word	-1,.L254,.L1022-.L254,.L1023-.L254
	.half	1
	.byte	100
	.word	0,0
.L764:
	.word	0,0
.L755:
	.word	0,0
.L719:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,164,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,164,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,164,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,164,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,164,127
	.word	0,0
.L723:
	.word	0,0
.L713:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,160,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,160,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,160,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,160,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,160,127
	.word	0,0
.L718:
	.word	-1,.L254,.L1014-.L254,.L170-.L254
	.half	1
	.byte	88
	.word	.L171-.L254,.L182-.L254
	.half	1
	.byte	88
	.word	.L183-.L254,.L210-.L254
	.half	1
	.byte	88
	.word	.L211-.L254,.L215-.L254
	.half	1
	.byte	88
	.word	.L214-.L254,.L709-.L254
	.half	1
	.byte	88
	.word	0,0
.L759:
	.word	0,0
.L772:
	.word	0,0
.L738:
	.word	-1,.L254,.L1024-.L254,.L182-.L254
	.half	1
	.byte	82
	.word	.L183-.L254,.L1029-.L254
	.half	1
	.byte	82
	.word	0,0
.L747:
	.word	-1,.L254,.L1038-.L254,.L1041-.L254
	.half	1
	.byte	95
	.word	0,0
.L711:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,144,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,144,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,144,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,144,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,144,127
	.word	0,0
.L749:
	.word	-1,.L254,.L1035-.L254,.L1036-.L254
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L731:
	.word	0,0
.L766:
	.word	-1,.L254,.L1043-.L254,.L213-.L254
	.half	1
	.byte	95
	.word	.L1044-.L254,.L215-.L254
	.half	1
	.byte	95
	.word	.L214-.L254,.L1045-.L254
	.half	1
	.byte	95
	.word	0,0
.L768:
	.word	-1,.L254,0,.L170-.L254
	.half	2
	.byte	145,64
	.word	.L171-.L254,.L182-.L254
	.half	2
	.byte	145,64
	.word	.L183-.L254,.L210-.L254
	.half	2
	.byte	145,64
	.word	.L211-.L254,.L215-.L254
	.half	2
	.byte	145,64
	.word	.L214-.L254,.L709-.L254
	.half	2
	.byte	145,64
	.word	0,0
.L712:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,152,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,152,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,152,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,152,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,152,127
	.word	0,0
.L751:
	.word	-1,.L254,.L1039-.L254,.L1040-.L254
	.half	1
	.byte	81
	.word	0,0
.L714:
	.word	-1,.L254,.L1019-.L254,.L174-.L254
	.half	1
	.byte	95
	.word	.L175-.L254,.L1020-.L254
	.half	1
	.byte	95
	.word	0,0
.L722:
	.word	0,0
.L771:
	.word	0,0
.L761:
	.word	0,0
.L717:
	.word	-1,.L254,0,.L170-.L254
	.half	3
	.byte	145,162,127
	.word	.L171-.L254,.L182-.L254
	.half	3
	.byte	145,162,127
	.word	.L183-.L254,.L210-.L254
	.half	3
	.byte	145,162,127
	.word	.L211-.L254,.L215-.L254
	.half	3
	.byte	145,162,127
	.word	.L214-.L254,.L709-.L254
	.half	3
	.byte	145,162,127
	.word	0,0
.L724:
	.word	-1,.L254,.L1016-.L254,.L1017-.L254
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L740:
	.word	0,0
.L741:
	.word	0,0
.L742:
	.word	-1,.L254,.L1025-.L254,.L182-.L254
	.half	1
	.byte	81
	.word	.L183-.L254,.L1030-.L254
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_loc'
.L257:
	.word	-1,.L258,0,.L1053-.L258
	.half	2
	.byte	138,0
	.word	.L1053-.L258,.L784-.L258
	.half	2
	.byte	138,8
	.word	.L784-.L258,.L784-.L258
	.half	2
	.byte	138,0
	.word	0,0
.L786:
	.word	-1,.L258,.L1055-.L258,.L1056-.L258
	.half	1
	.byte	98
	.word	0,0
.L785:
	.word	-1,.L258,0,.L1054-.L258
	.half	1
	.byte	84
	.word	0,0
.L787:
	.word	-1,.L258,.L1059-.L258,.L1060-.L258
	.half	1
	.byte	98
	.word	0,0
.L793:
	.word	0,0
.L789:
	.word	-1,.L258,0,.L784-.L258
	.half	2
	.byte	145,122
	.word	0,0
.L792:
	.word	0,0
.L788:
	.word	-1,.L258,0,.L784-.L258
	.half	2
	.byte	145,120
	.word	0,0
.L794:
	.word	-1,.L258,.L1057-.L258,.L1058-.L258
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_loc'
.L255:
	.word	-1,.L256,0,.L1046-.L256
	.half	2
	.byte	138,0
	.word	.L1046-.L256,.L773-.L256
	.half	2
	.byte	138,8
	.word	.L773-.L256,.L773-.L256
	.half	2
	.byte	138,0
	.word	0,0
.L775:
	.word	-1,.L256,.L1048-.L256,.L1049-.L256
	.half	1
	.byte	98
	.word	0,0
.L774:
	.word	-1,.L256,0,.L1047-.L256
	.half	1
	.byte	84
	.word	0,0
.L776:
	.word	-1,.L256,.L1052-.L256,.L219-.L256
	.half	1
	.byte	109
	.word	0,0
.L782:
	.word	0,0
.L778:
	.word	-1,.L256,0,.L773-.L256
	.half	2
	.byte	145,122
	.word	0,0
.L781:
	.word	0,0
.L777:
	.word	-1,.L256,0,.L773-.L256
	.half	2
	.byte	145,120
	.word	0,0
.L783:
	.word	-1,.L256,.L1050-.L256,.L1051-.L256
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_loc'
.L614:
	.word	-1,.L242,.L965-.L242,.L966-.L242
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L639:
	.word	-1,.L242,0,.L138-.L242
	.half	3
	.byte	145,180,127
	.word	.L139-.L242,.L143-.L242
	.half	3
	.byte	145,180,127
	.word	.L142-.L242,.L612-.L242
	.half	3
	.byte	145,180,127
	.word	0,0
.L634:
	.word	0,0
.L241:
	.word	-1,.L242,0,.L957-.L242
	.half	2
	.byte	138,0
	.word	.L957-.L242,.L612-.L242
	.half	3
	.byte	138,240,0
	.word	.L612-.L242,.L612-.L242
	.half	2
	.byte	138,0
	.word	0,0
.L622:
	.word	-1,.L242,.L959-.L242,.L138-.L242
	.half	1
	.byte	109
	.word	.L139-.L242,.L143-.L242
	.half	1
	.byte	109
	.word	.L142-.L242,.L612-.L242
	.half	1
	.byte	109
	.word	0,0
.L613:
	.word	-1,.L242,0,.L958-.L242
	.half	1
	.byte	84
	.word	0,0
.L618:
	.word	-1,.L242,.L962-.L242,.L128-.L242
	.half	1
	.byte	98
	.word	.L129-.L242,.L958-.L242
	.half	1
	.byte	98
	.word	0,0
.L632:
	.word	0,0
.L621:
	.word	-1,.L242,0,.L138-.L242
	.half	3
	.byte	145,160,127
	.word	.L139-.L242,.L143-.L242
	.half	3
	.byte	145,160,127
	.word	.L142-.L242,.L612-.L242
	.half	3
	.byte	145,160,127
	.word	0,0
.L626:
	.word	0,0
.L645:
	.word	0,0
.L619:
	.word	-1,.L242,.L967-.L242,.L968-.L242
	.half	1
	.byte	95
	.word	0,0
.L616:
	.word	-1,.L242,0,.L138-.L242
	.half	3
	.byte	145,152,127
	.word	.L139-.L242,.L143-.L242
	.half	3
	.byte	145,152,127
	.word	.L142-.L242,.L612-.L242
	.half	3
	.byte	145,152,127
	.word	0,0
.L638:
	.word	-1,.L242,.L969-.L242,.L141-.L242
	.half	1
	.byte	95
	.word	.L970-.L242,.L143-.L242
	.half	1
	.byte	95
	.word	.L142-.L242,.L971-.L242
	.half	1
	.byte	95
	.word	0,0
.L641:
	.word	-1,.L242,0,.L138-.L242
	.half	3
	.byte	145,188,127
	.word	.L139-.L242,.L143-.L242
	.half	3
	.byte	145,188,127
	.word	.L142-.L242,.L612-.L242
	.half	3
	.byte	145,188,127
	.word	0,0
.L615:
	.word	-1,.L242,0,.L138-.L242
	.half	3
	.byte	145,144,127
	.word	.L139-.L242,.L143-.L242
	.half	3
	.byte	145,144,127
	.word	.L142-.L242,.L612-.L242
	.half	3
	.byte	145,144,127
	.word	0,0
.L617:
	.word	-1,.L242,.L963-.L242,.L130-.L242
	.half	1
	.byte	95
	.word	.L131-.L242,.L964-.L242
	.half	1
	.byte	95
	.word	0,0
.L625:
	.word	0,0
.L644:
	.word	0,0
.L627:
	.word	-1,.L242,.L960-.L242,.L961-.L242
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_loc'
.L670:
	.word	-1,.L248,.L997-.L248,.L998-.L248
	.half	1
	.byte	95
	.word	.L156-.L248,.L999-.L248
	.half	1
	.byte	95
	.word	0,0
.L690:
	.word	-1,.L248,0,.L159-.L248
	.half	3
	.byte	145,180,127
	.word	.L160-.L248,.L164-.L248
	.half	3
	.byte	145,180,127
	.word	.L163-.L248,.L668-.L248
	.half	3
	.byte	145,180,127
	.word	0,0
.L686:
	.word	0,0
.L247:
	.word	-1,.L248,0,.L987-.L248
	.half	2
	.byte	138,0
	.word	.L987-.L248,.L668-.L248
	.half	3
	.byte	138,240,0
	.word	.L668-.L248,.L668-.L248
	.half	2
	.byte	138,0
	.word	0,0
.L675:
	.word	-1,.L248,.L989-.L248,.L159-.L248
	.half	1
	.byte	109
	.word	.L160-.L248,.L164-.L248
	.half	1
	.byte	109
	.word	.L163-.L248,.L668-.L248
	.half	1
	.byte	109
	.word	0,0
.L669:
	.word	-1,.L248,0,.L988-.L248
	.half	1
	.byte	84
	.word	0,0
.L676:
	.word	-1,.L248,.L992-.L248,.L151-.L248
	.half	1
	.byte	100
	.word	.L152-.L248,.L993-.L248
	.half	1
	.byte	100
	.word	0,0
.L685:
	.word	0,0
.L677:
	.word	-1,.L248,0,.L159-.L248
	.half	3
	.byte	145,160,127
	.word	.L160-.L248,.L164-.L248
	.half	3
	.byte	145,160,127
	.word	.L163-.L248,.L668-.L248
	.half	3
	.byte	145,160,127
	.word	0,0
.L671:
	.word	-1,.L248,.L996-.L248,.L988-.L248
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L681:
	.word	0,0
.L695:
	.word	0,0
.L673:
	.word	-1,.L248,0,.L159-.L248
	.half	3
	.byte	145,152,127
	.word	.L160-.L248,.L164-.L248
	.half	3
	.byte	145,152,127
	.word	.L163-.L248,.L668-.L248
	.half	3
	.byte	145,152,127
	.word	0,0
.L689:
	.word	-1,.L248,.L1000-.L248,.L162-.L248
	.half	1
	.byte	95
	.word	.L1001-.L248,.L164-.L248
	.half	1
	.byte	95
	.word	.L163-.L248,.L1002-.L248
	.half	1
	.byte	95
	.word	0,0
.L691:
	.word	-1,.L248,0,.L159-.L248
	.half	3
	.byte	145,188,127
	.word	.L160-.L248,.L164-.L248
	.half	3
	.byte	145,188,127
	.word	.L163-.L248,.L668-.L248
	.half	3
	.byte	145,188,127
	.word	0,0
.L672:
	.word	-1,.L248,0,.L159-.L248
	.half	3
	.byte	145,144,127
	.word	.L160-.L248,.L164-.L248
	.half	3
	.byte	145,144,127
	.word	.L163-.L248,.L668-.L248
	.half	3
	.byte	145,144,127
	.word	0,0
.L674:
	.word	-1,.L248,.L994-.L248,.L153-.L248
	.half	1
	.byte	95
	.word	.L154-.L248,.L995-.L248
	.half	1
	.byte	95
	.word	0,0
.L680:
	.word	0,0
.L694:
	.word	0,0
.L682:
	.word	-1,.L248,.L990-.L248,.L991-.L248
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_loc'
.L243:
	.word	-1,.L244,0,.L972-.L244
	.half	2
	.byte	138,0
	.word	.L972-.L244,.L646-.L244
	.half	2
	.byte	138,8
	.word	.L646-.L244,.L646-.L244
	.half	2
	.byte	138,0
	.word	0,0
.L648:
	.word	-1,.L244,.L974-.L244,.L975-.L244
	.half	1
	.byte	98
	.word	0,0
.L647:
	.word	-1,.L244,0,.L973-.L244
	.half	1
	.byte	84
	.word	0,0
.L649:
	.word	-1,.L244,.L978-.L244,.L979-.L244
	.half	1
	.byte	98
	.word	0,0
.L655:
	.word	0,0
.L651:
	.word	-1,.L244,0,.L646-.L244
	.half	2
	.byte	145,122
	.word	0,0
.L654:
	.word	0,0
.L650:
	.word	-1,.L244,0,.L646-.L244
	.half	2
	.byte	145,120
	.word	0,0
.L656:
	.word	-1,.L244,.L976-.L244,.L977-.L244
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_loc'
.L245:
	.word	-1,.L246,0,.L980-.L246
	.half	2
	.byte	138,0
	.word	.L980-.L246,.L657-.L246
	.half	2
	.byte	138,8
	.word	.L657-.L246,.L657-.L246
	.half	2
	.byte	138,0
	.word	0,0
.L659:
	.word	-1,.L246,.L982-.L246,.L983-.L246
	.half	1
	.byte	98
	.word	0,0
.L658:
	.word	-1,.L246,0,.L981-.L246
	.half	1
	.byte	84
	.word	0,0
.L660:
	.word	-1,.L246,.L986-.L246,.L149-.L246
	.half	1
	.byte	109
	.word	0,0
.L666:
	.word	0,0
.L662:
	.word	-1,.L246,0,.L657-.L246
	.half	2
	.byte	145,122
	.word	0,0
.L665:
	.word	0,0
.L661:
	.word	-1,.L246,0,.L657-.L246
	.half	2
	.byte	145,120
	.word	0,0
.L667:
	.word	-1,.L246,.L984-.L246,.L985-.L246
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1974:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_GetTxBuffer')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L224,.L381-.L224
	.byte	4
	.word	(.L809-.L224)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L381-.L809)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_ProcessRxSingleFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L226,.L388-.L226
	.byte	4
	.word	(.L818-.L226)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L388-.L818)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_ProcessRxFirstFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L228,.L426-.L228
	.byte	4
	.word	(.L838-.L228)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L426-.L838)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_ProcessRxConsecutiveFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L230,.L449-.L230
	.byte	4
	.word	(.L863-.L230)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L449-.L863)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_ProcessRxFlowControlFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L232,.L471-.L232
	.byte	4
	.word	(.L873-.L232)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L471-.L873)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_CreateTxSingleFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L234,.L504-.L234
	.byte	4
	.word	(.L893-.L234)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L504-.L893)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_CreateTxFirstFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L236,.L541-.L236
	.byte	4
	.word	(.L913-.L236)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L541-.L913)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_CreateTxConsecutiveFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L238,.L554-.L238
	.byte	4
	.word	(.L927-.L238)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L554-.L927)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_CreateTxFlowControlFrame')
	.sect	'.debug_frame'
	.word	16
	.word	.L1974,.L240,.L581-.L240
	.byte	8,19,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_TxSendConsecutiveFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L242,.L612-.L242
	.byte	4
	.word	(.L957-.L242)/2
	.byte	19,240,0,22,26,4,19,138,240,0,4
	.word	(.L612-.L957)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_TxWaitForFlowControlFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L244,.L646-.L244
	.byte	4
	.word	(.L972-.L244)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L646-.L972)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_TxWaitForTransmitConfirmation')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L246,.L657-.L246
	.byte	4
	.word	(.L980-.L246)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L657-.L980)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_TxTransmissionRequestAccepted')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L248,.L668-.L248
	.byte	4
	.word	(.L987-.L248)/2
	.byte	19,240,0,22,26,4,19,138,240,0,4
	.word	(.L668-.L987)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_Idle')
	.sect	'.debug_frame'
	.word	24
	.word	.L1974,.L250,.L696-.L250
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_RxReceptionRequestAccepted')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L252,.L698-.L252
	.byte	4
	.word	(.L1003-.L252)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L698-.L1003)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_RxSendFlowControlFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L254,.L709-.L254
	.byte	4
	.word	(.L1011-.L254)/2
	.byte	19,240,0,22,26,4,19,138,240,0,4
	.word	(.L709-.L1011)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_RxWaitForFcTransmitConfirmation')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L256,.L773-.L256
	.byte	4
	.word	(.L1046-.L256)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L773-.L1046)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanTp_Prv_RxWaitForConsecutiveFrame')
	.sect	'.debug_frame'
	.word	36
	.word	.L1974,.L258,.L784-.L258
	.byte	4
	.word	(.L1053-.L258)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L784-.L1053)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1097  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1098  #if(CANTP_TX_BURST_MODE == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1099  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1100   Function name    : CanTp_Prv_BurstMainFunction
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1101   Syntax           : CanTp_Prv_BurstMainFunction(ChannelId, TriggerPoint)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1102   Description      : State function to process and manipulate the state variables for CanTp Channel w.r.t. State
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1103                      CANTP_TX_SEND_CONSECUTIVE_FRAME in burst mode.
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1104   Parameter        : CanTp_ChannelIdType, uint8
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1105   Return value     : None
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1106  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1107  void CanTp_Prv_BurstMainFunction(CanTp_ChannelIdType ChannelId, uint8 TriggerPoint)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1108  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1109      if(ChannelId < CanTp_CfgPtr->NumberOfChannels)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1110      {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1111          if((CanTp_Channel[ChannelId].STminTicks == 0u)&&(CanTp_SubState[ChannelId] == CANTP_TX_SEND_CONSECUTIVE_FRAME))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1112          {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1113              if(CanTp_Prv_PutInQ(ChannelId) == E_OK)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1114              {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1115                  #if(CANTP_SCHM_SUPPORT == CANTP_ON)
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1116                  CanTp_Prv_ActivateMainFunction(TriggerPoint);
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1117                  #else
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1118                  CanTp_MainFunction();
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1119                  (void)TriggerPoint;
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1120                  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1121              }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1122          }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1123      }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1124  }
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1125  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1126  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1127  #define CANTP_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1128  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1129  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1130  /***********************************************************************************************************************
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1131  Private Export Function Array definitions [not to be used outside CanTp Module]
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1132  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1133  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1134  #define CANTP_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1135  #include "CanTp_MemMap.h"
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1136  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1137  /* Chanel State Structure Array containing the MainState and sub StateFunction */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1138  const CanTp_StateFuncType CanTp_StateFunctions[CANTP_NUMBER_OF_SUBSTATES] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1139  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1140      &CanTp_Prv_Idle,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1141      &CanTp_Prv_TxTransmissionRequestAccepted,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1142      &CanTp_Prv_TxWaitForTransmitConfirmation,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1143      &CanTp_Prv_TxWaitForFlowControlFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1144  	&CanTp_Prv_TxSendConsecutiveFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1145  	&CanTp_Prv_RxReceptionRequestAccepted,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1146  	&CanTp_Prv_RxSendFlowControlFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1147  	&CanTp_Prv_RxWaitForFcTransmitConfirmation,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1148  	&CanTp_Prv_RxWaitForConsecutiveFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1149  };
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1150  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1151  /* Processing function Array to be used in RxIndication */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1152  const CanTp_ProcessFrameType  CanTp_ProcessFrame[CANTP_NUMBER_OF_FRAME_TYPES] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1153  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1154  	&CanTp_Prv_ProcessRxSingleFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1155  	&CanTp_Prv_ProcessRxFirstFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1156  	&CanTp_Prv_ProcessRxConsecutiveFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1157  	&CanTp_Prv_ProcessRxFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1158  };
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1159  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1160  /* Frame Assembly function Array to be used in TriggerTransmit */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1161  const CanTp_CreateFrameType  CanTp_CreateFrame[CANTP_NUMBER_OF_FRAME_TYPES] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1162  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1163  	&CanTp_Prv_CreateTxSingleFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1164  	&CanTp_Prv_CreateTxFirstFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1165  	&CanTp_Prv_CreateTxConsecutiveFrame,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1166  	&CanTp_Prv_CreateTxFlowControlFrame
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1167  };
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1168  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1169  /* PduR Confirmation/Indication Api */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1170  const CanTp_PduRConfirmationApiType  CanTp_PduRConfirmationApis[CANTP_NUMBER_OF_PDUR_CONFIRMATION_TYPES] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1171  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1172      &PduR_CanTpTxConfirmation,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1173      &PduR_CanTpRxIndication     /* PduR_<User:Lo>RxConfirmation as per Harmonized Api specification of ComStack */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1174  };
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1175  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1176  #if((CANTP_SCHM_SUPPORT == CANTP_ON) && (CANTP_TX_BURST_MODE == CANTP_ON))
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1177  /* Trigger Api */
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1178  const CanTp_SchMTriggerApiType  CanTp_SchMTriggerApis[CANTP_NUMBER_OF_TRIGGER_POINTS] =
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1179  {
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1180      &SchM_ActMainFunction_CanTp_RxIndication,
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1181      &SchM_ActMainFunction_CanTp_TxConfirmation
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1182  };
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1183  #endif
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1184  
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1185  #define CANTP_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\CanTp\src\CanTp_Prv.c	  1186  #include "CanTp_MemMap.h"

	; Module end
