	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17784a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Utils.src BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_Utils.Xcp_MemRead',code,cluster('Xcp_MemRead')
	.sect	'.text.Xcp_Utils.Xcp_MemRead'
	.align	2
	
	.global	Xcp_MemRead

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     1  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     2  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     3  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     4  * Includes
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     5  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     6  #include "Xcp.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     7  #include "Xcp_Priv.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     8  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	     9  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    10  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    11  * Variables
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    12  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    13  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    14  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    15  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    16  * Functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    17  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    18  /* ------------------------------------------------------------------------ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    19  /* Begin section for code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    20  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    21  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    22  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    23  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    24  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    25  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    26  Function reads data at the requested address (MTA) with requested length based on the Protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    27  \param[in]  AddrPtrDst    destination address
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    28  \param[in]  Length        length of the data to read
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    29  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    30  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    31  \retval     XCP_NO_ERROR            Reading successful
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    32  \retval     XCP_ERR_ACCESS_DENIED   Source or destination is in restricted memory area
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    33  \retval     XCP_ERR_PAGE_NOT_VALID  Calibration page is not valid
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    34  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    35  Xcp_ErrorCode Xcp_MemRead(uint8* AddrPtrDst, uint8 Length, uint8 protLayerId)
; Function Xcp_MemRead
.L60:
Xcp_MemRead:	.type	func
	mov.aa	a13,a4
.L194:
	mov	e8,d5,d4
.L195:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    36  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    37    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    38    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    39  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    40    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    41    Xcp_ErrorCode   Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    42    Xcp_AddrType_t  LocalMta;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    43  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    44    /* Store address in local variable */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    45    LocalMta = XCP_MTA(protLayerId);
	mul	d15,d9,#80
.L196:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	lea	a12,[a15]8
	ld.d	e10,[a12]0
.L197:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    46  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    47    /* If Extension is 0 the AddrValue 0 is invalid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    48    if ((LocalMta.AddrValue == 0u) && (LocalMta.Extension == 0u))
	mov	d15,d10
.L343:
	jne	d15,#0,.L2
.L344:
	extr.u	d15,d11,#0,#8
.L345:
	jne	d15,#0,.L3
.L346:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    49    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    50      Error = XCP_ERR_WRITE_PROTECTED;
	mov	d15,#35
.L198:
	j	.L4
.L3:
.L2:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    51    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    52    else if (Xcp_Cleared[protLayerId].BgActivityState != XCP_BG_IDLE)
	mov	d15,#336
.L199:
	mul	d15,d9
.L200:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
.L347:
	addsc.a	a15,a15,d15,#0
.L348:
	ld.w	d15,[a15]8
.L349:
	jeq	d15,#0,.L5
.L350:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    53    { /* Another background activity is running -> report BUSY */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    54      Error = XCP_ERR_CMD_BUSY;
	mov	d15,#16
.L201:
	j	.L6
.L5:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    55    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    56    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    57  #if (XCP_STATIC_ADDRESS_TRANSFORMATION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    58    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    59      /* Call Address-transformation-function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    60      Error = XcpAppl_StaticAddressTransformation(&LocalMta, Length, XCP_EVENT_CHANNEL_NOT_USED, XCP_CONTEXT_UPLOAD);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    61    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    62  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    63    if (Error == XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    64  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    65    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    66      /* Check source memory protection */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    67      Error = Xcp_MemReadProtectionCheck(LocalMta, Length, protLayerId);
	mov	e4,d11,d10
.L193:
	mov	e6,d9,d8
.L202:
	call	Xcp_MemReadProtectionCheck
.L192:
	mov	d15,d2
.L6:
.L4:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    68    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    69  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    70    /*  XCP_NO_ACCESS_HIDE */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    71    if (Error == XCP_NO_ACCESS_HIDE)
	mov	d0,#253
.L351:
	jne	d15,d0,.L7
.L352:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    72    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    73      /* Fill destination buffer with zeroes */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    74      /* MR12 DIR 1.1 VIOLATION: The input parameters of rba_BswSrv_MemSet() are declared as (void*) for generic implementation of MemSet. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    75      Xcp_MemSet(AddrPtrDst, 0, Length);
	mov	d4,#0
	mov.aa	a4,a13
.L204:
	mov	d5,d8
.L206:
	call	rba_BswSrv_MemSet
.L205:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    76  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    77      /* Set error code to OK */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    78      Error = XCP_NO_ERROR;
	mov	d15,#255
.L353:
	j	.L8
.L7:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    79    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    80    else if (Error == XCP_NO_ERROR)
	mov	d0,#255
.L354:
	jne	d15,d0,.L9
.L355:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    81    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    82  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    83  #if (XCP_UPLOAD_DOWNLOAD_MEMORY_ACCESS_BY_APPL == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    84      /* Copy data with application function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    85      Error = XcpAppl_MemRead(AddrPtrDst, LocalMta, Length, protLayerId);
	mov.aa	a4,a13
.L207:
	mov	e4,d11,d10
.L208:
	mov	e6,d9,d8
.L209:
	call	XcpAppl_MemRead
.L203:
	mov	d15,d2
.L210:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    86  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    87  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    88  # if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    89      /* If the extension is not 0 it cannot be directly accessed here -> ACCESS_DENIED
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    90       * The extension and address should have been transformed to a valid ECU-address in StaticAddressTransformation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    91      if (LocalMta.Extension != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    92      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    93        Error = XCP_ERR_ACCESS_DENIED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    94      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    95      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    96  # endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    97      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    98        /* Copy data with internal function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	    99        /* MR12 RULE 11.6, 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   100        Xcp_MemCopy(AddrPtrDst, (void *)LocalMta.AddrValue, Length);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   101        Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   102      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   103  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   104  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   105      /* Check if success */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   106      if (Error == XCP_NO_ERROR)
	mov	d0,#255
.L356:
	jne	d15,d0,.L10
.L357:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   107      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   108        /* Update MTA pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   109        XCP_MTA(protLayerId).AddrValue += Length;
	ld.w	d0,[a12]
.L358:
	add	d8,d0
	st.w	[a12],d8
.L10:
	j	.L11
.L9:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   110      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   111    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   112    else
.L11:
.L8:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   113    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   114      /* other errors are sent out directly */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   115    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   116  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   117    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   118    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   119    return(Error);
	mov	d2,d15
.L211:
	j	.L12

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   120  }
.L12:
	ret
.L162:
	
__Xcp_MemRead_function_end:
	.size	Xcp_MemRead,__Xcp_MemRead_function_end-Xcp_MemRead
.L105:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_MemWrite',code,cluster('Xcp_MemWrite')
	.sect	'.text.Xcp_Utils.Xcp_MemWrite'
	.align	2
	
	.global	Xcp_MemWrite

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   121  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   122  #if(XCP_CALIBRATION_CAL == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   123  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   124  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   125  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   126  Function writes data at the requested address with requested length based on the Protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   127  \param[in]  AddrPtrSrc    source pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   128  \param[in]  Length        length of the data to write
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   129  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   130  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   131  \retval     XCP_NO_ERROR              Writing successful
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   132  \retval     XCP_ERR_ACCESS_DENIED     Source or destination is in restricted memory area
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   133  \retval     XCP_ERR_PAGE_NOT_VALID    Calibration page is not valid
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   134  \retval     XCP_ERR_WRITE_PROTECTED   Destination is write protected
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   135  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   136  Xcp_ErrorCode Xcp_MemWrite(const uint8* AddrPtrSrc, uint8 Length, uint8 protLayerId)
; Function Xcp_MemWrite
.L62:
Xcp_MemWrite:	.type	func
	mov.aa	a12,a4
.L213:
	mov	e8,d5,d4
.L214:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   137  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   138    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   139    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   140  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   141    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   142    Xcp_ErrorCode   Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   143    Xcp_AddrType_t  LocalMta;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   144  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   145    /* Store address in local variable */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   146    LocalMta = XCP_MTA(protLayerId);
	mul	d15,d9,#80
.L215:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	lea	a13,[a15]8
	ld.d	e10,[a13]0
.L216:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   147  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   148    /* If Extension is 0 the AddrValue 0 is invalid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   149    if ((LocalMta.AddrValue == 0u) && (LocalMta.Extension == 0u))
	mov	d15,d10
.L363:
	jne	d15,#0,.L13
.L364:
	extr.u	d15,d11,#0,#8
.L365:
	jne	d15,#0,.L14
.L366:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   150    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   151      Error = XCP_ERR_WRITE_PROTECTED;
	mov	d2,#35
.L217:
	j	.L15
.L14:
.L13:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   152    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   153    else if (Xcp_Cleared[protLayerId].BgActivityState != XCP_BG_IDLE)
	mov	d15,#336
.L218:
	mul	d15,d9
.L219:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
.L367:
	addsc.a	a15,a15,d15,#0
.L368:
	ld.w	d15,[a15]8
.L369:
	jeq	d15,#0,.L16
.L370:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   154    { /* Another background activity is running -> report BUSY */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   155      Error = XCP_ERR_CMD_BUSY;
	mov	d2,#16
.L220:
	j	.L17
.L16:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   156    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   157    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   158  #if (XCP_STATIC_ADDRESS_TRANSFORMATION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   159    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   160      /* Call Address-transformation-function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   161      Error = XcpAppl_StaticAddressTransformation(&LocalMta, Length, XCP_EVENT_CHANNEL_NOT_USED, XCP_CONTEXT_DOWNLOAD);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   162    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   163  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   164    if (Error == XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   165  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   166    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   167      /* Check dest memory protection */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   168      Error = Xcp_MemWriteProtectionCheck(LocalMta, Length);
	mov	e4,d11,d10
.L212:
	mov	d6,d8
.L221:
	call	Xcp_MemWriteProtectionCheck
.L17:
.L15:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   169    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   170  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   171  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   172    if (Error == XCP_NO_ERROR)
	mov	d15,#255
.L371:
	jne	d15,d2,.L18
.L372:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   173    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   174  #if (XCP_UPLOAD_DOWNLOAD_MEMORY_ACCESS_BY_APPL == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   175      /* Check if data should be copied to global buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   176      if (Xcp_Cleared[protLayerId].Mem.DownloadBuffer_au8 != AddrPtrSrc)
	mov	d15,#336
.L222:
	mul	d15,d9
.L223:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
.L373:
	addsc.a	a15,a15,d15,#0
.L374:
	lea	a14,[a15]52
.L375:
	jeq.a	a14,a12,.L19
.L376:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   177      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   178        /* Copy data to global buffer. XcpAppl_MemWrite will not work with local variable if data cannot be copied at once. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   179        /* MR12 RULE 11.6, 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   180        Xcp_MemCopy(Xcp_Cleared[protLayerId].Mem.DownloadBuffer_au8, AddrPtrSrc, Length);
	mov.aa	a4,a14
	mov.aa	a5,a12
.L224:
	mov	d4,d8
.L225:
	call	rba_BswSrv_MemCopy
.L19:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   181      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   182      /* Write data with application function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   183      Error = XcpAppl_MemWrite(LocalMta, Xcp_Cleared[protLayerId].Mem.DownloadBuffer_au8, Length, protLayerId);
	mov	e4,d11,d10
	mov.aa	a4,a14
.L226:
	mov	e6,d9,d8
.L227:
	call	XcpAppl_MemWrite
.L228:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   184  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   185      /* Check if success */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   186      if (Error == XCP_NO_ERROR)
	mov	d15,#255
.L377:
	jne	d15,d2,.L20
.L378:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   187      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   188        /* Update MTA pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   189        XCP_MTA(protLayerId).AddrValue += Length;
	ld.w	d15,[a13]
.L379:
	add	d8,d15
	st.w	[a13],d8
.L380:
	j	.L21
.L20:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   190      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   191      else if (Error == XCP_NO_RESPONSE)
	mov	d15,#254
.L381:
	jne	d15,d2,.L22
.L229:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   192      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   193        /* Set Download size to trigger Xcp_MemWriteMainFunction */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   194        Xcp_Cleared[protLayerId].Mem.DownloadSize_u8 = Length;
	st.b	[a15]50,d8
.L230:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   195        Xcp_Cleared[protLayerId].BgActivityState = XCP_BG_MEM_WRITE;
	mov	d15,#2
.L382:
	st.w	[a15]8,d15
.L383:
	j	.L23
.L22:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   196      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   197      else
.L23:
.L21:
.L18:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   198      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   199        /* other errors are sent out directly */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   200      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   201  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   202  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   203  # if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   204      /* If the extension is not 0 it cannot be directly accessed here -> ACCESS_DENIED
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   205       * The extension and address should have been transformed to a valid ECU-address in StaticAddressTransformation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   206      if (LocalMta.Extension != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   207      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   208        Error = XCP_ERR_ACCESS_DENIED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   209      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   210      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   211  # endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   212      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   213        /* Lock interrupts */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   214        SchM_Enter_Xcp_DownloadNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   215  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   216        /* Copy data with internal function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   217        /* MR12 RULE 11.6, 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   218        Xcp_MemCopy((void *)LocalMta.AddrValue, AddrPtrSrc, Length);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   219  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   220        /* Unlock interrupts */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   221        SchM_Exit_Xcp_DownloadNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   222  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   223        /* Update MTA pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   224        XCP_MTA(protLayerId).AddrValue += Length;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   225  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   226        Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   227      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   228  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   229    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   230  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   231    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   232    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   233    return(Error);
	j	.L24

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   234  }
.L24:
	ret
.L170:
	
__Xcp_MemWrite_function_end:
	.size	Xcp_MemWrite,__Xcp_MemWrite_function_end-Xcp_MemWrite
.L110:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_MemWriteMainFunction',code,cluster('Xcp_MemWriteMainFunction')
	.sect	'.text.Xcp_Utils.Xcp_MemWriteMainFunction'
	.align	2
	
	.global	Xcp_MemWriteMainFunction

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   235  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   236  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   237  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   238  Background process of WriteMTA for the requested Protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   239  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   240  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   241  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   242  void Xcp_MemWriteMainFunction(uint8 protLayerId)
; Function Xcp_MemWriteMainFunction
.L64:
Xcp_MemWriteMainFunction:	.type	func
	mov	d8,d4
.L232:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   243  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   244    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   245    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   246  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   247  #if (XCP_UPLOAD_DOWNLOAD_MEMORY_ACCESS_BY_APPL == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   248    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   249    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   250  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   251    /* Call application function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   252    Error = XcpAppl_MemWriteMainFunction(protLayerId);
	mov	d4,d8
	call	XcpAppl_MemWriteMainFunction
.L231:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   253  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   254    if (Error == XCP_NO_ERROR)
	mov	d15,#255
.L388:
	jne	d15,d2,.L25
.L389:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   255    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   256      /* Update MTA pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   257      XCP_MTA(protLayerId).AddrValue += Xcp_Cleared[protLayerId].Mem.DownloadSize_u8;
	mov	d15,#336
	mul	d15,d8
.L390:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
.L391:
	addsc.a	a15,a15,d15,#0
.L392:
	mul	d15,d8,#80
	movh.a	a2,#@his(Xcp_NoInit)
	lea	a2,[a2]@los(Xcp_NoInit)
	addsc.a	a2,a2,d15,#0
	lea	a2,[a2]8
.L393:
	ld.w	d15,[a2]
.L394:
	ld.bu	d0,[a15]50
.L395:
	add	d15,d0
	st.w	[a2],d15
.L396:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   258  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   259      /* Clear background activity */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   260      Xcp_Cleared[protLayerId].BgActivityState = XCP_BG_IDLE;
	mov	d15,#0
.L397:
	st.w	[a15]8,d15
.L25:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   261    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   262  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   263    /* Send response */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   264    Xcp_DownloadRes(Error, protLayerId);
	mov	e4,d8,d2
	call	Xcp_DownloadRes
.L233:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   265  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   266    XCP_PARAM_UNUSED(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   267  #endif /* #if (XCP_UPLOAD_DOWNLOAD_MEMORY_ACCESS_BY_APPL == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   268  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   269    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   270    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   271  }
	ret
.L177:
	
__Xcp_MemWriteMainFunction_function_end:
	.size	Xcp_MemWriteMainFunction,__Xcp_MemWriteMainFunction_function_end-Xcp_MemWriteMainFunction
.L115:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_DaqRamCalc',code,cluster('Xcp_DaqRamCalc')
	.sect	'.text.Xcp_Utils.Xcp_DaqRamCalc'
	.align	2
	
	.global	Xcp_DaqRamCalc

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   272  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   273  #endif /* #if(XCP_CALIBRATION_CAL == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   274  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   275  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   276  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   277  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   278  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   279  This function calculates the memory consumption of the daq config and sets the required pointers accordingly.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   280  \param[in]  AddDaqList    number of DaqList to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   281  \param[in]  AddOdt        number of Odt to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   282  \param[in]  AddOdtEntry   number of OdtEntry to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   283  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   284  \return     bytes required for daq configuration
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   285  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   286  uint32 Xcp_DaqRamCalc(uint16 AddDaqList, uint8 AddOdt, uint8 AddOdtEntry, uint8 protLayerId)
; Function Xcp_DaqRamCalc
.L66:
Xcp_DaqRamCalc:	.type	func
	mov	d0,d4
.L238:
	mov	d4,d5
.L234:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   287  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   288    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   289    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   290  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   291    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   292    Xcp_DaqConfig_t* DaqConfig;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   293    uint32  memReq;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   294    uint32  DaqListCntNew_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   295    uint32  OdtCntNew_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   296    uint32  OdtEntryCntNew_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   297  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   298    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   299    DaqConfig = &Xcp_NoInit[protLayerId].DaqConfig;
	mul	d15,d7,#80
.L290:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L291:
	addsc.a	a15,a15,d15,#0
.L292:
	lea	a15,[a15]24
.L240:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   300  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   301    DaqListCntNew_u32  = DaqConfig->DaqListCnt_u16  + AddDaqList;
	ld.hu	d1,[a15]24
.L241:
	add	d0,d1
.L239:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   302    OdtCntNew_u32      = DaqConfig->OdtCnt_u16      + AddOdt;
	ld.hu	d1,[a15]26
.L242:
	add	d1,d4
.L293:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   303    OdtEntryCntNew_u32 = DaqConfig->OdtEntryCnt_u16 + AddOdtEntry;
	ld.hu	d2,[a15]28
.L244:
	add	d2,d6
.L294:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   304  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   305    /* check if all (new) values are within limits */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   306    if (   (DaqListCntNew_u32  > XCP_MAX_DAQ)
	mov.u	d3,#65535
.L295:
	jlt.u	d3,d0,.L26
.L296:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   307        || (OdtCntNew_u32      > XCP_MAX_ODT)
	jlt.u	d3,d1,.L27
.L297:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   308        || (OdtEntryCntNew_u32 > XCP_MAX_ODTENTRY)
	jlt.u	d3,d2,.L28
.L298:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   309        || (DaqConfig->DaqRamPtr_pu8 == NULL_PTR)
	ld.a	a2,[a15]40
.L299:
	jnz.a	a2,.L29
.L28:
.L27:
.L26:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   310       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   311    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   312      /* to prevent counter overflow, force memory overflow error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   313      memReq = 0xFFFFFFFFu;
	mov	d2,#-1
.L245:
	j	.L30
.L29:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   314    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   315    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   316    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   317      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   318       * DAQ pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   319       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   320       * Start:        Take over dynamic ram pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   321       * Mem required: DaqListCntNew_u32 * XCP_SIZEOF_DAQ
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   322       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   323       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   324      /* MR12 RULE 11.5, 1.1 VIOLATION: The calling layers ensure correct alignment. No other possibility to assign the pointer to the other pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   325                                        Casting over void* is necessary as otherwise some compilers complain */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   326      DaqConfig->DaqList_p = (Xcp_DaqList_t*) (void*) DaqConfig->DaqRamPtr_pu8;
	st.a	[a15],a2
.L300:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   327  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   328      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   329       * ODT pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   330       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   331       * Start:        After DAQ-Lists - 2-byte-aligned
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   332       * Mem required: OdtCntNew_u32 * XCP_SIZEOF_ODT
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   333       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   334       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   335      /* MR12 RULE 11.4, 11.5, 11.6 VIOLATION: We want to have a pointer to a 2-byte-aligned address at/after the given element (address), hence casting is necessary */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   336      DaqConfig->Odt_p = (Xcp_Odt_t*)(XCP_2BYTE_ALIGN((XCP_ADDR_TYPE)&DaqConfig->DaqList_p[DaqListCntNew_u32]));
	mul	d15,d0,#24
	addsc.a	a2,a2,d15,#0
	mov.d	d3,a2
	add	d3,#1
	insert	d15,d3,#0,#0,#1
.L301:
	st.w	[a15]4,d15
.L302:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   337  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   338      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   339       * OdtEntryAddress-Pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   340       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   341       * Start:        After ODTs - 4/8-byte-aligned
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   342       * Mem required: OdtEntryCntNew_u32 * 4/8 (Address is 32/64-bit)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   343       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   344       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   345      /* MR12 RULE 11.4, 11.5, 11.6 VIOLATION: We want to have a pointer to a 4/8-byte-aligned address at/after the given element (address), hence casting is necessary */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   346      DaqConfig->OdtEntryAddress_p = (Xcp_AddrValue*)(XCP_MACHINE_ALIGN((XCP_ADDR_TYPE)&DaqConfig->Odt_p[OdtCntNew_u32]));
	mul	d1,d1,#6
.L243:
	ld.w	d15,[a15]4
	add	d1,d15
	add	d1,#3
	insert	d15,d1,#0,#0,#2
.L303:
	st.w	[a15]8,d15
.L304:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   347  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   348  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   349      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   350       * OdtEntryExtension-Pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   351       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   352       * Start:        After OdtEntryAddresses - 4/8-byte-aligned (automatically because OdtEntryAddress is aligned and Addresses do not break alignment)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   353       * Mem required: OdtEntryCntNew_u32 * 1 (Size is 8-bit)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   354       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   355       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   356      /* MR12 RULE 11.5, 1.1 VIOLATION: No problem with alignment as an OdtEntry is 1 byte */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   357      DaqConfig->OdtEntryExtension_p = (uint8*) (void*)(&DaqConfig->OdtEntryAddress_p[OdtEntryCntNew_u32]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   358  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   359  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   360      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   361       * OdtEntrySize-Pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   362       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   363       * Start:        After OdtEntryExtension - not aligned if extension is enabled, 4/8-byte-aligned if not
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   364       * Mem required: OdtEntryCntNew_u32 * 1 (Size is 8-bit)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   365       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   366       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   367      /* MR12 RULE 11.5, 1.1 VIOLATION: No problem with alignment as an OdtEntry is 1 byte */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   368  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   369      DaqConfig->OdtEntrySize_p = (uint8*) (void*)(&DaqConfig->OdtEntryExtension_p[OdtEntryCntNew_u32]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   370  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   371      DaqConfig->OdtEntrySize_p = (uint8*) (void*)(&DaqConfig->OdtEntryAddress_p[OdtEntryCntNew_u32]);
	ld.a	a2,[a15]8
.L305:
	addsc.a	a2,a2,d2,#2
.L306:
	st.a	[a15]12,a2
.L307:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   372  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   373  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   374      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   375       * PriorityList-Pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   376       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   377       * Start:        After OdtEntrySizes - 2-byte-aligned
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   378       * Mem required: DaqListCntNew_u32 * sizeof(DaqConfig->DaqListCnt_u16) - 2 Bytes per configured DaqList (although STIM DAQs do not need an entry)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   379       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   380       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   381      /* MR12 RULE 11.4, 11.5, 11.6 VIOLATION: We want to have a pointer to a 2-byte-aligned address at/after the given element (address), hence casting is necessary */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   382      DaqConfig->PriorityList_p = (uint16*)(XCP_2BYTE_ALIGN((XCP_ADDR_TYPE)&DaqConfig->OdtEntrySize_p[OdtEntryCntNew_u32]));
	ld.w	d15,[a15]12
	add	d15,d2
	add	d15,#1
	insert	d15,d15,#0,#0,#1
.L308:
	st.w	[a15]16,d15
.L309:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   383  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   384      /* --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   385       * Queue-Pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   386       * ----------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   387       * Start:        After PriorityList - 4/8-byte-aligned
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   388       * Mem required: Xcp_DaqQueRamCalc(AddOdt, FALSE, protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   389       * --------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   390       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   391      /* MR12 RULE 11.4, 11.5, 11.6 VIOLATION: We want to have a pointer to a 4-byte-aligned address at/after the given element (address), hence casting is necessary */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   392      DaqConfig->DaqQue_p = (uint8*)(XCP_MACHINE_ALIGN((XCP_ADDR_TYPE)&DaqConfig->PriorityList_p[DaqListCntNew_u32]));
	ld.a	a2,[a15]16
	addsc.a	a2,a2,d0,#1
	mov.d	d15,a2
	add	d15,#3
	insert	d15,d15,#0,#0,#2
.L310:
	st.w	[a15]20,d15
.L311:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   393  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   394      /* Calculate required memory for everything (last pointer + size required for last data - start pointer) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   395      /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   396      memReq = ((XCP_ADDR_TYPE)DaqConfig->DaqQue_p + Xcp_DaqQueRamCalc(AddOdt, FALSE, protLayerId)) - (XCP_ADDR_TYPE)DaqConfig->DaqList_p;
	ld.w	d15,[a15]20
.L312:
	mov	d5,#0
.L235:
	mov	d6,d7
.L236:
	call	Xcp_DaqQueRamCalc
.L237:
	add	d15,d2
.L313:
	ld.w	d0,[a15]
.L314:
	sub	d2,d15,d0
.L30:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   397    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   398  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   399    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   400    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   401    return memReq;
	j	.L31

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   402  }
.L31:
	ret
.L135:
	
__Xcp_DaqRamCalc_function_end:
	.size	Xcp_DaqRamCalc,__Xcp_DaqRamCalc_function_end-Xcp_DaqRamCalc
.L90:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_DaqQueRamCalc',code,cluster('Xcp_DaqQueRamCalc')
	.sect	'.text.Xcp_Utils.Xcp_DaqQueRamCalc'
	.align	2
	
	.global	Xcp_DaqQueRamCalc

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   403  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   404  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   405  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   406  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   407  This function calculates the memory consumption of the daq queue and initializes the queue pointers.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   408  \param[in]  AddOdt          number of Odt to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   409  \param[in]  setQuePointers  TRUE: Queue pointers are set, FALSE: only memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   410  \param[in]  protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   411  \return     bytes required for daqlist queue
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   412  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   413  uint32 Xcp_DaqQueRamCalc(uint8 AddOdt, boolean setQuePointers, uint8 protLayerId)
; Function Xcp_DaqQueRamCalc
.L68:
Xcp_DaqQueRamCalc:	.type	func
	mov	e8,d5,d4
.L319:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   414  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   415    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   416    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   417  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   418      /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   419      Xcp_DaqList_t *daqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   420      uint32 MemReq;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   421      uint16_least DAQListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   422      uint16 OdtElementsInQue;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   423      uint8  Odts;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   424  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   425      /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   426      MemReq = 0;
	mov	d2,#0
.L246:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   427  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   428      /* Loop through all DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   429      for (DAQListNo = 0; DAQListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; DAQListNo++)
	mov	d10,#0
.L248:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   430      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   431        daqListPtr = &(XCP_DAQ(DAQListNo, protLayerId));
	mul	d15,d6,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
.L320:
	j	.L32
.L33:
	mul	d15,d10,#24
	ld.a	a2,[a15]24
	addsc.a	a4,a2,d15,#0
.L249:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   432        if (setQuePointers == TRUE)
	jne	d9,#1,.L34
.L250:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   433        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   434          /* alloc Buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   435          daqListPtr->DaqListQue_p = &(Xcp_NoInit[protLayerId].DaqConfig.DaqQue_p[MemReq]);
	ld.a	a2,[a15]44
.L321:
	addsc.a	a2,a2,d2,#0
.L322:
	st.a	[a4],a2
.L34:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   436        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   437  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   438        /* fetch the numbers of ODTs in this daqlist */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   439        Odts = daqListPtr->OdtCnt_u8;
	ld.bu	d15,[a4]16
.L251:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   440  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   441        if (Odts == 0)
	jne	d15,#0,.L35
.L253:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   442        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   443          /* first daqlist with no odts, assume odts are added to this daqlist */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   444          Odts = AddOdt;
	mov	d15,d8
.L254:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   445          /* reset AddOdt to avoid multiple counting */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   446          AddOdt = 0;
	mov	d8,#0
.L35:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   447        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   448        /* calc the memory needed */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   449    #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   450        if ( (daqListPtr->Mode_u8 & XCP_DAQLISTMODE_DIRECTION_STIM) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   451        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   452          MemReq += (Odts * XCP_MAXDTO_ALIGNED(protLayerId) * XCP_ODT_STIM_BUFFER_ELEMENT_SIZE);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   453        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   454        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   455    #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   456        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   457          OdtElementsInQue = (uint16) Xcp_Daq_OdtElementsInDaqQue(Odts); /*PRQA S 4119*/ /* Cast from float to uint32: rounding is intended */
	sh	d0,d15,#17
	sh	d4,d0,#-16
.L255:
	add	d4,#1
.L323:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   458          MemReq += (OdtElementsInQue * XCP_MAXDTO_ALIGNED(protLayerId));
	ld.hu	d15,[a15]18
.L252:
	mul	d15,d4
.L256:
	add	d15,d2
.L247:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   459  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   460          if (setQuePointers == TRUE)
	jne	d9,#1,.L36
.L258:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   461          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   462            /* Initialize the DAQ Queue */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   463            Xcp_CreateQue(daqListPtr, OdtElementsInQue);
	call	Xcp_CreateQue
.L36:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   464          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   465        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   466        /* alignment for next item */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   467        MemReq = XCP_MACHINE_ALIGN(MemReq);
	add	d15,#3
.L257:
	insert	d2,d15,#0,#0,#2
.L259:
	add	d10,#1
.L32:
	ld.hu	d15,[a15]48
.L324:
	jlt.u	d10,d15,.L33
.L325:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   468  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   469      } /* end of loop through DAQs */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   470  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   471    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   472    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   473    return MemReq;
	j	.L37

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   474  }
.L37:
	ret
.L146:
	
__Xcp_DaqQueRamCalc_function_end:
	.size	Xcp_DaqQueRamCalc,__Xcp_DaqQueRamCalc_function_end-Xcp_DaqQueRamCalc
.L95:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_DaqRamCheck',code,cluster('Xcp_DaqRamCheck')
	.sect	'.text.Xcp_Utils.Xcp_DaqRamCheck'
	.align	2
	
	.global	Xcp_DaqRamCheck

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   475  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   476  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   477  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   478  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   479  This function checks the memory consumption of the daq config. If it fits into the reserved
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   480  memory, it will give a positive return value.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   481  \param[in]  AddDaqList    number of DaqList to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   482  \param[in]  AddOdt        number of Odt to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   483  \param[in]  AddOdtEntry   number of OdtEntry to add for memory calculation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   484  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   485  \return     TRUE: memory is sufficient
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   486  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   487  boolean Xcp_DaqRamCheck(uint16 AddDaqList, uint8 AddOdt, uint8 AddOdtEntry, uint8 protLayerId)
; Function Xcp_DaqRamCheck
.L70:
Xcp_DaqRamCheck:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   488  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   489    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   490    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   491  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   492    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   493    boolean retval;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   494  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   495    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   496    retval = FALSE;
	mov	d8,#0
.L261:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   497  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   498    if (Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 >= Xcp_DaqRamCalc(AddDaqList, AddOdt, AddOdtEntry, protLayerId))
	mul	d15,d7,#80
.L281:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L282:
	addsc.a	a15,a15,d15,#0
.L283:
	ld.w	d15,[a15]68
.L284:
	call	Xcp_DaqRamCalc
.L260:
	lt.u	d15,d15,d2
.L285:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   499    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   500      retval = TRUE;
	cmovn	d8,d15,#1
.L38:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   501    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   502  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   503    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   504    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   505    return retval;
	mov	d2,d8
.L262:
	j	.L39

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   506  }
.L39:
	ret
.L127:
	
__Xcp_DaqRamCheck_function_end:
	.size	Xcp_DaqRamCheck,__Xcp_DaqRamCheck_function_end-Xcp_DaqRamCheck
.L85:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_MemWriteProtectionCheck',code,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.text.Xcp_Utils.Xcp_MemWriteProtectionCheck'
	.align	2
	
	.global	Xcp_MemWriteProtectionCheck

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   507  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   508  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   509  #if (XCP_CALIBRATION_CAL == STD_ON || XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   510  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   511  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   512  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   513  Function checks the write destination lies within xcp boundaries or not
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   514  \param[in]  XcpAddr   destination address
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   515  \param[in]  Length    length of the data to check write access
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   516  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   517  \retval     XCP_NO_ERROR            Reading successful
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   518  \retval     XCP_ERR_ACCESS_DENIED   Source or destination is in restricted memory area
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   519  \retval     XCP_ERR_PAGE_NOT_VALID  Calibration page is not valid
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   520  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   521  Xcp_ErrorCode Xcp_MemWriteProtectionCheck(const Xcp_AddrType_t XcpAddr, uint8 Length)
; Function Xcp_MemWriteProtectionCheck
.L72:
Xcp_MemWriteProtectionCheck:	.type	func
	mov	d0,d6
.L263:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   522  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   523    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   524    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   525  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   526    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   527  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   528    uint8_least i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   529  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   530  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   531    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   532    Error = XCP_NO_ERROR;
	mov	d15,#255
.L265:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   533  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   534  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   535    /* The checks can only be done if AddressExtension = 0 as only here memory is accessed directly */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   536    if (XcpAddr.Extension == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   537  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   538    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   539      /* If address lies with in static Xcp memory respond with access denied error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   540      /* Hint for 64bit: the XcpAddr should have run through StaticAddressTransformation and therefore contain a valid 64bit address - otherwise checks and access have to be done in Appl-Function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   541      if (
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   542              /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   543          (   (((XcpAddr.AddrValue + Length) > (Xcp_AddrValue)&Xcp_NoInit[0])    && (XcpAddr.AddrValue < ((Xcp_AddrValue)&Xcp_NoInit[0]    + (Xcp_AddrValue)(sizeof(Xcp_NoInit_t) * XCP_PL_IDS))))
	add	d0,d4
.L264:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	mov.d	d1,a15
.L402:
	jge.u	d1,d0,.L40
.L403:
	mov.d	d1,a15
.L404:
	add	d1,d1,#80
.L405:
	jlt.u	d4,d1,.L41
.L40:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   544              /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   545           || (((XcpAddr.AddrValue + Length) > (Xcp_AddrValue)&Xcp_GlobalNoInit) && (XcpAddr.AddrValue < ((Xcp_AddrValue)&Xcp_GlobalNoInit + (Xcp_AddrValue)(sizeof(Xcp_GlobalNoInit_t)))))
	movh.a	a2,#@his(Xcp_GlobalNoInit)
	lea	a2,[a2]@los(Xcp_GlobalNoInit)
	mov.d	d1,a2
.L406:
	jge.u	d1,d0,.L42
.L407:
	add	d1,d1,#12
.L408:
	jlt.u	d4,d1,.L43
.L42:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   546              /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   547           || (((XcpAddr.AddrValue + Length) > (Xcp_AddrValue)&Xcp_Cleared[0])   && (XcpAddr.AddrValue < ((Xcp_AddrValue)&Xcp_Cleared[0]   + (Xcp_AddrValue)(sizeof(Xcp_Cleared_t) * XCP_PL_IDS))))
	movh.a	a2,#@his(Xcp_Cleared)
	lea	a2,[a2]@los(Xcp_Cleared)
	mov.d	d1,a2
.L409:
	jge.u	d1,d0,.L44
.L410:
	mov.d	d1,a2
.L411:
	addi	d1,d1,#336
.L412:
	jge.u	d4,d1,.L45
.L43:
.L41:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   548         ))
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   549      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   550        Error = XCP_ERR_ACCESS_DENIED;
	mov	d15,#36
.L413:
	j	.L46
.L45:
.L44:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   551      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   552      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   553      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   554  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   555        for (i = 0; i < XCP_PL_IDS; i++)
	mov	d1,#0
.L266:
	j	.L47
.L48:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   556        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   557          /* check if address lies within the dynamic memory of any protocol layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   558          if (
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   559                  /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   560              (   ((XcpAddr.AddrValue + Length) >  (Xcp_AddrValue)Xcp_NoInit[i].DaqConfig.DaqRamPtr_pu8)
	mul	d2,d1,#80
	addsc.a	a2,a15,d2,#0
.L414:
	ld.w	d2,[a2]64
.L415:
	jge.u	d2,d0,.L49
.L416:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   561                  /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   562               && ((XcpAddr.AddrValue)          < ((Xcp_AddrValue)Xcp_NoInit[i].DaqConfig.DaqRamPtr_pu8 + Xcp_NoInit[i].DaqConfig.DaqRamSize_u32))
	ld.w	d3,[a2]68
.L417:
	add	d2,d3
.L418:
	jge.u	d4,d2,.L50
.L419:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   563             ))
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   564          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   565            Error = XCP_ERR_ACCESS_DENIED;
	mov	d15,#36
.L420:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   566            break;
	j	.L51
.L50:
.L49:
	add	d1,#1
.L47:
	jeq	d1,#0,.L48

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   567          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   568        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   569  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   570      }
.L51:
.L46:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   571    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   572  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   573  #if(XCP_MEMORY_WRITE_PROTECTION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   574    if (Error == XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   575    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   576      Error = XcpAppl_MemWriteProtection(XcpAddr, Length);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   577    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   578  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   579  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   580    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   581    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   582    return(Error);
	mov	d2,d15
.L267:
	j	.L52

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   583  }
.L52:
	ret
.L180:
	
__Xcp_MemWriteProtectionCheck_function_end:
	.size	Xcp_MemWriteProtectionCheck,__Xcp_MemWriteProtectionCheck_function_end-Xcp_MemWriteProtectionCheck
.L120:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_MemReadProtectionCheck',code,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.text.Xcp_Utils.Xcp_MemReadProtectionCheck'
	.align	2
	
	.global	Xcp_MemReadProtectionCheck

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   584  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   585  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   586  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   587  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   588  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   589  Function checks the read destination lies within protect area or not, if it lies within GetID
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   590  boundaries then skip read protect.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   591  \param[in]  XcpAddr       destination address
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   592  \param[in]  Length        length of the data to check read access
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   593  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   594  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   595  \retval     XCP_NO_ERROR            Reading successful
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   596  \retval     XCP_ERR_ACCESS_DENIED   Source or destination is in restricted memory area
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   597  \retval     XCP_ERR_PAGE_NOT_VALID  Calibration page is not valid
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   598  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   599  Xcp_ErrorCode Xcp_MemReadProtectionCheck(const Xcp_AddrType_t XcpAddr, uint8 Length, uint8 protLayerId)
; Function Xcp_MemReadProtectionCheck
.L74:
Xcp_MemReadProtectionCheck:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   600  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   601    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   602    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   603  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   604    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   605  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   606  #if (XCP_MEMORY_READ_PROTECTION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   607  # if (XCP_CMD_GET_ID_AVAILABLE == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   608    /* If address lies in Xcp GET_ID boundaries then no error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   609    if (   ((Xcp_NoInit[protLayerId].GetId.GetIdLen_u32 != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   610           /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   611        && ((XcpAddr.AddrValue)          >=  (Xcp_AddrValue)Xcp_NoInit[protLayerId].GetId.GetIdAddrPtr))
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   612           /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   613        && ((XcpAddr.AddrValue + Length) <= ((Xcp_AddrValue)Xcp_NoInit[protLayerId].GetId.GetIdAddrPtr + Xcp_NoInit[protLayerId].GetId.GetIdLen_u32))
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   614  #  if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   615        /* If ADDRESS_EXTENSION is enabled this check is only needed if we have Extension == 0 -> Direct Memory access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   616        && (XcpAddr.Extension == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   617  #  endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   618       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   619    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   620      Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   621    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   622    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   623  # endif /* (XCP_CMD_GET_ID_AVAILABLE == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   624    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   625      Error = XcpAppl_MemReadProtection(XcpAddr, Length);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   626      XCP_PARAM_UNUSED(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   627    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   628  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   629    Error = XCP_NO_ERROR;
	mov	d2,#255
.L268:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   630    XCP_PARAM_UNUSED(XcpAddr);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   631    XCP_PARAM_UNUSED(Length);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   632    XCP_PARAM_UNUSED(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   633  #endif /* (XCP_MEMORY_READ_PROTECTION == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   634  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   635    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   636    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   637    return(Error);
	j	.L53

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   638  }
.L53:
	ret
.L186:
	
__Xcp_MemReadProtectionCheck_function_end:
	.size	Xcp_MemReadProtectionCheck,__Xcp_MemReadProtectionCheck_function_end-Xcp_MemReadProtectionCheck
.L125:
	; End of function
	
	.sdecl	'.text.Xcp_Utils.Xcp_StoreCommand',code,cluster('Xcp_StoreCommand')
	.sect	'.text.Xcp_Utils.Xcp_StoreCommand'
	.align	2
	
	.global	Xcp_StoreCommand

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   639  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   640  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   641  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   642  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   643  Function stores command for later processing
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   644  \param in     : XcpPacket       - received XcpPacket
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   645  \param in     : protLayerId     - Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   646  \return         -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   647  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   648  void Xcp_StoreCommand(const PduInfoType* XcpPacket, uint8 protLayerId)
; Function Xcp_StoreCommand
.L76:
Xcp_StoreCommand:	.type	func
	mov.aa	a12,a4
.L271:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   649  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   650    /* check, whether buffer is free */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   651    if (Xcp_Cleared[protLayerId].BgActivityState != XCP_BG_REPEAT_CMD) /* should only occur, when master did not wait for Ack */
	mov	d15,#336
	mul	d4,d15
.L270:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
.L330:
	addsc.a	a15,a15,d4,#0
.L331:
	lea	a13,[a15]8
	ld.w	d15,[a13]
.L332:
	jeq	d15,#3,.L54
.L333:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   652    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   653      /* store Command into buffer for later usage, only 8 bytes are allowed for commands */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   654      /* MR12 DIR 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   655      Xcp_MemCopy(XCP_CMD_BUFFER_PTR(protLayerId), XcpPacket->SduDataPtr, XCP_MIN(XcpPacket->SduLength, 8u));
	ld.hu	d4,[a12]4
	jge.u	d4,#8,.L55
	j	.L56
.L55:
	mov	d4,#8
.L56:
	lea	a4,[a15]36
.L269:
	ld.a	a5,[a12]
	call	rba_BswSrv_MemCopy
.L334:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   656      XCP_CMD_BUFFER_LENGTH(protLayerId) = XcpPacket->SduLength;
	ld.hu	d15,[a12]4
.L335:
	st.w	[a15]44,d15
.L336:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   657      Xcp_Cleared[protLayerId].BgActivityState = XCP_BG_REPEAT_CMD;
	mov	d15,#3
.L337:
	st.w	[a13],d15
.L338:
	j	.L57
.L54:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   658    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   659    else /* cmd buffer already full */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   660    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   661      /* another command has been triggered, although last command not finished, discard command */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   662      XCP_DET_REPORT_ERROR_NO_RET(XCP_UTILS_SID, XCP_E_UNEXPECTED_FUNCTION_CALL);
.L58:
	mov	d4,#212
	mov	d5,#0
	mov	d6,#88
	mov	d7,#160
	call	Det_ReportError
.L57:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   663    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   664  }
	ret
.L157:
	
__Xcp_StoreCommand_function_end:
	.size	Xcp_StoreCommand,__Xcp_StoreCommand_function_end-Xcp_StoreCommand
.L100:
	; End of function
	
	.calls	'Xcp_MemRead','Xcp_MemReadProtectionCheck'
	.calls	'Xcp_MemRead','rba_BswSrv_MemSet'
	.calls	'Xcp_MemRead','XcpAppl_MemRead'
	.calls	'Xcp_MemWrite','Xcp_MemWriteProtectionCheck'
	.calls	'Xcp_MemWrite','rba_BswSrv_MemCopy'
	.calls	'Xcp_MemWrite','XcpAppl_MemWrite'
	.calls	'Xcp_MemWriteMainFunction','XcpAppl_MemWriteMainFunction'
	.calls	'Xcp_MemWriteMainFunction','Xcp_DownloadRes'
	.calls	'Xcp_DaqRamCalc','Xcp_DaqQueRamCalc'
	.calls	'Xcp_DaqQueRamCalc','Xcp_CreateQue'
	.calls	'Xcp_DaqRamCheck','Xcp_DaqRamCalc'
	.calls	'Xcp_StoreCommand','rba_BswSrv_MemCopy'
	.calls	'Xcp_StoreCommand','Det_ReportError'
	.calls	'Xcp_MemRead','',0
	.calls	'Xcp_MemWrite','',0
	.calls	'Xcp_MemWriteMainFunction','',0
	.calls	'Xcp_DaqRamCalc','',0
	.calls	'Xcp_DaqQueRamCalc','',0
	.calls	'Xcp_DaqRamCheck','',0
	.calls	'Xcp_MemWriteProtectionCheck','',0
	.calls	'Xcp_MemReadProtectionCheck','',0
	.extern	rba_BswSrv_MemCopy
	.extern	rba_BswSrv_MemSet
	.extern	XcpAppl_MemRead
	.extern	XcpAppl_MemWrite
	.extern	XcpAppl_MemWriteMainFunction
	.extern	Det_ReportError
	.extern	Xcp_NoInit
	.extern	Xcp_GlobalNoInit
	.extern	Xcp_Cleared
	.extern	Xcp_DownloadRes
	.extern	Xcp_CreateQue
	.calls	'Xcp_StoreCommand','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L78:
	.word	14899
	.half	3
	.word	.L79
	.byte	4
.L77:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L80
	.byte	2
	.byte	'void',0,3
	.word	135
	.byte	4
	.word	135
	.byte	3
	.word	146
.L134:
	.byte	5
	.byte	'unsigned int',0,4,7,6
	.byte	'rba_BswSrv_MemCopy',0,1,83,14
	.word	141
	.byte	1,1,1,1,7
	.byte	'xDest_pv',0,1,83,39
	.word	141
	.byte	7
	.byte	'xSrc_pcv',0,1,83,61
	.word	151
	.byte	7
	.byte	'numBytes_u32',0,1,83,78
	.word	156
	.byte	0,5
	.byte	'int',0,4,5,6
	.byte	'rba_BswSrv_MemSet',0,1,84,14
	.word	141
	.byte	1,1,1,1,7
	.byte	'xDest_pv',0,1,84,38
	.word	141
	.byte	7
	.byte	'xPattern_u32',0,1,84,55
	.word	259
	.byte	7
	.byte	'numBytes_u32',0,1,84,76
	.word	156
	.byte	0
.L161:
	.byte	8,3,177,3,9,4,9
	.byte	'XCP_ERR_CMD_SYNCH',0,0,9
	.byte	'XCP_ERR_CMD_BUSY',0,16,9
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,9
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,9
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,9
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,9
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,9
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,9
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,9
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,9
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,9
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,9
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,9
	.byte	'XCP_ERR_SEQUENCE',0,41,9
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,9
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,9
	.byte	'XCP_ERR_GENERIC',0,49,9
	.byte	'XCP_ERR_VERIFY',0,50,9
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,9
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,9
	.byte	'XCP_REPEAT_COMMAND',0,252,1,9
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,9
	.byte	'XCP_NO_RESPONSE',0,254,1,9
	.byte	'XCP_NO_ERROR',0,255,1,0
.L126:
	.byte	5
	.byte	'unsigned char',0,1,8
.L163:
	.byte	3
	.word	897
.L168:
	.byte	10,3,168,3,9,8,11
	.byte	'AddrValue',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'Extension',0
	.word	897
	.byte	1,2,35,4,0,4
	.word	919
	.byte	6
	.byte	'XcpAppl_MemRead',0,2,133,2,22
	.word	356
	.byte	1,1,1,1,7
	.byte	'AddrPtrDst',0,2,133,2,45
	.word	914
	.byte	7
	.byte	'XcpAddrSrc',0,2,133,2,78
	.word	964
	.byte	7
	.byte	'Length',0,2,133,2,96
	.word	897
	.byte	7
	.byte	'ProtocolLayerId',0,2,133,2,110
	.word	897
	.byte	0,4
	.word	897
.L171:
	.byte	3
	.word	1080
	.byte	6
	.byte	'XcpAppl_MemWrite',0,2,148,2,22
	.word	356
	.byte	1,1,1,1,7
	.byte	'XcpAddrDst',0,2,148,2,54
	.word	919
	.byte	7
	.byte	'AddrPtrSrc',0,2,148,2,79
	.word	1085
	.byte	7
	.byte	'Length',0,2,148,2,97
	.word	897
	.byte	7
	.byte	'ProtocolLayerId',0,2,148,2,111
	.word	897
	.byte	0,6
	.byte	'XcpAppl_MemWriteMainFunction',0,2,159,2,22
	.word	356
	.byte	1,1,1,1,7
	.byte	'ProtocolLayerId',0,2,159,2,57
	.word	897
	.byte	0
.L128:
	.byte	5
	.byte	'unsigned short int',0,2,7,6
	.byte	'Det_ReportError',0,4,112,16
	.word	897
	.byte	1,1,1,1,7
	.byte	'ModuleId',0,4,112,39
	.word	1270
	.byte	7
	.byte	'InstanceId',0,4,112,55
	.word	897
	.byte	7
	.byte	'ApiId',0,4,112,73
	.word	897
	.byte	7
	.byte	'ErrorId',0,4,112,86
	.word	897
	.byte	0,10,5,241,1,9,8,11
	.byte	'WritePos_u16',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'ReadPos_u16',0
	.word	1270
	.byte	2,2,35,2,11
	.byte	'ReadPos_OdtNum_u16',0
	.word	1270
	.byte	2,2,35,4,11
	.byte	'QueSize_u16',0
	.word	1270
	.byte	2,2,35,6,0,12
	.word	897
	.byte	12
	.word	897
	.byte	10,5,254,2,9,24,11
	.byte	'DaqListQue_p',0
	.word	914
	.byte	4,2,35,0,11
	.byte	'DaqListQuePos',0
	.word	1387
	.byte	8,2,35,4,11
	.byte	'OdtFirst_u16',0
	.word	1270
	.byte	2,2,35,12,11
	.byte	'EventChannelNum_u16',0
	.word	1270
	.byte	2,2,35,14,11
	.byte	'OdtCnt_u8',0
	.word	897
	.byte	1,2,35,16,11
	.byte	'XcpTxPduId',0
	.word	897
	.byte	1,2,35,17,11
	.byte	'Prescaler_u8',0
	.word	897
	.byte	1,2,35,18,11
	.byte	'CycleCnt_u8',0
	.word	897
	.byte	1,2,35,19,11
	.byte	'Priority_u8',0
	.word	897
	.byte	1,2,35,20,11
	.byte	'Flags_u8',0
	.word	897
	.byte	1,2,35,21,11
	.byte	'Mode_u8',0
	.word	1486
	.byte	1,2,35,22,11
	.byte	'CurrentlyRunning_b',0
	.word	1491
	.byte	1,2,35,23,0
.L150:
	.byte	3
	.word	1496
	.byte	10,5,234,2,9,6,11
	.byte	'OdtEntryFirst_u16',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'OdtEntryCnt_u8',0
	.word	897
	.byte	1,2,35,2,11
	.byte	'CopyRoutine_u8',0
	.word	897
	.byte	1,2,35,3,11
	.byte	'Length_u16',0
	.word	1270
	.byte	2,2,35,4,0,3
	.word	1770
	.byte	3
	.word	156
	.byte	3
	.word	1270
	.byte	10,5,225,2,9,8,11
	.byte	'OdtEntryPos_u16',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'OdtEntryMax_u16',0
	.word	1270
	.byte	2,2,35,2,11
	.byte	'DaqListNum_u16',0
	.word	1270
	.byte	2,2,35,4,11
	.byte	'AbsOdtNum_u16',0
	.word	1270
	.byte	2,2,35,6,0,8,3,207,3,9,4,9
	.byte	'XCP_DAQ_STATE_NO_DAQ',0,0,9
	.byte	'XCP_DAQ_STATE_FREE_DAQ',0,1,9
	.byte	'XCP_DAQ_STATE_ALLOC_DAQ',0,2,9
	.byte	'XCP_DAQ_STATE_ALLOC_ODT',0,3,9
	.byte	'XCP_DAQ_STATE_ALLOC_ODT_ENTRY',0,4,9
	.byte	'XCP_DAQ_STATE_WRITE_DAQ',0,5,9
	.byte	'XCP_DAQ_STATE_PREPARE_START',0,6,9
	.byte	'XCP_DAQ_STATE_SHIFTING',0,7,9
	.byte	'XCP_DAQ_STATE_STOP_REQUESTED',0,8,9
	.byte	'XCP_DAQ_STATE_READY_TO_RUN',0,9,9
	.byte	'XCP_DAQ_STATE_RUNNING',0,10,0,10,5,146,3,9,56,11
	.byte	'DaqList_p',0
	.word	1765
	.byte	4,2,35,0,11
	.byte	'Odt_p',0
	.word	1872
	.byte	4,2,35,4,11
	.byte	'OdtEntryAddress_p',0
	.word	1877
	.byte	4,2,35,8,11
	.byte	'OdtEntrySize_p',0
	.word	914
	.byte	4,2,35,12,11
	.byte	'PriorityList_p',0
	.word	1882
	.byte	4,2,35,16,11
	.byte	'DaqQue_p',0
	.word	914
	.byte	4,2,35,20,11
	.byte	'DaqListCnt_u16',0
	.word	1270
	.byte	2,2,35,24,11
	.byte	'OdtCnt_u16',0
	.word	1270
	.byte	2,2,35,26,11
	.byte	'OdtEntryCnt_u16',0
	.word	1270
	.byte	2,2,35,28,11
	.byte	'SelectedOdtEntry',0
	.word	1887
	.byte	8,2,35,30,11
	.byte	'DaqRamPtr_pu8',0
	.word	914
	.byte	4,2,35,40,11
	.byte	'DaqRamSize_u32',0
	.word	156
	.byte	4,2,35,44,11
	.byte	'DaqListSendingCnt_u16',0
	.word	1270
	.byte	2,2,35,48,11
	.byte	'DaqListSending_u16',0
	.word	1270
	.byte	2,2,35,50,11
	.byte	'DaqState_en',0
	.word	1991
	.byte	4,2,35,52,0
.L140:
	.byte	3
	.word	2295
.L153:
	.byte	5
	.byte	'unsigned long int',0,4,7,10,6,71,9,8,11
	.byte	'SduDataPtr',0
	.word	914
	.byte	4,2,35,0,11
	.byte	'SduLength',0
	.word	1270
	.byte	2,2,35,4,0,4
	.word	2677
.L158:
	.byte	3
	.word	2722
	.byte	13
	.byte	'Xcp_DownloadRes',0,5,226,4,13,1,1,1,1,7
	.byte	'Error',0,5,226,4,43
	.word	356
	.byte	7
	.byte	'protLayerId',0,5,226,4,56
	.word	897
	.byte	0
.L181:
	.byte	4
	.word	919
.L187:
	.byte	4
	.word	919
	.byte	13
	.byte	'Xcp_CreateQue',0,5,179,5,13,1,1,1,1,7
	.byte	'DaqListPtr',0,5,179,5,42
	.word	1765
	.byte	7
	.byte	'Size_u16',0,5,179,5,61
	.word	1270
	.byte	0,14,1,3
	.word	2866
	.byte	15
	.byte	'__codeptr',0,7,1,1
	.word	2868
	.byte	5
	.byte	'char',0,1,6,15
	.byte	'sint8',0,8,76,25
	.word	2891
	.byte	15
	.byte	'uint8',0,8,81,25
	.word	897
	.byte	15
	.byte	'uint16',0,8,91,25
	.word	1270
	.byte	15
	.byte	'sint32',0,8,96,24
	.word	259
	.byte	15
	.byte	'uint32',0,8,106,24
	.word	156
	.byte	5
	.byte	'unsigned long long int',0,8,7,15
	.byte	'uint64',0,8,111,30
	.word	2972
	.byte	15
	.byte	'boolean',0,8,127,25
	.word	897
	.byte	15
	.byte	'StatusType',0,9,191,1,27
	.word	897
	.byte	15
	.byte	'Std_ReturnType',0,9,199,1,15
	.word	897
	.byte	10,9,206,1,9,8,11
	.byte	'vendorID',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	1270
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	897
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	897
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	897
	.byte	1,2,35,6,0,15
	.byte	'Std_VersionInfoType',0,9,213,1,3
	.word	3073
	.byte	15
	.byte	'PduIdType',0,10,22,19
	.word	1270
	.byte	15
	.byte	'PduLengthType',0,10,26,19
	.word	1270
	.byte	15
	.byte	'PduInfoType',0,6,75,3
	.word	2677
	.byte	8,6,113,9,4,9
	.byte	'TP_DATACONF',0,0,9
	.byte	'TP_DATARETRY',0,1,9
	.byte	'TP_CONFPENDING',0,2,0,15
	.byte	'TpDataStateType',0,6,118,3
	.word	3283
	.byte	8,3,225,1,9,4,9
	.byte	'XCP_STATE_DISCONNECTED',0,0,9
	.byte	'XCP_STATE_DISCONNECTING',0,1,9
	.byte	'XCP_STATE_CONNECTED',0,2,9
	.byte	'XCP_STATE_RESUME',0,3,9
	.byte	'XCP_STATE_DISABLED',0,240,1,0,15
	.byte	'Xcp_State_t',0,3,231,1,2
	.word	3359
	.byte	15
	.byte	'Xcp_AddrValue',0,3,165,3,23
	.word	156
	.byte	15
	.byte	'Xcp_AddrType_t',0,3,172,3,3
	.word	919
	.byte	15
	.byte	'Xcp_PduIdType',0,3,174,3,15
	.word	897
	.byte	15
	.byte	'Xcp_ErrorCode',0,3,204,3,2
	.word	356
	.byte	15
	.byte	'Xcp_DaqState_t',0,3,220,3,2
	.word	1991
	.byte	8,3,223,3,9,4,9
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,9
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,9
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,15
	.byte	'Xcp_Overload_t',0,3,228,3,2
	.word	3618
	.byte	8,3,233,3,9,4,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,15
	.byte	'Xcp_IdField_t',0,3,239,3,2
	.word	3752
	.byte	8,3,242,3,9,4,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,15
	.byte	'Xcp_OdtOptimizationType_t',0,3,250,3,2
	.word	3969
	.byte	8,3,253,3,9,4,9
	.byte	'XCP_CONSISTENCY_ODT',0,0,9
	.byte	'XCP_CONSISTENCY_DAQ',0,1,9
	.byte	'XCP_CONSISTENCY_EVENT',0,2,9
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,15
	.byte	'Xcp_Consistency_t',0,3,131,4,2
	.word	4245
	.byte	8,3,134,4,9,4,9
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,9
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,9
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,9
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,15
	.byte	'Xcp_Timestamp_t',0,3,140,4,2
	.word	4370
	.byte	16,8
	.word	897
	.byte	17,7,0,10,3,174,4,9,12,11
	.byte	'Buffer_au8',0
	.word	4528
	.byte	8,2,35,0,11
	.byte	'Length_u32',0
	.word	156
	.byte	4,2,35,8,0,15
	.byte	'Xcp_Cto8_t',0,3,178,4,2
	.word	4537
	.byte	4
	.word	2677
	.byte	3
	.word	4604
	.byte	18
	.word	897
	.byte	1,1,19
	.word	4609
	.byte	19
	.word	897
	.byte	19
	.word	897
	.byte	0,3
	.word	4614
	.byte	20,1,1,19
	.word	897
	.byte	19
	.word	897
	.byte	0,3
	.word	4642
	.byte	20,1,1,19
	.word	897
	.byte	0,3
	.word	4661
	.byte	18
	.word	897
	.byte	1,1,19
	.word	897
	.byte	0,3
	.word	4675
	.byte	3
	.word	2677
	.byte	20,1,1,19
	.word	4609
	.byte	19
	.word	4693
	.byte	19
	.word	897
	.byte	0,3
	.word	4698
	.byte	18
	.word	897
	.byte	1,1,19
	.word	897
	.byte	19
	.word	1270
	.byte	19
	.word	897
	.byte	0,3
	.word	4722
	.byte	10,11,164,1,9,56,11
	.byte	'TLTransmit_pfct',0
	.word	4637
	.byte	4,2,35,0,11
	.byte	'TLInit_pfct',0
	.word	4656
	.byte	4,2,35,4,11
	.byte	'TLConnect_pfct',0
	.word	4670
	.byte	4,2,35,8,11
	.byte	'TLDisconnect_pfct',0
	.word	4688
	.byte	4,2,35,12,11
	.byte	'TLTransportLayerCmd_pfct',0
	.word	4717
	.byte	4,2,35,16,11
	.byte	'TLGetTxPduId_pfct',0
	.word	4745
	.byte	4,2,35,20,11
	.byte	'MaxCto_u8',0
	.word	897
	.byte	1,2,35,24,11
	.byte	'MaxDto_u16',0
	.word	1270
	.byte	2,2,35,26,11
	.byte	'TimestampType_en',0
	.word	4370
	.byte	4,2,35,28,11
	.byte	'IdFieldType_en',0
	.word	3752
	.byte	4,2,35,32,11
	.byte	'OverloadType_en',0
	.word	3618
	.byte	4,2,35,36,11
	.byte	'OdtOptimizationType_en',0
	.word	3969
	.byte	4,2,35,40,11
	.byte	'Consistency_en',0
	.word	4245
	.byte	4,2,35,44,11
	.byte	'PdRam_u32',0
	.word	156
	.byte	4,2,35,48,11
	.byte	'EdRam_u32',0
	.word	156
	.byte	4,2,35,52,0,15
	.byte	'Xcp_PL_TL_Cfg_t',0,11,184,1,2
	.word	4750
	.byte	8,11,188,1,9,4,9
	.byte	'XCP_RAMSECTION_INVALID',0,0,9
	.byte	'XCP_RAMSECTION_PD',0,1,9
	.byte	'XCP_RAMSECTION_ED',0,2,0,15
	.byte	'Xcp_RamSectionType_t',0,11,193,1,2
	.word	5148
	.byte	10,11,195,1,9,12,11
	.byte	'DaqRamPtr_pu8',0
	.word	914
	.byte	4,2,35,0,11
	.byte	'DaqRamTotalSize_u32',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'RamSectionType_en',0
	.word	5148
	.byte	4,2,35,8,0,15
	.byte	'Xcp_DaqRamSection_Cfg_t',0,11,200,1,2
	.word	5250
	.byte	16,1
	.word	897
	.byte	17,0,0,10,11,203,1,9,8,11
	.byte	'DaqRamFreeSize_u32',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'PLConnected_ab',0
	.word	5369
	.byte	1,2,35,4,0,15
	.byte	'Xcp_DaqRamSections_t',0,11,207,1,2
	.word	5378
	.byte	10,11,230,1,9,4,11
	.byte	'EventChannelDirection_u8',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'EventChannelTimeCycle_u8',0
	.word	897
	.byte	1,2,35,1,11
	.byte	'EventChannelTimeUnit_u8',0
	.word	897
	.byte	1,2,35,2,11
	.byte	'EventChannelPriority_u8',0
	.word	897
	.byte	1,2,35,3,0,15
	.byte	'Xcp_EventChannel_Cfg_t',0,11,236,1,2
	.word	5467
	.byte	15
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	2972
	.byte	15
	.byte	'Can_IdType',0,12,32,16
	.word	156
	.byte	15
	.byte	'Can_HwHandleType',0,12,43,16
	.word	1270
	.byte	10,13,93,9,8,11
	.byte	'Class',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	897
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	156
	.byte	4,2,35,4,0,15
	.byte	'OsTrapInfoType',0,13,97,3
	.word	5710
	.byte	16,68
	.word	156
	.byte	17,16,0,10,13,154,1,9,68,11
	.byte	'store',0
	.word	5790
	.byte	68,2,35,0,0,16,68
	.word	5799
	.byte	17,0,0,15
	.byte	'Os_JumpBufType',0,13,156,1,3
	.word	5821
	.byte	15
	.byte	'Os_StackTraceType',0,13,174,1,18
	.word	156
	.byte	10,13,175,1,9,8,11
	.byte	'sp',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	156
	.byte	4,2,35,4,0,15
	.byte	'Os_StackValueType',0,13,175,1,63
	.word	5881
	.byte	15
	.byte	'Os_StackSizeType',0,13,176,1,27
	.word	5881
	.byte	21,1,1,3
	.word	5966
	.byte	15
	.byte	'Os_VoidVoidFunctionType',0,13,179,1,16
	.word	5969
	.byte	15
	.byte	'ApplicationType',0,13,193,1,23
	.word	897
	.byte	22
	.byte	'Os_ApplicationConfigurationType_s',0,13,198,1,16,2,11
	.byte	'app_id',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,1,0,15
	.byte	'Os_ApplicationConfigurationType',0,13,201,1,3
	.word	6032
	.byte	15
	.byte	'Os_CoreStateType',0,13,203,1,16
	.word	156
	.byte	15
	.byte	'AreaIdType',0,13,204,1,16
	.word	1270
	.byte	15
	.byte	'Os_PeripheralAddressType',0,13,212,1,22
	.word	156
	.byte	15
	.byte	'TickType',0,13,221,1,22
	.word	156
	.byte	15
	.byte	'Os_StopwatchTickType',0,13,225,1,22
	.word	156
	.byte	3
	.word	156
	.byte	15
	.byte	'Os_Lockable',0,13,234,1,18
	.word	6274
	.byte	15
	.byte	'CoreIdType',0,13,236,1,16
	.word	1270
	.byte	15
	.byte	'SpinlockIdType',0,13,237,1,16
	.word	1270
	.byte	8,13,239,1,9,4,9
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,9
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,15
	.byte	'TryToGetSpinlockType',0,13,239,1,74
	.word	6344
	.byte	8,13,174,2,9,4,9
	.byte	'APPLICATION_ACCESSIBLE',0,0,9
	.byte	'APPLICATION_RESTARTING',0,1,9
	.byte	'APPLICATION_TERMINATED',0,2,0,15
	.byte	'ApplicationStateType',0,13,174,2,92
	.word	6437
	.byte	20,1,1,19
	.word	897
	.byte	19
	.word	141
	.byte	0,3
	.word	6549
	.byte	15
	.byte	'Os_FunctionEntryType',0,13,183,2,16
	.word	6563
	.byte	22
	.byte	'Os_MeterInfoType_s',0,13,193,2,16,48,11
	.byte	'elapsed',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	156
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	156
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	5881
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	5881
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	5881
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	5881
	.byte	8,2,35,40,0,15
	.byte	'Os_MeterInfoType',0,13,202,2,3
	.word	6598
	.byte	3
	.word	6598
	.byte	15
	.byte	'Os_MeterInfoRefType',0,13,203,2,50
	.word	6796
	.byte	15
	.byte	'EventMaskType',0,13,206,2,15
	.word	897
	.byte	15
	.byte	'Os_imaskType',0,13,211,2,16
	.word	156
	.byte	22
	.byte	'Os_ISRDynType_s',0,13,213,2,16,48,11
	.byte	'meter',0
	.word	6598
	.byte	48,2,35,0,0,15
	.byte	'Os_ISRDynType',0,13,215,2,3
	.word	6875
	.byte	3
	.word	6875
	.byte	4
	.word	6936
	.byte	22
	.byte	'Os_ISRType_s',0,13,216,2,16,24,11
	.byte	'entry_function',0
	.word	5974
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	6941
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	156
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	5881
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	897
	.byte	1,2,35,21,0,15
	.byte	'Os_ISRType',0,13,223,2,3
	.word	6946
	.byte	3
	.word	5966
	.byte	4
	.word	6946
	.byte	3
	.word	7105
	.byte	15
	.byte	'ISRType',0,13,224,2,46
	.word	7110
	.byte	15
	.byte	'Os_bitmask',0,13,239,2,22
	.word	156
	.byte	15
	.byte	'Os_pset0Type',0,13,240,2,20
	.word	156
	.byte	15
	.byte	'Os_pset1Type',0,13,241,2,20
	.word	156
	.byte	15
	.byte	'Os_pset2Type',0,13,242,2,20
	.word	156
	.byte	23,13,243,2,9,4,11
	.byte	'p0',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	156
	.byte	4,2,35,0,0,15
	.byte	'Os_psetType',0,13,247,2,3
	.word	7218
	.byte	23,13,249,2,9,4,11
	.byte	't0',0
	.word	156
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	156
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	156
	.byte	4,2,35,0,0,15
	.byte	'Os_tpmaskType',0,13,253,2,3
	.word	7282
	.byte	15
	.byte	'Os_ActivationCountType',0,13,254,2,23
	.word	897
	.byte	22
	.byte	'Os_TaskDynType_s',0,13,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	5830
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	6598
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	897
	.byte	1,2,35,116,0,15
	.byte	'Os_TaskDynType',0,13,132,3,3
	.word	7380
	.byte	16,68
	.word	5799
	.byte	17,0,0,3
	.word	7380
	.byte	4
	.word	7506
	.byte	22
	.byte	'Os_TaskType_s',0,13,134,3,16,40,11
	.byte	'dynamic',0
	.word	7511
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	5974
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	7218
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	7282
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	7282
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	1270
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	156
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	5881
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	897
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	897
	.byte	1,2,35,38,0,15
	.byte	'Os_TaskType',0,13,146,3,3
	.word	7516
	.byte	4
	.word	7516
	.byte	3
	.word	7766
	.byte	15
	.byte	'TaskType',0,13,147,3,47
	.word	7771
	.byte	24
	.byte	'Os_TaskStateType',0,13,155,3,6,4,9
	.byte	'SUSPENDED',0,0,9
	.byte	'READY',0,1,9
	.byte	'WAITING',0,2,9
	.byte	'RUNNING',0,3,0,15
	.byte	'TaskStateType',0,13,156,3,31
	.word	7794
	.byte	23,13,167,3,3,4,11
	.byte	'tpmask',0
	.word	7282
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType_s',0,13,166,3,16,4,11
	.byte	'saved_priority',0
	.word	7881
	.byte	4,2,35,0,0,15
	.byte	'Os_ResourceDynType',0,13,170,3,3
	.word	7904
	.byte	3
	.word	7904
	.byte	4
	.word	7984
	.byte	22
	.byte	'Os_ResourceType_s',0,13,171,3,16,12,11
	.byte	'dynamic',0
	.word	7989
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	7282
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,8,0,15
	.byte	'Os_ResourceType',0,13,175,3,3
	.word	7994
	.byte	10,13,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	156
	.byte	4,2,35,8,0,15
	.byte	'AlarmBaseType',0,13,185,3,3
	.word	8093
	.byte	10,13,206,3,9,8,11
	.byte	'Running',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	897
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	156
	.byte	4,2,35,4,0,15
	.byte	'Os_CounterStatusType',0,13,210,3,3
	.word	8188
	.byte	25
	.word	897
	.byte	1,1,3
	.word	8274
	.byte	15
	.byte	'Os_CounterIncrAdvType',0,13,217,3,22
	.word	8281
	.byte	22
	.byte	's_swd',0,13,222,3,12,4,11
	.byte	'count',0
	.word	156
	.byte	4,2,35,0,0,23,13,221,3,3,4,11
	.byte	'sw',0
	.word	8317
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType_s',0,13,220,3,16,4,11
	.byte	'type_dependent',0
	.word	8345
	.byte	4,2,35,0,0,15
	.byte	'Os_CounterDynType',0,13,226,3,3
	.word	8364
	.byte	3
	.word	8364
	.byte	4
	.word	8442
	.byte	22
	.byte	'Os_CounterType_s',0,13,227,3,16,28,11
	.byte	'dynamic',0
	.word	8447
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	8286
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	8093
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	141
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	897
	.byte	1,2,35,25,0,15
	.byte	'Os_CounterType',0,13,234,3,3
	.word	8452
	.byte	3
	.word	8274
	.byte	4
	.word	8452
	.byte	3
	.word	8604
	.byte	15
	.byte	'CounterType',0,13,235,3,52
	.word	8609
	.byte	24
	.byte	'Os_ScheduleTableStatusType',0,13,240,3,6,4,9
	.byte	'SCHEDULETABLE_STOPPED',0,0,9
	.byte	'SCHEDULETABLE_NEXT',0,1,9
	.byte	'SCHEDULETABLE_WAITING',0,2,9
	.byte	'SCHEDULETABLE_RUNNING',0,3,9
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,15
	.byte	'ScheduleTableStatusType',0,13,241,3,41
	.word	8635
	.byte	4
	.word	.L272-.L78
	.byte	3
	.word	8835
	.byte	15
	.byte	'ScheduleTableType',0,13,128,4,58
	.word	8840
	.byte	22
	.byte	'Os_ScheduleTableDynType_s',0,13,130,4,16,16,11
	.byte	'match',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	8845
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	8635
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	1270
	.byte	2,2,35,12,0,3
	.word	8872
	.byte	4
	.word	8965
.L272:
	.byte	22
	.byte	'Os_ScheduleTableType_s',0,13,247,3,16,16,11
	.byte	'dynamic',0
	.word	8970
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	8614
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	897
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	1270
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	897
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	897
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	897
	.byte	1,2,35,14,0,15
	.byte	'Os_ScheduleTableType',0,13,255,3,3
	.word	8975
	.byte	4
	.word	8975
	.byte	3
	.word	9155
	.byte	4
	.word	8452
	.byte	3
	.word	9165
	.byte	12
	.word	6279
	.byte	12
	.word	7218
	.byte	12
	.word	7115
	.byte	12
	.word	7776
	.byte	12
	.word	7282
	.byte	12
	.word	897
	.byte	12
	.word	7776
	.byte	22
	.byte	'Os_ControlledCoreType_s',0,13,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	5710
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	9175
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	9180
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	9185
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	9190
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	9195
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	6801
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	6598
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	897
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	9200
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	5881
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	897
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	9205
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	5881
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	897
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	897
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	897
	.byte	1,2,35,110,0,15
	.byte	'Os_ControlledCoreType',0,13,141,7,3
	.word	9210
	.byte	3
	.word	156
	.byte	4
	.word	6946
	.byte	3
	.word	9666
	.byte	4
	.word	7516
	.byte	3
	.word	9676
	.byte	3
	.word	6598
	.byte	22
	.byte	'Os_AnyCoreType_s',0,13,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	156
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	156
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	156
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	156
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	5830
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	897
	.byte	1,2,35,92,0,15
	.byte	'Os_AnyCoreType',0,13,160,7,3
	.word	9691
	.byte	15
	.byte	'Can_TxObjPriorityClassType',0,14,219,3,16
	.word	156
	.byte	22
	.byte	'Can_TxHwObjectConfigType',0,14,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	897
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	156
	.byte	4,2,35,4,0,15
	.byte	'Can_TxHwObjectConfigType',0,14,252,3,3
	.word	9968
	.byte	22
	.byte	'Can_RxHwObjectConfigType',0,14,129,4,16,12,11
	.byte	'MaskRef',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	897
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	897
	.byte	1,2,35,9,0,15
	.byte	'Can_RxHwObjectConfigType',0,14,147,4,3
	.word	10104
	.byte	16,4
	.word	897
	.byte	17,3,0,22
	.byte	'Can_ControllerMOMapConfigType',0,14,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	10244
	.byte	4,2,35,0,0,15
	.byte	'Can_ControllerMOMapConfigType',0,14,184,4,3
	.word	10253
	.byte	22
	.byte	'Can_NPCRValueType',0,14,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	1270
	.byte	2,2,35,0,0,15
	.byte	'Can_NPCRValueType',0,14,191,4,3
	.word	10354
	.byte	22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	1270
	.byte	2,2,35,4,0,15
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,198,4,3
	.word	10429
	.byte	4
	.word	10429
	.byte	3
	.word	10594
	.byte	22
	.byte	'Can_BaudrateConfigPtrType',0,14,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	10599
	.byte	4,2,35,0,0,15
	.byte	'Can_BaudrateConfigPtrType',0,14,204,4,3
	.word	10604
	.byte	22
	.byte	'Can_EventHandlingType',0,14,226,4,16,4,11
	.byte	'CanEventType',0
	.word	10244
	.byte	4,2,35,0,0,15
	.byte	'Can_EventHandlingType',0,14,229,4,3
	.word	10704
	.byte	15
	.byte	'Rte_TransformerErrorCode',0,15,130,1,15
	.word	897
	.byte	15
	.byte	'Rte_TransformerClass',0,15,131,1,15
	.word	897
	.byte	10,15,168,1,9,12,11
	.byte	'in',0
	.word	141
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	141
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	1270
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	897
	.byte	1,2,35,10,0,15
	.byte	'Rte_QDynType',0,15,173,1,3
	.word	10850
	.byte	8,15,175,1,9,4,9
	.byte	'RTE_DRA',0,0,9
	.byte	'RTE_WOWP',0,1,9
	.byte	'RTE_TASK',0,2,9
	.byte	'RTE_ARE',0,3,9
	.byte	'RTE_EV',0,4,9
	.byte	'RTE_MSI',0,5,0,15
	.byte	'Rte_NotificationType',0,15,182,1,3
	.word	10937
	.byte	16,128,8
	.word	897
	.byte	17,255,7,0,15
	.byte	'Impl_NVM_DstPtrType_1024',0,16,50,15
	.word	11035
	.byte	15
	.byte	'CanIf_u32_impl',0,16,69,16
	.word	156
	.byte	15
	.byte	'CanIf_u16_impl',0,16,71,16
	.word	1270
	.byte	15
	.byte	'CanIf_u8_impl',0,16,73,15
	.word	897
	.byte	15
	.byte	'CanIf_ControllerModeType_Enum_impl',0,16,88,15
	.word	897
	.byte	15
	.byte	'CanIf_PduModeType_Enum_impl',0,16,90,15
	.word	897
	.byte	10,16,92,9,2,11
	.byte	'DeviceMode',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	897
	.byte	1,2,35,1,0,15
	.byte	'CanIf_ControllerStateType_struct_impl',0,16,95,3
	.word	11226
	.byte	15
	.byte	'CanIf_NotifStatusType_Enum_impl',0,16,100,15
	.word	897
	.byte	15
	.byte	'CanSM_boolean_Impl',0,16,120,15
	.word	897
	.byte	15
	.byte	'CanSM_u8_Impl',0,16,123,15
	.word	897
	.byte	15
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,16,128,1,15
	.word	897
	.byte	15
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,16,132,1,15
	.word	897
	.byte	15
	.byte	'CanSM_u16_Impl',0,16,136,1,16
	.word	1270
	.byte	15
	.byte	'CanSM_TimerStateType_Enum_impl',0,16,138,1,15
	.word	897
	.byte	10,16,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	897
	.byte	1,2,35,2,0,15
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,16,143,1,3
	.word	11567
	.byte	15
	.byte	'Com_impl_u16',0,16,154,1,16
	.word	1270
	.byte	15
	.byte	'Com_impl_u8',0,16,157,1,15
	.word	897
	.byte	15
	.byte	'ComM_uint32_Impl',0,16,173,1,16
	.word	156
	.byte	15
	.byte	'ComM_uint16_Impl',0,16,175,1,16
	.word	1270
	.byte	15
	.byte	'ComM_uint8_Impl',0,16,177,1,15
	.word	897
	.byte	15
	.byte	'ComM_bool_Impl',0,16,179,1,15
	.word	897
	.byte	10,16,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	156
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	156
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	1270
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	897
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	897
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	897
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	897
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	897
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	897
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	897
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	897
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	897
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	897
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	897
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	897
	.byte	1,2,35,21,0,15
	.byte	'ComM_ChannelStruct_Impl',0,16,197,1,3
	.word	11799
	.byte	10,16,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	1270
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	897
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	897
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	897
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	897
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	897
	.byte	1,2,35,8,0,15
	.byte	'ComM_UserStruct_Impl',0,16,214,1,3
	.word	12303
	.byte	15
	.byte	'Dcm_IOOperationResponseType',0,16,252,1,15
	.word	897
	.byte	15
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	16,138,2,15
	.word	897
	.byte	15
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,16,146,2,15
	.word	897
	.byte	15
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,16,150,2,15
	.word	897
	.byte	15
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,16,154,2,15
	.word	897
	.byte	15
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,16,243,3,34
	.word	11046
	.byte	16,128,8
	.word	897
	.byte	17,255,7,0,15
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,16,246,3,34
	.word	11046
	.byte	8,5,216,1,9,4,9
	.byte	'XCP_BG_IDLE',0,0,9
	.byte	'XCP_BG_CHKSUM',0,1,9
	.byte	'XCP_BG_MEM_WRITE',0,2,9
	.byte	'XCP_BG_REPEAT_CMD',0,3,9
	.byte	'XCP_BG_DO_DISCONNECT',0,4,9
	.byte	'XCP_BG_CANCEL_REQ',0,5,0,15
	.byte	'Xcp_BgActivity_t',0,5,224,1,3
	.word	13121
	.byte	20,1,1,19
	.word	4609
	.byte	19
	.word	897
	.byte	0,3
	.word	13266
	.byte	15
	.byte	'Xcp_CmdFunctionPtr',0,5,230,1,16
	.word	13280
	.byte	15
	.byte	'Xcp_Que_t',0,5,247,1,3
	.word	1387
	.byte	10,5,250,1,9,24,11
	.byte	'XcpState_en',0
	.word	3359
	.byte	4,2,35,0,11
	.byte	'ConnectedTlId_u8',0
	.word	897
	.byte	1,2,35,4,11
	.byte	'ResourceProtStatus_u8',0
	.word	897
	.byte	1,2,35,5,11
	.byte	'Mta',0
	.word	919
	.byte	8,2,35,8,11
	.byte	'MaxDto_u16',0
	.word	1270
	.byte	2,2,35,16,11
	.byte	'MaxDtoAligned_u16',0
	.word	1270
	.byte	2,2,35,18,11
	.byte	'MaxCto_u8',0
	.word	897
	.byte	1,2,35,20,0,15
	.byte	'Xcp_Session_t',0,5,138,2,2
	.word	13332
	.byte	10,5,149,2,9,12,11
	.byte	'Buffer_au8',0
	.word	4528
	.byte	8,2,35,0,11
	.byte	'Length_u32',0
	.word	156
	.byte	4,2,35,8,0,15
	.byte	'Xcp_CtoMax_t',0,5,153,2,2
	.word	13519
	.byte	16,255,1
	.word	897
	.byte	17,254,1,0,10,5,157,2,9,132,2,11
	.byte	'UploadRunning_b',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'RemainingSize_u8',0
	.word	897
	.byte	1,2,35,1,11
	.byte	'DownloadSize_u8',0
	.word	897
	.byte	1,2,35,2,11
	.byte	'ReceivedSize_u8',0
	.word	897
	.byte	1,2,35,3,11
	.byte	'DownloadBuffer_au8',0
	.word	13588
	.byte	255,1,2,35,4,0,15
	.byte	'Xcp_Mem_t',0,5,178,2,2
	.word	13599
	.byte	10,5,183,2,9,2,11
	.byte	'SeedWaitingKey_b',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'SeedRemaingSize_u8',0
	.word	897
	.byte	1,2,35,1,0,15
	.byte	'Xcp_SeedAndKey_t',0,5,187,2,2
	.word	13756
	.byte	10,5,192,2,9,4,11
	.byte	'BlockSize_u32',0
	.word	156
	.byte	4,2,35,0,0,15
	.byte	'Xcp_Checksum_t',0,5,198,2,2
	.word	13843
	.byte	10,5,203,2,9,18,11
	.byte	'Xcp_Debug_TransmitOkCtr',0
	.word	1270
	.byte	2,2,35,0,11
	.byte	'Xcp_Debug_TransmitNotOkCtr',0
	.word	1270
	.byte	2,2,35,2,11
	.byte	'Xcp_Debug_SendResTxConfCtr',0
	.word	1270
	.byte	2,2,35,4,11
	.byte	'Xcp_Debug_SendResCtr',0
	.word	1270
	.byte	2,2,35,6,11
	.byte	'Xcp_Debug_SendEvTxConfCtr',0
	.word	1270
	.byte	2,2,35,8,11
	.byte	'Xcp_Debug_SendEvCtr',0
	.word	1270
	.byte	2,2,35,10,11
	.byte	'Xcp_Debug_SendDaqTxConfCtr',0
	.word	1270
	.byte	2,2,35,12,11
	.byte	'Xcp_Debug_SendDaqCtr',0
	.word	1270
	.byte	2,2,35,14,11
	.byte	'Xcp_Debug_TxConfCtr',0
	.word	1270
	.byte	2,2,35,16,0,15
	.byte	'Xcp_Debug_t',0,5,216,2,2
	.word	13897
	.byte	15
	.byte	'Xcp_SelectedOdtEntry_t',0,5,231,2,2
	.word	1887
	.byte	15
	.byte	'Xcp_Odt_t',0,5,240,2,2
	.word	1770
	.byte	15
	.byte	'Xcp_DaqList_t',0,5,143,3,2
	.word	1496
	.byte	15
	.byte	'Xcp_DaqConfig_t',0,5,180,3,2
	.word	2295
	.byte	10,5,225,3,9,80,11
	.byte	'Session',0
	.word	13332
	.byte	24,2,35,0,11
	.byte	'DaqConfig',0
	.word	2295
	.byte	56,2,35,24,0,15
	.byte	'Xcp_NoInit_t',0,5,234,3,2
	.word	14318
	.byte	16,8
	.word	5378
	.byte	17,0,0,16,1
	.word	897
	.byte	17,0,0,10,5,236,3,9,12,11
	.byte	'DaqRamSections',0
	.word	14383
	.byte	8,2,35,0,11
	.byte	'DaqTransmissionStopped_b',0
	.word	897
	.byte	1,2,35,8,11
	.byte	'Tl2PlRef_au8',0
	.word	14392
	.byte	1,2,35,9,11
	.byte	'EnabledResources_u8',0
	.word	897
	.byte	1,2,35,10,11
	.byte	'InitStatus_u8',0
	.word	897
	.byte	1,2,35,11,0,15
	.byte	'Xcp_GlobalNoInit_t',0,5,255,3,2
	.word	14401
	.byte	10,5,130,4,9,208,2,11
	.byte	'Wait4TxConfCtr_u8',0
	.word	897
	.byte	1,2,35,0,11
	.byte	'BgDoDisconnect_Response',0
	.word	356
	.byte	4,2,35,4,11
	.byte	'BgActivityState',0
	.word	13121
	.byte	4,2,35,8,11
	.byte	'ResBuffer',0
	.word	13519
	.byte	12,2,35,12,11
	.byte	'EvBuffer',0
	.word	4537
	.byte	12,2,35,24,11
	.byte	'CmdBuffer',0
	.word	4537
	.byte	12,2,35,36,11
	.byte	'Mem',0
	.word	13599
	.byte	132,2,2,35,48,11
	.byte	'SeedAndKey',0
	.word	13756
	.byte	2,3,35,180,2,11
	.byte	'Checksum',0
	.word	13843
	.byte	4,3,35,184,2,11
	.byte	'Debug',0
	.word	13897
	.byte	18,3,35,188,2,0,15
	.byte	'Xcp_Cleared_t',0,5,150,4,2
	.word	14568
	.byte	16,80
	.word	14318
	.byte	17,0,0,26
	.byte	'Xcp_NoInit',0,5,158,4,29
	.word	14810
	.byte	1,1,26
	.byte	'Xcp_GlobalNoInit',0,5,159,4,29
	.word	14401
	.byte	1,1,16,208,2
	.word	14568
	.byte	17,0,0,26
	.byte	'Xcp_Cleared',0,5,165,4,29
	.word	14869
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,59,0,3,8,0,0,3,15,0,73,19,0,0,4,38,0,73,19,0,0,5,36,0
	.byte	3,8,11,15,62,15,0,0,6,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,7,5,0,3,8,58,15,59
	.byte	15,57,15,73,19,0,0,8,4,1,58,15,59,15,57,15,11,15,0,0,9,40,0,3,8,28,13,0,0,10,19,1,58,15,59,15,57,15,11
	.byte	15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63
	.byte	12,60,12,0,0,14,21,0,54,15,0,0,15,22,0,3,8,58,15,59,15,57,15,73,19,0,0,16,1,1,11,15,73,19,0,0,17,33,0
	.byte	47,15,0,0,18,21,1,73,19,54,15,39,12,0,0,19,5,0,73,19,0,0,20,21,1,54,15,39,12,0,0,21,21,0,54,15,39,12,0
	.byte	0,22,19,1,3,8,58,15,59,15,57,15,11,15,0,0,23,23,1,58,15,59,15,57,15,11,15,0,0,24,4,1,3,8,58,15,59,15,57
	.byte	15,11,15,0,0,25,21,0,73,19,54,15,39,12,0,0,26,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L80:
	.word	.L274-.L273
.L273:
	.half	3
	.word	.L276-.L275
.L275:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Cbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Priv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0,0
.L276:
.L274:
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_info'
.L81:
	.word	306
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_DaqRamCheck',0,1,231,3,9
	.word	.L126
	.byte	1,1,1
	.word	.L70,.L127,.L69
	.byte	4
	.byte	'AddDaqList',0,1,231,3,32
	.word	.L128,.L129
	.byte	4
	.byte	'AddOdt',0,1,231,3,50
	.word	.L126,.L130
	.byte	4
	.byte	'AddOdtEntry',0,1,231,3,64
	.word	.L126,.L131
	.byte	4
	.byte	'protLayerId',0,1,231,3,83
	.word	.L126,.L132
	.byte	5
	.word	.L70,.L127
	.byte	6
	.byte	'retval',0,1,237,3,11
	.word	.L126,.L133
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_line'
.L83:
	.word	.L278-.L277
.L277:
	.half	3
	.word	.L280-.L279
.L279:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L280:
	.byte	5,10,7,0,5,2
	.word	.L70
	.byte	3,239,3,1,5,17,9
	.half	.L261-.L70
	.byte	3,2,1,5,7,9
	.half	.L281-.L261
	.byte	1,5,17,9
	.half	.L282-.L281
	.byte	1,5,40,9
	.half	.L283-.L282
	.byte	1,5,107,9
	.half	.L284-.L283
	.byte	1,5,3,9
	.half	.L260-.L284
	.byte	1,5,12,9
	.half	.L285-.L260
	.byte	3,2,1,5,3,9
	.half	.L38-.L285
	.byte	3,5,1,5,1,9
	.half	.L39-.L38
	.byte	3,1,1,7,9
	.half	.L85-.L39
	.byte	0,1,1
.L278:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L70,0,.L85-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_info'
.L86:
	.word	418
	.half	3
	.word	.L87
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L89,.L88
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_DaqRamCalc',0,1,158,2,8
	.word	.L134
	.byte	1,1,1
	.word	.L66,.L135,.L65
	.byte	4
	.byte	'AddDaqList',0,1,158,2,30
	.word	.L128,.L136
	.byte	4
	.byte	'AddOdt',0,1,158,2,48
	.word	.L126,.L137
	.byte	4
	.byte	'AddOdtEntry',0,1,158,2,62
	.word	.L126,.L138
	.byte	4
	.byte	'protLayerId',0,1,158,2,81
	.word	.L126,.L139
	.byte	5
	.word	.L66,.L135
	.byte	6
	.byte	'DaqConfig',0,1,164,2,20
	.word	.L140,.L141
	.byte	6
	.byte	'memReq',0,1,165,2,11
	.word	.L134,.L142
	.byte	6
	.byte	'DaqListCntNew_u32',0,1,166,2,11
	.word	.L134,.L143
	.byte	6
	.byte	'OdtCntNew_u32',0,1,167,2,11
	.word	.L134,.L144
	.byte	6
	.byte	'OdtEntryCntNew_u32',0,1,168,2,11
	.word	.L134,.L145
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_abbrev'
.L87:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_line'
.L88:
	.word	.L287-.L286
.L286:
	.half	3
	.word	.L289-.L288
.L288:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L289:
	.byte	5,8,7,0,5,2
	.word	.L66
	.byte	3,157,2,1,5,26,9
	.half	.L234-.L66
	.byte	3,13,1,5,16,9
	.half	.L290-.L234
	.byte	1,5,26,9
	.half	.L291-.L290
	.byte	1,5,39,9
	.half	.L292-.L291
	.byte	1,5,33,9
	.half	.L240-.L292
	.byte	3,2,1,5,51,9
	.half	.L241-.L240
	.byte	1,5,33,9
	.half	.L239-.L241
	.byte	3,1,1,5,51,9
	.half	.L242-.L239
	.byte	1,5,33,9
	.half	.L293-.L242
	.byte	3,1,1,5,51,9
	.half	.L244-.L293
	.byte	1,5,32,9
	.half	.L294-.L244
	.byte	3,3,1,5,10,9
	.half	.L295-.L294
	.byte	1,5,30,7,9
	.half	.L296-.L295
	.byte	3,1,1,7,9
	.half	.L297-.L296
	.byte	3,1,1,5,20,7,9
	.half	.L298-.L297
	.byte	3,1,1,5,36,9
	.half	.L299-.L298
	.byte	1,5,12,7,9
	.half	.L26-.L299
	.byte	3,4,1,5,25,9
	.half	.L245-.L26
	.byte	1,5,26,9
	.half	.L29-.L245
	.byte	3,13,1,5,37,9
	.half	.L300-.L29
	.byte	3,10,1,5,22,9
	.half	.L301-.L300
	.byte	1,5,53,9
	.half	.L302-.L301
	.byte	3,10,1,5,34,9
	.half	.L303-.L302
	.byte	1,5,60,9
	.half	.L304-.L303
	.byte	3,25,1,5,79,9
	.half	.L305-.L304
	.byte	1,5,31,9
	.half	.L306-.L305
	.byte	1,5,43,9
	.half	.L307-.L306
	.byte	3,11,1,5,31,9
	.half	.L308-.L307
	.byte	1,5,36,9
	.half	.L309-.L308
	.byte	3,10,1,5,25,9
	.half	.L310-.L309
	.byte	1,5,39,9
	.half	.L311-.L310
	.byte	3,4,1,5,78,9
	.half	.L312-.L311
	.byte	1,5,85,9
	.half	.L235-.L312
	.byte	1,5,50,9
	.half	.L237-.L235
	.byte	1,5,125,9
	.half	.L313-.L237
	.byte	1,5,99,9
	.half	.L314-.L313
	.byte	1,5,3,9
	.half	.L30-.L314
	.byte	3,5,1,5,1,9
	.half	.L31-.L30
	.byte	3,1,1,7,9
	.half	.L90-.L31
	.byte	0,1,1
.L287:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_ranges'
.L89:
	.word	-1,.L66,0,.L90-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_info'
.L91:
	.word	382
	.half	3
	.word	.L92
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L94,.L93
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_DaqQueRamCalc',0,1,157,3,8
	.word	.L134
	.byte	1,1,1
	.word	.L68,.L146,.L67
	.byte	4
	.byte	'AddOdt',0,1,157,3,32
	.word	.L126,.L147
	.byte	4
	.byte	'setQuePointers',0,1,157,3,48
	.word	.L126,.L148
	.byte	4
	.byte	'protLayerId',0,1,157,3,70
	.word	.L126,.L149
	.byte	5
	.word	.L68,.L146
	.byte	6
	.byte	'daqListPtr',0,1,163,3,20
	.word	.L150,.L151
	.byte	6
	.byte	'MemReq',0,1,164,3,12
	.word	.L134,.L152
	.byte	6
	.byte	'DAQListNo',0,1,165,3,18
	.word	.L153,.L154
	.byte	6
	.byte	'OdtElementsInQue',0,1,166,3,12
	.word	.L128,.L155
	.byte	6
	.byte	'Odts',0,1,167,3,12
	.word	.L126,.L156
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_abbrev'
.L92:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_line'
.L93:
	.word	.L316-.L315
.L315:
	.half	3
	.word	.L318-.L317
.L317:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L318:
	.byte	5,8,7,0,5,2
	.word	.L68
	.byte	3,156,3,1,5,12,9
	.half	.L319-.L68
	.byte	3,13,1,5,20,9
	.half	.L246-.L319
	.byte	3,3,1,5,22,9
	.half	.L248-.L246
	.byte	3,2,1,5,85,9
	.half	.L320-.L248
	.byte	3,126,1,5,22,9
	.half	.L33-.L320
	.byte	3,2,1,5,7,9
	.half	.L249-.L33
	.byte	3,1,1,5,71,7,9
	.half	.L250-.L249
	.byte	3,3,1,5,80,9
	.half	.L321-.L250
	.byte	1,5,34,9
	.half	.L322-.L321
	.byte	1,5,24,9
	.half	.L34-.L322
	.byte	3,4,1,5,7,9
	.half	.L251-.L34
	.byte	3,2,1,5,14,7,9
	.half	.L253-.L251
	.byte	3,3,1,5,16,9
	.half	.L254-.L253
	.byte	3,2,1,5,37,9
	.half	.L35-.L254
	.byte	3,11,1,5,39,9
	.half	.L323-.L35
	.byte	3,1,1,5,37,9
	.half	.L252-.L323
	.byte	1,5,16,9
	.half	.L256-.L252
	.byte	1,5,9,9
	.half	.L247-.L256
	.byte	3,2,1,5,37,7,9
	.half	.L258-.L247
	.byte	3,3,1,5,16,9
	.half	.L36-.L258
	.byte	3,4,1,5,96,9
	.half	.L259-.L36
	.byte	3,90,1,5,70,9
	.half	.L32-.L259
	.byte	1,5,85,9
	.half	.L324-.L32
	.byte	1,5,3,7,9
	.half	.L325-.L324
	.byte	3,44,1,5,1,9
	.half	.L37-.L325
	.byte	3,1,1,7,9
	.half	.L95-.L37
	.byte	0,1,1
.L316:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_ranges'
.L94:
	.word	-1,.L68,0,.L95-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_info'
.L96:
	.word	236
	.half	3
	.word	.L97
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L99,.L98
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_StoreCommand',0,1,136,5,6,1,1,1
	.word	.L76,.L157,.L75
	.byte	4
	.byte	'XcpPacket',0,1,136,5,42
	.word	.L158,.L159
	.byte	4
	.byte	'protLayerId',0,1,136,5,59
	.word	.L126,.L160
	.byte	5
	.word	.L76,.L157
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_abbrev'
.L97:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_line'
.L98:
	.word	.L327-.L326
.L326:
	.half	3
	.word	.L329-.L328
.L328:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L329:
	.byte	5,6,7,0,5,2
	.word	.L76
	.byte	3,135,5,1,5,18,9
	.half	.L271-.L76
	.byte	3,3,1,5,7,9
	.half	.L270-.L271
	.byte	1,5,18,9
	.half	.L330-.L270
	.byte	1,5,31,9
	.half	.L331-.L330
	.byte	1,5,3,9
	.half	.L332-.L331
	.byte	1,5,5,7,9
	.half	.L333-.L332
	.byte	3,4,1,5,51,9
	.half	.L334-.L333
	.byte	3,1,1,5,40,9
	.half	.L335-.L334
	.byte	1,5,48,9
	.half	.L336-.L335
	.byte	3,1,1,5,46,9
	.half	.L337-.L336
	.byte	1,5,107,9
	.half	.L338-.L337
	.byte	3,126,1,5,5,9
	.half	.L58-.L338
	.byte	3,7,1,5,1,9
	.half	.L57-.L58
	.byte	3,2,1,7,9
	.half	.L100-.L57
	.byte	0,1,1
.L327:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_ranges'
.L99:
	.word	-1,.L76,0,.L100-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_MemRead')
	.sect	'.debug_info'
.L101:
	.word	292
	.half	3
	.word	.L102
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L104,.L103
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_MemRead',0,1,35,15
	.word	.L161
	.byte	1,1,1
	.word	.L60,.L162,.L59
	.byte	4
	.byte	'AddrPtrDst',0,1,35,34
	.word	.L163,.L164
	.byte	4
	.byte	'Length',0,1,35,52
	.word	.L126,.L165
	.byte	4
	.byte	'protLayerId',0,1,35,66
	.word	.L126,.L166
	.byte	5
	.word	.L60,.L162
	.byte	6
	.byte	'Error',0,1,41,19
	.word	.L161,.L167
	.byte	6
	.byte	'LocalMta',0,1,42,19
	.word	.L168,.L169
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_MemRead')
	.sect	'.debug_abbrev'
.L102:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_MemRead')
	.sect	'.debug_line'
.L103:
	.word	.L340-.L339
.L339:
	.half	3
	.word	.L342-.L341
.L341:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L342:
	.byte	5,15,7,0,5,2
	.word	.L60
	.byte	3,34,1,5,14,9
	.half	.L195-.L60
	.byte	3,10,1,5,16,9
	.half	.L197-.L195
	.byte	3,3,1,5,7,9
	.half	.L343-.L197
	.byte	1,5,46,7,9
	.half	.L344-.L343
	.byte	1,5,57,9
	.half	.L345-.L344
	.byte	1,5,11,7,9
	.half	.L346-.L345
	.byte	3,2,1,5,36,9
	.half	.L198-.L346
	.byte	1,5,23,9
	.half	.L2-.L198
	.byte	3,2,1,5,12,9
	.half	.L200-.L2
	.byte	1,5,23,9
	.half	.L347-.L200
	.byte	1,5,36,9
	.half	.L348-.L347
	.byte	1,5,8,9
	.half	.L349-.L348
	.byte	1,5,11,7,9
	.half	.L350-.L349
	.byte	3,2,1,5,29,9
	.half	.L201-.L350
	.byte	1,5,58,9
	.half	.L5-.L201
	.byte	3,13,1,5,16,9
	.half	.L4-.L5
	.byte	3,4,1,5,3,9
	.half	.L351-.L4
	.byte	1,5,5,7,9
	.half	.L352-.L351
	.byte	3,4,1,5,11,9
	.half	.L205-.L352
	.byte	3,3,1,5,38,9
	.half	.L353-.L205
	.byte	3,125,1,5,21,9
	.half	.L7-.L353
	.byte	3,5,1,5,8,9
	.half	.L354-.L7
	.byte	1,5,59,7,9
	.half	.L355-.L354
	.byte	3,5,1,5,11,9
	.half	.L203-.L355
	.byte	1,5,18,9
	.half	.L210-.L203
	.byte	3,21,1,5,5,9
	.half	.L356-.L210
	.byte	1,5,27,7,9
	.half	.L357-.L356
	.byte	3,3,1,5,38,9
	.half	.L358-.L357
	.byte	1,5,5,9
	.half	.L10-.L358
	.byte	3,125,1,5,3,9
	.half	.L8-.L10
	.byte	3,13,1,5,1,9
	.half	.L12-.L8
	.byte	3,1,1,7,9
	.half	.L105-.L12
	.byte	0,1,1
.L340:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_MemRead')
	.sect	'.debug_ranges'
.L104:
	.word	-1,.L60,0,.L105-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_info'
.L106:
	.word	299
	.half	3
	.word	.L107
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L109,.L108
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_MemWrite',0,1,136,1,15
	.word	.L161
	.byte	1,1,1
	.word	.L62,.L170,.L61
	.byte	4
	.byte	'AddrPtrSrc',0,1,136,1,41
	.word	.L171,.L172
	.byte	4
	.byte	'Length',0,1,136,1,59
	.word	.L126,.L173
	.byte	4
	.byte	'protLayerId',0,1,136,1,73
	.word	.L126,.L174
	.byte	5
	.word	.L62,.L170
	.byte	6
	.byte	'Error',0,1,142,1,19
	.word	.L161,.L175
	.byte	6
	.byte	'LocalMta',0,1,143,1,19
	.word	.L168,.L176
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_abbrev'
.L107:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_line'
.L108:
	.word	.L360-.L359
.L359:
	.half	3
	.word	.L362-.L361
.L361:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L362:
	.byte	5,15,7,0,5,2
	.word	.L62
	.byte	3,135,1,1,5,14,9
	.half	.L214-.L62
	.byte	3,10,1,5,16,9
	.half	.L216-.L214
	.byte	3,3,1,5,7,9
	.half	.L363-.L216
	.byte	1,5,46,7,9
	.half	.L364-.L363
	.byte	1,5,57,9
	.half	.L365-.L364
	.byte	1,5,11,7,9
	.half	.L366-.L365
	.byte	3,2,1,5,36,9
	.half	.L217-.L366
	.byte	1,5,23,9
	.half	.L13-.L217
	.byte	3,2,1,5,12,9
	.half	.L219-.L13
	.byte	1,5,23,9
	.half	.L367-.L219
	.byte	1,5,36,9
	.half	.L368-.L367
	.byte	1,5,8,9
	.half	.L369-.L368
	.byte	1,5,11,7,9
	.half	.L370-.L369
	.byte	3,2,1,5,29,9
	.half	.L220-.L370
	.byte	1,5,51,9
	.half	.L16-.L220
	.byte	3,13,1,5,16,9
	.half	.L15-.L16
	.byte	3,4,1,5,3,9
	.half	.L371-.L15
	.byte	1,5,20,7,9
	.half	.L372-.L371
	.byte	3,4,1,5,9,9
	.half	.L223-.L372
	.byte	1,5,20,9
	.half	.L373-.L223
	.byte	1,5,33,9
	.half	.L374-.L373
	.byte	1,5,5,9
	.half	.L375-.L374
	.byte	1,5,7,7,9
	.half	.L376-.L375
	.byte	3,4,1,5,97,9
	.half	.L19-.L376
	.byte	3,3,1,5,18,9
	.half	.L228-.L19
	.byte	3,3,1,5,5,9
	.half	.L377-.L228
	.byte	1,5,27,7,9
	.half	.L378-.L377
	.byte	3,3,1,5,38,9
	.half	.L379-.L378
	.byte	1,5,47,9
	.half	.L380-.L379
	.byte	1,5,23,9
	.half	.L20-.L380
	.byte	3,2,1,5,10,9
	.half	.L381-.L20
	.byte	1,5,52,7,9
	.half	.L229-.L381
	.byte	3,3,1,5,50,9
	.half	.L230-.L229
	.byte	3,1,1,5,48,9
	.half	.L382-.L230
	.byte	1,5,60,9
	.half	.L383-.L382
	.byte	3,127,1,5,3,9
	.half	.L18-.L383
	.byte	3,39,1,5,1,9
	.half	.L24-.L18
	.byte	3,1,1,7,9
	.half	.L110-.L24
	.byte	0,1,1
.L360:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_ranges'
.L109:
	.word	-1,.L62,0,.L110-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_info'
.L111:
	.word	241
	.half	3
	.word	.L112
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L114,.L113
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_MemWriteMainFunction',0,1,242,1,6,1,1,1
	.word	.L64,.L177,.L63
	.byte	4
	.byte	'protLayerId',0,1,242,1,37
	.word	.L126,.L178
	.byte	5
	.word	.L64,.L177
	.byte	6
	.byte	'Error',0,1,249,1,17
	.word	.L161,.L179
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_line'
.L113:
	.word	.L385-.L384
.L384:
	.half	3
	.word	.L387-.L386
.L386:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L387:
	.byte	5,6,7,0,5,2
	.word	.L64
	.byte	3,241,1,1,5,40,9
	.half	.L232-.L64
	.byte	3,10,1,5,16,9
	.half	.L231-.L232
	.byte	3,2,1,5,3,9
	.half	.L388-.L231
	.byte	1,5,50,7,9
	.half	.L389-.L388
	.byte	3,3,1,5,39,9
	.half	.L390-.L389
	.byte	1,5,50,9
	.half	.L391-.L390
	.byte	1,5,5,9
	.half	.L392-.L391
	.byte	1,5,25,9
	.half	.L393-.L392
	.byte	1,5,67,9
	.half	.L394-.L393
	.byte	1,5,36,9
	.half	.L395-.L394
	.byte	1,5,48,9
	.half	.L396-.L395
	.byte	3,3,1,5,46,9
	.half	.L397-.L396
	.byte	1,5,26,9
	.half	.L25-.L397
	.byte	3,4,1,5,1,9
	.half	.L233-.L25
	.byte	3,7,1,7,9
	.half	.L115-.L233
	.byte	0,1,1
.L385:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_ranges'
.L114:
	.word	-1,.L64,0,.L115-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_info'
.L116:
	.word	279
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_MemWriteProtectionCheck',0,1,137,4,15
	.word	.L161
	.byte	1,1,1
	.word	.L72,.L180,.L71
	.byte	4
	.byte	'XcpAddr',0,1,137,4,64
	.word	.L181,.L182
	.byte	4
	.byte	'Length',0,1,137,4,79
	.word	.L126,.L183
	.byte	5
	.word	.L72,.L180
	.byte	6
	.byte	'Error',0,1,142,4,17
	.word	.L161,.L184
	.byte	6
	.byte	'i',0,1,144,4,15
	.word	.L153,.L185
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_line'
.L118:
	.word	.L399-.L398
.L398:
	.half	3
	.word	.L401-.L400
.L400:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L401:
	.byte	5,15,7,0,5,2
	.word	.L72
	.byte	3,136,4,1,5,9,9
	.half	.L263-.L72
	.byte	3,11,1,5,34,9
	.half	.L265-.L263
	.byte	3,11,1,5,62,9
	.half	.L264-.L265
	.byte	1,5,14,9
	.half	.L402-.L264
	.byte	1,5,121,7,9
	.half	.L403-.L402
	.byte	1,5,138,1,9
	.half	.L404-.L403
	.byte	1,5,102,9
	.half	.L405-.L404
	.byte	1,5,62,7,9
	.half	.L40-.L405
	.byte	3,2,1,5,14,9
	.half	.L406-.L40
	.byte	1,5,138,1,7,9
	.half	.L407-.L406
	.byte	1,5,102,9
	.half	.L408-.L407
	.byte	1,5,62,7,9
	.half	.L42-.L408
	.byte	3,2,1,5,14,9
	.half	.L409-.L42
	.byte	1,5,121,7,9
	.half	.L410-.L409
	.byte	1,5,138,1,9
	.half	.L411-.L410
	.byte	1,5,102,9
	.half	.L412-.L411
	.byte	1,5,13,7,9
	.half	.L41-.L412
	.byte	3,3,1,5,36,9
	.half	.L413-.L41
	.byte	1,5,14,9
	.half	.L44-.L413
	.byte	3,5,1,5,33,9
	.half	.L266-.L44
	.byte	1,5,75,9
	.half	.L48-.L266
	.byte	3,5,1,5,88,9
	.half	.L414-.L48
	.byte	1,5,17,9
	.half	.L415-.L414
	.byte	1,5,128,1,7,9
	.half	.L416-.L415
	.byte	3,2,1,5,103,9
	.half	.L417-.L416
	.byte	1,5,47,9
	.half	.L418-.L417
	.byte	1,5,17,7,9
	.half	.L419-.L418
	.byte	3,3,1,5,11,9
	.half	.L420-.L419
	.byte	3,1,1,5,36,9
	.half	.L49-.L420
	.byte	3,117,1,5,33,9
	.half	.L47-.L49
	.byte	1,5,3,7,9
	.half	.L46-.L47
	.byte	3,27,1,5,1,9
	.half	.L52-.L46
	.byte	3,1,1,7,9
	.half	.L120-.L52
	.byte	0,1,1
.L399:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L72,0,.L120-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_info'
.L121:
	.word	288
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L77
	.byte	3
	.byte	'Xcp_MemReadProtectionCheck',0,1,215,4,15
	.word	.L161
	.byte	1,1,1
	.word	.L74,.L186,.L73
	.byte	4
	.byte	'XcpAddr',0,1,215,4,63
	.word	.L187,.L188
	.byte	4
	.byte	'Length',0,1,215,4,78
	.word	.L126,.L189
	.byte	4
	.byte	'protLayerId',0,1,215,4,92
	.word	.L126,.L190
	.byte	5
	.word	.L74,.L186
	.byte	6
	.byte	'Error',0,1,220,4,17
	.word	.L161,.L191
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_line'
.L123:
	.word	.L422-.L421
.L421:
	.half	3
	.word	.L424-.L423
.L423:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Utils.c',0,0,0,0,0
.L424:
	.byte	5,9,7,0,5,2
	.word	.L74
	.byte	3,244,4,1,5,3,9
	.half	.L268-.L74
	.byte	3,8,1,5,1,9
	.half	.L53-.L268
	.byte	3,1,1,7,9
	.half	.L125-.L53
	.byte	0,1,1
.L422:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L74,0,.L125-.L74,0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L68,0,.L33-.L68
	.half	1
	.byte	84
	.word	.L253-.L68,.L254-.L68
	.half	1
	.byte	88
	.word	0,0
.L154:
	.word	-1,.L68,.L248-.L68,.L146-.L68
	.half	1
	.byte	90
	.word	0,0
.L152:
	.word	-1,.L68,.L246-.L68,.L247-.L68
	.half	1
	.byte	82
	.word	.L256-.L68,.L257-.L68
	.half	1
	.byte	95
	.word	.L259-.L68,.L146-.L68
	.half	1
	.byte	82
	.word	0,0
.L155:
	.word	-1,.L68,.L255-.L68,.L36-.L68
	.half	1
	.byte	84
	.word	0,0
.L156:
	.word	-1,.L68,.L251-.L68,.L252-.L68
	.half	1
	.byte	95
	.word	0,0
.L67:
	.word	-1,.L68,0,.L146-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L151:
	.word	-1,.L68,.L249-.L68,.L36-.L68
	.half	1
	.byte	100
	.word	0,0
.L149:
	.word	-1,.L68,0,.L33-.L68
	.half	1
	.byte	86
	.word	0,0
.L148:
	.word	-1,.L68,0,.L33-.L68
	.half	1
	.byte	85
	.word	.L249-.L68,.L250-.L68
	.half	1
	.byte	89
	.word	.L247-.L68,.L258-.L68
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_loc'
.L136:
	.word	-1,.L66,0,.L234-.L66
	.half	1
	.byte	84
	.word	.L238-.L66,.L239-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L137:
	.word	-1,.L66,0,.L235-.L66
	.half	1
	.byte	85
	.word	.L234-.L66,.L237-.L66
	.half	1
	.byte	84
	.word	0,0
.L138:
	.word	-1,.L66,0,.L236-.L66
	.half	1
	.byte	86
	.word	0,0
.L141:
	.word	-1,.L66,.L240-.L66,.L135-.L66
	.half	1
	.byte	111
	.word	0,0
.L143:
	.word	-1,.L66,.L241-.L66,.L237-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L144:
	.word	-1,.L66,.L242-.L66,.L243-.L66
	.half	1
	.byte	81
	.word	0,0
.L145:
	.word	-1,.L66,.L244-.L66,.L245-.L66
	.half	1
	.byte	82
	.word	.L29-.L66,.L237-.L66
	.half	1
	.byte	82
	.word	0,0
.L65:
	.word	-1,.L66,0,.L135-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L142:
	.word	-1,.L66,.L245-.L66,.L29-.L66
	.half	1
	.byte	82
	.word	.L30-.L66,.L135-.L66
	.half	1
	.byte	82
	.word	0,0
.L139:
	.word	-1,.L66,0,.L237-.L66
	.half	1
	.byte	87
	.word	.L236-.L66,.L237-.L66
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L70,0,.L260-.L70
	.half	1
	.byte	84
	.word	0,0
.L130:
	.word	-1,.L70,0,.L260-.L70
	.half	1
	.byte	85
	.word	0,0
.L131:
	.word	-1,.L70,0,.L260-.L70
	.half	1
	.byte	86
	.word	0,0
.L69:
	.word	-1,.L70,0,.L127-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L132:
	.word	-1,.L70,0,.L260-.L70
	.half	1
	.byte	87
	.word	0,0
.L133:
	.word	-1,.L70,.L261-.L70,.L127-.L70
	.half	1
	.byte	88
	.word	.L262-.L70,.L127-.L70
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_MemRead')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L60,0,.L192-.L60
	.half	1
	.byte	100
	.word	.L194-.L60,.L162-.L60
	.half	1
	.byte	109
	.word	.L204-.L60,.L205-.L60
	.half	1
	.byte	100
	.word	.L207-.L60,.L203-.L60
	.half	1
	.byte	100
	.word	0,0
.L167:
	.word	-1,.L60,.L198-.L60,.L2-.L60
	.half	1
	.byte	95
	.word	.L201-.L60,.L5-.L60
	.half	1
	.byte	95
	.word	.L192-.L60,.L4-.L60
	.half	1
	.byte	82
	.word	.L4-.L60,.L203-.L60
	.half	1
	.byte	95
	.word	.L203-.L60,.L8-.L60
	.half	1
	.byte	82
	.word	.L210-.L60,.L162-.L60
	.half	1
	.byte	95
	.word	.L211-.L60,.L162-.L60
	.half	1
	.byte	82
	.word	0,0
.L165:
	.word	-1,.L60,0,.L193-.L60
	.half	1
	.byte	84
	.word	.L193-.L60,.L202-.L60
	.half	1
	.byte	88
	.word	.L204-.L60,.L206-.L60
	.half	1
	.byte	88
	.word	.L206-.L60,.L205-.L60
	.half	1
	.byte	85
	.word	.L208-.L60,.L209-.L60
	.half	1
	.byte	88
	.word	0,0
.L169:
	.word	-1,.L60,.L197-.L60,.L162-.L60
	.half	2
	.byte	144,37
	.word	0,0
.L59:
	.word	-1,.L60,0,.L162-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L166:
	.word	-1,.L60,0,.L193-.L60
	.half	1
	.byte	85
	.word	.L195-.L60,.L196-.L60
	.half	1
	.byte	89
	.word	.L199-.L60,.L200-.L60
	.half	1
	.byte	89
	.word	.L193-.L60,.L202-.L60
	.half	1
	.byte	89
	.word	.L208-.L60,.L209-.L60
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_loc'
.L191:
	.word	-1,.L74,.L268-.L74,.L186-.L74
	.half	1
	.byte	82
	.word	0,0
.L189:
	.word	-1,.L74,0,.L186-.L74
	.half	1
	.byte	86
	.word	0,0
.L188:
	.word	-1,.L74,0,.L186-.L74
	.half	2
	.byte	144,34
	.word	0,0
.L73:
	.word	-1,.L74,0,.L186-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L190:
	.word	-1,.L74,0,.L186-.L74
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L62,0,.L15-.L62
	.half	1
	.byte	100
	.word	.L213-.L62,.L170-.L62
	.half	1
	.byte	108
	.word	.L224-.L62,.L19-.L62
	.half	1
	.byte	101
	.word	0,0
.L175:
	.word	-1,.L62,.L217-.L62,.L13-.L62
	.half	1
	.byte	82
	.word	.L220-.L62,.L16-.L62
	.half	1
	.byte	82
	.word	.L15-.L62,.L19-.L62
	.half	1
	.byte	82
	.word	.L228-.L62,.L170-.L62
	.half	1
	.byte	82
	.word	0,0
.L173:
	.word	-1,.L62,0,.L212-.L62
	.half	1
	.byte	84
	.word	.L212-.L62,.L221-.L62
	.half	1
	.byte	88
	.word	.L221-.L62,.L15-.L62
	.half	1
	.byte	86
	.word	.L224-.L62,.L225-.L62
	.half	1
	.byte	88
	.word	.L225-.L62,.L19-.L62
	.half	1
	.byte	84
	.word	.L226-.L62,.L227-.L62
	.half	1
	.byte	88
	.word	.L229-.L62,.L230-.L62
	.half	1
	.byte	88
	.word	0,0
.L176:
	.word	-1,.L62,.L216-.L62,.L170-.L62
	.half	2
	.byte	144,37
	.word	0,0
.L61:
	.word	-1,.L62,0,.L170-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L174:
	.word	-1,.L62,0,.L212-.L62
	.half	1
	.byte	85
	.word	.L214-.L62,.L215-.L62
	.half	1
	.byte	89
	.word	.L218-.L62,.L219-.L62
	.half	1
	.byte	89
	.word	.L222-.L62,.L223-.L62
	.half	1
	.byte	89
	.word	.L226-.L62,.L227-.L62
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L64,.L231-.L64,.L233-.L64
	.half	1
	.byte	82
	.word	0,0
.L63:
	.word	-1,.L64,0,.L177-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L178:
	.word	-1,.L64,0,.L231-.L64
	.half	1
	.byte	84
	.word	.L232-.L64,.L177-.L64
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_loc'
.L184:
	.word	-1,.L72,.L265-.L72,.L180-.L72
	.half	1
	.byte	95
	.word	.L267-.L72,.L180-.L72
	.half	1
	.byte	82
	.word	0,0
.L183:
	.word	-1,.L72,0,.L180-.L72
	.half	1
	.byte	86
	.word	.L263-.L72,.L264-.L72
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L182:
	.word	-1,.L72,0,.L180-.L72
	.half	2
	.byte	144,34
	.word	0,0
.L71:
	.word	-1,.L72,0,.L180-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L185:
	.word	-1,.L72,.L266-.L72,.L46-.L72
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L76,0,.L269-.L76
	.half	1
	.byte	100
	.word	.L271-.L76,.L157-.L76
	.half	1
	.byte	108
	.word	.L58-.L76,.L57-.L76
	.half	1
	.byte	100
	.word	0,0
.L75:
	.word	-1,.L76,0,.L157-.L76
	.half	2
	.byte	138,0
	.word	0,0
.L160:
	.word	-1,.L76,0,.L270-.L76
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L425:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Xcp_MemRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L60,.L162-.L60
	.sdecl	'.debug_frame',debug,cluster('Xcp_MemWrite')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L62,.L170-.L62
	.sdecl	'.debug_frame',debug,cluster('Xcp_MemWriteMainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L64,.L177-.L64
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqRamCalc')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L66,.L135-.L66
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqQueRamCalc')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L68,.L146-.L68
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqRamCheck')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L70,.L127-.L70
	.sdecl	'.debug_frame',debug,cluster('Xcp_MemWriteProtectionCheck')
	.sect	'.debug_frame'
	.word	24
	.word	.L425,.L72,.L180-.L72
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_MemReadProtectionCheck')
	.sect	'.debug_frame'
	.word	24
	.word	.L425,.L74,.L186-.L74
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Xcp_StoreCommand')
	.sect	'.debug_frame'
	.word	12
	.word	.L425,.L76,.L157-.L76

; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   665  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   666  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   667  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Utils.c	   668  

	; Module end
