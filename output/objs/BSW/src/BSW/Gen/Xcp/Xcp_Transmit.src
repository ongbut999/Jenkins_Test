	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17752a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Transmit.src BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_Transmit.Xcp_Transmit',code,cluster('Xcp_Transmit')
	.sect	'.text.Xcp_Transmit.Xcp_Transmit'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     1  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     2  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     3  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     4  * Includes
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     5  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     6  #include "Xcp.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     7  #include "Xcp_Priv.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     8  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	     9  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    10  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    11  * Variables
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    12  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    13  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    14  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    15  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    16  * Functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    17  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    18  /* ------------------------------------------------------------------------ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    19  /* Begin section for code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    20  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    21  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    22  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    23  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    24  /* Function Prototypes */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    25  static Std_ReturnType Xcp_Transmit(const PduInfoType* XcpPacketPtr, uint8 protLayerId, Xcp_PduIdType XcpTxPduId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    26  static void Xcp_SendResTxConf(uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    27  static void Xcp_SendEvTxConf(uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    28  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    29  static void Xcp_SendDaqTxConf(Xcp_DaqList_t* DaqListPtr, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    30  static Std_ReturnType Xcp_DaqQueFindNextOdtToSend(Xcp_DaqList_t** DaqListPtr, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    31  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    32  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    33  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    34  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    35  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    36  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    37  /* Functions */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    38  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    39  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    40  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    41  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    42  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    43  This function calls the transmit function of the connected transport layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    44  \param[in]  XcpPacketPtr  pointer to packet data and length, which is meant to transmit
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    45  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    46  \param[in]  XcpTxPduId    TX-Pdu Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    47  \return     State if transmit was successful (E_OK: transmit successful)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    48  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    49  static Std_ReturnType Xcp_Transmit(const PduInfoType* XcpPacketPtr, uint8 protLayerId, Xcp_PduIdType XcpTxPduId)
; Function Xcp_Transmit
.L55:
Xcp_Transmit:	.type	func
	mov	d8,d4
.L220:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    50  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    51    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    52    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    53  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    54    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    55    Std_ReturnType Status; /* status of the process */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    56    uint8 tl_id; /* transport layer ID */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    57  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    58    /* get the connected transport layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    59    tl_id = XCP_ACTIVE_TL_ID(protLayerId);
	mul	d15,d8,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.bu	d4,[a15]4

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    60  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    61    XCP_DET_REPORT_ERROR_RET((tl_id >= XCP_TL_IDS), XCP_TRANSMIT_SID, XCP_E_INVALID_TRANSPORT_LAYER_ID, E_NOT_OK);
.L2:
	jeq	d4,#0,.L3
.L419:
	mov	d4,#212
.L222:
	mov	d5,#0
.L219:
	mov	d6,#81
	mov	d7,#64
	call	Det_ReportError
.L218:
	mov	d2,#1
	j	.L4
.L3:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    62  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    63    /* call Transmit Function according to active transport layer id */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    64    Status = Xcp_PlCfgConst.TlCfg[tl_id].TLTransmit_pfct(XcpPacketPtr, tl_id, XcpTxPduId);
	movh.a	a15,#@his(Xcp_PlCfgConst)
	lea	a15,[a15]@los(Xcp_PlCfgConst)
.L420:
	mul	d15,d4,#56
	addsc.a	a15,a15,d15,#0
.L421:
	ld.a	a15,[a15]
.L422:
	calli	a15
.L223:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    65    if (Status == E_OK)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    66    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    67      /* Transmit OK, nothing else to do */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    68      XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_TransmitOkCtr);
	mov	d15,#336
	mul	d8,d15
.L221:
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d8,#0
.L423:
	jne	d2,#0,.L5
.L424:
	lea	a2,[a15]316
	ld.hu	d15,[a15]316
	add	d15,#1
	st.h	[a2],d15
.L425:
	j	.L6
.L5:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    69    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    70    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    71    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    72      /* Transmit not successful, do not expect a tx_confirmation.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    73         Wait4TxConfCtr is set to 0 by caller of this function (required). */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    74      XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_TransmitNotOkCtr);
	lea	a2,[a15]318
	ld.hu	d15,[a15]318
	add	d15,#1
	st.h	[a2],d15
.L6:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    75    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    76  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    77    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    78    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    79    return(Status);
	j	.L7

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    80  }
.L7:
.L4:
	ret
.L190:
	
__Xcp_Transmit_function_end:
	.size	Xcp_Transmit,__Xcp_Transmit_function_end-Xcp_Transmit
.L121:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendResTxConf',code,cluster('Xcp_SendResTxConf')
	.sect	'.text.Xcp_Transmit.Xcp_SendResTxConf'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    81  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    82  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    83  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    84  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    85  This function sends a response out of a tx confirmation.\n
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    86  It runs in TxConfirmation --> interrupt context. It cannot be interrupted by another TxConfirmation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    87  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    88  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    89  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    90  static void Xcp_SendResTxConf(uint8 protLayerId)
; Function Xcp_SendResTxConf
.L57:
Xcp_SendResTxConf:	.type	func
	sub.a	a10,#8
.L224:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    91  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    92    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    93    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    94  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    95    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    96    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    97  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    98    /* Prepare XcpPacket for transmission */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	    99    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   100    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendResTxConfCtr);
	mov	d15,#336
	mul	d15,d4
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d15,#0
	lea	a2,[a15]320
	ld.hu	d15,[a15]320
	add	d15,#1
	st.h	[a2],d15
.L430:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   101  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   102    XcpPacket.SduDataPtr = XCP_RES_BUFFER_PTR(protLayerId);
	lea	a2,[a15]12
.L431:
	st.a	[a10],a2
.L432:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   103    XcpPacket.SduLength  = (PduLengthType) XCP_RES_BUFFER_LENGTH(protLayerId);
	lea	a12,[a15]20
	ld.w	d15,[a12]
.L433:
	st.h	[a10]4,d15
.L434:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   104    SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   105  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   106    /* Call transmission request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   107    if (Xcp_Transmit(&XcpPacket, protLayerId, XCP_PDU_ID_UNKNOWN) == E_OK)
	lea	a4,[a10]0
.L435:
	mov	d5,#255
	call	Xcp_Transmit
.L225:
	jne	d2,#0,.L8
.L436:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   108    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   109      /* transmit successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   110      XCP_RES_BUFFER_LENGTH(protLayerId) = 0;
	mov	d15,#0
.L437:
	st.w	[a12],d15
.L438:
	j	.L9
.L8:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   111    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   112    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   113    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   114      /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   115      SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   116      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L439:
	st.b	[a15],d15
.L9:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   117      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   118    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   119  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   120    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   121    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   122  }
	ret
.L197:
	
__Xcp_SendResTxConf_function_end:
	.size	Xcp_SendResTxConf,__Xcp_SendResTxConf_function_end-Xcp_SendResTxConf
.L126:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendRes',code,cluster('Xcp_SendRes')
	.sect	'.text.Xcp_Transmit.Xcp_SendRes'
	.align	2
	
	.global	Xcp_SendRes

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   123  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   124  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   125  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   126  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   127  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   128  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   129  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   130  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   131  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   132  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   133  Function sends a response which is called by the protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   134  \param[in]  protLayerId       protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   135  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   136  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   137  void Xcp_SendRes(uint8 protLayerId)
; Function Xcp_SendRes
.L59:
Xcp_SendRes:	.type	func
	sub.a	a10,#8
.L226:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   138  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   139    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   140    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   141  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   142    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   143    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   144  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   145    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   146    SchM_Enter_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   147  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   148    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   149    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendResCtr);
	mov	d15,#336
	mul	d15,d4
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d15,#0
	lea	a2,[a15]322
	ld.hu	d15,[a15]322
	add	d15,#1
	st.h	[a2],d15
.L292:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   150  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   151    /* Can XcpPacket be transmitted now? */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   152    if (Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 == 0)
	ld.bu	d15,[a15]
.L293:
	jne	d15,#0,.L10
.L294:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   153    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   154      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = XCP_WAIT4TXCONFCTR;
	mov	d15,#5
.L295:
	st.b	[a15],d15
.L296:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   155      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   156  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   157      /* Prepare XcpPacket for transmission */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   158      XcpPacket.SduDataPtr = XCP_RES_BUFFER_PTR(protLayerId);
	lea	a2,[a15]12
.L297:
	st.a	[a10],a2
.L298:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   159      XcpPacket.SduLength  = (PduLengthType) XCP_RES_BUFFER_LENGTH(protLayerId);
	lea	a12,[a15]20
	ld.w	d15,[a12]
.L299:
	st.h	[a10]4,d15
.L300:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   160  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   161      /* empty the buffer, so it will not be transmitted again */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   162      XCP_RES_BUFFER_LENGTH(protLayerId) = 0;
	mov	d15,#0
.L301:
	st.w	[a12],d15
.L302:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   163  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   164      /* Call transmission request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   165      if (Xcp_Transmit(&XcpPacket, protLayerId, XCP_PDU_ID_UNKNOWN) == E_OK)
	lea	a4,[a10]0
.L303:
	mov	d5,#255
	call	Xcp_Transmit
.L227:
	jne	d2,#0,.L11
.L304:
	j	.L12
.L11:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   166      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   167        /* transmit successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   168      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   169      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   170      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   171        /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   172        XCP_RES_BUFFER_LENGTH(protLayerId) = XcpPacket.SduLength;
	ld.hu	d15,[a10]4
.L305:
	st.w	[a12],d15
.L306:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   173  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   174        /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   175        SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   176        Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L307:
	st.b	[a15],d15
.L12:
	j	.L13
.L10:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   177        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   178      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   179    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   180    else
.L13:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   181    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   182      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   183      /* Wait4TxConfCtr != 0, XcpPacket is transmitted in one of next Xcp_TxConfirmation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   184    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   185    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   186    SchM_Exit_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   187  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   188    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   189    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   190  }
	ret
.L142:
	
__Xcp_SendRes_function_end:
	.size	Xcp_SendRes,__Xcp_SendRes_function_end-Xcp_SendRes
.L86:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendErrRes',code,cluster('Xcp_SendErrRes')
	.sect	'.text.Xcp_Transmit.Xcp_SendErrRes'
	.align	2
	
	.global	Xcp_SendErrRes

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   191  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   192  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   193  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   194  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   195  Function sends error response which is called by the protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   196  \param[in]  ErrorCode     error response to send
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   197  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   198  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   199  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   200  void Xcp_SendErrRes(Xcp_ErrorCode ErrorCode, uint8 protLayerId)
; Function Xcp_SendErrRes
.L61:
Xcp_SendErrRes:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   201  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   202    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   203    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   204  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   205    /* length of error response */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   206    XCP_RES_BUFFER_LENGTH(protLayerId) = 2;
	mov	d15,#336
	mul	d15,d5
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d15,#0
.L321:
	mov	d15,#2
.L322:
	st.w	[a15]20,d15
.L323:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   207    /* Error Pid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   208    XCP_RES_BUFFER_PTR(protLayerId)[0] = XCP_PACKET_ID_ERR;
	mov	d15,#254
.L324:
	st.b	[a15]12,d15
.L325:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   209    /* Error Code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   210    XCP_RES_BUFFER_PTR(protLayerId)[1] = (uint8)ErrorCode;
	st.b	[a15]13,d4
.L326:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   211    /* Store data in Queue and transmit if possible */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   212    Xcp_SendRes(protLayerId);
	mov	d4,d5
.L228:
	call	Xcp_SendRes
.L229:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   213  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   214    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   215    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   216  }
	ret
.L149:
	
__Xcp_SendErrRes_function_end:
	.size	Xcp_SendErrRes,__Xcp_SendErrRes_function_end-Xcp_SendErrRes
.L96:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendPosRes',code,cluster('Xcp_SendPosRes')
	.sect	'.text.Xcp_Transmit.Xcp_SendPosRes'
	.align	2
	
	.global	Xcp_SendPosRes

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   217  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   218  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   219  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   220  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   221  Function sends positive response which is called by the protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   222  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   223  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   224  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   225  void Xcp_SendPosRes(uint8 protLayerId)
; Function Xcp_SendPosRes
.L63:
Xcp_SendPosRes:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   226  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   227    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   228    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   229  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   230    /* length of error response */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   231    XCP_RES_BUFFER_LENGTH(protLayerId) = 1;
	mov	d15,#336
	mul	d15,d4
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d15,#0
.L312:
	mov	d15,#1
.L313:
	st.w	[a15]20,d15
.L314:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   232    /* Response Pid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   233    XCP_RES_BUFFER_PTR(protLayerId)[0] = XCP_PACKET_ID_RES;
	mov	d15,#255
.L315:
	st.b	[a15]12,d15
.L316:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   234    /* Store data in Queue and transmit if possible */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   235    Xcp_SendRes(protLayerId);
	call	Xcp_SendRes
.L230:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   236  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   237    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   238    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   239  }
	ret
.L147:
	
__Xcp_SendPosRes_function_end:
	.size	Xcp_SendPosRes,__Xcp_SendPosRes_function_end-Xcp_SendPosRes
.L91:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendEvTxConf',code,cluster('Xcp_SendEvTxConf')
	.sect	'.text.Xcp_Transmit.Xcp_SendEvTxConf'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   240  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   241  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   242  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   243  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   244  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   245  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   246  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   247  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   248  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   249  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   250  This function sends an event out of a tx confirmation. \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   251  It runs in TxConfirmation --> interrupt context. It cannot be interrupted by another TxConfirmation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   252  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   253  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   254  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   255  static void Xcp_SendEvTxConf(uint8 protLayerId)
; Function Xcp_SendEvTxConf
.L65:
Xcp_SendEvTxConf:	.type	func
	sub.a	a10,#8
.L231:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   256  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   257    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   258    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   259  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   260    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   261    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   262  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   263    /* Prepare XcpPacket for transmission */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   264    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   265    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendEvTxConfCtr);
	mov	d15,#336
	mul	d15,d4
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d15,#0
	lea	a2,[a15]324
	ld.hu	d15,[a15]324
	add	d15,#1
	st.h	[a2],d15
.L444:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   266  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   267    XcpPacket.SduDataPtr = XCP_EV_BUFFER_PTR(protLayerId);
	lea	a2,[a15]24
.L445:
	st.a	[a10],a2
.L446:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   268    XcpPacket.SduLength  = (PduLengthType) XCP_EV_BUFFER_LENGTH(protLayerId);
	lea	a12,[a15]32
	ld.w	d15,[a12]
.L447:
	st.h	[a10]4,d15
.L448:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   269    SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   270  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   271    /* Call transmission request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   272    if (Xcp_Transmit(&XcpPacket, protLayerId, XCP_PDU_ID_UNKNOWN) == E_OK)
	lea	a4,[a10]0
.L449:
	mov	d5,#255
	call	Xcp_Transmit
.L232:
	jne	d2,#0,.L14
.L450:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   273    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   274      /* transmit successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   275      XCP_EV_BUFFER_LENGTH(protLayerId) = 0;
	mov	d15,#0
.L451:
	st.w	[a12],d15
.L452:
	j	.L15
.L14:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   276    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   277    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   278    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   279      /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   280      SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   281      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L453:
	st.b	[a15],d15
.L15:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   282      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   283    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   284  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   285    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   286    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   287  }
	ret
.L200:
	
__Xcp_SendEvTxConf_function_end:
	.size	Xcp_SendEvTxConf,__Xcp_SendEvTxConf_function_end-Xcp_SendEvTxConf
.L131:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendEv',code,cluster('Xcp_SendEv')
	.sect	'.text.Xcp_Transmit.Xcp_SendEv'
	.align	2
	
	.global	Xcp_SendEv

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   288  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   289  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   290  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   291  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   292  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   293  #define XCP_START_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   294  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   295  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   296  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   297  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   298  This function sends out an event
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   299  \param[in]  XcpPacketCtoPtr   pointer to event data and length
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   300  \param[in]  protLayerId       protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   301  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   302  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   303  void Xcp_SendEv(const Xcp_Cto8_t* XcpPacketCtoPtr, uint8 protLayerId)
; Function Xcp_SendEv
.L67:
Xcp_SendEv:	.type	func
	sub.a	a10,#8
.L233:
	mov.aa	a15,a4
.L236:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   304  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   305    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   306    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   307  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   308    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   309    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   310  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   311    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   312    SchM_Enter_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   313  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   314    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   315    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendEvCtr);
	mov	d15,#336
	mul	d15,d4
	movh.a	a2,#@his(Xcp_Cleared)
	lea	a2,[a2]@los(Xcp_Cleared)
	addsc.a	a12,a2,d15,#0
	lea	a2,[a12]326
	ld.hu	d15,[a12]326
	add	d15,#1
	st.h	[a2],d15
.L331:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   316  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   317    /* copy event data to global buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   318    XCP_EV_BUFFER_LENGTH(protLayerId) = XcpPacketCtoPtr->Length_u32;
	lea	a13,[a12]32
.L332:
	ld.w	d15,[a15]8
.L333:
	st.w	[a13],d15
.L334:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   319    Xcp_MemCopy8(XCP_EV_BUFFER_PTR(protLayerId), XcpPacketCtoPtr->Buffer_au8, XcpPacketCtoPtr->Length_u32);
	lea	a2,[a12]24
	mov.aa	a4,a2
.L234:
	mov.aa	a5,a15
	ld.w	d15,[a15]8
.L159:

; .\Integration\BSW\Include\rba_BswSrv.h	     1  /*
; .\Integration\BSW\Include\rba_BswSrv.h	     2   * This is a template file. It defines integration functions necessary to complete RTA-BSW.
; .\Integration\BSW\Include\rba_BswSrv.h	     3   * The integrator must complete the templates before deploying software containing functions defined in this file.
; .\Integration\BSW\Include\rba_BswSrv.h	     4   * Once templates have been completed, the integrator should delete the #error line.
; .\Integration\BSW\Include\rba_BswSrv.h	     5   * Note: The integrator is responsible for updates made to this file.
; .\Integration\BSW\Include\rba_BswSrv.h	     6   *
; .\Integration\BSW\Include\rba_BswSrv.h	     7   * To remove the following error define the macro NOT_READY_FOR_TESTING_OR_DEPLOYMENT with a compiler option (e.g. -D NOT_READY_FOR_TESTING_OR_DEPLOYMENT)
; .\Integration\BSW\Include\rba_BswSrv.h	     8   * The removal of the error only allows the user to proceed with the building phase
; .\Integration\BSW\Include\rba_BswSrv.h	     9   */
; .\Integration\BSW\Include\rba_BswSrv.h	    10  
; .\Integration\BSW\Include\rba_BswSrv.h	    11  
; .\Integration\BSW\Include\rba_BswSrv.h	    12  
; .\Integration\BSW\Include\rba_BswSrv.h	    13  
; .\Integration\BSW\Include\rba_BswSrv.h	    14  /*
; .\Integration\BSW\Include\rba_BswSrv.h	    15   * This is a template file. It defines integration functions necessary to complete RTA-BSW.
; .\Integration\BSW\Include\rba_BswSrv.h	    16   * The integrator must complete the templates before deploying software containing functions defined in this file.
; .\Integration\BSW\Include\rba_BswSrv.h	    17   * Once templates have been completed, the integrator should delete the #error line.
; .\Integration\BSW\Include\rba_BswSrv.h	    18   * Note: The integrator is responsible for updates made to this file.
; .\Integration\BSW\Include\rba_BswSrv.h	    19   *
; .\Integration\BSW\Include\rba_BswSrv.h	    20   * To remove the following error define the macro NOT_READY_FOR_TESTING_OR_DEPLOYMENT with a compiler option (e.g. -D NOT_READY_FOR_TESTING_OR_DEPLOYMENT)
; .\Integration\BSW\Include\rba_BswSrv.h	    21   * The removal of the error only allows the user to proceed with the building phase
; .\Integration\BSW\Include\rba_BswSrv.h	    22   */
; .\Integration\BSW\Include\rba_BswSrv.h	    23  
; .\Integration\BSW\Include\rba_BswSrv.h	    24  
; .\Integration\BSW\Include\rba_BswSrv.h	    25  #ifndef RBA_BSWSRV_H
; .\Integration\BSW\Include\rba_BswSrv.h	    26  #define RBA_BSWSRV_H
; .\Integration\BSW\Include\rba_BswSrv.h	    27  
; .\Integration\BSW\Include\rba_BswSrv.h	    28  
; .\Integration\BSW\Include\rba_BswSrv.h	    29  
; .\Integration\BSW\Include\rba_BswSrv.h	    30  /*
; .\Integration\BSW\Include\rba_BswSrv.h	    31   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    32   * Includes
; .\Integration\BSW\Include\rba_BswSrv.h	    33   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    34   */
; .\Integration\BSW\Include\rba_BswSrv.h	    35  
; .\Integration\BSW\Include\rba_BswSrv.h	    36  #include "Std_Types.h"
; .\Integration\BSW\Include\rba_BswSrv.h	    37  
; .\Integration\BSW\Include\rba_BswSrv.h	    38  /*
; .\Integration\BSW\Include\rba_BswSrv.h	    39   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    40   * Defines
; .\Integration\BSW\Include\rba_BswSrv.h	    41   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    42   */
; .\Integration\BSW\Include\rba_BswSrv.h	    43  /* Vendor and module identification */
; .\Integration\BSW\Include\rba_BswSrv.h	    44  #define RBA_BSWSRV_VENDOR_ID   (6)
; .\Integration\BSW\Include\rba_BswSrv.h	    45  #define RBA_BSWSRV_MODULE_ID   (255)
; .\Integration\BSW\Include\rba_BswSrv.h	    46  #define RBA_BSWSRV_INSTANCE_ID (0)
; .\Integration\BSW\Include\rba_BswSrv.h	    47  
; .\Integration\BSW\Include\rba_BswSrv.h	    48  /* Module version information */
; .\Integration\BSW\Include\rba_BswSrv.h	    49  #define RBA_BSWSRV_SW_MAJOR_VERSION (3)
; .\Integration\BSW\Include\rba_BswSrv.h	    50  #define RBA_BSWSRV_SW_MINOR_VERSION (0)
; .\Integration\BSW\Include\rba_BswSrv.h	    51  #define RBA_BSWSRV_SW_PATCH_VERSION (0)
; .\Integration\BSW\Include\rba_BswSrv.h	    52  
; .\Integration\BSW\Include\rba_BswSrv.h	    53  
; .\Integration\BSW\Include\rba_BswSrv.h	    54  
; .\Integration\BSW\Include\rba_BswSrv.h	    55  
; .\Integration\BSW\Include\rba_BswSrv.h	    56  #  define RBA_BSWSRV_PARAM_UNUSED(param)          (void)(param)         /* iwm7abt workaround for defect CSCRM00957569 */
; .\Integration\BSW\Include\rba_BswSrv.h	    57  #  define RBA_BSWSRV_PRV_C_IMPL
; .\Integration\BSW\Include\rba_BswSrv.h	    58  
; .\Integration\BSW\Include\rba_BswSrv.h	    59  
; .\Integration\BSW\Include\rba_BswSrv.h	    60  /*
; .\Integration\BSW\Include\rba_BswSrv.h	    61   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    62   * Type definition
; .\Integration\BSW\Include\rba_BswSrv.h	    63   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    64   */
; .\Integration\BSW\Include\rba_BswSrv.h	    65  
; .\Integration\BSW\Include\rba_BswSrv.h	    66  typedef unsigned long long rba_BswSrv_uint64;
; .\Integration\BSW\Include\rba_BswSrv.h	    67  
; .\Integration\BSW\Include\rba_BswSrv.h	    68  
; .\Integration\BSW\Include\rba_BswSrv.h	    69  /*
; .\Integration\BSW\Include\rba_BswSrv.h	    70   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    71   * Variable declarations
; .\Integration\BSW\Include\rba_BswSrv.h	    72   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    73   */
; .\Integration\BSW\Include\rba_BswSrv.h	    74  
; .\Integration\BSW\Include\rba_BswSrv.h	    75   /*
; .\Integration\BSW\Include\rba_BswSrv.h	    76   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    77   * Prototypes
; .\Integration\BSW\Include\rba_BswSrv.h	    78   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	    79   */
; .\Integration\BSW\Include\rba_BswSrv.h	    80  
; .\Integration\BSW\Include\rba_BswSrv.h	    81  #define RBA_BSWSRV_START_SEC_CODE
; .\Integration\BSW\Include\rba_BswSrv.h	    82  #include "rba_BswSrv_MemMap.h"
; .\Integration\BSW\Include\rba_BswSrv.h	    83  extern void* rba_BswSrv_MemCopy(void* xDest_pv, const void* xSrc_pcv, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    84  extern void* rba_BswSrv_MemSet(void* xDest_pv, sint32 xPattern_u32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    85  extern sint32 rba_BswSrv_MemCompare(const void* xSrc1_pcv, const void* xSrc2_pcv, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    86  #define RBA_BSWSRV_STOP_SEC_CODE
; .\Integration\BSW\Include\rba_BswSrv.h	    87  #include "rba_BswSrv_MemMap.h"
; .\Integration\BSW\Include\rba_BswSrv.h	    88  
; .\Integration\BSW\Include\rba_BswSrv.h	    89  LOCAL_INLINE uint32 rba_BswSrv_ByteOrderSwap32(uint32 Input_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    90  LOCAL_INLINE uint16 rba_BswSrv_ByteOrderSwap16(uint16 Input_u16);
; .\Integration\BSW\Include\rba_BswSrv.h	    91  LOCAL_INLINE void   rba_BswSrv_MemCopy64(rba_BswSrv_uint64* xDest_pu64, const rba_BswSrv_uint64* xSrc_pcu64, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    92  LOCAL_INLINE void   rba_BswSrv_MemCopy32(uint32* xDest_pu32, const uint32* xSrc_pcu32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    93  LOCAL_INLINE void   rba_BswSrv_MemCopy16(uint16* xDest_pu16, const uint16* xSrc_pcu16, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    94  LOCAL_INLINE void   rba_BswSrv_MemCopy8(uint8* xDest_pu8, const uint8* xSrc_pcu8, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    95  LOCAL_INLINE uint32 rba_BswSrv_MemCompare64(const rba_BswSrv_uint64* xSrc1_pcu64, const rba_BswSrv_uint64* xSrc2_pcu64, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    96  LOCAL_INLINE uint32 rba_BswSrv_MemCompare32(const uint32* xSrc1_pcu32, const uint32* xSrc2_pcu32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    97  LOCAL_INLINE uint32 rba_BswSrv_MemCompare16(const uint16* xSrc1_pcu16, const uint16* xSrc2_pcu16, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    98  LOCAL_INLINE uint32 rba_BswSrv_MemCompare8(const uint8* xSrc1_pcu8, const uint8* xSrc2_pcu8, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	    99  LOCAL_INLINE void   rba_BswSrv_MemSet64(rba_BswSrv_uint64* xDest_pu64, rba_BswSrv_uint64 xPattern_u64, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	   100  LOCAL_INLINE void   rba_BswSrv_MemSet32(uint32* xDest_pu32, uint32 xPattern_u32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	   101  LOCAL_INLINE void   rba_BswSrv_MemSet16(uint16* xDest_pu16, uint32 xPattern_u32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	   102  LOCAL_INLINE void   rba_BswSrv_MemSet8(uint8* xDest_pu8, uint32 xPattern_u32, uint32 numBytes_u32);
; .\Integration\BSW\Include\rba_BswSrv.h	   103  
; .\Integration\BSW\Include\rba_BswSrv.h	   104  /*
; .\Integration\BSW\Include\rba_BswSrv.h	   105   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   106   * Inline function definitions
; .\Integration\BSW\Include\rba_BswSrv.h	   107   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   108   */
; .\Integration\BSW\Include\rba_BswSrv.h	   109  
; .\Integration\BSW\Include\rba_BswSrv.h	   110  
; .\Integration\BSW\Include\rba_BswSrv.h	   111  
; .\Integration\BSW\Include\rba_BswSrv.h	   112  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   113   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   114   * rba_BswSrv_ByteOrderSwap32
; .\Integration\BSW\Include\rba_BswSrv.h	   115   *
; .\Integration\BSW\Include\rba_BswSrv.h	   116   * Swaps the byte order of a 32 bit value for endianess conversion.
; .\Integration\BSW\Include\rba_BswSrv.h	   117   *
; .\Integration\BSW\Include\rba_BswSrv.h	   118   * \param   Input_u32: input value
; .\Integration\BSW\Include\rba_BswSrv.h	   119   * \return  value with swapped byte order
; .\Integration\BSW\Include\rba_BswSrv.h	   120   * \retval  uint32
; .\Integration\BSW\Include\rba_BswSrv.h	   121   * \seealso
; .\Integration\BSW\Include\rba_BswSrv.h	   122   * \usedresources
; .\Integration\BSW\Include\rba_BswSrv.h	   123   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   124   */
; .\Integration\BSW\Include\rba_BswSrv.h	   125  LOCAL_INLINE uint32 rba_BswSrv_ByteOrderSwap32(uint32 Input_u32)
; .\Integration\BSW\Include\rba_BswSrv.h	   126  {
; .\Integration\BSW\Include\rba_BswSrv.h	   127      uint32 retVal_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   128  
; .\Integration\BSW\Include\rba_BswSrv.h	   129  
; .\Integration\BSW\Include\rba_BswSrv.h	   130      retVal_u32 = (Input_u32 << 24) | ((Input_u32 & 0xFF00u) << 8) | ((Input_u32 & 0x00FF0000u) >> 8) | (Input_u32 >> 24);
; .\Integration\BSW\Include\rba_BswSrv.h	   131  
; .\Integration\BSW\Include\rba_BswSrv.h	   132  
; .\Integration\BSW\Include\rba_BswSrv.h	   133      /* MISRA RULE 9.1 VIOLATION: variable is set by inline assembly but the checker does not understand this */
; .\Integration\BSW\Include\rba_BswSrv.h	   134      return retVal_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   135  }
; .\Integration\BSW\Include\rba_BswSrv.h	   136  
; .\Integration\BSW\Include\rba_BswSrv.h	   137  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   138   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   139   * rba_BswSrv_ByteOrderSwap16
; .\Integration\BSW\Include\rba_BswSrv.h	   140   *
; .\Integration\BSW\Include\rba_BswSrv.h	   141   * Swaps the byte order of a 16 bit value for endianess conversion.
; .\Integration\BSW\Include\rba_BswSrv.h	   142   *
; .\Integration\BSW\Include\rba_BswSrv.h	   143   * \param   Input_u16: input value
; .\Integration\BSW\Include\rba_BswSrv.h	   144   * \return  value with swapped byte order
; .\Integration\BSW\Include\rba_BswSrv.h	   145   * \retval  uint16
; .\Integration\BSW\Include\rba_BswSrv.h	   146   * \seealso
; .\Integration\BSW\Include\rba_BswSrv.h	   147   * \usedresources
; .\Integration\BSW\Include\rba_BswSrv.h	   148   *********************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   149   */
; .\Integration\BSW\Include\rba_BswSrv.h	   150  LOCAL_INLINE uint16 rba_BswSrv_ByteOrderSwap16(uint16 Input_u16)
; .\Integration\BSW\Include\rba_BswSrv.h	   151  {
; .\Integration\BSW\Include\rba_BswSrv.h	   152      uint16 retVal_u16;
; .\Integration\BSW\Include\rba_BswSrv.h	   153  
; .\Integration\BSW\Include\rba_BswSrv.h	   154  
; .\Integration\BSW\Include\rba_BswSrv.h	   155      retVal_u16 = ((Input_u16 & 0x00FFu) << 8) | ((Input_u16 & 0xFF00u) >> 8);
; .\Integration\BSW\Include\rba_BswSrv.h	   156  
; .\Integration\BSW\Include\rba_BswSrv.h	   157  
; .\Integration\BSW\Include\rba_BswSrv.h	   158      /* MISRA RULE 9.1 VIOLATION: variable is set by inline assembly but the checker does not understand this */
; .\Integration\BSW\Include\rba_BswSrv.h	   159      return retVal_u16;
; .\Integration\BSW\Include\rba_BswSrv.h	   160  }
; .\Integration\BSW\Include\rba_BswSrv.h	   161  
; .\Integration\BSW\Include\rba_BswSrv.h	   162  
; .\Integration\BSW\Include\rba_BswSrv.h	   163  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   164   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   165   * rba_BswSrv_MemCopy64 - copy non overlapping memory in 64 Bit blocks
; .\Integration\BSW\Include\rba_BswSrv.h	   166   *
; .\Integration\BSW\Include\rba_BswSrv.h	   167   * Memory copy routine. Source and destination must not overlap. Pointer parameters must be 8 Byte
; .\Integration\BSW\Include\rba_BswSrv.h	   168   * aligned. The size should be a multiple of 8. If not, it is rounded down to the next multiple
; .\Integration\BSW\Include\rba_BswSrv.h	   169   * of 8.
; .\Integration\BSW\Include\rba_BswSrv.h	   170   *
; .\Integration\BSW\Include\rba_BswSrv.h	   171   * \param   xDest_pu64      destination address
; .\Integration\BSW\Include\rba_BswSrv.h	   172   * \param   xSrc_pcu64      source address
; .\Integration\BSW\Include\rba_BswSrv.h	   173   * \param   numBytes_u32    number of bytes to be copied
; .\Integration\BSW\Include\rba_BswSrv.h	   174   * \seealso     rba_BswSrv_MemCopy8, rba_BswSrv_MemCopy16, rba_BswSrv_MemCopy32
; .\Integration\BSW\Include\rba_BswSrv.h	   175   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   176   */
; .\Integration\BSW\Include\rba_BswSrv.h	   177  LOCAL_INLINE void rba_BswSrv_MemCopy64(rba_BswSrv_uint64* xDest_pu64, const rba_BswSrv_uint64* xSrc_pcu64, uint32 numBytes_u32)
; .\Integration\BSW\Include\rba_BswSrv.h	   178  {
; .\Integration\BSW\Include\rba_BswSrv.h	   179  
; .\Integration\BSW\Include\rba_BswSrv.h	   180      uint32 ctLoop_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   181  
; .\Integration\BSW\Include\rba_BswSrv.h	   182      for(ctLoop_u32 = 0; ctLoop_u32 < (numBytes_u32 / 8); ctLoop_u32++)
; .\Integration\BSW\Include\rba_BswSrv.h	   183      {
; .\Integration\BSW\Include\rba_BswSrv.h	   184          *xDest_pu64 = *xSrc_pcu64;
; .\Integration\BSW\Include\rba_BswSrv.h	   185          xDest_pu64++;
; .\Integration\BSW\Include\rba_BswSrv.h	   186          xSrc_pcu64++;
; .\Integration\BSW\Include\rba_BswSrv.h	   187      }
; .\Integration\BSW\Include\rba_BswSrv.h	   188  
; .\Integration\BSW\Include\rba_BswSrv.h	   189      return;
; .\Integration\BSW\Include\rba_BswSrv.h	   190  }
; .\Integration\BSW\Include\rba_BswSrv.h	   191  
; .\Integration\BSW\Include\rba_BswSrv.h	   192  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   193   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   194   * rba_BswSrv_MemCopy32 - copy non overlapping memory in 32 Bit blocks
; .\Integration\BSW\Include\rba_BswSrv.h	   195   *
; .\Integration\BSW\Include\rba_BswSrv.h	   196   * Memory copy routine. Source and destination must not overlap. Pointer parameters must be 4 Byte
; .\Integration\BSW\Include\rba_BswSrv.h	   197   * aligned. The size should be a multiple of 4. If not, it is rounded down to the next multiple
; .\Integration\BSW\Include\rba_BswSrv.h	   198   * of 4.
; .\Integration\BSW\Include\rba_BswSrv.h	   199   *
; .\Integration\BSW\Include\rba_BswSrv.h	   200   * \param   xDest_pu32      destination address
; .\Integration\BSW\Include\rba_BswSrv.h	   201   * \param   xSrc_pcu32      source address
; .\Integration\BSW\Include\rba_BswSrv.h	   202   * \param   numBytes_u32    number of bytes to be copied
; .\Integration\BSW\Include\rba_BswSrv.h	   203   * \seealso     rba_BswSrv_MemCopy8, rba_BswSrv_MemCopy16, rba_BswSrv_MemCopy64
; .\Integration\BSW\Include\rba_BswSrv.h	   204   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   205   */
; .\Integration\BSW\Include\rba_BswSrv.h	   206  LOCAL_INLINE void rba_BswSrv_MemCopy32(uint32* xDest_pu32, const uint32* xSrc_pcu32, uint32 numBytes_u32)
; .\Integration\BSW\Include\rba_BswSrv.h	   207  {
; .\Integration\BSW\Include\rba_BswSrv.h	   208      uint32 ctLoop_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   209  
; .\Integration\BSW\Include\rba_BswSrv.h	   210      for(ctLoop_u32 = 0; ctLoop_u32 < (numBytes_u32 / 4); ctLoop_u32++)
; .\Integration\BSW\Include\rba_BswSrv.h	   211      {
; .\Integration\BSW\Include\rba_BswSrv.h	   212          *xDest_pu32 = *xSrc_pcu32;
; .\Integration\BSW\Include\rba_BswSrv.h	   213          xDest_pu32++;
; .\Integration\BSW\Include\rba_BswSrv.h	   214          xSrc_pcu32++;
; .\Integration\BSW\Include\rba_BswSrv.h	   215      }
; .\Integration\BSW\Include\rba_BswSrv.h	   216  
; .\Integration\BSW\Include\rba_BswSrv.h	   217      return;
; .\Integration\BSW\Include\rba_BswSrv.h	   218  }
; .\Integration\BSW\Include\rba_BswSrv.h	   219  
; .\Integration\BSW\Include\rba_BswSrv.h	   220  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   221   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   222   * rba_BswSrv_MemCopy16 - copy non overlapping memory in 16 Bit blocks
; .\Integration\BSW\Include\rba_BswSrv.h	   223   *
; .\Integration\BSW\Include\rba_BswSrv.h	   224   * Memory copy routine. Source and destination must not overlap. Pointer parameters must be 2 Byte
; .\Integration\BSW\Include\rba_BswSrv.h	   225   * aligned. The size should be a multiple of 2. If not, it is rounded down to the next multiple
; .\Integration\BSW\Include\rba_BswSrv.h	   226   * of 2.
; .\Integration\BSW\Include\rba_BswSrv.h	   227   *
; .\Integration\BSW\Include\rba_BswSrv.h	   228   * \param   xDest_pu16      destination address
; .\Integration\BSW\Include\rba_BswSrv.h	   229   * \param   xSrc_pcu16      source address
; .\Integration\BSW\Include\rba_BswSrv.h	   230   * \param   numBytes_u32    number of bytes to be copied
; .\Integration\BSW\Include\rba_BswSrv.h	   231   * \seealso     rba_BswSrv_MemCopy8, rba_BswSrv_MemCopy32, rba_BswSrv_MemCopy64
; .\Integration\BSW\Include\rba_BswSrv.h	   232   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   233   */
; .\Integration\BSW\Include\rba_BswSrv.h	   234  LOCAL_INLINE void rba_BswSrv_MemCopy16(uint16* xDest_pu16, const uint16* xSrc_pcu16, uint32 numBytes_u32)
; .\Integration\BSW\Include\rba_BswSrv.h	   235  {
; .\Integration\BSW\Include\rba_BswSrv.h	   236      uint32 ctLoop_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   237  
; .\Integration\BSW\Include\rba_BswSrv.h	   238      for(ctLoop_u32 = 0; ctLoop_u32 < (numBytes_u32 / 2); ctLoop_u32++)
; .\Integration\BSW\Include\rba_BswSrv.h	   239      {
; .\Integration\BSW\Include\rba_BswSrv.h	   240          *xDest_pu16 = *xSrc_pcu16;
; .\Integration\BSW\Include\rba_BswSrv.h	   241          xDest_pu16++;
; .\Integration\BSW\Include\rba_BswSrv.h	   242          xSrc_pcu16++;
; .\Integration\BSW\Include\rba_BswSrv.h	   243      }
; .\Integration\BSW\Include\rba_BswSrv.h	   244  
; .\Integration\BSW\Include\rba_BswSrv.h	   245      return;
; .\Integration\BSW\Include\rba_BswSrv.h	   246  }
; .\Integration\BSW\Include\rba_BswSrv.h	   247  
; .\Integration\BSW\Include\rba_BswSrv.h	   248  /**
; .\Integration\BSW\Include\rba_BswSrv.h	   249   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   250   * rba_BswSrv_MemCopy8 - copy non overlapping memory
; .\Integration\BSW\Include\rba_BswSrv.h	   251   *
; .\Integration\BSW\Include\rba_BswSrv.h	   252   * Memory copy routine. Source and destination must not overlap.
; .\Integration\BSW\Include\rba_BswSrv.h	   253   *
; .\Integration\BSW\Include\rba_BswSrv.h	   254   * \param   xDest_pu8       destination address
; .\Integration\BSW\Include\rba_BswSrv.h	   255   * \param   xSrc_pcu8       source address
; .\Integration\BSW\Include\rba_BswSrv.h	   256   * \param   numBytes_u32    number of bytes to be copied
; .\Integration\BSW\Include\rba_BswSrv.h	   257   * \seealso     rba_BswSrv_MemCopy16, rba_BswSrv_MemCopy32, rba_BswSrv_MemCopy64
; .\Integration\BSW\Include\rba_BswSrv.h	   258   ***************************************************************************************************
; .\Integration\BSW\Include\rba_BswSrv.h	   259   */
; .\Integration\BSW\Include\rba_BswSrv.h	   260  LOCAL_INLINE void rba_BswSrv_MemCopy8(uint8* xDest_pu8, const uint8* xSrc_pcu8, uint32 numBytes_u32)
; .\Integration\BSW\Include\rba_BswSrv.h	   261  {
; .\Integration\BSW\Include\rba_BswSrv.h	   262      uint32 ctLoop_u32;
; .\Integration\BSW\Include\rba_BswSrv.h	   263  
; .\Integration\BSW\Include\rba_BswSrv.h	   264      for(ctLoop_u32 = 0; ctLoop_u32 < numBytes_u32; ctLoop_u32++)
	mov	d0,#0
.L237:

; .\Integration\BSW\Include\rba_BswSrv.h	   264      for(ctLoop_u32 = 0; ctLoop_u32 < numBytes_u32; ctLoop_u32++)      (inlined)
	j	.L16
.L17:

; .\Integration\BSW\Include\rba_BswSrv.h	   265      {
; .\Integration\BSW\Include\rba_BswSrv.h	   266          *xDest_pu8 = *xSrc_pcu8;
	ld.bu	d1,[a5]
.L335:
	st.b	[a4],d1
.L336:

; .\Integration\BSW\Include\rba_BswSrv.h	   267          xDest_pu8++;
	add.a	a4,#1
.L337:

; .\Integration\BSW\Include\rba_BswSrv.h	   268          xSrc_pcu8++;
	add.a	a5,#1
.L338:
	add	d0,#1

; .\Integration\BSW\Include\rba_BswSrv.h	   264      for(ctLoop_u32 = 0; ctLoop_u32 < numBytes_u32; ctLoop_u32++)      (inlined)
.L16:
	jlt.u	d0,d15,.L17
.L339:

; .\Integration\BSW\Include\rba_BswSrv.h	   271      return;      (inlined)
	j	.L18

; .\Integration\BSW\Include\rba_BswSrv.h	   272  }      (inlined)
.L18:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   320  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   321    /* Can XcpPacket be transmitted now? */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   322    if (Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 == 0)
	ld.bu	d15,[a12]
.L340:
	jne	d15,#0,.L19
.L341:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   323    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   324      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = XCP_WAIT4TXCONFCTR;
	mov	d15,#5
.L342:
	st.b	[a12],d15
.L343:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   325      XCP_EV_BUFFER_LENGTH(protLayerId) = 0;
	mov	d15,#0
.L344:
	st.w	[a13],d15
.L345:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   326      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   327  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   328      /* Prepare XcpPacket for transmission */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   329      XcpPacket.SduDataPtr = XCP_EV_BUFFER_PTR(protLayerId);
	st.a	[a10],a2
.L346:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   330      XcpPacket.SduLength  = (PduLengthType) XcpPacketCtoPtr->Length_u32;
	ld.w	d15,[a15]8
.L347:
	st.h	[a10]4,d15
.L348:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   331  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   332      /* Call transmission request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   333      if (Xcp_Transmit(&XcpPacket, protLayerId, XCP_PDU_ID_UNKNOWN) == E_OK)
	lea	a4,[a10]0
.L349:
	mov	d5,#255
	call	Xcp_Transmit
.L235:
	jne	d2,#0,.L20
.L350:
	j	.L21
.L20:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   334      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   335        /* transmit successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   336      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   337      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   338      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   339        /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   340        SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   341        /* check if buffer is still free */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   342        if (XCP_EV_BUFFER_LENGTH(protLayerId) == 0u)
	ld.w	d15,[a13]
.L351:
	jne	d15,#0,.L22
.L352:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   343        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   344          XCP_EV_BUFFER_LENGTH(protLayerId) = XcpPacketCtoPtr->Length_u32;
	ld.w	d15,[a15]8
.L353:
	st.w	[a13],d15
.L22:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   345        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   346        /* else: other event packet is in buffer, do nothing */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   347  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   348        /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   349        Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L354:
	st.b	[a12],d15
.L21:
	j	.L23
.L19:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   350        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   351      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   352    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   353    else
.L23:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   354    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   355      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   356      /* Wait4TxConfCtr != 0, XcpPacket is transmitted in one of next Xcp_TxConfirmation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   357    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   358    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   359    SchM_Exit_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   360  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   361    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   362    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   363  }
	ret
.L153:
	
__Xcp_SendEv_function_end:
	.size	Xcp_SendEv,__Xcp_SendEv_function_end-Xcp_SendEv
.L101:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendEv_Code',code,cluster('Xcp_SendEv_Code')
	.sect	'.text.Xcp_Transmit.Xcp_SendEv_Code'
	.align	2
	
	.global	Xcp_SendEv_Code

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   364  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   365  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   366  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   367  This function prepares event packet for the requested event id and calls Xcp_SendEv function
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   368  \param[in]  EventCode_u8    event code
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   369  \param[in]  protLayerId     protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   370  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   371  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   372  void Xcp_SendEv_Code(uint8 EventCode_u8, uint8 protLayerId)
; Function Xcp_SendEv_Code
.L69:
Xcp_SendEv_Code:	.type	func
	sub.a	a10,#16
.L238:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   373  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   374    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   375    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   376  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   377    /* local variables*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   378    Xcp_Cto8_t XcpEvPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   379    Xcp_Ev_t*  EvPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   380    /* initialize event packet */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   381    /* Event packet length is same for events: Store Daq, Clear Daq, Daq Overload, Command Pending */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   382    XcpEvPacket.Length_u32 = XCP_EV_LENGTH;
	mov	d15,#2
.L359:
	st.w	[a10]8,d15
.L360:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   383    /* MR12 RULE 11.5, 1.1 VIOLATION: Compiler ensures the correct alignment in the datastructure, thus casting is no problem.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   384                                      The cast allows easier (= safer) access to the data in the PDU.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   385                                      Casting over void* is necessary as otherwise some compilers complain */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   386    EvPtr = (Xcp_Ev_t*) (void*) XcpEvPacket.Buffer_au8;
	lea	a15,[a10]0
.L241:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   387    /* prepare and send event */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   388    EvPtr->PacketId_u8  = XCP_PACKET_ID_EV;
	mov	d15,#253
.L361:
	st.b	[a15],d15
.L362:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   389    EvPtr->EventCode_u8 = EventCode_u8;
	st.b	[a10]1,d4
.L363:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   390  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   391    Xcp_SendEv(&XcpEvPacket, protLayerId);
	lea	a4,[a10]0
.L364:
	mov	d4,d5
.L239:
	call	Xcp_SendEv
.L240:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   392  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   393    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   394    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   395  }
	ret
.L169:
	
__Xcp_SendEv_Code_function_end:
	.size	Xcp_SendEv_Code,__Xcp_SendEv_Code_function_end-Xcp_SendEv_Code
.L106:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendDaqTxConf',code,cluster('Xcp_SendDaqTxConf')
	.sect	'.text.Xcp_Transmit.Xcp_SendDaqTxConf'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   396  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   397  #define XCP_STOP_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   398  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   399  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   400  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   401  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   402  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   403  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   404  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   405  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   406  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   407  Function is called by the protocol layer to trigger sending. \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   408  It runs in TxConfirmation --> interrupt context. It cannot be interrupted by another TxConfirmation
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   409  \param[in]  DaqListPtr    pointer to the daq list
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   410  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   411  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   412  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   413  static void Xcp_SendDaqTxConf(Xcp_DaqList_t* DaqListPtr, uint8 protLayerId)
; Function Xcp_SendDaqTxConf
.L71:
Xcp_SendDaqTxConf:	.type	func
	sub.a	a10,#8
.L242:
	mov.aa	a12,a4
.L245:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   414  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   415    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   416    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   417  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   418    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   419    uint16      ReadPos;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   420    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   421    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendDaqTxConfCtr);
	mov	d15,#336
	mul	d15,d4
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a13,a15,d15,#0
	lea	a15,[a13]328
	ld.hu	d15,[a13]328
	add	d15,#1
	st.h	[a15],d15
.L458:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   422  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   423    XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_TXCONF_DAQ)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   424  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   425    /* fetch read position from daq */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   426    ReadPos = DaqListPtr->DaqListQuePos.ReadPos_u16;
	ld.hu	d0,[a12]6
.L246:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   427    /* each read pos represents a specific ODT, thus DTOLen can be fetched there */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   428    XcpPacket.SduLength = (PduLengthType) XCP_ODT_LENGTH(DaqListPtr->DaqListQuePos.ReadPos_OdtNum_u16, protLayerId);
	mul	d15,d4,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a12]8
	mul	d15,d15,#6
	ld.a	a2,[a15]28
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]4
.L459:
	st.h	[a10]4,d15
.L460:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   429    /* set data pointer to the queue */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   430    XcpPacket.SduDataPtr = &(DaqListPtr->DaqListQue_p[ReadPos * XCP_MAXDTO_ALIGNED(protLayerId)]);
	ld.hu	d15,[a15]18
.L461:
	mul	d0,d15
.L247:
	ld.a	a15,[a12]
.L462:
	addsc.a	a15,a15,d0,#0
.L463:
	st.a	[a10],a15
.L464:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   431  #if (XCP_DAQ_OVERLOAD_INDICATION_PID_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   432    if ( (Xcp_NoInit[protLayerId].DaqConfig.OverloadOccurred_b == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   433      && (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].OverloadType_en == XCP_DAQ_OVERLOAD_INDICATION_PID) )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   434    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   435      /* indicate overload by setting MSB of PID */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   436      XcpPacket.SduDataPtr[0] = (uint8) (XcpPacket.SduDataPtr[0] | XCP_OVERLOAD_INDICATION_PID_BIT);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   437      /* reset overload */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   438      Xcp_NoInit[protLayerId].DaqConfig.OverloadOccurred_b = FALSE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   439    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   440  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   441    /* Call transmission request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   442    if (Xcp_Transmit(&XcpPacket, protLayerId, DaqListPtr->XcpTxPduId) == E_OK)
	lea	a4,[a10]0
.L243:
	ld.bu	d5,[a12]17
	call	Xcp_Transmit
.L244:
	jne	d2,#0,.L24
.L465:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   443    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   444      Xcp_QueReadNext(DaqListPtr);
	mov.aa	a4,a12
.L248:
	call	Xcp_QueReadNext
.L249:
	j	.L25
.L24:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   445    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   446    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   447    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   448      /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   449      SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   450      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L466:
	st.b	[a13],d15
.L25:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   451      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   452    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   453  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   454    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   455    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   456  }
	ret
.L203:
	
__Xcp_SendDaqTxConf_function_end:
	.size	Xcp_SendDaqTxConf,__Xcp_SendDaqTxConf_function_end-Xcp_SendDaqTxConf
.L136:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_SendDaq',code,cluster('Xcp_SendDaq')
	.sect	'.text.Xcp_Transmit.Xcp_SendDaq'
	.align	2
	
	.global	Xcp_SendDaq

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   457  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   458  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   459  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   460  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   461  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   462  #define XCP_START_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   463  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   464  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   465  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   466  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   467  Function sends daq packets for the protocol layer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   468  \param[in]  daqListNo_u16   absolute daq list number
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   469  \param[in]  protLayerId     protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   470  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   471  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   472  void Xcp_SendDaq(uint16 daqListNo_u16, uint8 protLayerId)
; Function Xcp_SendDaq
.L73:
Xcp_SendDaq:	.type	func
	sub.a	a10,#8
.L250:
	mov	d8,d5
.L252:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   473  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   474    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   475    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   476  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   477    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   478    PduInfoType    XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   479    Xcp_DaqList_t* DaqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   480    uint16         ReadPos;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   481    Std_ReturnType retval;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   482  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   483    XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_SEND_DAQ)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   484  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   485    DaqListPtr = &(XCP_DAQ(daqListNo_u16, protLayerId));
	mul	d15,d8,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	mul	d15,d4,#24
	ld.a	a2,[a15]24
	addsc.a	a12,a2,d15,#0
.L253:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   486    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   487    SchM_Enter_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   488  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   489    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   490    XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_SendDaqCtr);
	mov	d15,#336
	mul	d15,d8
	movh.a	a2,#@his(Xcp_Cleared)
	lea	a2,[a2]@los(Xcp_Cleared)
	addsc.a	a13,a2,d15,#0
	lea	a2,[a13]330
	ld.hu	d15,[a13]330
	add	d15,#1
	st.h	[a2],d15
.L389:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   491  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   492    /* fetch read/write position from daq */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   493    ReadPos  = DaqListPtr->DaqListQuePos.ReadPos_u16;
	ld.hu	d0,[a12]6
.L254:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   494  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   495    /* Queue could be already transmitted by TxConfirmation --> check if queue is still contains data and daq is still running */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   496    if (   (ReadPos != DaqListPtr->DaqListQuePos.WritePos_u16)
	ld.hu	d15,[a12]4
.L390:
	jeq	d15,d0,.L26
.L391:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   497        && ( (DaqListPtr->Mode_u8 & XCP_DAQLISTMODE_RUNNING) == XCP_DAQLISTMODE_RUNNING )
	ld.bu	d15,[a12]22
.L392:
	jz.t	d15:6,.L27
.L393:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   498       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   499    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   500      /* Can XcpPacket be transmitted now? */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   501      if (Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 == 0)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   502      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   503        /* Queue contains data, transmission can be triggered */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   504        Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = XCP_WAIT4TXCONFCTR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   505        Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 = daqListNo_u16;
	lea	a2,[a15]74
.L394:
	ld.bu	d15,[a13]
.L395:
	jne	d15,#0,.L28
.L396:
	mov	d15,#5
.L397:
	st.b	[a13],d15
.L398:
	st.h	[a2],d4
.L399:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   506  #if (XCP_CAN_DIRECT_TRANSMIT == STD_OFF)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   507        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   508  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   509  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   510        /* each read pos represents a specific ODT, thus DTOLen can be fetched there */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   511        XcpPacket.SduLength = (PduLengthType) ( XCP_ODT_LENGTH(DaqListPtr->DaqListQuePos.ReadPos_OdtNum_u16, protLayerId) );
	ld.hu	d15,[a12]8
	mul	d15,d15,#6
	ld.a	a2,[a15]28
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]4
.L400:
	st.h	[a10]4,d15
.L401:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   512        /* set data pointer to the queue */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   513        XcpPacket.SduDataPtr = &(DaqListPtr->DaqListQue_p[ReadPos * XCP_MAXDTO_ALIGNED(protLayerId)]);
	ld.hu	d15,[a15]18
.L402:
	mul	d0,d15
.L255:
	ld.a	a15,[a12]
.L403:
	addsc.a	a15,a15,d0,#0
.L404:
	st.a	[a10],a15
.L405:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   514  #if (XCP_DAQ_OVERLOAD_INDICATION_PID_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   515        if ( (Xcp_NoInit[protLayerId].DaqConfig.OverloadOccurred_b == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   516          && (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].OverloadType_en == XCP_DAQ_OVERLOAD_INDICATION_PID) )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   517        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   518          /* indicate overload by setting MSB of PID */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   519          XcpPacket.SduDataPtr[0] = (uint8) (XcpPacket.SduDataPtr[0] | XCP_OVERLOAD_INDICATION_PID_BIT);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   520          Xcp_NoInit[protLayerId].DaqConfig.OverloadOccurred_b = FALSE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   521        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   522  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   523        /* update indexes for next data in que */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   524        /* !!! Be careful here: The sequence is intended.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   525         * The obvious order would be to first call Xcp_Transmit and then set the que one step further.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   526         * But in this case we cannot have a spin lock around the two actions (Xcp_Transmit is simply to long).
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   527         * Hence we face the situation, that a higher prior action can interrupt the execution between sending the message and
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   528         * incrementing the position in the Que. By this the Receive Interrupt gets triggered
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   529         * before we increment the position in the Que and the same object gets send twice.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   530         * */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   531        Xcp_QueReadNext(DaqListPtr);
	mov.aa	a4,a12
.L256:
	call	Xcp_QueReadNext
.L251:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   532        /* transmit request */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   533        /* use stored  transport layer Information for faster transmission */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   534        retval = Xcp_Transmit(&XcpPacket, protLayerId, DaqListPtr->XcpTxPduId);
	lea	a4,[a10]0
.L406:
	ld.bu	d5,[a12]17
	mov	d4,d8
.L257:
	call	Xcp_Transmit
.L258:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   535  #if (XCP_CAN_DIRECT_TRANSMIT == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   536        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   537  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   538  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   539        if (retval != E_OK)
	jeq	d2,#0,.L29
.L407:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   540        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   541          /* Transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   542          /* reset indexes to last data in que */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   543          Xcp_QueSetBack(DaqListPtr);
	mov.aa	a4,a12
.L260:
	call	Xcp_QueSetBack
.L259:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   544          /* transmit not successful */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   545          SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   546          Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L408:
	st.b	[a13],d15
.L29:
	j	.L30
.L28:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   547          SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   548        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   549      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   550      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   551      /* Wait4TxConfCtr != 0, XcpPacket is transmitted in one of next Xcp_TxConfirmation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   552      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   553        uint16 DaqListSending_u16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   554        DaqListSending_u16 = Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16;
	ld.hu	d15,[a15]74
.L262:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   555  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   556        if (DaqListSending_u16 != XCP_DAQLIST_UNDEF)
	mov.u	d0,#65535
.L261:
	jeq	d15,d0,.L31
.L409:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   557        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   558          /* check priority of sending DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   559          if (Xcp_NoInit[protLayerId].DaqConfig.DaqList_p[DaqListSending_u16].Priority_u8 < DaqListPtr->Priority_u8)
	mul	d15,d15,#24
.L263:
	ld.a	a15,[a15]24
.L410:
	addsc.a	a15,a15,d15,#0
.L411:
	ld.bu	d15,[a15]20
.L412:
	ld.bu	d0,[a12]20
.L413:
	jge.u	d15,d0,.L32
.L414:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   560          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   561            /* overwrite sending DAQ with this DAQ, so it will send out next */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   562            Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 = daqListNo_u16;
	st.h	[a2],d4
.L32:
	j	.L33
.L31:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   563          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   564        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   565        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   566        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   567          /* set sending DAQ, so it will send out next */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   568          Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 = daqListNo_u16;
	st.h	[a2],d4
.L33:
.L30:
	j	.L34
.L27:
.L26:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   569        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   570        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   571      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   572    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   573    else
.L34:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   574    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   575      /* Queue data already sent by TxConfirmation, transmit not necessary */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   576      SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   577    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   578    /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   579    SchM_Exit_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   580  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   581    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   582    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   583  }
	ret
.L181:
	
__Xcp_SendDaq_function_end:
	.size	Xcp_SendDaq,__Xcp_SendDaq_function_end-Xcp_SendDaq
.L116:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_DaqQueFindNextOdtToSend',code,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.text.Xcp_Transmit.Xcp_DaqQueFindNextOdtToSend'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   584  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   585  #define XCP_STOP_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   586  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   587  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   588  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   589  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   590  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   591  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   592  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   593  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   594  This function looks for daq lists in given protocol layer considering the priority. \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   595  If a daq list wants to send something, the pointer to daqlist pointer is changed to the found daq.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   596  \param[out] DaqListPtr    pointer to daq list pointer
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   597  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   598  \return     E_OK: daq found, DaqListPtr is valid
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   599  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   600  static Std_ReturnType Xcp_DaqQueFindNextOdtToSend(Xcp_DaqList_t** DaqListPtr, uint8 protLayerId)
; Function Xcp_DaqQueFindNextOdtToSend
.L75:
Xcp_DaqQueFindNextOdtToSend:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   601  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   602    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   603    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   604  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   605    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   606    Std_ReturnType Status;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   607    uint16_least i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   608    Xcp_DaqList_t* daqListPtr_local;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   609    Xcp_DaqList_t* SendingDaqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   610    uint16 daqlist_u16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   611  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   612    /* Initial values */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   613    Status = E_NOT_OK;
	mov	d2,#1
.L264:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   614  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   615    XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_FIND_DAQ)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   616  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   617    if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_RUNNING)
	mul	d15,d4,#80
.L471:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L472:
	addsc.a	a15,a15,d15,#0
.L473:
	ld.w	d0,[a15]76
.L474:
	mov	d15,#10
.L475:
	jne	d15,d0,.L35
.L476:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   618    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   619      if (Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 != XCP_DAQLIST_UNDEF)
	mov.u	d0,#65535
.L477:
	lea	a2,[a15]74
.L478:
	ld.hu	d15,[a15]74
.L479:
	jeq	d15,d0,.L36
.L480:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   620      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   621        /* store pointer for fast access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   622        SendingDaqListPtr = &(XCP_DAQ(Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16, protLayerId));
	mul	d15,d15,#24
	ld.a	a5,[a15]24
	addsc.a	a5,a5,d15,#0
.L265:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   623  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   624        /* check whether last queue has something to send */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   625        if (SendingDaqListPtr->DaqListQuePos.WritePos_u16 != SendingDaqListPtr->DaqListQuePos.ReadPos_u16)
	ld.hu	d1,[a5]4
.L481:
	ld.hu	d15,[a5]6
.L482:
	jeq	d15,d1,.L37
.L483:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   626        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   627          /* continue sending previous daq */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   628          *DaqListPtr = SendingDaqListPtr;
	st.a	[a4],a5
.L484:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   629          Status = E_OK;
	mov	d2,#0
.L37:
.L36:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   630        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   631      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   632  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   633      if (Status == E_NOT_OK)
	jne	d2,#1,.L38
.L485:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   634      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   635        /* reset active daq sending pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   636        Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 = XCP_DAQLIST_UNDEF;
	st.h	[a2],d0
.L486:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   637        /* Loop through all DAQs */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   638        for (i = 0; i < Xcp_NoInit[protLayerId].DaqConfig.DaqListSendingCnt_u16; i++)
	mov	d0,#0
.L266:
	j	.L39
.L40:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   639        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   640          daqlist_u16 = Xcp_NoInit[protLayerId].DaqConfig.PriorityList_p[i];
	ld.a	a5,[a15]40
.L487:
	addsc.a	a5,a5,d0,#1
	ld.hu	d1,[a5]0
.L267:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   641          daqListPtr_local = &(XCP_DAQ(daqlist_u16, protLayerId));
	mul	d15,d1,#24
	ld.a	a5,[a15]24
	addsc.a	a5,a5,d15,#0
.L268:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   642  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   643          if (daqListPtr_local->DaqListQuePos.WritePos_u16 != daqListPtr_local->DaqListQuePos.ReadPos_u16)
	ld.hu	d3,[a5]4
.L488:
	ld.hu	d15,[a5]6
.L489:
	jeq	d15,d3,.L41
.L490:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   644          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   645            /* DaqPacket found to send */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   646            *DaqListPtr = daqListPtr_local;
	st.a	[a4],a5
.L491:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   647            Xcp_NoInit[protLayerId].DaqConfig.DaqListSending_u16 = daqlist_u16;
	st.h	[a2],d1
.L492:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   648            Status = E_OK;
	mov	d2,#0
.L493:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   649            /* Break from for-loop of all DAQs */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   650            break;
	j	.L42
.L41:
	add	d0,#1
.L39:
	ld.hu	d15,[a15]72
.L494:
	jlt.u	d0,d15,.L40

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   651          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   652          else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   653          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   654            /* No DaqPacket found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   655          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   656        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   657      }
.L42:
.L38:
.L35:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   658    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   659  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   660    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   661    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   662    return Status;
	j	.L43

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   663  }
.L43:
	ret
.L208:
	
__Xcp_DaqQueFindNextOdtToSend_function_end:
	.size	Xcp_DaqQueFindNextOdtToSend,__Xcp_DaqQueFindNextOdtToSend_function_end-Xcp_DaqQueFindNextOdtToSend
.L141:
	; End of function
	
	.sdecl	'.text.Xcp_Transmit.Xcp_TxConfirmation',code,cluster('Xcp_TxConfirmation')
	.sect	'.text.Xcp_Transmit.Xcp_TxConfirmation'
	.align	2
	
	.global	Xcp_TxConfirmation

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   664  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   665  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   666  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   667  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   668  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   669  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   670  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   671  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   672  #define XCP_START_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   673  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   674  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   675  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   676  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   677  This function is called by the different transport layers, when they receive the information, that
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   678  a packet is sent. This function looks for a new packet to send.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   679  \param[in]  XcpTransportLayerId   transport layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   680  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   681  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   682  /* HIS METRIC LEVEL VIOLATION IN Xcp_TxConfirmation: Function contains very simple "else if" statements. HIS metric compliance would decrease readability and maintainability. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   683  /* HIS METRIC CALLS VIOLATION IN Xcp_TxConfirmation: Long and short SchM locks are still needed. It is planned combine the calls -> metric no longer violated */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   684  void Xcp_TxConfirmation(uint8 XcpTransportLayerId)
; Function Xcp_TxConfirmation
.L77:
Xcp_TxConfirmation:	.type	func
	sub.a	a10,#8
.L269:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   685  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   686    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   687    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   688  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   689    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   690    uint8 protLayerId;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   691  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   692    Xcp_DaqList_t* DaqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   693  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   694  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   695    protLayerId = Xcp_GlobalNoInit.Tl2PlRef_au8[XcpTransportLayerId];
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L369:
	addsc.a	a15,a15,d4,#0
	ld.bu	d8,[a15]9
.L271:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   696  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   697    /* abort, if a tx confirmation comes after disconnect is finished */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   698    if (protLayerId != XCP_INVALID_PROTLAYER_ID)
	mov	d15,#255
.L370:
	jeq	d15,d8,.L44
.L371:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   699    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   700      /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   701      SchM_Enter_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   702  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   703      /* Check for XcpPackets under spin lock because new XcpPackets might be inserted during processing */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   704      SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   705      XCP_DEBUG_CTR_INC(Xcp_Cleared[protLayerId].Debug.Xcp_Debug_TxConfCtr);
	mov	d0,#336
	mul	d0,d8
	movh.a	a15,#@his(Xcp_Cleared)
	lea	a15,[a15]@los(Xcp_Cleared)
	addsc.a	a15,a15,d0,#0
	lea	a2,[a15]332
	ld.hu	d0,[a15]332
	add	d0,#1
	st.h	[a2],d0
.L372:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   706  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   707      /* TxConfirmation is here, reset Wait4TxConfCtr to start value */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   708      Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = XCP_WAIT4TXCONFCTR;
	mov	d0,#5
.L373:
	st.b	[a15],d0
.L374:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   709  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   710      /* RES and ERR */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   711      if (XCP_RES_BUFFER_LENGTH(protLayerId) > 0u)
	ld.w	d15,[a15]20
.L375:
	jeq	d15,#0,.L45
.L376:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   712      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   713        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   714        Xcp_SendResTxConf(protLayerId);
	mov	d4,d8
.L270:
	call	Xcp_SendResTxConf
.L272:
	j	.L46
.L45:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   715      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   716  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   717      /* EV and SERV */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   718      else if (XCP_EV_BUFFER_LENGTH(protLayerId) > 0u)
	ld.w	d15,[a15]32
.L377:
	jeq	d15,#0,.L47
.L378:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   719      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   720        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   721        Xcp_SendEvTxConf(protLayerId);
	mov	d4,d8
.L273:
	call	Xcp_SendEvTxConf
.L274:
	j	.L48
.L47:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   722      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   723  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   724  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   725      /* DAQ, function Xcp_DaqQueContainsOdt must run under spin lock */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   726      else if (Xcp_DaqQueFindNextOdtToSend(&DaqListPtr, protLayerId) == E_OK)
	lea	a4,[a10]0
.L379:
	mov	d4,d8
.L275:
	call	Xcp_DaqQueFindNextOdtToSend
.L276:
	jne	d2,#0,.L49
.L380:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   727      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   728    #if (XCP_CAN_DIRECT_TRANSMIT == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   729        Xcp_SendDaqTxConf(DaqListPtr, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   730        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   731    #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   732        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   733        Xcp_SendDaqTxConf(DaqListPtr, protLayerId);
	ld.a	a4,[a10]
.L381:
	mov	d4,d8
.L277:
	call	Xcp_SendDaqTxConf
.L278:
	j	.L50
.L49:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   734    #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   735      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   736  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   737  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   738  #if(XCP_BLOCK_TRANSFER_UPLOAD == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   739      /* Block upload */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   740      else if (Xcp_Cleared[protLayerId].Mem.UploadRunning_b == TRUE)
	ld.bu	d15,[a15]48
.L382:
	jne	d15,#1,.L51
.L383:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   741      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   742        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   743        Xcp_BlockUpload(protLayerId);
	mov	d4,d8
.L279:
	call	Xcp_BlockUpload
.L280:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   744        /* Wait4TxConfCtr != 0. Xcp_CmdUpload cannot trigger a new transmission,
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   745           only ResBuffer is updated. Transmission must be triggered here */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   746        Xcp_SendResTxConf(protLayerId);
	mov	d4,d8
.L281:
	call	Xcp_SendResTxConf
.L282:
	j	.L52
.L51:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   747      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   748  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   749  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   750      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   751      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   752        /* nothing more to send, reset transmit counter
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   753           Important: Must be set to 0 before disable spin lock.
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   754           So other Xcp_SendXxx functions wait to check if they can transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   755        Xcp_Cleared[protLayerId].Wait4TxConfCtr_u8 = 0;
	mov	d15,#0
.L384:
	st.b	[a15],d15
.L52:
.L50:
.L48:
.L46:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   756        SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   757      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   758      /* Long spin lock including complete transmit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   759      SchM_Exit_Xcp_SendingLong();
	j	.L53
.L44:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   760    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   761    else /* protLayerId != XCP_INVALID_PROTLAYER_ID */
.L53:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   762    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   763      /* Xcp_TxConfirmation after DISCONNECT - this is ok */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   764    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   765  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   766    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   767    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   768  }
	ret
.L176:
	
__Xcp_TxConfirmation_function_end:
	.size	Xcp_TxConfirmation,__Xcp_TxConfirmation_function_end-Xcp_TxConfirmation
.L111:
	; End of function
	
	.calls	'Xcp_Transmit','Det_ReportError'
	.calls	'Xcp_Transmit','__INDIRECT__'
	.calls	'Xcp_SendResTxConf','Xcp_Transmit'
	.calls	'Xcp_SendRes','Xcp_Transmit'
	.calls	'Xcp_SendErrRes','Xcp_SendRes'
	.calls	'Xcp_SendPosRes','Xcp_SendRes'
	.calls	'Xcp_SendEvTxConf','Xcp_Transmit'
	.calls	'Xcp_SendEv','Xcp_Transmit'
	.calls	'Xcp_SendEv_Code','Xcp_SendEv'
	.calls	'Xcp_SendDaqTxConf','Xcp_Transmit'
	.calls	'Xcp_SendDaqTxConf','Xcp_QueReadNext'
	.calls	'Xcp_SendDaq','Xcp_QueReadNext'
	.calls	'Xcp_SendDaq','Xcp_Transmit'
	.calls	'Xcp_SendDaq','Xcp_QueSetBack'
	.calls	'Xcp_TxConfirmation','Xcp_SendResTxConf'
	.calls	'Xcp_TxConfirmation','Xcp_SendEvTxConf'
	.calls	'Xcp_TxConfirmation','Xcp_DaqQueFindNextOdtToSend'
	.calls	'Xcp_TxConfirmation','Xcp_SendDaqTxConf'
	.calls	'Xcp_TxConfirmation','Xcp_BlockUpload'
	.calls	'Xcp_Transmit','',0
	.calls	'Xcp_SendResTxConf','',8
	.calls	'Xcp_SendRes','',8
	.calls	'Xcp_SendErrRes','',0
	.calls	'Xcp_SendPosRes','',0
	.calls	'Xcp_SendEvTxConf','',8
	.calls	'Xcp_SendEv','',8
	.calls	'Xcp_SendEv_Code','',16
	.calls	'Xcp_SendDaqTxConf','',8
	.calls	'Xcp_SendDaq','',8
	.calls	'Xcp_DaqQueFindNextOdtToSend','',0
	.extern	Xcp_PlCfgConst
	.extern	Det_ReportError
	.extern	Xcp_NoInit
	.extern	Xcp_GlobalNoInit
	.extern	Xcp_Cleared
	.extern	Xcp_BlockUpload
	.extern	Xcp_QueReadNext
	.extern	Xcp_QueSetBack
	.extern	__INDIRECT__
	.calls	'Xcp_TxConfirmation','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L79:
	.word	14748
	.half	3
	.word	.L80
	.byte	4
.L78:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L81
.L143:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	138
	.byte	4
	.word	138
	.byte	3
	.word	160
.L167:
	.byte	2
	.byte	'unsigned int',0,4,7
.L158:
	.byte	5
	.byte	'rba_BswSrv_MemCopy8',0,3,1,132,2,19,1,1
.L160:
	.byte	6
	.byte	'xDest_pu8',0,1,132,2,46
	.word	155
.L162:
	.byte	6
	.byte	'xSrc_pcu8',0,1,132,2,70
	.word	165
.L164:
	.byte	6
	.byte	'numBytes_u32',0,1,132,2,88
	.word	170
.L166:
	.byte	7,0,8
	.word	186
	.byte	9
	.word	214
	.byte	9
	.word	233
	.byte	9
	.word	252
	.byte	7,0
.L182:
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'Det_ReportError',0,2,112,16
	.word	138
	.byte	1,1,1,1,6
	.byte	'ModuleId',0,2,112,39
	.word	298
	.byte	6
	.byte	'InstanceId',0,2,112,55
	.word	138
	.byte	6
	.byte	'ApiId',0,2,112,73
	.word	138
	.byte	6
	.byte	'ErrorId',0,2,112,86
	.word	138
	.byte	0
.L145:
	.byte	11,3,71,9,8,12
	.byte	'SduDataPtr',0
	.word	155
	.byte	4,2,35,0,12
	.byte	'SduLength',0
	.word	298
	.byte	2,2,35,4,0
.L150:
	.byte	13,4,177,3,9,4,14
	.byte	'XCP_ERR_CMD_SYNCH',0,0,14
	.byte	'XCP_ERR_CMD_BUSY',0,16,14
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,14
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,14
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,14
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,14
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,14
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,14
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,14
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,14
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,14
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,14
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,14
	.byte	'XCP_ERR_SEQUENCE',0,41,14
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,14
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,14
	.byte	'XCP_ERR_GENERIC',0,49,14
	.byte	'XCP_ERR_VERIFY',0,50,14
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,14
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,14
	.byte	'XCP_REPEAT_COMMAND',0,252,1,14
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,14
	.byte	'XCP_NO_RESPONSE',0,254,1,14
	.byte	'XCP_NO_ERROR',0,255,1,0,15,8
	.word	138
	.byte	16,7,0
.L172:
	.byte	11,4,174,4,9,12,12
	.byte	'Buffer_au8',0
	.word	1001
	.byte	8,2,35,0,12
	.byte	'Length_u32',0
	.word	170
	.byte	4,2,35,8,0,4
	.word	1010
.L154:
	.byte	3
	.word	1057
	.byte	11,5,129,15,9,2,12
	.byte	'PacketId_u8',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'EventCode_u8',0
	.word	138
	.byte	1,2,35,1,0
.L174:
	.byte	3
	.word	1067
	.byte	17
	.byte	'Xcp_BlockUpload',0,6,223,4,13,1,1,1,1,6
	.byte	'protLayerId',0,6,223,4,35
	.word	138
	.byte	0,11,6,241,1,9,8,12
	.byte	'WritePos_u16',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'ReadPos_u16',0
	.word	298
	.byte	2,2,35,2,12
	.byte	'ReadPos_OdtNum_u16',0
	.word	298
	.byte	2,2,35,4,12
	.byte	'QueSize_u16',0
	.word	298
	.byte	2,2,35,6,0,18
	.word	138
	.byte	18
	.word	138
	.byte	11,6,254,2,9,24,12
	.byte	'DaqListQue_p',0
	.word	155
	.byte	4,2,35,0,12
	.byte	'DaqListQuePos',0
	.word	1169
	.byte	8,2,35,4,12
	.byte	'OdtFirst_u16',0
	.word	298
	.byte	2,2,35,12,12
	.byte	'EventChannelNum_u16',0
	.word	298
	.byte	2,2,35,14,12
	.byte	'OdtCnt_u8',0
	.word	138
	.byte	1,2,35,16,12
	.byte	'XcpTxPduId',0
	.word	138
	.byte	1,2,35,17,12
	.byte	'Prescaler_u8',0
	.word	138
	.byte	1,2,35,18,12
	.byte	'CycleCnt_u8',0
	.word	138
	.byte	1,2,35,19,12
	.byte	'Priority_u8',0
	.word	138
	.byte	1,2,35,20,12
	.byte	'Flags_u8',0
	.word	138
	.byte	1,2,35,21,12
	.byte	'Mode_u8',0
	.word	1268
	.byte	1,2,35,22,12
	.byte	'CurrentlyRunning_b',0
	.word	1273
	.byte	1,2,35,23,0
.L179:
	.byte	3
	.word	1278
	.byte	17
	.byte	'Xcp_QueReadNext',0,6,189,5,13,1,1,1,1,6
	.byte	'DaqListPtr',0,6,189,5,44
	.word	1547
	.byte	0,17
	.byte	'Xcp_QueSetBack',0,6,196,5,13,1,1,1,1,6
	.byte	'DaqListPtr',0,6,196,5,43
	.word	1547
	.byte	0,4
	.word	415
.L191:
	.byte	3
	.word	1643
.L209:
	.byte	3
	.word	1547
.L213:
	.byte	2
	.byte	'unsigned long int',0,4,7,19
	.byte	'__INDIRECT__',0,7,1,1,1,1,1,20,1,3
	.word	1699
	.byte	21
	.byte	'__codeptr',0,7,1,1
	.word	1701
	.byte	2
	.byte	'char',0,1,6,21
	.byte	'sint8',0,8,76,25
	.word	1724
	.byte	21
	.byte	'uint8',0,8,81,25
	.word	138
	.byte	21
	.byte	'uint16',0,8,91,25
	.word	298
	.byte	21
	.byte	'uint32',0,8,106,24
	.word	170
	.byte	2
	.byte	'unsigned long long int',0,8,7,21
	.byte	'uint64',0,8,111,30
	.word	1790
	.byte	21
	.byte	'boolean',0,8,127,25
	.word	138
	.byte	21
	.byte	'StatusType',0,9,191,1,27
	.word	138
	.byte	21
	.byte	'Std_ReturnType',0,9,199,1,15
	.word	138
	.byte	11,9,206,1,9,8,12
	.byte	'vendorID',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'moduleID',0
	.word	298
	.byte	2,2,35,2,12
	.byte	'sw_major_version',0
	.word	138
	.byte	1,2,35,4,12
	.byte	'sw_minor_version',0
	.word	138
	.byte	1,2,35,5,12
	.byte	'sw_patch_version',0
	.word	138
	.byte	1,2,35,6,0,21
	.byte	'Std_VersionInfoType',0,9,213,1,3
	.word	1891
	.byte	21
	.byte	'PduIdType',0,10,22,19
	.word	298
	.byte	21
	.byte	'PduLengthType',0,10,26,19
	.word	298
	.byte	21
	.byte	'PduInfoType',0,3,75,3
	.word	415
	.byte	13,3,113,9,4,14
	.byte	'TP_DATACONF',0,0,14
	.byte	'TP_DATARETRY',0,1,14
	.byte	'TP_CONFPENDING',0,2,0,21
	.byte	'TpDataStateType',0,3,118,3
	.word	2101
	.byte	13,4,225,1,9,4,14
	.byte	'XCP_STATE_DISCONNECTED',0,0,14
	.byte	'XCP_STATE_DISCONNECTING',0,1,14
	.byte	'XCP_STATE_CONNECTED',0,2,14
	.byte	'XCP_STATE_RESUME',0,3,14
	.byte	'XCP_STATE_DISABLED',0,240,1,0,21
	.byte	'Xcp_State_t',0,4,231,1,2
	.word	2177
	.byte	21
	.byte	'Xcp_AddrValue',0,4,165,3,23
	.word	170
	.byte	11,4,168,3,9,8,12
	.byte	'AddrValue',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'Extension',0
	.word	138
	.byte	1,2,35,4,0,21
	.byte	'Xcp_AddrType_t',0,4,172,3,3
	.word	2342
	.byte	21
	.byte	'Xcp_PduIdType',0,4,174,3,15
	.word	138
	.byte	21
	.byte	'Xcp_ErrorCode',0,4,204,3,2
	.word	460
	.byte	13,4,207,3,9,4,14
	.byte	'XCP_DAQ_STATE_NO_DAQ',0,0,14
	.byte	'XCP_DAQ_STATE_FREE_DAQ',0,1,14
	.byte	'XCP_DAQ_STATE_ALLOC_DAQ',0,2,14
	.byte	'XCP_DAQ_STATE_ALLOC_ODT',0,3,14
	.byte	'XCP_DAQ_STATE_ALLOC_ODT_ENTRY',0,4,14
	.byte	'XCP_DAQ_STATE_WRITE_DAQ',0,5,14
	.byte	'XCP_DAQ_STATE_PREPARE_START',0,6,14
	.byte	'XCP_DAQ_STATE_SHIFTING',0,7,14
	.byte	'XCP_DAQ_STATE_STOP_REQUESTED',0,8,14
	.byte	'XCP_DAQ_STATE_READY_TO_RUN',0,9,14
	.byte	'XCP_DAQ_STATE_RUNNING',0,10,0,21
	.byte	'Xcp_DaqState_t',0,4,220,3,2
	.word	2457
	.byte	13,4,223,3,9,4,14
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,14
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,14
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,21
	.byte	'Xcp_Overload_t',0,4,228,3,2
	.word	2785
	.byte	13,4,233,3,9,4,14
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,14
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,14
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,14
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,21
	.byte	'Xcp_IdField_t',0,4,239,3,2
	.word	2919
	.byte	13,4,242,3,9,4,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,14
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,21
	.byte	'Xcp_OdtOptimizationType_t',0,4,250,3,2
	.word	3136
	.byte	13,4,253,3,9,4,14
	.byte	'XCP_CONSISTENCY_ODT',0,0,14
	.byte	'XCP_CONSISTENCY_DAQ',0,1,14
	.byte	'XCP_CONSISTENCY_EVENT',0,2,14
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,21
	.byte	'Xcp_Consistency_t',0,4,131,4,2
	.word	3412
	.byte	13,4,134,4,9,4,14
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,14
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,14
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,14
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,21
	.byte	'Xcp_Timestamp_t',0,4,140,4,2
	.word	3537
	.byte	21
	.byte	'Xcp_Cto8_t',0,4,178,4,2
	.word	1010
	.byte	4
	.word	415
	.byte	3
	.word	3715
	.byte	22
	.word	138
	.byte	1,1,23
	.word	3720
	.byte	23
	.word	138
	.byte	23
	.word	138
	.byte	0,3
	.word	3725
	.byte	24,1,1,23
	.word	138
	.byte	23
	.word	138
	.byte	0,3
	.word	3753
	.byte	24,1,1,23
	.word	138
	.byte	0,3
	.word	3772
	.byte	22
	.word	138
	.byte	1,1,23
	.word	138
	.byte	0,3
	.word	3786
	.byte	3
	.word	415
	.byte	24,1,1,23
	.word	3720
	.byte	23
	.word	3804
	.byte	23
	.word	138
	.byte	0,3
	.word	3809
	.byte	22
	.word	138
	.byte	1,1,23
	.word	138
	.byte	23
	.word	298
	.byte	23
	.word	138
	.byte	0,3
	.word	3833
	.byte	11,11,164,1,9,56,12
	.byte	'TLTransmit_pfct',0
	.word	3748
	.byte	4,2,35,0,12
	.byte	'TLInit_pfct',0
	.word	3767
	.byte	4,2,35,4,12
	.byte	'TLConnect_pfct',0
	.word	3781
	.byte	4,2,35,8,12
	.byte	'TLDisconnect_pfct',0
	.word	3799
	.byte	4,2,35,12,12
	.byte	'TLTransportLayerCmd_pfct',0
	.word	3828
	.byte	4,2,35,16,12
	.byte	'TLGetTxPduId_pfct',0
	.word	3856
	.byte	4,2,35,20,12
	.byte	'MaxCto_u8',0
	.word	138
	.byte	1,2,35,24,12
	.byte	'MaxDto_u16',0
	.word	298
	.byte	2,2,35,26,12
	.byte	'TimestampType_en',0
	.word	3537
	.byte	4,2,35,28,12
	.byte	'IdFieldType_en',0
	.word	2919
	.byte	4,2,35,32,12
	.byte	'OverloadType_en',0
	.word	2785
	.byte	4,2,35,36,12
	.byte	'OdtOptimizationType_en',0
	.word	3136
	.byte	4,2,35,40,12
	.byte	'Consistency_en',0
	.word	3412
	.byte	4,2,35,44,12
	.byte	'PdRam_u32',0
	.word	170
	.byte	4,2,35,48,12
	.byte	'EdRam_u32',0
	.word	170
	.byte	4,2,35,52,0,21
	.byte	'Xcp_PL_TL_Cfg_t',0,11,184,1,2
	.word	3861
	.byte	13,11,188,1,9,4,14
	.byte	'XCP_RAMSECTION_INVALID',0,0,14
	.byte	'XCP_RAMSECTION_PD',0,1,14
	.byte	'XCP_RAMSECTION_ED',0,2,0,21
	.byte	'Xcp_RamSectionType_t',0,11,193,1,2
	.word	4259
	.byte	11,11,195,1,9,12,12
	.byte	'DaqRamPtr_pu8',0
	.word	155
	.byte	4,2,35,0,12
	.byte	'DaqRamTotalSize_u32',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'RamSectionType_en',0
	.word	4259
	.byte	4,2,35,8,0,21
	.byte	'Xcp_DaqRamSection_Cfg_t',0,11,200,1,2
	.word	4361
	.byte	15,1
	.word	138
	.byte	16,0,0,11,11,203,1,9,8,12
	.byte	'DaqRamFreeSize_u32',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'PLConnected_ab',0
	.word	4480
	.byte	1,2,35,4,0,21
	.byte	'Xcp_DaqRamSections_t',0,11,207,1,2
	.word	4489
	.byte	11,11,230,1,9,4,12
	.byte	'EventChannelDirection_u8',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'EventChannelTimeCycle_u8',0
	.word	138
	.byte	1,2,35,1,12
	.byte	'EventChannelTimeUnit_u8',0
	.word	138
	.byte	1,2,35,2,12
	.byte	'EventChannelPriority_u8',0
	.word	138
	.byte	1,2,35,3,0,21
	.byte	'Xcp_EventChannel_Cfg_t',0,11,236,1,2
	.word	4578
	.byte	15,56
	.word	3861
	.byte	16,0,0,15,12
	.word	4361
	.byte	16,0,0,15,12
	.word	4578
	.byte	16,2,0,11,11,240,1,9,80,12
	.byte	'TlCfg',0
	.word	4751
	.byte	56,2,35,0,12
	.byte	'DaqRamCfg',0
	.word	4760
	.byte	12,2,35,56,12
	.byte	'EventChannelCfg',0
	.word	4769
	.byte	12,2,35,68,0,21
	.byte	'Xcp_PlCfgConst_t',0,11,131,2,2
	.word	4778
	.byte	4
	.word	4778
	.byte	25
	.byte	'Xcp_PlCfgConst',0,11,140,2,31
	.word	4870
	.byte	1,1,21
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	1790
	.byte	21
	.byte	'Can_IdType',0,12,32,16
	.word	170
	.byte	21
	.byte	'Can_HwHandleType',0,12,43,16
	.word	298
	.byte	11,13,93,9,8,12
	.byte	'Class',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'TIN',0
	.word	138
	.byte	1,2,35,1,12
	.byte	'ReturnAddress',0
	.word	170
	.byte	4,2,35,4,0,21
	.byte	'OsTrapInfoType',0,13,97,3
	.word	4971
	.byte	15,68
	.word	170
	.byte	16,16,0,11,13,154,1,9,68,12
	.byte	'store',0
	.word	5051
	.byte	68,2,35,0,0,15,68
	.word	5060
	.byte	16,0,0,21
	.byte	'Os_JumpBufType',0,13,156,1,3
	.word	5082
	.byte	21
	.byte	'Os_StackTraceType',0,13,174,1,18
	.word	170
	.byte	11,13,175,1,9,8,12
	.byte	'sp',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'ctx',0
	.word	170
	.byte	4,2,35,4,0,21
	.byte	'Os_StackValueType',0,13,175,1,63
	.word	5142
	.byte	21
	.byte	'Os_StackSizeType',0,13,176,1,27
	.word	5142
	.byte	26,1,1,3
	.word	5227
	.byte	21
	.byte	'Os_VoidVoidFunctionType',0,13,179,1,16
	.word	5230
	.byte	21
	.byte	'ApplicationType',0,13,193,1,23
	.word	138
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,13,198,1,16,2,12
	.byte	'app_id',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,1,0,21
	.byte	'Os_ApplicationConfigurationType',0,13,201,1,3
	.word	5293
	.byte	21
	.byte	'Os_CoreStateType',0,13,203,1,16
	.word	170
	.byte	21
	.byte	'AreaIdType',0,13,204,1,16
	.word	298
	.byte	21
	.byte	'Os_PeripheralAddressType',0,13,212,1,22
	.word	170
	.byte	21
	.byte	'TickType',0,13,221,1,22
	.word	170
	.byte	21
	.byte	'Os_StopwatchTickType',0,13,225,1,22
	.word	170
	.byte	3
	.word	170
	.byte	21
	.byte	'Os_Lockable',0,13,234,1,18
	.word	5535
	.byte	21
	.byte	'CoreIdType',0,13,236,1,16
	.word	298
	.byte	21
	.byte	'SpinlockIdType',0,13,237,1,16
	.word	298
	.byte	13,13,239,1,9,4,14
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,14
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,21
	.byte	'TryToGetSpinlockType',0,13,239,1,74
	.word	5605
	.byte	13,13,174,2,9,4,14
	.byte	'APPLICATION_ACCESSIBLE',0,0,14
	.byte	'APPLICATION_RESTARTING',0,1,14
	.byte	'APPLICATION_TERMINATED',0,2,0,21
	.byte	'ApplicationStateType',0,13,174,2,92
	.word	5698
	.byte	28
	.byte	'void',0,3
	.word	5810
	.byte	24,1,1,23
	.word	138
	.byte	23
	.word	5816
	.byte	0,3
	.word	5821
	.byte	21
	.byte	'Os_FunctionEntryType',0,13,183,2,16
	.word	5835
	.byte	27
	.byte	'Os_MeterInfoType_s',0,13,193,2,16,48,12
	.byte	'elapsed',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'previous',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'max',0
	.word	170
	.byte	4,2,35,8,12
	.byte	'cumulative',0
	.word	170
	.byte	4,2,35,12,12
	.byte	'stackbase',0
	.word	5142
	.byte	8,2,35,16,12
	.byte	'stackusage',0
	.word	5142
	.byte	8,2,35,24,12
	.byte	'stackmax',0
	.word	5142
	.byte	8,2,35,32,12
	.byte	'stackbudget',0
	.word	5142
	.byte	8,2,35,40,0,21
	.byte	'Os_MeterInfoType',0,13,202,2,3
	.word	5870
	.byte	3
	.word	5870
	.byte	21
	.byte	'Os_MeterInfoRefType',0,13,203,2,50
	.word	6068
	.byte	21
	.byte	'EventMaskType',0,13,206,2,15
	.word	138
	.byte	21
	.byte	'Os_imaskType',0,13,211,2,16
	.word	170
	.byte	27
	.byte	'Os_ISRDynType_s',0,13,213,2,16,48,12
	.byte	'meter',0
	.word	5870
	.byte	48,2,35,0,0,21
	.byte	'Os_ISRDynType',0,13,215,2,3
	.word	6147
	.byte	3
	.word	6147
	.byte	4
	.word	6208
	.byte	27
	.byte	'Os_ISRType_s',0,13,216,2,16,24,12
	.byte	'entry_function',0
	.word	5235
	.byte	4,2,35,0,12
	.byte	'dynamic',0
	.word	6213
	.byte	4,2,35,4,12
	.byte	'imask',0
	.word	170
	.byte	4,2,35,8,12
	.byte	'stackbudget',0
	.word	5142
	.byte	8,2,35,12,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,20,12
	.byte	'application',0
	.word	138
	.byte	1,2,35,21,0,21
	.byte	'Os_ISRType',0,13,223,2,3
	.word	6218
	.byte	3
	.word	5227
	.byte	4
	.word	6218
	.byte	3
	.word	6377
	.byte	21
	.byte	'ISRType',0,13,224,2,46
	.word	6382
	.byte	21
	.byte	'Os_bitmask',0,13,239,2,22
	.word	170
	.byte	21
	.byte	'Os_pset0Type',0,13,240,2,20
	.word	170
	.byte	21
	.byte	'Os_pset1Type',0,13,241,2,20
	.word	170
	.byte	21
	.byte	'Os_pset2Type',0,13,242,2,20
	.word	170
	.byte	29,13,243,2,9,4,12
	.byte	'p0',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'p1',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'p2',0
	.word	170
	.byte	4,2,35,0,0,21
	.byte	'Os_psetType',0,13,247,2,3
	.word	6490
	.byte	29,13,249,2,9,4,12
	.byte	't0',0
	.word	170
	.byte	4,2,35,0,12
	.byte	't1',0
	.word	170
	.byte	4,2,35,0,12
	.byte	't2',0
	.word	170
	.byte	4,2,35,0,0,21
	.byte	'Os_tpmaskType',0,13,253,2,3
	.word	6554
	.byte	21
	.byte	'Os_ActivationCountType',0,13,254,2,23
	.word	138
	.byte	27
	.byte	'Os_TaskDynType_s',0,13,128,3,16,120,12
	.byte	'terminate_jump_buf',0
	.word	5091
	.byte	68,2,35,0,12
	.byte	'meter',0
	.word	5870
	.byte	48,2,35,68,12
	.byte	'activation_count',0
	.word	138
	.byte	1,2,35,116,0,21
	.byte	'Os_TaskDynType',0,13,132,3,3
	.word	6652
	.byte	15,68
	.word	5060
	.byte	16,0,0,3
	.word	6652
	.byte	4
	.word	6778
	.byte	27
	.byte	'Os_TaskType_s',0,13,134,3,16,40,12
	.byte	'dynamic',0
	.word	6783
	.byte	4,2,35,0,12
	.byte	'entry_function',0
	.word	5235
	.byte	4,2,35,4,12
	.byte	'pset',0
	.word	6490
	.byte	4,2,35,8,12
	.byte	'base_tpmask',0
	.word	6554
	.byte	4,2,35,12,12
	.byte	'tpmask',0
	.word	6554
	.byte	4,2,35,16,12
	.byte	'core_id',0
	.word	298
	.byte	2,2,35,20,12
	.byte	'index',0
	.word	170
	.byte	4,2,35,24,12
	.byte	'stackbudget',0
	.word	5142
	.byte	8,2,35,28,12
	.byte	'activation_count',0
	.word	138
	.byte	1,2,35,36,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,37,12
	.byte	'application',0
	.word	138
	.byte	1,2,35,38,0,21
	.byte	'Os_TaskType',0,13,146,3,3
	.word	6788
	.byte	4
	.word	6788
	.byte	3
	.word	7038
	.byte	21
	.byte	'TaskType',0,13,147,3,47
	.word	7043
	.byte	30
	.byte	'Os_TaskStateType',0,13,155,3,6,4,14
	.byte	'SUSPENDED',0,0,14
	.byte	'READY',0,1,14
	.byte	'WAITING',0,2,14
	.byte	'RUNNING',0,3,0,21
	.byte	'TaskStateType',0,13,156,3,31
	.word	7066
	.byte	29,13,167,3,3,4,12
	.byte	'tpmask',0
	.word	6554
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,13,166,3,16,4,12
	.byte	'saved_priority',0
	.word	7153
	.byte	4,2,35,0,0,21
	.byte	'Os_ResourceDynType',0,13,170,3,3
	.word	7176
	.byte	3
	.word	7176
	.byte	4
	.word	7256
	.byte	27
	.byte	'Os_ResourceType_s',0,13,171,3,16,12,12
	.byte	'dynamic',0
	.word	7261
	.byte	4,2,35,0,12
	.byte	'tpmask',0
	.word	6554
	.byte	4,2,35,4,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,8,0,21
	.byte	'Os_ResourceType',0,13,175,3,3
	.word	7266
	.byte	11,13,181,3,9,12,12
	.byte	'maxallowedvalue',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	170
	.byte	4,2,35,8,0,21
	.byte	'AlarmBaseType',0,13,185,3,3
	.word	7365
	.byte	11,13,206,3,9,8,12
	.byte	'Running',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'Pending',0
	.word	138
	.byte	1,2,35,1,12
	.byte	'Delay',0
	.word	170
	.byte	4,2,35,4,0,21
	.byte	'Os_CounterStatusType',0,13,210,3,3
	.word	7460
	.byte	31
	.word	138
	.byte	1,1,3
	.word	7546
	.byte	21
	.byte	'Os_CounterIncrAdvType',0,13,217,3,22
	.word	7553
	.byte	27
	.byte	's_swd',0,13,222,3,12,4,12
	.byte	'count',0
	.word	170
	.byte	4,2,35,0,0,29,13,221,3,3,4,12
	.byte	'sw',0
	.word	7589
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,13,220,3,16,4,12
	.byte	'type_dependent',0
	.word	7617
	.byte	4,2,35,0,0,21
	.byte	'Os_CounterDynType',0,13,226,3,3
	.word	7636
	.byte	3
	.word	7636
	.byte	4
	.word	7714
	.byte	27
	.byte	'Os_CounterType_s',0,13,227,3,16,28,12
	.byte	'dynamic',0
	.word	7719
	.byte	4,2,35,0,12
	.byte	'advincr',0
	.word	7558
	.byte	4,2,35,4,12
	.byte	'base',0
	.word	7365
	.byte	12,2,35,8,12
	.byte	'core',0
	.word	5816
	.byte	4,2,35,20,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,24,12
	.byte	'application',0
	.word	138
	.byte	1,2,35,25,0,21
	.byte	'Os_CounterType',0,13,234,3,3
	.word	7724
	.byte	3
	.word	7546
	.byte	4
	.word	7724
	.byte	3
	.word	7876
	.byte	21
	.byte	'CounterType',0,13,235,3,52
	.word	7881
	.byte	30
	.byte	'Os_ScheduleTableStatusType',0,13,240,3,6,4,14
	.byte	'SCHEDULETABLE_STOPPED',0,0,14
	.byte	'SCHEDULETABLE_NEXT',0,1,14
	.byte	'SCHEDULETABLE_WAITING',0,2,14
	.byte	'SCHEDULETABLE_RUNNING',0,3,14
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,21
	.byte	'ScheduleTableStatusType',0,13,241,3,41
	.word	7907
	.byte	4
	.word	.L283-.L79
	.byte	3
	.word	8107
	.byte	21
	.byte	'ScheduleTableType',0,13,128,4,58
	.word	8112
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,13,130,4,16,16,12
	.byte	'match',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'next',0
	.word	8117
	.byte	4,2,35,4,12
	.byte	'state',0
	.word	7907
	.byte	4,2,35,8,12
	.byte	'config',0
	.word	298
	.byte	2,2,35,12,0,3
	.word	8144
	.byte	4
	.word	8237
.L283:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,13,247,3,16,16,12
	.byte	'dynamic',0
	.word	8242
	.byte	4,2,35,0,12
	.byte	'counter',0
	.word	7886
	.byte	4,2,35,4,12
	.byte	'repeat',0
	.word	138
	.byte	1,2,35,8,12
	.byte	'config',0
	.word	298
	.byte	2,2,35,10,12
	.byte	'initial',0
	.word	138
	.byte	1,2,35,12,12
	.byte	'access',0
	.word	138
	.byte	1,2,35,13,12
	.byte	'application',0
	.word	138
	.byte	1,2,35,14,0,21
	.byte	'Os_ScheduleTableType',0,13,255,3,3
	.word	8247
	.byte	4
	.word	8247
	.byte	3
	.word	8427
	.byte	4
	.word	7724
	.byte	3
	.word	8437
	.byte	18
	.word	5540
	.byte	18
	.word	6490
	.byte	18
	.word	6387
	.byte	18
	.word	7048
	.byte	18
	.word	6554
	.byte	18
	.word	138
	.byte	18
	.word	7048
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,13,251,6,16,112,12
	.byte	'TrapInfo',0
	.word	4971
	.byte	8,2,35,0,12
	.byte	'lock_taskaccess',0
	.word	8447
	.byte	4,2,35,8,12
	.byte	'ReadyTasks',0
	.word	8452
	.byte	4,2,35,12,12
	.byte	'RunningISR',0
	.word	8457
	.byte	4,2,35,16,12
	.byte	'RunningTask',0
	.word	8462
	.byte	4,2,35,20,12
	.byte	'RunningTPMask',0
	.word	8467
	.byte	4,2,35,24,12
	.byte	'CurrentMeteredObject',0
	.word	6073
	.byte	4,2,35,28,12
	.byte	'IdleMeter',0
	.word	5870
	.byte	48,2,35,32,12
	.byte	'AppAccess',0
	.word	138
	.byte	1,2,35,80,12
	.byte	'AppOverride',0
	.word	8472
	.byte	1,2,35,81,12
	.byte	'GetStackValueAdjust',0
	.word	5142
	.byte	8,2,35,84,12
	.byte	'InErrorHook',0
	.word	138
	.byte	1,2,35,92,12
	.byte	'ChainTaskRef',0
	.word	8477
	.byte	4,2,35,96,12
	.byte	'GetStackUsageAdjust',0
	.word	5142
	.byte	8,2,35,100,12
	.byte	'InProtectionHook',0
	.word	138
	.byte	1,2,35,108,12
	.byte	'CoreIsActive',0
	.word	138
	.byte	1,2,35,109,12
	.byte	'InShutdownHook',0
	.word	138
	.byte	1,2,35,110,0,21
	.byte	'Os_ControlledCoreType',0,13,141,7,3
	.word	8482
	.byte	3
	.word	170
	.byte	4
	.word	6218
	.byte	3
	.word	8938
	.byte	4
	.word	6788
	.byte	3
	.word	8948
	.byte	3
	.word	5870
	.byte	27
	.byte	'Os_AnyCoreType_s',0,13,151,7,16,96,12
	.byte	'DisableAllImask',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'SuspendAllImask',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'SuspendOSImask',0
	.word	170
	.byte	4,2,35,8,12
	.byte	'DisableAllCount',0
	.word	170
	.byte	4,2,35,12,12
	.byte	'SuspendAllCount',0
	.word	170
	.byte	4,2,35,16,12
	.byte	'SuspendOSCount',0
	.word	170
	.byte	4,2,35,20,12
	.byte	'RestartJumpBuf',0
	.word	5091
	.byte	68,2,35,24,12
	.byte	'Restartable',0
	.word	138
	.byte	1,2,35,92,0,21
	.byte	'Os_AnyCoreType',0,13,160,7,3
	.word	8963
	.byte	21
	.byte	'Can_TxObjPriorityClassType',0,14,219,3,16
	.word	170
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,14,231,3,16,8,12
	.byte	'MsgObjId',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'HwControllerId',0
	.word	138
	.byte	1,2,35,1,12
	.byte	'TxObjPriorityClass',0
	.word	170
	.byte	4,2,35,4,0,21
	.byte	'Can_TxHwObjectConfigType',0,14,252,3,3
	.word	9240
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,14,129,4,16,12,12
	.byte	'MaskRef',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'MsgId',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'MsgObjId',0
	.word	138
	.byte	1,2,35,8,12
	.byte	'HwControllerId',0
	.word	138
	.byte	1,2,35,9,0,21
	.byte	'Can_RxHwObjectConfigType',0,14,147,4,3
	.word	9376
	.byte	15,4
	.word	138
	.byte	16,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,14,181,4,16,4,12
	.byte	'ControllerMOMap',0
	.word	9516
	.byte	4,2,35,0,0,21
	.byte	'Can_ControllerMOMapConfigType',0,14,184,4,3
	.word	9525
	.byte	27
	.byte	'Can_NPCRValueType',0,14,188,4,16,2,12
	.byte	'Can_NPCRValue',0
	.word	298
	.byte	2,2,35,0,0,21
	.byte	'Can_NPCRValueType',0,14,191,4,3
	.word	9626
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,194,4,16,8,12
	.byte	'CanControllerBaudrate',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'CanControllerBaudrateCfg',0
	.word	298
	.byte	2,2,35,4,0,21
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,198,4,3
	.word	9701
	.byte	4
	.word	9701
	.byte	3
	.word	9866
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,14,201,4,16,4,12
	.byte	'Can_kBaudrateConfigPtr',0
	.word	9871
	.byte	4,2,35,0,0,21
	.byte	'Can_BaudrateConfigPtrType',0,14,204,4,3
	.word	9876
	.byte	27
	.byte	'Can_EventHandlingType',0,14,226,4,16,4,12
	.byte	'CanEventType',0
	.word	9516
	.byte	4,2,35,0,0,21
	.byte	'Can_EventHandlingType',0,14,229,4,3
	.word	9976
	.byte	21
	.byte	'Rte_TransformerErrorCode',0,15,130,1,15
	.word	138
	.byte	21
	.byte	'Rte_TransformerClass',0,15,131,1,15
	.word	138
	.byte	11,15,168,1,9,12,12
	.byte	'in',0
	.word	5816
	.byte	4,2,35,0,12
	.byte	'out',0
	.word	5816
	.byte	4,2,35,4,12
	.byte	'used',0
	.word	298
	.byte	2,2,35,8,12
	.byte	'lost_data',0
	.word	138
	.byte	1,2,35,10,0,21
	.byte	'Rte_QDynType',0,15,173,1,3
	.word	10122
	.byte	13,15,175,1,9,4,14
	.byte	'RTE_DRA',0,0,14
	.byte	'RTE_WOWP',0,1,14
	.byte	'RTE_TASK',0,2,14
	.byte	'RTE_ARE',0,3,14
	.byte	'RTE_EV',0,4,14
	.byte	'RTE_MSI',0,5,0,21
	.byte	'Rte_NotificationType',0,15,182,1,3
	.word	10209
	.byte	15,128,8
	.word	138
	.byte	16,255,7,0,21
	.byte	'Impl_NVM_DstPtrType_1024',0,16,50,15
	.word	10307
	.byte	21
	.byte	'CanIf_u32_impl',0,16,69,16
	.word	170
	.byte	21
	.byte	'CanIf_u16_impl',0,16,71,16
	.word	298
	.byte	21
	.byte	'CanIf_u8_impl',0,16,73,15
	.word	138
	.byte	21
	.byte	'CanIf_ControllerModeType_Enum_impl',0,16,88,15
	.word	138
	.byte	21
	.byte	'CanIf_PduModeType_Enum_impl',0,16,90,15
	.word	138
	.byte	11,16,92,9,2,12
	.byte	'DeviceMode',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'ChannelMode',0
	.word	138
	.byte	1,2,35,1,0,21
	.byte	'CanIf_ControllerStateType_struct_impl',0,16,95,3
	.word	10498
	.byte	21
	.byte	'CanIf_NotifStatusType_Enum_impl',0,16,100,15
	.word	138
	.byte	21
	.byte	'CanSM_boolean_Impl',0,16,120,15
	.word	138
	.byte	21
	.byte	'CanSM_u8_Impl',0,16,123,15
	.word	138
	.byte	21
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,16,128,1,15
	.word	138
	.byte	21
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,16,132,1,15
	.word	138
	.byte	21
	.byte	'CanSM_u16_Impl',0,16,136,1,16
	.word	298
	.byte	21
	.byte	'CanSM_TimerStateType_Enum_impl',0,16,138,1,15
	.word	138
	.byte	11,16,140,1,9,4,12
	.byte	'cntTick_u16',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'stTimer',0
	.word	138
	.byte	1,2,35,2,0,21
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,16,143,1,3
	.word	10839
	.byte	21
	.byte	'Com_impl_u16',0,16,154,1,16
	.word	298
	.byte	21
	.byte	'Com_impl_u8',0,16,157,1,15
	.word	138
	.byte	21
	.byte	'ComM_uint32_Impl',0,16,173,1,16
	.word	170
	.byte	21
	.byte	'ComM_uint16_Impl',0,16,175,1,16
	.word	298
	.byte	21
	.byte	'ComM_uint8_Impl',0,16,177,1,15
	.word	138
	.byte	21
	.byte	'ComM_bool_Impl',0,16,179,1,15
	.word	138
	.byte	11,16,181,1,9,24,12
	.byte	'ChannelState_e',0
	.word	170
	.byte	4,2,35,0,12
	.byte	'LightTimeoutCtr_u32',0
	.word	170
	.byte	4,2,35,4,12
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	298
	.byte	2,2,35,8,12
	.byte	'ChannelMode_u8',0
	.word	138
	.byte	1,2,35,10,12
	.byte	'BusSmMode_u8',0
	.word	138
	.byte	1,2,35,11,12
	.byte	'UserRequestCtr_u8',0
	.word	138
	.byte	1,2,35,12,12
	.byte	'PassiveRequestState_u8',0
	.word	138
	.byte	1,2,35,13,12
	.byte	'PncRequestCtr_u8',0
	.word	138
	.byte	1,2,35,14,12
	.byte	'InhibitionReqStatus_u8',0
	.word	138
	.byte	1,2,35,15,12
	.byte	'NmNetworkRequestStatus_b',0
	.word	138
	.byte	1,2,35,16,12
	.byte	'DiagnosticRequestState_b',0
	.word	138
	.byte	1,2,35,17,12
	.byte	'CommunicationAllowed_b',0
	.word	138
	.byte	1,2,35,18,12
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	138
	.byte	1,2,35,19,12
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	138
	.byte	1,2,35,20,12
	.byte	'NmNetworkModeStatus_b',0
	.word	138
	.byte	1,2,35,21,0,21
	.byte	'ComM_ChannelStruct_Impl',0,16,197,1,3
	.word	11071
	.byte	11,16,206,1,9,10,12
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'LimitToNoComCtr_u16',0
	.word	298
	.byte	2,2,35,2,12
	.byte	'RequestedUserMode_t',0
	.word	138
	.byte	1,2,35,4,12
	.byte	'IndicatedUserMode_t',0
	.word	138
	.byte	1,2,35,5,12
	.byte	'numChannelsInFullCom_u8',0
	.word	138
	.byte	1,2,35,6,12
	.byte	'numChannelsInSilentCom_u8',0
	.word	138
	.byte	1,2,35,7,12
	.byte	'numChannelsInNoCom_u8',0
	.word	138
	.byte	1,2,35,8,0,21
	.byte	'ComM_UserStruct_Impl',0,16,214,1,3
	.word	11575
	.byte	21
	.byte	'Dcm_IOOperationResponseType',0,16,252,1,15
	.word	138
	.byte	21
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	16,138,2,15
	.word	138
	.byte	21
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,16,146,2,15
	.word	138
	.byte	21
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,16,150,2,15
	.word	138
	.byte	21
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,16,154,2,15
	.word	138
	.byte	21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,16,243,3,34
	.word	10318
	.byte	15,128,8
	.word	138
	.byte	16,255,7,0,21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,16,246,3,34
	.word	10318
	.byte	13,6,216,1,9,4,14
	.byte	'XCP_BG_IDLE',0,0,14
	.byte	'XCP_BG_CHKSUM',0,1,14
	.byte	'XCP_BG_MEM_WRITE',0,2,14
	.byte	'XCP_BG_REPEAT_CMD',0,3,14
	.byte	'XCP_BG_DO_DISCONNECT',0,4,14
	.byte	'XCP_BG_CANCEL_REQ',0,5,0,21
	.byte	'Xcp_BgActivity_t',0,6,224,1,3
	.word	12393
	.byte	24,1,1,23
	.word	3720
	.byte	23
	.word	138
	.byte	0,3
	.word	12538
	.byte	21
	.byte	'Xcp_CmdFunctionPtr',0,6,230,1,16
	.word	12552
	.byte	21
	.byte	'Xcp_Que_t',0,6,247,1,3
	.word	1169
	.byte	11,6,250,1,9,24,12
	.byte	'XcpState_en',0
	.word	2177
	.byte	4,2,35,0,12
	.byte	'ConnectedTlId_u8',0
	.word	138
	.byte	1,2,35,4,12
	.byte	'ResourceProtStatus_u8',0
	.word	138
	.byte	1,2,35,5,12
	.byte	'Mta',0
	.word	2342
	.byte	8,2,35,8,12
	.byte	'MaxDto_u16',0
	.word	298
	.byte	2,2,35,16,12
	.byte	'MaxDtoAligned_u16',0
	.word	298
	.byte	2,2,35,18,12
	.byte	'MaxCto_u8',0
	.word	138
	.byte	1,2,35,20,0,21
	.byte	'Xcp_Session_t',0,6,138,2,2
	.word	12604
	.byte	11,6,149,2,9,12,12
	.byte	'Buffer_au8',0
	.word	1001
	.byte	8,2,35,0,12
	.byte	'Length_u32',0
	.word	170
	.byte	4,2,35,8,0,21
	.byte	'Xcp_CtoMax_t',0,6,153,2,2
	.word	12791
	.byte	15,255,1
	.word	138
	.byte	16,254,1,0,11,6,157,2,9,132,2,12
	.byte	'UploadRunning_b',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'RemainingSize_u8',0
	.word	138
	.byte	1,2,35,1,12
	.byte	'DownloadSize_u8',0
	.word	138
	.byte	1,2,35,2,12
	.byte	'ReceivedSize_u8',0
	.word	138
	.byte	1,2,35,3,12
	.byte	'DownloadBuffer_au8',0
	.word	12860
	.byte	255,1,2,35,4,0,21
	.byte	'Xcp_Mem_t',0,6,178,2,2
	.word	12871
	.byte	11,6,183,2,9,2,12
	.byte	'SeedWaitingKey_b',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'SeedRemaingSize_u8',0
	.word	138
	.byte	1,2,35,1,0,21
	.byte	'Xcp_SeedAndKey_t',0,6,187,2,2
	.word	13028
	.byte	11,6,192,2,9,4,12
	.byte	'BlockSize_u32',0
	.word	170
	.byte	4,2,35,0,0,21
	.byte	'Xcp_Checksum_t',0,6,198,2,2
	.word	13115
	.byte	11,6,203,2,9,18,12
	.byte	'Xcp_Debug_TransmitOkCtr',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'Xcp_Debug_TransmitNotOkCtr',0
	.word	298
	.byte	2,2,35,2,12
	.byte	'Xcp_Debug_SendResTxConfCtr',0
	.word	298
	.byte	2,2,35,4,12
	.byte	'Xcp_Debug_SendResCtr',0
	.word	298
	.byte	2,2,35,6,12
	.byte	'Xcp_Debug_SendEvTxConfCtr',0
	.word	298
	.byte	2,2,35,8,12
	.byte	'Xcp_Debug_SendEvCtr',0
	.word	298
	.byte	2,2,35,10,12
	.byte	'Xcp_Debug_SendDaqTxConfCtr',0
	.word	298
	.byte	2,2,35,12,12
	.byte	'Xcp_Debug_SendDaqCtr',0
	.word	298
	.byte	2,2,35,14,12
	.byte	'Xcp_Debug_TxConfCtr',0
	.word	298
	.byte	2,2,35,16,0,21
	.byte	'Xcp_Debug_t',0,6,216,2,2
	.word	13169
	.byte	11,6,225,2,9,8,12
	.byte	'OdtEntryPos_u16',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'OdtEntryMax_u16',0
	.word	298
	.byte	2,2,35,2,12
	.byte	'DaqListNum_u16',0
	.word	298
	.byte	2,2,35,4,12
	.byte	'AbsOdtNum_u16',0
	.word	298
	.byte	2,2,35,6,0,21
	.byte	'Xcp_SelectedOdtEntry_t',0,6,231,2,2
	.word	13491
	.byte	11,6,234,2,9,6,12
	.byte	'OdtEntryFirst_u16',0
	.word	298
	.byte	2,2,35,0,12
	.byte	'OdtEntryCnt_u8',0
	.word	138
	.byte	1,2,35,2,12
	.byte	'CopyRoutine_u8',0
	.word	138
	.byte	1,2,35,3,12
	.byte	'Length_u16',0
	.word	298
	.byte	2,2,35,4,0,21
	.byte	'Xcp_Odt_t',0,6,240,2,2
	.word	13627
	.byte	21
	.byte	'Xcp_DaqList_t',0,6,143,3,2
	.word	1278
	.byte	3
	.word	13627
	.byte	3
	.word	170
	.byte	3
	.word	298
	.byte	11,6,146,3,9,56,12
	.byte	'DaqList_p',0
	.word	1547
	.byte	4,2,35,0,12
	.byte	'Odt_p',0
	.word	13771
	.byte	4,2,35,4,12
	.byte	'OdtEntryAddress_p',0
	.word	13776
	.byte	4,2,35,8,12
	.byte	'OdtEntrySize_p',0
	.word	155
	.byte	4,2,35,12,12
	.byte	'PriorityList_p',0
	.word	13781
	.byte	4,2,35,16,12
	.byte	'DaqQue_p',0
	.word	155
	.byte	4,2,35,20,12
	.byte	'DaqListCnt_u16',0
	.word	298
	.byte	2,2,35,24,12
	.byte	'OdtCnt_u16',0
	.word	298
	.byte	2,2,35,26,12
	.byte	'OdtEntryCnt_u16',0
	.word	298
	.byte	2,2,35,28,12
	.byte	'SelectedOdtEntry',0
	.word	13491
	.byte	8,2,35,30,12
	.byte	'DaqRamPtr_pu8',0
	.word	155
	.byte	4,2,35,40,12
	.byte	'DaqRamSize_u32',0
	.word	170
	.byte	4,2,35,44,12
	.byte	'DaqListSendingCnt_u16',0
	.word	298
	.byte	2,2,35,48,12
	.byte	'DaqListSending_u16',0
	.word	298
	.byte	2,2,35,50,12
	.byte	'DaqState_en',0
	.word	2457
	.byte	4,2,35,52,0,21
	.byte	'Xcp_DaqConfig_t',0,6,180,3,2
	.word	13786
	.byte	11,6,225,3,9,80,12
	.byte	'Session',0
	.word	12604
	.byte	24,2,35,0,12
	.byte	'DaqConfig',0
	.word	13786
	.byte	56,2,35,24,0,21
	.byte	'Xcp_NoInit_t',0,6,234,3,2
	.word	14167
	.byte	15,8
	.word	4489
	.byte	16,0,0,15,1
	.word	138
	.byte	16,0,0,11,6,236,3,9,12,12
	.byte	'DaqRamSections',0
	.word	14232
	.byte	8,2,35,0,12
	.byte	'DaqTransmissionStopped_b',0
	.word	138
	.byte	1,2,35,8,12
	.byte	'Tl2PlRef_au8',0
	.word	14241
	.byte	1,2,35,9,12
	.byte	'EnabledResources_u8',0
	.word	138
	.byte	1,2,35,10,12
	.byte	'InitStatus_u8',0
	.word	138
	.byte	1,2,35,11,0,21
	.byte	'Xcp_GlobalNoInit_t',0,6,255,3,2
	.word	14250
	.byte	11,6,130,4,9,208,2,12
	.byte	'Wait4TxConfCtr_u8',0
	.word	138
	.byte	1,2,35,0,12
	.byte	'BgDoDisconnect_Response',0
	.word	460
	.byte	4,2,35,4,12
	.byte	'BgActivityState',0
	.word	12393
	.byte	4,2,35,8,12
	.byte	'ResBuffer',0
	.word	12791
	.byte	12,2,35,12,12
	.byte	'EvBuffer',0
	.word	1010
	.byte	12,2,35,24,12
	.byte	'CmdBuffer',0
	.word	1010
	.byte	12,2,35,36,12
	.byte	'Mem',0
	.word	12871
	.byte	132,2,2,35,48,12
	.byte	'SeedAndKey',0
	.word	13028
	.byte	2,3,35,180,2,12
	.byte	'Checksum',0
	.word	13115
	.byte	4,3,35,184,2,12
	.byte	'Debug',0
	.word	13169
	.byte	18,3,35,188,2,0,21
	.byte	'Xcp_Cleared_t',0,6,150,4,2
	.word	14417
	.byte	15,80
	.word	14167
	.byte	16,0,0,25
	.byte	'Xcp_NoInit',0,6,158,4,29
	.word	14659
	.byte	1,1,25
	.byte	'Xcp_GlobalNoInit',0,6,159,4,29
	.word	14250
	.byte	1,1,15,208,2
	.word	14417
	.byte	16,0,0,25
	.byte	'Xcp_Cleared',0,6,165,4,29
	.word	14718
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,38,0,73,19
	.byte	0,0,5,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,6,5,0,3,8,58,15,59,15,57,15,73,19,0,0,7,11,0,0
	.byte	0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	19,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,4,1,58,15,59,15,57,15,11,15,0,0,14
	.byte	40,0,3,8,28,13,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,46,1,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,18,53,0,73,19,0,0,19,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,20,21,0,54,15,0
	.byte	0,21,22,0,3,8,58,15,59,15,57,15,73,19,0,0,22,21,1,73,19,54,15,39,12,0,0,23,5,0,73,19,0,0,24,21,1,54,15
	.byte	39,12,0,0,25,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,26,21,0,54,15,39,12,0,0,27,19,1,3,8,58,15
	.byte	59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,23,1,58,15,59,15,57,15,11,15,0,0,30,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,31,21,0,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L81:
	.word	.L285-.L284
.L284:
	.half	3
	.word	.L287-.L286
.L286:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Commands.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Priv.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0,0
.L287:
.L285:
	.sdecl	'.debug_info',debug,cluster('Xcp_SendRes')
	.sect	'.debug_info'
.L82:
	.word	235
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L85,.L84
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendRes',0,1,137,1,6,1,1,1
	.word	.L59,.L142,.L58
	.byte	4
	.byte	'protLayerId',0,1,137,1,24
	.word	.L143,.L144
	.byte	5
	.word	.L59,.L142
	.byte	6
	.byte	'XcpPacket',0,1,143,1,15
	.word	.L145,.L146
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendRes')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendRes')
	.sect	'.debug_line'
.L84:
	.word	.L289-.L288
.L288:
	.half	3
	.word	.L291-.L290
.L290:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L291:
	.byte	5,6,7,0,5,2
	.word	.L59
	.byte	3,136,1,1,5,3,9
	.half	.L226-.L59
	.byte	3,12,1,5,31,9
	.half	.L292-.L226
	.byte	3,3,1,5,3,9
	.half	.L293-.L292
	.byte	1,5,50,7,9
	.half	.L294-.L293
	.byte	3,2,1,5,48,9
	.half	.L295-.L294
	.byte	1,5,28,9
	.half	.L296-.L295
	.byte	3,4,1,5,26,9
	.half	.L297-.L296
	.byte	1,5,44,9
	.half	.L298-.L297
	.byte	3,1,1,5,26,9
	.half	.L299-.L298
	.byte	1,5,42,9
	.half	.L300-.L299
	.byte	3,3,1,5,40,9
	.half	.L301-.L300
	.byte	1,5,23,9
	.half	.L302-.L301
	.byte	3,3,1,5,47,9
	.half	.L303-.L302
	.byte	1,5,5,9
	.half	.L227-.L303
	.byte	1,5,68,7,9
	.half	.L304-.L227
	.byte	3,117,1,5,53,9
	.half	.L11-.L304
	.byte	3,18,1,5,42,9
	.half	.L305-.L11
	.byte	1,5,52,9
	.half	.L306-.L305
	.byte	3,4,1,5,50,9
	.half	.L307-.L306
	.byte	1,5,5,9
	.half	.L12-.L307
	.byte	3,121,1,5,1,9
	.half	.L13-.L12
	.byte	3,21,1,7,9
	.half	.L86-.L13
	.byte	0,1,1
.L289:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendRes')
	.sect	'.debug_ranges'
.L85:
	.word	-1,.L59,0,.L86-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_info'
.L87:
	.word	214
	.half	3
	.word	.L88
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L90,.L89
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendPosRes',0,1,225,1,6,1,1,1
	.word	.L63,.L147,.L62
	.byte	4
	.byte	'protLayerId',0,1,225,1,27
	.word	.L143,.L148
	.byte	5
	.word	.L63,.L147
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_line'
.L89:
	.word	.L309-.L308
.L308:
	.half	3
	.word	.L311-.L310
.L310:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L311:
	.byte	5,3,7,0,5,2
	.word	.L63
	.byte	3,230,1,1,5,40,9
	.half	.L312-.L63
	.byte	1,5,38,9
	.half	.L313-.L312
	.byte	1,5,40,9
	.half	.L314-.L313
	.byte	3,2,1,5,38,9
	.half	.L315-.L314
	.byte	1,5,15,9
	.half	.L316-.L315
	.byte	3,2,1,5,1,9
	.half	.L230-.L316
	.byte	3,4,1,7,9
	.half	.L91-.L230
	.byte	0,1,1
.L309:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_ranges'
.L90:
	.word	-1,.L63,0,.L91-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_info'
.L92:
	.word	237
	.half	3
	.word	.L93
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L95,.L94
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendErrRes',0,1,200,1,6,1,1,1
	.word	.L61,.L149,.L60
	.byte	4
	.byte	'ErrorCode',0,1,200,1,35
	.word	.L150,.L151
	.byte	4
	.byte	'protLayerId',0,1,200,1,52
	.word	.L143,.L152
	.byte	5
	.word	.L61,.L149
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_abbrev'
.L93:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_line'
.L94:
	.word	.L318-.L317
.L317:
	.half	3
	.word	.L320-.L319
.L319:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L320:
	.byte	5,3,7,0,5,2
	.word	.L61
	.byte	3,205,1,1,5,40,9
	.half	.L321-.L61
	.byte	1,5,38,9
	.half	.L322-.L321
	.byte	1,5,40,9
	.half	.L323-.L322
	.byte	3,2,1,5,38,9
	.half	.L324-.L323
	.byte	1,9
	.half	.L325-.L324
	.byte	3,2,1,5,15,9
	.half	.L326-.L325
	.byte	3,2,1,5,1,9
	.half	.L229-.L326
	.byte	3,4,1,7,9
	.half	.L96-.L229
	.byte	0,1,1
.L318:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_ranges'
.L95:
	.word	-1,.L61,0,.L96-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendEv')
	.sect	'.debug_info'
.L97:
	.word	342
	.half	3
	.word	.L98
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L100,.L99
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendEv',0,1,175,2,6,1,1,1
	.word	.L67,.L153,.L66
	.byte	4
	.byte	'XcpPacketCtoPtr',0,1,175,2,35
	.word	.L154,.L155
	.byte	4
	.byte	'protLayerId',0,1,175,2,58
	.word	.L143,.L156
	.byte	5
	.word	.L67,.L153
	.byte	6
	.byte	'XcpPacket',0,1,181,2,15
	.word	.L145,.L157
	.byte	7
	.word	.L158,.L159,.L18
	.byte	8
	.word	.L160,.L161
	.byte	8
	.word	.L162,.L163
	.byte	8
	.word	.L164,.L165
	.byte	9
	.word	.L166,.L159,.L18
	.byte	6
	.byte	'ctLoop_u32',0,2,134,2,12
	.word	.L167,.L168
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendEv')
	.sect	'.debug_abbrev'
.L98:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendEv')
	.sect	'.debug_line'
.L99:
	.word	.L328-.L327
.L327:
	.half	3
	.word	.L330-.L329
.L329:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L330:
	.byte	5,6,7,0,5,2
	.word	.L67
	.byte	3,174,2,1,5,3,9
	.half	.L236-.L67
	.byte	3,12,1,9
	.half	.L331-.L236
	.byte	3,3,1,5,54,9
	.half	.L332-.L331
	.byte	1,5,37,9
	.half	.L333-.L332
	.byte	1,5,3,9
	.half	.L334-.L333
	.byte	3,1,1,4,2,5,20,9
	.half	.L159-.L334
	.byte	3,73,1,5,50,9
	.half	.L237-.L159
	.byte	1,5,22,9
	.half	.L17-.L237
	.byte	3,2,1,5,20,9
	.half	.L335-.L17
	.byte	1,5,18,9
	.half	.L336-.L335
	.byte	3,1,1,9
	.half	.L337-.L336
	.byte	3,1,1,5,62,9
	.half	.L338-.L337
	.byte	3,124,1,5,50,9
	.half	.L16-.L338
	.byte	1,5,5,7,9
	.half	.L339-.L16
	.byte	3,7,1,4,1,5,31,9
	.half	.L18-.L339
	.byte	3,51,1,5,3,9
	.half	.L340-.L18
	.byte	1,5,50,7,9
	.half	.L341-.L340
	.byte	3,2,1,5,48,9
	.half	.L342-.L341
	.byte	1,5,41,9
	.half	.L343-.L342
	.byte	3,1,1,5,39,9
	.half	.L344-.L343
	.byte	1,5,26,9
	.half	.L345-.L344
	.byte	3,4,1,5,59,9
	.half	.L346-.L345
	.byte	3,1,1,5,26,9
	.half	.L347-.L346
	.byte	1,5,23,9
	.half	.L348-.L347
	.byte	3,3,1,5,47,9
	.half	.L349-.L348
	.byte	1,5,5,9
	.half	.L235-.L349
	.byte	1,5,68,7,9
	.half	.L350-.L235
	.byte	3,119,1,5,11,9
	.half	.L20-.L350
	.byte	3,18,1,5,7,9
	.half	.L351-.L20
	.byte	1,5,60,7,9
	.half	.L352-.L351
	.byte	3,2,1,5,43,9
	.half	.L353-.L352
	.byte	1,5,52,9
	.half	.L22-.L353
	.byte	3,5,1,5,50,9
	.half	.L354-.L22
	.byte	1,5,5,9
	.half	.L21-.L354
	.byte	3,116,1,5,1,9
	.half	.L23-.L21
	.byte	3,26,1,7,9
	.half	.L101-.L23
	.byte	0,1,1
.L328:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendEv')
	.sect	'.debug_ranges'
.L100:
	.word	-1,.L67,0,.L101-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_info'
.L102:
	.word	286
	.half	3
	.word	.L103
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L105,.L104
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendEv_Code',0,1,244,2,6,1,1,1
	.word	.L69,.L169,.L68
	.byte	4
	.byte	'EventCode_u8',0,1,244,2,28
	.word	.L143,.L170
	.byte	4
	.byte	'protLayerId',0,1,244,2,48
	.word	.L143,.L171
	.byte	5
	.word	.L69,.L169
	.byte	6
	.byte	'XcpEvPacket',0,1,250,2,14
	.word	.L172,.L173
	.byte	6
	.byte	'EvPtr',0,1,251,2,14
	.word	.L174,.L175
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_abbrev'
.L103:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_line'
.L104:
	.word	.L356-.L355
.L355:
	.half	3
	.word	.L358-.L357
.L357:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L358:
	.byte	5,6,7,0,5,2
	.word	.L69
	.byte	3,243,2,1,5,28,9
	.half	.L238-.L69
	.byte	3,10,1,5,26,9
	.half	.L359-.L238
	.byte	1,5,31,9
	.half	.L360-.L359
	.byte	3,4,1,5,25,9
	.half	.L241-.L360
	.byte	3,2,1,5,23,9
	.half	.L361-.L241
	.byte	1,9
	.half	.L362-.L361
	.byte	3,1,1,5,15,9
	.half	.L363-.L362
	.byte	3,2,1,5,28,9
	.half	.L364-.L363
	.byte	1,5,1,9
	.half	.L240-.L364
	.byte	3,4,1,7,9
	.half	.L106-.L240
	.byte	0,1,1
.L356:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_ranges'
.L105:
	.word	-1,.L69,0,.L106-.L69,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_info'
.L107:
	.word	276
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_TxConfirmation',0,1,172,5,6,1,1,1
	.word	.L77,.L176,.L76
	.byte	4
	.byte	'XcpTransportLayerId',0,1,172,5,31
	.word	.L143,.L177
	.byte	5
	.word	.L77,.L176
	.byte	6
	.byte	'protLayerId',0,1,178,5,9
	.word	.L143,.L178
	.byte	6
	.byte	'DaqListPtr',0,1,180,5,18
	.word	.L179,.L180
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_line'
.L109:
	.word	.L366-.L365
.L365:
	.half	3
	.word	.L368-.L367
.L367:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L368:
	.byte	5,6,7,0,5,2
	.word	.L77
	.byte	3,171,5,1,5,17,9
	.half	.L269-.L77
	.byte	3,11,1,5,46,9
	.half	.L369-.L269
	.byte	1,5,22,9
	.half	.L271-.L369
	.byte	3,3,1,5,3,9
	.half	.L370-.L271
	.byte	1,5,5,7,9
	.half	.L371-.L370
	.byte	3,7,1,5,50,9
	.half	.L372-.L371
	.byte	3,3,1,5,48,9
	.half	.L373-.L372
	.byte	1,5,9,9
	.half	.L374-.L373
	.byte	3,3,1,5,5,9
	.half	.L375-.L374
	.byte	1,5,25,7,9
	.half	.L376-.L375
	.byte	3,3,1,5,35,9
	.half	.L272-.L376
	.byte	3,127,1,5,14,9
	.half	.L45-.L272
	.byte	3,5,1,5,10,9
	.half	.L377-.L45
	.byte	1,5,24,7,9
	.half	.L378-.L377
	.byte	3,3,1,5,35,9
	.half	.L274-.L378
	.byte	3,127,1,5,43,9
	.half	.L47-.L274
	.byte	3,6,1,5,55,9
	.half	.L379-.L47
	.byte	1,5,10,9
	.half	.L276-.L379
	.byte	1,5,25,7,9
	.half	.L380-.L276
	.byte	3,7,1,5,37,9
	.half	.L381-.L380
	.byte	1,5,35,9
	.half	.L278-.L381
	.byte	3,127,1,5,42,9
	.half	.L49-.L278
	.byte	3,8,1,5,10,9
	.half	.L382-.L49
	.byte	1,5,23,7,9
	.half	.L383-.L382
	.byte	3,3,1,5,25,9
	.half	.L280-.L383
	.byte	3,3,1,5,35,9
	.half	.L282-.L280
	.byte	3,124,1,5,52,9
	.half	.L51-.L282
	.byte	3,13,1,5,50,9
	.half	.L384-.L51
	.byte	1,5,32,9
	.half	.L46-.L384
	.byte	3,4,1,5,1,9
	.half	.L53-.L46
	.byte	3,9,1,7,9
	.half	.L111-.L53
	.byte	0,1,1
.L366:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L77,0,.L111-.L77,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_info'
.L112:
	.word	369
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendDaq',0,1,216,3,6,1,1,1
	.word	.L73,.L181,.L72
	.byte	4
	.byte	'daqListNo_u16',0,1,216,3,25
	.word	.L182,.L183
	.byte	4
	.byte	'protLayerId',0,1,216,3,46
	.word	.L143,.L184
	.byte	5
	.word	.L73,.L181
	.byte	6
	.byte	'XcpPacket',0,1,222,3,18
	.word	.L145,.L185
	.byte	6
	.byte	'DaqListPtr',0,1,223,3,18
	.word	.L179,.L186
	.byte	6
	.byte	'ReadPos',0,1,224,3,18
	.word	.L182,.L187
	.byte	6
	.byte	'retval',0,1,225,3,18
	.word	.L143,.L188
	.byte	5
	.word	.L28,.L30
	.byte	6
	.byte	'DaqListSending_u16',0,1,169,4,14
	.word	.L182,.L189
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_line'
.L114:
	.word	.L386-.L385
.L385:
	.half	3
	.word	.L388-.L387
.L387:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L388:
	.byte	5,6,7,0,5,2
	.word	.L73
	.byte	3,215,3,1,5,18,9
	.half	.L252-.L73
	.byte	3,13,1,5,3,9
	.half	.L253-.L252
	.byte	3,5,1,5,39,9
	.half	.L389-.L253
	.byte	3,3,1,5,47,9
	.half	.L254-.L389
	.byte	3,3,1,5,10,9
	.half	.L390-.L254
	.byte	1,5,23,7,9
	.half	.L391-.L390
	.byte	3,1,1,5,60,9
	.half	.L392-.L391
	.byte	1,5,30,7,9
	.half	.L393-.L392
	.byte	3,8,1,5,33,9
	.half	.L394-.L393
	.byte	3,124,1,5,5,9
	.half	.L395-.L394
	.byte	1,5,52,7,9
	.half	.L396-.L395
	.byte	3,3,1,5,50,9
	.half	.L397-.L396
	.byte	1,5,60,9
	.half	.L398-.L397
	.byte	3,1,1,5,47,9
	.half	.L399-.L398
	.byte	3,6,1,5,27,9
	.half	.L400-.L399
	.byte	1,5,67,9
	.half	.L401-.L400
	.byte	3,2,1,5,65,9
	.half	.L402-.L401
	.byte	1,5,42,9
	.half	.L255-.L402
	.byte	1,5,56,9
	.half	.L403-.L255
	.byte	1,5,28,9
	.half	.L404-.L403
	.byte	1,5,23,9
	.half	.L405-.L404
	.byte	3,18,1,5,30,9
	.half	.L251-.L405
	.byte	3,3,1,5,64,9
	.half	.L406-.L251
	.byte	1,5,7,9
	.half	.L258-.L406
	.byte	3,5,1,5,24,7,9
	.half	.L407-.L258
	.byte	3,4,1,5,54,9
	.half	.L259-.L407
	.byte	3,3,1,5,52,9
	.half	.L408-.L259
	.byte	1,5,7,9
	.half	.L29-.L408
	.byte	3,121,1,5,61,9
	.half	.L28-.L29
	.byte	3,15,1,5,33,9
	.half	.L262-.L28
	.byte	3,2,1,5,7,9
	.half	.L261-.L262
	.byte	1,5,56,7,9
	.half	.L409-.L261
	.byte	3,3,1,5,46,9
	.half	.L263-.L409
	.byte	1,5,56,9
	.half	.L410-.L263
	.byte	1,5,76,9
	.half	.L411-.L410
	.byte	1,5,101,9
	.half	.L412-.L411
	.byte	1,5,9,9
	.half	.L413-.L412
	.byte	1,5,64,7,9
	.half	.L414-.L413
	.byte	3,3,1,5,9,9
	.half	.L32-.L414
	.byte	3,125,1,5,62,9
	.half	.L31-.L32
	.byte	3,9,1,5,5,9
	.half	.L30-.L31
	.byte	3,110,1,5,1,9
	.half	.L34-.L30
	.byte	3,33,1,7,9
	.half	.L116-.L34
	.byte	0,1,1
.L386:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L73,0,.L116-.L73,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_Transmit')
	.sect	'.debug_info'
.L117:
	.word	299
	.half	3
	.word	.L118
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L120,.L119
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_Transmit',0,1,49,23
	.word	.L143
	.byte	1,1
	.word	.L55,.L190,.L54
	.byte	4
	.byte	'XcpPacketPtr',0,1,49,55
	.word	.L191,.L192
	.byte	4
	.byte	'protLayerId',0,1,49,75
	.word	.L143,.L193
	.byte	4
	.byte	'XcpTxPduId',0,1,49,102
	.word	.L143,.L194
	.byte	5
	.word	.L55,.L190
	.byte	6
	.byte	'Status',0,1,55,18
	.word	.L143,.L195
	.byte	6
	.byte	'tl_id',0,1,56,9
	.word	.L143,.L196
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_Transmit')
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_Transmit')
	.sect	'.debug_line'
.L119:
	.word	.L416-.L415
.L415:
	.half	3
	.word	.L418-.L417
.L417:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L418:
	.byte	5,23,7,0,5,2
	.word	.L55
	.byte	3,48,1,5,11,9
	.half	.L220-.L55
	.byte	3,10,1,5,3,9
	.half	.L2-.L220
	.byte	3,2,1,7,9
	.half	.L419-.L2
	.byte	1,5,12,9
	.half	.L3-.L419
	.byte	3,3,1,5,32,9
	.half	.L420-.L3
	.byte	1,5,39,9
	.half	.L421-.L420
	.byte	1,5,77,9
	.half	.L422-.L421
	.byte	1,5,5,9
	.half	.L223-.L422
	.byte	3,4,1,5,3,9
	.half	.L423-.L223
	.byte	3,125,1,5,5,7,9
	.half	.L424-.L423
	.byte	3,3,1,5,78,9
	.half	.L425-.L424
	.byte	1,5,5,9
	.half	.L5-.L425
	.byte	3,6,1,5,3,9
	.half	.L6-.L5
	.byte	3,5,1,5,1,9
	.half	.L4-.L6
	.byte	3,1,1,7,9
	.half	.L121-.L4
	.byte	0,1,1
.L416:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_Transmit')
	.sect	'.debug_ranges'
.L120:
	.word	-1,.L55,0,.L121-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_info'
.L122:
	.word	237
	.half	3
	.word	.L123
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L125,.L124
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendResTxConf',0,1,90,13,1,1
	.word	.L57,.L197,.L56
	.byte	4
	.byte	'protLayerId',0,1,90,37
	.word	.L143,.L198
	.byte	5
	.word	.L57,.L197
	.byte	6
	.byte	'XcpPacket',0,1,96,15
	.word	.L145,.L199
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_abbrev'
.L123:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_line'
.L124:
	.word	.L427-.L426
.L426:
	.half	3
	.word	.L429-.L428
.L428:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L429:
	.byte	5,13,7,0,5,2
	.word	.L57
	.byte	3,217,0,1,5,3,9
	.half	.L224-.L57
	.byte	3,10,1,5,26,9
	.half	.L430-.L224
	.byte	3,2,1,5,24,9
	.half	.L431-.L430
	.byte	1,5,42,9
	.half	.L432-.L431
	.byte	3,1,1,5,24,9
	.half	.L433-.L432
	.byte	1,5,21,9
	.half	.L434-.L433
	.byte	3,4,1,5,45,9
	.half	.L435-.L434
	.byte	1,5,3,9
	.half	.L225-.L435
	.byte	1,5,42,7,9
	.half	.L436-.L225
	.byte	3,3,1,5,40,9
	.half	.L437-.L436
	.byte	1,5,43,9
	.half	.L438-.L437
	.byte	1,5,50,9
	.half	.L8-.L438
	.byte	3,6,1,5,48,9
	.half	.L439-.L8
	.byte	1,5,1,9
	.half	.L9-.L439
	.byte	3,6,1,7,9
	.half	.L126-.L9
	.byte	0,1,1
.L427:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_ranges'
.L125:
	.word	-1,.L57,0,.L126-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_info'
.L127:
	.word	239
	.half	3
	.word	.L128
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L130,.L129
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendEvTxConf',0,1,255,1,13,1,1
	.word	.L65,.L200,.L64
	.byte	4
	.byte	'protLayerId',0,1,255,1,36
	.word	.L143,.L201
	.byte	5
	.word	.L65,.L200
	.byte	6
	.byte	'XcpPacket',0,1,133,2,15
	.word	.L145,.L202
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_line'
.L129:
	.word	.L441-.L440
.L440:
	.half	3
	.word	.L443-.L442
.L442:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L443:
	.byte	5,13,7,0,5,2
	.word	.L65
	.byte	3,254,1,1,5,3,9
	.half	.L231-.L65
	.byte	3,10,1,5,26,9
	.half	.L444-.L231
	.byte	3,2,1,5,24,9
	.half	.L445-.L444
	.byte	1,5,42,9
	.half	.L446-.L445
	.byte	3,1,1,5,24,9
	.half	.L447-.L446
	.byte	1,5,21,9
	.half	.L448-.L447
	.byte	3,4,1,5,45,9
	.half	.L449-.L448
	.byte	1,5,3,9
	.half	.L232-.L449
	.byte	1,5,41,7,9
	.half	.L450-.L232
	.byte	3,3,1,5,39,9
	.half	.L451-.L450
	.byte	1,5,42,9
	.half	.L452-.L451
	.byte	1,5,50,9
	.half	.L14-.L452
	.byte	3,6,1,5,48,9
	.half	.L453-.L14
	.byte	1,5,1,9
	.half	.L15-.L453
	.byte	3,6,1,7,9
	.half	.L131-.L15
	.byte	0,1,1
.L441:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_ranges'
.L130:
	.word	-1,.L65,0,.L131-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_info'
.L132:
	.word	285
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L135,.L134
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_SendDaqTxConf',0,1,157,3,13,1,1
	.word	.L71,.L203,.L70
	.byte	4
	.byte	'DaqListPtr',0,1,157,3,46
	.word	.L179,.L204
	.byte	4
	.byte	'protLayerId',0,1,157,3,64
	.word	.L143,.L205
	.byte	5
	.word	.L71,.L203
	.byte	6
	.byte	'ReadPos',0,1,163,3,15
	.word	.L182,.L206
	.byte	6
	.byte	'XcpPacket',0,1,164,3,15
	.word	.L145,.L207
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_line'
.L134:
	.word	.L455-.L454
.L454:
	.half	3
	.word	.L457-.L456
.L456:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L457:
	.byte	5,13,7,0,5,2
	.word	.L71
	.byte	3,156,3,1,5,3,9
	.half	.L245-.L71
	.byte	3,8,1,5,38,9
	.half	.L458-.L245
	.byte	3,5,1,5,41,9
	.half	.L246-.L458
	.byte	3,2,1,5,23,9
	.half	.L459-.L246
	.byte	1,5,63,9
	.half	.L460-.L459
	.byte	3,2,1,5,61,9
	.half	.L461-.L460
	.byte	1,5,38,9
	.half	.L247-.L461
	.byte	1,5,52,9
	.half	.L462-.L247
	.byte	1,5,24,9
	.half	.L463-.L462
	.byte	1,5,21,9
	.half	.L464-.L463
	.byte	3,12,1,5,55,9
	.half	.L243-.L464
	.byte	1,5,3,9
	.half	.L244-.L243
	.byte	1,5,21,7,9
	.half	.L465-.L244
	.byte	3,2,1,5,32,9
	.half	.L249-.L465
	.byte	1,5,50,9
	.half	.L24-.L249
	.byte	3,6,1,5,48,9
	.half	.L466-.L24
	.byte	1,5,1,9
	.half	.L25-.L466
	.byte	3,6,1,7,9
	.half	.L136-.L25
	.byte	0,1,1
.L455:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_ranges'
.L135:
	.word	-1,.L71,0,.L136-.L71,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_info'
.L137:
	.word	376
	.half	3
	.word	.L138
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L140,.L139
	.byte	2
	.word	.L78
	.byte	3
	.byte	'Xcp_DaqQueFindNextOdtToSend',0,1,216,4,23
	.word	.L143
	.byte	1,1
	.word	.L75,.L208,.L74
	.byte	4
	.byte	'DaqListPtr',0,1,216,4,67
	.word	.L209,.L210
	.byte	4
	.byte	'protLayerId',0,1,216,4,85
	.word	.L143,.L211
	.byte	5
	.word	.L75,.L208
	.byte	6
	.byte	'Status',0,1,222,4,18
	.word	.L143,.L212
	.byte	6
	.byte	'i',0,1,223,4,16
	.word	.L213,.L214
	.byte	6
	.byte	'daqListPtr_local',0,1,224,4,18
	.word	.L179,.L215
	.byte	6
	.byte	'SendingDaqListPtr',0,1,225,4,18
	.word	.L179,.L216
	.byte	6
	.byte	'daqlist_u16',0,1,226,4,10
	.word	.L182,.L217
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_abbrev'
.L138:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_line'
.L139:
	.word	.L468-.L467
.L467:
	.half	3
	.word	.L470-.L469
.L469:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Transmit.c',0,0,0,0,0
.L470:
	.byte	5,10,7,0,5,2
	.word	.L75
	.byte	3,228,4,1,5,17,9
	.half	.L264-.L75
	.byte	3,4,1,5,7,9
	.half	.L471-.L264
	.byte	1,5,17,9
	.half	.L472-.L471
	.byte	1,5,40,9
	.half	.L473-.L472
	.byte	1,5,56,9
	.half	.L474-.L473
	.byte	1,5,3,9
	.half	.L475-.L474
	.byte	1,5,65,7,9
	.half	.L476-.L475
	.byte	3,2,1,5,32,9
	.half	.L477-.L476
	.byte	1,5,42,9
	.half	.L478-.L477
	.byte	1,5,5,9
	.half	.L479-.L478
	.byte	1,5,29,7,9
	.half	.L480-.L479
	.byte	3,3,1,5,43,9
	.half	.L265-.L480
	.byte	3,3,1,5,92,9
	.half	.L481-.L265
	.byte	1,5,7,9
	.half	.L482-.L481
	.byte	1,5,21,7,9
	.half	.L483-.L482
	.byte	3,3,1,5,16,9
	.half	.L484-.L483
	.byte	3,1,1,5,5,9
	.half	.L36-.L484
	.byte	3,4,1,5,60,7,9
	.half	.L485-.L36
	.byte	3,3,1,5,14,9
	.half	.L486-.L485
	.byte	3,2,1,5,78,9
	.half	.L266-.L486
	.byte	1,5,56,9
	.half	.L40-.L266
	.byte	3,2,1,5,71,9
	.half	.L487-.L40
	.byte	1,5,30,9
	.half	.L267-.L487
	.byte	3,1,1,5,44,9
	.half	.L268-.L267
	.byte	3,2,1,5,92,9
	.half	.L488-.L268
	.byte	1,5,9,9
	.half	.L489-.L488
	.byte	1,5,23,7,9
	.half	.L490-.L489
	.byte	3,3,1,5,64,9
	.half	.L491-.L490
	.byte	3,1,1,5,18,9
	.half	.L492-.L491
	.byte	3,1,1,5,11,9
	.half	.L493-.L492
	.byte	3,2,1,5,81,9
	.half	.L41-.L493
	.byte	3,116,1,5,56,9
	.half	.L39-.L41
	.byte	1,5,78,9
	.half	.L494-.L39
	.byte	1,5,3,7,9
	.half	.L35-.L494
	.byte	3,24,1,5,1,9
	.half	.L43-.L35
	.byte	3,1,1,7,9
	.half	.L141-.L43
	.byte	0,1,1
.L468:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_ranges'
.L140:
	.word	-1,.L75,0,.L141-.L75,0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_loc'
.L210:
	.word	-1,.L75,0,.L208-.L75
	.half	1
	.byte	100
	.word	0,0
.L216:
	.word	-1,.L75,.L265-.L75,.L36-.L75
	.half	1
	.byte	101
	.word	0,0
.L212:
	.word	-1,.L75,.L264-.L75,.L208-.L75
	.half	1
	.byte	82
	.word	0,0
.L74:
	.word	-1,.L75,0,.L208-.L75
	.half	2
	.byte	138,0
	.word	0,0
.L215:
	.word	-1,.L75,.L268-.L75,.L39-.L75
	.half	1
	.byte	101
	.word	0,0
.L217:
	.word	-1,.L75,.L267-.L75,.L39-.L75
	.half	1
	.byte	81
	.word	0,0
.L214:
	.word	-1,.L75,.L266-.L75,.L35-.L75
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L211:
	.word	-1,.L75,0,.L208-.L75
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_loc'
.L186:
	.word	-1,.L73,.L253-.L73,.L181-.L73
	.half	1
	.byte	108
	.word	.L256-.L73,.L251-.L73
	.half	1
	.byte	100
	.word	.L260-.L73,.L259-.L73
	.half	1
	.byte	100
	.word	0,0
.L189:
	.word	-1,.L73,.L262-.L73,.L263-.L73
	.half	1
	.byte	95
	.word	.L31-.L73,.L30-.L73
	.half	1
	.byte	95
	.word	0,0
.L187:
	.word	-1,.L73,.L254-.L73,.L255-.L73
	.half	5
	.byte	144,32,157,32,0
	.word	.L28-.L73,.L261-.L73
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L185:
	.word	-1,.L73,0,.L181-.L73
	.half	2
	.byte	145,120
	.word	0,0
.L72:
	.word	-1,.L73,0,.L250-.L73
	.half	2
	.byte	138,0
	.word	.L250-.L73,.L181-.L73
	.half	2
	.byte	138,8
	.word	.L181-.L73,.L181-.L73
	.half	2
	.byte	138,0
	.word	0,0
.L183:
	.word	-1,.L73,0,.L251-.L73
	.half	1
	.byte	84
	.word	.L28-.L73,.L30-.L73
	.half	1
	.byte	84
	.word	0,0
.L184:
	.word	-1,.L73,0,.L251-.L73
	.half	1
	.byte	85
	.word	.L252-.L73,.L181-.L73
	.half	1
	.byte	88
	.word	.L257-.L73,.L258-.L73
	.half	1
	.byte	84
	.word	.L28-.L73,.L30-.L73
	.half	1
	.byte	85
	.word	0,0
.L188:
	.word	-1,.L73,.L258-.L73,.L259-.L73
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_loc'
.L204:
	.word	-1,.L71,0,.L243-.L71
	.half	1
	.byte	100
	.word	.L245-.L71,.L203-.L71
	.half	1
	.byte	108
	.word	.L248-.L71,.L249-.L71
	.half	1
	.byte	100
	.word	0,0
.L206:
	.word	-1,.L71,.L246-.L71,.L247-.L71
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L207:
	.word	-1,.L71,0,.L203-.L71
	.half	2
	.byte	145,120
	.word	0,0
.L70:
	.word	-1,.L71,0,.L242-.L71
	.half	2
	.byte	138,0
	.word	.L242-.L71,.L203-.L71
	.half	2
	.byte	138,8
	.word	.L203-.L71,.L203-.L71
	.half	2
	.byte	138,0
	.word	0,0
.L205:
	.word	-1,.L71,0,.L244-.L71
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L61,0,.L228-.L61
	.half	1
	.byte	84
	.word	0,0
.L60:
	.word	-1,.L61,0,.L149-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L152:
	.word	-1,.L61,0,.L229-.L61
	.half	1
	.byte	85
	.word	.L228-.L61,.L229-.L61
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendEv')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L67,0,.L153-.L67
	.half	2
	.byte	145,120
	.word	0,0
.L155:
	.word	-1,.L67,0,.L234-.L67
	.half	1
	.byte	100
	.word	.L236-.L67,.L153-.L67
	.half	1
	.byte	111
	.word	0,0
.L66:
	.word	-1,.L67,0,.L233-.L67
	.half	2
	.byte	138,0
	.word	.L233-.L67,.L153-.L67
	.half	2
	.byte	138,8
	.word	.L153-.L67,.L153-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L168:
	.word	-1,.L67,.L237-.L67,.L235-.L67
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L165:
	.word	0,0
.L156:
	.word	-1,.L67,0,.L235-.L67
	.half	1
	.byte	84
	.word	0,0
.L161:
	.word	0,0
.L163:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_loc'
.L202:
	.word	-1,.L65,0,.L200-.L65
	.half	2
	.byte	145,120
	.word	0,0
.L64:
	.word	-1,.L65,0,.L231-.L65
	.half	2
	.byte	138,0
	.word	.L231-.L65,.L200-.L65
	.half	2
	.byte	138,8
	.word	.L200-.L65,.L200-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	-1,.L65,0,.L232-.L65
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_loc'
.L175:
	.word	-1,.L69,.L241-.L69,.L169-.L69
	.half	1
	.byte	111
	.word	0,0
.L170:
	.word	-1,.L69,0,.L239-.L69
	.half	1
	.byte	84
	.word	0,0
.L173:
	.word	-1,.L69,0,.L169-.L69
	.half	2
	.byte	145,112
	.word	0,0
.L68:
	.word	-1,.L69,0,.L238-.L69
	.half	2
	.byte	138,0
	.word	.L238-.L69,.L169-.L69
	.half	2
	.byte	138,16
	.word	.L169-.L69,.L169-.L69
	.half	2
	.byte	138,0
	.word	0,0
.L171:
	.word	-1,.L69,0,.L240-.L69
	.half	1
	.byte	85
	.word	.L239-.L69,.L240-.L69
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L147-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L148:
	.word	-1,.L63,0,.L230-.L63
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendRes')
	.sect	'.debug_loc'
.L146:
	.word	-1,.L59,0,.L142-.L59
	.half	2
	.byte	145,120
	.word	0,0
.L58:
	.word	-1,.L59,0,.L226-.L59
	.half	2
	.byte	138,0
	.word	.L226-.L59,.L142-.L59
	.half	2
	.byte	138,8
	.word	.L142-.L59,.L142-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L144:
	.word	-1,.L59,0,.L227-.L59
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_loc'
.L199:
	.word	-1,.L57,0,.L197-.L57
	.half	2
	.byte	145,120
	.word	0,0
.L56:
	.word	-1,.L57,0,.L224-.L57
	.half	2
	.byte	138,0
	.word	.L224-.L57,.L197-.L57
	.half	2
	.byte	138,8
	.word	.L197-.L57,.L197-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L198:
	.word	-1,.L57,0,.L225-.L57
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_Transmit')
	.sect	'.debug_loc'
.L195:
	.word	-1,.L55,.L223-.L55,.L4-.L55
	.half	1
	.byte	82
	.word	0,0
.L192:
	.word	-1,.L55,0,.L218-.L55
	.half	1
	.byte	100
	.word	.L3-.L55,.L223-.L55
	.half	1
	.byte	100
	.word	0,0
.L194:
	.word	-1,.L55,0,.L219-.L55
	.half	1
	.byte	85
	.word	.L3-.L55,.L223-.L55
	.half	1
	.byte	85
	.word	0,0
.L54:
	.word	-1,.L55,0,.L190-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L193:
	.word	-1,.L55,0,.L2-.L55
	.half	1
	.byte	84
	.word	.L220-.L55,.L221-.L55
	.half	1
	.byte	88
	.word	0,0
.L196:
	.word	-1,.L55,.L2-.L55,.L222-.L55
	.half	1
	.byte	84
	.word	.L3-.L55,.L223-.L55
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_loc'
.L180:
	.word	-1,.L77,0,.L176-.L77
	.half	2
	.byte	145,120
	.word	0,0
.L177:
	.word	-1,.L77,0,.L270-.L77
	.half	1
	.byte	84
	.word	.L45-.L77,.L273-.L77
	.half	1
	.byte	84
	.word	.L47-.L77,.L275-.L77
	.half	1
	.byte	84
	.word	0,0
.L76:
	.word	-1,.L77,0,.L269-.L77
	.half	2
	.byte	138,0
	.word	.L269-.L77,.L176-.L77
	.half	2
	.byte	138,8
	.word	.L176-.L77,.L176-.L77
	.half	2
	.byte	138,0
	.word	0,0
.L178:
	.word	-1,.L77,.L271-.L77,.L176-.L77
	.half	1
	.byte	88
	.word	.L270-.L77,.L272-.L77
	.half	1
	.byte	84
	.word	.L273-.L77,.L274-.L77
	.half	1
	.byte	84
	.word	.L275-.L77,.L276-.L77
	.half	1
	.byte	84
	.word	.L277-.L77,.L278-.L77
	.half	1
	.byte	84
	.word	.L279-.L77,.L280-.L77
	.half	1
	.byte	84
	.word	.L281-.L77,.L282-.L77
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L495:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Xcp_Transmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L495,.L55,.L190-.L55
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendResTxConf')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L57,.L197-.L57
	.byte	4
	.word	(.L224-.L57)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L197-.L224)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendRes')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L59,.L142-.L59
	.byte	4
	.word	(.L226-.L59)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L142-.L226)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendErrRes')
	.sect	'.debug_frame'
	.word	12
	.word	.L495,.L61,.L149-.L61
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendPosRes')
	.sect	'.debug_frame'
	.word	12
	.word	.L495,.L63,.L147-.L63
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendEvTxConf')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L65,.L200-.L65
	.byte	4
	.word	(.L231-.L65)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L200-.L231)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendEv')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L67,.L153-.L67
	.byte	4
	.word	(.L233-.L67)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L153-.L233)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendEv_Code')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L69,.L169-.L69
	.byte	4
	.word	(.L238-.L69)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L169-.L238)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendDaqTxConf')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L71,.L203-.L71
	.byte	4
	.word	(.L242-.L71)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L203-.L242)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_SendDaq')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L73,.L181-.L73
	.byte	4
	.word	(.L250-.L73)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L181-.L250)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqQueFindNextOdtToSend')
	.sect	'.debug_frame'
	.word	20
	.word	.L495,.L75,.L208-.L75
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_TxConfirmation')
	.sect	'.debug_frame'
	.word	36
	.word	.L495,.L77,.L176-.L77
	.byte	4
	.word	(.L269-.L77)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L176-.L269)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   769  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   770  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   771  #define XCP_STOP_SEC_CODE_FAST
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   772  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   773  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Transmit.c	   774  

	; Module end
