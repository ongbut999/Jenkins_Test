	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17912a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_UtilsStartStop.src BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStart',code,cluster('Xcp_DaqListStart')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStart'
	.align	2
	
	.global	Xcp_DaqListStart

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     1  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     2  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     3  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     4  * Includes
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     5  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     6  #include "Xcp.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     7  #include "Xcp_Priv.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     8  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	     9  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    10  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    11  * Variables
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    12  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    13  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    14  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    15  #if (XCP_OM_ODT_OPTIMIZATION_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    16  /** Map: OdtOptimizationType to CopyRoutine */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    17  static const uint8 Map_OdtOptimizationType_to_CopyRoutine[] = {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    18      XCP_ODT_COPY_SAFE,  /* XCP_ODT_OPTIMIZATION_OM_DEFAULT            */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    19      XCP_ODT_COPY_16,    /* XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16        */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    20      XCP_ODT_COPY_32,    /* XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32        */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    21      XCP_ODT_COPY_32,    /* XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64        - not supported */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    22      XCP_ODT_COPY_SAFE,  /* XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT - not supported */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    23      XCP_ODT_COPY_SAFE,  /* XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE     - not supported */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    24  };
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    25  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    26  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    27  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    28  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    29  * Local function declarations
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    30  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    31  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    32  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    33  static Xcp_ErrorCode Xcp_DaqListStopDaqList(uint16 daqListNo, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    34  static Std_ReturnType Xcp_DaqSetOdtLength(uint16 daqListNo_u16, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    35  #if (XCP_OM_ODT_OPTIMIZATION_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    36  static uint8 Xcp_DaqCalcCopyRoutine(uint64 value);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    37  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    38  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    39  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    40  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    41  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    42  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    43  * Functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    44  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    45  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    46  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    47  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    48  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    49  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    50  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    51  Function prepares the start of DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    52  \param[in]  daqListNo     DAQ to start
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    53  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    54  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    55  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    56  void Xcp_DaqListStart(uint16 daqListNo, uint8 protLayerId)
; Function Xcp_DaqListStart
.L79:
Xcp_DaqListStart:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    57  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    58    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    59    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    60  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    61    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    62    Xcp_DaqList_t*  DaqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    63  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    64    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    65    DaqListPtr = &XCP_DAQ(daqListNo, protLayerId);
	mul	d15,d4,#24
	mul	d0,d5,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d0,#0
	ld.a	a15,[a15]24
	addsc.a	a15,a15,d15,#0
.L239:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    66  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    67    /* allowed to change write pointer without spinlock because DaqList is not started -> EventChannel processing of this DAQ is disabled */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    68    Xcp_InitDaqQueue(daqListNo, protLayerId);
	call	Xcp_InitDaqQueue
.L238:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    69  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    70  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    71  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    72    if ((DaqListPtr->Mode_u8 & XCP_DAQLISTMODE_DIRECTION_STIM) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    73    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    74      /* enter lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    75      SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    76      /* set status flag for STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    77      DaqListPtr->BufferInfo.Status_u8 |= XCP_STATUSBIT_STIM_STARTED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    78      /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    79      SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    80    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    81    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    82    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    83      /* set status flag for DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    84      DaqListPtr->BufferInfo.Status_u8 |= XCP_STATUSBIT_DAQ_STARTED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    85    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    86  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    87  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    88    /* Start DaqList without delay */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    89    DaqListPtr->CycleCnt_u8 = DaqListPtr->Prescaler_u8;
	ld.bu	d15,[a15]18
.L321:
	st.b	[a15]19,d15
.L322:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    90  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    91    /* Set DaqList running flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    92    DaqListPtr->Mode_u8 |= XCP_DAQLISTMODE_RUNNING;
	ld.bu	d15,[a15]22
.L323:
	or	d15,#64
	st.b	[a15]22,d15
.L324:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    93  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    94    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    95    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    96  }
	ret
.L166:
	
__Xcp_DaqListStart_function_end:
	.size	Xcp_DaqListStart,__Xcp_DaqListStart_function_end-Xcp_DaqListStart
.L110:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStartSelected',code,cluster('Xcp_DaqListStartSelected')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStartSelected'
	.align	2
	
	.global	Xcp_DaqListStartSelected

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    97  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    98  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	    99  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   100  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   101  Function prepares the start of selected DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   102  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   103  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   104  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   105  void Xcp_DaqListStartSelected(uint8 protLayerId)
; Function Xcp_DaqListStartSelected
.L81:
Xcp_DaqListStartSelected:	.type	func
	mov	d9,d4
.L240:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   106  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   107    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   108    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   109  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   110    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   111    uint16  daqListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   112    boolean DaqListStarted;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   113  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   114    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   115    DaqListStarted = FALSE;
	mov	d0,#0
.L241:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   116  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   117    /* Loop all DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   118    for (daqListNo = 0; daqListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; daqListNo++)
	mov	d8,#0
.L243:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   119    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   120      /* Process all selected DaqLists */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   121      if ( (XCP_DAQ_MODE(daqListNo, protLayerId) & (XCP_DAQLISTMODE_SELECTED)) == XCP_DAQLISTMODE_SELECTED)
	mul	d15,d9,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a12,a15,d15,#0
.L329:
	j	.L2
.L3:
	mul	d15,d8,#24
	lea	a13,[a12]24
	ld.a	a15,[a13]
	addsc.a	a15,a15,d15,#0
	ld.bu	d1,[a15]22
.L330:
	jz.t	d1:0,.L4
.L331:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   122      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   123        /* If the DaqList is not running, start it */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   124        if ( (XCP_DAQ_MODE(daqListNo, protLayerId) & (XCP_DAQLISTMODE_RUNNING)) == 0u)
	ld.a	a15,[a13]
	addsc.a	a15,a15,d15,#0
	ld.bu	d1,[a15]22
.L332:
	jnz.t	d1:6,.L5
.L333:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   125        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   126          Xcp_DaqListStart(daqListNo, protLayerId);
	mov	e4,d9,d8
	call	Xcp_DaqListStart
.L242:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   127          DaqListStarted = TRUE;
	mov	d0,#1
.L5:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   128        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   129  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   130        /* Reset selected flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   131        XCP_DAQ_MODE(daqListNo, protLayerId) &= (uint8)(~XCP_DAQLISTMODE_SELECTED);
	ld.a	a15,[a13]
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]22
	ld.bu	d15,[a15]
.L334:
	and	d15,#254
	st.b	[a15],d15
.L4:
	add	d8,#1
.L244:
	extr.u	d8,d8,#0,#16
.L2:
	ld.hu	d15,[a12]48
.L335:
	jlt.u	d8,d15,.L3
.L336:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   132      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   133    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   134  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   135    if (DaqListStarted == TRUE)
	jne	d0,#1,.L6
.L337:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   136    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   137      /* Recalculate PriorityList to add started DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   138      Xcp_DaqCalculatePriorityList(protLayerId);
	mov	d4,d9
.L246:
	call	Xcp_DaqCalculatePriorityList
.L245:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   139      /* Set DAQ-state to running */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   140      Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_RUNNING;
	mov	d15,#10
.L338:
	st.w	[a12]76,d15
.L6:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   141    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   142  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   143    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   144    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   145  }
	ret
.L173:
	
__Xcp_DaqListStartSelected_function_end:
	.size	Xcp_DaqListStartSelected,__Xcp_DaqListStartSelected_function_end-Xcp_DaqListStartSelected
.L115:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStop',code,cluster('Xcp_DaqListStop')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStop'
	.align	2
	
	.global	Xcp_DaqListStop

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   146  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   147  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   148  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   149  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   150  This function stops the DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   151  \param[in]  daqListNo     requested DaqList number
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   152  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   153  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   154  \retval     XCP_NO_ERROR:       no problem occurred
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   155  \retval     XCP_REPEAT_COMMAND: stopped DAQ which is currently processed (e.g. sampling)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   156  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   157  Xcp_ErrorCode Xcp_DaqListStop(uint16 daqListNo, uint8 protLayerId)
; Function Xcp_DaqListStop
.L83:
Xcp_DaqListStop:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   158  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   159    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   160    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   161  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   162    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   163    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   164  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   165    SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   166  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   167  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   168    Error = Xcp_DaqListStopDaqList(daqListNo, protLayerId);
	call	Xcp_DaqListStopDaqList
.L247:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   169  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   170  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   171    SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   172  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   173  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   174    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   175    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   176  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   177    return Error;
	j	.L7

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   178  }
.L7:
	ret
.L197:
	
__Xcp_DaqListStop_function_end:
	.size	Xcp_DaqListStop,__Xcp_DaqListStop_function_end-Xcp_DaqListStop
.L135:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopSelected',code,cluster('Xcp_DaqListStopSelected')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopSelected'
	.align	2
	
	.global	Xcp_DaqListStopSelected

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   179  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   180  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   181  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   182  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   183  This function stops selected DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   184  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   185  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   186  \retval     XCP_REPEAT_COMMAND      Eventchannel is currently running, delay processing
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   187  \retval     XCP_NO_ERROR            no problem occurred
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   188  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   189  Xcp_ErrorCode Xcp_DaqListStopSelected(uint8 protLayerId)
; Function Xcp_DaqListStopSelected
.L85:
Xcp_DaqListStopSelected:	.type	func
	mov	d8,d4
.L248:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   190  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   191    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   192    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   193  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   194    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   195    uint16 daqListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   196    boolean DaqListStopped;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   197    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   198  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   199    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   200    DaqListStopped = FALSE;
	mov	d9,#0
.L249:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   201    Error = XCP_NO_ERROR;
	mov	d10,#255
.L250:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   202  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   203  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   204    /* enter lock to change buffers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   205    SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   206  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   207  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   208    /* Loop all DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   209    for (daqListNo = 0; daqListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; daqListNo++)
	mov	d11,#0
.L251:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   210    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   211      /* Stop selected DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   212      if ( (XCP_DAQ_MODE(daqListNo, protLayerId) & XCP_DAQLISTMODE_SELECTED) == XCP_DAQLISTMODE_SELECTED )
	mul	d15,d8,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
.L404:
	j	.L8
.L9:
	mul	d15,d11,#24
	ld.a	a2,[a15]24
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]22
.L405:
	jz.t	d15:0,.L10
.L406:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   213      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   214        DaqListStopped = TRUE;
	mov	d9,#1
.L407:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   215  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   216        if (Xcp_DaqListStopDaqList(daqListNo, protLayerId) == XCP_REPEAT_COMMAND)
	mov	e4,d8,d11
	call	Xcp_DaqListStopDaqList
.L408:
	mov	d15,#252
.L409:
	eq	d15,d2,d15
.L410:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   217        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   218          Error = XCP_REPEAT_COMMAND;
	seln	d10,d15,d10,#252
.L11:
.L10:
	add	d11,#1
.L252:
	extr.u	d11,d11,#0,#16
.L8:
	ld.hu	d15,[a15]48
.L411:
	jlt.u	d11,d15,.L9
.L412:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   219        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   220      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   221    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   222  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   223  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   224    /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   225    SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   226  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   227  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   228    if (DaqListStopped == TRUE)
	jne	d9,#1,.L12
.L413:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   229    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   230      /* Recalculate PriorityList to remove stopped DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   231      Xcp_DaqCalculatePriorityList(protLayerId);
	mov	d4,d8
.L253:
	call	Xcp_DaqCalculatePriorityList
.L254:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   232      /* Process DAQ running flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   233      Xcp_DaqProcessDaqState(protLayerId);
	mov	d4,d8
.L255:
	call	Xcp_DaqProcessDaqState
.L12:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   234    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   235  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   236    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   237    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   238  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   239    return Error;
	mov	d2,d10
.L256:
	j	.L13

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   240  }
.L13:
	ret
.L201:
	
__Xcp_DaqListStopSelected_function_end:
	.size	Xcp_DaqListStopSelected,__Xcp_DaqListStopSelected_function_end-Xcp_DaqListStopSelected
.L140:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopAll',code,cluster('Xcp_DaqListStopAll')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopAll'
	.align	2
	
	.global	Xcp_DaqListStopAll

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   241  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   242  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   243  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   244  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   245  This function stops all DaqList.
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   246  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   247  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   248  \retval     XCP_NO_ERROR:       no problem in stopping DAQs has occurred
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   249  \retval     XCP_REPEAT_COMMAND: one or more DAQs are being processed (e.g. sampling), cannot stop immediately
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   250  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   251  Xcp_ErrorCode Xcp_DaqListStopAll(uint8 protLayerId)
; Function Xcp_DaqListStopAll
.L87:
Xcp_DaqListStopAll:	.type	func
	mov	d8,d4
.L257:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   252  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   253    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   254    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   255  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   256    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   257    uint16 daqListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   258    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   259  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   260    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   261    Error = XCP_NO_ERROR;
	mov	d9,#255
.L258:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   262  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   263  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   264  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   265    /* enter lock to change buffers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   266    SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   267  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   268  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   269    /* Loop all DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   270    for (daqListNo = 0; daqListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; daqListNo++)
	mov	d10,#0
.L259:
	j	.L14
.L15:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   271    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   272      /* check whether DAQ is marked running by Eventchannel */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   273      if (Xcp_DaqListStopDaqList(daqListNo, protLayerId) == XCP_REPEAT_COMMAND)
	mov	e4,d8,d10
	call	Xcp_DaqListStopDaqList
.L388:
	mov	d15,#252
.L389:
	eq	d15,d2,d15
.L390:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   274      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   275        Error = XCP_REPEAT_COMMAND;
	seln	d9,d15,d9,#252
.L16:
	add	d10,#1
.L260:
	extr.u	d10,d10,#0,#16
.L14:
	mul	d15,d8,#80
.L391:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L392:
	addsc.a	a15,a15,d15,#0
.L393:
	ld.hu	d15,[a15]48
.L394:
	jlt.u	d10,d15,.L15
.L395:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   276      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   277    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   278  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   279  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   280    /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   281    SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   282  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   283  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   284    /* set DaqState */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   285    Xcp_DaqProcessDaqState(protLayerId);
	mov	d4,d8
.L261:
	call	Xcp_DaqProcessDaqState
.L262:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   286  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   287    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   288    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   289  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   290    return Error;
	mov	d2,d9
.L263:
	j	.L17

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   291  }
.L17:
	ret
.L193:
	
__Xcp_DaqListStopAll_function_end:
	.size	Xcp_DaqListStopAll,__Xcp_DaqListStopAll_function_end-Xcp_DaqListStopAll
.L130:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqProcessDaqState',code,cluster('Xcp_DaqProcessDaqState')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqProcessDaqState'
	.align	2
	
	.global	Xcp_DaqProcessDaqState

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   292  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   293  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   294  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   295  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   296  This function sets the PL-DaqList-State (global) according to the state of the DaqLists of the PL
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   297  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   298  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   299  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   300  void Xcp_DaqProcessDaqState(uint8 protLayerId)
; Function Xcp_DaqProcessDaqState
.L89:
Xcp_DaqProcessDaqState:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   301  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   302    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   303    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   304  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   305    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   306    uint16_least  DaqListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   307    boolean DaqModeRunning;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   308    boolean DaqProcessing;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   309  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   310    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   311    DaqModeRunning  = FALSE;
	mov	d0,#0
.L264:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   312    DaqProcessing = FALSE;
	mov	d1,#0
.L266:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   313  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   314    /* Loop through all DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   315     * For each DaqList check
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   316     * - is running, but should not run MODE is not RUNNING (= was stopped but already active and has not finished until now)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   317     * - Mode is RUNNING
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   318     */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   319    for (DaqListNo = 0; DaqListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; DaqListNo++)
	mov	d2,#0
.L267:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   320    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   321      if ( (XCP_DAQ_MODE(DaqListNo, protLayerId) & XCP_DAQLISTMODE_RUNNING) == XCP_DAQLISTMODE_RUNNING )
	mul	d15,d4,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
.L343:
	j	.L18
.L19:
	mul	d15,d2,#24
	ld.a	a2,[a15]24
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]22
.L344:
	jz.t	d15:6,.L20
.L345:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   322      { /* A running DaqList was found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   323        DaqModeRunning = TRUE;
	mov	d0,#1
.L346:
	j	.L21
.L20:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   324      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   325      else if (XCP_DAQ(DaqListNo, protLayerId).CurrentlyRunning_b == TRUE)
	mul	d15,d2,#24
	ld.a	a2,[a15]24
	addsc.a	a2,a2,d15,#0
.L347:
	ld.bu	d15,[a2]23
.L348:
	jne	d15,#1,.L22
.L349:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   326      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   327        /* DAQ_MODE not running, but processing is still active. "Daq should not run, but is still running" */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   328        DaqProcessing = TRUE;
	mov	d1,#1
.L350:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   329  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   330        /* We can exit the loop now as the state will be XCP_DAQ_STATE_STOP_REQUESTED */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   331        break;
	j	.L23
.L22:
.L21:
	add	d2,#1
.L18:
	ld.hu	d15,[a15]48
.L351:
	jlt.u	d2,d15,.L19

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   332      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   333      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   334      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   335        /* nothing */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   336      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   337    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   338  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   339    /* Now process the set internal flags and set the global state accordingly */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   340    if (DaqProcessing == TRUE)
.L23:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   341    { /* running flag not set, but processing still active */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   342      Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_STOP_REQUESTED;
	lea	a15,[a15]76
.L352:
	jne	d1,#1,.L24
.L353:
	mov	d15,#8
.L354:
	st.w	[a15],d15
.L355:
	j	.L25
.L24:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   343    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   344    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   345    { /* Now check the running flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   346  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   347      if (DaqModeRunning == TRUE)
	jne	d0,#1,.L26
.L356:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   348      { /* At least on DaqList is running -> Global State is also running */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   349        Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_RUNNING;
	mov	d15,#10
.L357:
	st.w	[a15],d15
.L358:
	j	.L27
.L26:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   350      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   351      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   352      { /* No DaqList is running: Check if the global state is at least XCP_DAQ_STATE_STOP_REQUESTED and only update if true
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   353         * - the function shall only be called by the Start/Stop-functions, but not in the config phase,
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   354         *   so do not change anything if we are still configuring - someone did something wrong!
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   355         */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   356        if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en >= XCP_DAQ_STATE_STOP_REQUESTED)
	ld.w	d0,[a15]
.L265:
	mov	d15,#8
.L359:
	jlt	d0,d15,.L28
.L360:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   357        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   358          Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_READY_TO_RUN;
	mov	d15,#9
.L361:
	st.w	[a15],d15
.L28:
.L27:
.L25:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   359        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   360      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   361    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   362  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   363    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   364    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   365  }
	ret
.L177:
	
__Xcp_DaqProcessDaqState_function_end:
	.size	Xcp_DaqProcessDaqState,__Xcp_DaqProcessDaqState_function_end-Xcp_DaqProcessDaqState
.L120:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqCalculatePriorityList',code,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqCalculatePriorityList'
	.align	2
	
	.global	Xcp_DaqCalculatePriorityList

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   366  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   367  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   368  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   369  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   370  This function calculates the priority list.
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   371  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   372  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   373  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   374  void Xcp_DaqCalculatePriorityList(uint8 protLayerId)
; Function Xcp_DaqCalculatePriorityList
.L91:
Xcp_DaqCalculatePriorityList:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   375  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   376    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   377    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   378  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   379    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   380    uint16* PriorityList;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   381    uint16  daqListNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   382    uint16  DaqListSendingCnt;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   383    uint16_least  i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   384    uint16_least  j;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   385    uint16  daqListNoTemp;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   386  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   387  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   388    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   389    PriorityList = Xcp_NoInit[protLayerId].DaqConfig.PriorityList_p;
	mul	d15,d4,#80
.L366:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L367:
	addsc.a	a15,a15,d15,#0
.L368:
	ld.a	a6,[a15]40
.L268:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   390    DaqListSendingCnt = 0;
	mov	d3,#0
.L269:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   391  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   392    /* Spin lock around reorganizing PriorityList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   393    SchM_Enter_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   394    SchM_Enter_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   395  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   396    /* Loop all DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   397    for (daqListNo = 0; daqListNo < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16; daqListNo++)
	mov	d0,#0
.L270:
	j	.L29
.L30:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   398    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   399      /* only running DaqList with direction DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   400      if ((XCP_DAQ_MODE(daqListNo, protLayerId) & (XCP_DAQLISTMODE_RUNNING|XCP_DAQLISTMODE_DIRECTION_STIM)) == XCP_DAQLISTMODE_RUNNING)
	mul	d15,d0,#24
	ld.a	a2,[a15]24
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]22
.L369:
	and	d1,d15,#66
.L370:
	mov	d15,#64
.L371:
	jne	d15,d1,.L31
.L372:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   401      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   402        PriorityList[DaqListSendingCnt] = daqListNo;
	addsc.a	a2,a6,d3,#1
.L373:
	st.h	[a2],d0
.L374:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   403        DaqListSendingCnt++;
	add	d15,d3,#1
	extr.u	d3,d15,#0,#16
.L31:
	add	d0,#1
.L271:
	extr.u	d0,d0,#0,#16
.L29:
	ld.hu	d1,[a15]48
.L375:
	jlt.u	d0,d1,.L30
.L376:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   404      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   405    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   406  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   407    /* save number of sending DaqList globally */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   408    Xcp_NoInit[protLayerId].DaqConfig.DaqListSendingCnt_u16 = DaqListSendingCnt;
	st.h	[a15]72,d3
.L377:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   409  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   410    /* Insertion sort: Sorting by DaqList Priority (high value first)*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   411    for (i = 1u; i < DaqListSendingCnt; i++)
	mov	d0,#1
.L272:
	j	.L32
.L33:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   412    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   413      j = i;
	mov	d15,d0
.L273:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   414      while ( (j > 0u) && (XCP_DAQ_PRIO(PriorityList[j-1u], protLayerId) < XCP_DAQ_PRIO(PriorityList[j], protLayerId)) )
	j	.L34
.L35:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   415      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   416        XCP_SWAP(PriorityList[j-1u], PriorityList[j], daqListNoTemp);
	addsc.a	a2,a2,d15,#1
	addsc.a	a4,a6,d15,#1
.L36:
	ld.hu	d1,[a2]0
.L274:
	ld.hu	d2,[a4]0
	st.h	[a2],d2
	st.h	[a4],d1
.L378:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   417        j--;
	add	d15,#-1
.L34:
	jeq	d15,#0,.L37
.L379:
	ld.a	a4,[a15]24
.L380:
	mov.aa	a2,a6
	add.a	a2,#-2
	addsc.a	a5,a6,d15,#1
	ld.hu	d1,[a5]-2
	mul	d1,d1,#24
	addsc.a	a5,a4,d1,#0
	ld.bu	d1,[a5]20
.L381:
	addsc.a	a5,a6,d15,#1
	ld.hu	d2,[a5]0
	mul	d2,d2,#24
	addsc.a	a4,a4,d2,#0
	ld.bu	d2,[a4]20
.L382:
	jlt.u	d1,d2,.L35
.L37:
	add	d0,#1
.L32:
	jlt.u	d0,d3,.L33
.L383:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   418      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   419    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   420  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   421    /* Spin lock around reorganizing PriorityList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   422    SchM_Exit_Xcp_SendingLong();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   423    SchM_Exit_Xcp_SendingShort();
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   424  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   425    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   426    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   427  }
	ret
.L183:
	
__Xcp_DaqCalculatePriorityList_function_end:
	.size	Xcp_DaqCalculatePriorityList,__Xcp_DaqCalculatePriorityList_function_end-Xcp_DaqCalculatePriorityList
.L125:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqTriggerStateStartStop',code,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqTriggerStateStartStop'
	.align	2
	
	.global	Xcp_DaqTriggerStateStartStop

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   428  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   429  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   430  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   431  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   432  This function sets the global DaqState for the given PL and, if needed, finalizes the config of the DaqLists
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   433  \param[in]  XcpPacket     Xcp Packet Pointer to command
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   434  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   435  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   436  \retval     XCP_NO_ERROR           ok to start
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   437  \retval     XCP_NO_RESPONSE        DaqRam shifting in progress, don't send response
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   438  \retval     XCP_ERR_ACCESS_DENIED  requested address is protected
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   439  \retval     XCP_ERR_DAQ_CONFIG     DaqList is not correctly configured
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   440  \retval     XCP_ERR_SEQUENCE       SetDaqListMode has not been sent
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   441  \retval     XCP_REPEAT_COMMAND     Daq is currently being processed, cannot stop immediately
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   442  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   443  /* HIS METRIC LEVEL VIOLATION IN Xcp_DaqTriggerStateStartStop: Function contains very simple "else if" statements. HIS metric compliance would decrease readability and maintainability. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   444  Xcp_ErrorCode Xcp_DaqTriggerStateStartStop(const PduInfoType* XcpPacket, uint8 protLayerId)
; Function Xcp_DaqTriggerStateStartStop
.L93:
Xcp_DaqTriggerStateStartStop:	.type	func
	mov	d9,d4
.L275:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   445  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   446    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   447    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   448  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   449    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   450    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   451  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   452    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   453    Error = XCP_NO_ERROR;
	mov	d10,#255
.L276:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   454  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   455    /* Check for state XCP_DAQ_STATE_PREPARE_START */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   456    if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_PREPARE_START)
	mul	d15,d9,#80
.L418:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L419:
	addsc.a	a15,a15,d15,#0
.L420:
	lea	a12,[a15]76
.L421:
	ld.w	d0,[a12]
.L422:
	jne	d0,#6,.L38
.L211:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   457    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   458      uint16 DaqList = 0;
	mov	d8,#0
.L278:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   459  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   460      /* check, if all DaqList are completed */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   461      while ( (Error == XCP_NO_ERROR) && (DaqList < Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16) )
	j	.L39
.L40:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   462      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   463        Error = Xcp_DaqListFinalize(DaqList, protLayerId);
	mov	e4,d9,d8
	call	Xcp_DaqListFinalize
.L277:
	mov	d10,d2
.L280:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   464        DaqList++;
	add	d8,#1
.L279:
	extr.u	d8,d8,#0,#16
.L39:
	mov	d15,#255
.L423:
	jne	d15,d10,.L41
.L424:
	ld.hu	d0,[a15]48
.L425:
	jlt.u	d8,d0,.L40
.L41:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   465      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   466      if (Error == XCP_NO_ERROR)
	mov	d15,#255
.L426:
	jne	d15,d10,.L42
.L427:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   467      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   468  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   469        if (Xcp_DaqRamTriggerMovePL(XcpPacket, protLayerId) == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   470        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   471          /* protocol layer now busy moving */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   472          Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_SHIFTING;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   473          Error = XCP_NO_RESPONSE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   474        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   475        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   476  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   477        XCP_PARAM_UNUSED(XcpPacket);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   478  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   479        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   480          /* set queue pointers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   481          (void) Xcp_DaqQueRamCalc(0, TRUE, protLayerId);
	mov	d4,#0
.L428:
	mov	d5,#1
.L429:
	mov	d6,d9
.L281:
	call	Xcp_DaqQueRamCalc
.L282:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   482          /* Set final DaqState to start DAQ and STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   483          Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_READY_TO_RUN;
	mov	d15,#9
.L430:
	st.w	[a12],d15
.L42:
	j	.L43
.L38:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   484        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   485      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   486    } /* Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_PREPARE_START */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   487  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   488    /* Check for state XCP_DAQ_STATE_SHIFTING */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   489    else if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_SHIFTING)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   490    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   491      /* shifting is active, no further commands possible */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   492      Error = XCP_ERR_CMD_BUSY;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   493    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   494  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   495    /* Check for not allowed states */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   496    else if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en < XCP_DAQ_STATE_STOP_REQUESTED)
	mov	d15,#8
.L431:
	jge	d0,d15,.L44
.L432:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   497    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   498      Error = XCP_ERR_SEQUENCE;
	mov	d10,#41
.L433:
	j	.L45
.L44:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   499    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   500    /* Check if stop is requested */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   501    else if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_STOP_REQUESTED)
	mov	d15,#8
.L434:
	jne	d15,d0,.L46
.L435:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   502    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   503      /* recheck stop condition */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   504      Xcp_DaqProcessDaqState(protLayerId);
	mov	d4,d9
	call	Xcp_DaqProcessDaqState
.L283:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   505  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   506      if (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_STOP_REQUESTED)
	ld.w	d0,[a12]
.L436:
	mov	d15,#8
.L437:
	eq	d15,d0,d15
.L438:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   507      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   508        Error = XCP_REPEAT_COMMAND;
	seln	d10,d15,d10,#252
.L47:
	j	.L48
.L46:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   509      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   510    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   511    /* State is READY_TO_RUN or RUNNING */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   512    else
.L48:
.L45:
.L43:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   513    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   514      /* Error = XCP_NO_ERROR; already set before */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   515    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   516  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   517    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   518    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   519    return Error;
	mov	d2,d10
.L284:
	j	.L49

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   520  }
.L49:
	ret
.L206:
	
__Xcp_DaqTriggerStateStartStop_function_end:
	.size	Xcp_DaqTriggerStateStartStop,__Xcp_DaqTriggerStateStartStop_function_end-Xcp_DaqTriggerStateStartStop
.L145:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqTransformAndCheckOdtEntry',code,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqTransformAndCheckOdtEntry'
	.align	2
	
	.global	Xcp_DaqTransformAndCheckOdtEntry

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   521  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   522  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   523  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   524  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   525  This function performs various checks for a given address (access protection, OdtEntry NULL/Size)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   526  and calculates needed values for the containing DaqList (e. g. AddressTransformation, OdtOptimization).
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   527  \param[inout] XcpAddrPtr      Pointer to the Address that has to be processed
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   528  \param[in]    Size            Size of the data Address points to
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   529  \param[in]    daqListNo_u16   DaqList number
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   530  \param[in]    protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   531  \return     Xcp_ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   532  \retval     XCP_NO_ERROR            all checks passed successfully
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   533  \retval     XCP_ERR_ACCESS_DENIED   requested address is protected
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   534  \retval     XCP_ERR_DAQ_CONFIG      DaqList is not correctly configured
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   535  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   536  /* MR12 RULE 8.13 VIOLATION: The pointer XcpAddrPtr may be changed if XCP_STATIC_ADDRESS_TRANSFORMATION is enabled - therefore it cannot be const. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   537  Xcp_ErrorCode Xcp_DaqTransformAndCheckOdtEntry(Xcp_AddrType_t* XcpAddrPtr, uint8 Size, uint16 daqListNo_u16, uint8 protLayerId)
; Function Xcp_DaqTransformAndCheckOdtEntry
.L95:
Xcp_DaqTransformAndCheckOdtEntry:	.type	func
	mov	d0,d4
.L288:
	mov	e8,d6,d5
.L443:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   538  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   539    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   540    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   541  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   542    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   543    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   544  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   545    /* Initialize variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   546    Error = XCP_NO_ERROR;
	mov	d10,#255
.L289:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   547  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   548  #if (XCP_STATIC_ADDRESS_TRANSFORMATION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   549    /* Do the Address Transformation */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   550    Error = XcpAppl_StaticAddressTransformation(XcpAddrPtr,
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   551                                                Size,
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   552                                                XCP_DAQ(daqListNo_u16, protLayerId).EventChannelNum_u16,
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   553                                                ((XCP_DAQ_MODE(daqListNo_u16, protLayerId) & XCP_DAQLISTMODE_DIRECTION_STIM) == 0u) ? XCP_CONTEXT_DAQ : XCP_CONTEXT_STIM);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   554  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   555    /* Only do the remaining checks if we have successfully done the Address-Transformation
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   556     * otherwise we have to do the checks lateron
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   557     */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   558    if (Error != XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   559    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   560      /* Nothing more to do - there is an error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   561    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   562    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   563  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   564  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   565  /* If MemoryAccessByAppl is disabled the extension shall not be != 0 - otherwise the extension can be handled by the application */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   566  #if (XCP_DAQ_STIM_MEMORY_ACCESS_BY_APPL == STD_OFF)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   567    /* Memory shall be accessed by Xcp itself, thus only direct access is possible, meaning AddressExtension has to be 0 */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   568    if (XcpAddrPtr->Extension != 0)
	ld.bu	d15,[a4]4
.L444:
	jeq	d15,#0,.L50
.L445:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   569    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   570      Error = XCP_ERR_ACCESS_DENIED;
	mov	d10,#36
.L446:
	j	.L51
.L50:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   571    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   572    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   573  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   574  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   575    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   576      if ((XCP_DAQ_MODE(daqListNo_u16, protLayerId)  & XCP_DAQLISTMODE_DIRECTION_STIM) == 0u)
	mul	d15,d8,#24
.L290:
	mul	d1,d9,#80
.L291:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d1,#0
	ld.a	a15,[a15]24
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]22
.L447:
	jnz.t	d15:1,.L52
.L448:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   577      { /* Direction is DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   578        /* If Read Protect is detected for the address then set error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   579        if(Xcp_MemReadProtectionCheck(*XcpAddrPtr, Size, protLayerId) != XCP_NO_ERROR)
	ld.d	e4,[a4]0
.L285:
	mov	e6,d9,d0
.L287:
	call	Xcp_MemReadProtectionCheck
.L286:
	mov	d15,#255
.L449:
	jeq	d15,d2,.L53
.L292:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   580        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   581          XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) = XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) | XCP_DAQFLAG_READ_PROTECTED;
	mul	d0,d8,#24
.L293:
	mul	d15,d9,#80
.L294:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]24
	addsc.a	a15,a15,d0,#0
	lea	a15,[a15]21
	ld.bu	d15,[a15]
.L450:
	or	d15,#16
.L451:
	st.b	[a15],d15
.L452:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   582          Error = XCP_ERR_ACCESS_DENIED;
	mov	d10,#36
.L53:
.L52:
.L51:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   583        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   584      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   585  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   586      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   587      { /* Direction is STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   588        /* If Write Protect is detected for the received address then set the Flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   589        if (Xcp_MemWriteProtectionCheck(*XcpAddrPtr, Size)!= XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   590        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   591          XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) = XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) | XCP_DAQFLAG_WRITE_PROTECTED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   592          Error = XCP_ERR_ACCESS_DENIED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   593        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   594      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   595  #endif /* (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   596  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   597  #if (XCP_OM_ODT_OPTIMIZATION_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   598      if (Error == XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   599      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   600        /* Check if the copy routine for this OdtEntry matches the one for the Odt (Set copy routine for the Odt if first OdtEntry or error) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   601        Error = Xcp_DaqSetOdtCopyRoutine(*XcpAddrPtr, Size, Xcp_NoInit[protLayerId].DaqConfig.SelectedOdtEntry.AbsOdtNum_u16, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   602      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   603  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   604    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   605  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   606    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   607    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   608    return Error;
	mov	d2,d10
.L295:
	j	.L54

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   609  }
.L54:
	ret
.L213:
	
__Xcp_DaqTransformAndCheckOdtEntry_function_end:
	.size	Xcp_DaqTransformAndCheckOdtEntry,__Xcp_DaqTransformAndCheckOdtEntry_function_end-Xcp_DaqTransformAndCheckOdtEntry
.L150:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListFinalize',code,cluster('Xcp_DaqListFinalize')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListFinalize'
	.align	2
	
	.global	Xcp_DaqListFinalize

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   610  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   611  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   612  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   613  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   614  This function performs various checks for a DaqList (access protection, OdtEntry NULL/Size)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   615  and calculates needed values for the DaqList (e. g. AddressTransformation, OdtOptimization).
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   616  \param[in]  daqListNo_u16   DaqList number
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   617  \param[in]  protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   618  \return     Xcp_ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   619  \retval     XCP_NO_ERROR            required memory is allocated
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   620  \retval     XCP_ERR_SEQUENCE        DaqListMode not received
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   621  \retval     XCP_ERR_ACCESS_DENIED   requested address is protected
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   622  \retval     XCP_ERR_DAQ_CONFIG      DaqList is not correctly configured
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   623  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   624  /* HIS METRIC LEVEL VIOLATION IN Xcp_DaqListFinalize: Function contains very simple "else if" statements. HIS metric compliance would decrease readability and maintainability. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   625  Xcp_ErrorCode Xcp_DaqListFinalize(uint16 daqListNo_u16, uint8 protLayerId)
; Function Xcp_DaqListFinalize
.L97:
Xcp_DaqListFinalize:	.type	func
	mov	e8,d5,d4
.L297:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   626  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   627    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   628    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   629  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   630    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   631    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   632  #if (XCP_STATIC_ADDRESS_TRANSFORMATION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   633    Xcp_AddrType_t  LocalAddress;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   634    uint8           LocalSize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   635    uint16_least  OdtNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   636    uint16_least  AbsOdtEntryNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   637  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   638  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   639    /* Check if DaqList already checked */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   640    if ((XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) & XCP_DAQFLAG_CONFIG_COMPLETED) != 0u)
	mul	d15,d8,#24
.L298:
	mul	d0,d9,#80
.L299:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d0,#0
	ld.a	a15,[a15]24
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]21
	ld.bu	d15,[a15]
.L457:
	jz.t	d15:1,.L55
.L458:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   641    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   642      /* DaqList already checked, all other checks can be skipped */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   643      Error = XCP_NO_ERROR;
	mov	d2,#255
.L300:
	j	.L56
.L55:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   644    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   645    /* Check if SetDaqListMode has been received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   646    else if ((XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) & XCP_DAQFLAG_RECEIVED_DAQ_LIST_MODE) == 0u)
	jnz.t	d15:0,.L57
.L459:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   647    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   648      Error = XCP_ERR_SEQUENCE;
	mov	d2,#41
.L301:
	j	.L58
.L57:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   649    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   650  #if (XCP_STATIC_ADDRESS_TRANSFORMATION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   651    /* Check if Address-Transformation was already done */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   652    else if ((XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) & XCP_DAQFLAG_ADDR_TRANSFORMATION_DONE) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   653    { /* No, transformation was not yet done */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   654      Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   655      /* Loop through all the ODTs of this DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   656      for (OdtNo = XCP_DAQ_ODTFIRST(daqListNo_u16, protLayerId); (OdtNo < XCP_DAQ_ODTMAX(daqListNo_u16, protLayerId)) && (Error == XCP_NO_ERROR); OdtNo++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   657      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   658        /* Loop through all OdtEntries of this ODT */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   659        for (AbsOdtEntryNo = XCP_ODT_ODTENTRYFIRST(OdtNo, protLayerId); (AbsOdtEntryNo < XCP_ODT_ENTRYMAX(OdtNo, protLayerId)) && (Error == XCP_NO_ERROR); AbsOdtEntryNo++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   660        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   661          /* Get address and Size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   662          LocalAddress.AddrValue  = XCP_ODTENTRY_ADDRESS(AbsOdtEntryNo, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   663  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   664          LocalAddress.Extension  = XCP_ODTENTRY_EXTENSION(AbsOdtEntryNo, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   665  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   666          LocalAddress.Extension  = 0u;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   667  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   668          LocalSize               = XCP_ODTENTRY_SIZE(AbsOdtEntryNo, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   669  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   670          Error = Xcp_DaqTransformAndCheckOdtEntry((Xcp_AddrType_t*)&LocalAddress, LocalSize, daqListNo_u16, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   671  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   672          XCP_ODTENTRY_ADDRESS(AbsOdtEntryNo, protLayerId)    = LocalAddress.AddrValue;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   673  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   674          XCP_ODTENTRY_EXTENSION(AbsOdtEntryNo, protLayerId)  = LocalAddress.Extension;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   675  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   676        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   677      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   678    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   679    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   680    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   681      /* Nothing more to do */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   682      Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   683    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   684  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   685    if (Error != XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   686    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   687      /* Nothing to do - error already set */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   688    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   689  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   690  #if (XCP_MEMORY_READ_PROTECTION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   691    /* Check if read protected */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   692    else if( ((XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) & XCP_DAQFLAG_READ_PROTECTED) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   693          && ((XCP_DAQ_MODE(daqListNo_u16, protLayerId) & XCP_DAQLISTMODE_DIRECTION_STIM) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   694           )
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   695    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   696      Error = XCP_ERR_ACCESS_DENIED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   697    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   698  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   699  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   700    /* Check if write protected */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   701    else if( ((XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) & XCP_DAQFLAG_WRITE_PROTECTED) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   702          && ((XCP_DAQ_MODE(daqListNo_u16, protLayerId) & XCP_DAQLISTMODE_DIRECTION_STIM) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   703           )
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   704    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   705      Error = XCP_ERR_ACCESS_DENIED;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   706    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   707  #endif /*(XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   708    /* Check for correct OdtLength and wrong OdtEntries */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   709    else if (Xcp_DaqSetOdtLength(daqListNo_u16, protLayerId) == E_NOT_OK)
	mov	e4,d9,d8
.L296:
	call	Xcp_DaqSetOdtLength
.L460:
	jne	d2,#1,.L59
.L461:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   710    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   711      Error = XCP_ERR_DAQ_CONFIG;
	mov	d2,#42
.L302:
	j	.L60
.L59:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   712    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   713    /* All checks passed, DaqList OK */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   714    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   715    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   716      /* If all the checks passed the DaqList is completed. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   717      XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) = XCP_DAQ_FLAGS(daqListNo_u16, protLayerId) | XCP_DAQFLAG_CONFIG_COMPLETED;
	mul	d0,d8,#24
.L303:
	mul	d15,d9,#80
.L304:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]24
	addsc.a	a15,a15,d0,#0
	lea	a15,[a15]21
	ld.bu	d15,[a15]
.L462:
	or	d15,#2
.L463:
	st.b	[a15],d15
.L464:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   718      Error = XCP_NO_ERROR;
	mov	d2,#255
.L60:
.L58:
.L56:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   719    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   720  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   721    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   722    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   723    return Error;
	j	.L61

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   724  }
.L61:
	ret
.L220:
	
__Xcp_DaqListFinalize_function_end:
	.size	Xcp_DaqListFinalize,__Xcp_DaqListFinalize_function_end-Xcp_DaqListFinalize
.L155:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopDaqList',code,cluster('Xcp_DaqListStopDaqList')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqListStopDaqList'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   725  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   726  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   727  # if (XCP_OM_ODT_OPTIMIZATION_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   728  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   729  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   730  This function checks whether the copy routine for this ODT is also valid for this OdtEntry.
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   731  The copy optimization is set if it is the first OdtEntry of the Odt or an error was detected.
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   732  \param[in]  XcpAddr       OdtEntry address
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   733  \param[in]  Size          OdtEntry size
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   734  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   735  \param[in]  AbsOdtNum     Number of the Odt
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   736  \return     returns an error code in case that the conditions are not fulfilled
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   737  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   738  Xcp_ErrorCode Xcp_DaqSetOdtCopyRoutine(const Xcp_AddrType_t XcpAddr, uint8 Size, uint16 AbsOdtNum, uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   739  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   740    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   741    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   742  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   743    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   744    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   745  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   746    uint8 CopyRoutine_Size;          /* Holds the copy routine determined analyzing the size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   747    uint8 CopyRoutine_Address;       /* Holds the copy routine determined analyzing the address */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   748    uint8 CopyRoutine_MaxSupported;  /* Holds the copy routine given by the configuration */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   749    uint8 CopyRoutine;               /* Holds the copy routine to be used for the given OdtEntry */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   750  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   751    /* Initialize variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   752    Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   753  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   754    /* Check if the copy-routine for this Odt is Safe-copy: Nothing more has to be done */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   755    if (XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId) == XCP_ODT_COPY_SAFE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   756    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   757      /* Safe copy to be used - nothing to do */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   758    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   759    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   760    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   761      /* Determine the copy routine to be used according to configuration */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   762      CopyRoutine_MaxSupported = Map_OdtOptimizationType_to_CopyRoutine[Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].OdtOptimizationType_en];
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   763  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   764      /* Check if Optimization for this TL is active */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   765      if (CopyRoutine_MaxSupported == XCP_ODT_COPY_SAFE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   766      { /* XCP_ODT_COPY_SAFE = no optimization -> Use the safe-copy routine */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   767        XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId) = XCP_ODT_COPY_SAFE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   768      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   769      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   770      { /* Optimization requested */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   771  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   772        /* Check which copy routine can be used according to the size*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   773        CopyRoutine_Size = Xcp_DaqCalcCopyRoutine((uint64)Size);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   774  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   775        /* Check which copy routine can be used according to the alignment*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   776        /* No check for AddrExtension as this is not supported together with Optimization as of now */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   777        CopyRoutine_Address = Xcp_DaqCalcCopyRoutine((uint64)XcpAddr.AddrValue);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   778  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   779        /* Get the smaller copy routine - as it can also copy larger sizes */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   780        CopyRoutine = XCP_MIN(CopyRoutine_Size, CopyRoutine_Address);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   781  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   782        /* Limit to the configured max copy routine */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   783        CopyRoutine = XCP_MIN(CopyRoutine, CopyRoutine_MaxSupported);
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   784  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   785        /* Check if the determined copy routine is the same for the Odt */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   786        if (CopyRoutine != XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId))
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   787        { /* Copy routine mismatch */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   788  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   789          /* Check if there is a copy routine stored for this Odt.
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   790           * This is done within the check whether the routines are equal,
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   791           * as otherwise this check has to be done for each OdtEntry. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   792          if (XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId) == XCP_ODT_COPY_UNKNOWN)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   793          { /* No copy routine -> use the copy routine for this OdtEntry as the one for the Odt */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   794            XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId) = CopyRoutine;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   795          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   796          else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   797          { /* Copy routine for Odt was stored and does not match the one for this OdtEntry */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   798  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   799            /* Fall back to safe copy */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   800            XCP_ODT_COPYROUTINE(AbsOdtNum, protLayerId) = XCP_ODT_COPY_SAFE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   801  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   802  #  if (XCP_OM_ODT_OPTIMIZATION_ERR_REACTION == XCP_OM_ODT_OPTIMIZATION_ERR_FALLBACK_TO_OM_DEFAULT)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   803            /* TODO HWUNDERLICH: Output SERV-Text: Fallback to OM_DEFAULT -> Higher Runtime */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   804  #  else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   805            /* Return error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   806            Error = XCP_ERR_DAQ_CONFIG;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   807  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   808            /* TODO HWUNDERLICH: Output SERV-Text: DAQ configuration aborted due to errors with OM_OPTIMIZATION */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   809  #  endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   810          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   811        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   812        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   813        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   814          /* Copy routines identical - nothing to do */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   815        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   816      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   817    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   818  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   819    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   820    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   821    return Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   822  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   823  # endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   824  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   825  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   826  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   827  * Local functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   828  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   829  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   830  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   831  # if (XCP_OM_ODT_OPTIMIZATION_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   832  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   833  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   834  This function returns the largest copy function that can be used for the given parameter
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   835  \param[in]  value   value for which the copy routine shall be returned
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   836  \return     returns the largest possible copy function for the given parameter
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   837  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   838  static uint8 Xcp_DaqCalcCopyRoutine(uint64 value)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   839  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   840    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   841    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   842  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   843    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   844    uint8 CopyRoutine;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   845  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   846    if ((value % 8u) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   847    { /* 64 bit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   848      CopyRoutine = XCP_ODT_COPY_64;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   849    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   850    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   851    if ((value % 4u) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   852    { /* 32 bit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   853      CopyRoutine = XCP_ODT_COPY_32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   854    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   855    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   856    if ((value % 2u) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   857    { /* 16 bit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   858      CopyRoutine = XCP_ODT_COPY_16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   859    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   860    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   861    /* if ((value % 1u) == 0u) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   862    { /* 8 bit */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   863      CopyRoutine = XCP_ODT_COPY_8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   864    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   865  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   866    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   867    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   868    return CopyRoutine;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   869  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   870  # endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   871  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   872  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   873  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   874  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   875  This function stops the given DAQ-List
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   876  \param[in]  daqListNo       requested DaqList number
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   877  \param[in]  protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   878  \return     ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   879  \retval     XCP_NO_ERROR:       no problem occurred
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   880  \retval     XCP_REPEAT_COMMAND: stopped DAQ which is currently processed (e.g. sampling), cannot stop immediately
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   881  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   882  static Xcp_ErrorCode Xcp_DaqListStopDaqList(uint16 daqListNo, uint8 protLayerId)
; Function Xcp_DaqListStopDaqList
.L99:
Xcp_DaqListStopDaqList:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   883  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   884    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   885    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   886    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   887  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   888  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   889    /* enter lock to change buffers - no lock needed as this function is only called under lock */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   890    /* Reset running flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   891    XCP_DAQ_BUFFERINFO(daqListNo, protLayerId).Status_u8 = XCP_STATUSBIT_STIM_ERR_NO_DATA_AVAILABLE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   892    /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   893  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   894  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   895    /* Remove DaqList running flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   896    XCP_DAQ_MODE(daqListNo, protLayerId) &= (uint8)(~XCP_DAQLISTMODE_RUNNING);
	mul	d15,d4,#24
	mul	d0,d5,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d0,#0
	lea	a15,[a15]24
	ld.a	a2,[a15]
	addsc.a	a2,a2,d15,#0
	lea	a2,[a2]22
	ld.bu	d0,[a2]
.L469:
	and	d0,d0,#191
	st.b	[a2],d0
.L470:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   897  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   898    if (XCP_DAQ(daqListNo, protLayerId).CurrentlyRunning_b == FALSE)
	ld.a	a2,[a15]
	addsc.a	a2,a2,d15,#0
.L471:
	ld.bu	d0,[a2]23
.L472:
	jne	d0,#0,.L62
.L473:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   899    { /* DAQ is not running in Eventchannel at the moment, can be stopped immediatly */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   900      /* Remove selected flag */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   901      XCP_DAQ_MODE(daqListNo, protLayerId) &= (uint8)(~XCP_DAQLISTMODE_SELECTED);
	ld.a	a15,[a15]
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]22
	ld.bu	d15,[a15]
.L474:
	and	d15,#254
	st.b	[a15],d15
.L475:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   902  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   903      Error = XCP_NO_ERROR;
	mov	d2,#255
.L305:
	j	.L63
.L62:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   904    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   905    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   906    { /* DaqList is currently running, so we have to repeat the stop later */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   907      Error = XCP_REPEAT_COMMAND;
	mov	d2,#252
.L63:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   908    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   909  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   910    /* mark DAQ/STIM configuration to be stopped */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   911  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   912    if ((XCP_DAQ_MODE(daqListNo, protLayerId) & XCP_DAQLISTMODE_DIRECTION_STIM) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   913    { /* DAQ-List with direction STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   914      Xcp_GlobalNoInit.StimTransmissionStopped_b = TRUE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   915    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   916    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   917  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   918    { /* DAQ-List with direction DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   919      Xcp_GlobalNoInit.DaqTransmissionStopped_b = TRUE;
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L476:
	mov	d15,#1
.L477:
	st.b	[a15]8,d15
.L478:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   920    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   921  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   922    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   923    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   924  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   925    return Error;
	j	.L64

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   926  }
.L64:
	ret
.L224:
	
__Xcp_DaqListStopDaqList_function_end:
	.size	Xcp_DaqListStopDaqList,__Xcp_DaqListStopDaqList_function_end-Xcp_DaqListStopDaqList
.L160:
	; End of function
	
	.sdecl	'.text.Xcp_UtilsStartStop.Xcp_DaqSetOdtLength',code,cluster('Xcp_DaqSetOdtLength')
	.sect	'.text.Xcp_UtilsStartStop.Xcp_DaqSetOdtLength'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   927  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   928  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   929  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   930  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   931  This function set Odt length for given DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   932  \param[in]  daqListNo_u16   DaqList number
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   933  \param[in]  protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   934  \return     E_OK: set was successful
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   935  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   936  static Std_ReturnType Xcp_DaqSetOdtLength(uint16 daqListNo_u16, uint8 protLayerId)
; Function Xcp_DaqSetOdtLength
.L101:
Xcp_DaqSetOdtLength:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   937  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   938    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   939    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   940  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   941    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   942    Std_ReturnType RetValue;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   943    uint32 OdtLength;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   944    uint16 OdtFirst;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   945    uint16 OdtMax;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   946    uint16_least OdtNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   947    uint16_least AbsOdtEntryNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   948  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   949    /* Initial values */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   950    RetValue = E_OK;
	mov	d2,#0
.L308:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   951    OdtFirst = XCP_DAQ_ODTFIRST(daqListNo_u16, protLayerId);
	mul	d3,d4,#24
	mul	d15,d5,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	lea	a4,[a15]24
	ld.a	a2,[a4]
	addsc.a	a2,a2,d3,#0
	ld.hu	d5,[a2]12
.L307:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   952    OdtMax = XCP_DAQ_ODTMAX(daqListNo_u16, protLayerId);
	ld.bu	d0,[a2]16
	add	d0,d5
	extr.u	d4,d0,#0,#16
.L306:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   953  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   954    /* Loop through all the ODTs of this DaqList */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   955    for (OdtNo = OdtFirst; OdtNo < OdtMax; OdtNo++)
	mov	d6,d5
.L309:
	j	.L65
.L66:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   956    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   957      /* header size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   958  #if (XCP_IDFIELD_OTHER_THAN_ABSOLUTE == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   959      OdtLength = (uint8) (Xcp_NoInit[protLayerId].Session.IdFieldType_en);  /* DAQ header size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   960  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   961      OdtLength = (uint8) (XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE);  /* DAQ header size absolute = 1 Byte */
	mov	d7,#1
.L310:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   962  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   963  #if (XCP_TIMESTAMP == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   964      /* If ODT with timestamp, Add number of bytes required for timestamp */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   965      if ( (OdtNo == OdtFirst)
	jne	d6,d5,.L67
.L483:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   966        && ((XCP_DAQ_MODE(daqListNo_u16, protLayerId) & XCP_DAQLISTMODE_TIMESTAMP) != 0u)
	ld.a	a2,[a4]
	addsc.a	a2,a2,d3,#0
	ld.bu	d0,[a2]22
.L484:
	jz.t	d0:4,.L68
.L485:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   967         )
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   968      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   969        /* bytes for timestamp according TL config*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   970        OdtLength = OdtLength + (uint8) (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].TimestampType_en);
	ld.bu	d15,[a15]4
.L486:
	mul	d15,d15,#56
.L487:
	movh.a	a2,#@his(Xcp_PlCfgConst)
	lea	a2,[a2]@los(Xcp_PlCfgConst)
.L488:
	addsc.a	a2,a2,d15,#0
.L489:
	ld.w	d15,[a2]28
.L490:
	extr.u	d0,d15,#0,#8
.L491:
	add	d7,d0
.L68:
.L67:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   971      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   972  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   973  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   974      /* Loop through all OdtEntries of this ODT */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   975      for (AbsOdtEntryNo = XCP_ODT_ODTENTRYFIRST(OdtNo, protLayerId); AbsOdtEntryNo < XCP_ODT_ENTRYMAX(OdtNo, protLayerId); AbsOdtEntryNo++)
	mul	d15,d6,#6
	ld.a	a2,[a15]28
	addsc.a	a2,a2,d15,#0
	ld.hu	d0,[a2]0
.L492:
	mov	d1,d0
.L311:
	j	.L69
.L70:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   976      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   977        if ((   (XCP_ODTENTRY_ADDRESS(AbsOdtEntryNo, protLayerId)   == 0u)
	ld.a	a5,[a15]32
	addsc.a	a5,a5,d1,#2
	ld.w	d15,[a5]
.L493:
	jeq	d15,#0,.L71
.L494:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   978  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   979             /* If address-extension is enabled only for Extension 0 the Address 0 is invalid per default
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   980              * - everything else should be done by MemProtection-Check */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   981             && (XCP_ODTENTRY_EXTENSION(AbsOdtEntryNo, protLayerId) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   982  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   983            )
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   984            || (XCP_ODTENTRY_SIZE(AbsOdtEntryNo, protLayerId) == 0)
	ld.a	a5,[a15]36
	addsc.a	a5,a5,d1,#0
	ld.bu	d15,[a5]
.L495:
	jne	d15,#0,.L72
.L71:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   985           )
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   986        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   987          /* DaqList is not correctly configured. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   988          RetValue = E_NOT_OK;
	mov	d2,#1
.L496:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   989          OdtLength = 0xFFFFFFFFu;
	mov	d7,#-1
.L497:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   990          break;
	j	.L73
.L72:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   991        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   992        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   993        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   994          OdtLength += XCP_ODTENTRY_SIZE(AbsOdtEntryNo, protLayerId);
	add	d7,d15
.L498:
	add	d1,#1
.L69:
	ld.bu	d15,[a2]2
	add	d15,d0
.L499:
	jlt.u	d1,d15,.L70

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   995        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   996      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   997  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   998      /* Check if OdtLength <= MaxDto */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	   999      if (OdtLength <= XCP_MAXDTO(protLayerId))
.L73:
	ld.hu	d15,[a15]16
.L500:
	jlt.u	d15,d7,.L74
.L501:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1000      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1001        /* store OdtLength */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1002        XCP_ODT_LENGTH(OdtNo, protLayerId) = (uint16) OdtLength;
	st.h	[a2]4,d7
.L502:
	j	.L75
.L74:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1003      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1004      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1005      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1006        /* OdtLength too big */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1007        RetValue = E_NOT_OK;
	mov	d2,#1
.L503:

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1008        break;
	j	.L76
.L75:
	add	d6,#1
.L65:
	jlt.u	d6,d4,.L66

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1009      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1010    } /* end of loop through ODTs */
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1011  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1012    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1013    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1014    return RetValue;
.L76:
	j	.L77

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1015  }
.L77:
	ret
.L228:
	
__Xcp_DaqSetOdtLength_function_end:
	.size	Xcp_DaqSetOdtLength,__Xcp_DaqSetOdtLength_function_end-Xcp_DaqSetOdtLength
.L165:
	; End of function
	
	.calls	'Xcp_DaqListStart','Xcp_InitDaqQueue'
	.calls	'Xcp_DaqListStartSelected','Xcp_DaqListStart'
	.calls	'Xcp_DaqListStartSelected','Xcp_DaqCalculatePriorityList'
	.calls	'Xcp_DaqListStop','Xcp_DaqListStopDaqList'
	.calls	'Xcp_DaqListStopSelected','Xcp_DaqListStopDaqList'
	.calls	'Xcp_DaqListStopSelected','Xcp_DaqCalculatePriorityList'
	.calls	'Xcp_DaqListStopSelected','Xcp_DaqProcessDaqState'
	.calls	'Xcp_DaqListStopAll','Xcp_DaqListStopDaqList'
	.calls	'Xcp_DaqListStopAll','Xcp_DaqProcessDaqState'
	.calls	'Xcp_DaqTriggerStateStartStop','Xcp_DaqListFinalize'
	.calls	'Xcp_DaqTriggerStateStartStop','Xcp_DaqQueRamCalc'
	.calls	'Xcp_DaqTriggerStateStartStop','Xcp_DaqProcessDaqState'
	.calls	'Xcp_DaqTransformAndCheckOdtEntry','Xcp_MemReadProtectionCheck'
	.calls	'Xcp_DaqListFinalize','Xcp_DaqSetOdtLength'
	.calls	'Xcp_DaqListStart','',0
	.calls	'Xcp_DaqListStartSelected','',0
	.calls	'Xcp_DaqListStop','',0
	.calls	'Xcp_DaqListStopSelected','',0
	.calls	'Xcp_DaqListStopAll','',0
	.calls	'Xcp_DaqProcessDaqState','',0
	.calls	'Xcp_DaqCalculatePriorityList','',0
	.calls	'Xcp_DaqTriggerStateStartStop','',0
	.calls	'Xcp_DaqTransformAndCheckOdtEntry','',0
	.calls	'Xcp_DaqListFinalize','',0
	.calls	'Xcp_DaqListStopDaqList','',0
	.extern	Xcp_PlCfgConst
	.extern	Xcp_NoInit
	.extern	Xcp_GlobalNoInit
	.extern	Xcp_DaqQueRamCalc
	.extern	Xcp_MemReadProtectionCheck
	.extern	Xcp_InitDaqQueue
	.calls	'Xcp_DaqSetOdtLength','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L103:
	.word	14303
	.half	3
	.word	.L104
	.byte	4
.L102:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L105
.L232:
	.byte	2
	.byte	'unsigned int',0,4,7
.L169:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'Xcp_DaqQueRamCalc',0,1,190,4,16
	.word	144
	.byte	1,1,1,1,4
	.byte	'AddOdt',0,1,190,4,40
	.word	160
	.byte	4
	.byte	'setQuePointers',0,1,190,4,56
	.word	160
	.byte	4
	.byte	'protLayerId',0,1,190,4,78
	.word	160
	.byte	0
.L167:
	.byte	2
	.byte	'unsigned short int',0,2,7,5
	.word	160
	.byte	6,1,241,1,9,8,7
	.byte	'WritePos_u16',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'ReadPos_u16',0
	.word	270
	.byte	2,2,35,2,7
	.byte	'ReadPos_OdtNum_u16',0
	.word	270
	.byte	2,2,35,4,7
	.byte	'QueSize_u16',0
	.word	270
	.byte	2,2,35,6,0,8
	.word	160
	.byte	8
	.word	160
	.byte	6,1,254,2,9,24,7
	.byte	'DaqListQue_p',0
	.word	292
	.byte	4,2,35,0,7
	.byte	'DaqListQuePos',0
	.word	297
	.byte	8,2,35,4,7
	.byte	'OdtFirst_u16',0
	.word	270
	.byte	2,2,35,12,7
	.byte	'EventChannelNum_u16',0
	.word	270
	.byte	2,2,35,14,7
	.byte	'OdtCnt_u8',0
	.word	160
	.byte	1,2,35,16,7
	.byte	'XcpTxPduId',0
	.word	160
	.byte	1,2,35,17,7
	.byte	'Prescaler_u8',0
	.word	160
	.byte	1,2,35,18,7
	.byte	'CycleCnt_u8',0
	.word	160
	.byte	1,2,35,19,7
	.byte	'Priority_u8',0
	.word	160
	.byte	1,2,35,20,7
	.byte	'Flags_u8',0
	.word	160
	.byte	1,2,35,21,7
	.byte	'Mode_u8',0
	.word	396
	.byte	1,2,35,22,7
	.byte	'CurrentlyRunning_b',0
	.word	401
	.byte	1,2,35,23,0
.L171:
	.byte	5
	.word	406
.L179:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L185:
	.byte	5
	.word	270
.L192:
	.byte	9,2,177,3,9,4,10
	.byte	'XCP_ERR_CMD_SYNCH',0,0,10
	.byte	'XCP_ERR_CMD_BUSY',0,16,10
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,10
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,10
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,10
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,10
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,10
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,10
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,10
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,10
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,10
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,10
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,10
	.byte	'XCP_ERR_SEQUENCE',0,41,10
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,10
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,10
	.byte	'XCP_ERR_GENERIC',0,49,10
	.byte	'XCP_ERR_VERIFY',0,50,10
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,10
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,10
	.byte	'XCP_REPEAT_COMMAND',0,252,1,10
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,10
	.byte	'XCP_NO_RESPONSE',0,254,1,10
	.byte	'XCP_NO_ERROR',0,255,1,0,6,3,71,9,8,7
	.byte	'SduDataPtr',0
	.word	292
	.byte	4,2,35,0,7
	.byte	'SduLength',0
	.word	270
	.byte	2,2,35,4,0,11
	.word	1247
.L207:
	.byte	5
	.word	1292
	.byte	6,2,168,3,9,8,7
	.byte	'AddrValue',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'Extension',0
	.word	160
	.byte	1,2,35,4,0
.L214:
	.byte	5
	.word	1302
	.byte	11
	.word	1302
	.byte	3
	.byte	'Xcp_MemReadProtectionCheck',0,1,151,5,22
	.word	706
	.byte	1,1,1,1,4
	.byte	'XcpAddr',0,1,151,5,70
	.word	1352
	.byte	4
	.byte	'Length',0,1,151,5,85
	.word	160
	.byte	4
	.byte	'protLayerId',0,1,151,5,99
	.word	160
	.byte	0,12
	.byte	'Xcp_InitDaqQueue',0,1,180,5,13,1,1,1,1,4
	.byte	'daqListNo_u16',0,1,180,5,37
	.word	270
	.byte	4
	.byte	'protLayerId',0,1,180,5,58
	.word	160
	.byte	0,13,1,5
	.word	1523
	.byte	14
	.byte	'__codeptr',0,4,1,1
	.word	1525
	.byte	2
	.byte	'char',0,1,6,14
	.byte	'sint8',0,5,76,25
	.word	1548
	.byte	14
	.byte	'uint8',0,5,81,25
	.word	160
	.byte	14
	.byte	'uint16',0,5,91,25
	.word	270
	.byte	14
	.byte	'uint32',0,5,106,24
	.word	144
	.byte	2
	.byte	'unsigned long long int',0,8,7,14
	.byte	'uint64',0,5,111,30
	.word	1614
	.byte	14
	.byte	'boolean',0,5,127,25
	.word	160
	.byte	14
	.byte	'StatusType',0,6,191,1,27
	.word	160
	.byte	14
	.byte	'Std_ReturnType',0,6,199,1,15
	.word	160
	.byte	6,6,206,1,9,8,7
	.byte	'vendorID',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	270
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	160
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	160
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	160
	.byte	1,2,35,6,0,14
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	1715
	.byte	14
	.byte	'PduIdType',0,7,22,19
	.word	270
	.byte	14
	.byte	'PduLengthType',0,7,26,19
	.word	270
	.byte	14
	.byte	'PduInfoType',0,3,75,3
	.word	1247
	.byte	9,3,113,9,4,10
	.byte	'TP_DATACONF',0,0,10
	.byte	'TP_DATARETRY',0,1,10
	.byte	'TP_CONFPENDING',0,2,0,14
	.byte	'TpDataStateType',0,3,118,3
	.word	1925
	.byte	9,2,225,1,9,4,10
	.byte	'XCP_STATE_DISCONNECTED',0,0,10
	.byte	'XCP_STATE_DISCONNECTING',0,1,10
	.byte	'XCP_STATE_CONNECTED',0,2,10
	.byte	'XCP_STATE_RESUME',0,3,10
	.byte	'XCP_STATE_DISABLED',0,240,1,0,14
	.byte	'Xcp_State_t',0,2,231,1,2
	.word	2001
	.byte	14
	.byte	'Xcp_AddrValue',0,2,165,3,23
	.word	144
	.byte	14
	.byte	'Xcp_AddrType_t',0,2,172,3,3
	.word	1302
	.byte	14
	.byte	'Xcp_PduIdType',0,2,174,3,15
	.word	160
	.byte	14
	.byte	'Xcp_ErrorCode',0,2,204,3,2
	.word	706
	.byte	9,2,207,3,9,4,10
	.byte	'XCP_DAQ_STATE_NO_DAQ',0,0,10
	.byte	'XCP_DAQ_STATE_FREE_DAQ',0,1,10
	.byte	'XCP_DAQ_STATE_ALLOC_DAQ',0,2,10
	.byte	'XCP_DAQ_STATE_ALLOC_ODT',0,3,10
	.byte	'XCP_DAQ_STATE_ALLOC_ODT_ENTRY',0,4,10
	.byte	'XCP_DAQ_STATE_WRITE_DAQ',0,5,10
	.byte	'XCP_DAQ_STATE_PREPARE_START',0,6,10
	.byte	'XCP_DAQ_STATE_SHIFTING',0,7,10
	.byte	'XCP_DAQ_STATE_STOP_REQUESTED',0,8,10
	.byte	'XCP_DAQ_STATE_READY_TO_RUN',0,9,10
	.byte	'XCP_DAQ_STATE_RUNNING',0,10,0,14
	.byte	'Xcp_DaqState_t',0,2,220,3,2
	.word	2236
	.byte	9,2,223,3,9,4,10
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,10
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,10
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,14
	.byte	'Xcp_Overload_t',0,2,228,3,2
	.word	2564
	.byte	9,2,233,3,9,4,10
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,10
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,10
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,10
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,14
	.byte	'Xcp_IdField_t',0,2,239,3,2
	.word	2698
	.byte	9,2,242,3,9,4,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,10
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,14
	.byte	'Xcp_OdtOptimizationType_t',0,2,250,3,2
	.word	2915
	.byte	9,2,253,3,9,4,10
	.byte	'XCP_CONSISTENCY_ODT',0,0,10
	.byte	'XCP_CONSISTENCY_DAQ',0,1,10
	.byte	'XCP_CONSISTENCY_EVENT',0,2,10
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,14
	.byte	'Xcp_Consistency_t',0,2,131,4,2
	.word	3191
	.byte	9,2,134,4,9,4,10
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,10
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,10
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,10
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,14
	.byte	'Xcp_Timestamp_t',0,2,140,4,2
	.word	3316
	.byte	15,8
	.word	160
	.byte	16,7,0,6,2,174,4,9,12,7
	.byte	'Buffer_au8',0
	.word	3474
	.byte	8,2,35,0,7
	.byte	'Length_u32',0
	.word	144
	.byte	4,2,35,8,0,14
	.byte	'Xcp_Cto8_t',0,2,178,4,2
	.word	3483
	.byte	11
	.word	1247
	.byte	5
	.word	3550
	.byte	17
	.word	160
	.byte	1,1,18
	.word	3555
	.byte	18
	.word	160
	.byte	18
	.word	160
	.byte	0,5
	.word	3560
	.byte	19,1,1,18
	.word	160
	.byte	18
	.word	160
	.byte	0,5
	.word	3588
	.byte	19,1,1,18
	.word	160
	.byte	0,5
	.word	3607
	.byte	17
	.word	160
	.byte	1,1,18
	.word	160
	.byte	0,5
	.word	3621
	.byte	5
	.word	1247
	.byte	19,1,1,18
	.word	3555
	.byte	18
	.word	3639
	.byte	18
	.word	160
	.byte	0,5
	.word	3644
	.byte	17
	.word	160
	.byte	1,1,18
	.word	160
	.byte	18
	.word	270
	.byte	18
	.word	160
	.byte	0,5
	.word	3668
	.byte	6,8,164,1,9,56,7
	.byte	'TLTransmit_pfct',0
	.word	3583
	.byte	4,2,35,0,7
	.byte	'TLInit_pfct',0
	.word	3602
	.byte	4,2,35,4,7
	.byte	'TLConnect_pfct',0
	.word	3616
	.byte	4,2,35,8,7
	.byte	'TLDisconnect_pfct',0
	.word	3634
	.byte	4,2,35,12,7
	.byte	'TLTransportLayerCmd_pfct',0
	.word	3663
	.byte	4,2,35,16,7
	.byte	'TLGetTxPduId_pfct',0
	.word	3691
	.byte	4,2,35,20,7
	.byte	'MaxCto_u8',0
	.word	160
	.byte	1,2,35,24,7
	.byte	'MaxDto_u16',0
	.word	270
	.byte	2,2,35,26,7
	.byte	'TimestampType_en',0
	.word	3316
	.byte	4,2,35,28,7
	.byte	'IdFieldType_en',0
	.word	2698
	.byte	4,2,35,32,7
	.byte	'OverloadType_en',0
	.word	2564
	.byte	4,2,35,36,7
	.byte	'OdtOptimizationType_en',0
	.word	2915
	.byte	4,2,35,40,7
	.byte	'Consistency_en',0
	.word	3191
	.byte	4,2,35,44,7
	.byte	'PdRam_u32',0
	.word	144
	.byte	4,2,35,48,7
	.byte	'EdRam_u32',0
	.word	144
	.byte	4,2,35,52,0,14
	.byte	'Xcp_PL_TL_Cfg_t',0,8,184,1,2
	.word	3696
	.byte	9,8,188,1,9,4,10
	.byte	'XCP_RAMSECTION_INVALID',0,0,10
	.byte	'XCP_RAMSECTION_PD',0,1,10
	.byte	'XCP_RAMSECTION_ED',0,2,0,14
	.byte	'Xcp_RamSectionType_t',0,8,193,1,2
	.word	4094
	.byte	6,8,195,1,9,12,7
	.byte	'DaqRamPtr_pu8',0
	.word	292
	.byte	4,2,35,0,7
	.byte	'DaqRamTotalSize_u32',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'RamSectionType_en',0
	.word	4094
	.byte	4,2,35,8,0,14
	.byte	'Xcp_DaqRamSection_Cfg_t',0,8,200,1,2
	.word	4196
	.byte	15,1
	.word	160
	.byte	16,0,0,6,8,203,1,9,8,7
	.byte	'DaqRamFreeSize_u32',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'PLConnected_ab',0
	.word	4315
	.byte	1,2,35,4,0,14
	.byte	'Xcp_DaqRamSections_t',0,8,207,1,2
	.word	4324
	.byte	6,8,230,1,9,4,7
	.byte	'EventChannelDirection_u8',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'EventChannelTimeCycle_u8',0
	.word	160
	.byte	1,2,35,1,7
	.byte	'EventChannelTimeUnit_u8',0
	.word	160
	.byte	1,2,35,2,7
	.byte	'EventChannelPriority_u8',0
	.word	160
	.byte	1,2,35,3,0,14
	.byte	'Xcp_EventChannel_Cfg_t',0,8,236,1,2
	.word	4413
	.byte	15,56
	.word	3696
	.byte	16,0,0,15,12
	.word	4196
	.byte	16,0,0,15,12
	.word	4413
	.byte	16,2,0,6,8,240,1,9,80,7
	.byte	'TlCfg',0
	.word	4586
	.byte	56,2,35,0,7
	.byte	'DaqRamCfg',0
	.word	4595
	.byte	12,2,35,56,7
	.byte	'EventChannelCfg',0
	.word	4604
	.byte	12,2,35,68,0,14
	.byte	'Xcp_PlCfgConst_t',0,8,131,2,2
	.word	4613
	.byte	11
	.word	4613
	.byte	20
	.byte	'Xcp_PlCfgConst',0,8,140,2,31
	.word	4705
	.byte	1,1,14
	.byte	'rba_BswSrv_uint64',0,9,66,28
	.word	1614
	.byte	14
	.byte	'Can_IdType',0,10,32,16
	.word	144
	.byte	14
	.byte	'Can_HwHandleType',0,10,43,16
	.word	270
	.byte	6,11,93,9,8,7
	.byte	'Class',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	160
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	144
	.byte	4,2,35,4,0,14
	.byte	'OsTrapInfoType',0,11,97,3
	.word	4806
	.byte	15,68
	.word	144
	.byte	16,16,0,6,11,154,1,9,68,7
	.byte	'store',0
	.word	4886
	.byte	68,2,35,0,0,15,68
	.word	4895
	.byte	16,0,0,14
	.byte	'Os_JumpBufType',0,11,156,1,3
	.word	4917
	.byte	14
	.byte	'Os_StackTraceType',0,11,174,1,18
	.word	144
	.byte	6,11,175,1,9,8,7
	.byte	'sp',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	144
	.byte	4,2,35,4,0,14
	.byte	'Os_StackValueType',0,11,175,1,63
	.word	4977
	.byte	14
	.byte	'Os_StackSizeType',0,11,176,1,27
	.word	4977
	.byte	21,1,1,5
	.word	5062
	.byte	14
	.byte	'Os_VoidVoidFunctionType',0,11,179,1,16
	.word	5065
	.byte	14
	.byte	'ApplicationType',0,11,193,1,23
	.word	160
	.byte	22
	.byte	'Os_ApplicationConfigurationType_s',0,11,198,1,16,2,7
	.byte	'app_id',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,1,0,14
	.byte	'Os_ApplicationConfigurationType',0,11,201,1,3
	.word	5128
	.byte	14
	.byte	'Os_CoreStateType',0,11,203,1,16
	.word	144
	.byte	14
	.byte	'AreaIdType',0,11,204,1,16
	.word	270
	.byte	14
	.byte	'Os_PeripheralAddressType',0,11,212,1,22
	.word	144
	.byte	14
	.byte	'TickType',0,11,221,1,22
	.word	144
	.byte	14
	.byte	'Os_StopwatchTickType',0,11,225,1,22
	.word	144
	.byte	5
	.word	144
	.byte	14
	.byte	'Os_Lockable',0,11,234,1,18
	.word	5370
	.byte	14
	.byte	'CoreIdType',0,11,236,1,16
	.word	270
	.byte	14
	.byte	'SpinlockIdType',0,11,237,1,16
	.word	270
	.byte	9,11,239,1,9,4,10
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,10
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,14
	.byte	'TryToGetSpinlockType',0,11,239,1,74
	.word	5440
	.byte	9,11,174,2,9,4,10
	.byte	'APPLICATION_ACCESSIBLE',0,0,10
	.byte	'APPLICATION_RESTARTING',0,1,10
	.byte	'APPLICATION_TERMINATED',0,2,0,14
	.byte	'ApplicationStateType',0,11,174,2,92
	.word	5533
	.byte	23
	.byte	'void',0,5
	.word	5645
	.byte	19,1,1,18
	.word	160
	.byte	18
	.word	5651
	.byte	0,5
	.word	5656
	.byte	14
	.byte	'Os_FunctionEntryType',0,11,183,2,16
	.word	5670
	.byte	22
	.byte	'Os_MeterInfoType_s',0,11,193,2,16,48,7
	.byte	'elapsed',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	144
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	144
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	4977
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	4977
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	4977
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	4977
	.byte	8,2,35,40,0,14
	.byte	'Os_MeterInfoType',0,11,202,2,3
	.word	5705
	.byte	5
	.word	5705
	.byte	14
	.byte	'Os_MeterInfoRefType',0,11,203,2,50
	.word	5903
	.byte	14
	.byte	'EventMaskType',0,11,206,2,15
	.word	160
	.byte	14
	.byte	'Os_imaskType',0,11,211,2,16
	.word	144
	.byte	22
	.byte	'Os_ISRDynType_s',0,11,213,2,16,48,7
	.byte	'meter',0
	.word	5705
	.byte	48,2,35,0,0,14
	.byte	'Os_ISRDynType',0,11,215,2,3
	.word	5982
	.byte	5
	.word	5982
	.byte	11
	.word	6043
	.byte	22
	.byte	'Os_ISRType_s',0,11,216,2,16,24,7
	.byte	'entry_function',0
	.word	5070
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	6048
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	144
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	4977
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	160
	.byte	1,2,35,21,0,14
	.byte	'Os_ISRType',0,11,223,2,3
	.word	6053
	.byte	5
	.word	5062
	.byte	11
	.word	6053
	.byte	5
	.word	6212
	.byte	14
	.byte	'ISRType',0,11,224,2,46
	.word	6217
	.byte	14
	.byte	'Os_bitmask',0,11,239,2,22
	.word	144
	.byte	14
	.byte	'Os_pset0Type',0,11,240,2,20
	.word	144
	.byte	14
	.byte	'Os_pset1Type',0,11,241,2,20
	.word	144
	.byte	14
	.byte	'Os_pset2Type',0,11,242,2,20
	.word	144
	.byte	24,11,243,2,9,4,7
	.byte	'p0',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	144
	.byte	4,2,35,0,0,14
	.byte	'Os_psetType',0,11,247,2,3
	.word	6325
	.byte	24,11,249,2,9,4,7
	.byte	't0',0
	.word	144
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	144
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	144
	.byte	4,2,35,0,0,14
	.byte	'Os_tpmaskType',0,11,253,2,3
	.word	6389
	.byte	14
	.byte	'Os_ActivationCountType',0,11,254,2,23
	.word	160
	.byte	22
	.byte	'Os_TaskDynType_s',0,11,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	4926
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	5705
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	160
	.byte	1,2,35,116,0,14
	.byte	'Os_TaskDynType',0,11,132,3,3
	.word	6487
	.byte	15,68
	.word	4895
	.byte	16,0,0,5
	.word	6487
	.byte	11
	.word	6613
	.byte	22
	.byte	'Os_TaskType_s',0,11,134,3,16,40,7
	.byte	'dynamic',0
	.word	6618
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	5070
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	6325
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	6389
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	6389
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	270
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	144
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	4977
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	160
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	160
	.byte	1,2,35,38,0,14
	.byte	'Os_TaskType',0,11,146,3,3
	.word	6623
	.byte	11
	.word	6623
	.byte	5
	.word	6873
	.byte	14
	.byte	'TaskType',0,11,147,3,47
	.word	6878
	.byte	25
	.byte	'Os_TaskStateType',0,11,155,3,6,4,10
	.byte	'SUSPENDED',0,0,10
	.byte	'READY',0,1,10
	.byte	'WAITING',0,2,10
	.byte	'RUNNING',0,3,0,14
	.byte	'TaskStateType',0,11,156,3,31
	.word	6901
	.byte	24,11,167,3,3,4,7
	.byte	'tpmask',0
	.word	6389
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType_s',0,11,166,3,16,4,7
	.byte	'saved_priority',0
	.word	6988
	.byte	4,2,35,0,0,14
	.byte	'Os_ResourceDynType',0,11,170,3,3
	.word	7011
	.byte	5
	.word	7011
	.byte	11
	.word	7091
	.byte	22
	.byte	'Os_ResourceType_s',0,11,171,3,16,12,7
	.byte	'dynamic',0
	.word	7096
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	6389
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,8,0,14
	.byte	'Os_ResourceType',0,11,175,3,3
	.word	7101
	.byte	6,11,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	144
	.byte	4,2,35,8,0,14
	.byte	'AlarmBaseType',0,11,185,3,3
	.word	7200
	.byte	6,11,206,3,9,8,7
	.byte	'Running',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	160
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	144
	.byte	4,2,35,4,0,14
	.byte	'Os_CounterStatusType',0,11,210,3,3
	.word	7295
	.byte	26
	.word	160
	.byte	1,1,5
	.word	7381
	.byte	14
	.byte	'Os_CounterIncrAdvType',0,11,217,3,22
	.word	7388
	.byte	22
	.byte	's_swd',0,11,222,3,12,4,7
	.byte	'count',0
	.word	144
	.byte	4,2,35,0,0,24,11,221,3,3,4,7
	.byte	'sw',0
	.word	7424
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType_s',0,11,220,3,16,4,7
	.byte	'type_dependent',0
	.word	7452
	.byte	4,2,35,0,0,14
	.byte	'Os_CounterDynType',0,11,226,3,3
	.word	7471
	.byte	5
	.word	7471
	.byte	11
	.word	7549
	.byte	22
	.byte	'Os_CounterType_s',0,11,227,3,16,28,7
	.byte	'dynamic',0
	.word	7554
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	7393
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	7200
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	5651
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	160
	.byte	1,2,35,25,0,14
	.byte	'Os_CounterType',0,11,234,3,3
	.word	7559
	.byte	5
	.word	7381
	.byte	11
	.word	7559
	.byte	5
	.word	7711
	.byte	14
	.byte	'CounterType',0,11,235,3,52
	.word	7716
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,11,240,3,6,4,10
	.byte	'SCHEDULETABLE_STOPPED',0,0,10
	.byte	'SCHEDULETABLE_NEXT',0,1,10
	.byte	'SCHEDULETABLE_WAITING',0,2,10
	.byte	'SCHEDULETABLE_RUNNING',0,3,10
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,14
	.byte	'ScheduleTableStatusType',0,11,241,3,41
	.word	7742
	.byte	11
	.word	.L312-.L103
	.byte	5
	.word	7942
	.byte	14
	.byte	'ScheduleTableType',0,11,128,4,58
	.word	7947
	.byte	22
	.byte	'Os_ScheduleTableDynType_s',0,11,130,4,16,16,7
	.byte	'match',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	7952
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	7742
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	270
	.byte	2,2,35,12,0,5
	.word	7979
	.byte	11
	.word	8072
.L312:
	.byte	22
	.byte	'Os_ScheduleTableType_s',0,11,247,3,16,16,7
	.byte	'dynamic',0
	.word	8077
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	7721
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	160
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	270
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	160
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	160
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	160
	.byte	1,2,35,14,0,14
	.byte	'Os_ScheduleTableType',0,11,255,3,3
	.word	8082
	.byte	11
	.word	8082
	.byte	5
	.word	8262
	.byte	11
	.word	7559
	.byte	5
	.word	8272
	.byte	8
	.word	5375
	.byte	8
	.word	6325
	.byte	8
	.word	6222
	.byte	8
	.word	6883
	.byte	8
	.word	6389
	.byte	8
	.word	160
	.byte	8
	.word	6883
	.byte	22
	.byte	'Os_ControlledCoreType_s',0,11,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	4806
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	8282
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	8287
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	8292
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	8297
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	8302
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	5908
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	5705
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	160
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	8307
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	4977
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	160
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	8312
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	4977
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	160
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	160
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	160
	.byte	1,2,35,110,0,14
	.byte	'Os_ControlledCoreType',0,11,141,7,3
	.word	8317
	.byte	5
	.word	144
	.byte	11
	.word	6053
	.byte	5
	.word	8773
	.byte	11
	.word	6623
	.byte	5
	.word	8783
	.byte	5
	.word	5705
	.byte	22
	.byte	'Os_AnyCoreType_s',0,11,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	144
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	144
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	144
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	144
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	4926
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	160
	.byte	1,2,35,92,0,14
	.byte	'Os_AnyCoreType',0,11,160,7,3
	.word	8798
	.byte	14
	.byte	'Can_TxObjPriorityClassType',0,12,219,3,16
	.word	144
	.byte	22
	.byte	'Can_TxHwObjectConfigType',0,12,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	160
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	144
	.byte	4,2,35,4,0,14
	.byte	'Can_TxHwObjectConfigType',0,12,252,3,3
	.word	9075
	.byte	22
	.byte	'Can_RxHwObjectConfigType',0,12,129,4,16,12,7
	.byte	'MaskRef',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	160
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	160
	.byte	1,2,35,9,0,14
	.byte	'Can_RxHwObjectConfigType',0,12,147,4,3
	.word	9211
	.byte	15,4
	.word	160
	.byte	16,3,0,22
	.byte	'Can_ControllerMOMapConfigType',0,12,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	9351
	.byte	4,2,35,0,0,14
	.byte	'Can_ControllerMOMapConfigType',0,12,184,4,3
	.word	9360
	.byte	22
	.byte	'Can_NPCRValueType',0,12,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	270
	.byte	2,2,35,0,0,14
	.byte	'Can_NPCRValueType',0,12,191,4,3
	.word	9461
	.byte	22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	270
	.byte	2,2,35,4,0,14
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,198,4,3
	.word	9536
	.byte	11
	.word	9536
	.byte	5
	.word	9701
	.byte	22
	.byte	'Can_BaudrateConfigPtrType',0,12,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	9706
	.byte	4,2,35,0,0,14
	.byte	'Can_BaudrateConfigPtrType',0,12,204,4,3
	.word	9711
	.byte	22
	.byte	'Can_EventHandlingType',0,12,226,4,16,4,7
	.byte	'CanEventType',0
	.word	9351
	.byte	4,2,35,0,0,14
	.byte	'Can_EventHandlingType',0,12,229,4,3
	.word	9811
	.byte	14
	.byte	'Rte_TransformerErrorCode',0,13,130,1,15
	.word	160
	.byte	14
	.byte	'Rte_TransformerClass',0,13,131,1,15
	.word	160
	.byte	6,13,168,1,9,12,7
	.byte	'in',0
	.word	5651
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	5651
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	270
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	160
	.byte	1,2,35,10,0,14
	.byte	'Rte_QDynType',0,13,173,1,3
	.word	9957
	.byte	9,13,175,1,9,4,10
	.byte	'RTE_DRA',0,0,10
	.byte	'RTE_WOWP',0,1,10
	.byte	'RTE_TASK',0,2,10
	.byte	'RTE_ARE',0,3,10
	.byte	'RTE_EV',0,4,10
	.byte	'RTE_MSI',0,5,0,14
	.byte	'Rte_NotificationType',0,13,182,1,3
	.word	10044
	.byte	15,128,8
	.word	160
	.byte	16,255,7,0,14
	.byte	'Impl_NVM_DstPtrType_1024',0,14,50,15
	.word	10142
	.byte	14
	.byte	'CanIf_u32_impl',0,14,69,16
	.word	144
	.byte	14
	.byte	'CanIf_u16_impl',0,14,71,16
	.word	270
	.byte	14
	.byte	'CanIf_u8_impl',0,14,73,15
	.word	160
	.byte	14
	.byte	'CanIf_ControllerModeType_Enum_impl',0,14,88,15
	.word	160
	.byte	14
	.byte	'CanIf_PduModeType_Enum_impl',0,14,90,15
	.word	160
	.byte	6,14,92,9,2,7
	.byte	'DeviceMode',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	160
	.byte	1,2,35,1,0,14
	.byte	'CanIf_ControllerStateType_struct_impl',0,14,95,3
	.word	10333
	.byte	14
	.byte	'CanIf_NotifStatusType_Enum_impl',0,14,100,15
	.word	160
	.byte	14
	.byte	'CanSM_boolean_Impl',0,14,120,15
	.word	160
	.byte	14
	.byte	'CanSM_u8_Impl',0,14,123,15
	.word	160
	.byte	14
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,14,128,1,15
	.word	160
	.byte	14
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,14,132,1,15
	.word	160
	.byte	14
	.byte	'CanSM_u16_Impl',0,14,136,1,16
	.word	270
	.byte	14
	.byte	'CanSM_TimerStateType_Enum_impl',0,14,138,1,15
	.word	160
	.byte	6,14,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	160
	.byte	1,2,35,2,0,14
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,14,143,1,3
	.word	10674
	.byte	14
	.byte	'Com_impl_u16',0,14,154,1,16
	.word	270
	.byte	14
	.byte	'Com_impl_u8',0,14,157,1,15
	.word	160
	.byte	14
	.byte	'ComM_uint32_Impl',0,14,173,1,16
	.word	144
	.byte	14
	.byte	'ComM_uint16_Impl',0,14,175,1,16
	.word	270
	.byte	14
	.byte	'ComM_uint8_Impl',0,14,177,1,15
	.word	160
	.byte	14
	.byte	'ComM_bool_Impl',0,14,179,1,15
	.word	160
	.byte	6,14,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	144
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	144
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	270
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	160
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	160
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	160
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	160
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	160
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	160
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	160
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	160
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	160
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	160
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	160
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	160
	.byte	1,2,35,21,0,14
	.byte	'ComM_ChannelStruct_Impl',0,14,197,1,3
	.word	10906
	.byte	6,14,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	270
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	160
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	160
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	160
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	160
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	160
	.byte	1,2,35,8,0,14
	.byte	'ComM_UserStruct_Impl',0,14,214,1,3
	.word	11410
	.byte	14
	.byte	'Dcm_IOOperationResponseType',0,14,252,1,15
	.word	160
	.byte	14
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	14,138,2,15
	.word	160
	.byte	14
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,14,146,2,15
	.word	160
	.byte	14
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,14,150,2,15
	.word	160
	.byte	14
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,14,154,2,15
	.word	160
	.byte	14
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,14,243,3,34
	.word	10153
	.byte	15,128,8
	.word	160
	.byte	16,255,7,0,14
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,14,246,3,34
	.word	10153
	.byte	9,1,216,1,9,4,10
	.byte	'XCP_BG_IDLE',0,0,10
	.byte	'XCP_BG_CHKSUM',0,1,10
	.byte	'XCP_BG_MEM_WRITE',0,2,10
	.byte	'XCP_BG_REPEAT_CMD',0,3,10
	.byte	'XCP_BG_DO_DISCONNECT',0,4,10
	.byte	'XCP_BG_CANCEL_REQ',0,5,0,14
	.byte	'Xcp_BgActivity_t',0,1,224,1,3
	.word	12228
	.byte	19,1,1,18
	.word	3555
	.byte	18
	.word	160
	.byte	0,5
	.word	12373
	.byte	14
	.byte	'Xcp_CmdFunctionPtr',0,1,230,1,16
	.word	12387
	.byte	14
	.byte	'Xcp_Que_t',0,1,247,1,3
	.word	297
	.byte	6,1,250,1,9,24,7
	.byte	'XcpState_en',0
	.word	2001
	.byte	4,2,35,0,7
	.byte	'ConnectedTlId_u8',0
	.word	160
	.byte	1,2,35,4,7
	.byte	'ResourceProtStatus_u8',0
	.word	160
	.byte	1,2,35,5,7
	.byte	'Mta',0
	.word	1302
	.byte	8,2,35,8,7
	.byte	'MaxDto_u16',0
	.word	270
	.byte	2,2,35,16,7
	.byte	'MaxDtoAligned_u16',0
	.word	270
	.byte	2,2,35,18,7
	.byte	'MaxCto_u8',0
	.word	160
	.byte	1,2,35,20,0,14
	.byte	'Xcp_Session_t',0,1,138,2,2
	.word	12439
	.byte	6,1,149,2,9,12,7
	.byte	'Buffer_au8',0
	.word	3474
	.byte	8,2,35,0,7
	.byte	'Length_u32',0
	.word	144
	.byte	4,2,35,8,0,14
	.byte	'Xcp_CtoMax_t',0,1,153,2,2
	.word	12626
	.byte	15,255,1
	.word	160
	.byte	16,254,1,0,6,1,157,2,9,132,2,7
	.byte	'UploadRunning_b',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'RemainingSize_u8',0
	.word	160
	.byte	1,2,35,1,7
	.byte	'DownloadSize_u8',0
	.word	160
	.byte	1,2,35,2,7
	.byte	'ReceivedSize_u8',0
	.word	160
	.byte	1,2,35,3,7
	.byte	'DownloadBuffer_au8',0
	.word	12695
	.byte	255,1,2,35,4,0,14
	.byte	'Xcp_Mem_t',0,1,178,2,2
	.word	12706
	.byte	6,1,183,2,9,2,7
	.byte	'SeedWaitingKey_b',0
	.word	160
	.byte	1,2,35,0,7
	.byte	'SeedRemaingSize_u8',0
	.word	160
	.byte	1,2,35,1,0,14
	.byte	'Xcp_SeedAndKey_t',0,1,187,2,2
	.word	12863
	.byte	6,1,192,2,9,4,7
	.byte	'BlockSize_u32',0
	.word	144
	.byte	4,2,35,0,0,14
	.byte	'Xcp_Checksum_t',0,1,198,2,2
	.word	12950
	.byte	6,1,203,2,9,18,7
	.byte	'Xcp_Debug_TransmitOkCtr',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'Xcp_Debug_TransmitNotOkCtr',0
	.word	270
	.byte	2,2,35,2,7
	.byte	'Xcp_Debug_SendResTxConfCtr',0
	.word	270
	.byte	2,2,35,4,7
	.byte	'Xcp_Debug_SendResCtr',0
	.word	270
	.byte	2,2,35,6,7
	.byte	'Xcp_Debug_SendEvTxConfCtr',0
	.word	270
	.byte	2,2,35,8,7
	.byte	'Xcp_Debug_SendEvCtr',0
	.word	270
	.byte	2,2,35,10,7
	.byte	'Xcp_Debug_SendDaqTxConfCtr',0
	.word	270
	.byte	2,2,35,12,7
	.byte	'Xcp_Debug_SendDaqCtr',0
	.word	270
	.byte	2,2,35,14,7
	.byte	'Xcp_Debug_TxConfCtr',0
	.word	270
	.byte	2,2,35,16,0,14
	.byte	'Xcp_Debug_t',0,1,216,2,2
	.word	13004
	.byte	6,1,225,2,9,8,7
	.byte	'OdtEntryPos_u16',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'OdtEntryMax_u16',0
	.word	270
	.byte	2,2,35,2,7
	.byte	'DaqListNum_u16',0
	.word	270
	.byte	2,2,35,4,7
	.byte	'AbsOdtNum_u16',0
	.word	270
	.byte	2,2,35,6,0,14
	.byte	'Xcp_SelectedOdtEntry_t',0,1,231,2,2
	.word	13326
	.byte	6,1,234,2,9,6,7
	.byte	'OdtEntryFirst_u16',0
	.word	270
	.byte	2,2,35,0,7
	.byte	'OdtEntryCnt_u8',0
	.word	160
	.byte	1,2,35,2,7
	.byte	'CopyRoutine_u8',0
	.word	160
	.byte	1,2,35,3,7
	.byte	'Length_u16',0
	.word	270
	.byte	2,2,35,4,0,14
	.byte	'Xcp_Odt_t',0,1,240,2,2
	.word	13462
	.byte	14
	.byte	'Xcp_DaqList_t',0,1,143,3,2
	.word	406
	.byte	5
	.word	13462
	.byte	5
	.word	144
	.byte	6,1,146,3,9,56,7
	.byte	'DaqList_p',0
	.word	675
	.byte	4,2,35,0,7
	.byte	'Odt_p',0
	.word	13606
	.byte	4,2,35,4,7
	.byte	'OdtEntryAddress_p',0
	.word	13611
	.byte	4,2,35,8,7
	.byte	'OdtEntrySize_p',0
	.word	292
	.byte	4,2,35,12,7
	.byte	'PriorityList_p',0
	.word	701
	.byte	4,2,35,16,7
	.byte	'DaqQue_p',0
	.word	292
	.byte	4,2,35,20,7
	.byte	'DaqListCnt_u16',0
	.word	270
	.byte	2,2,35,24,7
	.byte	'OdtCnt_u16',0
	.word	270
	.byte	2,2,35,26,7
	.byte	'OdtEntryCnt_u16',0
	.word	270
	.byte	2,2,35,28,7
	.byte	'SelectedOdtEntry',0
	.word	13326
	.byte	8,2,35,30,7
	.byte	'DaqRamPtr_pu8',0
	.word	292
	.byte	4,2,35,40,7
	.byte	'DaqRamSize_u32',0
	.word	144
	.byte	4,2,35,44,7
	.byte	'DaqListSendingCnt_u16',0
	.word	270
	.byte	2,2,35,48,7
	.byte	'DaqListSending_u16',0
	.word	270
	.byte	2,2,35,50,7
	.byte	'DaqState_en',0
	.word	2236
	.byte	4,2,35,52,0,14
	.byte	'Xcp_DaqConfig_t',0,1,180,3,2
	.word	13616
	.byte	6,1,225,3,9,80,7
	.byte	'Session',0
	.word	12439
	.byte	24,2,35,0,7
	.byte	'DaqConfig',0
	.word	13616
	.byte	56,2,35,24,0,14
	.byte	'Xcp_NoInit_t',0,1,234,3,2
	.word	13997
	.byte	15,8
	.word	4324
	.byte	16,0,0,15,1
	.word	160
	.byte	16,0,0,6,1,236,3,9,12,7
	.byte	'DaqRamSections',0
	.word	14062
	.byte	8,2,35,0,7
	.byte	'DaqTransmissionStopped_b',0
	.word	160
	.byte	1,2,35,8,7
	.byte	'Tl2PlRef_au8',0
	.word	14071
	.byte	1,2,35,9,7
	.byte	'EnabledResources_u8',0
	.word	160
	.byte	1,2,35,10,7
	.byte	'InitStatus_u8',0
	.word	160
	.byte	1,2,35,11,0,14
	.byte	'Xcp_GlobalNoInit_t',0,1,255,3,2
	.word	14080
	.byte	15,80
	.word	13997
	.byte	16,0,0,20
	.byte	'Xcp_NoInit',0,1,158,4,29
	.word	14247
	.byte	1,1,20
	.byte	'Xcp_GlobalNoInit',0,1,159,4,29
	.word	14080
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L104:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,63,12,60,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,15,0,73,19,0,0,6,19,1,58,15
	.byte	59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56,9,0,0,8,53,0,73,19,0,0,9,4,1,58,15,59,15,57,15,11,15,0
	.byte	0,10,40,0,3,8,28,13,0,0,11,38,0,73,19,0,0,12,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,13
	.byte	21,0,54,15,0,0,14,22,0,3,8,58,15,59,15,57,15,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,21
	.byte	1,73,19,54,15,39,12,0,0,18,5,0,73,19,0,0,19,21,1,54,15,39,12,0,0,20,52,0,3,8,58,15,59,15,57,15,73,19,63
	.byte	12,60,12,0,0,21,21,0,54,15,39,12,0,0,22,19,1,3,8,58,15,59,15,57,15,11,15,0,0,23,59,0,3,8,0,0,24,23,1,58
	.byte	15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0,26,21,0,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L105:
	.word	.L314-.L313
.L313:
	.half	3
	.word	.L316-.L315
.L315:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Priv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0,0
.L316:
.L314:
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_info'
.L106:
	.word	266
	.half	3
	.word	.L107
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L109,.L108
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStart',0,1,56,6,1,1,1
	.word	.L79,.L166,.L78
	.byte	4
	.byte	'daqListNo',0,1,56,30
	.word	.L167,.L168
	.byte	4
	.byte	'protLayerId',0,1,56,47
	.word	.L169,.L170
	.byte	5
	.word	.L79,.L166
	.byte	6
	.byte	'DaqListPtr',0,1,62,19
	.word	.L171,.L172
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_abbrev'
.L107:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_line'
.L108:
	.word	.L318-.L317
.L317:
	.half	3
	.word	.L320-.L319
.L319:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L320:
	.byte	5,17,7,0,5,2
	.word	.L79
	.byte	3,192,0,1,5,31,9
	.half	.L239-.L79
	.byte	3,3,1,5,39,9
	.half	.L238-.L239
	.byte	3,21,1,5,27,9
	.half	.L321-.L238
	.byte	1,5,13,9
	.half	.L322-.L321
	.byte	3,3,1,5,23,9
	.half	.L323-.L322
	.byte	1,5,1,9
	.half	.L324-.L323
	.byte	3,4,1,7,9
	.half	.L110-.L324
	.byte	0,1,1
.L318:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_ranges'
.L109:
	.word	-1,.L79,0,.L110-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_info'
.L111:
	.word	278
	.half	3
	.word	.L112
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L114,.L113
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStartSelected',0,1,105,6,1,1,1
	.word	.L81,.L173,.L80
	.byte	4
	.byte	'protLayerId',0,1,105,37
	.word	.L169,.L174
	.byte	5
	.word	.L81,.L173
	.byte	6
	.byte	'daqListNo',0,1,111,11
	.word	.L167,.L175
	.byte	6
	.byte	'DaqListStarted',0,1,112,11
	.word	.L169,.L176
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_line'
.L113:
	.word	.L326-.L325
.L325:
	.half	3
	.word	.L328-.L327
.L327:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L328:
	.byte	5,6,7,0,5,2
	.word	.L81
	.byte	3,232,0,1,5,18,9
	.half	.L240-.L81
	.byte	3,10,1,9
	.half	.L241-.L240
	.byte	3,3,1,5,11,9
	.half	.L243-.L241
	.byte	3,3,1,5,83,9
	.half	.L329-.L243
	.byte	3,125,1,5,11,9
	.half	.L3-.L329
	.byte	3,3,1,5,5,9
	.half	.L330-.L3
	.byte	1,5,13,7,9
	.half	.L331-.L330
	.byte	3,3,1,5,7,9
	.half	.L332-.L331
	.byte	1,5,37,7,9
	.half	.L333-.L332
	.byte	3,2,1,5,24,9
	.half	.L242-.L333
	.byte	3,1,1,5,7,9
	.half	.L5-.L242
	.byte	3,4,1,5,44,9
	.half	.L334-.L5
	.byte	1,5,94,9
	.half	.L4-.L334
	.byte	3,115,1,5,68,9
	.half	.L2-.L4
	.byte	1,5,83,9
	.half	.L335-.L2
	.byte	1,5,3,7,9
	.half	.L336-.L335
	.byte	3,17,1,5,34,7,9
	.half	.L337-.L336
	.byte	3,3,1,5,53,9
	.half	.L245-.L337
	.byte	3,2,1,5,51,9
	.half	.L338-.L245
	.byte	1,5,1,9
	.half	.L6-.L338
	.byte	3,5,1,7,9
	.half	.L115-.L6
	.byte	0,1,1
.L326:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_ranges'
.L114:
	.word	-1,.L81,0,.L115-.L81,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_info'
.L116:
	.word	307
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqProcessDaqState',0,1,172,2,6,1,1,1
	.word	.L89,.L177,.L88
	.byte	4
	.byte	'protLayerId',0,1,172,2,35
	.word	.L169,.L178
	.byte	5
	.word	.L89,.L177
	.byte	6
	.byte	'DaqListNo',0,1,178,2,17
	.word	.L179,.L180
	.byte	6
	.byte	'DaqModeRunning',0,1,179,2,11
	.word	.L169,.L181
	.byte	6
	.byte	'DaqProcessing',0,1,180,2,11
	.word	.L169,.L182
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_line'
.L118:
	.word	.L340-.L339
.L339:
	.half	3
	.word	.L342-.L341
.L341:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L342:
	.byte	5,19,7,0,5,2
	.word	.L89
	.byte	3,182,2,1,5,17,9
	.half	.L264-.L89
	.byte	3,1,1,5,18,9
	.half	.L266-.L264
	.byte	3,7,1,5,11,9
	.half	.L267-.L266
	.byte	3,2,1,5,83,9
	.half	.L343-.L267
	.byte	3,126,1,5,11,9
	.half	.L19-.L343
	.byte	3,2,1,5,5,9
	.half	.L344-.L19
	.byte	1,5,22,7,9
	.half	.L345-.L344
	.byte	3,2,1,5,28,9
	.half	.L346-.L345
	.byte	1,5,14,9
	.half	.L20-.L346
	.byte	3,2,1,5,45,9
	.half	.L347-.L20
	.byte	1,5,10,9
	.half	.L348-.L347
	.byte	1,5,21,7,9
	.half	.L349-.L348
	.byte	3,3,1,5,7,9
	.half	.L350-.L349
	.byte	3,3,1,5,94,9
	.half	.L21-.L350
	.byte	3,116,1,5,68,9
	.half	.L18-.L21
	.byte	1,5,83,9
	.half	.L351-.L18
	.byte	1,5,28,7,9
	.half	.L23-.L351
	.byte	3,23,1,5,3,9
	.half	.L352-.L23
	.byte	3,126,1,5,53,7,9
	.half	.L353-.L352
	.byte	3,2,1,5,51,9
	.half	.L354-.L353
	.byte	1,5,81,9
	.half	.L355-.L354
	.byte	1,5,5,9
	.half	.L24-.L355
	.byte	3,5,1,5,55,7,9
	.half	.L356-.L24
	.byte	3,2,1,5,53,9
	.half	.L357-.L356
	.byte	1,5,76,9
	.half	.L358-.L357
	.byte	1,5,44,9
	.half	.L26-.L358
	.byte	3,7,1,5,60,9
	.half	.L265-.L26
	.byte	1,5,7,9
	.half	.L359-.L265
	.byte	1,5,57,7,9
	.half	.L360-.L359
	.byte	3,2,1,5,55,9
	.half	.L361-.L360
	.byte	1,5,1,9
	.half	.L25-.L361
	.byte	3,7,1,7,9
	.half	.L120-.L25
	.byte	0,1,1
.L340:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L89,0,.L120-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_info'
.L121:
	.word	372
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqCalculatePriorityList',0,1,246,2,6,1,1,1
	.word	.L91,.L183,.L90
	.byte	4
	.byte	'protLayerId',0,1,246,2,41
	.word	.L169,.L184
	.byte	5
	.word	.L91,.L183
	.byte	6
	.byte	'PriorityList',0,1,252,2,11
	.word	.L185,.L186
	.byte	6
	.byte	'daqListNo',0,1,253,2,11
	.word	.L167,.L187
	.byte	6
	.byte	'DaqListSendingCnt',0,1,254,2,11
	.word	.L167,.L188
	.byte	6
	.byte	'i',0,1,255,2,17
	.word	.L179,.L189
	.byte	6
	.byte	'j',0,1,128,3,17
	.word	.L179,.L190
	.byte	6
	.byte	'daqListNoTemp',0,1,129,3,11
	.word	.L167,.L191
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_line'
.L123:
	.word	.L363-.L362
.L362:
	.half	3
	.word	.L365-.L364
.L364:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L365:
	.byte	5,28,7,0,5,2
	.word	.L91
	.byte	3,132,3,1,5,18,9
	.half	.L366-.L91
	.byte	1,5,28,9
	.half	.L367-.L366
	.byte	1,5,51,9
	.half	.L368-.L367
	.byte	1,5,21,9
	.half	.L268-.L368
	.byte	3,1,1,5,18,9
	.half	.L269-.L268
	.byte	3,7,1,5,83,9
	.half	.L270-.L269
	.byte	1,5,10,9
	.half	.L30-.L270
	.byte	3,3,1,5,47,9
	.half	.L369-.L30
	.byte	1,5,110,9
	.half	.L370-.L369
	.byte	1,5,5,9
	.half	.L371-.L370
	.byte	1,5,19,7,9
	.half	.L372-.L371
	.byte	3,2,1,5,39,9
	.half	.L373-.L372
	.byte	1,5,24,9
	.half	.L374-.L373
	.byte	3,1,1,5,94,9
	.half	.L31-.L374
	.byte	3,122,1,5,68,9
	.half	.L29-.L31
	.byte	1,5,83,9
	.half	.L375-.L29
	.byte	1,5,59,7,9
	.half	.L376-.L375
	.byte	3,11,1,5,10,9
	.half	.L377-.L376
	.byte	3,3,1,5,37,9
	.half	.L272-.L377
	.byte	1,5,7,9
	.half	.L33-.L272
	.byte	3,2,1,5,118,9
	.half	.L273-.L33
	.byte	3,1,1,5,7,9
	.half	.L35-.L273
	.byte	3,2,1,5,8,9
	.half	.L378-.L35
	.byte	3,1,1,5,13,9
	.half	.L34-.L378
	.byte	3,125,1,5,74,7,9
	.half	.L379-.L34
	.byte	1,5,26,9
	.half	.L380-.L379
	.byte	1,5,74,9
	.half	.L381-.L380
	.byte	1,5,72,9
	.half	.L382-.L381
	.byte	1,5,40,7,9
	.half	.L37-.L382
	.byte	3,125,1,5,37,9
	.half	.L32-.L37
	.byte	1,5,1,7,9
	.half	.L383-.L32
	.byte	3,16,1,7,9
	.half	.L125-.L383
	.byte	0,1,1
.L363:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L91,0,.L125-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_info'
.L126:
	.word	271
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L129,.L128
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStopAll',0,1,251,1,15
	.word	.L192
	.byte	1,1,1
	.word	.L87,.L193,.L86
	.byte	4
	.byte	'protLayerId',0,1,251,1,40
	.word	.L169,.L194
	.byte	5
	.word	.L87,.L193
	.byte	6
	.byte	'daqListNo',0,1,129,2,10
	.word	.L167,.L195
	.byte	6
	.byte	'Error',0,1,130,2,17
	.word	.L192,.L196
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_line'
.L128:
	.word	.L385-.L384
.L384:
	.half	3
	.word	.L387-.L386
.L386:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L387:
	.byte	5,15,7,0,5,2
	.word	.L87
	.byte	3,250,1,1,5,9,9
	.half	.L257-.L87
	.byte	3,10,1,5,18,9
	.half	.L258-.L257
	.byte	3,9,1,5,83,9
	.half	.L259-.L258
	.byte	1,5,43,9
	.half	.L15-.L259
	.byte	3,3,1,5,59,9
	.half	.L388-.L15
	.byte	1,5,5,9
	.half	.L389-.L388
	.byte	1,5,13,9
	.half	.L390-.L389
	.byte	3,2,1,5,94,9
	.half	.L16-.L390
	.byte	3,123,1,5,45,9
	.half	.L14-.L16
	.byte	1,5,35,9
	.half	.L391-.L14
	.byte	1,5,45,9
	.half	.L392-.L391
	.byte	1,5,68,9
	.half	.L393-.L392
	.byte	1,5,83,9
	.half	.L394-.L393
	.byte	1,5,26,7,9
	.half	.L395-.L394
	.byte	3,15,1,5,3,9
	.half	.L262-.L395
	.byte	3,5,1,5,1,9
	.half	.L17-.L262
	.byte	3,1,1,7,9
	.half	.L130-.L17
	.byte	0,1,1
.L385:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_ranges'
.L129:
	.word	-1,.L87,0,.L130-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_info'
.L131:
	.word	268
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStop',0,1,157,1,15
	.word	.L192
	.byte	1,1,1
	.word	.L83,.L197,.L82
	.byte	4
	.byte	'daqListNo',0,1,157,1,38
	.word	.L167,.L198
	.byte	4
	.byte	'protLayerId',0,1,157,1,55
	.word	.L169,.L199
	.byte	5
	.word	.L83,.L197
	.byte	6
	.byte	'Error',0,1,163,1,17
	.word	.L192,.L200
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_line'
.L133:
	.word	.L397-.L396
.L396:
	.half	3
	.word	.L399-.L398
.L398:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L399:
	.byte	5,45,7,0,5,2
	.word	.L83
	.byte	3,167,1,1,5,3,9
	.half	.L247-.L83
	.byte	3,9,1,5,1,9
	.half	.L7-.L247
	.byte	3,1,1,7,9
	.half	.L135-.L7
	.byte	0,1,1
.L397:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L83,0,.L135-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_info'
.L136:
	.word	304
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStopSelected',0,1,189,1,15
	.word	.L192
	.byte	1,1,1
	.word	.L85,.L201,.L84
	.byte	4
	.byte	'protLayerId',0,1,189,1,45
	.word	.L169,.L202
	.byte	5
	.word	.L85,.L201
	.byte	6
	.byte	'daqListNo',0,1,195,1,10
	.word	.L167,.L203
	.byte	6
	.byte	'DaqListStopped',0,1,196,1,11
	.word	.L169,.L204
	.byte	6
	.byte	'Error',0,1,197,1,17
	.word	.L192,.L205
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_line'
.L138:
	.word	.L401-.L400
.L400:
	.half	3
	.word	.L403-.L402
.L402:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L403:
	.byte	5,15,7,0,5,2
	.word	.L85
	.byte	3,188,1,1,5,18,9
	.half	.L248-.L85
	.byte	3,11,1,5,9,9
	.half	.L249-.L248
	.byte	3,1,1,5,18,9
	.half	.L250-.L249
	.byte	3,8,1,5,11,9
	.half	.L251-.L250
	.byte	3,3,1,5,83,9
	.half	.L404-.L251
	.byte	3,125,1,5,11,9
	.half	.L9-.L404
	.byte	3,3,1,5,5,9
	.half	.L405-.L9
	.byte	1,5,22,7,9
	.half	.L406-.L405
	.byte	3,2,1,5,45,9
	.half	.L407-.L406
	.byte	3,2,1,5,61,9
	.half	.L408-.L407
	.byte	1,5,7,9
	.half	.L409-.L408
	.byte	1,5,15,9
	.half	.L410-.L409
	.byte	3,2,1,5,94,9
	.half	.L10-.L410
	.byte	3,119,1,5,68,9
	.half	.L8-.L10
	.byte	1,5,83,9
	.half	.L411-.L8
	.byte	1,5,3,7,9
	.half	.L412-.L411
	.byte	3,19,1,5,34,7,9
	.half	.L413-.L412
	.byte	3,3,1,5,28,9
	.half	.L254-.L413
	.byte	3,2,1,5,3,9
	.half	.L12-.L254
	.byte	3,6,1,5,1,9
	.half	.L13-.L12
	.byte	3,1,1,7,9
	.half	.L140-.L13
	.byte	0,1,1
.L401:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L85,0,.L140-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_info'
.L141:
	.word	312
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqTriggerStateStartStop',0,1,188,3,15
	.word	.L192
	.byte	1,1,1
	.word	.L93,.L206,.L92
	.byte	4
	.byte	'XcpPacket',0,1,188,3,63
	.word	.L207,.L208
	.byte	4
	.byte	'protLayerId',0,1,188,3,80
	.word	.L169,.L209
	.byte	5
	.word	.L93,.L206
	.byte	6
	.byte	'Error',0,1,194,3,17
	.word	.L192,.L210
	.byte	5
	.word	.L211,.L42
	.byte	6
	.byte	'DaqList',0,1,202,3,12
	.word	.L167,.L212
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_line'
.L143:
	.word	.L415-.L414
.L414:
	.half	3
	.word	.L417-.L416
.L416:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L417:
	.byte	5,15,7,0,5,2
	.word	.L93
	.byte	3,187,3,1,5,9,9
	.half	.L275-.L93
	.byte	3,9,1,5,17,9
	.half	.L276-.L275
	.byte	3,3,1,5,7,9
	.half	.L418-.L276
	.byte	1,5,17,9
	.half	.L419-.L418
	.byte	1,5,30,9
	.half	.L420-.L419
	.byte	1,5,40,9
	.half	.L421-.L420
	.byte	1,5,3,9
	.half	.L422-.L421
	.byte	1,5,20,7,9
	.half	.L211-.L422
	.byte	3,2,1,5,101,9
	.half	.L278-.L211
	.byte	3,3,1,5,44,9
	.half	.L40-.L278
	.byte	3,2,1,5,13,9
	.half	.L277-.L40
	.byte	1,5,14,9
	.half	.L280-.L277
	.byte	3,1,1,5,23,9
	.half	.L39-.L280
	.byte	3,125,1,5,13,9
	.half	.L423-.L39
	.byte	1,5,84,7,9
	.half	.L424-.L423
	.byte	1,5,49,9
	.half	.L425-.L424
	.byte	1,5,18,7,9
	.half	.L41-.L425
	.byte	3,5,1,5,5,9
	.half	.L426-.L41
	.byte	1,5,34,7,9
	.half	.L427-.L426
	.byte	3,15,1,5,37,9
	.half	.L428-.L427
	.byte	1,5,43,9
	.half	.L429-.L428
	.byte	1,5,57,9
	.half	.L282-.L429
	.byte	3,2,1,5,55,9
	.half	.L430-.L282
	.byte	1,5,5,9
	.half	.L42-.L430
	.byte	3,111,1,5,60,9
	.half	.L38-.L42
	.byte	3,30,1,5,8,9
	.half	.L431-.L38
	.byte	1,5,11,7,9
	.half	.L432-.L431
	.byte	3,2,1,5,29,9
	.half	.L433-.L432
	.byte	1,5,61,9
	.half	.L44-.L433
	.byte	3,3,1,5,8,9
	.half	.L434-.L44
	.byte	1,5,28,7,9
	.half	.L435-.L434
	.byte	3,3,1,5,42,9
	.half	.L283-.L435
	.byte	3,2,1,5,58,9
	.half	.L436-.L283
	.byte	1,5,5,9
	.half	.L437-.L436
	.byte	1,5,13,9
	.half	.L438-.L437
	.byte	3,2,1,5,5,9
	.half	.L47-.L438
	.byte	3,126,1,5,3,9
	.half	.L43-.L47
	.byte	3,13,1,5,1,9
	.half	.L49-.L43
	.byte	3,1,1,7,9
	.half	.L145-.L49
	.byte	0,1,1
.L415:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L93,0,.L145-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_info'
.L146:
	.word	331
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqTransformAndCheckOdtEntry',0,1,153,4,15
	.word	.L192
	.byte	1,1,1
	.word	.L95,.L213,.L94
	.byte	4
	.byte	'XcpAddrPtr',0,1,153,4,64
	.word	.L214,.L215
	.byte	4
	.byte	'Size',0,1,153,4,82
	.word	.L169,.L216
	.byte	4
	.byte	'daqListNo_u16',0,1,153,4,95
	.word	.L167,.L217
	.byte	4
	.byte	'protLayerId',0,1,153,4,116
	.word	.L169,.L218
	.byte	5
	.word	.L95,.L213
	.byte	6
	.byte	'Error',0,1,159,4,17
	.word	.L192,.L219
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_line'
.L148:
	.word	.L440-.L439
.L439:
	.half	3
	.word	.L442-.L441
.L441:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L442:
	.byte	5,15,7,0,5,2
	.word	.L95
	.byte	3,152,4,1,5,9,9
	.half	.L443-.L95
	.byte	3,9,1,5,17,9
	.half	.L289-.L443
	.byte	3,22,1,5,3,9
	.half	.L444-.L289
	.byte	1,5,11,7,9
	.half	.L445-.L444
	.byte	3,2,1,5,34,9
	.half	.L446-.L445
	.byte	1,5,10,9
	.half	.L50-.L446
	.byte	3,6,1,5,5,9
	.half	.L447-.L50
	.byte	1,5,37,7,9
	.half	.L448-.L447
	.byte	3,3,1,5,56,9
	.half	.L285-.L448
	.byte	1,5,72,9
	.half	.L286-.L285
	.byte	1,5,7,9
	.half	.L449-.L286
	.byte	1,5,53,7,9
	.half	.L292-.L449
	.byte	3,2,1,5,95,9
	.half	.L450-.L292
	.byte	1,5,51,9
	.half	.L451-.L450
	.byte	1,5,15,9
	.half	.L452-.L451
	.byte	3,1,1,5,3,9
	.half	.L51-.L452
	.byte	3,26,1,5,1,9
	.half	.L54-.L51
	.byte	3,1,1,7,9
	.half	.L150-.L54
	.byte	0,1,1
.L440:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L95,0,.L150-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_info'
.L151:
	.word	276
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListFinalize',0,1,241,4,15
	.word	.L192
	.byte	1,1,1
	.word	.L97,.L220,.L96
	.byte	4
	.byte	'daqListNo_u16',0,1,241,4,42
	.word	.L167,.L221
	.byte	4
	.byte	'protLayerId',0,1,241,4,63
	.word	.L169,.L222
	.byte	5
	.word	.L97,.L220
	.byte	6
	.byte	'Error',0,1,247,4,17
	.word	.L192,.L223
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_line'
.L153:
	.word	.L454-.L453
.L453:
	.half	3
	.word	.L456-.L455
.L455:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L456:
	.byte	5,15,7,0,5,2
	.word	.L97
	.byte	3,240,4,1,5,8,9
	.half	.L297-.L97
	.byte	3,15,1,5,3,9
	.half	.L457-.L297
	.byte	1,5,11,7,9
	.half	.L458-.L457
	.byte	3,3,1,5,25,9
	.half	.L300-.L458
	.byte	1,5,8,9
	.half	.L55-.L300
	.byte	3,3,1,5,11,7,9
	.half	.L459-.L55
	.byte	3,2,1,5,29,9
	.half	.L301-.L459
	.byte	1,5,47,9
	.half	.L57-.L301
	.byte	3,61,1,5,8,9
	.half	.L460-.L57
	.byte	1,5,11,7,9
	.half	.L461-.L460
	.byte	3,2,1,5,31,9
	.half	.L302-.L461
	.byte	1,5,49,9
	.half	.L59-.L302
	.byte	3,6,1,5,91,9
	.half	.L462-.L59
	.byte	1,5,47,9
	.half	.L463-.L462
	.byte	1,5,11,9
	.half	.L464-.L463
	.byte	3,1,1,5,3,9
	.half	.L56-.L464
	.byte	3,5,1,5,1,9
	.half	.L61-.L56
	.byte	3,1,1,7,9
	.half	.L155-.L61
	.byte	0,1,1
.L454:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L97,0,.L155-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_info'
.L156:
	.word	274
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqListStopDaqList',0,1,242,6,22
	.word	.L192
	.byte	1,1
	.word	.L99,.L224,.L98
	.byte	4
	.byte	'daqListNo',0,1,242,6,52
	.word	.L167,.L225
	.byte	4
	.byte	'protLayerId',0,1,242,6,69
	.word	.L169,.L226
	.byte	5
	.word	.L99,.L224
	.byte	6
	.byte	'Error',0,1,246,6,17
	.word	.L192,.L227
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_line'
.L158:
	.word	.L466-.L465
.L465:
	.half	3
	.word	.L468-.L467
.L467:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L468:
	.byte	5,3,7,0,5,2
	.word	.L99
	.byte	3,255,6,1,5,40,9
	.half	.L469-.L99
	.byte	1,5,7,9
	.half	.L470-.L469
	.byte	3,2,1,5,38,9
	.half	.L471-.L470
	.byte	1,5,3,9
	.half	.L472-.L471
	.byte	1,5,5,7,9
	.half	.L473-.L472
	.byte	3,3,1,5,42,9
	.half	.L474-.L473
	.byte	1,5,11,9
	.half	.L475-.L474
	.byte	3,2,1,5,79,9
	.half	.L305-.L475
	.byte	3,126,1,5,11,9
	.half	.L62-.L305
	.byte	3,6,1,5,5,9
	.half	.L63-.L62
	.byte	3,12,1,5,49,9
	.half	.L476-.L63
	.byte	1,5,47,9
	.half	.L477-.L476
	.byte	1,5,3,9
	.half	.L478-.L477
	.byte	3,6,1,5,1,9
	.half	.L64-.L478
	.byte	3,1,1,7,9
	.half	.L160-.L64
	.byte	0,1,1
.L466:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L99,0,.L160-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_info'
.L161:
	.word	389
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L102
	.byte	3
	.byte	'Xcp_DaqSetOdtLength',0,1,168,7,23
	.word	.L169
	.byte	1,1
	.word	.L101,.L228,.L100
	.byte	4
	.byte	'daqListNo_u16',0,1,168,7,50
	.word	.L167,.L229
	.byte	4
	.byte	'protLayerId',0,1,168,7,71
	.word	.L169,.L230
	.byte	5
	.word	.L101,.L228
	.byte	6
	.byte	'RetValue',0,1,174,7,18
	.word	.L169,.L231
	.byte	6
	.byte	'OdtLength',0,1,175,7,10
	.word	.L232,.L233
	.byte	6
	.byte	'OdtFirst',0,1,176,7,10
	.word	.L167,.L234
	.byte	6
	.byte	'OdtMax',0,1,177,7,10
	.word	.L167,.L235
	.byte	6
	.byte	'OdtNo',0,1,178,7,16
	.word	.L179,.L236
	.byte	6
	.byte	'AbsOdtEntryNo',0,1,179,7,16
	.word	.L179,.L237
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_line'
.L163:
	.word	.L480-.L479
.L479:
	.half	3
	.word	.L482-.L481
.L481:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_UtilsStartStop.c',0,0,0,0,0
.L482:
	.byte	5,12,7,0,5,2
	.word	.L101
	.byte	3,181,7,1,5,14,9
	.half	.L308-.L101
	.byte	3,1,1,5,12,9
	.half	.L307-.L308
	.byte	3,1,1,5,14,9
	.half	.L306-.L307
	.byte	3,3,1,5,40,9
	.half	.L309-.L306
	.byte	1,5,15,9
	.half	.L66-.L309
	.byte	3,6,1,5,10,9
	.half	.L310-.L66
	.byte	3,4,1,5,12,7,9
	.half	.L483-.L310
	.byte	3,1,1,5,82,9
	.half	.L484-.L483
	.byte	1,5,61,7,9
	.half	.L485-.L484
	.byte	3,4,1,5,60,9
	.half	.L486-.L485
	.byte	1,5,40,9
	.half	.L487-.L486
	.byte	1,5,60,9
	.half	.L488-.L487
	.byte	1,5,91,9
	.half	.L489-.L488
	.byte	1,5,31,9
	.half	.L490-.L489
	.byte	1,5,29,9
	.half	.L491-.L490
	.byte	1,5,26,9
	.half	.L67-.L491
	.byte	3,5,1,5,24,9
	.half	.L492-.L67
	.byte	1,5,121,9
	.half	.L311-.L492
	.byte	1,5,16,9
	.half	.L70-.L311
	.byte	3,2,1,5,11,9
	.half	.L493-.L70
	.byte	1,5,15,7,9
	.half	.L494-.L493
	.byte	3,7,1,5,61,9
	.half	.L495-.L494
	.byte	1,5,18,7,9
	.half	.L71-.L495
	.byte	3,4,1,5,19,9
	.half	.L496-.L71
	.byte	3,1,1,5,9,9
	.half	.L497-.L496
	.byte	3,1,1,5,19,9
	.half	.L72-.L497
	.byte	3,4,1,5,136,1,9
	.half	.L498-.L72
	.byte	3,109,1,5,85,9
	.half	.L69-.L498
	.byte	1,5,121,9
	.half	.L499-.L69
	.byte	1,5,22,7,9
	.half	.L73-.L499
	.byte	3,24,1,5,5,9
	.half	.L500-.L73
	.byte	1,5,42,7,9
	.half	.L501-.L500
	.byte	3,3,1,5,62,9
	.half	.L502-.L501
	.byte	1,5,16,9
	.half	.L74-.L502
	.byte	3,5,1,5,7,9
	.half	.L503-.L74
	.byte	3,1,1,5,47,9
	.half	.L75-.L503
	.byte	3,75,1,5,40,9
	.half	.L65-.L75
	.byte	1,5,3,7,9
	.half	.L76-.L65
	.byte	3,59,1,5,1,9
	.half	.L77-.L76
	.byte	3,1,1,7,9
	.half	.L165-.L77
	.byte	0,1,1
.L480:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L101,0,.L165-.L101,0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_loc'
.L188:
	.word	-1,.L91,.L269-.L91,.L183-.L91
	.half	1
	.byte	83
	.word	0,0
.L186:
	.word	-1,.L91,.L268-.L91,.L183-.L91
	.half	1
	.byte	102
	.word	0,0
.L90:
	.word	-1,.L91,0,.L183-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L187:
	.word	-1,.L91,.L270-.L91,.L271-.L91
	.half	5
	.byte	144,32,157,32,0
	.word	.L29-.L91,.L272-.L91
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L191:
	.word	-1,.L91,.L274-.L91,.L34-.L91
	.half	1
	.byte	81
	.word	0,0
.L189:
	.word	-1,.L91,.L272-.L91,.L183-.L91
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L190:
	.word	-1,.L91,.L273-.L91,.L32-.L91
	.half	1
	.byte	95
	.word	0,0
.L184:
	.word	-1,.L91,0,.L183-.L91
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_loc'
.L223:
	.word	-1,.L97,.L300-.L97,.L55-.L97
	.half	1
	.byte	82
	.word	.L301-.L97,.L57-.L97
	.half	1
	.byte	82
	.word	.L302-.L97,.L59-.L97
	.half	1
	.byte	82
	.word	.L56-.L97,.L220-.L97
	.half	1
	.byte	82
	.word	0,0
.L96:
	.word	-1,.L97,0,.L220-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L221:
	.word	-1,.L97,0,.L296-.L97
	.half	1
	.byte	84
	.word	.L297-.L97,.L298-.L97
	.half	1
	.byte	88
	.word	.L57-.L97,.L296-.L97
	.half	1
	.byte	88
	.word	.L59-.L97,.L303-.L97
	.half	1
	.byte	88
	.word	0,0
.L222:
	.word	-1,.L97,0,.L296-.L97
	.half	1
	.byte	85
	.word	.L298-.L97,.L299-.L97
	.half	1
	.byte	89
	.word	.L57-.L97,.L296-.L97
	.half	1
	.byte	89
	.word	.L303-.L97,.L304-.L97
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L79,.L239-.L79,.L166-.L79
	.half	1
	.byte	111
	.word	0,0
.L78:
	.word	-1,.L79,0,.L166-.L79
	.half	2
	.byte	138,0
	.word	0,0
.L168:
	.word	-1,.L79,0,.L238-.L79
	.half	1
	.byte	84
	.word	0,0
.L170:
	.word	-1,.L79,0,.L238-.L79
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_loc'
.L176:
	.word	-1,.L81,.L241-.L81,.L242-.L81
	.half	5
	.byte	144,32,157,32,0
	.word	.L5-.L81,.L245-.L81
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L80:
	.word	-1,.L81,0,.L173-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L175:
	.word	-1,.L81,.L243-.L81,.L244-.L81
	.half	1
	.byte	88
	.word	.L2-.L81,.L173-.L81
	.half	1
	.byte	88
	.word	0,0
.L174:
	.word	-1,.L81,0,.L3-.L81
	.half	1
	.byte	84
	.word	.L240-.L81,.L173-.L81
	.half	1
	.byte	89
	.word	.L246-.L81,.L245-.L81
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_loc'
.L200:
	.word	-1,.L83,.L247-.L83,.L197-.L83
	.half	1
	.byte	82
	.word	0,0
.L82:
	.word	-1,.L83,0,.L197-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L198:
	.word	-1,.L83,0,.L247-.L83
	.half	1
	.byte	84
	.word	0,0
.L199:
	.word	-1,.L83,0,.L247-.L83
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_loc'
.L196:
	.word	-1,.L87,.L258-.L87,.L193-.L87
	.half	1
	.byte	89
	.word	.L263-.L87,.L193-.L87
	.half	1
	.byte	82
	.word	0,0
.L86:
	.word	-1,.L87,0,.L193-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L195:
	.word	-1,.L87,.L259-.L87,.L260-.L87
	.half	1
	.byte	90
	.word	.L14-.L87,.L193-.L87
	.half	1
	.byte	90
	.word	0,0
.L194:
	.word	-1,.L87,0,.L15-.L87
	.half	1
	.byte	84
	.word	.L257-.L87,.L193-.L87
	.half	1
	.byte	88
	.word	.L261-.L87,.L262-.L87
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_loc'
.L227:
	.word	-1,.L99,.L305-.L99,.L62-.L99
	.half	1
	.byte	82
	.word	.L63-.L99,.L224-.L99
	.half	1
	.byte	82
	.word	0,0
.L98:
	.word	-1,.L99,0,.L224-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L225:
	.word	-1,.L99,0,.L224-.L99
	.half	1
	.byte	84
	.word	0,0
.L226:
	.word	-1,.L99,0,.L224-.L99
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_loc'
.L204:
	.word	-1,.L85,.L249-.L85,.L201-.L85
	.half	1
	.byte	89
	.word	0,0
.L205:
	.word	-1,.L85,.L250-.L85,.L201-.L85
	.half	1
	.byte	90
	.word	.L256-.L85,.L201-.L85
	.half	1
	.byte	82
	.word	0,0
.L84:
	.word	-1,.L85,0,.L201-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L203:
	.word	-1,.L85,.L251-.L85,.L252-.L85
	.half	1
	.byte	91
	.word	.L8-.L85,.L201-.L85
	.half	1
	.byte	91
	.word	0,0
.L202:
	.word	-1,.L85,0,.L9-.L85
	.half	1
	.byte	84
	.word	.L248-.L85,.L201-.L85
	.half	1
	.byte	88
	.word	.L253-.L85,.L254-.L85
	.half	1
	.byte	84
	.word	.L255-.L85,.L12-.L85
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_loc'
.L180:
	.word	-1,.L89,.L267-.L89,.L177-.L89
	.half	1
	.byte	82
	.word	0,0
.L181:
	.word	-1,.L89,.L264-.L89,.L265-.L89
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L182:
	.word	-1,.L89,.L266-.L89,.L177-.L89
	.half	1
	.byte	81
	.word	0,0
.L88:
	.word	-1,.L89,0,.L177-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L178:
	.word	-1,.L89,0,.L177-.L89
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_loc'
.L237:
	.word	-1,.L101,.L311-.L101,.L65-.L101
	.half	1
	.byte	81
	.word	0,0
.L234:
	.word	0,0
.L233:
	.word	-1,.L101,.L310-.L101,.L65-.L101
	.half	1
	.byte	87
	.word	0,0
.L235:
	.word	-1,.L101,.L306-.L101,.L228-.L101
	.half	1
	.byte	84
	.word	0,0
.L236:
	.word	-1,.L101,.L309-.L101,.L228-.L101
	.half	1
	.byte	86
	.word	0,0
.L231:
	.word	-1,.L101,.L308-.L101,.L228-.L101
	.half	1
	.byte	82
	.word	0,0
.L100:
	.word	-1,.L101,0,.L228-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L229:
	.word	-1,.L101,0,.L306-.L101
	.half	1
	.byte	84
	.word	0,0
.L230:
	.word	-1,.L101,0,.L307-.L101
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_loc'
.L219:
	.word	-1,.L95,.L289-.L95,.L213-.L95
	.half	1
	.byte	90
	.word	.L295-.L95,.L213-.L95
	.half	1
	.byte	82
	.word	0,0
.L216:
	.word	-1,.L95,0,.L285-.L95
	.half	1
	.byte	84
	.word	.L288-.L95,.L286-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L215:
	.word	-1,.L95,0,.L286-.L95
	.half	1
	.byte	100
	.word	0,0
.L94:
	.word	-1,.L95,0,.L213-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L217:
	.word	-1,.L95,0,.L285-.L95
	.half	1
	.byte	85
	.word	.L50-.L95,.L290-.L95
	.half	1
	.byte	88
	.word	.L292-.L95,.L293-.L95
	.half	1
	.byte	88
	.word	0,0
.L218:
	.word	-1,.L95,0,.L287-.L95
	.half	1
	.byte	86
	.word	.L290-.L95,.L291-.L95
	.half	1
	.byte	89
	.word	.L285-.L95,.L287-.L95
	.half	1
	.byte	89
	.word	.L293-.L95,.L294-.L95
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_loc'
.L212:
	.word	-1,.L93,.L278-.L93,.L279-.L93
	.half	1
	.byte	88
	.word	.L39-.L93,.L38-.L93
	.half	1
	.byte	88
	.word	0,0
.L210:
	.word	-1,.L93,.L276-.L93,.L277-.L93
	.half	1
	.byte	90
	.word	.L277-.L93,.L39-.L93
	.half	1
	.byte	82
	.word	.L280-.L93,.L206-.L93
	.half	1
	.byte	90
	.word	.L284-.L93,.L206-.L93
	.half	1
	.byte	82
	.word	0,0
.L208:
	.word	-1,.L93,0,.L40-.L93
	.half	1
	.byte	100
	.word	.L38-.L93,.L283-.L93
	.half	1
	.byte	100
	.word	0,0
.L92:
	.word	-1,.L93,0,.L206-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L209:
	.word	-1,.L93,0,.L40-.L93
	.half	1
	.byte	84
	.word	.L275-.L93,.L206-.L93
	.half	1
	.byte	89
	.word	.L281-.L93,.L282-.L93
	.half	1
	.byte	86
	.word	.L38-.L93,.L283-.L93
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L504:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStart')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L79,.L166-.L79
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStartSelected')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L81,.L173-.L81
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStop')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L83,.L197-.L83
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStopSelected')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L85,.L201-.L85
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStopAll')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L87,.L193-.L87
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqProcessDaqState')
	.sect	'.debug_frame'
	.word	24
	.word	.L504,.L89,.L177-.L89
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqCalculatePriorityList')
	.sect	'.debug_frame'
	.word	16
	.word	.L504,.L91,.L183-.L91
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqTriggerStateStartStop')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L93,.L206-.L93
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqTransformAndCheckOdtEntry')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L95,.L213-.L95
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListFinalize')
	.sect	'.debug_frame'
	.word	12
	.word	.L504,.L97,.L220-.L97
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqListStopDaqList')
	.sect	'.debug_frame'
	.word	24
	.word	.L504,.L99,.L224-.L99
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqSetOdtLength')
	.sect	'.debug_frame'
	.word	20
	.word	.L504,.L101,.L228-.L101
	.byte	8,19,8,22,8,23,0,0

; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1016  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1017  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1018  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1019  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1020  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1021  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1022  
; BSW\src\BSW\Gen\Xcp\src\Xcp_UtilsStartStop.c	  1023  

	; Module end
