	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17024a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_DaqRam.src BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_DaqRam.Xcp_DaqRamSetRam',code,cluster('Xcp_DaqRamSetRam')
	.sect	'.text.Xcp_DaqRam.Xcp_DaqRamSetRam'
	.align	2
	
	.global	Xcp_DaqRamSetRam

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     1  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     2  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     3  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     4  * Includes
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     5  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     6  #include "Xcp.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     7  #include "Xcp_Priv.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     8  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	     9  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    10  * Macros
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    11  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    12  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    13  #if (XCP_SYNCHRONOUS_DATA_ACQUISITION_DAQ == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    14  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    15  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    16  * Variables
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    17  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    18  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    19  /* ------------------------------------------------------------------------ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    20  /* Begin section for code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    21  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    22  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    23  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    24  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    25  * Local function declarations
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    26  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    27  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    28  static void Xcp_DaqRamReturn(void);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    29  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    30  static uint8 Xcp_DaqRamFindRamSection(boolean EdRamRequested, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    31  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    32  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    33  * Functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    34  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    35  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    36  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    37  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    38  This function allocates daq ram memory for a protocol layer, when a free daq command is received
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    39  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    40  \return     Xcp_ErrorCode
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    41  \retval     XCP_NO_ERROR              required memory is allocated \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    42  \retval     XCP_ERR_MEMORY_OVERFLOW   required memory not available \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    43  \retval     XCP_ERR_CMD_BUSY          another protocol layer is in daq config phase, no allocation possible
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    44  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    45  Xcp_ErrorCode Xcp_DaqRamSetRam(uint8 protLayerId)
; Function Xcp_DaqRamSetRam
.L25:
Xcp_DaqRamSetRam:	.type	func
	mov	d8,d4
.L66:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    46  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    47    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    48    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    49  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    50    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    51    uint8 NumRamSection;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    52    Xcp_ErrorCode Error;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    53    boolean EdRamRequested;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    54  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    55    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    56    EdRamRequested = FALSE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    57    NumRamSection = 0xFFu;
	mov	d2,#255
.L67:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    58  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    59    SchM_Enter_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    60  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    61  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    62    /* make sure, no other protocol layer is in DAQ config now */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    63    if (  (Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 == protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    64       || (Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 == XCP_INVALID_PROTLAYER_ID)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    65       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    66    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    67      Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 = protLayerId;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    68      Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    69    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    70    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    71    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    72      /* other protocol layer is configuring at this moment */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    73      Error = XCP_ERR_CMD_BUSY;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    74    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    75  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    76    /* if no other protocol layer is configuring now */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    77    if (Error == XCP_NO_ERROR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    78  #endif /* (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    79    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    80      /* assume error case */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    81      Error = XCP_ERR_MEMORY_OVERFLOW;
	mov	d9,#48
.L68:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    82  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    83  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    84      /* find biggest ram section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    85      NumRamSection = Xcp_DaqRamFindRamSection(EdRamRequested, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    86      if (NumRamSection < XCP_MAX_DAQRAMSECTIONS)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    87      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    88        /* reserve all memory for this protocol layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    89        Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 = Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    90        Error = XCP_NO_ERROR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    91      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    92  #else /* (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    93  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    94  #  if (XCP_EDRAM_CONFIGURED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    95      /* if TL has ED_RAM configured, it is assumed, XCP master wants ED RAM memory */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    96      if (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].EdRam_u32 > 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    97      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    98        EdRamRequested = TRUE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	    99        NumRamSection = Xcp_DaqRamFindRamSection(EdRamRequested, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   100      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   101  #  endif /* (XCP_EDRAM_CONFIGURED == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   102  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   103      /* if no section has been found yet, look for PD RAM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   104      if ( (NumRamSection >= XCP_MAX_DAQRAMSECTIONS)
	jeq	d2,#0,.L2
.L114:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   105        && (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].PdRam_u32 > 0u)
	mul	d15,d8,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]4
.L115:
	mul	d15,d15,#56
.L116:
	movh.a	a15,#@his(Xcp_PlCfgConst)
	lea	a15,[a15]@los(Xcp_PlCfgConst)
.L117:
	addsc.a	a15,a15,d15,#0
.L118:
	ld.w	d15,[a15]48
.L119:
	jeq	d15,#0,.L3
.L120:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   106         )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   107      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   108        EdRamRequested = FALSE;
	mov	d4,#0
.L65:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   109        NumRamSection = Xcp_DaqRamFindRamSection(EdRamRequested, protLayerId);
	mov	d5,d8
.L69:
	call	Xcp_DaqRamFindRamSection
.L3:
.L2:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   110      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   111  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   112      /* if ram section found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   113      if (NumRamSection < XCP_MAX_DAQRAMSECTIONS)
	jne	d2,#0,.L4
.L121:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   114      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   115        /* valid ram section found, reset error */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   116        Error = XCP_NO_ERROR;
	mov	d9,#255
.L122:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   117  #  if (XCP_EDRAM_CONFIGURED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   118        if(EdRamRequested == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   119        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   120          /* use ED ram size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   121          Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 = Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].EdRam_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   122        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   123        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   124  #  endif /* (XCP_EDRAM_CONFIGURED == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   125        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   126          /* use PD ram size */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   127          Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 = Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].PdRam_u32;
	mul	d15,d8,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a2,a15,d15,#0
	ld.bu	d15,[a2]4
.L123:
	mul	d15,d15,#56
.L124:
	movh.a	a15,#@his(Xcp_PlCfgConst)
	lea	a15,[a15]@los(Xcp_PlCfgConst)
.L125:
	addsc.a	a15,a15,d15,#0
.L126:
	ld.w	d15,[a15]48
.L127:
	st.w	[a2]68,d15
.L4:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   128        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   129      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   130  #endif /* (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   131  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   132    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   133  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   134    /* if ram section found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   135    if (Error == XCP_NO_ERROR)
	mov	d15,#255
.L128:
	jne	d15,d9,.L5
.L129:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   136    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   137  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   138      /* calculate remaining memory */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   139      Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 = Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 - Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32;
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L130:
	addsc.a	a2,a15,d2,#3
.L131:
	mul	d15,d8,#80
.L132:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L133:
	addsc.a	a4,a15,d15,#0
.L134:
	ld.w	d15,[a2]
.L135:
	ld.w	d0,[a4]68
.L136:
	sub	d15,d0
.L137:
	st.w	[a2],d15
.L138:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   140  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   141      /* check whether other protocol layer is in this section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   142  #if (XCP_PL_IDS == 2)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   143      if (Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[( (protLayerId + 1) % 2 )] == FALSE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   144      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   145        /* set pointer to beginning of RAM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   146        Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   147      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   148      else /* already another protocol layer connected */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   149      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   150  #  if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   151        /* is this found protocol layer beginning at the beginning of free ram ?*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   152        if (Xcp_NoInit[(protLayerId + 1) % 2].DaqConfig.DaqRamPtr_pu8 == Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   153        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   154          /* set the beginning of the new protocol layer at the end of the last */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   155          Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = &(Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8[Xcp_NoInit[( (protLayerId + 1) % 2 )].DaqConfig.DaqRamSize_u32]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   156        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   157        else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   158        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   159          /* set pointer to beginning of RAM, other protocol layer is at the end */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   160          Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   161        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   162  #  else /* -> XCP_DAQRAM_SHIFTING is disabled */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   163        uint32 pos;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   164  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   165        /* set the beginning of this protocol layer to the end minus requested size. This is only possible, if ensured, that the 2 biggest transport layer requirements fit into one RAM section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   166        pos = Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamTotalSize_u32 - Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   167        Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = &(Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8[pos]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   168  #  endif /*  (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   169      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   170  #else /* (XCP_PL_IDS == 2) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   171      /* set pointer to beginning of RAM, no other PL is configured */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   172      Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8;
	lea	a5,[a4]64
.L139:
	mul	d15,d2,#12
.L140:
	movh.a	a15,#@his(Xcp_PlCfgConst)
	lea	a15,[a15]@los(Xcp_PlCfgConst)
.L141:
	addsc.a	a15,a15,d15,#0
.L142:
	ld.a	a15,[a15]56
.L143:
	st.a	[a5],a15
.L144:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   173  #endif /* (XCP_PL_IDS == 2) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   174  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   175      /* mark this ram section to have this protocol layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   176      Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[protLayerId] = TRUE;
	addsc.a	a15,a2,d8,#0
.L145:
	mov	d15,#1
.L146:
	st.b	[a15]4,d15
.L147:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   177      /* Set DaqList array start pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   178      /* MR12 RULE 11.5, 1.1 VIOLATION: The calling layers ensure correct alignment.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   179                                        Casting over void* is necessary as otherwise some compilers complain */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   180      Xcp_NoInit[protLayerId].DaqConfig.DaqList_p = (Xcp_DaqList_t*) ((void*)Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8);
	ld.a	a15,[a5]
.L148:
	st.a	[a4]24,a15
.L149:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   181  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   182      if (Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 == NULL_PTR)
	ld.w	d15,[a5]
.L150:
	jne	d15,#0,.L6

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   183      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   184        XCP_DET_REPORT_ERROR_NO_RET(XCP_DAQRAM_SID, XCP_E_DAQRAM_ALLOCATION);
.L7:
	mov	d4,#212
	mov	d5,#0
	mov	d6,#87
	mov	d7,#146
	call	Det_ReportError
.L6:
.L5:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   185      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   186    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   187    SchM_Exit_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   188  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   189    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   190    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   191    return Error;
	mov	d2,d9
.L70:
	j	.L8

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   192  }
.L8:
	ret
.L55:
	
__Xcp_DaqRamSetRam_function_end:
	.size	Xcp_DaqRamSetRam,__Xcp_DaqRamSetRam_function_end-Xcp_DaqRamSetRam
.L43:
	; End of function
	
	.sdecl	'.text.Xcp_DaqRam.Xcp_DaqRamFindRamSection',code,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.text.Xcp_DaqRam.Xcp_DaqRamFindRamSection'
	.align	2
	

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   193  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   194  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   195  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   196  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   197  This function searches for a daq ram memory section
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   198  \param[in]  EdRamRequested  TRUE: ED memory section is requested
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   199  \param[in]  protLayerId     Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   200  \return     Number of the RAM section
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   201  \retval     0xFF no valid section found
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   202  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   203  static uint8 Xcp_DaqRamFindRamSection(boolean EdRamRequested, uint8 protLayerId)
; Function Xcp_DaqRamFindRamSection
.L27:
Xcp_DaqRamFindRamSection:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   204  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   205    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   206    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   207  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   208    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   209    uint8 NumRamSection;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   210    uint8 i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   211  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   212    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   213    NumRamSection = 0xFFu;
	mov	d2,#255
.L71:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   214  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   215    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   216      /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   217      uint32 biggest_size;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   218  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   219      /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   220      biggest_size = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   221  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   222      XCP_PARAM_UNUSED(EdRamRequested);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   223      XCP_PARAM_UNUSED(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   224      /* find biggest section in memory */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   225      for (i = 0; i < XCP_MAX_DAQRAMSECTIONS; i++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   226      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   227        if (Xcp_GlobalNoInit.DaqRamSections[i].DaqRamFreeSize_u32 > biggest_size)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   228        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   229          /* found a bigger section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   230          biggest_size = Xcp_GlobalNoInit.DaqRamSections[i].DaqRamFreeSize_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   231          NumRamSection = i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   232        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   233      } /* end of for loop */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   234    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   235  #else /* (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   236    /* loop through all available ram sections */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   237    for (i = 0; i < XCP_MAX_DAQRAMSECTIONS; i++)
	mov	d0,#0
.L72:
	j	.L9
.L10:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   238    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   239      /* find section with enough space */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   240      if ( (   (EdRamRequested == FALSE)
	jne	d4,#0,.L11
.L155:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   241            && (Xcp_PlCfgConst.DaqRamCfg[i].RamSectionType_en == XCP_RAMSECTION_PD)
	movh.a	a2,#@his(Xcp_PlCfgConst)
	lea	a2,[a2]@los(Xcp_PlCfgConst)
.L156:
	mul	d15,d0,#12
	addsc.a	a15,a2,d15,#0
.L157:
	ld.w	d15,[a15]64
.L158:
	jne	d15,#1,.L12
.L159:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   242            && (Xcp_GlobalNoInit.DaqRamSections[i].DaqRamFreeSize_u32 >= Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].PdRam_u32)
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L160:
	addsc.a	a15,a15,d0,#3
.L161:
	ld.w	d1,[a15]
.L162:
	mul	d15,d5,#80
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]4
.L163:
	mul	d15,d15,#56
	addsc.a	a15,a2,d15,#0
.L164:
	ld.w	d15,[a15]48
.L165:
	jlt.u	d1,d15,.L13
.L166:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   243           )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   244  #  if (XCP_EDRAM_CONFIGURED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   245       ||  (    (EdRamRequested == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   246            && (Xcp_PlCfgConst.DaqRamCfg[i].RamSectionType_en == XCP_RAMSECTION_ED)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   247            && (Xcp_GlobalNoInit.DaqRamSections[i].DaqRamFreeSize_u32 >= Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].EdRam_u32)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   248           )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   249  #  endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   250         )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   251      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   252        /* section found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   253        NumRamSection = i;
	mov	d2,#0
.L167:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   254        break;
	j	.L14
.L13:
.L12:
.L11:
	add	d0,#1
.L9:
	jeq	d0,#0,.L10

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   255      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   256    } /* end of for loop */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   257  #endif /* (XCP_DAQRAM_SHIFTING == STD_ON) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   258  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   259    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   260    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   261    return NumRamSection;
.L14:
	j	.L15

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   262  }
.L15:
	ret
.L60:
	
__Xcp_DaqRamFindRamSection_function_end:
	.size	Xcp_DaqRamFindRamSection,__Xcp_DaqRamFindRamSection_function_end-Xcp_DaqRamFindRamSection
.L48:
	; End of function
	
	.sdecl	'.text.Xcp_DaqRam.Xcp_DaqRamRemove',code,cluster('Xcp_DaqRamRemove')
	.sect	'.text.Xcp_DaqRam.Xcp_DaqRamRemove'
	.align	2
	
	.global	Xcp_DaqRamRemove

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   263  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   264  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   265  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   266  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   267  This function frees the protocol layer's allocated daq ram memory
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   268  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   269  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   270  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   271  void Xcp_DaqRamRemove(uint8 protLayerId)
; Function Xcp_DaqRamRemove
.L29:
Xcp_DaqRamRemove:	.type	func

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   272  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   273    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   274    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   275  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   276    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   277    uint8_least NumRamSection;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   278  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   279    /* search for ram section of protocol layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   280    for (NumRamSection = 0; NumRamSection < XCP_MAX_DAQRAMSECTIONS; NumRamSection++)
	mov	d15,#0
.L74:
	j	.L16
.L17:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   281    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   282      if (Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[protLayerId] == TRUE)
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L85:
	addsc.a	a15,a15,d15,#3
.L86:
	addsc.a	a15,a15,d4,#0
	ld.bu	d0,[a15]4
.L87:
	jne	d0,#1,.L18
.L88:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   283      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   284        /* ram section found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   285        break;
	j	.L19
.L18:
	add	d15,#1
.L16:
	jeq	d15,#0,.L17

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   286      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   287    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   288  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   289    /* ensure ram section exists */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   290    if (NumRamSection < XCP_MAX_DAQRAMSECTIONS)
.L19:
	jne	d15,#0,.L20
.L89:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   291    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   292      SchM_Enter_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   293  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   294  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   295      if (Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 == protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   296      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   297        Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 = XCP_INVALID_PROTLAYER_ID;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   298      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   299  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   300      /* is this protocol layer still marked active in this section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   301      if ( Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[protLayerId] == TRUE )
	movh.a	a15,#@his(Xcp_GlobalNoInit)
	lea	a15,[a15]@los(Xcp_GlobalNoInit)
.L90:
	addsc.a	a2,a15,d15,#3
.L91:
	mov.aa	a15,a2
	add.a	a15,#4
.L92:
	addsc.a	a4,a15,d4,#0
	ld.bu	d15,[a4]
.L75:
	jne	d15,#1,.L21
.L93:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   302      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   303        /* Free section memory */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   304        Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 = Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 + Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32;
	mul	d15,d4,#80
.L94:
	movh.a	a15,#@his(Xcp_NoInit)
	lea	a15,[a15]@los(Xcp_NoInit)
.L95:
	addsc.a	a5,a15,d15,#0
.L96:
	lea	a6,[a5]68
.L97:
	ld.w	d15,[a2]
.L98:
	ld.w	d0,[a6]
.L99:
	add	d15,d0
.L100:
	st.w	[a2],d15
.L101:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   305        /* reset protocol layer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   306        Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = NULL_PTR;
	mov.a	a15,#0
.L102:
	st.a	[a5]64,a15
.L103:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   307        Xcp_NoInit[protLayerId].DaqConfig.DaqList_p = NULL_PTR;
	mov.a	a15,#0
.L104:
	st.a	[a5]24,a15
.L105:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   308        Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 = 0;
	mov	d15,#0
.L106:
	st.w	[a6],d15
.L107:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   309        /* delete connection marker from section */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   310        Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[protLayerId] = FALSE;
	mov	d15,#0
.L108:
	st.b	[a4],d15
.L109:
	j	.L22
.L21:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   311      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   312      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   313      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   314        XCP_DET_REPORT_ERROR_NO_RET(XCP_DAQRAM_SID, XCP_E_DAQRAM_INCONSISTENCY);
.L23:
	mov	d4,#212
.L73:
	mov	d5,#0
	mov	d6,#87
	mov	d7,#145
	call	Det_ReportError
.L22:
.L20:

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   315      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   316  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   317      SchM_Exit_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   318    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   319  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   320    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   321    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   322  }
	ret
.L49:
	
__Xcp_DaqRamRemove_function_end:
	.size	Xcp_DaqRamRemove,__Xcp_DaqRamRemove_function_end-Xcp_DaqRamRemove
.L38:
	; End of function
	
	.calls	'Xcp_DaqRamSetRam','Xcp_DaqRamFindRamSection'
	.calls	'Xcp_DaqRamSetRam','Det_ReportError'
	.calls	'Xcp_DaqRamRemove','Det_ReportError'
	.calls	'Xcp_DaqRamSetRam','',0
	.calls	'Xcp_DaqRamFindRamSection','',0
	.extern	Xcp_PlCfgConst
	.extern	Det_ReportError
	.extern	Xcp_NoInit
	.extern	Xcp_GlobalNoInit
	.calls	'Xcp_DaqRamRemove','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L31:
	.word	14091
	.half	3
	.word	.L32
	.byte	4
.L30:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L33
.L50:
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Det_ReportError',0,1,112,16
	.word	136
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,1,112,39
	.word	153
	.byte	4
	.byte	'InstanceId',0,1,112,55
	.word	136
	.byte	4
	.byte	'ApiId',0,1,112,73
	.word	136
	.byte	4
	.byte	'ErrorId',0,1,112,86
	.word	136
	.byte	0
.L52:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L54:
	.byte	5,2,177,3,9,4,6
	.byte	'XCP_ERR_CMD_SYNCH',0,0,6
	.byte	'XCP_ERR_CMD_BUSY',0,16,6
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,6
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,6
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,6
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,6
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,6
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,6
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,6
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,6
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,6
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,6
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,6
	.byte	'XCP_ERR_SEQUENCE',0,41,6
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,6
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,6
	.byte	'XCP_ERR_GENERIC',0,49,6
	.byte	'XCP_ERR_VERIFY',0,50,6
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,6
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,6
	.byte	'XCP_REPEAT_COMMAND',0,252,1,6
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,6
	.byte	'XCP_NO_RESPONSE',0,254,1,6
	.byte	'XCP_NO_ERROR',0,255,1,0,7,1,8
	.word	832
	.byte	9
	.byte	'__codeptr',0,3,1,1
	.word	834
	.byte	2
	.byte	'char',0,1,6,9
	.byte	'sint8',0,4,76,25
	.word	857
	.byte	9
	.byte	'uint8',0,4,81,25
	.word	136
	.byte	9
	.byte	'uint16',0,4,91,25
	.word	153
	.byte	2
	.byte	'unsigned int',0,4,7,9
	.byte	'uint32',0,4,106,24
	.word	908
	.byte	2
	.byte	'unsigned long long int',0,8,7,9
	.byte	'uint64',0,4,111,30
	.word	939
	.byte	9
	.byte	'boolean',0,4,127,25
	.word	136
	.byte	9
	.byte	'StatusType',0,5,191,1,27
	.word	136
	.byte	9
	.byte	'Std_ReturnType',0,5,199,1,15
	.word	136
	.byte	10,5,206,1,9,8,11
	.byte	'vendorID',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	153
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	136
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	136
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	136
	.byte	1,2,35,6,0,9
	.byte	'Std_VersionInfoType',0,5,213,1,3
	.word	1040
	.byte	9
	.byte	'PduIdType',0,6,22,19
	.word	153
	.byte	9
	.byte	'PduLengthType',0,6,26,19
	.word	153
	.byte	5,7,113,9,4,6
	.byte	'TP_DATACONF',0,0,6
	.byte	'TP_DATARETRY',0,1,6
	.byte	'TP_CONFPENDING',0,2,0,9
	.byte	'TpDataStateType',0,7,118,3
	.word	1230
	.byte	5,2,225,1,9,4,6
	.byte	'XCP_STATE_DISCONNECTED',0,0,6
	.byte	'XCP_STATE_DISCONNECTING',0,1,6
	.byte	'XCP_STATE_CONNECTED',0,2,6
	.byte	'XCP_STATE_RESUME',0,3,6
	.byte	'XCP_STATE_DISABLED',0,240,1,0,9
	.byte	'Xcp_State_t',0,2,231,1,2
	.word	1306
	.byte	9
	.byte	'Xcp_AddrValue',0,2,165,3,23
	.word	908
	.byte	10,2,168,3,9,8,11
	.byte	'AddrValue',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'Extension',0
	.word	136
	.byte	1,2,35,4,0,9
	.byte	'Xcp_AddrType_t',0,2,172,3,3
	.word	1471
	.byte	9
	.byte	'Xcp_PduIdType',0,2,174,3,15
	.word	136
	.byte	9
	.byte	'Xcp_ErrorCode',0,2,204,3,2
	.word	291
	.byte	5,2,207,3,9,4,6
	.byte	'XCP_DAQ_STATE_NO_DAQ',0,0,6
	.byte	'XCP_DAQ_STATE_FREE_DAQ',0,1,6
	.byte	'XCP_DAQ_STATE_ALLOC_DAQ',0,2,6
	.byte	'XCP_DAQ_STATE_ALLOC_ODT',0,3,6
	.byte	'XCP_DAQ_STATE_ALLOC_ODT_ENTRY',0,4,6
	.byte	'XCP_DAQ_STATE_WRITE_DAQ',0,5,6
	.byte	'XCP_DAQ_STATE_PREPARE_START',0,6,6
	.byte	'XCP_DAQ_STATE_SHIFTING',0,7,6
	.byte	'XCP_DAQ_STATE_STOP_REQUESTED',0,8,6
	.byte	'XCP_DAQ_STATE_READY_TO_RUN',0,9,6
	.byte	'XCP_DAQ_STATE_RUNNING',0,10,0,9
	.byte	'Xcp_DaqState_t',0,2,220,3,2
	.word	1586
	.byte	5,2,223,3,9,4,6
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,6
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,6
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,9
	.byte	'Xcp_Overload_t',0,2,228,3,2
	.word	1914
	.byte	5,2,233,3,9,4,6
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,6
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,6
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,6
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,9
	.byte	'Xcp_IdField_t',0,2,239,3,2
	.word	2048
	.byte	5,2,242,3,9,4,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,6
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,9
	.byte	'Xcp_OdtOptimizationType_t',0,2,250,3,2
	.word	2265
	.byte	5,2,253,3,9,4,6
	.byte	'XCP_CONSISTENCY_ODT',0,0,6
	.byte	'XCP_CONSISTENCY_DAQ',0,1,6
	.byte	'XCP_CONSISTENCY_EVENT',0,2,6
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,9
	.byte	'Xcp_Consistency_t',0,2,131,4,2
	.word	2541
	.byte	5,2,134,4,9,4,6
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,6
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,6
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,6
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,9
	.byte	'Xcp_Timestamp_t',0,2,140,4,2
	.word	2666
	.byte	12,8
	.word	136
	.byte	13,7,0,10,2,174,4,9,12,11
	.byte	'Buffer_au8',0
	.word	2824
	.byte	8,2,35,0,11
	.byte	'Length_u32',0
	.word	908
	.byte	4,2,35,8,0,9
	.byte	'Xcp_Cto8_t',0,2,178,4,2
	.word	2833
	.byte	8
	.word	136
	.byte	10,7,71,9,8,11
	.byte	'SduDataPtr',0
	.word	2900
	.byte	4,2,35,0,11
	.byte	'SduLength',0
	.word	153
	.byte	2,2,35,4,0,14
	.word	2905
	.byte	8
	.word	2950
	.byte	15
	.word	136
	.byte	1,1,16
	.word	2955
	.byte	16
	.word	136
	.byte	16
	.word	136
	.byte	0,8
	.word	2960
	.byte	17,1,1,16
	.word	136
	.byte	16
	.word	136
	.byte	0,8
	.word	2988
	.byte	17,1,1,16
	.word	136
	.byte	0,8
	.word	3007
	.byte	15
	.word	136
	.byte	1,1,16
	.word	136
	.byte	0,8
	.word	3021
	.byte	8
	.word	2905
	.byte	17,1,1,16
	.word	2955
	.byte	16
	.word	3039
	.byte	16
	.word	136
	.byte	0,8
	.word	3044
	.byte	15
	.word	136
	.byte	1,1,16
	.word	136
	.byte	16
	.word	153
	.byte	16
	.word	136
	.byte	0,8
	.word	3068
	.byte	10,8,164,1,9,56,11
	.byte	'TLTransmit_pfct',0
	.word	2983
	.byte	4,2,35,0,11
	.byte	'TLInit_pfct',0
	.word	3002
	.byte	4,2,35,4,11
	.byte	'TLConnect_pfct',0
	.word	3016
	.byte	4,2,35,8,11
	.byte	'TLDisconnect_pfct',0
	.word	3034
	.byte	4,2,35,12,11
	.byte	'TLTransportLayerCmd_pfct',0
	.word	3063
	.byte	4,2,35,16,11
	.byte	'TLGetTxPduId_pfct',0
	.word	3091
	.byte	4,2,35,20,11
	.byte	'MaxCto_u8',0
	.word	136
	.byte	1,2,35,24,11
	.byte	'MaxDto_u16',0
	.word	153
	.byte	2,2,35,26,11
	.byte	'TimestampType_en',0
	.word	2666
	.byte	4,2,35,28,11
	.byte	'IdFieldType_en',0
	.word	2048
	.byte	4,2,35,32,11
	.byte	'OverloadType_en',0
	.word	1914
	.byte	4,2,35,36,11
	.byte	'OdtOptimizationType_en',0
	.word	2265
	.byte	4,2,35,40,11
	.byte	'Consistency_en',0
	.word	2541
	.byte	4,2,35,44,11
	.byte	'PdRam_u32',0
	.word	908
	.byte	4,2,35,48,11
	.byte	'EdRam_u32',0
	.word	908
	.byte	4,2,35,52,0,9
	.byte	'Xcp_PL_TL_Cfg_t',0,8,184,1,2
	.word	3096
	.byte	5,8,188,1,9,4,6
	.byte	'XCP_RAMSECTION_INVALID',0,0,6
	.byte	'XCP_RAMSECTION_PD',0,1,6
	.byte	'XCP_RAMSECTION_ED',0,2,0,9
	.byte	'Xcp_RamSectionType_t',0,8,193,1,2
	.word	3494
	.byte	10,8,195,1,9,12,11
	.byte	'DaqRamPtr_pu8',0
	.word	2900
	.byte	4,2,35,0,11
	.byte	'DaqRamTotalSize_u32',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'RamSectionType_en',0
	.word	3494
	.byte	4,2,35,8,0,9
	.byte	'Xcp_DaqRamSection_Cfg_t',0,8,200,1,2
	.word	3596
	.byte	12,1
	.word	136
	.byte	13,0,0,10,8,203,1,9,8,11
	.byte	'DaqRamFreeSize_u32',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'PLConnected_ab',0
	.word	3715
	.byte	1,2,35,4,0,9
	.byte	'Xcp_DaqRamSections_t',0,8,207,1,2
	.word	3724
	.byte	10,8,230,1,9,4,11
	.byte	'EventChannelDirection_u8',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'EventChannelTimeCycle_u8',0
	.word	136
	.byte	1,2,35,1,11
	.byte	'EventChannelTimeUnit_u8',0
	.word	136
	.byte	1,2,35,2,11
	.byte	'EventChannelPriority_u8',0
	.word	136
	.byte	1,2,35,3,0,9
	.byte	'Xcp_EventChannel_Cfg_t',0,8,236,1,2
	.word	3813
	.byte	12,56
	.word	3096
	.byte	13,0,0,12,12
	.word	3596
	.byte	13,0,0,12,12
	.word	3813
	.byte	13,2,0,10,8,240,1,9,80,11
	.byte	'TlCfg',0
	.word	3986
	.byte	56,2,35,0,11
	.byte	'DaqRamCfg',0
	.word	3995
	.byte	12,2,35,56,11
	.byte	'EventChannelCfg',0
	.word	4004
	.byte	12,2,35,68,0,9
	.byte	'Xcp_PlCfgConst_t',0,8,131,2,2
	.word	4013
	.byte	14
	.word	4013
	.byte	18
	.byte	'Xcp_PlCfgConst',0,8,140,2,31
	.word	4105
	.byte	1,1,9
	.byte	'rba_BswSrv_uint64',0,9,66,28
	.word	939
	.byte	9
	.byte	'Can_IdType',0,10,32,16
	.word	908
	.byte	9
	.byte	'Can_HwHandleType',0,10,43,16
	.word	153
	.byte	10,11,93,9,8,11
	.byte	'Class',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	136
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	908
	.byte	4,2,35,4,0,9
	.byte	'OsTrapInfoType',0,11,97,3
	.word	4206
	.byte	12,68
	.word	908
	.byte	13,16,0,10,11,154,1,9,68,11
	.byte	'store',0
	.word	4286
	.byte	68,2,35,0,0,12,68
	.word	4295
	.byte	13,0,0,9
	.byte	'Os_JumpBufType',0,11,156,1,3
	.word	4317
	.byte	9
	.byte	'Os_StackTraceType',0,11,174,1,18
	.word	908
	.byte	10,11,175,1,9,8,11
	.byte	'sp',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	908
	.byte	4,2,35,4,0,9
	.byte	'Os_StackValueType',0,11,175,1,63
	.word	4377
	.byte	9
	.byte	'Os_StackSizeType',0,11,176,1,27
	.word	4377
	.byte	19,1,1,8
	.word	4462
	.byte	9
	.byte	'Os_VoidVoidFunctionType',0,11,179,1,16
	.word	4465
	.byte	9
	.byte	'ApplicationType',0,11,193,1,23
	.word	136
	.byte	20
	.byte	'Os_ApplicationConfigurationType_s',0,11,198,1,16,2,11
	.byte	'app_id',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,1,0,9
	.byte	'Os_ApplicationConfigurationType',0,11,201,1,3
	.word	4528
	.byte	9
	.byte	'Os_CoreStateType',0,11,203,1,16
	.word	908
	.byte	9
	.byte	'AreaIdType',0,11,204,1,16
	.word	153
	.byte	9
	.byte	'Os_PeripheralAddressType',0,11,212,1,22
	.word	908
	.byte	9
	.byte	'TickType',0,11,221,1,22
	.word	908
	.byte	9
	.byte	'Os_StopwatchTickType',0,11,225,1,22
	.word	908
	.byte	8
	.word	908
	.byte	9
	.byte	'Os_Lockable',0,11,234,1,18
	.word	4770
	.byte	9
	.byte	'CoreIdType',0,11,236,1,16
	.word	153
	.byte	9
	.byte	'SpinlockIdType',0,11,237,1,16
	.word	153
	.byte	5,11,239,1,9,4,6
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,6
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,9
	.byte	'TryToGetSpinlockType',0,11,239,1,74
	.word	4840
	.byte	5,11,174,2,9,4,6
	.byte	'APPLICATION_ACCESSIBLE',0,0,6
	.byte	'APPLICATION_RESTARTING',0,1,6
	.byte	'APPLICATION_TERMINATED',0,2,0,9
	.byte	'ApplicationStateType',0,11,174,2,92
	.word	4933
	.byte	21
	.byte	'void',0,8
	.word	5045
	.byte	17,1,1,16
	.word	136
	.byte	16
	.word	5051
	.byte	0,8
	.word	5056
	.byte	9
	.byte	'Os_FunctionEntryType',0,11,183,2,16
	.word	5070
	.byte	20
	.byte	'Os_MeterInfoType_s',0,11,193,2,16,48,11
	.byte	'elapsed',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	908
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	908
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	4377
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	4377
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	4377
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	4377
	.byte	8,2,35,40,0,9
	.byte	'Os_MeterInfoType',0,11,202,2,3
	.word	5105
	.byte	8
	.word	5105
	.byte	9
	.byte	'Os_MeterInfoRefType',0,11,203,2,50
	.word	5303
	.byte	9
	.byte	'EventMaskType',0,11,206,2,15
	.word	136
	.byte	9
	.byte	'Os_imaskType',0,11,211,2,16
	.word	908
	.byte	20
	.byte	'Os_ISRDynType_s',0,11,213,2,16,48,11
	.byte	'meter',0
	.word	5105
	.byte	48,2,35,0,0,9
	.byte	'Os_ISRDynType',0,11,215,2,3
	.word	5382
	.byte	8
	.word	5382
	.byte	14
	.word	5443
	.byte	20
	.byte	'Os_ISRType_s',0,11,216,2,16,24,11
	.byte	'entry_function',0
	.word	4470
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	5448
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	908
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	4377
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	136
	.byte	1,2,35,21,0,9
	.byte	'Os_ISRType',0,11,223,2,3
	.word	5453
	.byte	8
	.word	4462
	.byte	14
	.word	5453
	.byte	8
	.word	5612
	.byte	9
	.byte	'ISRType',0,11,224,2,46
	.word	5617
	.byte	9
	.byte	'Os_bitmask',0,11,239,2,22
	.word	908
	.byte	9
	.byte	'Os_pset0Type',0,11,240,2,20
	.word	908
	.byte	9
	.byte	'Os_pset1Type',0,11,241,2,20
	.word	908
	.byte	9
	.byte	'Os_pset2Type',0,11,242,2,20
	.word	908
	.byte	22,11,243,2,9,4,11
	.byte	'p0',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	908
	.byte	4,2,35,0,0,9
	.byte	'Os_psetType',0,11,247,2,3
	.word	5725
	.byte	22,11,249,2,9,4,11
	.byte	't0',0
	.word	908
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	908
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	908
	.byte	4,2,35,0,0,9
	.byte	'Os_tpmaskType',0,11,253,2,3
	.word	5789
	.byte	9
	.byte	'Os_ActivationCountType',0,11,254,2,23
	.word	136
	.byte	20
	.byte	'Os_TaskDynType_s',0,11,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	4326
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	5105
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	136
	.byte	1,2,35,116,0,9
	.byte	'Os_TaskDynType',0,11,132,3,3
	.word	5887
	.byte	12,68
	.word	4295
	.byte	13,0,0,8
	.word	5887
	.byte	14
	.word	6013
	.byte	20
	.byte	'Os_TaskType_s',0,11,134,3,16,40,11
	.byte	'dynamic',0
	.word	6018
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	4470
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	5725
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	5789
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	5789
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	153
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	908
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	4377
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	136
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	136
	.byte	1,2,35,38,0,9
	.byte	'Os_TaskType',0,11,146,3,3
	.word	6023
	.byte	14
	.word	6023
	.byte	8
	.word	6273
	.byte	9
	.byte	'TaskType',0,11,147,3,47
	.word	6278
	.byte	23
	.byte	'Os_TaskStateType',0,11,155,3,6,4,6
	.byte	'SUSPENDED',0,0,6
	.byte	'READY',0,1,6
	.byte	'WAITING',0,2,6
	.byte	'RUNNING',0,3,0,9
	.byte	'TaskStateType',0,11,156,3,31
	.word	6301
	.byte	22,11,167,3,3,4,11
	.byte	'tpmask',0
	.word	5789
	.byte	4,2,35,0,0,20
	.byte	'Os_ResourceDynType_s',0,11,166,3,16,4,11
	.byte	'saved_priority',0
	.word	6388
	.byte	4,2,35,0,0,9
	.byte	'Os_ResourceDynType',0,11,170,3,3
	.word	6411
	.byte	8
	.word	6411
	.byte	14
	.word	6491
	.byte	20
	.byte	'Os_ResourceType_s',0,11,171,3,16,12,11
	.byte	'dynamic',0
	.word	6496
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	5789
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,8,0,9
	.byte	'Os_ResourceType',0,11,175,3,3
	.word	6501
	.byte	10,11,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	908
	.byte	4,2,35,8,0,9
	.byte	'AlarmBaseType',0,11,185,3,3
	.word	6600
	.byte	10,11,206,3,9,8,11
	.byte	'Running',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	136
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	908
	.byte	4,2,35,4,0,9
	.byte	'Os_CounterStatusType',0,11,210,3,3
	.word	6695
	.byte	24
	.word	136
	.byte	1,1,8
	.word	6781
	.byte	9
	.byte	'Os_CounterIncrAdvType',0,11,217,3,22
	.word	6788
	.byte	20
	.byte	's_swd',0,11,222,3,12,4,11
	.byte	'count',0
	.word	908
	.byte	4,2,35,0,0,22,11,221,3,3,4,11
	.byte	'sw',0
	.word	6824
	.byte	4,2,35,0,0,20
	.byte	'Os_CounterDynType_s',0,11,220,3,16,4,11
	.byte	'type_dependent',0
	.word	6852
	.byte	4,2,35,0,0,9
	.byte	'Os_CounterDynType',0,11,226,3,3
	.word	6871
	.byte	8
	.word	6871
	.byte	14
	.word	6949
	.byte	20
	.byte	'Os_CounterType_s',0,11,227,3,16,28,11
	.byte	'dynamic',0
	.word	6954
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	6793
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	6600
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	5051
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	136
	.byte	1,2,35,25,0,9
	.byte	'Os_CounterType',0,11,234,3,3
	.word	6959
	.byte	8
	.word	6781
	.byte	14
	.word	6959
	.byte	8
	.word	7111
	.byte	9
	.byte	'CounterType',0,11,235,3,52
	.word	7116
	.byte	23
	.byte	'Os_ScheduleTableStatusType',0,11,240,3,6,4,6
	.byte	'SCHEDULETABLE_STOPPED',0,0,6
	.byte	'SCHEDULETABLE_NEXT',0,1,6
	.byte	'SCHEDULETABLE_WAITING',0,2,6
	.byte	'SCHEDULETABLE_RUNNING',0,3,6
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,9
	.byte	'ScheduleTableStatusType',0,11,241,3,41
	.word	7142
	.byte	14
	.word	.L76-.L31
	.byte	8
	.word	7342
	.byte	9
	.byte	'ScheduleTableType',0,11,128,4,58
	.word	7347
	.byte	20
	.byte	'Os_ScheduleTableDynType_s',0,11,130,4,16,16,11
	.byte	'match',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	7352
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	7142
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	153
	.byte	2,2,35,12,0,8
	.word	7379
	.byte	14
	.word	7472
.L76:
	.byte	20
	.byte	'Os_ScheduleTableType_s',0,11,247,3,16,16,11
	.byte	'dynamic',0
	.word	7477
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	7121
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	136
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	153
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	136
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	136
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	136
	.byte	1,2,35,14,0,9
	.byte	'Os_ScheduleTableType',0,11,255,3,3
	.word	7482
	.byte	14
	.word	7482
	.byte	8
	.word	7662
	.byte	14
	.word	6959
	.byte	8
	.word	7672
	.byte	25
	.word	4775
	.byte	25
	.word	5725
	.byte	25
	.word	5622
	.byte	25
	.word	6283
	.byte	25
	.word	5789
	.byte	25
	.word	136
	.byte	25
	.word	6283
	.byte	20
	.byte	'Os_ControlledCoreType_s',0,11,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	4206
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	7682
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	7687
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	7692
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	7697
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	7702
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	5308
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	5105
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	136
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	7707
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	4377
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	136
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	7712
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	4377
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	136
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	136
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	136
	.byte	1,2,35,110,0,9
	.byte	'Os_ControlledCoreType',0,11,141,7,3
	.word	7717
	.byte	8
	.word	908
	.byte	14
	.word	5453
	.byte	8
	.word	8173
	.byte	14
	.word	6023
	.byte	8
	.word	8183
	.byte	8
	.word	5105
	.byte	20
	.byte	'Os_AnyCoreType_s',0,11,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	908
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	908
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	908
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	908
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	4326
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	136
	.byte	1,2,35,92,0,9
	.byte	'Os_AnyCoreType',0,11,160,7,3
	.word	8198
	.byte	9
	.byte	'Can_TxObjPriorityClassType',0,12,219,3,16
	.word	908
	.byte	20
	.byte	'Can_TxHwObjectConfigType',0,12,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	136
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	908
	.byte	4,2,35,4,0,9
	.byte	'Can_TxHwObjectConfigType',0,12,252,3,3
	.word	8475
	.byte	20
	.byte	'Can_RxHwObjectConfigType',0,12,129,4,16,12,11
	.byte	'MaskRef',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	136
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	136
	.byte	1,2,35,9,0,9
	.byte	'Can_RxHwObjectConfigType',0,12,147,4,3
	.word	8611
	.byte	12,4
	.word	136
	.byte	13,3,0,20
	.byte	'Can_ControllerMOMapConfigType',0,12,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	8751
	.byte	4,2,35,0,0,9
	.byte	'Can_ControllerMOMapConfigType',0,12,184,4,3
	.word	8760
	.byte	20
	.byte	'Can_NPCRValueType',0,12,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	153
	.byte	2,2,35,0,0,9
	.byte	'Can_NPCRValueType',0,12,191,4,3
	.word	8861
	.byte	20
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	153
	.byte	2,2,35,4,0,9
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,198,4,3
	.word	8936
	.byte	14
	.word	8936
	.byte	8
	.word	9101
	.byte	20
	.byte	'Can_BaudrateConfigPtrType',0,12,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	9106
	.byte	4,2,35,0,0,9
	.byte	'Can_BaudrateConfigPtrType',0,12,204,4,3
	.word	9111
	.byte	20
	.byte	'Can_EventHandlingType',0,12,226,4,16,4,11
	.byte	'CanEventType',0
	.word	8751
	.byte	4,2,35,0,0,9
	.byte	'Can_EventHandlingType',0,12,229,4,3
	.word	9211
	.byte	9
	.byte	'Rte_TransformerErrorCode',0,13,130,1,15
	.word	136
	.byte	9
	.byte	'Rte_TransformerClass',0,13,131,1,15
	.word	136
	.byte	10,13,168,1,9,12,11
	.byte	'in',0
	.word	5051
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	5051
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	153
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	136
	.byte	1,2,35,10,0,9
	.byte	'Rte_QDynType',0,13,173,1,3
	.word	9357
	.byte	5,13,175,1,9,4,6
	.byte	'RTE_DRA',0,0,6
	.byte	'RTE_WOWP',0,1,6
	.byte	'RTE_TASK',0,2,6
	.byte	'RTE_ARE',0,3,6
	.byte	'RTE_EV',0,4,6
	.byte	'RTE_MSI',0,5,0,9
	.byte	'Rte_NotificationType',0,13,182,1,3
	.word	9444
	.byte	12,128,8
	.word	136
	.byte	13,255,7,0,9
	.byte	'Impl_NVM_DstPtrType_1024',0,14,50,15
	.word	9542
	.byte	9
	.byte	'CanIf_u32_impl',0,14,69,16
	.word	908
	.byte	9
	.byte	'CanIf_u16_impl',0,14,71,16
	.word	153
	.byte	9
	.byte	'CanIf_u8_impl',0,14,73,15
	.word	136
	.byte	9
	.byte	'CanIf_ControllerModeType_Enum_impl',0,14,88,15
	.word	136
	.byte	9
	.byte	'CanIf_PduModeType_Enum_impl',0,14,90,15
	.word	136
	.byte	10,14,92,9,2,11
	.byte	'DeviceMode',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	136
	.byte	1,2,35,1,0,9
	.byte	'CanIf_ControllerStateType_struct_impl',0,14,95,3
	.word	9733
	.byte	9
	.byte	'CanIf_NotifStatusType_Enum_impl',0,14,100,15
	.word	136
	.byte	9
	.byte	'CanSM_boolean_Impl',0,14,120,15
	.word	136
	.byte	9
	.byte	'CanSM_u8_Impl',0,14,123,15
	.word	136
	.byte	9
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,14,128,1,15
	.word	136
	.byte	9
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,14,132,1,15
	.word	136
	.byte	9
	.byte	'CanSM_u16_Impl',0,14,136,1,16
	.word	153
	.byte	9
	.byte	'CanSM_TimerStateType_Enum_impl',0,14,138,1,15
	.word	136
	.byte	10,14,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	136
	.byte	1,2,35,2,0,9
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,14,143,1,3
	.word	10074
	.byte	9
	.byte	'Com_impl_u16',0,14,154,1,16
	.word	153
	.byte	9
	.byte	'Com_impl_u8',0,14,157,1,15
	.word	136
	.byte	9
	.byte	'ComM_uint32_Impl',0,14,173,1,16
	.word	908
	.byte	9
	.byte	'ComM_uint16_Impl',0,14,175,1,16
	.word	153
	.byte	9
	.byte	'ComM_uint8_Impl',0,14,177,1,15
	.word	136
	.byte	9
	.byte	'ComM_bool_Impl',0,14,179,1,15
	.word	136
	.byte	10,14,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	908
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	908
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	153
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	136
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	136
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	136
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	136
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	136
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	136
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	136
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	136
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	136
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	136
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	136
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	136
	.byte	1,2,35,21,0,9
	.byte	'ComM_ChannelStruct_Impl',0,14,197,1,3
	.word	10306
	.byte	10,14,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	153
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	136
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	136
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	136
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	136
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	136
	.byte	1,2,35,8,0,9
	.byte	'ComM_UserStruct_Impl',0,14,214,1,3
	.word	10810
	.byte	9
	.byte	'Dcm_IOOperationResponseType',0,14,252,1,15
	.word	136
	.byte	9
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	14,138,2,15
	.word	136
	.byte	9
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,14,146,2,15
	.word	136
	.byte	9
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,14,150,2,15
	.word	136
	.byte	9
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,14,154,2,15
	.word	136
	.byte	9
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,14,243,3,34
	.word	9553
	.byte	12,128,8
	.word	136
	.byte	13,255,7,0,9
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,14,246,3,34
	.word	9553
	.byte	5,15,216,1,9,4,6
	.byte	'XCP_BG_IDLE',0,0,6
	.byte	'XCP_BG_CHKSUM',0,1,6
	.byte	'XCP_BG_MEM_WRITE',0,2,6
	.byte	'XCP_BG_REPEAT_CMD',0,3,6
	.byte	'XCP_BG_DO_DISCONNECT',0,4,6
	.byte	'XCP_BG_CANCEL_REQ',0,5,0,9
	.byte	'Xcp_BgActivity_t',0,15,224,1,3
	.word	11628
	.byte	17,1,1,16
	.word	2955
	.byte	16
	.word	136
	.byte	0,8
	.word	11773
	.byte	9
	.byte	'Xcp_CmdFunctionPtr',0,15,230,1,16
	.word	11787
	.byte	10,15,241,1,9,8,11
	.byte	'WritePos_u16',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'ReadPos_u16',0
	.word	153
	.byte	2,2,35,2,11
	.byte	'ReadPos_OdtNum_u16',0
	.word	153
	.byte	2,2,35,4,11
	.byte	'QueSize_u16',0
	.word	153
	.byte	2,2,35,6,0,9
	.byte	'Xcp_Que_t',0,15,247,1,3
	.word	11820
	.byte	10,15,250,1,9,24,11
	.byte	'XcpState_en',0
	.word	1306
	.byte	4,2,35,0,11
	.byte	'ConnectedTlId_u8',0
	.word	136
	.byte	1,2,35,4,11
	.byte	'ResourceProtStatus_u8',0
	.word	136
	.byte	1,2,35,5,11
	.byte	'Mta',0
	.word	1471
	.byte	8,2,35,8,11
	.byte	'MaxDto_u16',0
	.word	153
	.byte	2,2,35,16,11
	.byte	'MaxDtoAligned_u16',0
	.word	153
	.byte	2,2,35,18,11
	.byte	'MaxCto_u8',0
	.word	136
	.byte	1,2,35,20,0,9
	.byte	'Xcp_Session_t',0,15,138,2,2
	.word	11938
	.byte	10,15,149,2,9,12,11
	.byte	'Buffer_au8',0
	.word	2824
	.byte	8,2,35,0,11
	.byte	'Length_u32',0
	.word	908
	.byte	4,2,35,8,0,9
	.byte	'Xcp_CtoMax_t',0,15,153,2,2
	.word	12125
	.byte	12,255,1
	.word	136
	.byte	13,254,1,0,10,15,157,2,9,132,2,11
	.byte	'UploadRunning_b',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'RemainingSize_u8',0
	.word	136
	.byte	1,2,35,1,11
	.byte	'DownloadSize_u8',0
	.word	136
	.byte	1,2,35,2,11
	.byte	'ReceivedSize_u8',0
	.word	136
	.byte	1,2,35,3,11
	.byte	'DownloadBuffer_au8',0
	.word	12194
	.byte	255,1,2,35,4,0,9
	.byte	'Xcp_Mem_t',0,15,178,2,2
	.word	12205
	.byte	10,15,183,2,9,2,11
	.byte	'SeedWaitingKey_b',0
	.word	136
	.byte	1,2,35,0,11
	.byte	'SeedRemaingSize_u8',0
	.word	136
	.byte	1,2,35,1,0,9
	.byte	'Xcp_SeedAndKey_t',0,15,187,2,2
	.word	12362
	.byte	10,15,192,2,9,4,11
	.byte	'BlockSize_u32',0
	.word	908
	.byte	4,2,35,0,0,9
	.byte	'Xcp_Checksum_t',0,15,198,2,2
	.word	12449
	.byte	10,15,203,2,9,18,11
	.byte	'Xcp_Debug_TransmitOkCtr',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'Xcp_Debug_TransmitNotOkCtr',0
	.word	153
	.byte	2,2,35,2,11
	.byte	'Xcp_Debug_SendResTxConfCtr',0
	.word	153
	.byte	2,2,35,4,11
	.byte	'Xcp_Debug_SendResCtr',0
	.word	153
	.byte	2,2,35,6,11
	.byte	'Xcp_Debug_SendEvTxConfCtr',0
	.word	153
	.byte	2,2,35,8,11
	.byte	'Xcp_Debug_SendEvCtr',0
	.word	153
	.byte	2,2,35,10,11
	.byte	'Xcp_Debug_SendDaqTxConfCtr',0
	.word	153
	.byte	2,2,35,12,11
	.byte	'Xcp_Debug_SendDaqCtr',0
	.word	153
	.byte	2,2,35,14,11
	.byte	'Xcp_Debug_TxConfCtr',0
	.word	153
	.byte	2,2,35,16,0,9
	.byte	'Xcp_Debug_t',0,15,216,2,2
	.word	12503
	.byte	10,15,225,2,9,8,11
	.byte	'OdtEntryPos_u16',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'OdtEntryMax_u16',0
	.word	153
	.byte	2,2,35,2,11
	.byte	'DaqListNum_u16',0
	.word	153
	.byte	2,2,35,4,11
	.byte	'AbsOdtNum_u16',0
	.word	153
	.byte	2,2,35,6,0,9
	.byte	'Xcp_SelectedOdtEntry_t',0,15,231,2,2
	.word	12825
	.byte	10,15,234,2,9,6,11
	.byte	'OdtEntryFirst_u16',0
	.word	153
	.byte	2,2,35,0,11
	.byte	'OdtEntryCnt_u8',0
	.word	136
	.byte	1,2,35,2,11
	.byte	'CopyRoutine_u8',0
	.word	136
	.byte	1,2,35,3,11
	.byte	'Length_u16',0
	.word	153
	.byte	2,2,35,4,0,9
	.byte	'Xcp_Odt_t',0,15,240,2,2
	.word	12961
	.byte	25
	.word	136
	.byte	25
	.word	136
	.byte	10,15,254,2,9,24,11
	.byte	'DaqListQue_p',0
	.word	2900
	.byte	4,2,35,0,11
	.byte	'DaqListQuePos',0
	.word	11820
	.byte	8,2,35,4,11
	.byte	'OdtFirst_u16',0
	.word	153
	.byte	2,2,35,12,11
	.byte	'EventChannelNum_u16',0
	.word	153
	.byte	2,2,35,14,11
	.byte	'OdtCnt_u8',0
	.word	136
	.byte	1,2,35,16,11
	.byte	'XcpTxPduId',0
	.word	136
	.byte	1,2,35,17,11
	.byte	'Prescaler_u8',0
	.word	136
	.byte	1,2,35,18,11
	.byte	'CycleCnt_u8',0
	.word	136
	.byte	1,2,35,19,11
	.byte	'Priority_u8',0
	.word	136
	.byte	1,2,35,20,11
	.byte	'Flags_u8',0
	.word	136
	.byte	1,2,35,21,11
	.byte	'Mode_u8',0
	.word	13082
	.byte	1,2,35,22,11
	.byte	'CurrentlyRunning_b',0
	.word	13087
	.byte	1,2,35,23,0,9
	.byte	'Xcp_DaqList_t',0,15,143,3,2
	.word	13092
	.byte	8
	.word	13092
	.byte	8
	.word	12961
	.byte	8
	.word	908
	.byte	8
	.word	153
	.byte	10,15,146,3,9,56,11
	.byte	'DaqList_p',0
	.word	13384
	.byte	4,2,35,0,11
	.byte	'Odt_p',0
	.word	13389
	.byte	4,2,35,4,11
	.byte	'OdtEntryAddress_p',0
	.word	13394
	.byte	4,2,35,8,11
	.byte	'OdtEntrySize_p',0
	.word	2900
	.byte	4,2,35,12,11
	.byte	'PriorityList_p',0
	.word	13399
	.byte	4,2,35,16,11
	.byte	'DaqQue_p',0
	.word	2900
	.byte	4,2,35,20,11
	.byte	'DaqListCnt_u16',0
	.word	153
	.byte	2,2,35,24,11
	.byte	'OdtCnt_u16',0
	.word	153
	.byte	2,2,35,26,11
	.byte	'OdtEntryCnt_u16',0
	.word	153
	.byte	2,2,35,28,11
	.byte	'SelectedOdtEntry',0
	.word	12825
	.byte	8,2,35,30,11
	.byte	'DaqRamPtr_pu8',0
	.word	2900
	.byte	4,2,35,40,11
	.byte	'DaqRamSize_u32',0
	.word	908
	.byte	4,2,35,44,11
	.byte	'DaqListSendingCnt_u16',0
	.word	153
	.byte	2,2,35,48,11
	.byte	'DaqListSending_u16',0
	.word	153
	.byte	2,2,35,50,11
	.byte	'DaqState_en',0
	.word	1586
	.byte	4,2,35,52,0,9
	.byte	'Xcp_DaqConfig_t',0,15,180,3,2
	.word	13404
	.byte	10,15,225,3,9,80,11
	.byte	'Session',0
	.word	11938
	.byte	24,2,35,0,11
	.byte	'DaqConfig',0
	.word	13404
	.byte	56,2,35,24,0,9
	.byte	'Xcp_NoInit_t',0,15,234,3,2
	.word	13785
	.byte	12,8
	.word	3724
	.byte	13,0,0,12,1
	.word	136
	.byte	13,0,0,10,15,236,3,9,12,11
	.byte	'DaqRamSections',0
	.word	13850
	.byte	8,2,35,0,11
	.byte	'DaqTransmissionStopped_b',0
	.word	136
	.byte	1,2,35,8,11
	.byte	'Tl2PlRef_au8',0
	.word	13859
	.byte	1,2,35,9,11
	.byte	'EnabledResources_u8',0
	.word	136
	.byte	1,2,35,10,11
	.byte	'InitStatus_u8',0
	.word	136
	.byte	1,2,35,11,0,9
	.byte	'Xcp_GlobalNoInit_t',0,15,255,3,2
	.word	13868
	.byte	12,80
	.word	13785
	.byte	13,0,0,18
	.byte	'Xcp_NoInit',0,15,158,4,29
	.word	14035
	.byte	1,1,18
	.byte	'Xcp_GlobalNoInit',0,15,159,4,29
	.word	13868
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L32:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,63,12,60,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,4,1,58,15,59,15,57,15,11,15
	.byte	0,0,6,40,0,3,8,28,13,0,0,7,21,0,54,15,0,0,8,15,0,73,19,0,0,9,22,0,3,8,58,15,59,15,57,15,73,19,0,0,10,19
	.byte	1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,1,1,11,15,73,19,0,0,13,33,0,47,15,0
	.byte	0,14,38,0,73,19,0,0,15,21,1,73,19,54,15,39,12,0,0,16,5,0,73,19,0,0,17,21,1,54,15,39,12,0,0,18,52,0,3,8
	.byte	58,15,59,15,57,15,73,19,63,12,60,12,0,0,19,21,0,54,15,39,12,0,0,20,19,1,3,8,58,15,59,15,57,15,11,15,0
	.byte	0,21,59,0,3,8,0,0,22,23,1,58,15,59,15,57,15,11,15,0,0,23,4,1,3,8,58,15,59,15,57,15,11,15,0,0,24,21,0,73
	.byte	19,54,15,39,12,0,0,25,53,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L33:
	.word	.L78-.L77
.L77:
	.half	3
	.word	.L80-.L79
.L79:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Priv.h',0,0,0,0,0
.L80:
.L78:
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_info'
.L34:
	.word	242
	.half	3
	.word	.L35
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L37,.L36
	.byte	2
	.word	.L30
	.byte	3
	.byte	'Xcp_DaqRamRemove',0,1,143,2,6,1,1,1
	.word	.L29,.L49,.L28
	.byte	4
	.byte	'protLayerId',0,1,143,2,29
	.word	.L50,.L51
	.byte	5
	.word	.L29,.L49
	.byte	6
	.byte	'NumRamSection',0,1,149,2,15
	.word	.L52,.L53
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_abbrev'
.L35:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_line'
.L36:
	.word	.L82-.L81
.L81:
	.half	3
	.word	.L84-.L83
.L83:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0,0,0,0,0
.L84:
	.byte	5,22,7,0,5,2
	.word	.L29
	.byte	3,151,2,1,5,65,9
	.half	.L74-.L29
	.byte	1,5,9,9
	.half	.L17-.L74
	.byte	3,2,1,5,40,9
	.half	.L85-.L17
	.byte	1,5,70,9
	.half	.L86-.L85
	.byte	1,5,5,9
	.half	.L87-.L86
	.byte	1,5,7,7,9
	.half	.L88-.L87
	.byte	3,3,1,5,80,9
	.half	.L18-.L88
	.byte	3,123,1,5,65,9
	.half	.L16-.L18
	.byte	1,5,3,7,9
	.half	.L19-.L16
	.byte	3,10,1,5,10,7,9
	.half	.L89-.L19
	.byte	3,11,1,5,41,9
	.half	.L90-.L89
	.byte	1,5,56,9
	.half	.L91-.L90
	.byte	1,5,71,9
	.half	.L92-.L91
	.byte	1,5,5,9
	.half	.L75-.L92
	.byte	1,5,153,1,7,9
	.half	.L93-.L75
	.byte	3,3,1,5,143,1,9
	.half	.L94-.L93
	.byte	1,5,153,1,9
	.half	.L95-.L94
	.byte	1,5,166,1,9
	.half	.L96-.L95
	.byte	1,5,121,9
	.half	.L97-.L96
	.byte	1,5,176,1,9
	.half	.L98-.L97
	.byte	1,5,141,1,9
	.half	.L99-.L98
	.byte	1,5,73,9
	.half	.L100-.L99
	.byte	1,5,57,9
	.half	.L101-.L100
	.byte	3,2,1,5,55,9
	.half	.L102-.L101
	.byte	1,5,53,9
	.half	.L103-.L102
	.byte	3,1,1,5,51,9
	.half	.L104-.L103
	.byte	1,5,58,9
	.half	.L105-.L104
	.byte	3,1,1,5,56,9
	.half	.L106-.L105
	.byte	1,5,84,9
	.half	.L107-.L106
	.byte	3,2,1,5,82,9
	.half	.L108-.L107
	.byte	1,5,191,1,9
	.half	.L109-.L108
	.byte	3,122,1,5,7,9
	.half	.L23-.L109
	.byte	3,10,1,5,1,9
	.half	.L20-.L23
	.byte	3,8,1,7,9
	.half	.L38-.L20
	.byte	0,1,1
.L82:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_ranges'
.L37:
	.word	-1,.L29,0,.L38-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_info'
.L39:
	.word	288
	.half	3
	.word	.L40
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L42,.L41
	.byte	2
	.word	.L30
	.byte	3
	.byte	'Xcp_DaqRamSetRam',0,1,45,15
	.word	.L54
	.byte	1,1,1
	.word	.L25,.L55,.L24
	.byte	4
	.byte	'protLayerId',0,1,45,38
	.word	.L50,.L56
	.byte	5
	.word	.L25,.L55
	.byte	6
	.byte	'NumRamSection',0,1,51,9
	.word	.L50,.L57
	.byte	6
	.byte	'Error',0,1,52,17
	.word	.L54,.L58
	.byte	6
	.byte	'EdRamRequested',0,1,53,11
	.word	.L50,.L59
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_abbrev'
.L40:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_line'
.L41:
	.word	.L111-.L110
.L110:
	.half	3
	.word	.L113-.L112
.L112:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0,0,0,0,0
.L113:
	.byte	5,15,7,0,5,2
	.word	.L25
	.byte	3,44,1,5,17,9
	.half	.L66-.L25
	.byte	3,12,1,5,11,9
	.half	.L67-.L66
	.byte	3,24,1,5,10,9
	.half	.L68-.L67
	.byte	3,23,1,5,32,7,9
	.half	.L114-.L68
	.byte	3,1,1,5,31,9
	.half	.L115-.L114
	.byte	1,5,11,9
	.half	.L116-.L115
	.byte	1,5,31,9
	.half	.L117-.L116
	.byte	1,5,62,9
	.half	.L118-.L117
	.byte	1,5,73,9
	.half	.L119-.L118
	.byte	1,5,22,7,9
	.half	.L120-.L119
	.byte	3,3,1,5,64,9
	.half	.L65-.L120
	.byte	3,1,1,5,5,9
	.half	.L2-.L65
	.byte	3,4,1,5,13,7,9
	.half	.L121-.L2
	.byte	3,3,1,5,81,9
	.half	.L122-.L121
	.byte	3,11,1,5,80,9
	.half	.L123-.L122
	.byte	1,5,60,9
	.half	.L124-.L123
	.byte	1,5,80,9
	.half	.L125-.L124
	.byte	1,5,111,9
	.half	.L126-.L125
	.byte	1,5,58,9
	.half	.L127-.L126
	.byte	1,5,16,9
	.half	.L4-.L127
	.byte	3,8,1,5,3,9
	.half	.L128-.L4
	.byte	1,5,73,7,9
	.half	.L129-.L128
	.byte	3,4,1,5,104,9
	.half	.L130-.L129
	.byte	1,5,151,1,9
	.half	.L131-.L130
	.byte	1,5,141,1,9
	.half	.L132-.L131
	.byte	1,5,151,1,9
	.half	.L133-.L132
	.byte	1,5,119,9
	.half	.L134-.L133
	.byte	1,5,174,1,9
	.half	.L135-.L134
	.byte	1,5,139,1,9
	.half	.L136-.L135
	.byte	1,5,71,9
	.half	.L137-.L136
	.byte	1,5,28,9
	.half	.L138-.L137
	.byte	3,33,1,5,79,9
	.half	.L139-.L138
	.byte	1,5,55,9
	.half	.L140-.L139
	.byte	1,5,79,9
	.half	.L141-.L140
	.byte	1,5,94,9
	.half	.L142-.L141
	.byte	1,5,53,9
	.half	.L143-.L142
	.byte	1,5,66,9
	.half	.L144-.L143
	.byte	3,4,1,5,82,9
	.half	.L145-.L144
	.byte	1,5,80,9
	.half	.L146-.L145
	.byte	1,5,109,9
	.half	.L147-.L146
	.byte	3,4,1,5,49,9
	.half	.L148-.L147
	.byte	1,5,42,9
	.half	.L149-.L148
	.byte	3,2,1,5,5,9
	.half	.L150-.L149
	.byte	1,5,7,7,9
	.half	.L7-.L150
	.byte	3,2,1,5,3,9
	.half	.L5-.L7
	.byte	3,7,1,5,1,9
	.half	.L8-.L5
	.byte	3,1,1,7,9
	.half	.L43-.L8
	.byte	0,1,1
.L111:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_ranges'
.L42:
	.word	-1,.L25,0,.L43-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_info'
.L44:
	.word	296
	.half	3
	.word	.L45
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L47,.L46
	.byte	2
	.word	.L30
	.byte	3
	.byte	'Xcp_DaqRamFindRamSection',0,1,203,1,14
	.word	.L50
	.byte	1,1
	.word	.L27,.L60,.L26
	.byte	4
	.byte	'EdRamRequested',0,1,203,1,47
	.word	.L50,.L61
	.byte	4
	.byte	'protLayerId',0,1,203,1,69
	.word	.L50,.L62
	.byte	5
	.word	.L27,.L60
	.byte	6
	.byte	'NumRamSection',0,1,209,1,9
	.word	.L50,.L63
	.byte	6
	.byte	'i',0,1,210,1,9
	.word	.L50,.L64
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_abbrev'
.L45:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_line'
.L46:
	.word	.L152-.L151
.L151:
	.half	3
	.word	.L154-.L153
.L153:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_DaqRam.c',0,0,0,0,0
.L154:
	.byte	5,17,7,0,5,2
	.word	.L27
	.byte	3,212,1,1,5,10,9
	.half	.L71-.L27
	.byte	3,24,1,5,41,9
	.half	.L72-.L71
	.byte	1,5,14,9
	.half	.L10-.L72
	.byte	3,3,1,5,15,7,9
	.half	.L155-.L10
	.byte	3,1,1,5,39,9
	.half	.L156-.L155
	.byte	1,5,42,9
	.half	.L157-.L156
	.byte	1,5,61,9
	.half	.L158-.L157
	.byte	1,5,15,7,9
	.half	.L159-.L158
	.byte	3,1,1,5,46,9
	.half	.L160-.L159
	.byte	1,5,49,9
	.half	.L161-.L160
	.byte	1,5,93,9
	.half	.L162-.L161
	.byte	1,5,92,9
	.half	.L163-.L162
	.byte	1,5,123,9
	.half	.L164-.L163
	.byte	1,5,69,9
	.half	.L165-.L164
	.byte	1,5,21,7,9
	.half	.L166-.L165
	.byte	3,11,1,5,7,9
	.half	.L167-.L166
	.byte	3,1,1,5,44,9
	.half	.L11-.L167
	.byte	3,111,1,5,41,9
	.half	.L9-.L11
	.byte	1,5,3,7,9
	.half	.L14-.L9
	.byte	3,24,1,5,1,9
	.half	.L15-.L14
	.byte	3,1,1,7,9
	.half	.L48-.L15
	.byte	0,1,1
.L152:
	.sdecl	'.debug_ranges',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_ranges'
.L47:
	.word	-1,.L27,0,.L48-.L27,0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L27,0,.L60-.L27
	.half	1
	.byte	84
	.word	0,0
.L63:
	.word	-1,.L27,.L71-.L27,.L60-.L27
	.half	1
	.byte	82
	.word	0,0
.L26:
	.word	-1,.L27,0,.L60-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L64:
	.word	-1,.L27,.L72-.L27,.L60-.L27
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L62:
	.word	-1,.L27,0,.L60-.L27
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_loc'
.L53:
	.word	-1,.L29,.L74-.L29,.L75-.L29
	.half	1
	.byte	95
	.word	0,0
.L28:
	.word	-1,.L29,0,.L49-.L29
	.half	2
	.byte	138,0
	.word	0,0
.L51:
	.word	-1,.L29,0,.L73-.L29
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L25,.L65-.L25,.L2-.L25
	.half	1
	.byte	84
	.word	0,0
.L58:
	.word	-1,.L25,.L68-.L25,.L55-.L25
	.half	1
	.byte	89
	.word	.L70-.L25,.L55-.L25
	.half	1
	.byte	82
	.word	0,0
.L57:
	.word	-1,.L25,.L67-.L25,.L5-.L25
	.half	1
	.byte	82
	.word	0,0
.L24:
	.word	-1,.L25,0,.L55-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L56:
	.word	-1,.L25,0,.L65-.L25
	.half	1
	.byte	84
	.word	.L66-.L25,.L55-.L25
	.half	1
	.byte	88
	.word	.L69-.L25,.L2-.L25
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L168:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqRamSetRam')
	.sect	'.debug_frame'
	.word	12
	.word	.L168,.L25,.L55-.L25
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqRamFindRamSection')
	.sect	'.debug_frame'
	.word	24
	.word	.L168,.L27,.L60-.L27
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Xcp_DaqRamRemove')
	.sect	'.debug_frame'
	.word	12
	.word	.L168,.L29,.L49-.L29

; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   323  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   324  #if (XCP_DAQRAM_SHIFTING == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   325  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   326  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   327  This trigger function decides, whether a protocol layer's daq ram has to be shifted.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   328  \param[in]  XcpPacket     pointer to Xcp Cmd Packet copied for later response
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   329  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   330  \return     TRUE: daq ram will be shifted
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   331  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   332  boolean Xcp_DaqRamTriggerMovePL(const PduInfoType* XcpPacket, uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   333  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   334    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   335    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   336  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   337    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   338    uint32  PLsize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   339    uint32  FreedSize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   340    uint8_least  NumRamSection;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   341    boolean shifting;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   342  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   343  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   344    PLsize = Xcp_DaqRamCalc(0, 0, 0, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   345    /* FreedSize unsigned, because dynamic RAM must be greater or same size as PL, otherwise ERR_MEM_OVERFLOW during DAQ configuration */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   346    FreedSize = Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 - PLsize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   347  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   348    for (NumRamSection = 0; NumRamSection < XCP_MAX_DAQRAMSECTIONS; NumRamSection++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   349    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   350      if (Xcp_GlobalNoInit.DaqRamSections[NumRamSection].PLConnected_ab[protLayerId] == TRUE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   351      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   352        /* ram section found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   353        break;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   354      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   355    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   356  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   357    XCP_DET_REPORT_ERROR_RET((NumRamSection >= XCP_MAX_DAQRAMSECTIONS), XCP_DAQRAM_SID, XCP_E_DAQRAM_INCONSISTENCY, FALSE);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   358  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   359    XCP_DET_REPORT_ERROR_RET((Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 != protLayerId), XCP_DAQRAM_SID, XCP_E_DAQRAM_INCONSISTENCY, FALSE);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   360    SchM_Enter_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   361  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   362    /* only one shifting is allowed at a time, shall be ensured by setting the PlInDaqConfig to this PL */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   363    if(   (Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8 != Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   364       && (FreedSize != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   365      )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   366    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   367      shifting = TRUE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   368  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   369      /* store the length of Cmd Packet */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   370      Xcp_GlobalNoInit.DaqRamMove.XcpPacket.Length_u32 = XcpPacket->SduLength;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   371      /* Copy the command packet to trigger response later */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   372      /* MR12 DIR 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   373      Xcp_MemCopy(Xcp_GlobalNoInit.DaqRamMove.XcpPacket.Buffer_au8, XcpPacket->SduDataPtr, XCP_MIN(XcpPacket->SduLength, 8u));
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   374      /* store necessary data for the move routine */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   375      /* MR12 RULE 11.5, 1.1 VIOLATION: The calling layers ensure correct alignment.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   376                                        Casting over void* is necessary as otherwise some compilers complain */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   377      Xcp_GlobalNoInit.DaqRamMove.source_pu32 = (uint32*) ((void*) Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   378      /* MR12 RULE 11.5, 1.1 VIOLATION: The calling layers ensure correct alignment.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   379                                        Casting over void* is necessary as otherwise some compilers complain */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   380      Xcp_GlobalNoInit.DaqRamMove.destination_pu32 = (uint32*) ((void*)&(Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamPtr_pu8[Xcp_PlCfgConst.DaqRamCfg[NumRamSection].DaqRamTotalSize_u32 - PLsize]));
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   381      Xcp_GlobalNoInit.DaqRamMove.totalSize_u32 = PLsize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   382      /* prio list and queue memory does not need to be moved, prio list is not 4 byte aligned */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   383      /* MR12 RULE 11.4 VIOLATION: Cast from pointer to XCP_ADDR_TYPE is OK as this type is able to store the address (see type definition) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   384      Xcp_GlobalNoInit.DaqRamMove.moveSize_u32 = XCP_MACHINE_ALIGN((XCP_ADDR_TYPE) Xcp_NoInit[protLayerId].DaqConfig.PriorityList_p) - (XCP_ADDR_TYPE) Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   385  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   386      /* remaining size must be set at last, this is trigger for MainFunction */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   387      Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 = Xcp_GlobalNoInit.DaqRamMove.moveSize_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   388    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   389    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   390    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   391      /* no shift required */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   392      shifting = FALSE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   393      /* daq config complete. enable other protocol layers to start daq configuration */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   394      Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 = XCP_INVALID_PROTLAYER_ID;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   395    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   396  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   397    /* shrink the protocol layer to the smallest size, can only be done under lock */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   398    Xcp_NoInit[protLayerId].DaqConfig.DaqRamSize_u32 = PLsize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   399    Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 = Xcp_GlobalNoInit.DaqRamSections[NumRamSection].DaqRamFreeSize_u32 + FreedSize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   400    SchM_Exit_Xcp_DaqRam();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   401  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   402    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   403    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   404    return shifting;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   405  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   406  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   407  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   408  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   409  This function shifts the daq memory piece by piece (slices). It determines the protocol layer to \n
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   410  shift by the global structure Xcp_GlobalNoInit.DaqRamMove
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   411  \param[in]  -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   412  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   413  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   414  void Xcp_DaqRamMainMovePL(void)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   415  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   416    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   417    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   418  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   419    /* checking the trigger */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   420    if (Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 > 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   421    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   422      /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   423      uint32 slice_size;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   424      uint32 slice_pos;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   425      uint32 i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   426  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   427      XCP_DET_REPORT_ERROR( (Xcp_GlobalNoInit.DaqRamMove.destination_pu32 <= Xcp_GlobalNoInit.DaqRamMove.source_pu32), XCP_DAQRAM_SID, XCP_E_DAQRAM_SHIFTING );
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   428  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   429      slice_size = Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   430  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   431      /* reduce size to be shifted this call to the configured max */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   432      if(slice_size > XCP_DAQRAM_MAX_SHIFT_SIZE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   433      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   434        slice_size = XCP_DAQRAM_MAX_SHIFT_SIZE;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   435      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   436  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   437      /* DaqRam is shifted forward.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   438       * This means the whole memory area is moved to a higher address.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   439       *
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   440       * The moving is started at the end of the memory area and then continues until it reaches the start of the area.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   441       * It is important to do it this way as it is not known if the two areas are distinct.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   442       * If they overlap and the move is started at the beginning of the area, the move would overwrite data.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   443       *
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   444       * Moving areas backward is currently not supported, as there is no usecase for it.
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   445       * Hint: In this case, the movement has to begin at the start of the area - otherwise it is again possible to overwrite data
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   446       */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   447      /* start shifting with the last bytes */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   448      slice_pos = (Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32)/4u;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   449  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   450      for (i = 1; i <= (slice_size/4u); i++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   451      { /* move 4 byte wise */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   452        Xcp_GlobalNoInit.DaqRamMove.destination_pu32[slice_pos - i] = Xcp_GlobalNoInit.DaqRamMove.source_pu32[slice_pos - i];
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   453      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   454  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   455      /* adjust bytes to be moved */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   456      Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 = Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 - slice_size;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   457  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   458      if (Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   459      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   460        /* moving finished */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   461        Xcp_DaqRamReturn();
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   462      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   463      else if(Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 != XCP_INVALID_PROTLAYER_ID)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   464      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   465        /* send EV_CMD_PENDING event */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   466        Xcp_SendEv_Code(XCP_EV_CMD_PENDING, Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   467      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   468      else
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   469      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   470         /* do nothing, only to remove misra warning */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   471      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   472  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   473    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   474  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   475    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   476    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   477  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   478  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   479  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   480  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   481  This function cancels the daq ram shifting, leaving an invalid daq config
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   482  \param[in]  protLayerId   Protocol Layer Id
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   483  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   484  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   485  void Xcp_DaqRamResetShift(uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   486  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   487    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   488    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   489  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   490    if ( (Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 == protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   491       &&
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   492         (  (Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 > 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   493         || (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en == XCP_DAQ_STATE_SHIFTING)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   494         )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   495       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   496    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   497    Xcp_GlobalNoInit.DaqRamMove.remainingSize_u32 = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   498    Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_NO_DAQ;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   499    Xcp_DaqRamRemove(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   500    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   501  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   502    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   503    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   504  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   505  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   506  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   507  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   508  * Local functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   509  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   510  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   511  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   512  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   513  This function triggers another StartStopDaqList command to create a response after the daq
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   514  shifting is completely finished
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   515  \param[in]  -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   516  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   517  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   518  static void Xcp_DaqRamReturn(void)
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   519  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   520    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   521    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   522  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   523    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   524    PduInfoType XcpPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   525    uint8 protLayerId;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   526  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   527    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   528    protLayerId = Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   529  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   530    /* move protocol layer pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   531    Xcp_NoInit[protLayerId].DaqConfig.DaqRamPtr_pu8 = (uint8*) Xcp_GlobalNoInit.DaqRamMove.destination_pu32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   532  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   533    /* call Xcp_DaqRamCalc to reset daq, odt and odtentry pointers, return value not needed */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   534    (void)Xcp_DaqRamCalc(0, 0, 0, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   535  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   536    /* prepare command packet to stimulate response */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   537    XcpPacket.SduDataPtr = Xcp_GlobalNoInit.DaqRamMove.XcpPacket.Buffer_au8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   538    XcpPacket.SduLength  = Xcp_GlobalNoInit.DaqRamMove.XcpPacket.Length_u32;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   539    Xcp_NoInit[protLayerId].DaqConfig.DaqState_en = XCP_DAQ_STATE_PREPARE_START;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   540  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   541    /* Trigger command again, now shifting is finished */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   542    Xcp_ReceiveCommand(&XcpPacket, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   543  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   544    /* daq config shifting complete. enable other protocol layers to start daq configuration */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   545    Xcp_GlobalNoInit.DaqConfigActiveOnPl_u8 = XCP_INVALID_PROTLAYER_ID;
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   546  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   547    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   548    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   549  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   550  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   551  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   552  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   553  /* ------------------------------------------------------------------------ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   554  /* End section for code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   555  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   556  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   557  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   558  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   559  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   560  
; BSW\src\BSW\Gen\Xcp\src\Xcp_DaqRam.c	   561  

	; Module end
