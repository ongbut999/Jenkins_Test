	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc17500a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Stim.src BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Stim.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Stim.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	13514
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Stim.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	134
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	136
	.byte	5
	.byte	'char',0,1,6,4
	.byte	'sint8',0,2,76,25
	.word	159
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,2,81,25
	.word	181
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,91,25
	.word	212
	.byte	5
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,2,106,24
	.word	249
	.byte	5
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,2,111,30
	.word	280
	.byte	4
	.byte	'boolean',0,2,127,25
	.word	181
	.byte	4
	.byte	'StatusType',0,3,191,1,27
	.word	181
	.byte	4
	.byte	'Std_ReturnType',0,3,199,1,15
	.word	181
	.byte	6,3,206,1,9,8,7
	.byte	'vendorID',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	212
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	181
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	181
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	181
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,3,213,1,3
	.word	381
	.byte	4
	.byte	'PduIdType',0,4,22,19
	.word	212
	.byte	4
	.byte	'PduLengthType',0,4,26,19
	.word	212
	.byte	8,5,113,9,4,9
	.byte	'TP_DATACONF',0,0,9
	.byte	'TP_DATARETRY',0,1,9
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,118,3
	.word	571
	.byte	8,6,225,1,9,4,9
	.byte	'XCP_STATE_DISCONNECTED',0,0,9
	.byte	'XCP_STATE_DISCONNECTING',0,1,9
	.byte	'XCP_STATE_CONNECTED',0,2,9
	.byte	'XCP_STATE_RESUME',0,3,9
	.byte	'XCP_STATE_DISABLED',0,240,1,0,4
	.byte	'Xcp_State_t',0,6,231,1,2
	.word	647
	.byte	4
	.byte	'Xcp_AddrValue',0,6,165,3,23
	.word	249
	.byte	6,6,168,3,9,8,7
	.byte	'AddrValue',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'Extension',0
	.word	181
	.byte	1,2,35,4,0,4
	.byte	'Xcp_AddrType_t',0,6,172,3,3
	.word	812
	.byte	4
	.byte	'Xcp_PduIdType',0,6,174,3,15
	.word	181
	.byte	8,6,177,3,9,4,9
	.byte	'XCP_ERR_CMD_SYNCH',0,0,9
	.byte	'XCP_ERR_CMD_BUSY',0,16,9
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,9
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,9
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,9
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,9
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,9
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,9
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,9
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,9
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,9
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,9
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,9
	.byte	'XCP_ERR_SEQUENCE',0,41,9
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,9
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,9
	.byte	'XCP_ERR_GENERIC',0,49,9
	.byte	'XCP_ERR_VERIFY',0,50,9
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,9
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,9
	.byte	'XCP_REPEAT_COMMAND',0,252,1,9
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,9
	.byte	'XCP_NO_RESPONSE',0,254,1,9
	.byte	'XCP_NO_ERROR',0,255,1,0,4
	.byte	'Xcp_ErrorCode',0,6,204,3,2
	.word	904
	.byte	8,6,207,3,9,4,9
	.byte	'XCP_DAQ_STATE_NO_DAQ',0,0,9
	.byte	'XCP_DAQ_STATE_FREE_DAQ',0,1,9
	.byte	'XCP_DAQ_STATE_ALLOC_DAQ',0,2,9
	.byte	'XCP_DAQ_STATE_ALLOC_ODT',0,3,9
	.byte	'XCP_DAQ_STATE_ALLOC_ODT_ENTRY',0,4,9
	.byte	'XCP_DAQ_STATE_WRITE_DAQ',0,5,9
	.byte	'XCP_DAQ_STATE_PREPARE_START',0,6,9
	.byte	'XCP_DAQ_STATE_SHIFTING',0,7,9
	.byte	'XCP_DAQ_STATE_STOP_REQUESTED',0,8,9
	.byte	'XCP_DAQ_STATE_READY_TO_RUN',0,9,9
	.byte	'XCP_DAQ_STATE_RUNNING',0,10,0,4
	.byte	'Xcp_DaqState_t',0,6,220,3,2
	.word	1468
	.byte	8,6,223,3,9,4,9
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,9
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,9
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,4
	.byte	'Xcp_Overload_t',0,6,228,3,2
	.word	1796
	.byte	8,6,233,3,9,4,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,9
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,4
	.byte	'Xcp_IdField_t',0,6,239,3,2
	.word	1930
	.byte	8,6,242,3,9,4,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,9
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,4
	.byte	'Xcp_OdtOptimizationType_t',0,6,250,3,2
	.word	2147
	.byte	8,6,253,3,9,4,9
	.byte	'XCP_CONSISTENCY_ODT',0,0,9
	.byte	'XCP_CONSISTENCY_DAQ',0,1,9
	.byte	'XCP_CONSISTENCY_EVENT',0,2,9
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,4
	.byte	'Xcp_Consistency_t',0,6,131,4,2
	.word	2423
	.byte	8,6,134,4,9,4,9
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,9
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,9
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,9
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,4
	.byte	'Xcp_Timestamp_t',0,6,140,4,2
	.word	2548
	.byte	10,8
	.word	181
	.byte	11,7,0,6,6,174,4,9,12,7
	.byte	'Buffer_au8',0
	.word	2706
	.byte	8,2,35,0,7
	.byte	'Length_u32',0
	.word	249
	.byte	4,2,35,8,0,4
	.byte	'Xcp_Cto8_t',0,6,178,4,2
	.word	2715
	.byte	3
	.word	181
	.byte	6,5,71,9,8,7
	.byte	'SduDataPtr',0
	.word	2782
	.byte	4,2,35,0,7
	.byte	'SduLength',0
	.word	212
	.byte	2,2,35,4,0,12
	.word	2787
	.byte	3
	.word	2832
	.byte	13
	.word	181
	.byte	1,1,14
	.word	2837
	.byte	14
	.word	181
	.byte	14
	.word	181
	.byte	0,3
	.word	2842
	.byte	15,1,1,14
	.word	181
	.byte	14
	.word	181
	.byte	0,3
	.word	2870
	.byte	15,1,1,14
	.word	181
	.byte	0,3
	.word	2889
	.byte	13
	.word	181
	.byte	1,1,14
	.word	181
	.byte	0,3
	.word	2903
	.byte	3
	.word	2787
	.byte	15,1,1,14
	.word	2837
	.byte	14
	.word	2921
	.byte	14
	.word	181
	.byte	0,3
	.word	2926
	.byte	13
	.word	181
	.byte	1,1,14
	.word	181
	.byte	14
	.word	212
	.byte	14
	.word	181
	.byte	0,3
	.word	2950
	.byte	6,7,164,1,9,56,7
	.byte	'TLTransmit_pfct',0
	.word	2865
	.byte	4,2,35,0,7
	.byte	'TLInit_pfct',0
	.word	2884
	.byte	4,2,35,4,7
	.byte	'TLConnect_pfct',0
	.word	2898
	.byte	4,2,35,8,7
	.byte	'TLDisconnect_pfct',0
	.word	2916
	.byte	4,2,35,12,7
	.byte	'TLTransportLayerCmd_pfct',0
	.word	2945
	.byte	4,2,35,16,7
	.byte	'TLGetTxPduId_pfct',0
	.word	2973
	.byte	4,2,35,20,7
	.byte	'MaxCto_u8',0
	.word	181
	.byte	1,2,35,24,7
	.byte	'MaxDto_u16',0
	.word	212
	.byte	2,2,35,26,7
	.byte	'TimestampType_en',0
	.word	2548
	.byte	4,2,35,28,7
	.byte	'IdFieldType_en',0
	.word	1930
	.byte	4,2,35,32,7
	.byte	'OverloadType_en',0
	.word	1796
	.byte	4,2,35,36,7
	.byte	'OdtOptimizationType_en',0
	.word	2147
	.byte	4,2,35,40,7
	.byte	'Consistency_en',0
	.word	2423
	.byte	4,2,35,44,7
	.byte	'PdRam_u32',0
	.word	249
	.byte	4,2,35,48,7
	.byte	'EdRam_u32',0
	.word	249
	.byte	4,2,35,52,0,4
	.byte	'Xcp_PL_TL_Cfg_t',0,7,184,1,2
	.word	2978
	.byte	8,7,188,1,9,4,9
	.byte	'XCP_RAMSECTION_INVALID',0,0,9
	.byte	'XCP_RAMSECTION_PD',0,1,9
	.byte	'XCP_RAMSECTION_ED',0,2,0,4
	.byte	'Xcp_RamSectionType_t',0,7,193,1,2
	.word	3376
	.byte	6,7,195,1,9,12,7
	.byte	'DaqRamPtr_pu8',0
	.word	2782
	.byte	4,2,35,0,7
	.byte	'DaqRamTotalSize_u32',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'RamSectionType_en',0
	.word	3376
	.byte	4,2,35,8,0,4
	.byte	'Xcp_DaqRamSection_Cfg_t',0,7,200,1,2
	.word	3478
	.byte	10,1
	.word	181
	.byte	11,0,0,6,7,203,1,9,8,7
	.byte	'DaqRamFreeSize_u32',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'PLConnected_ab',0
	.word	3597
	.byte	1,2,35,4,0,4
	.byte	'Xcp_DaqRamSections_t',0,7,207,1,2
	.word	3606
	.byte	6,7,230,1,9,4,7
	.byte	'EventChannelDirection_u8',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'EventChannelTimeCycle_u8',0
	.word	181
	.byte	1,2,35,1,7
	.byte	'EventChannelTimeUnit_u8',0
	.word	181
	.byte	1,2,35,2,7
	.byte	'EventChannelPriority_u8',0
	.word	181
	.byte	1,2,35,3,0,4
	.byte	'Xcp_EventChannel_Cfg_t',0,7,236,1,2
	.word	3695
	.byte	4
	.byte	'rba_BswSrv_uint64',0,8,66,28
	.word	280
	.byte	4
	.byte	'Can_IdType',0,9,32,16
	.word	249
	.byte	4
	.byte	'Can_HwHandleType',0,9,43,16
	.word	212
	.byte	6,10,93,9,8,7
	.byte	'Class',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	181
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	249
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,10,97,3
	.word	3938
	.byte	10,68
	.word	249
	.byte	11,16,0,6,10,154,1,9,68,7
	.byte	'store',0
	.word	4018
	.byte	68,2,35,0,0,10,68
	.word	4027
	.byte	11,0,0,4
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	4049
	.byte	4
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	249
	.byte	6,10,175,1,9,8,7
	.byte	'sp',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	249
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	4109
	.byte	4
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	4109
	.byte	16,1,1,3
	.word	4194
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	4197
	.byte	4
	.byte	'ApplicationType',0,10,193,1,23
	.word	181
	.byte	17
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,7
	.byte	'app_id',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	4260
	.byte	4
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	249
	.byte	4
	.byte	'AreaIdType',0,10,204,1,16
	.word	212
	.byte	4
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	249
	.byte	4
	.byte	'TickType',0,10,221,1,22
	.word	249
	.byte	4
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	249
	.byte	3
	.word	249
	.byte	4
	.byte	'Os_Lockable',0,10,234,1,18
	.word	4502
	.byte	4
	.byte	'CoreIdType',0,10,236,1,16
	.word	212
	.byte	4
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	212
	.byte	8,10,239,1,9,4,9
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,9
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	4572
	.byte	8,10,174,2,9,4,9
	.byte	'APPLICATION_ACCESSIBLE',0,0,9
	.byte	'APPLICATION_RESTARTING',0,1,9
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	4665
	.byte	18
	.byte	'void',0,3
	.word	4777
	.byte	15,1,1,14
	.word	181
	.byte	14
	.word	4783
	.byte	0,3
	.word	4788
	.byte	4
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	4802
	.byte	17
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,7
	.byte	'elapsed',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	249
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	249
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	4109
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	4109
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	4109
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	4109
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	4837
	.byte	3
	.word	4837
	.byte	4
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	5035
	.byte	4
	.byte	'EventMaskType',0,10,206,2,15
	.word	181
	.byte	4
	.byte	'Os_imaskType',0,10,211,2,16
	.word	249
	.byte	17
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,7
	.byte	'meter',0
	.word	4837
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	5114
	.byte	3
	.word	5114
	.byte	12
	.word	5175
	.byte	17
	.byte	'Os_ISRType_s',0,10,216,2,16,24,7
	.byte	'entry_function',0
	.word	4202
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	5180
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	249
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	4109
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	181
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,10,223,2,3
	.word	5185
	.byte	3
	.word	4194
	.byte	12
	.word	5185
	.byte	3
	.word	5344
	.byte	4
	.byte	'ISRType',0,10,224,2,46
	.word	5349
	.byte	4
	.byte	'Os_bitmask',0,10,239,2,22
	.word	249
	.byte	4
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	249
	.byte	4
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	249
	.byte	4
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	249
	.byte	19,10,243,2,9,4,7
	.byte	'p0',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	249
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,10,247,2,3
	.word	5457
	.byte	19,10,249,2,9,4,7
	.byte	't0',0
	.word	249
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	249
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	249
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	5521
	.byte	4
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	181
	.byte	17
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	4058
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	4837
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	181
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	5619
	.byte	10,68
	.word	4027
	.byte	11,0,0,3
	.word	5619
	.byte	12
	.word	5745
	.byte	17
	.byte	'Os_TaskType_s',0,10,134,3,16,40,7
	.byte	'dynamic',0
	.word	5750
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	4202
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	5457
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	5521
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	5521
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	212
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	249
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	4109
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	181
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	181
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,10,146,3,3
	.word	5755
	.byte	12
	.word	5755
	.byte	3
	.word	6005
	.byte	4
	.byte	'TaskType',0,10,147,3,47
	.word	6010
	.byte	20
	.byte	'Os_TaskStateType',0,10,155,3,6,4,9
	.byte	'SUSPENDED',0,0,9
	.byte	'READY',0,1,9
	.byte	'WAITING',0,2,9
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,10,156,3,31
	.word	6033
	.byte	19,10,167,3,3,4,7
	.byte	'tpmask',0
	.word	5521
	.byte	4,2,35,0,0,17
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,7
	.byte	'saved_priority',0
	.word	6120
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	6143
	.byte	3
	.word	6143
	.byte	12
	.word	6223
	.byte	17
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,7
	.byte	'dynamic',0
	.word	6228
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	5521
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	6233
	.byte	6,10,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	249
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	6332
	.byte	6,10,206,3,9,8,7
	.byte	'Running',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	181
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	249
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	6427
	.byte	21
	.word	181
	.byte	1,1,3
	.word	6513
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	6520
	.byte	17
	.byte	's_swd',0,10,222,3,12,4,7
	.byte	'count',0
	.word	249
	.byte	4,2,35,0,0,19,10,221,3,3,4,7
	.byte	'sw',0
	.word	6556
	.byte	4,2,35,0,0,17
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,7
	.byte	'type_dependent',0
	.word	6584
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	6603
	.byte	3
	.word	6603
	.byte	12
	.word	6681
	.byte	17
	.byte	'Os_CounterType_s',0,10,227,3,16,28,7
	.byte	'dynamic',0
	.word	6686
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	6525
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	6332
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	4783
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	181
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,10,234,3,3
	.word	6691
	.byte	3
	.word	6513
	.byte	12
	.word	6691
	.byte	3
	.word	6843
	.byte	4
	.byte	'CounterType',0,10,235,3,52
	.word	6848
	.byte	20
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,9
	.byte	'SCHEDULETABLE_STOPPED',0,0,9
	.byte	'SCHEDULETABLE_NEXT',0,1,9
	.byte	'SCHEDULETABLE_WAITING',0,2,9
	.byte	'SCHEDULETABLE_RUNNING',0,3,9
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	6874
	.byte	12
	.word	.L6-.L3
	.byte	3
	.word	7074
	.byte	4
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	7079
	.byte	17
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,7
	.byte	'match',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	7084
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	6874
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	212
	.byte	2,2,35,12,0,3
	.word	7111
	.byte	12
	.word	7204
.L6:
	.byte	17
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,7
	.byte	'dynamic',0
	.word	7209
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	6853
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	181
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	212
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	181
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	181
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	181
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	7214
	.byte	12
	.word	7214
	.byte	3
	.word	7394
	.byte	12
	.word	6691
	.byte	3
	.word	7404
	.byte	22
	.word	4507
	.byte	22
	.word	5457
	.byte	22
	.word	5354
	.byte	22
	.word	6015
	.byte	22
	.word	5521
	.byte	22
	.word	181
	.byte	22
	.word	6015
	.byte	17
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	3938
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	7414
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	7419
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	7424
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	7429
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	7434
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	5040
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	4837
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	181
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	7439
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	4109
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	181
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	7444
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	4109
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	181
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	181
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	181
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	7449
	.byte	3
	.word	249
	.byte	12
	.word	5185
	.byte	3
	.word	7905
	.byte	12
	.word	5755
	.byte	3
	.word	7915
	.byte	3
	.word	4837
	.byte	17
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	249
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	249
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	249
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	249
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	4058
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	181
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	7930
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	249
	.byte	17
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	181
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	249
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	8207
	.byte	17
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,7
	.byte	'MaskRef',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	181
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	181
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	8343
	.byte	10,4
	.word	181
	.byte	11,3,0,17
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	8483
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	8492
	.byte	17
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	212
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	8593
	.byte	17
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	212
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	8668
	.byte	12
	.word	8668
	.byte	3
	.word	8833
	.byte	17
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	8838
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	8843
	.byte	17
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,7
	.byte	'CanEventType',0
	.word	8483
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	8943
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	181
	.byte	4
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	181
	.byte	6,12,168,1,9,12,7
	.byte	'in',0
	.word	4783
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	4783
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	212
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	181
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	9089
	.byte	8,12,175,1,9,4,9
	.byte	'RTE_DRA',0,0,9
	.byte	'RTE_WOWP',0,1,9
	.byte	'RTE_TASK',0,2,9
	.byte	'RTE_ARE',0,3,9
	.byte	'RTE_EV',0,4,9
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	9176
	.byte	10,128,8
	.word	181
	.byte	11,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	9274
	.byte	4
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	249
	.byte	4
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	212
	.byte	4
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	181
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	181
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	181
	.byte	6,13,92,9,2,7
	.byte	'DeviceMode',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	181
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	9465
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	181
	.byte	4
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	181
	.byte	4
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	181
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	181
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	181
	.byte	4
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	212
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	181
	.byte	6,13,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	181
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	9806
	.byte	4
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	212
	.byte	4
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	181
	.byte	4
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	249
	.byte	4
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	212
	.byte	4
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	181
	.byte	4
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	181
	.byte	6,13,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	249
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	249
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	212
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	181
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	181
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	181
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	181
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	181
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	181
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	181
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	181
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	181
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	181
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	181
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	181
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	10038
	.byte	6,13,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	212
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	181
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	181
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	181
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	181
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	181
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	10542
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	181
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	181
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	181
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	181
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	181
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	9285
	.byte	10,128,8
	.word	181
	.byte	11,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	9285
	.byte	8,14,216,1,9,4,9
	.byte	'XCP_BG_IDLE',0,0,9
	.byte	'XCP_BG_CHKSUM',0,1,9
	.byte	'XCP_BG_MEM_WRITE',0,2,9
	.byte	'XCP_BG_REPEAT_CMD',0,3,9
	.byte	'XCP_BG_DO_DISCONNECT',0,4,9
	.byte	'XCP_BG_CANCEL_REQ',0,5,0,4
	.byte	'Xcp_BgActivity_t',0,14,224,1,3
	.word	11360
	.byte	15,1,1,14
	.word	2837
	.byte	14
	.word	181
	.byte	0,3
	.word	11505
	.byte	4
	.byte	'Xcp_CmdFunctionPtr',0,14,230,1,16
	.word	11519
	.byte	6,14,241,1,9,8,7
	.byte	'WritePos_u16',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'ReadPos_u16',0
	.word	212
	.byte	2,2,35,2,7
	.byte	'ReadPos_OdtNum_u16',0
	.word	212
	.byte	2,2,35,4,7
	.byte	'QueSize_u16',0
	.word	212
	.byte	2,2,35,6,0,4
	.byte	'Xcp_Que_t',0,14,247,1,3
	.word	11552
	.byte	6,14,250,1,9,24,7
	.byte	'XcpState_en',0
	.word	647
	.byte	4,2,35,0,7
	.byte	'ConnectedTlId_u8',0
	.word	181
	.byte	1,2,35,4,7
	.byte	'ResourceProtStatus_u8',0
	.word	181
	.byte	1,2,35,5,7
	.byte	'Mta',0
	.word	812
	.byte	8,2,35,8,7
	.byte	'MaxDto_u16',0
	.word	212
	.byte	2,2,35,16,7
	.byte	'MaxDtoAligned_u16',0
	.word	212
	.byte	2,2,35,18,7
	.byte	'MaxCto_u8',0
	.word	181
	.byte	1,2,35,20,0,4
	.byte	'Xcp_Session_t',0,14,138,2,2
	.word	11670
	.byte	6,14,149,2,9,12,7
	.byte	'Buffer_au8',0
	.word	2706
	.byte	8,2,35,0,7
	.byte	'Length_u32',0
	.word	249
	.byte	4,2,35,8,0,4
	.byte	'Xcp_CtoMax_t',0,14,153,2,2
	.word	11857
	.byte	10,255,1
	.word	181
	.byte	11,254,1,0,6,14,157,2,9,132,2,7
	.byte	'UploadRunning_b',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'RemainingSize_u8',0
	.word	181
	.byte	1,2,35,1,7
	.byte	'DownloadSize_u8',0
	.word	181
	.byte	1,2,35,2,7
	.byte	'ReceivedSize_u8',0
	.word	181
	.byte	1,2,35,3,7
	.byte	'DownloadBuffer_au8',0
	.word	11926
	.byte	255,1,2,35,4,0,4
	.byte	'Xcp_Mem_t',0,14,178,2,2
	.word	11937
	.byte	6,14,183,2,9,2,7
	.byte	'SeedWaitingKey_b',0
	.word	181
	.byte	1,2,35,0,7
	.byte	'SeedRemaingSize_u8',0
	.word	181
	.byte	1,2,35,1,0,4
	.byte	'Xcp_SeedAndKey_t',0,14,187,2,2
	.word	12094
	.byte	6,14,192,2,9,4,7
	.byte	'BlockSize_u32',0
	.word	249
	.byte	4,2,35,0,0,4
	.byte	'Xcp_Checksum_t',0,14,198,2,2
	.word	12181
	.byte	6,14,203,2,9,18,7
	.byte	'Xcp_Debug_TransmitOkCtr',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'Xcp_Debug_TransmitNotOkCtr',0
	.word	212
	.byte	2,2,35,2,7
	.byte	'Xcp_Debug_SendResTxConfCtr',0
	.word	212
	.byte	2,2,35,4,7
	.byte	'Xcp_Debug_SendResCtr',0
	.word	212
	.byte	2,2,35,6,7
	.byte	'Xcp_Debug_SendEvTxConfCtr',0
	.word	212
	.byte	2,2,35,8,7
	.byte	'Xcp_Debug_SendEvCtr',0
	.word	212
	.byte	2,2,35,10,7
	.byte	'Xcp_Debug_SendDaqTxConfCtr',0
	.word	212
	.byte	2,2,35,12,7
	.byte	'Xcp_Debug_SendDaqCtr',0
	.word	212
	.byte	2,2,35,14,7
	.byte	'Xcp_Debug_TxConfCtr',0
	.word	212
	.byte	2,2,35,16,0,4
	.byte	'Xcp_Debug_t',0,14,216,2,2
	.word	12235
	.byte	6,14,225,2,9,8,7
	.byte	'OdtEntryPos_u16',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'OdtEntryMax_u16',0
	.word	212
	.byte	2,2,35,2,7
	.byte	'DaqListNum_u16',0
	.word	212
	.byte	2,2,35,4,7
	.byte	'AbsOdtNum_u16',0
	.word	212
	.byte	2,2,35,6,0,4
	.byte	'Xcp_SelectedOdtEntry_t',0,14,231,2,2
	.word	12557
	.byte	6,14,234,2,9,6,7
	.byte	'OdtEntryFirst_u16',0
	.word	212
	.byte	2,2,35,0,7
	.byte	'OdtEntryCnt_u8',0
	.word	181
	.byte	1,2,35,2,7
	.byte	'CopyRoutine_u8',0
	.word	181
	.byte	1,2,35,3,7
	.byte	'Length_u16',0
	.word	212
	.byte	2,2,35,4,0,4
	.byte	'Xcp_Odt_t',0,14,240,2,2
	.word	12693
	.byte	22
	.word	181
	.byte	22
	.word	181
	.byte	6,14,254,2,9,24,7
	.byte	'DaqListQue_p',0
	.word	2782
	.byte	4,2,35,0,7
	.byte	'DaqListQuePos',0
	.word	11552
	.byte	8,2,35,4,7
	.byte	'OdtFirst_u16',0
	.word	212
	.byte	2,2,35,12,7
	.byte	'EventChannelNum_u16',0
	.word	212
	.byte	2,2,35,14,7
	.byte	'OdtCnt_u8',0
	.word	181
	.byte	1,2,35,16,7
	.byte	'XcpTxPduId',0
	.word	181
	.byte	1,2,35,17,7
	.byte	'Prescaler_u8',0
	.word	181
	.byte	1,2,35,18,7
	.byte	'CycleCnt_u8',0
	.word	181
	.byte	1,2,35,19,7
	.byte	'Priority_u8',0
	.word	181
	.byte	1,2,35,20,7
	.byte	'Flags_u8',0
	.word	181
	.byte	1,2,35,21,7
	.byte	'Mode_u8',0
	.word	12814
	.byte	1,2,35,22,7
	.byte	'CurrentlyRunning_b',0
	.word	12819
	.byte	1,2,35,23,0,4
	.byte	'Xcp_DaqList_t',0,14,143,3,2
	.word	12824
	.byte	3
	.word	12824
	.byte	3
	.word	12693
	.byte	3
	.word	249
	.byte	3
	.word	212
	.byte	6,14,146,3,9,56,7
	.byte	'DaqList_p',0
	.word	13116
	.byte	4,2,35,0,7
	.byte	'Odt_p',0
	.word	13121
	.byte	4,2,35,4,7
	.byte	'OdtEntryAddress_p',0
	.word	13126
	.byte	4,2,35,8,7
	.byte	'OdtEntrySize_p',0
	.word	2782
	.byte	4,2,35,12,7
	.byte	'PriorityList_p',0
	.word	13131
	.byte	4,2,35,16,7
	.byte	'DaqQue_p',0
	.word	2782
	.byte	4,2,35,20,7
	.byte	'DaqListCnt_u16',0
	.word	212
	.byte	2,2,35,24,7
	.byte	'OdtCnt_u16',0
	.word	212
	.byte	2,2,35,26,7
	.byte	'OdtEntryCnt_u16',0
	.word	212
	.byte	2,2,35,28,7
	.byte	'SelectedOdtEntry',0
	.word	12557
	.byte	8,2,35,30,7
	.byte	'DaqRamPtr_pu8',0
	.word	2782
	.byte	4,2,35,40,7
	.byte	'DaqRamSize_u32',0
	.word	249
	.byte	4,2,35,44,7
	.byte	'DaqListSendingCnt_u16',0
	.word	212
	.byte	2,2,35,48,7
	.byte	'DaqListSending_u16',0
	.word	212
	.byte	2,2,35,50,7
	.byte	'DaqState_en',0
	.word	1468
	.byte	4,2,35,52,0,4
	.byte	'Xcp_DaqConfig_t',0,14,180,3,2
	.word	13136
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,8,4,1,58,15,59,15,57,15,11,15,0,0,9,40,0,3,8,28,13,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0
	.byte	12,38,0,73,19,0,0,13,21,1,73,19,54,15,39,12,0,0,14,5,0,73,19,0,0,15,21,1,54,15,39,12,0,0,16,21,0,54,15
	.byte	39,12,0,0,17,19,1,3,8,58,15,59,15,57,15,11,15,0,0,18,59,0,3,8,0,0,19,23,1,58,15,59,15,57,15,11,15,0,0
	.byte	20,4,1,3,8,58,15,59,15,57,15,11,15,0,0,21,21,0,73,19,54,15,39,12,0,0,22,53,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Xcp\\src\\Xcp_Stim.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Priv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     1  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     2  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     3  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     4  * Includes
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     5  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     6  #include "Xcp.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     7  #include "Xcp_Priv.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     8  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	     9  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    10  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    11  * Variables
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    12  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    13  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    14  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    15  /***************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    16  * Functions
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    17  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    18  #if (XCP_SYNCHRONOUS_DATA_STIMULATION_STIM == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    19  /* ------------------------------------------------------------------------ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    20  /* Begin section for code */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    21  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    22  #define XCP_START_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    23  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    24  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    25  static void Xcp_StoreStim(const PduInfoType* XcpPacketPtr, Xcp_DaqList_t* daqListPtr, uint16 AbsOdtNo, uint8 protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    26  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    27  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    28  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    29  This function stores the Odt into the STIM buffer and updates the buffer information
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    30  \param[in]  XcpPacketPtr  pointer to Odt data and length
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    31  \param[in]  daqListPtr    pointer to DaqList
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    32  \param[in]  AbsOdtNo      absolute Odt number
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    33  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    34  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    35  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    36  static void Xcp_StoreStim(const PduInfoType* XcpPacketPtr, Xcp_DaqList_t* daqListPtr, uint16 AbsOdtNo, uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    37  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    38    /* local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    39    uint8* destBufPos_pu8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    40    uint16 bytesToCopy;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    41    uint8  OdtCnt;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    42    uint8  BufferNumWriteActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    43    uint8  copyOffset;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    44  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    45    /* initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    46    BufferNumWriteActive = 0xFFu;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    47  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    48  #if (XCP_IDFIELD_OTHER_THAN_ABSOLUTE == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    49    copyOffset = (uint8) Xcp_NoInit[protLayerId].Session.IdFieldType_en;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    50  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    51    copyOffset = (uint8) (XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    52  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    53  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    54    /* if in direction STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    55    if (  ( (daqListPtr->Mode_u8 & XCP_DAQLISTMODE_DIRECTION_STIM) != 0u )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    56        /* check if daq config is in right state */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    57        &&  (Xcp_NoInit[protLayerId].DaqConfig.DaqState_en >= XCP_DAQ_STATE_READY_TO_RUN)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    58        /* check if Odt has the right length */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    59        && ( XCP_ODT_LENGTH(AbsOdtNo, protLayerId) >= XcpPacketPtr->SduLength )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    60       )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    61    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    62      /* store stim data into buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    63      /* subtract id field bytes */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    64      bytesToCopy = XCP_ODT_LENGTH(AbsOdtNo, protLayerId) - copyOffset;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    65      /* cache into local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    66      OdtCnt = daqListPtr->OdtCnt_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    67  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    68      /* enter lock to change buffers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    69      SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    70  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    71      if (AbsOdtNo != daqListPtr->OdtFirst_u16)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    72      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    73        /* fetch active buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    74        BufferNumWriteActive = daqListPtr->BufferInfo.BufferNumWriteActive_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    75        daqListPtr->BufferInfo.OdtReceiveCtr_u8++;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    76        /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    77        SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    78      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    79      else /* new loop begins, pid == FirstPID */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    80      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    81        /* local variables needed only here */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    82        uint8 BufferNumReadActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    83        uint8 BufferNumReadNext;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    84  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    85        BufferNumReadNext   = daqListPtr->BufferInfo.BufferNumReadNext_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    86        BufferNumReadActive = daqListPtr->BufferInfo.BufferNumReadActive_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    87  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    88        /* find next available buffer to write */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    89        for (BufferNumWriteActive = 0; BufferNumWriteActive < XCP_ODT_STIM_BUFFER_ELEMENT_SIZE; BufferNumWriteActive++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    90        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    91          if(   (BufferNumWriteActive != BufferNumReadActive)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    92             && (BufferNumWriteActive != BufferNumReadNext)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    93            )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    94          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    95            /* store buffer to use for next receive */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    96            daqListPtr->BufferInfo.BufferNumWriteActive_u8 = BufferNumWriteActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    97            daqListPtr->BufferInfo.OdtReceiveCtr_u8 = 1;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    98            break;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	    99          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   100        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   101  #if ( XCP_ODT_STIM_BUFFER_ELEMENT_SIZE < 3u )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   102       if (  (BufferNumWriteActive >= XCP_ODT_STIM_BUFFER_ELEMENT_SIZE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   103          && (BufferNumReadNext != BufferNumReadActive)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   104          )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   105       {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   106         /* no available buffer found, use ReadNext Buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   107         BufferNumWriteActive = BufferNumReadNext;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   108         daqListPtr->BufferInfo.BufferNumWriteActive_u8 = BufferNumWriteActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   109  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   110    #if ( XCP_ODT_STIM_BUFFER_ELEMENT_SIZE < 2u )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   111         /* mark ReadNext as invalid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   112         daqListPtr->BufferInfo.BufferNumReadNext_u8 = 0xFFu;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   113         /* for single buffer, no full data set available */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   114         daqListPtr->BufferInfo.Status_u8 = (uint8) (daqListPtr->BufferInfo.Status_u8 | XCP_STATUSBIT_STIM_ERR_NO_DATA_AVAILABLE);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   115    #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   116         /* for double buffer, reuse old buffer for now */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   117         daqListPtr->BufferInfo.BufferNumReadNext_u8 = BufferNumReadActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   118    #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   119       }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   120  #endif /* ( XCP_ODT_STIM_BUFFER_ELEMENT_SIZE < 3 ) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   121        /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   122        SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   123  #if (XCP_TIMESTAMP == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   124        if((daqListPtr->Mode_u8 & XCP_DAQLISTMODE_TIMESTAMP) != 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   125        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   126          uint8 timestampBytes = (uint8) (Xcp_PlCfgConst.TlCfg[XCP_ACTIVE_TL_ID(protLayerId)].TimestampType_en);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   127  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   128          /* subtract timestamp bytes, because we are in first ODT and timestamp is enabled */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   129          bytesToCopy = bytesToCopy - timestampBytes;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   130          /* add timestamp to offset */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   131          copyOffset = copyOffset + timestampBytes;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   132        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   133  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   134      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   135  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   136      if (BufferNumWriteActive < XCP_ODT_STIM_BUFFER_ELEMENT_SIZE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   137      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   138        /* store the received data */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   139        /* calculate the destination buffer position */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   140        destBufPos_pu8 = &(daqListPtr->DaqListQue_p[XCP_MAXDTO_ALIGNED(protLayerId) * (((BufferNumWriteActive * OdtCnt) + AbsOdtNo) - daqListPtr->OdtFirst_u16)]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   141        /* store into buffer, only copy expected length */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   142        /* MR12 DIR 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   143        Xcp_MemCopy( destBufPos_pu8, &(XcpPacketPtr->SduDataPtr[copyOffset]), bytesToCopy );
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   144  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   145        /* check if all Odts have been received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   146        if (daqListPtr->BufferInfo.OdtReceiveCtr_u8 == OdtCnt)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   147        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   148          /* enter lock to change buffers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   149          SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   150  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   151          /* set buffer to read for next eventchannel */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   152          daqListPtr->BufferInfo.BufferNumReadNext_u8 = BufferNumWriteActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   153          daqListPtr->BufferInfo.BufferNumWriteActive_u8 = 0xFFu;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   154  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   155          /* increase number of complete stim buffers received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   156          if (daqListPtr->BufferInfo.CntStimReceived_u8 < 0xFE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   157          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   158            daqListPtr->BufferInfo.CntStimReceived_u8++;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   159          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   160  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   161          daqListPtr->BufferInfo.Status_u8 = (daqListPtr->BufferInfo.Status_u8 & (uint8) (~XCP_STATUSBIT_STIM_ERR_NO_DATA_AVAILABLE));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   162  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   163          daqListPtr->BufferInfo.OdtReceiveCtr_u8 = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   164  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   165          /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   166          SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   167        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   168      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   169      else /* if (BufferNumWriteActive_u8 < XCP_ODT_STIM_BUFFER_ELEMENT_SIZE) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   170      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   171        /* do not process any further */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   172        /* enter lock to change buffers */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   173        SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   174  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   175        daqListPtr->BufferInfo.OdtReceiveCtr_u8 = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   176  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   177        /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   178        SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   179        XCP_DET_REPORT_ERROR_NO_RET(XCP_STIM_SID, XCP_E_NO_BUF_AVAIL);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   180      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   181    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   182    else /* not (XCP_DAQLISTMODE_RUNNING|XCP_DAQLISTMODE_DIRECTION_STIM) or wrong length */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   183    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   184      /* received STIM packets for DAQ not in STIM mode, not started yet, or pdu length is wrong */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   185      XCP_DET_REPORT_ERROR_NO_RET(XCP_STIM_SID, XCP_E_STIM_PACKET_NOK);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   186    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   187  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   188  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   189  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   190  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   191  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   192  This function finds out the daq list number and Odt number of given STIM packet and calls Xcp_StoreStim
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   193  \param[in]  XcpPacketPtr  pointer to xcp packet data and length
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   194  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   195  \return     -
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   196  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   197  void Xcp_ReceiveStim(const PduInfoType* XcpPacketPtr, uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   198  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   199    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   200    Xcp_DaqList_t* daqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   201    uint16_least daqNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   202    uint16 CntDAQListsAvailable_u16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   203    uint16 AbsOdtNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   204    uint8  pid;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   205    uint8  FirstPID;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   206  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   207    /* Initialization */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   208    pid = XcpPacketPtr->SduDataPtr[0];
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   209    FirstPID = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   210    daqListPtr = NULL_PTR;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   211  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   212  #if (XCP_IDFIELD_OTHER_THAN_ABSOLUTE == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   213    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   214      Xcp_IdField_t IdFieldType;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   215      IdFieldType = Xcp_NoInit[protLayerId].Session.IdFieldType_en;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   216  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   217      if (IdFieldType == XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   218      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   219  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   220        /* ID Field Type == Absolute */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   221        AbsOdtNo = pid;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   222        CntDAQListsAvailable_u16 = Xcp_NoInit[protLayerId].DaqConfig.DaqListCnt_u16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   223        /* find daq containing this pid */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   224        for (daqNo = 0; daqNo < CntDAQListsAvailable_u16; daqNo++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   225        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   226          daqListPtr = &(XCP_DAQ(daqNo, protLayerId));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   227          FirstPID = (uint8) daqListPtr->OdtFirst_u16; /* absolute ID Field is smaller than 256 */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   228          if (   (pid >= FirstPID)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   229              && (pid < (FirstPID + daqListPtr->OdtCnt_u8))
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   230             )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   231          {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   232            /* found the right daq */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   233            break;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   234          }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   235        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   236        /* check, if end of loop has been reached without finding DAQ */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   237        if ( daqNo == CntDAQListsAvailable_u16 )
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   238        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   239          /* no corresponding daq found */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   240          XCP_DET_REPORT_ERROR_NO_RET(XCP_STIM_SID, XCP_E_STIM_PACKET_NOK);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   241        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   242  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   243  #if (XCP_IDFIELD_OTHER_THAN_ABSOLUTE == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   244      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   245      else if (IdFieldType == XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   246      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   247        daqListPtr = &(XCP_DAQ(XcpPacketPtr->SduDataPtr[1], protLayerId));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   248        AbsOdtNo = daqListPtr->OdtFirst_u16 + pid;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   249      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   250      else if (IdFieldType == XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   251      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   252    #if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   253        daqNo = (XcpPacketPtr->SduDataPtr[1]) | ((uint16_least)(XcpPacketPtr->SduDataPtr[2]) << 8u);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   254    #else /* CPU_BYTE_ORDER != HIGH_BYTE_FIRST */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   255        daqNo = (XcpPacketPtr->SduDataPtr[2]) | ((uint16_least)(XcpPacketPtr->SduDataPtr[1]) << 8u);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   256    #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   257        daqListPtr = &(XCP_DAQ(daqNo, protLayerId));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   258        AbsOdtNo = daqListPtr->OdtFirst_u16 + pid;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   259      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   260      else /* IdFieldType_en == XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   261      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   262    #if (CPU_BYTE_ORDER == HIGH_BYTE_FIRST)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   263        daqNo = (XcpPacketPtr->SduDataPtr[2]) | ((uint16_least)(XcpPacketPtr->SduDataPtr[3]) << 8u);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   264    #else /* CPU_BYTE_ORDER != HIGH_BYTE_FIRST */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   265        daqNo = (XcpPacketPtr->SduDataPtr[3]) | ((uint16_least)(XcpPacketPtr->SduDataPtr[2]) << 8u);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   266    #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   267        daqListPtr = &(XCP_DAQ(daqNo, protLayerId));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   268        AbsOdtNo = daqListPtr->OdtFirst_u16 + pid;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   269      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   270    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   271  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   272  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   273    if (daqListPtr != NULL_PTR)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   274    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   275      /* corresponding daq was found, process received stim packet*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   276      Xcp_StoreStim(XcpPacketPtr, daqListPtr, AbsOdtNo, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   277    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   278    else /* daqListPtr != NULL_PTR */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   279    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   280      /* daq list could not be determined */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   281      XCP_DET_REPORT_ERROR_NO_RET(XCP_STIM_SID, XCP_E_STIM_PACKET_NOK);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   282    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   283  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   284  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   285  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   286  #define XCP_STOP_SEC_CODE
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   287  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   288  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   289  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   290  #define XCP_START_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   291  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   292  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   293  /**
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   294  ****************************************************************************************************
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   295  This function stimulates the data by copying the data from the buffer into ecu memory
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   296  \param[in]  daqNo         daq list number
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   297  \param[in]  protLayerId   protocol layer id
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   298  \return     Status of the Eventchannel
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   299  \retval     status_u8   May contain the following status-bits
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   300                          - 0x10: XCP_STATUSBIT_STIM_STARTED: set, when STIM is being processed
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   301                          - 0x20: XCP_STATUSBIT_STIM_ERR_NO_DATA_AVAILABLE: set, when STIM does not have a complete set of data
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   302  \retval     numOfReceivedStimdata_u8  counter, how many complete sets of STIM data have been received
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   303  ***************************************************************************************************/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   304  Xcp_EventChannelStatus_t Xcp_StimEvent(uint16 daqNo, uint8 protLayerId)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   305  {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   306    /*Start of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   307    XCP_RTM_TIMETRACK_START()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   308  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   309    /* Local variables */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   310    Xcp_DaqList_t*        daqListPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   311    const Xcp_AddrValue*  OdtEntryAdrPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   312  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   313    const uint8*          OdtEntryExtensionPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   314  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   315    const uint8*          OdtEntrySizePtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   316    uint8                 OdtEntrySize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   317    Xcp_AddrType_t        OdtEntryXcpAddr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   318    const uint8*          source_pu8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   319    Xcp_EventChannelStatus_t RetSt;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   320    uint16 maxDtoAligned;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   321    uint16 OdtFirst;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   322    uint16_least AbsOdt_i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   323    uint16_least OdtEntry_i;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   324    uint16 OdtEntryMax;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   325    uint8  OdtCnt;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   326    uint8  readBufferActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   327  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   328    XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_DAQ_EVENTCHANNEL)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   329    daqListPtr = &(XCP_DAQ(daqNo, protLayerId));
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   330    RetSt.reserved_u16 = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   331  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   332    /* enter lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   333    SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   334    /* store status */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   335    RetSt.status_u8 = daqListPtr->BufferInfo.Status_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   336    /* store received stim counter */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   337    RetSt.numOfReceivedStimdata_u8 = daqListPtr->BufferInfo.CntStimReceived_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   338  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   339    /* check, if a complete data set has been received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   340    if ((RetSt.status_u8 & XCP_STATUSBIT_STIM_ERR_NO_DATA_AVAILABLE) == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   341    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   342      readBufferActive = daqListPtr->BufferInfo.BufferNumReadNext_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   343      /* set active buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   344      daqListPtr->BufferInfo.BufferNumReadActive_u8 = readBufferActive;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   345      /* reset receive counter */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   346      daqListPtr->BufferInfo.CntStimReceived_u8 = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   347  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   348      /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   349      SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   350  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   351      /* get data into local variables for fast access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   352      OdtFirst = daqListPtr->OdtFirst_u16;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   353      OdtCnt   = daqListPtr->OdtCnt_u8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   354      maxDtoAligned = XCP_MAXDTO_ALIGNED(protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   355  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   356      /* Initialize local pointer to OdtEntryAdr and OdtEntrySize for first OdtEntry */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   357      OdtEntryAdrPtr        = Xcp_NoInit[protLayerId].DaqConfig.OdtEntryAddress_p;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   358      OdtEntrySizePtr       = Xcp_NoInit[protLayerId].DaqConfig.OdtEntrySize_p;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   359  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   360      OdtEntryExtensionPtr  = Xcp_NoInit[protLayerId].DaqConfig.OdtEntryExtension_p;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   361  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   362  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   363      /*--------------------------------------------------------------------------------------------------
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   364        Main loop for STIM
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   365      --------------------------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   366      /* loop all Odts, check mode for running every loop-step */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   367      for (AbsOdt_i = OdtFirst; (AbsOdt_i < (OdtFirst + OdtCnt)) && ((daqListPtr->Mode_u8 & XCP_DAQLISTMODE_RUNNING) == XCP_DAQLISTMODE_RUNNING); AbsOdt_i++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   368      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   369        XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_ODT_EVENTCHANNEL)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   370  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   371        OdtEntry_i = XCP_ODT_ODTENTRYFIRST(AbsOdt_i, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   372  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   373        /* Get pointer to STIM buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   374        source_pu8 = &(daqListPtr->DaqListQue_p[ maxDtoAligned * ( ((readBufferActive * OdtCnt) + AbsOdt_i) - OdtFirst) ]);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   375  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   376        /* Fetch number of OdtEntries for this Odt */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   377        OdtEntryMax = XCP_ODT_ENTRYMAX(AbsOdt_i, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   378  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   379        /* loop all OdtEntries for this Odt */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   380        for (/* OdtEntry_i already initialized */; OdtEntry_i < OdtEntryMax; OdtEntry_i++)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   381        {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   382          XCP_TESTINJECTION_FUNC(XCP_TESTINJECTION_POS_ODTENTRY_EVENTCHANNEL)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   383          /* Local copy of OdtEntrySize for faster access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   384          OdtEntrySize = OdtEntrySizePtr[OdtEntry_i];
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   385          OdtEntryXcpAddr.AddrValue = OdtEntryAdrPtr[OdtEntry_i];
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   386  #if (XCP_ADDRESS_EXTENSION == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   387          OdtEntryXcpAddr.Extension = OdtEntryExtensionPtr[OdtEntry_i];
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   388  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   389          OdtEntryXcpAddr.Extension = 0u;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   390  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   391  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   392  #if (XCP_DAQ_STIM_MEMORY_ACCESS_BY_APPL == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   393          /* Copy the STIM data from internal buffer to ecu memory using Application-function */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   394          XcpAppl_OdtEntryWrite(OdtEntryXcpAddr, source_pu8, OdtEntrySize);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   395  #else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   396          /* copy the STIM data - Extension is ignored as it shall be 0 now (either Extension is disabled or an AddressTransformation was already done during config) */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   397          /* MR12 RULE 11.6, 1.1 VIOLATION: The input parameters of rba_BswSrv_MemCopy() are declared as (void*) for generic implementation of MemCopy. */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   398          Xcp_MemCopy((void*)OdtEntryXcpAddr.AddrValue, source_pu8, OdtEntrySize);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   399  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   400  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   401          /* increment source pointer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   402          source_pu8 += OdtEntrySize;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   403        }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   404      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   405  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   406      /* enter lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   407      SchM_Enter_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   408      /* reset read active Buffer */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   409      daqListPtr->BufferInfo.BufferNumReadActive_u8 = 0xFFu;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   410      /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   411      SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   412  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   413  #if (XCP_EV_STIM_TIMEOUT_ENABLED == STD_ON)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   414      /* if no fresh data has been received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   415      if (RetSt.numOfReceivedStimdata_u8 == 0u)
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   416      {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   417        /* local variables only needed here */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   418        Xcp_Cto8_t XcpEvPacket;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   419        Xcp_EvStimTimeout_t* EvPtr;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   420  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   421        /* initialize event packet */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   422        XcpEvPacket.Length_u32 = XCP_EV_STIM_TIMEOUT_LENGTH;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   423        EvPtr = (Xcp_EvStimTimeout_t*) (void*) XcpEvPacket.Buffer_au8;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   424  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   425        /* prepare timeout event */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   426        EvPtr->PacketId_u8  = XCP_PACKET_ID_EV;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   427        EvPtr->EventCode_u8 = XCP_EV_STIM_TIMEOUT;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   428        EvPtr->InfoType_u8  = XCP_EV_STIM_TIMEOUT_INFOTYPE_DAQLISTNO;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   429        EvPtr->Reserved_u8  = 0;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   430        EvPtr->Number_u16   = daqNo;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   431  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   432        /* send out event */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   433        Xcp_SendEv(&XcpEvPacket, protLayerId);
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   434      }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   435  #endif
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   436    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   437    else
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   438    {
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   439      /* no complete stim dataset received */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   440      /* exit lock around buffer access */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   441      SchM_Exit_Xcp_BufferAccessActiveNoNest();
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   442    }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   443  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   444    /*End of run time measurement*/
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   445    XCP_RTM_TIMETRACK_FINISH()
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   446    return RetSt;
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   447  }
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   448  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   449  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   450  #define XCP_STOP_SEC_CODE_EVENTCHANNEL
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   451  #include "Xcp_MemMap.h"
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   452  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   453  #endif /* XCP_SYNCHRONOUS_DATA_STIMULATION_STIM */
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   454  
; BSW\src\BSW\Gen\Xcp\src\Xcp_Stim.c	   455  

	; Module end
