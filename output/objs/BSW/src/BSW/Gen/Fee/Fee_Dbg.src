	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15024a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Fee\\Fee_Dbg.src BSW\\src\\BSW\\Gen\\Fee\\src\\Fee_Dbg.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Fee\\src\\Fee_Dbg.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	9180
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Fee\\src\\Fee_Dbg.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	133
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	135
	.byte	5
	.byte	'char',0,1,6,4
	.byte	'sint8',0,2,76,25
	.word	158
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,2,81,25
	.word	180
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,91,25
	.word	211
	.byte	5
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,2,106,24
	.word	248
	.byte	5
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,2,111,30
	.word	279
	.byte	4
	.byte	'boolean',0,2,127,25
	.word	180
	.byte	4
	.byte	'StatusType',0,3,191,1,27
	.word	180
	.byte	4
	.byte	'Std_ReturnType',0,3,199,1,15
	.word	180
	.byte	6,3,206,1,9,8,7
	.byte	'vendorID',0
	.word	211
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	211
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	180
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	180
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	180
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,3,213,1,3
	.word	380
	.byte	6,4,93,9,8,7
	.byte	'Class',0
	.word	180
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	180
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	248
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,4,97,3
	.word	530
	.byte	8,68
	.word	248
	.byte	9,16,0,6,4,154,1,9,68,7
	.byte	'store',0
	.word	610
	.byte	68,2,35,0,0,8,68
	.word	619
	.byte	9,0,0,4
	.byte	'Os_JumpBufType',0,4,156,1,3
	.word	641
	.byte	4
	.byte	'Os_StackTraceType',0,4,174,1,18
	.word	248
	.byte	6,4,175,1,9,8,7
	.byte	'sp',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	248
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,4,175,1,63
	.word	701
	.byte	4
	.byte	'Os_StackSizeType',0,4,176,1,27
	.word	701
	.byte	10,1,1,3
	.word	786
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,4,179,1,16
	.word	789
	.byte	4
	.byte	'ApplicationType',0,4,193,1,23
	.word	180
	.byte	11
	.byte	'Os_ApplicationConfigurationType_s',0,4,198,1,16,2,7
	.byte	'app_id',0
	.word	180
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,4,201,1,3
	.word	852
	.byte	4
	.byte	'Os_CoreStateType',0,4,203,1,16
	.word	248
	.byte	4
	.byte	'AreaIdType',0,4,204,1,16
	.word	211
	.byte	4
	.byte	'Os_PeripheralAddressType',0,4,212,1,22
	.word	248
	.byte	4
	.byte	'TickType',0,4,221,1,22
	.word	248
	.byte	4
	.byte	'Os_StopwatchTickType',0,4,225,1,22
	.word	248
	.byte	3
	.word	248
	.byte	4
	.byte	'Os_Lockable',0,4,234,1,18
	.word	1094
	.byte	4
	.byte	'CoreIdType',0,4,236,1,16
	.word	211
	.byte	4
	.byte	'SpinlockIdType',0,4,237,1,16
	.word	211
	.byte	12,4,239,1,9,4,13
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,13
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,4,239,1,74
	.word	1164
	.byte	12,4,174,2,9,4,13
	.byte	'APPLICATION_ACCESSIBLE',0,0,13
	.byte	'APPLICATION_RESTARTING',0,1,13
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,4,174,2,92
	.word	1257
	.byte	14
	.byte	'void',0,3
	.word	1369
	.byte	15,1,1,16
	.word	180
	.byte	16
	.word	1375
	.byte	0,3
	.word	1380
	.byte	4
	.byte	'Os_FunctionEntryType',0,4,183,2,16
	.word	1394
	.byte	11
	.byte	'Os_MeterInfoType_s',0,4,193,2,16,48,7
	.byte	'elapsed',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	248
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	248
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	701
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	701
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	701
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	701
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,4,202,2,3
	.word	1429
	.byte	3
	.word	1429
	.byte	4
	.byte	'Os_MeterInfoRefType',0,4,203,2,50
	.word	1627
	.byte	4
	.byte	'EventMaskType',0,4,206,2,15
	.word	180
	.byte	4
	.byte	'Os_imaskType',0,4,211,2,16
	.word	248
	.byte	11
	.byte	'Os_ISRDynType_s',0,4,213,2,16,48,7
	.byte	'meter',0
	.word	1429
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,4,215,2,3
	.word	1706
	.byte	3
	.word	1706
	.byte	17
	.word	1767
	.byte	11
	.byte	'Os_ISRType_s',0,4,216,2,16,24,7
	.byte	'entry_function',0
	.word	794
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	1772
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	248
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	701
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	180
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,4,223,2,3
	.word	1777
	.byte	3
	.word	786
	.byte	17
	.word	1777
	.byte	3
	.word	1936
	.byte	4
	.byte	'ISRType',0,4,224,2,46
	.word	1941
	.byte	4
	.byte	'Os_bitmask',0,4,239,2,22
	.word	248
	.byte	4
	.byte	'Os_pset0Type',0,4,240,2,20
	.word	248
	.byte	4
	.byte	'Os_pset1Type',0,4,241,2,20
	.word	248
	.byte	4
	.byte	'Os_pset2Type',0,4,242,2,20
	.word	248
	.byte	18,4,243,2,9,4,7
	.byte	'p0',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	248
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,4,247,2,3
	.word	2049
	.byte	18,4,249,2,9,4,7
	.byte	't0',0
	.word	248
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	248
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	248
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,4,253,2,3
	.word	2113
	.byte	4
	.byte	'Os_ActivationCountType',0,4,254,2,23
	.word	180
	.byte	11
	.byte	'Os_TaskDynType_s',0,4,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	650
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	1429
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	180
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,4,132,3,3
	.word	2211
	.byte	8,68
	.word	619
	.byte	9,0,0,3
	.word	2211
	.byte	17
	.word	2337
	.byte	11
	.byte	'Os_TaskType_s',0,4,134,3,16,40,7
	.byte	'dynamic',0
	.word	2342
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	794
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	2049
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	2113
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	2113
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	211
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	248
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	701
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	180
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	180
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,4,146,3,3
	.word	2347
	.byte	17
	.word	2347
	.byte	3
	.word	2597
	.byte	4
	.byte	'TaskType',0,4,147,3,47
	.word	2602
	.byte	19
	.byte	'Os_TaskStateType',0,4,155,3,6,4,13
	.byte	'SUSPENDED',0,0,13
	.byte	'READY',0,1,13
	.byte	'WAITING',0,2,13
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,4,156,3,31
	.word	2625
	.byte	18,4,167,3,3,4,7
	.byte	'tpmask',0
	.word	2113
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType_s',0,4,166,3,16,4,7
	.byte	'saved_priority',0
	.word	2712
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,4,170,3,3
	.word	2735
	.byte	3
	.word	2735
	.byte	17
	.word	2815
	.byte	11
	.byte	'Os_ResourceType_s',0,4,171,3,16,12,7
	.byte	'dynamic',0
	.word	2820
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	2113
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,4,175,3,3
	.word	2825
	.byte	6,4,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	248
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,4,185,3,3
	.word	2924
	.byte	6,4,206,3,9,8,7
	.byte	'Running',0
	.word	180
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	180
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	248
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,4,210,3,3
	.word	3019
	.byte	20
	.word	180
	.byte	1,1,3
	.word	3105
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,4,217,3,22
	.word	3112
	.byte	11
	.byte	's_swd',0,4,222,3,12,4,7
	.byte	'count',0
	.word	248
	.byte	4,2,35,0,0,18,4,221,3,3,4,7
	.byte	'sw',0
	.word	3148
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType_s',0,4,220,3,16,4,7
	.byte	'type_dependent',0
	.word	3176
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,4,226,3,3
	.word	3195
	.byte	3
	.word	3195
	.byte	17
	.word	3273
	.byte	11
	.byte	'Os_CounterType_s',0,4,227,3,16,28,7
	.byte	'dynamic',0
	.word	3278
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	3117
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	2924
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	1375
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	180
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,4,234,3,3
	.word	3283
	.byte	3
	.word	3105
	.byte	17
	.word	3283
	.byte	3
	.word	3435
	.byte	4
	.byte	'CounterType',0,4,235,3,52
	.word	3440
	.byte	19
	.byte	'Os_ScheduleTableStatusType',0,4,240,3,6,4,13
	.byte	'SCHEDULETABLE_STOPPED',0,0,13
	.byte	'SCHEDULETABLE_NEXT',0,1,13
	.byte	'SCHEDULETABLE_WAITING',0,2,13
	.byte	'SCHEDULETABLE_RUNNING',0,3,13
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,4,241,3,41
	.word	3466
	.byte	17
	.word	.L6-.L3
	.byte	3
	.word	3666
	.byte	4
	.byte	'ScheduleTableType',0,4,128,4,58
	.word	3671
	.byte	11
	.byte	'Os_ScheduleTableDynType_s',0,4,130,4,16,16,7
	.byte	'match',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	3676
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	3466
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	211
	.byte	2,2,35,12,0,3
	.word	3703
	.byte	17
	.word	3796
.L6:
	.byte	11
	.byte	'Os_ScheduleTableType_s',0,4,247,3,16,16,7
	.byte	'dynamic',0
	.word	3801
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	3445
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	180
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	211
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	180
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	180
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	180
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,4,255,3,3
	.word	3806
	.byte	17
	.word	3806
	.byte	3
	.word	3986
	.byte	17
	.word	3283
	.byte	3
	.word	3996
	.byte	21
	.word	1099
	.byte	21
	.word	2049
	.byte	21
	.word	1946
	.byte	21
	.word	2607
	.byte	21
	.word	2113
	.byte	21
	.word	180
	.byte	21
	.word	2607
	.byte	11
	.byte	'Os_ControlledCoreType_s',0,4,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	530
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	4006
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	4011
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	4016
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	4021
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	4026
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	1632
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	1429
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	180
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	4031
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	701
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	180
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	4036
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	701
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	180
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	180
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	180
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,4,141,7,3
	.word	4041
	.byte	3
	.word	248
	.byte	17
	.word	1777
	.byte	3
	.word	4497
	.byte	17
	.word	2347
	.byte	3
	.word	4507
	.byte	3
	.word	1429
	.byte	11
	.byte	'Os_AnyCoreType_s',0,4,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	248
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	248
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	248
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	248
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	650
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	180
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,4,160,7,3
	.word	4522
	.byte	4
	.byte	'unsigned_int',0,5,116,22
	.word	248
	.byte	12,6,31,9,4,13
	.byte	'MEMIF_JOB_OK',0,0,13
	.byte	'MEMIF_JOB_FAILED',0,1,13
	.byte	'MEMIF_JOB_PENDING',0,2,13
	.byte	'MEMIF_JOB_CANCELED',0,3,13
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,13
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,4
	.byte	'MemIf_JobResultType',0,6,39,2
	.word	4784
	.byte	12,6,41,9,4,13
	.byte	'MEMIF_MODE_SLOW',0,0,13
	.byte	'MEMIF_MODE_FAST',0,1,0,4
	.byte	'MemIf_ModeType',0,6,45,2
	.word	4942
	.byte	4
	.byte	'PduIdType',0,7,22,19
	.word	211
	.byte	4
	.byte	'PduLengthType',0,7,26,19
	.word	211
	.byte	12,8,113,9,4,13
	.byte	'TP_DATACONF',0,0,13
	.byte	'TP_DATARETRY',0,1,13
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,8,118,3
	.word	5047
	.byte	4
	.byte	'Can_IdType',0,9,32,16
	.word	248
	.byte	4
	.byte	'Can_HwHandleType',0,9,43,16
	.word	211
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,10,219,3,16
	.word	248
	.byte	11
	.byte	'Can_TxHwObjectConfigType',0,10,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	180
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	180
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	248
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,10,252,3,3
	.word	5203
	.byte	11
	.byte	'Can_RxHwObjectConfigType',0,10,129,4,16,12,7
	.byte	'MaskRef',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	180
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	180
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,10,147,4,3
	.word	5339
	.byte	8,4
	.word	180
	.byte	9,3,0,11
	.byte	'Can_ControllerMOMapConfigType',0,10,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	5479
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,10,184,4,3
	.word	5488
	.byte	11
	.byte	'Can_NPCRValueType',0,10,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	211
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,10,191,4,3
	.word	5589
	.byte	11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	211
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,198,4,3
	.word	5664
	.byte	17
	.word	5664
	.byte	3
	.word	5829
	.byte	11
	.byte	'Can_BaudrateConfigPtrType',0,10,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	5834
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,10,204,4,3
	.word	5839
	.byte	11
	.byte	'Can_EventHandlingType',0,10,226,4,16,4,7
	.byte	'CanEventType',0
	.word	5479
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,10,229,4,3
	.word	5939
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,11,130,1,15
	.word	180
	.byte	4
	.byte	'Rte_TransformerClass',0,11,131,1,15
	.word	180
	.byte	6,11,168,1,9,12,7
	.byte	'in',0
	.word	1375
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	1375
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	211
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	180
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,11,173,1,3
	.word	6085
	.byte	12,11,175,1,9,4,13
	.byte	'RTE_DRA',0,0,13
	.byte	'RTE_WOWP',0,1,13
	.byte	'RTE_TASK',0,2,13
	.byte	'RTE_ARE',0,3,13
	.byte	'RTE_EV',0,4,13
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,11,182,1,3
	.word	6172
	.byte	8,128,8
	.word	180
	.byte	9,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,12,50,15
	.word	6270
	.byte	4
	.byte	'CanIf_u32_impl',0,12,69,16
	.word	248
	.byte	4
	.byte	'CanIf_u16_impl',0,12,71,16
	.word	211
	.byte	4
	.byte	'CanIf_u8_impl',0,12,73,15
	.word	180
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,12,88,15
	.word	180
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,12,90,15
	.word	180
	.byte	6,12,92,9,2,7
	.byte	'DeviceMode',0
	.word	180
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	180
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,12,95,3
	.word	6461
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,12,100,15
	.word	180
	.byte	4
	.byte	'CanSM_boolean_Impl',0,12,120,15
	.word	180
	.byte	4
	.byte	'CanSM_u8_Impl',0,12,123,15
	.word	180
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,12,128,1,15
	.word	180
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,12,132,1,15
	.word	180
	.byte	4
	.byte	'CanSM_u16_Impl',0,12,136,1,16
	.word	211
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,12,138,1,15
	.word	180
	.byte	6,12,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	211
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	180
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,12,143,1,3
	.word	6802
	.byte	4
	.byte	'Com_impl_u16',0,12,154,1,16
	.word	211
	.byte	4
	.byte	'Com_impl_u8',0,12,157,1,15
	.word	180
	.byte	4
	.byte	'ComM_uint32_Impl',0,12,173,1,16
	.word	248
	.byte	4
	.byte	'ComM_uint16_Impl',0,12,175,1,16
	.word	211
	.byte	4
	.byte	'ComM_uint8_Impl',0,12,177,1,15
	.word	180
	.byte	4
	.byte	'ComM_bool_Impl',0,12,179,1,15
	.word	180
	.byte	6,12,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	211
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	180
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	180
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	180
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	180
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	180
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	180
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	180
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	180
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	180
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	180
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	180
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	180
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,12,197,1,3
	.word	7034
	.byte	6,12,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	211
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	211
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	180
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	180
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	180
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	180
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	180
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,12,214,1,3
	.word	7538
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,12,252,1,15
	.word	180
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	12,138,2,15
	.word	180
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,12,146,2,15
	.word	180
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,12,150,2,15
	.word	180
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,12,154,2,15
	.word	180
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,12,243,3,34
	.word	6281
	.byte	8,128,8
	.word	180
	.byte	9,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,12,246,3,34
	.word	6281
	.byte	4
	.byte	'Fls_LengthType',0,13,173,3,16
	.word	248
	.byte	11
	.byte	'Fls_JobStartType',0,13,175,3,16,1,22
	.byte	'Reserved1',0,1
	.word	180
	.byte	1,7,2,35,0,22
	.byte	'Write',0,1
	.word	180
	.byte	1,6,2,35,0,22
	.byte	'Erase',0,1
	.word	180
	.byte	1,5,2,35,0,22
	.byte	'Read',0,1
	.word	180
	.byte	1,4,2,35,0,22
	.byte	'Compare',0,1
	.word	180
	.byte	1,3,2,35,0,22
	.byte	'Reserved2',0,1
	.word	180
	.byte	3,0,2,35,0,0,4
	.byte	'Fls_JobStartType',0,13,183,3,3
	.word	8380
	.byte	4
	.byte	'Fls_17_Pmu_Job_Type',0,13,187,3,15
	.word	180
	.byte	3
	.word	180
	.byte	17
	.word	180
	.byte	3
	.word	8575
	.byte	8,2
	.word	180
	.byte	9,1,0,11
	.byte	'Fls_17_Pmu_StateType',0,13,198,3,16,48,7
	.byte	'FlsReadAddress',0
	.word	248
	.byte	4,2,35,0,7
	.byte	'FlsWriteAddress',0
	.word	248
	.byte	4,2,35,4,7
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	248
	.byte	4,2,35,8,7
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	248
	.byte	4,2,35,12,7
	.byte	'FlsReadLength',0
	.word	248
	.byte	4,2,35,16,7
	.byte	'FlsWriteLength',0
	.word	248
	.byte	4,2,35,20,7
	.byte	'FlsReadBufferPtr',0
	.word	8570
	.byte	4,2,35,24,7
	.byte	'FlsWriteBufferPtr',0
	.word	8580
	.byte	4,2,35,28,7
	.byte	'FlsJobResult',0
	.word	4784
	.byte	4,2,35,32,7
	.byte	'FlsMode',0
	.word	4942
	.byte	4,2,35,36,7
	.byte	'NotifCaller',0
	.word	180
	.byte	1,2,35,40,7
	.byte	'JobStarted',0
	.word	8380
	.byte	1,2,35,41,7
	.byte	'FlsJobType',0
	.word	8585
	.byte	2,2,35,42,7
	.byte	'FlsOper',0
	.word	180
	.byte	1,2,35,44,7
	.byte	'FlsTimeoutErr',0
	.word	180
	.byte	1,2,35,45,7
	.byte	'FlsTimeoutControl',0
	.word	180
	.byte	1,2,35,46,0,4
	.byte	'Fls_17_Pmu_StateType',0,13,130,4,3
	.word	8594
	.byte	4
	.byte	'Fls_NotifFunctionPtrType',0,13,137,4,16
	.word	789
	.byte	17
	.word	248
	.byte	3
	.word	9072
	.byte	15,1,1,16
	.word	248
	.byte	16
	.word	248
	.byte	16
	.word	9077
	.byte	16
	.word	180
	.byte	0,3
	.word	9082
	.byte	4
	.byte	'Fls_WriteCmdPtrType',0,13,139,4,16
	.word	9106
	.byte	15,1,1,16
	.word	248
	.byte	0,3
	.word	9140
	.byte	4
	.byte	'Fls_EraseCmdPtrType',0,13,144,4,16
	.word	9149
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,8,1,1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,21,0,54,15,39,12,0,0,11,19,1,3,8,58,15,59,15,57,15,11
	.byte	15,0,0,12,4,1,58,15,59,15,57,15,11,15,0,0,13,40,0,3,8,28,13,0,0,14,59,0,3,8,0,0,15,21,1,54,15,39,12,0
	.byte	0,16,5,0,73,19,0,0,17,38,0,73,19,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,20,21,0,73,19,54,15,39,12,0,0,21,53,0,73,19,0,0,22,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0
	.byte	0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Fee\\src\\Fee_Dbg.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     1  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     2  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     3  /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     4   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     5   * Includes
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     6   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     7  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     8  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	     9  #include "Fee.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    10  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    11  /* Disable the Fee common part when the Fs1 is selected - currently the Fs1 is a complete Fee */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    12  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 != FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    13  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    14  #include "Fee_Prv.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    15  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    16  #if (TRUE == FEE_PRV_CFG_DBG)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    17  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    18  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    19  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    20  #include "Mcu.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    21  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    22  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    23  #if (TRUE == FEE_PRV_CFG_DBG_DUMP)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    24  #include "stdio.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    25  #include "rba_FlsPc.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    26  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    27  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    28  /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    29   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    30   * Variables
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    31   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    32  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    33  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    34  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    35  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    36  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    37  Fee_Prv_DbgInfo_tst Fee_Prv_DbgInfo_st;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    38  static Fee_Prv_Dbg_tst Fee_Prv_Dbg_st;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    39  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    40  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    41  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    42  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    43  #if (TRUE == FEE_PRV_CFG_DBG_CHECKLAYOUT)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    44  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    45  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    46  static uint8 Fee_Prv_DbgCheckLayoutBfr_au8[1u];
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    47  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    48  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    49  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    50  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    51  #if (TRUE == FEE_PRV_CFG_DBG_BLOCK)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    52  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    53  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    54  uint8 Fee_Prv_DbgBfr_au8[FEE_PRV_CFG_DBG_BLOCK_SIZE];
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    55  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    56  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    57  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    58  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    59  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    60  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    61  /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    62   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    63   * Static declarations
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    64   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    65  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    66  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    67  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    68  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    69  static void Fee_Prv_DbgHistInsert(uint32 * hist_pu32, uint32 value_u32, uint32 histSize_u32);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    70  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    71  static void Fee_Prv_DbgTeMerge(Fee_Prv_DbgTimeEntry_tst * t1_pst, Fee_Prv_DbgTimeEntry_tst const * t2_pcst);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    72  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    73  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    74  /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    75   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    76   * Implementation
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    77   **********************************************************************************************************************
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    78  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    79  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    80  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    81   * \brief   Insert a value into a histogram.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    82   *          The histogram is in logarithmic scale with basis of 2.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    83   *          The intervals of the baskets in the histogram are
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    84   *          [0, 1[
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    85   *          [1, 2[
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    86   *          [2, 4[
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    87   *          [4, 8[
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    88   *          ...
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    89   *          [log(2,histSize_u32 - 1),infinity[
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    90   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    91   * \param   hist_pu32       Pointer to the histogram
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    92   * \param   value_u32       Value that shall be inserted into the histogram
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    93   * \param   histSize_u32    Size of the histogram
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    94  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    95  static void Fee_Prv_DbgHistInsert(uint32 * hist_pu32, uint32 value_u32, uint32 histSize_u32)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    96  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    97      uint32 basket_u32 = 0u;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    98  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	    99      while(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   100          (0u         < (value_u32 >> (basket_u32 + 1u))) &&
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   101          (basket_u32 < (histSize_u32 - 1u))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   102      )
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   103      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   104          basket_u32++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   105      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   106  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   107      hist_pu32[basket_u32]++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   108  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   109  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   110  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   111  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   112   * \brief   Merge histograms and maximum values of two time entries.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   113   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   114   * \param   t1_pst      First time entry, will also be the target of the merge
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   115   * \param   t2_pcst     Second time entry
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   116  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   117  static void Fee_Prv_DbgTeMerge(Fee_Prv_DbgTimeEntry_tst * t1_pst, Fee_Prv_DbgTimeEntry_tst const * t2_pcst)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   118  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   119      uint32 a_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   120      for(a_u32 = 0; a_u32 < FEE_PRV_CFG_DBG_TIME_HISTOGRAM_BASKETNUM; a_u32++)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   121      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   122          t1_pst->hist_au32[a_u32] += t2_pcst->hist_au32[a_u32];
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   123      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   124      if(t1_pst->tiMax_u32 < t2_pcst->tiMax_u32)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   125      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   126          t1_pst->tiMax_u32 = t2_pcst->tiMax_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   127      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   128  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   129  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   130  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   131  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   132   * \brief   Main function of the debug unit to execute cyclic debugging actions.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   133  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   134  void Fee_Prv_DbgMainFunction(void)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   135  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   136  #if (TRUE == FEE_PRV_CFG_DBG_BLOCK)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   137      /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   138       * Only start a write of the debug block under the following conditions:
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   139       * - A write of the debug block is requested
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   140       * - Fee_Rb_EndInit was called (Fee_Prv_EraseEnabled_b = TRUE)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   141       * - No effort was spent already
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   142       * - The Fee is currently idle
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   143       */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   144      if(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   145          (TRUE                                       == Fee_Prv_Dbg_st.isDebugBlockWriteRequested_b  )   &&
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   146          (Fee_Prv_LibEffortMeasure_st.effortCtr_u32  == Fee_Prv_ConfigMaxEffort_cu32                 )   &&
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   147          (MEMIF_IDLE                                 == Fee_GetStatus()                              )
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   148      )
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   149      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   150          uint32 packAdr_u32 = 0u;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   151  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   152          /* Pack the content of the debug struct into the write buffer */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   153  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   154          if(sizeof(Fee_Prv_DbgBfr_au8) >= (packAdr_u32 + sizeof(Fee_Prv_DbgInfo_st.time_st)))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   155          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   156              Fee_Prv_LibMemCopy(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   157                  (uint8 const *)&Fee_Prv_DbgInfo_st.time_st,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   158                  &Fee_Prv_DbgBfr_au8[packAdr_u32],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   159                  sizeof(Fee_Prv_DbgInfo_st.time_st)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   160              );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   161              packAdr_u32 += sizeof(Fee_Prv_DbgInfo_st.time_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   162          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   163  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   164  #if (TRUE == FEE_PRV_CFG_DBG_ERASECOUNTERS)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   165          if(sizeof(Fee_Prv_DbgBfr_au8) >= (packAdr_u32 + sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st)))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   166          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   167              Fee_Prv_LibMemCopy(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   168                  (uint8 const *)&Fee_Prv_DbgInfo_st.eraseCounters_st,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   169                  &Fee_Prv_DbgBfr_au8[packAdr_u32],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   170                  sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   171              );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   172              packAdr_u32 += sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   173          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   174  #endif
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   175  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   176          /* Place an order at the Fee */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   177          if(E_OK == Fee_Write(FeeConf_FeeBlockConfiguration_Fee_DebugBlock, &Fee_Prv_DbgBfr_au8[0u]))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   178          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   179              /* Track the number of debug block write for debugging purposes */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   180              Fee_Prv_Dbg_st.nrDbgBlockWrites_u32++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   181  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   182              Fee_Prv_Dbg_st.isDebugBlockWriteRequested_b = FALSE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   183          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   184      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   185  #endif  /* FEE_PRV_CFG_DBG_BLOCK */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   186  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   187  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   188  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   189  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   190   * \brief   Start a timing measurement.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   191   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   192   * \param   time_pst    Time entry which shall be used for measuring
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   193  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   194  void Fee_Prv_DbgWatchStart(Fee_Prv_DbgTimeEntry_tst * time_pst)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   195  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   196      time_pst->tiTmp_u32 = Mcu_Rb_GetSysTicks();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   197  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   198  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   199  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   200   * \brief   Stop a previously started timing measurement and evaluate the result.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   201   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   202   * \param   time_pst            Time entry which was used for starting the measurement
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   203   * \param   updateDebugBlock_b  In case the time is a new maximum trigger storing the debug block
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   204   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   205   * \seealso Fee_Prv_DbgWatchStart
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   206  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   207  void Fee_Prv_DbgWatchStop(Fee_Prv_DbgTimeEntry_tst * time_pst, boolean updateDebugBlock_b)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   208  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   209      time_pst->tiLast_u32 = MCU_RB_TICKS_TO_US(Mcu_Rb_GetSysTicks() - time_pst->tiTmp_u32);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   210      time_pst->tiAcc_u32 += time_pst->tiLast_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   211      if(time_pst->tiMax_u32 < time_pst->tiLast_u32)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   212      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   213          time_pst->tiMax_u32 = time_pst->tiLast_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   214          if(TRUE == updateDebugBlock_b)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   215          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   216              Fee_Prv_Dbg_st.isDebugBlockWriteRequested_b = TRUE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   217          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   218      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   219      Fee_Prv_DbgHistInsert(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   220          &time_pst->hist_au32[0],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   221          time_pst->tiLast_u32,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   222          FEE_PRV_CFG_DBG_TIME_HISTOGRAM_BASKETNUM
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   223      );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   224  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   225  #endif  /* FEE_PRV_CFG_DBG_TIME */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   226  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   227  #if (TRUE == FEE_PRV_CFG_DBG_ERASECOUNTERS)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   228  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   229   * \brief   Track the erase of a sector in the debug block.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   230   *
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   231   * \param   ID of the sector that shall be tracked
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   232  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   233  void Fee_Prv_DbgEraseCountersTrack(rba_FeeFs2_Prv_Sector_tst const * sector_pcst)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   234  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   235      uint32 id_u32 = rba_FeeFs2_Prv_SectorGetId(sector_pcst);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   236  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   237      /* Increment the sector specific erase counter */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   238      Fee_Prv_DbgInfo_st.eraseCounters_st.sectorDeleteAbs_au32[id_u32]++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   239  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   240      /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   241       * Find out the erase delta and remember it in the histogram.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   242       * Do not track the delta if the sector counter is 0.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   243       * In case the sector counter is 0 the sector was in undefined state on startup.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   244       */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   245      if(0u < sector_pcst->counter_u32)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   246      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   247          uint32 delta_u32 = rba_FeeFs2_Prv_SectorGetMaxCounter() - sector_pcst->counter_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   248          Fee_Prv_DbgHistInsert(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   249              &Fee_Prv_DbgInfo_st.eraseCounters_st.sectorDeleteDelta_aau32[id_u32][0u],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   250              delta_u32,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   251              FEE_PRV_CFG_DBG_ERASECOUNTERS_HISTOGRAM_BASKETNUM
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   252          );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   253      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   254  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   255      /* Trigger storing the debug info struct */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   256      Fee_Prv_Dbg_st.isDebugBlockWriteRequested_b = TRUE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   257  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   258  #endif  /* FEE_PRV_CFG_DBG_ERASECOUNTERS */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   259  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   260  #if (TRUE == FEE_PRV_CFG_DBG_CHECKLAYOUT)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   261  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   262   * \brief   Check that all blocks in a list are present - if not, go in a endless loop.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   263   *          This function is useful for reset tests.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   264   *          When a block gets lost this function prevents that the dump is modified further.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   265  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   266  void Fee_Prv_DbgCheckLayout(void)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   267  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   268      uint32 a_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   269      for(a_u32 = 0; a_u32 < sizeof(Fee_Prv_DbgCheckLayoutBlocklist_au16)/sizeof(uint16); a_u32++)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   270      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   271          if(E_OK == Fee_Read(Fee_Prv_DbgCheckLayoutBlocklist_au16[a_u32], 0, &Fee_Prv_DbgCheckLayoutBfr_au8[0], 1))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   272          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   273              do
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   274              {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   275                  Fee_MainFunction();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   276                  Fls_MainFunction();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   277              } while(MEMIF_JOB_PENDING == Fee_GetJobResult());
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   278  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   279              if(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   280                  (MEMIF_JOB_OK           != Fee_GetJobResult())  &&
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   281                  (MEMIF_BLOCK_INVALID    != Fee_GetJobResult())
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   282              )
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   283              {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   284                  /* Block was lost - freeze the system */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   285                  Fee_Prv_Dbg_st.freeze_b = TRUE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   286                  break;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   287              }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   288          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   289          else
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   290          {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   291              /* Something strange is going on - freeze the system */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   292              Fee_Prv_Dbg_st.freeze_b = TRUE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   293              break;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   294          }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   295      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   296  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   297      /* Endless loop to prevent that the dump is further modified */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   298      while(TRUE == Fee_Prv_Dbg_st.freeze_b)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   299      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   300          Fee_Prv_DbgCheckLayoutBfr_au8[0]++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   301      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   302  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   303  #endif  /* FEE_PRV_CFG_DBG_CHECKLAYOUT */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   304  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   305  #if (TRUE == FEE_PRV_CFG_DBG_DUMP)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   306  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   307   * \brief   Create a dump in the Fee development simulation.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   308   *          This is only active during development.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   309  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   310  void Fee_Prv_DbgDump(void)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   311  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   312      char filename_ac[50];
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   313      sprintf(filename_ac, "Fee_Dump%u", Fee_Prv_Dbg_st.nrDump_u32);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   314      rba_FlsPc_SaveFlsDump(filename_ac);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   315      Fee_Prv_Dbg_st.nrDump_u32++;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   316  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   317  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   318  /**
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   319   * \brief   Create a dump if the job result is failed.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   320   *          Useful for finding unexpected errors.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   321   *          This is only active during development.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   322  */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   323  void Fee_Prv_DbgFailDump(MemIf_JobResultType result_en)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   324  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   325      if(MEMIF_JOB_FAILED == result_en)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   326      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   327          Fee_Prv_DbgDump();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   328      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   329  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   330  #endif  /* FEE_PRV_CFG_DBG_DUMP */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   331  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   332  #if (TRUE == FEE_PRV_CFG_DBG_BLOCK)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   333  void Fee_Prv_DbgBlockRead(void)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   334  {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   335      Fee_Prv_OrderJob_tst            order_st;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   336      MemIf_JobResultType             jobResult_en;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   337      MemIf_Rb_MigrationResult_ten    dummyMigrationResult_en;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   338      uint32                          packAdr_u32;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   339  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   340      /* Setup order */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   341      order_st.type_en                = FEE_PRV_ORDERTYPE_READ_E;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   342      order_st.bfr_pu8                = (uint8 *)(&Fee_Prv_DbgBfr_au8[0u]);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   343      order_st.blockNumber_u16        = FeeConf_FeeBlockConfiguration_Fee_DebugBlock;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   344      order_st.length_u16             = FEE_PRV_CFG_DBG_BLOCK_SIZE;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   345      order_st.offset_u16             = 0u;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   346      order_st.migrationResult_pen    = &dummyMigrationResult_en;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   347  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   348      /* Perform the read */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   349      Fee_Prv_FsIfRead(&order_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   350      do
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   351      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   352          jobResult_en = Fee_Prv_FsIfReadDo();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   353          Fls_MainFunction();
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   354      } while(MEMIF_JOB_PENDING == jobResult_en);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   355  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   356      if(MEMIF_JOB_OK != jobResult_en)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   357      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   358          /* Set all to 0 */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   359          Fee_Prv_LibMemSet(&Fee_Prv_DbgBfr_au8[0u], 0u, sizeof(Fee_Prv_DbgBfr_au8));
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   360      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   361  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   362      packAdr_u32 = 0u;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   363  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   364  #if (TRUE == FEE_PRV_CFG_DBG_TIME)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   365      /*
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   366       * This function shall only be called at the end of Fee_Init.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   367       * At this place a value for the init time is already available.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   368       * This measurement shall not be overwritten but merged with the already available data.
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   369       */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   370      Fee_Prv_DbgTimeEntry_tst init_st = Fee_Prv_DbgInfo_st.time_st.procInit_st;
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   371  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   372      if(sizeof(Fee_Prv_DbgBfr_au8) >= (packAdr_u32 + sizeof(Fee_Prv_DbgInfo_st.time_st)))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   373      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   374          Fee_Prv_LibMemCopy(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   375              &Fee_Prv_DbgBfr_au8[packAdr_u32],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   376              (uint8 *)&Fee_Prv_DbgInfo_st.time_st,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   377              sizeof(Fee_Prv_DbgInfo_st.time_st)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   378          );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   379          packAdr_u32 += sizeof(Fee_Prv_DbgInfo_st.time_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   380      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   381  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   382      Fee_Prv_DbgTeMerge(&Fee_Prv_DbgInfo_st.time_st.procInit_st, &init_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   383  #endif /* FEE_PRV_CFG_DBG_TIME */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   384  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   385  #if (TRUE == FEE_PRV_CFG_DBG_ERASECOUNTERS)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   386      if(sizeof(Fee_Prv_DbgBfr_au8) >= (packAdr_u32 + sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st)))
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   387      {
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   388          Fee_Prv_LibMemCopy(
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   389              &Fee_Prv_DbgBfr_au8[packAdr_u32],
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   390              (uint8 *)&Fee_Prv_DbgInfo_st.eraseCounters_st,
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   391              sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st)
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   392          );
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   393          packAdr_u32 += sizeof(Fee_Prv_DbgInfo_st.eraseCounters_st);
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   394      }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   395  #endif  /* FEE_PRV_CFG_DBG_ERASECOUNTERS */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   396  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   397  }
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   398  #endif  /* FEE_PRV_CFG_DBG_BLOCK */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   399  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   400  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   401  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   402  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   403  #endif  /* FEE_PRV_CFG_DBG */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   404  
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   405  /* 1 != FEE_PRV_CFG_SELECTED_FS */
; BSW\src\BSW\Gen\Fee\src\Fee_Dbg.c	   406  #endif

	; Module end
