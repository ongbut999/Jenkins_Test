	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14708a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspObd_Mode1.src BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspObd\\DcmDspObd_Mode1.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspObd\\DcmDspObd_Mode1.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	10583
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspObd\\DcmDspObd_Mode1.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	158
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	160
	.byte	5
	.byte	'char',0,1,6,4
	.byte	'sint8',0,2,76,25
	.word	183
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,2,81,25
	.word	205
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,91,25
	.word	236
	.byte	5
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,2,106,24
	.word	273
	.byte	5
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,2,111,30
	.word	304
	.byte	4
	.byte	'boolean',0,2,127,25
	.word	205
	.byte	4
	.byte	'StatusType',0,3,191,1,27
	.word	205
	.byte	4
	.byte	'Std_ReturnType',0,3,199,1,15
	.word	205
	.byte	6,3,206,1,9,8,7
	.byte	'vendorID',0
	.word	236
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	236
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	205
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	205
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	205
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,3,213,1,3
	.word	405
	.byte	4
	.byte	'PduIdType',0,4,22,19
	.word	236
	.byte	4
	.byte	'PduLengthType',0,4,26,19
	.word	236
	.byte	8,5,113,9,4,9
	.byte	'TP_DATACONF',0,0,9
	.byte	'TP_DATARETRY',0,1,9
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,118,3
	.word	595
	.byte	4
	.byte	'NetworkHandleType',0,5,128,1,17
	.word	205
	.byte	4
	.byte	'Can_IdType',0,6,32,16
	.word	273
	.byte	4
	.byte	'Can_HwHandleType',0,6,43,16
	.word	236
	.byte	6,7,93,9,8,7
	.byte	'Class',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	205
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	273
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,7,97,3
	.word	742
	.byte	10,68
	.word	273
	.byte	11,16,0,6,7,154,1,9,68,7
	.byte	'store',0
	.word	822
	.byte	68,2,35,0,0,10,68
	.word	831
	.byte	11,0,0,4
	.byte	'Os_JumpBufType',0,7,156,1,3
	.word	853
	.byte	4
	.byte	'Os_StackTraceType',0,7,174,1,18
	.word	273
	.byte	6,7,175,1,9,8,7
	.byte	'sp',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	273
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,7,175,1,63
	.word	913
	.byte	4
	.byte	'Os_StackSizeType',0,7,176,1,27
	.word	913
	.byte	12,1,1,3
	.word	998
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,7,179,1,16
	.word	1001
	.byte	4
	.byte	'ApplicationType',0,7,193,1,23
	.word	205
	.byte	13
	.byte	'Os_ApplicationConfigurationType_s',0,7,198,1,16,2,7
	.byte	'app_id',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,7,201,1,3
	.word	1064
	.byte	4
	.byte	'Os_CoreStateType',0,7,203,1,16
	.word	273
	.byte	4
	.byte	'AreaIdType',0,7,204,1,16
	.word	236
	.byte	4
	.byte	'Os_PeripheralAddressType',0,7,212,1,22
	.word	273
	.byte	4
	.byte	'TickType',0,7,221,1,22
	.word	273
	.byte	4
	.byte	'Os_StopwatchTickType',0,7,225,1,22
	.word	273
	.byte	3
	.word	273
	.byte	4
	.byte	'Os_Lockable',0,7,234,1,18
	.word	1306
	.byte	4
	.byte	'CoreIdType',0,7,236,1,16
	.word	236
	.byte	4
	.byte	'SpinlockIdType',0,7,237,1,16
	.word	236
	.byte	8,7,239,1,9,4,9
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,9
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,7,239,1,74
	.word	1376
	.byte	8,7,174,2,9,4,9
	.byte	'APPLICATION_ACCESSIBLE',0,0,9
	.byte	'APPLICATION_RESTARTING',0,1,9
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,7,174,2,92
	.word	1469
	.byte	14
	.byte	'void',0,3
	.word	1581
	.byte	15,1,1,16
	.word	205
	.byte	16
	.word	1587
	.byte	0,3
	.word	1592
	.byte	4
	.byte	'Os_FunctionEntryType',0,7,183,2,16
	.word	1606
	.byte	13
	.byte	'Os_MeterInfoType_s',0,7,193,2,16,48,7
	.byte	'elapsed',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	273
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	273
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	913
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	913
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	913
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	913
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,7,202,2,3
	.word	1641
	.byte	3
	.word	1641
	.byte	4
	.byte	'Os_MeterInfoRefType',0,7,203,2,50
	.word	1839
	.byte	4
	.byte	'EventMaskType',0,7,206,2,15
	.word	205
	.byte	4
	.byte	'Os_imaskType',0,7,211,2,16
	.word	273
	.byte	13
	.byte	'Os_ISRDynType_s',0,7,213,2,16,48,7
	.byte	'meter',0
	.word	1641
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,7,215,2,3
	.word	1918
	.byte	3
	.word	1918
	.byte	17
	.word	1979
	.byte	13
	.byte	'Os_ISRType_s',0,7,216,2,16,24,7
	.byte	'entry_function',0
	.word	1006
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	1984
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	273
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	913
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	205
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,7,223,2,3
	.word	1989
	.byte	3
	.word	998
	.byte	17
	.word	1989
	.byte	3
	.word	2148
	.byte	4
	.byte	'ISRType',0,7,224,2,46
	.word	2153
	.byte	4
	.byte	'Os_bitmask',0,7,239,2,22
	.word	273
	.byte	4
	.byte	'Os_pset0Type',0,7,240,2,20
	.word	273
	.byte	4
	.byte	'Os_pset1Type',0,7,241,2,20
	.word	273
	.byte	4
	.byte	'Os_pset2Type',0,7,242,2,20
	.word	273
	.byte	18,7,243,2,9,4,7
	.byte	'p0',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	273
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,7,247,2,3
	.word	2261
	.byte	18,7,249,2,9,4,7
	.byte	't0',0
	.word	273
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	273
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	273
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,7,253,2,3
	.word	2325
	.byte	4
	.byte	'Os_ActivationCountType',0,7,254,2,23
	.word	205
	.byte	13
	.byte	'Os_TaskDynType_s',0,7,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	862
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	1641
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	205
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,7,132,3,3
	.word	2423
	.byte	10,68
	.word	831
	.byte	11,0,0,3
	.word	2423
	.byte	17
	.word	2549
	.byte	13
	.byte	'Os_TaskType_s',0,7,134,3,16,40,7
	.byte	'dynamic',0
	.word	2554
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	1006
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	2261
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	2325
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	2325
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	236
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	273
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	913
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	205
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	205
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,7,146,3,3
	.word	2559
	.byte	17
	.word	2559
	.byte	3
	.word	2809
	.byte	4
	.byte	'TaskType',0,7,147,3,47
	.word	2814
	.byte	19
	.byte	'Os_TaskStateType',0,7,155,3,6,4,9
	.byte	'SUSPENDED',0,0,9
	.byte	'READY',0,1,9
	.byte	'WAITING',0,2,9
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,7,156,3,31
	.word	2837
	.byte	18,7,167,3,3,4,7
	.byte	'tpmask',0
	.word	2325
	.byte	4,2,35,0,0,13
	.byte	'Os_ResourceDynType_s',0,7,166,3,16,4,7
	.byte	'saved_priority',0
	.word	2924
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,7,170,3,3
	.word	2947
	.byte	3
	.word	2947
	.byte	17
	.word	3027
	.byte	13
	.byte	'Os_ResourceType_s',0,7,171,3,16,12,7
	.byte	'dynamic',0
	.word	3032
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	2325
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,7,175,3,3
	.word	3037
	.byte	6,7,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	273
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,7,185,3,3
	.word	3136
	.byte	6,7,206,3,9,8,7
	.byte	'Running',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	205
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	273
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,7,210,3,3
	.word	3231
	.byte	20
	.word	205
	.byte	1,1,3
	.word	3317
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,7,217,3,22
	.word	3324
	.byte	13
	.byte	's_swd',0,7,222,3,12,4,7
	.byte	'count',0
	.word	273
	.byte	4,2,35,0,0,18,7,221,3,3,4,7
	.byte	'sw',0
	.word	3360
	.byte	4,2,35,0,0,13
	.byte	'Os_CounterDynType_s',0,7,220,3,16,4,7
	.byte	'type_dependent',0
	.word	3388
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,7,226,3,3
	.word	3407
	.byte	3
	.word	3407
	.byte	17
	.word	3485
	.byte	13
	.byte	'Os_CounterType_s',0,7,227,3,16,28,7
	.byte	'dynamic',0
	.word	3490
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	3329
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	3136
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	1587
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	205
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,7,234,3,3
	.word	3495
	.byte	3
	.word	3317
	.byte	17
	.word	3495
	.byte	3
	.word	3647
	.byte	4
	.byte	'CounterType',0,7,235,3,52
	.word	3652
	.byte	19
	.byte	'Os_ScheduleTableStatusType',0,7,240,3,6,4,9
	.byte	'SCHEDULETABLE_STOPPED',0,0,9
	.byte	'SCHEDULETABLE_NEXT',0,1,9
	.byte	'SCHEDULETABLE_WAITING',0,2,9
	.byte	'SCHEDULETABLE_RUNNING',0,3,9
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,7,241,3,41
	.word	3678
	.byte	17
	.word	.L6-.L3
	.byte	3
	.word	3878
	.byte	4
	.byte	'ScheduleTableType',0,7,128,4,58
	.word	3883
	.byte	13
	.byte	'Os_ScheduleTableDynType_s',0,7,130,4,16,16,7
	.byte	'match',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	3888
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	3678
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	236
	.byte	2,2,35,12,0,3
	.word	3915
	.byte	17
	.word	4008
.L6:
	.byte	13
	.byte	'Os_ScheduleTableType_s',0,7,247,3,16,16,7
	.byte	'dynamic',0
	.word	4013
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	3657
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	205
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	236
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	205
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	205
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	205
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,7,255,3,3
	.word	4018
	.byte	17
	.word	4018
	.byte	3
	.word	4198
	.byte	17
	.word	3495
	.byte	3
	.word	4208
	.byte	21
	.word	1311
	.byte	21
	.word	2261
	.byte	21
	.word	2158
	.byte	21
	.word	2819
	.byte	21
	.word	2325
	.byte	21
	.word	205
	.byte	21
	.word	2819
	.byte	13
	.byte	'Os_ControlledCoreType_s',0,7,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	742
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	4218
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	4223
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	4228
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	4233
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	4238
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	1844
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	1641
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	205
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	4243
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	913
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	205
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	4248
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	913
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	205
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	205
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	205
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,7,141,7,3
	.word	4253
	.byte	3
	.word	273
	.byte	17
	.word	1989
	.byte	3
	.word	4709
	.byte	17
	.word	2559
	.byte	3
	.word	4719
	.byte	3
	.word	1641
	.byte	13
	.byte	'Os_AnyCoreType_s',0,7,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	273
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	273
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	273
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	273
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	862
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	205
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,7,160,7,3
	.word	4734
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,8,219,3,16
	.word	273
	.byte	13
	.byte	'Can_TxHwObjectConfigType',0,8,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	205
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	273
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,8,252,3,3
	.word	5011
	.byte	13
	.byte	'Can_RxHwObjectConfigType',0,8,129,4,16,12,7
	.byte	'MaskRef',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	205
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	205
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,8,147,4,3
	.word	5147
	.byte	10,4
	.word	205
	.byte	11,3,0,13
	.byte	'Can_ControllerMOMapConfigType',0,8,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	5287
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,8,184,4,3
	.word	5296
	.byte	13
	.byte	'Can_NPCRValueType',0,8,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	236
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,8,191,4,3
	.word	5397
	.byte	13
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,8,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	236
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,8,198,4,3
	.word	5472
	.byte	17
	.word	5472
	.byte	3
	.word	5637
	.byte	13
	.byte	'Can_BaudrateConfigPtrType',0,8,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	5642
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,8,204,4,3
	.word	5647
	.byte	13
	.byte	'Can_EventHandlingType',0,8,226,4,16,4,7
	.byte	'CanEventType',0
	.word	5287
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,8,229,4,3
	.word	5747
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,9,130,1,15
	.word	205
	.byte	4
	.byte	'Rte_TransformerClass',0,9,131,1,15
	.word	205
	.byte	6,9,168,1,9,12,7
	.byte	'in',0
	.word	1587
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	1587
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	236
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	205
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,9,173,1,3
	.word	5893
	.byte	8,9,175,1,9,4,9
	.byte	'RTE_DRA',0,0,9
	.byte	'RTE_WOWP',0,1,9
	.byte	'RTE_TASK',0,2,9
	.byte	'RTE_ARE',0,3,9
	.byte	'RTE_EV',0,4,9
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,9,182,1,3
	.word	5980
	.byte	10,128,8
	.word	205
	.byte	11,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,10,50,15
	.word	6078
	.byte	4
	.byte	'CanIf_u32_impl',0,10,69,16
	.word	273
	.byte	4
	.byte	'CanIf_u16_impl',0,10,71,16
	.word	236
	.byte	4
	.byte	'CanIf_u8_impl',0,10,73,15
	.word	205
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,10,88,15
	.word	205
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,10,90,15
	.word	205
	.byte	6,10,92,9,2,7
	.byte	'DeviceMode',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	205
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,10,95,3
	.word	6269
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,10,100,15
	.word	205
	.byte	4
	.byte	'CanSM_boolean_Impl',0,10,120,15
	.word	205
	.byte	4
	.byte	'CanSM_u8_Impl',0,10,123,15
	.word	205
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,10,128,1,15
	.word	205
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,10,132,1,15
	.word	205
	.byte	4
	.byte	'CanSM_u16_Impl',0,10,136,1,16
	.word	236
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,10,138,1,15
	.word	205
	.byte	6,10,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	236
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	205
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,10,143,1,3
	.word	6610
	.byte	4
	.byte	'Com_impl_u16',0,10,154,1,16
	.word	236
	.byte	4
	.byte	'Com_impl_u8',0,10,157,1,15
	.word	205
	.byte	4
	.byte	'ComM_uint32_Impl',0,10,173,1,16
	.word	273
	.byte	4
	.byte	'ComM_uint16_Impl',0,10,175,1,16
	.word	236
	.byte	4
	.byte	'ComM_uint8_Impl',0,10,177,1,15
	.word	205
	.byte	4
	.byte	'ComM_bool_Impl',0,10,179,1,15
	.word	205
	.byte	6,10,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	236
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	205
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	205
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	205
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	205
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	205
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	205
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	205
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	205
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	205
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	205
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	205
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	205
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,10,197,1,3
	.word	6842
	.byte	6,10,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	236
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	236
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	205
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	205
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	205
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	205
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	205
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,10,214,1,3
	.word	7346
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,10,252,1,15
	.word	205
	.byte	4
	.byte	'Dcm_NegativeResponseCodeType',0,10,132,2,15
	.word	205
	.byte	4
	.byte	'Dcm_OpStatusType',0,10,134,2,15
	.word	205
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	10,138,2,15
	.word	205
	.byte	4
	.byte	'Dcm_SecLevelType',0,10,142,2,15
	.word	205
	.byte	4
	.byte	'Dcm_SesCtrlType',0,10,144,2,15
	.word	205
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,10,146,2,15
	.word	205
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,10,150,2,15
	.word	205
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,10,154,2,15
	.word	205
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,10,243,3,34
	.word	6089
	.byte	10,128,8
	.word	205
	.byte	11,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,10,246,3,34
	.word	6089
	.byte	4
	.byte	'Rte_ModeType_DcmDiagnosticSessionControl',0,11,37,15
	.word	205
	.byte	4
	.byte	'Dcm_MsgItemType',0,12,182,2,15
	.word	205
	.byte	3
	.word	205
	.byte	4
	.byte	'Dcm_MsgType',0,12,188,2,57
	.word	8353
	.byte	4
	.byte	'Dcm_MsgLenType',0,12,197,2,16
	.word	273
	.byte	6,12,206,2,9,4,7
	.byte	'reqType',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'suppressPosResponse',0
	.word	205
	.byte	1,2,35,1,7
	.byte	'sourceofRequest',0
	.word	205
	.byte	1,2,35,2,0,4
	.byte	'Dcm_MsgAddInfoType',0,12,219,2,2
	.word	8403
	.byte	4
	.byte	'Dcm_IdContextType',0,12,225,2,15
	.word	205
	.byte	6,12,238,5,9,32,7
	.byte	'tx_buffer_pa',0
	.word	8358
	.byte	4,2,35,0,7
	.byte	'rx_mainBuffer_pa',0
	.word	8358
	.byte	4,2,35,4,7
	.byte	'tx_buffer_size_u32',0
	.word	273
	.byte	4,2,35,8,7
	.byte	'rx_buffer_size_u32',0
	.word	273
	.byte	4,2,35,12,7
	.byte	'dataP2TmrAdjust',0
	.word	273
	.byte	4,2,35,16,7
	.byte	'dataP2StarTmrAdjust',0
	.word	273
	.byte	4,2,35,20,7
	.byte	'protocolid_u8',0
	.word	205
	.byte	1,2,35,24,7
	.byte	'sid_tableid_u8',0
	.word	205
	.byte	1,2,35,25,7
	.byte	'premption_level_u8',0
	.word	205
	.byte	1,2,35,26,7
	.byte	'pduinfo_idx_u8',0
	.word	205
	.byte	1,2,35,27,7
	.byte	'nrc21_b',0
	.word	205
	.byte	1,2,35,28,7
	.byte	'sendRespPendTransToBoot',0
	.word	205
	.byte	1,2,35,29,0,4
	.byte	'Dcm_Dsld_protocol_tableType',0,12,143,6,2
	.word	8536
	.byte	3
	.word	205
	.byte	15,1,1,16
	.word	205
	.byte	16
	.word	236
	.byte	16
	.word	236
	.byte	16
	.word	205
	.byte	0,3
	.word	8892
	.byte	4
	.byte	'Dcm_ConfirmationApiType',0,12,145,6,16
	.word	8916
	.byte	3
	.word	205
	.byte	22
	.word	205
	.byte	1,1,16
	.word	8954
	.byte	16
	.word	205
	.byte	16
	.word	205
	.byte	0,3
	.word	8959
	.byte	6,12,240,2,9,28,7
	.byte	'resData',0
	.word	8358
	.byte	4,2,35,0,7
	.byte	'reqData',0
	.word	8358
	.byte	4,2,35,4,7
	.byte	'msgAddInfo',0
	.word	8403
	.byte	4,2,35,8,7
	.byte	'resDataLen',0
	.word	273
	.byte	4,2,35,12,7
	.byte	'reqDataLen',0
	.word	273
	.byte	4,2,35,16,7
	.byte	'resMaxDataLen',0
	.word	273
	.byte	4,2,35,20,7
	.byte	'idContext',0
	.word	205
	.byte	1,2,35,24,7
	.byte	'dcmRxPduId',0
	.word	236
	.byte	2,2,35,26,0,3
	.word	8987
	.byte	22
	.word	205
	.byte	1,1,16
	.word	205
	.byte	16
	.word	9150
	.byte	16
	.word	8954
	.byte	0,3
	.word	9155
	.byte	6,12,158,6,9,20,7
	.byte	'allowed_session_b32',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'allowed_security_b32',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'adrUserSubServiceModeRule_pfct',0
	.word	8982
	.byte	4,2,35,8,7
	.byte	'SubFunc_fp',0
	.word	9178
	.byte	4,2,35,12,7
	.byte	'subservice_id_u8',0
	.word	205
	.byte	1,2,35,16,7
	.byte	'isDspRDTCSubFnc_b',0
	.word	205
	.byte	1,2,35,17,0,4
	.byte	'Dcm_Dsld_SubServiceType',0,12,169,6,2
	.word	9183
	.byte	17
	.word	9183
	.byte	3
	.word	9395
	.byte	22
	.word	205
	.byte	1,1,16
	.word	8954
	.byte	16
	.word	205
	.byte	0,3
	.word	9405
	.byte	6,12,186,6,9,36,7
	.byte	'allowed_session_b32',0
	.word	273
	.byte	4,2,35,0,7
	.byte	'allowed_security_b32',0
	.word	273
	.byte	4,2,35,4,7
	.byte	'service_handler_fp',0
	.word	9178
	.byte	4,2,35,8,7
	.byte	'Service_init_fp',0
	.word	1001
	.byte	4,2,35,12,7
	.byte	'sid_u8',0
	.word	205
	.byte	1,2,35,16,7
	.byte	'subfunction_exist_b',0
	.word	205
	.byte	1,2,35,17,7
	.byte	'servicelocator_b',0
	.word	205
	.byte	1,2,35,18,7
	.byte	'ptr_subservice_table_pcs',0
	.word	9400
	.byte	4,2,35,20,7
	.byte	'num_sf_u8',0
	.word	205
	.byte	1,2,35,24,7
	.byte	'adrUserServiceModeRule_pfct',0
	.word	9423
	.byte	4,2,35,28,7
	.byte	'Dcm_ConfirmationService',0
	.word	8921
	.byte	4,2,35,32,0,4
	.byte	'Dcm_Dsld_ServiceType',0,12,204,6,3
	.word	9428
	.byte	3
	.word	8892
	.byte	17
	.word	9428
	.byte	3
	.word	9776
	.byte	6,12,218,6,9,8,7
	.byte	'ptr_service_table_pcs',0
	.word	9781
	.byte	4,2,35,0,7
	.byte	'num_services_u8',0
	.word	205
	.byte	1,2,35,4,7
	.byte	'nrc_sessnot_supported_u8',0
	.word	205
	.byte	1,2,35,5,7
	.byte	'cdtc_index_u8',0
	.word	205
	.byte	1,2,35,6,0,4
	.byte	'Dcm_Dsld_sid_tableType',0,12,224,6,3
	.word	9786
	.byte	6,12,238,6,9,14,7
	.byte	'protocol_num_u8',0
	.word	205
	.byte	1,2,35,0,7
	.byte	'txpduid_num_u8',0
	.word	236
	.byte	2,2,35,2,7
	.byte	'roetype2_txpdu_u8',0
	.word	236
	.byte	2,2,35,4,7
	.byte	'rdpitype2_txpdu_u8',0
	.word	236
	.byte	2,2,35,6,7
	.byte	'testaddr_u16',0
	.word	236
	.byte	2,2,35,8,7
	.byte	'channel_idx_u8',0
	.word	205
	.byte	1,2,35,10,7
	.byte	'ConnectionIndex_u8',0
	.word	205
	.byte	1,2,35,11,7
	.byte	'NumberOfTxpdu_u8',0
	.word	205
	.byte	1,2,35,12,0,4
	.byte	'Dcm_Dsld_connType',0,12,248,6,3
	.word	9938
	.byte	8,12,146,7,9,4,9
	.byte	'DCM_DSLD_NO_COM_MODE',0,0,9
	.byte	'DCM_DSLD_SILENT_COM_MODE',0,1,9
	.byte	'DCM_DSLD_FULL_COM_MODE',0,2,0,4
	.byte	'Dcm_Dsld_commodeType',0,12,151,7,2
	.word	10176
	.byte	8,13,200,1,9,4,9
	.byte	'USE_ASYNCH_CLIENT_SERVER',0,0,9
	.byte	'USE_ASYNCH_FNC',0,1,0,4
	.byte	'DcmDspSecurityUsePort',0,13,204,1,2
	.word	10288
	.byte	8,14,22,9,4,9
	.byte	'DCM_NO_BOOT',0,0,9
	.byte	'DCM_OEM_BOOT',0,1,9
	.byte	'DCM_SYS_BOOT',0,2,0,4
	.byte	'Dcm_SessionForBootType',0,14,27,2
	.word	10370
	.byte	8,15,192,3,9,4,9
	.byte	'DCM_READ_OK',0,0,9
	.byte	'DCM_READ_FAILED',0,1,9
	.byte	'DCM_READ_PENDING',0,2,9
	.byte	'DCM_READ_FORCE_RCRRP',0,3,9
	.byte	'DCM_READ_NOT_AVAILABLE',0,4,0,4
	.byte	'Dcm_ReadMemoryRet_t',0,15,199,3,3
	.word	10451
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,8,4,1,58,15,59,15,57,15,11,15,0,0,9,40,0,3,8,28,13,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0
	.byte	12,21,0,54,15,39,12,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15,0,0,14,59,0,3,8,0,0,15,21,1,54,15,39,12,0
	.byte	0,16,5,0,73,19,0,0,17,38,0,73,19,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,20,21,0,73,19,54,15,39,12,0,0,21,53,0,73,19,0,0,22,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspObd\\DcmDspObd_Mode1.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dcm_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmCore_DslDsd_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Seca_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Dsc_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Uds_Pub.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     1  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     2  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     3  #include "DcmDspObd_Mode1_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     4  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     5  #if (DCM_CFG_DSPOBDSUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     6  #if (DCM_CFG_DSP_OBDMODE1_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     7  #include "DcmDspObd_Mode1_Priv.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     8  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	     9  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    10  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    11  /****************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    12  * Dcm_DcmObdMode01 :
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    13  * The purpose of this service is to allow read the current emission related data values,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    14  * including analog inputs and outputs, digital inputs and outputs and system information.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    15  * Request information includes PID value that indicates to the on board system the
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    16  * specific information requested and supported PIDs provided bit coded value for the range of PIDs.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    17  *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    18  * \param           pMsgContext    Pointer to message structure
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    19  *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    20  * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    21  * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    22  *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    23  **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    24  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    25  FUNC(Std_ReturnType, DCM_CODE) Dcm_DcmObdMode01 (VAR(Dcm_SrvOpStatusType,AUTOMATIC) OpStatus,P2VAR(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,P2VAR(Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    26  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    27      P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) adrRespBuf_pu8; /* Pointer to Response buffer                                */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    28      P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) adrReqBuf_pu8;  /* Pointer to Request buffer                                 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    29  #if (DCM_CFG_DSP_OBDMODE1_SINT32_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    30      VAR(sint32,         AUTOMATIC) dataSignal_s32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    31  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    32      VAR(uint32,         AUTOMATIC) dataPIDMaskVal_u32;      /* For supported PIDs,each PID is bit coded value of 4 bytes */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    33      VAR(uint32,         AUTOMATIC) dataCalPIDBitMask_u32;   /* Calculated Bit mask based on PID value                    */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    34      VAR(uint32,         AUTOMATIC) dataPidRunTimeMask_u32; /* For supported PIDs,each PID is bit coded value of 4 bytes */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    35      VAR(Dcm_MsgLenType, AUTOMATIC) nrResMaxDataLen_u32;   /* Maximum available response buffer                         */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    36      VAR(Dcm_MsgLenType, AUTOMATIC) nrReqDataLen_u32;      /* Request data length                                       */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    37      VAR(uint16_least,   AUTOMATIC) idxPIDRes_qu16;     /* Index to response buffer for valid PIDs                   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    38      VAR(uint16,         AUTOMATIC) idxSupportInfo_u16;/* Variable to store the index to fill support information   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    39      VAR(uint16,         AUTOMATIC) idxDataSource_u16;/* Index to the data element of a PID                        */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    40  #if (DCM_CFG_DSP_OBDMODE1_UINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    41      VAR(uint16,         AUTOMATIC) dataSignal_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    42  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    43  #if (DCM_CFG_DSP_OBDMODE1_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    44      VAR(uint16,         AUTOMATIC) nrElements_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    45      VAR(uint32,         AUTOMATIC) dataSignal_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    46      VAR(uint16,         AUTOMATIC) idxLoop_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    47  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    48      VAR(uint16,         AUTOMATIC) posnPidData_u16; /* Variable to store data position of PID to be passed to application API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    49  #if (DCM_CFG_DSP_OBDMODE1_SINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    50      VAR(sint16,         AUTOMATIC) dataSignal_s16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    51  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    52      VAR(uint8_least,    AUTOMATIC) nrPid_qu8;      /* Number of PIDs needs to be searched in PID configuration  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    53      VAR(uint8_least,    AUTOMATIC) idxPIDStart_qu8;      /* Start index in PID configuration                          */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    54      VAR(uint8_least,    AUTOMATIC) idxPIDData_qu8;       /* Start of data index associated with each PID              */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    55      VAR(uint8_least,    AUTOMATIC) nrPIDChk_qu8;      /* No: of PIDS in request to be searched in config structure */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    56      VAR(uint8,          AUTOMATIC) adrTmpBuf_au8[DCM_OBDMODE01_REQ_LEN_MAX]; /* Temporary buffer for maximum of 6 PIDs */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    57      VAR(uint8,          AUTOMATIC) idxPID_u8;         /* Pid index in bit mask configuration list                  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    58      VAR(uint8,          AUTOMATIC) nrMultiple_u8;       /* Number of special PIDS requested are multiples of 0x20    */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    59      VAR(uint8,          AUTOMATIC) dataSupportInfoByte_u8;  /* Byte to store the support information                     */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    60  #if (DCM_CFG_POSTBUILD_SUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    61      VAR(uint8,          AUTOMATIC) idxPidMaskDet_u8;            /* Pid index used for the calculation of bit mask on the run  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    62  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    63      VAR(Std_ReturnType, AUTOMATIC) dataGetPIDRetVal_u8;       /* Return value for function to read PID data                */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    64      VAR(Std_ReturnType, AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    65      VAR(boolean,AUTOMATIC) stPIDFound_b;                /* Flag set to 1 if requested PID is found in configuration  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    66  #if (DCM_CFG_DSP_OBDMODE1_UINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    67      VAR(uint8,          AUTOMATIC)   dataSignal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    68  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    69  #if (DCM_CFG_DSP_OBDMODE1_SINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    70      VAR(sint8,          AUTOMATIC)   dataSignal_s8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    71  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    72  #if (DCM_CFG_DSP_OBDMODE1_BOOL_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    73      VAR(boolean,        AUTOMATIC)   dataSignal_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    74  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    75      VAR(boolean,AUTOMATIC) stInfrastructureError_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    76  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    77      /* Initialisation of local variables */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    78  #if (DCM_CFG_DSP_OBDMODE1_SINT32_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    79      dataSignal_s32 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    80  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    81  #if (DCM_CFG_DSP_OBDMODE1_UINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    82      dataSignal_u16 = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    83  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    84  #if (DCM_CFG_DSP_OBDMODE1_SINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    85      dataSignal_s16 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    86  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    87  #if (DCM_CFG_DSP_OBDMODE1_UINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    88      dataSignal_u8  = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    89  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    90  #if (DCM_CFG_DSP_OBDMODE1_SINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    91      dataSignal_s8  = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    92  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    93  #if (DCM_CFG_DSP_OBDMODE1_BOOL_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    94      dataSignal_b   = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    95  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    96  #if (DCM_CFG_DSP_OBDMODE1_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    97      nrElements_u16 = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    98      dataSignal_u32 = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	    99      idxLoop_u16  = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   100  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   101      /* Initialisation of local variables */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   102      *dataNegRespCode_u8       = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   103      dataGetPIDRetVal_u8     = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   104      idxPIDRes_qu16   = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   105      nrPid_qu8    = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   106      idxPIDStart_qu8    = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   107      idxPIDData_qu8     = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   108      dataCalPIDBitMask_u32 = 0x00u;                     /* To remove warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   109      adrTmpBuf_au8[0]    = 0x00u;                     /* To remove Misra warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   110      /*Initialise PIDFound value with False*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   111      stPIDFound_b      = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   112      nrMultiple_u8     = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   113      /* Initialise InfrastructureError value with false*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   114      stInfrastructureError_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   115      dataReturnValue_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   116  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   117      /* Copy the requested data length into local variable */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   118      nrReqDataLen_u32 = (pMsgContext->reqDataLen);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   119      /*Opstatus possed by the central statemachine is unused currently, opstatus variables related to service needs to be
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   120       * removed and the one passed by the central statemachine needs to be used, this would be taken care with task XXXXX*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   121      DCM_UNUSED_PARAM(OpStatus);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   122      /* Check if the request Data Length is greater than 0 and less than 7 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   123      if((nrReqDataLen_u32 > DCM_OBDMODE01_REQ_LEN_MIN) && (nrReqDataLen_u32 < DCM_OBDMODE01_REQ_LEN_MAX))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   124      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   125          /* Pointer to request buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   126          adrReqBuf_pu8 = pMsgContext->reqData;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   127  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   128          /* Check if it is pure multiple of 0x20 or non multiple of 0x20 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   129          for(nrPIDChk_qu8=0;(nrPIDChk_qu8 < nrReqDataLen_u32);nrPIDChk_qu8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   130          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   131              /* Check the multiple of 0x20 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   132              if((adrReqBuf_pu8[nrPIDChk_qu8] & 0x1Fu)== 0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   133              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   134                  /* Increment counter if PID is pure multiple of 0x20 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   135                  nrMultiple_u8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   136              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   137  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   138              /* Copy PID to temporary buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   139              adrTmpBuf_au8[nrPIDChk_qu8] = adrReqBuf_pu8[nrPIDChk_qu8];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   140          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   141  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   142          /* Request should not be a  mix of  availability and data PIDs. If only availability PID is
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   143             requested then the counter value should be requested data length.If only PID which report
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   144             data value is requested then the counter value should be equal to 0. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   145          if((nrMultiple_u8 == 0u) || (nrMultiple_u8 == nrReqDataLen_u32 ))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   146          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   147              /* Calculate buffer index to be passed for the data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   148              adrRespBuf_pu8 = pMsgContext->resData;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   149  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   150              /* Set Negative response code 0x12 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   151              /* NRC 0x12 is suppressed in DCM module for OBD service since its functional addressing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   152              *dataNegRespCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   153  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   154              /* Get the maximum response data length in response buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   155              nrResMaxDataLen_u32 = pMsgContext->resMaxDataLen;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   156  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   157              /* Check for PIDs which are requested by tester */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   158              for(nrPIDChk_qu8 = 0;(nrPIDChk_qu8 < nrReqDataLen_u32);nrPIDChk_qu8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   159              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   160                  dataPidRunTimeMask_u32 = 0x0; /*Initialize the local variable to 0 which is to calculate the support for PIDS in the specified range*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   161                  /* Index for Dcm_Dsp_Mode1Bitmask_acs is calculated based on PID number index number = PID number/0x20*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   162                  idxPID_u8 = (uint8)((adrTmpBuf_au8[nrPIDChk_qu8]) / DCM_OBDMODE01_SUPPPID);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   163  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   164                  /* Based on PID number,access the PID mask value corresponding to index in Dcm_Dsp_Mode1Bitmask_acs*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   165                  dataPIDMaskVal_u32 = Dcm_Dsp_Mode1Bitmask_acs[idxPID_u8].BitMask_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   166  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   167                  /* If only availability PID is requested then the counter value should be requested data length.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   168                     If only PID which report data value is requested then the counter value is equal to 0*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   169                  if(nrMultiple_u8 != 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   170                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   171                      /* Check if request buffer is sufficient */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   172                      if(nrResMaxDataLen_u32>=0x05u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   173                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   174                          /* In case supported PIDs, based on PID number calculate the index and get masked value from
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   175                          configuration structure Dcm_Dsp_BitMask_acs.Each supported PID provides bit coded value for
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   176                          the range of PIDS which are supported or not.Eg: PID 00 provides bit coded value for range
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   177                          of PID $01 to $20.For each supported PID, 4 bytes(32 PIDS) are allocated in response format */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   178  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   179                          /* Copy the PID number and PIDMask value only if accessed PIDMask value is not 00 00 00 00*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   180                          if(dataPIDMaskVal_u32 > 0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   181                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   182  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   183  #if (DCM_CFG_POSTBUILD_SUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   184                              /*Calculation of supported PIDs on the runtime for the current active configuration*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   185                              for(idxPidMaskDet_u8=0;idxPidMaskDet_u8<(Dcm_Dsp_Mode1Bitmask_acs[idxPID_u8].NumPids_u8);idxPidMaskDet_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   186                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   187                                  /*Check if PID is available in current DCM config set with post build enabled*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   188                                  if((Dcm_ActiveConfiguration_u8 & Dcm_Dsp_Mode1PidArray_acs[idxPidMaskDet_u8].Config_Mask)!= 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   189                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   190                                      /*Calculate the supported PIDs which are available for the current active DCM config set
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   191                                       *          For each supported PID, 4 bytes are allocated in the response             */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   192                                      dataPidRunTimeMask_u32=(dataPidRunTimeMask_u32 | (1 << (32-Dcm_Dsp_Mode1PidArray_acs[idxPidMaskDet_u8].Pid_Id_u8)));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   193                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   194                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   195  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   196                              dataPidRunTimeMask_u32=dataPIDMaskVal_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   197  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   198                              /*This additional check is required if post build is enabled and to copy the PID number and PID mask value
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   199                                only when it is not 00 00 00 00*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   200                              if(dataPidRunTimeMask_u32 > 0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   201                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   202                                  /* Copy PID to response buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   203                                  adrRespBuf_pu8[idxPIDRes_qu16] = adrTmpBuf_au8[nrPIDChk_qu8];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   204                                  idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   205  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   206                                  /* Increment the response buffer index by 1 since PID number is already filled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   207                                  /* Copy bit mask to response buffer of service */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   208                                  adrRespBuf_pu8[idxPIDRes_qu16] = (uint8)(dataPidRunTimeMask_u32 >> 24u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   209                                  idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   210                                  adrRespBuf_pu8[idxPIDRes_qu16] = (uint8)(dataPidRunTimeMask_u32 >> 16u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   211                                  idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   212                                  adrRespBuf_pu8[idxPIDRes_qu16] = (uint8)(dataPidRunTimeMask_u32 >> 8u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   213                                  idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   214                                  adrRespBuf_pu8[idxPIDRes_qu16] = (uint8) dataPidRunTimeMask_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   215                                  idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   216  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   217  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   218                                  /* Send positive response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   219                                  *dataNegRespCode_u8 = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   220                                  /* Update the response maximum data length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   221                                  nrResMaxDataLen_u32 = nrResMaxDataLen_u32-0x05uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   222                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   223                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   224                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   225                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   226                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   227                          /* Report development error "Invalid length" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   228                          DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_INTERFACE_BUFFER_OVERFLOW)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   229  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   230                          /* Set Negative response code 0x12 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   231                          /* NRC 0x12 is suppressed in DCM module for OBD service since its functional addressing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   232                          *dataNegRespCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   233  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   234                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   235                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   236                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   237                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   238                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   239                      /* Based on requested PID value, calculate the corresponding PID Bit mask
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   240                      for the range 01-1F,21-3F ... For eg: PID 01 is requested then generate BIT mask
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   241                      as 80 00 00 00 since BIT 31 is mapped to PID 01 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   242                      dataCalPIDBitMask_u32 = ((uint32)1u << ((uint32)32u - ((adrTmpBuf_au8[nrPIDChk_qu8]) % 0x20)));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   243  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   244                      if((dataPIDMaskVal_u32 & dataCalPIDBitMask_u32) > 0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   245                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   246                          /* Requested PID is supported in ECU. Based on the index value in Dcm_Dsp_Mode1Bitmask_acs,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   247                          get the starting index,number of PIDS to be searched in
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   248                          Dcm_Dsp_PidArray_acs( PID configurations) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   249                          idxPIDStart_qu8 = Dcm_Dsp_Mode1Bitmask_acs[idxPID_u8].StartIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   250                          /*Update PIDFound to False*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   251                          stPIDFound_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   252  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   253                          dataGetPIDRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   254                          /* Get the number of PIDS(its number of iterations) for which below for loop has to be
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   255                          looped for. Eg: If in the range PID 01 to 1F, only 5 PIDs are supported and PID 01 is
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   256                          requested by tester then its sufficient to search PID 01 in the range pid 01 to 1F
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   257                          with only 5 iterations since only 5 PIDs are configured in that range*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   258                          /*Check whether PIDFound is false*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   259                          for(nrPid_qu8 = idxPIDStart_qu8; ((nrPid_qu8 <(idxPIDStart_qu8 +(Dcm_Dsp_Mode1Bitmask_acs[idxPID_u8].NumPids_u8))) && (stPIDFound_b == FALSE)); nrPid_qu8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   260                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   261                              if( adrTmpBuf_au8[nrPIDChk_qu8] == (Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Pid_Id_u8))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   262                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   263  #if (DCM_CFG_POSTBUILD_SUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   264                                  if((Dcm_ActiveConfiguration_u8 & Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Config_Mask)!= 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   265  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   266                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   267                                      /* Set the PIDFound to TRUE. This indicates PID is found in configuration structure and
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   268                                      not required to continue executing the above for loop*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   269                                      /*Update PIDFound to True*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   270                                      stPIDFound_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   271                                      if(nrResMaxDataLen_u32>=(uint32)(Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Pid_Size_u8+1))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   272                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   273  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   274                                          /* Access data index of data structure Dcm_Dsp_Mode1DataPid_acs associated with each requested PID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   275                                          idxPIDData_qu8 = Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].DataSourcePid_ArrayIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   276  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   277                                          /* Fill the number of bytes corresponding to length of the PID with 0x00 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   278                                          for(idxDataSource_u16 = (uint16)idxPIDRes_qu16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   279                                              idxDataSource_u16 <(idxPIDRes_qu16 + Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Pid_Size_u8+1u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   280                                              idxDataSource_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   281                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   282                                              adrRespBuf_pu8[idxDataSource_u16] = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   283                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   284  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   285  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   286                                          /* Loop through each of the data elements and call the configured function to read PID data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   287                                          for(idxDataSource_u16= (uint16)idxPIDData_qu8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   288                                              ((idxDataSource_u16<(idxPIDData_qu8+Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Num_DataSourcePids_u8))&&(dataGetPIDRetVal_u8 == E_OK));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   289                                              idxDataSource_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   290                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   291  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   292                                              /* Check if the valid function to read the PID value is configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   293                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf!=NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   294                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   295  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   296                                                  /* If the configured function has a synchronous behaviour */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   297                                                  if((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].PidUsePort == OBD_USE_DATA_SYNCH_FNC)||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   298                                                     (Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].PidUsePort == OBD_USE_DATA_SYNCH_CLIENT_SERVER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   299                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   300                                                      /* Calculate the position where the PID data needs to be filled for the current PID data source */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   301                                                      posnPidData_u16=(uint16)(idxPIDRes_qu16+(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16/(uint16)8)+(uint16)1);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   302                                                      /* Increment the response buffer by one since PID number of 1byte is stored */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   303                                                      /* Call corresponding function to read the PID data and pass the pointer to response buffer from where data is to be filled for the PID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   304                                                      /* The application has to take care of filling the data( correct number of bits) in the correct positions configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   305                                                      /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   306                                                      dataGetPIDRetVal_u8 = (*(GetPIDvalue1_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   307                                                                                         (&adrRespBuf_pu8[posnPidData_u16]);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   308  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   309                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   310                                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   311                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   312  #if (DCM_CFG_DSP_OBDMODE1_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   313                                                      /* Check if the data is available via Sender receiver interface */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   314                                                      if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].PidUsePort == OBD_USE_DATA_SENDER_RECEIVER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   315                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   316                                                          /* Signal is of uint8 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   317                                                          if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_UINT8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   318                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   319  #if (DCM_CFG_DSP_OBDMODE1_UINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   320                                                              nrElements_u16 = (uint16)((uint32)Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/8u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   321  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   322                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 8u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   323                                                              {   /* Read uint8 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   324                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   325                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue1_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   326                                                                  Dcm_DspArraySignal_au8[0] = dataSignal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   327                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   328                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   329                                                              {   /* Read uint8 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   330                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   331                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue1_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_au8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   332                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   333                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   334                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   335                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   336                                                                  dataSignal_u32 = (uint32)Dcm_DspArraySignal_au8[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   337                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   338                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   339                                                                                 (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*8u)),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   340                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   341                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   342                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   343  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   344                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   345  #if (DCM_CFG_DSP_OBDMODE1_UINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   346                                                          /* Signal is of uint16 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   347                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_UINT16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   348                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   349                                                              nrElements_u16 = (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   350  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   351                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   352                                                              {   /* Read uint16 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   353                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   354                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue2_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   355                                                                  Dcm_DspArraySignal_au16[0] = dataSignal_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   356                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   357                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   358                                                              {   /* Read uint16 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   359                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   360                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue2_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_au16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   361                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   362                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   363                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   364                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   365                                                                  dataSignal_u32 = (uint32)Dcm_DspArraySignal_au16[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   366                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   367                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   368                                                                                 (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*16u))),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   369                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   370                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   371                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   372                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   373  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   374  #if (DCM_CFG_DSP_OBDMODE1_UINT32_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   375                                                          /* Signal is of uint32 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   376                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_UINT32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   377                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   378                                                              nrElements_u16 = (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/32u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   379  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   380                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 32u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   381                                                              {   /* Read uint32 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   382                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   383                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue3_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   384                                                                  Dcm_DspArraySignal_au32[0] = dataSignal_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   385                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   386                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   387                                                              {   /* Read uint32 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   388                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   389                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue3_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_au32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   390                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   391                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   392                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   393                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   394                                                                  dataSignal_u32 = Dcm_DspArraySignal_au32[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   395                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   396                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   397                                                                                 (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*32u))),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   398                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   399                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   400                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   401                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   402  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   403  #if (DCM_CFG_DSP_OBDMODE1_SINT8_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   404                                                          /* Signal is of Sint8 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   405                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_SINT8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   406                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   407                                                              nrElements_u16 = (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/8u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   408  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   409                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 8u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   410                                                              {   /* Read sint8 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   411                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   412                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue4_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_s8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   413                                                                  Dcm_DspArraySignal_as8[0] = dataSignal_s8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   414                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   415                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   416                                                              {   /* Read sint8 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   417                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   418                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue4_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_as8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   419                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   420                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   421                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   422                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   423                                                                  dataSignal_u32 = (uint32)Dcm_DspArraySignal_as8[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   424                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   425                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   426                                                                                 (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*8u))),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   427                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   428                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   429                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   430                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   431  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   432  #if (DCM_CFG_DSP_OBDMODE1_SINT16_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   433                                                          /* Signal is of sint16 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   434                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_SINT16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   435                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   436                                                              nrElements_u16 = (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/16u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   437  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   438                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 16u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   439                                                              {   /* Read sint16 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   440                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   441                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue5_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_s16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   442                                                                  Dcm_DspArraySignal_as16[0] = dataSignal_s16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   443                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   444                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   445                                                              {   /* Read sint16 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   446                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   447                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue5_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_as16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   448                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   449                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   450                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   451                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   452                                                                  dataSignal_u32 = (uint32)Dcm_DspArraySignal_as16[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   453                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   454                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   455                                                                                 (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*16u))),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   456                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   457                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   458                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   459                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   460  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   461  #if (DCM_CFG_DSP_OBDMODE1_SINT32_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   462                                                          /* Signal is of sint32 type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   463                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_SINT32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   464                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   465                                                              nrElements_u16 = (uint16)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16/32u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   466  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   467                                                              if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Length_data_u16 == 32u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   468                                                              {   /* Read sint32 signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   469                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   470                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue6_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_s32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   471                                                                  Dcm_DspArraySignal_as32[0] = dataSignal_s32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   472                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   473                                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   474                                                              {   /* Read sint16 array of signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   475                                                                  /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   476                                                                  dataGetPIDRetVal_u8 = (*(GetPIDvalue6_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(Dcm_DspArraySignal_as32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   477                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   478                                                              /* Copy the signals to Global buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   479                                                              for(idxLoop_u16=0; ((idxLoop_u16 < nrElements_u16)&&(dataGetPIDRetVal_u8 == E_OK)); idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   480                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   481                                                                  dataSignal_u32 = (uint32)Dcm_DspArraySignal_as32[idxLoop_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   482                                                                  /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   483                                                                  Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   484                                                                                 (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16+(uint16)(idxLoop_u16*32u))),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   485                                                                                  &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   486                                                                                  Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   487                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   488                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   489  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   490  #if (DCM_CFG_DSP_OBDMODE1_BOOL_SR_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   491  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   492                                                          /* Signal is of bool type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   493                                                          else if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8 == DCM_BOOLEAN)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   494                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   495                                                              /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   496                                                              dataGetPIDRetVal_u8 = (*(GetPIDvalue7_pf)(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].GetPIDvalue_pf))(&dataSignal_b);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   497                                                              dataSignal_u32 = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   498  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   499                                                              if(FALSE != dataSignal_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   500                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   501                                                                  dataSignal_u32 = (uint32)0x01;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   502                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   503                                                              /* Store the read signal before proceeding to next signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   504                                                              Dcm_StoreSignal(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataType_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   505                                                                             (Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].Pos_data_u16),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   506                                                                              &adrRespBuf_pu8[idxPIDRes_qu16 + 1u], dataSignal_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   507                                                                              Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].dataEndianness_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   508                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   509  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   510                                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   511                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   512                                                              /* Dummy else - Code will not reach here */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   513                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   514                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   515  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   516                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   517                                                  /* Check for infrastructure errors in case of rte*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   518                                                  if((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].PidUsePort == OBD_USE_DATA_SYNCH_CLIENT_SERVER) || (Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].PidUsePort == OBD_USE_DATA_SENDER_RECEIVER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   519                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   520                                                      if (Dcm_IsInfrastructureErrorPresent_b(dataGetPIDRetVal_u8) != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   521                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   522                                                          /*Update InfrastructureError to True*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   523                                                          stInfrastructureError_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   524                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   525                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   526                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   527                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   528                                          /* If all data elements returns E_OK */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   529                                          if(dataGetPIDRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   530                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   531                                              /* Copy PID from temporary buffer to response buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   532                                              adrRespBuf_pu8[idxPIDRes_qu16] = adrTmpBuf_au8[nrPIDChk_qu8];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   533  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   534                                              /* Increment the response buffer index */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   535                                              idxPIDRes_qu16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   536  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   537                                              /* Loop through the support information of each data element of the PID and fill the support information bytes */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   538                                              for(idxDataSource_u16=(uint16)idxPIDData_qu8;idxDataSource_u16<(idxPIDData_qu8+Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Num_DataSourcePids_u8);idxDataSource_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   539                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   540                                                  /* If support information is configured for the PID data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   541                                                  if(Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].ptr_supportinfo_pcs!=NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   542                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   543                                                      /* Calculate the support information byte corresponding to support information bit configured.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   544                                                       The byte calculated will be bitwise ORed with the byte in response where the support info bit
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   545                                                       needs to be set  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   546                                                      /* Support Info bit mask */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   547                                                      dataSupportInfoByte_u8 = (uint8)(0x01u<< ((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].SupportInfoBit_u8)%8u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   548  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   549                                                      /* Calculate the index of byte in the response where the support information bit is to be set*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   550                                                      idxSupportInfo_u16 = (uint16)(idxPIDRes_qu16 +
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   551                                                              Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].ptr_supportinfo_pcs->SupportInfoPos_u8 +
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   552                                                                             (uint16)((Dcm_Dsp_Mode1DataSourcePid_acs[idxDataSource_u16].SupportInfoBit_u8)/8u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   553  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   554                                                      /* Fill the support information in the response */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   555                                                      adrRespBuf_pu8[idxSupportInfo_u16]= (adrRespBuf_pu8[idxSupportInfo_u16] | dataSupportInfoByte_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   556                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   557                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   558                                              /* Increment the buffer length by configured data length*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   559                                              idxPIDRes_qu16 = (idxPIDRes_qu16 +(uint16)Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Pid_Size_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   560  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   561                                              /* Update the maximum available response buffer size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   562                                              nrResMaxDataLen_u32 = (Dcm_MsgLenType) (nrResMaxDataLen_u32 - (1u + (Dcm_MsgLenType)Dcm_Dsp_Mode1PidArray_acs[nrPid_qu8].Pid_Size_u8));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   563  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   564                                              /* Reset the negative response code to 0x00 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   565                                              *dataNegRespCode_u8   = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   566                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   567  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   568                                          /*Check whether InfrastructureError is True*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   569                                          else if(stInfrastructureError_b!=FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   570                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   571                                              /* Report development error "DCM_E_RET_E_INFRASTRUCTURE_ERROR" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   572                                              DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_RET_E_INFRASTRUCTURE_ERROR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   573                                              /*Update InfrastructureError to False */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   574                                              stInfrastructureError_b=FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   575                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   576                                          /* For any other return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   577                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   578                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   579                                              /* Report development error "E_NOT_OK" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   580                                              DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_RET_E_NOT_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   581                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   582                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   583                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   584                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   585                                          /* Set Negative response code 0x12 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   586                                          /* NRC 0x12 is suppressed in DCM module for OBD service since its functional addressing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   587                                          *dataNegRespCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   588  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   589                                          /* Report development error "DCM_E_INTERFACE_BUFFER_OVERFLOW" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   590                                          DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_INTERFACE_BUFFER_OVERFLOW)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   591                                          /* Set index to request data length to exit out of the for loop */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   592  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   593                                           nrReqDataLen_u32=nrPIDChk_qu8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   594  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   595                                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   596                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   597                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   598                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   599                          }  /* End of for loop */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   600                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   601                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   602              } /* End of for loop */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   603              /* Set the response length for requested PID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   604              /* In case availability PID, response length = pid number + 4 data bytes for each requested PID  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   605              /* In case of PID which report data value, response length = pid number + data length configured in
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   606                 data source configuration structure Dcm_Dsp_Mode1DataSourcePid_acs */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   607              pMsgContext->resDataLen = idxPIDRes_qu16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   608          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   609          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   610          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   611              /*Set Negative response code 0x12 for the combination of both supported PID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   612              and PID which report data value in single request format
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   613              NRC 0x12 is suppressed in DCM module for OBD service since its functional addressing*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   614              *dataNegRespCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   615  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   616              /* Report development error "Mixed mode" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   617              DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_MIXED_MODE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   618          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   619      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   620      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   621      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   622          /* Requested data length is not greater than 1 or less than 7 then Send Negative response code Request
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   623          Length Invalid NRC 0x12 is suppressed in DCM module for OBD service since its functional addressing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   624          *dataNegRespCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   625  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   626          /* Report development error "Invalid length" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   627          DCM_DET_ERROR(DCM_OBDMODE01_ID, DCM_E_INVALID_LENGTH)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   628      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   629  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   630    /* Is there any failure occurred? */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   631      if(*dataNegRespCode_u8 != 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   632      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   633          dataReturnValue_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   634      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   635      else{
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   636          dataReturnValue_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   637      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   638  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   639      return dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   640  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   641  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   642  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   643  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   644  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   645  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspObd\DcmDspObd_Mode1.c	   646  

	; Module end
