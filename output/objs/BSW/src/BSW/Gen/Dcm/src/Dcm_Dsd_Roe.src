	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14852a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dcm\\src\\Dcm_Dsd_Roe.src BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd_Roe.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd_Roe.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	16192
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd_Roe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	141
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	158
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	158
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	141
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	141
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	141
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	158
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	141
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	141
	.byte	6,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	471
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	493
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	493
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	141
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	471
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	471
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	493
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	141
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	141
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	810
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	826
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	826
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	141
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	810
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	810
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	141
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	826
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	141
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	141
	.byte	6,0,8
	.word	163
	.byte	9
	.word	193
	.byte	9
	.word	208
	.byte	6,0,8
	.word	231
	.byte	9
	.word	263
	.byte	9
	.word	278
	.byte	6,0,8
	.word	301
	.byte	9
	.word	341
	.byte	9
	.word	355
	.byte	6,0,8
	.word	378
	.byte	9
	.word	411
	.byte	9
	.word	425
	.byte	9
	.word	446
	.byte	6,0,8
	.word	498
	.byte	9
	.word	529
	.byte	9
	.word	544
	.byte	6,0,8
	.word	567
	.byte	9
	.word	600
	.byte	9
	.word	615
	.byte	6,0,8
	.word	638
	.byte	9
	.word	679
	.byte	9
	.word	693
	.byte	6,0,8
	.word	716
	.byte	9
	.word	750
	.byte	9
	.word	764
	.byte	9
	.word	785
	.byte	6,0,8
	.word	831
	.byte	9
	.word	862
	.byte	9
	.word	877
	.byte	6,0,8
	.word	900
	.byte	9
	.word	933
	.byte	9
	.word	948
	.byte	6,0,8
	.word	971
	.byte	9
	.word	1012
	.byte	9
	.word	1026
	.byte	6,0,8
	.word	1049
	.byte	9
	.word	1083
	.byte	9
	.word	1097
	.byte	9
	.word	1118
	.byte	6,0,10,1,3
	.word	1362
	.byte	11
	.byte	'__codeptr',0,4,1,1
	.word	1364
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,5,76,25
	.word	1387
	.byte	11
	.byte	'uint8',0,5,81,25
	.word	141
	.byte	11
	.byte	'uint16',0,5,91,25
	.word	471
	.byte	11
	.byte	'uint32',0,5,106,24
	.word	810
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,5,111,30
	.word	1453
	.byte	11
	.byte	'boolean',0,5,127,25
	.word	141
	.byte	2
	.byte	'unsigned long int',0,4,7,11
	.byte	'uint16_least',0,5,147,1,25
	.word	1510
	.byte	11
	.byte	'StatusType',0,6,191,1,27
	.word	141
	.byte	11
	.byte	'Std_ReturnType',0,6,199,1,15
	.word	141
	.byte	12,6,206,1,9,8,13
	.byte	'vendorID',0
	.word	471
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	471
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	141
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	141
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	141
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	1597
	.byte	11
	.byte	'PduIdType',0,7,22,19
	.word	471
	.byte	11
	.byte	'PduLengthType',0,7,26,19
	.word	471
	.byte	12,8,71,9,8,13
	.byte	'SduDataPtr',0
	.word	158
	.byte	4,2,35,0,13
	.byte	'SduLength',0
	.word	471
	.byte	2,2,35,4,0,11
	.byte	'PduInfoType',0,8,75,3
	.word	1787
	.byte	14,8,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,8,118,3
	.word	1852
	.byte	11
	.byte	'NetworkHandleType',0,8,128,1,17
	.word	141
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	810
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	471
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	141
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	810
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1999
	.byte	16,68
	.word	810
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	2079
	.byte	68,2,35,0,0,16,68
	.word	2088
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	2110
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	810
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	810
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2170
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2170
	.byte	18,1,1,3
	.word	2255
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2258
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	141
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2321
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	810
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	471
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	810
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	810
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	810
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	826
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	471
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	471
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2628
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2721
	.byte	20
	.byte	'void',0,3
	.word	2833
	.byte	21,1,1,22
	.word	141
	.byte	22
	.word	2839
	.byte	0,3
	.word	2844
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2858
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	810
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	810
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2170
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2170
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2170
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2170
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2893
	.byte	3
	.word	2893
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	3091
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	141
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	810
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2893
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3170
	.byte	3
	.word	3170
	.byte	23
	.word	3231
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2263
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3236
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	810
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2170
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	141
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3241
	.byte	3
	.word	2255
	.byte	23
	.word	3241
	.byte	3
	.word	3400
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3405
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	810
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	810
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	810
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	810
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	810
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3513
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	810
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	810
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	810
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3577
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	141
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	2119
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2893
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	141
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3675
	.byte	16,68
	.word	2088
	.byte	17,0,0,3
	.word	3675
	.byte	23
	.word	3801
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3806
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2263
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3513
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3577
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3577
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	471
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	810
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2170
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	141
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	141
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3811
	.byte	23
	.word	3811
	.byte	3
	.word	4061
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	4066
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	4089
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3577
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4176
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4199
	.byte	3
	.word	4199
	.byte	23
	.word	4279
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4284
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3577
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4289
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	810
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4388
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	141
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	810
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4483
	.byte	26
	.word	141
	.byte	1,1,3
	.word	4569
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4576
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	810
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4612
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4640
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4659
	.byte	3
	.word	4659
	.byte	23
	.word	4737
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4742
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4581
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4388
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2839
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	141
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4747
	.byte	3
	.word	4569
	.byte	23
	.word	4747
	.byte	3
	.word	4899
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4904
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4930
	.byte	23
	.word	.L6-.L3
	.byte	3
	.word	5130
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5135
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5140
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4930
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	471
	.byte	2,2,35,12,0,3
	.word	5167
	.byte	23
	.word	5260
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5265
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4909
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	141
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	471
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	141
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	141
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	141
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5270
	.byte	23
	.word	5270
	.byte	3
	.word	5450
	.byte	23
	.word	4747
	.byte	3
	.word	5460
	.byte	27
	.word	2563
	.byte	27
	.word	3513
	.byte	27
	.word	3410
	.byte	27
	.word	4071
	.byte	27
	.word	3577
	.byte	27
	.word	141
	.byte	27
	.word	4071
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1999
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5470
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5475
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5480
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5485
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5490
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	3096
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2893
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	141
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5495
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2170
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	141
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5500
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2170
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	141
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	141
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	141
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5505
	.byte	3
	.word	810
	.byte	23
	.word	3241
	.byte	3
	.word	5961
	.byte	23
	.word	3811
	.byte	3
	.word	5971
	.byte	3
	.word	2893
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	810
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	810
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	810
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	810
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	2119
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	141
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5986
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	810
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	141
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	810
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6263
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	141
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	141
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6399
	.byte	16,4
	.word	141
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6539
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6548
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	471
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6649
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	471
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6724
	.byte	23
	.word	6724
	.byte	3
	.word	6889
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6894
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6899
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6539
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6999
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	141
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	141
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2839
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2839
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	471
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	141
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7145
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7232
	.byte	3
	.word	7145
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7330
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	141
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	471
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	471
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2839
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2839
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7232
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7335
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	810
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	471
	.byte	16,128,8
	.word	141
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7573
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	810
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	471
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	141
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	141
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	141
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	141
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7764
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	141
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	141
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	141
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	141
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	141
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	471
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	141
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	471
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	141
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	8105
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	471
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	141
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	810
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	471
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	141
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	141
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	471
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	141
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	141
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	141
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	141
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	141
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	141
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	141
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	141
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	141
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	141
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	141
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	141
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8337
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	471
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	471
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	141
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	141
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	141
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	141
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	141
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8841
	.byte	11
	.byte	'Dcm_ConfirmationStatusType',0,13,243,1,15
	.word	141
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	141
	.byte	11
	.byte	'Dcm_NegativeResponseCodeType',0,13,132,2,15
	.word	141
	.byte	11
	.byte	'Dcm_OpStatusType',0,13,134,2,15
	.word	141
	.byte	11
	.byte	'Dcm_ProtocolType',0,13,136,2,15
	.word	141
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	141
	.byte	11
	.byte	'Dcm_SecLevelType',0,13,142,2,15
	.word	141
	.byte	11
	.byte	'Dcm_SesCtrlType',0,13,144,2,15
	.word	141
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	141
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	141
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	141
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7584
	.byte	16,128,8
	.word	141
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7584
	.byte	11
	.byte	'Rte_ModeType_DcmDiagnosticSessionControl',0,14,37,15
	.word	141
	.byte	11
	.byte	'Dcm_MsgItemType',0,15,182,2,15
	.word	141
	.byte	3
	.word	141
	.byte	11
	.byte	'Dcm_MsgType',0,15,188,2,57
	.word	9910
	.byte	11
	.byte	'Dcm_MsgLenType',0,15,197,2,16
	.word	810
	.byte	12,15,206,2,9,4,13
	.byte	'reqType',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'suppressPosResponse',0
	.word	141
	.byte	1,2,35,1,13
	.byte	'sourceofRequest',0
	.word	141
	.byte	1,2,35,2,0,11
	.byte	'Dcm_MsgAddInfoType',0,15,219,2,2
	.word	9960
	.byte	11
	.byte	'Dcm_IdContextType',0,15,225,2,15
	.word	141
	.byte	12,15,238,5,9,32,13
	.byte	'tx_buffer_pa',0
	.word	9915
	.byte	4,2,35,0,13
	.byte	'rx_mainBuffer_pa',0
	.word	9915
	.byte	4,2,35,4,13
	.byte	'tx_buffer_size_u32',0
	.word	810
	.byte	4,2,35,8,13
	.byte	'rx_buffer_size_u32',0
	.word	810
	.byte	4,2,35,12,13
	.byte	'dataP2TmrAdjust',0
	.word	810
	.byte	4,2,35,16,13
	.byte	'dataP2StarTmrAdjust',0
	.word	810
	.byte	4,2,35,20,13
	.byte	'protocolid_u8',0
	.word	141
	.byte	1,2,35,24,13
	.byte	'sid_tableid_u8',0
	.word	141
	.byte	1,2,35,25,13
	.byte	'premption_level_u8',0
	.word	141
	.byte	1,2,35,26,13
	.byte	'pduinfo_idx_u8',0
	.word	141
	.byte	1,2,35,27,13
	.byte	'nrc21_b',0
	.word	141
	.byte	1,2,35,28,13
	.byte	'sendRespPendTransToBoot',0
	.word	141
	.byte	1,2,35,29,0,11
	.byte	'Dcm_Dsld_protocol_tableType',0,15,143,6,2
	.word	10093
	.byte	3
	.word	141
	.byte	21,1,1,22
	.word	141
	.byte	22
	.word	471
	.byte	22
	.word	471
	.byte	22
	.word	141
	.byte	0,3
	.word	10449
	.byte	11
	.byte	'Dcm_ConfirmationApiType',0,15,145,6,16
	.word	10473
	.byte	3
	.word	141
	.byte	28
	.word	141
	.byte	1,1,22
	.word	10511
	.byte	22
	.word	141
	.byte	22
	.word	141
	.byte	0,3
	.word	10516
	.byte	12,15,240,2,9,28,13
	.byte	'resData',0
	.word	9915
	.byte	4,2,35,0,13
	.byte	'reqData',0
	.word	9915
	.byte	4,2,35,4,13
	.byte	'msgAddInfo',0
	.word	9960
	.byte	4,2,35,8,13
	.byte	'resDataLen',0
	.word	810
	.byte	4,2,35,12,13
	.byte	'reqDataLen',0
	.word	810
	.byte	4,2,35,16,13
	.byte	'resMaxDataLen',0
	.word	810
	.byte	4,2,35,20,13
	.byte	'idContext',0
	.word	141
	.byte	1,2,35,24,13
	.byte	'dcmRxPduId',0
	.word	471
	.byte	2,2,35,26,0,3
	.word	10544
	.byte	28
	.word	141
	.byte	1,1,22
	.word	141
	.byte	22
	.word	10707
	.byte	22
	.word	10511
	.byte	0,3
	.word	10712
	.byte	12,15,158,6,9,20,13
	.byte	'allowed_session_b32',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'adrUserSubServiceModeRule_pfct',0
	.word	10539
	.byte	4,2,35,8,13
	.byte	'SubFunc_fp',0
	.word	10735
	.byte	4,2,35,12,13
	.byte	'subservice_id_u8',0
	.word	141
	.byte	1,2,35,16,13
	.byte	'isDspRDTCSubFnc_b',0
	.word	141
	.byte	1,2,35,17,0,11
	.byte	'Dcm_Dsld_SubServiceType',0,15,169,6,2
	.word	10740
	.byte	23
	.word	10740
	.byte	3
	.word	10952
	.byte	28
	.word	141
	.byte	1,1,22
	.word	10511
	.byte	22
	.word	141
	.byte	0,3
	.word	10962
	.byte	12,15,186,6,9,36,13
	.byte	'allowed_session_b32',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'service_handler_fp',0
	.word	10735
	.byte	4,2,35,8,13
	.byte	'Service_init_fp',0
	.word	2258
	.byte	4,2,35,12,13
	.byte	'sid_u8',0
	.word	141
	.byte	1,2,35,16,13
	.byte	'subfunction_exist_b',0
	.word	141
	.byte	1,2,35,17,13
	.byte	'servicelocator_b',0
	.word	141
	.byte	1,2,35,18,13
	.byte	'ptr_subservice_table_pcs',0
	.word	10957
	.byte	4,2,35,20,13
	.byte	'num_sf_u8',0
	.word	141
	.byte	1,2,35,24,13
	.byte	'adrUserServiceModeRule_pfct',0
	.word	10980
	.byte	4,2,35,28,13
	.byte	'Dcm_ConfirmationService',0
	.word	10478
	.byte	4,2,35,32,0,11
	.byte	'Dcm_Dsld_ServiceType',0,15,204,6,3
	.word	10985
	.byte	3
	.word	10449
	.byte	23
	.word	10985
	.byte	3
	.word	11333
	.byte	12,15,218,6,9,8,13
	.byte	'ptr_service_table_pcs',0
	.word	11338
	.byte	4,2,35,0,13
	.byte	'num_services_u8',0
	.word	141
	.byte	1,2,35,4,13
	.byte	'nrc_sessnot_supported_u8',0
	.word	141
	.byte	1,2,35,5,13
	.byte	'cdtc_index_u8',0
	.word	141
	.byte	1,2,35,6,0,11
	.byte	'Dcm_Dsld_sid_tableType',0,15,224,6,3
	.word	11343
	.byte	12,15,238,6,9,14,13
	.byte	'protocol_num_u8',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'txpduid_num_u8',0
	.word	471
	.byte	2,2,35,2,13
	.byte	'roetype2_txpdu_u8',0
	.word	471
	.byte	2,2,35,4,13
	.byte	'rdpitype2_txpdu_u8',0
	.word	471
	.byte	2,2,35,6,13
	.byte	'testaddr_u16',0
	.word	471
	.byte	2,2,35,8,13
	.byte	'channel_idx_u8',0
	.word	141
	.byte	1,2,35,10,13
	.byte	'ConnectionIndex_u8',0
	.word	141
	.byte	1,2,35,11,13
	.byte	'NumberOfTxpdu_u8',0
	.word	141
	.byte	1,2,35,12,0,11
	.byte	'Dcm_Dsld_connType',0,15,248,6,3
	.word	11495
	.byte	14,15,146,7,9,4,15
	.byte	'DCM_DSLD_NO_COM_MODE',0,0,15
	.byte	'DCM_DSLD_SILENT_COM_MODE',0,1,15
	.byte	'DCM_DSLD_FULL_COM_MODE',0,2,0,11
	.byte	'Dcm_Dsld_commodeType',0,15,151,7,2
	.word	11733
	.byte	14,16,200,1,9,4,15
	.byte	'USE_ASYNCH_CLIENT_SERVER',0,0,15
	.byte	'USE_ASYNCH_FNC',0,1,0,11
	.byte	'DcmDspSecurityUsePort',0,16,204,1,2
	.word	11845
	.byte	14,17,22,9,4,15
	.byte	'DCM_NO_BOOT',0,0,15
	.byte	'DCM_OEM_BOOT',0,1,15
	.byte	'DCM_SYS_BOOT',0,2,0,11
	.byte	'Dcm_SessionForBootType',0,17,27,2
	.word	11927
	.byte	14,18,192,3,9,4,15
	.byte	'DCM_READ_OK',0,0,15
	.byte	'DCM_READ_FAILED',0,1,15
	.byte	'DCM_READ_PENDING',0,2,15
	.byte	'DCM_READ_FORCE_RCRRP',0,3,15
	.byte	'DCM_READ_NOT_AVAILABLE',0,4,0,11
	.byte	'Dcm_ReadMemoryRet_t',0,18,199,3,3
	.word	12008
	.byte	11
	.byte	'rba_BswSrv_uint64',0,19,66,28
	.word	1453
	.byte	11
	.byte	'Rte_TaskRefType',0,20,184,1,32
	.word	4071
	.byte	11
	.byte	'Rte_EventRefType',0,20,185,1,32
	.word	141
	.byte	11
	.byte	'Rte_EventType',0,20,186,1,32
	.word	810
	.byte	11
	.byte	'Rte_REActCounterType',0,20,252,1,15
	.word	141
	.byte	3
	.word	141
	.byte	11
	.byte	'Rte_REActCounterRefType',0,20,253,1,58
	.word	12273
	.byte	12,20,255,1,9,8,13
	.byte	'task',0
	.word	12169
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	12278
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,20,130,2,3
	.word	12311
	.byte	23
	.word	3811
	.byte	3
	.word	12375
	.byte	3
	.word	141
	.byte	23
	.word	12311
	.byte	3
	.word	12390
	.byte	11
	.byte	'Rte_REContainerRefType',0,20,132,2,60
	.word	12395
	.byte	11
	.byte	'Rte_MSICounterType',0,20,149,2,16
	.word	471
	.byte	3
	.word	471
	.byte	11
	.byte	'Rte_MSICounterRefType',0,20,150,2,56
	.word	12460
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,20,152,2,17
	.word	141
	.byte	3
	.word	141
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,20,153,2,60
	.word	12528
	.byte	12,20,163,2,9,24,13
	.byte	'counter',0
	.word	12465
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	141
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	12533
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	12169
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	12278
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	141
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	471
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,20,172,2,3
	.word	12568
	.byte	3
	.word	471
	.byte	3
	.word	141
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,20,179,2,16
	.word	141
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,20,180,2,16
	.word	141
	.byte	12,20,182,2,9,4,13
	.byte	'pending',0
	.word	141
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	141
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	141
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,20,186,2,3
	.word	12786
	.byte	3
	.word	12786
	.byte	12,20,226,2,9,12,13
	.byte	'event_id',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	12878
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	810
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,20,230,2,3
	.word	12883
	.byte	23
	.word	12883
	.byte	3
	.word	12972
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,20,232,2,66
	.word	12977
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,20,234,2,29
	.word	12311
	.byte	19
	.byte	'Rte_QTaskType',0,20,243,2,16,28,13
	.byte	'cmn',0
	.word	7335
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	12169
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,20,246,2,3
	.word	13054
	.byte	19
	.byte	'Rte_QREType',0,20,250,2,16,28,13
	.byte	'cmn',0
	.word	7335
	.byte	24,2,35,0,13
	.byte	're',0
	.word	12400
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,20,253,2,3
	.word	13125
	.byte	23
	.word	12311
	.byte	3
	.word	13190
	.byte	19
	.byte	'Rte_QWWPType',0,20,129,3,16,28,13
	.byte	'cmn',0
	.word	7335
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	12982
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,20,132,3,3
	.word	13200
	.byte	23
	.word	12883
	.byte	3
	.word	13268
	.byte	19
	.byte	'Rte_QEvType',0,20,136,3,16,36,13
	.byte	'cmn',0
	.word	7335
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	12169
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	141
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	12278
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,20,141,3,3
	.word	13278
	.byte	19
	.byte	'Rte_QMSIType',0,20,145,3,16,48,13
	.byte	'cmn',0
	.word	7335
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	12169
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	141
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	12278
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	12465
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	12533
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	471
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,20,153,3,3
	.word	13373
	.byte	14,21,21,9,4,15
	.byte	'DSD_IDLE',0,0,15
	.byte	'DSD_VERIFY_DIAGNOSTIC_DATA',0,1,15
	.byte	'DSD_CALL_SERVICE',0,2,15
	.byte	'DSD_WAITFORTXCONF',0,3,15
	.byte	'DSD_SENDTXCONF_APPL',0,4,0,11
	.byte	'Dcm_DsdStatesType_ten',0,21,28,2
	.word	13528
	.byte	14,22,215,2,9,4,15
	.byte	'DCM_DSLD_POS_RESPONSE',0,0,15
	.byte	'DCM_DSLD_NEG_RESPONSE',0,1,0,11
	.byte	'Dcm_DsldResponseType_ten',0,22,219,2,2
	.word	13665
	.byte	14,23,148,1,9,4,15
	.byte	'DCM_ROE_CLEARED',0,0,15
	.byte	'DCM_ROE_STOPPED',0,1,15
	.byte	'DCM_ROE_STARTED',0,2,0,11
	.byte	'Dcm_DspRoeEventState_ten',0,23,153,1,2
	.word	13754
	.byte	14,23,231,1,9,4,15
	.byte	'DCM_CONTROLMASK_NO',0,0,15
	.byte	'DCM_CONTROLMASK_INTERNAL',0,1,15
	.byte	'DCM_CONTROLMASK_EXTERNAL',0,2,0,11
	.byte	'Dcm_Dsp_IocbiCtrlMask_ten',0,23,236,1,2
	.word	13849
	.byte	14,18,203,1,9,4,15
	.byte	'DCM_SUPPORT_READ',0,0,15
	.byte	'DCM_SUPPORT_WRITE',0,1,15
	.byte	'DCM_SUPPORT_IOCONTROL',0,2,0,28
	.word	141
	.byte	1,1,22
	.word	10511
	.byte	22
	.word	471
	.byte	22
	.word	13966
	.byte	0,3
	.word	14036
	.byte	12,23,239,1,9,44,13
	.byte	'dataAllowedSessRead_u32',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'dataAllowedSecRead_u32',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'adrUserReadModeRule_pfct',0
	.word	14059
	.byte	4,2,35,8,13
	.byte	'dataAllowedSessWrite_u32',0
	.word	810
	.byte	4,2,35,12,13
	.byte	'dataAllowedSecWrite_u32',0
	.word	810
	.byte	4,2,35,16,13
	.byte	'adrUserWriteModeRule_pfct',0
	.word	14059
	.byte	4,2,35,20,13
	.byte	'dataSessBitMask_u32',0
	.word	810
	.byte	4,2,35,24,13
	.byte	'dataSecBitMask_u32',0
	.word	810
	.byte	4,2,35,28,13
	.byte	'adrUserControlModeRule_pfct',0
	.word	14059
	.byte	4,2,35,32,13
	.byte	'dataCtrlMask_en',0
	.word	13849
	.byte	4,2,35,36,13
	.byte	'dataCtrlMaskSize_u8',0
	.word	141
	.byte	1,2,35,40,13
	.byte	'dataIocbirst_b',0
	.word	141
	.byte	1,2,35,41,13
	.byte	'statusmaskIOControl_u8',0
	.word	141
	.byte	1,2,35,42,0,11
	.byte	'Dcm_ExtendedDIDConfig_tst',0,23,141,2,3
	.word	14064
	.byte	12,23,200,2,9,4,13
	.byte	'posnSigBit_u16',0
	.word	471
	.byte	2,2,35,0,13
	.byte	'idxDcmDspDatainfo_u16',0
	.word	471
	.byte	2,2,35,2,0,11
	.byte	'Dcm_SignalDIDConfig_tst',0,23,204,2,3
	.word	14511
	.byte	14,24,31,9,4,15
	.byte	'DCM_RESET_NO_BOOT',0,0,15
	.byte	'DCM_RESET_OEM_BOOT',0,1,15
	.byte	'DCM_RESET_SYS_BOOT',0,2,15
	.byte	'DCM_RESET_DRIVE_TO_DRIVE',0,3,0,11
	.byte	'Dcm_ResetForBootType',0,24,37,2
	.word	14606
	.byte	14,25,205,1,9,4,15
	.byte	'DCM_IOCBI_IDLESTATE',0,0,15
	.byte	'DCM_IOCBI_FCS_ACTIVE',0,1,15
	.byte	'DCM_IOCBI_FCS_PENDING',0,2,15
	.byte	'DCM_IOCBI_RTD_ACTIVE',0,3,15
	.byte	'DCM_IOCBI_RTD_PENDING',0,4,15
	.byte	'DCM_IOCBI_STA_ACTIVE',0,5,15
	.byte	'DCM_IOCBI_STA_PENDING',0,6,15
	.byte	'DCM_IOCBI_RCE_ACTIVE',0,7,15
	.byte	'DCM_IOCBI_RCE_PENDING',0,8,0,11
	.byte	'Dcm_Dsp_IocbiDidStatus_ten',0,25,216,1,4
	.word	14730
	.byte	12,26,26,9,8,13
	.byte	'posnStart_u16',0
	.word	471
	.byte	2,2,35,0,13
	.byte	'dataLength_u16',0
	.word	471
	.byte	2,2,35,2,13
	.byte	'idxSignal_u16',0
	.word	471
	.byte	2,2,35,4,13
	.byte	'dataEndianness_u8',0
	.word	141
	.byte	1,2,35,6,13
	.byte	'dataType_u8',0
	.word	141
	.byte	1,2,35,7,0,11
	.byte	'Dcm_DspRoutineSignalInfo_tst',0,26,33,3
	.word	14983
	.byte	28
	.word	141
	.byte	1,1,22
	.word	10511
	.byte	22
	.word	471
	.byte	22
	.word	141
	.byte	0,3
	.word	15144
	.byte	23
	.word	14983
	.byte	3
	.word	15172
	.byte	23
	.word	15177
	.byte	23
	.word	15177
	.byte	23
	.word	15177
	.byte	23
	.word	15177
	.byte	23
	.word	15177
	.byte	23
	.word	15177
	.byte	12,26,35,9,68,13
	.byte	'dataSecBitMask_u32',0
	.word	810
	.byte	4,2,35,0,13
	.byte	'dataSessBitMask_u32',0
	.word	810
	.byte	4,2,35,4,13
	.byte	'adrUserRidModeRule_pfct',0
	.word	15167
	.byte	4,2,35,8,13
	.byte	'adrStartInSignalRef_cpcst',0
	.word	15182
	.byte	4,2,35,12,13
	.byte	'adrStopInSignalRef_cpcst',0
	.word	15187
	.byte	4,2,35,16,13
	.byte	'adrReqRslInSignalRef_cpcst',0
	.word	15192
	.byte	4,2,35,20,13
	.byte	'adrStartOutSignalRef_cpcst',0
	.word	15197
	.byte	4,2,35,24,13
	.byte	'adrStopOutSignalRef_cpcst',0
	.word	15202
	.byte	4,2,35,28,13
	.byte	'adrReqRsltOutSignalRef_cpcst',0
	.word	15207
	.byte	4,2,35,32,13
	.byte	'dataCtrlOptRecSizeStart_u16',0
	.word	471
	.byte	2,2,35,36,13
	.byte	'dataCtrlOptRecSizeStop_u16',0
	.word	471
	.byte	2,2,35,38,13
	.byte	'dataCtrlOptRecSizeReqRslt_u16',0
	.word	471
	.byte	2,2,35,40,13
	.byte	'dataStsOptRecSizeStart_u16',0
	.word	471
	.byte	2,2,35,42,13
	.byte	'dataStsOptRecSizeStop_u16',0
	.word	471
	.byte	2,2,35,44,13
	.byte	'dataStsOptRecSizeReqRslt_u16',0
	.word	471
	.byte	2,2,35,46,13
	.byte	'dataMinCtrlOptRecSizeStart_u16',0
	.word	471
	.byte	2,2,35,48,13
	.byte	'dataMinCtrlOptRecSizeStop_u16',0
	.word	471
	.byte	2,2,35,50,13
	.byte	'dataMinCtrlOptRecSizeReqRslt_u16',0
	.word	471
	.byte	2,2,35,52,13
	.byte	'dataMinStsOptRecSizeStart_u16',0
	.word	471
	.byte	2,2,35,54,13
	.byte	'dataMinStsOptRecSizeStop_u16',0
	.word	471
	.byte	2,2,35,56,13
	.byte	'dataMinStsOptRecSizeReqRslt_u16',0
	.word	471
	.byte	2,2,35,58,13
	.byte	'nrStartInSignals_u8',0
	.word	141
	.byte	1,2,35,60,13
	.byte	'nrStopInSignals_u8',0
	.word	141
	.byte	1,2,35,61,13
	.byte	'nrReqRslInSignals_u8',0
	.word	141
	.byte	1,2,35,62,13
	.byte	'nrStartOutSignals_u8',0
	.word	141
	.byte	1,2,35,63,13
	.byte	'nrStopOutSignals_u8',0
	.word	141
	.byte	1,2,35,64,13
	.byte	'nrReqRsltOutSignals_u8',0
	.word	141
	.byte	1,2,35,65,0,11
	.byte	'Dcm_DspRoutineInfoType_tst',0,26,69,3
	.word	15212
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3,8
	.byte	58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,4
	.byte	1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0,54
	.byte	15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0,73
	.byte	19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0,26
	.byte	21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd_Roe.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dcm_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmCore_DslDsd_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Seca_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Dsc_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Uds_Pub.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmCore\\DcmCoreDslDsd\\DcmCore_DslDsd_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Uds_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Er_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Iocbi_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rc_Prot.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     1  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     2  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     3  #include "DcmCore_DslDsd_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     4  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     5  #define DEFAULT_VALUE                   0x00u
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     6  #define DEFAULT_MASKVALUE               0x00000001uL /* Mask value which will be varied depending on active session/security */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     7  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     8  #if(DCM_ROE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	     9  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    10  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    11  /* Pointer to hold the active Extended protocol conf structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    12  P2CONST(Dcm_ProtocolExtendedInfo_type,DCM_VAR,DCM_INTERN_CONST) Dcm_DsldRoe_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    13  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    14  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    15  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    16  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    17  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    18  VAR(StatusType,DCM_VAR) Dcm_CounterValueTimerStatus_uchr; /* global variable to get the return value of GetCounterValue for Timer related funtions*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    19  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    20  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    21  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    22  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    23  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    24  VAR(StatusType,DCM_VAR) Dcm_RoeType2TimerStatus_uchr; /* global variable to get the return value of GetCounterValue for Timer related funtions*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    25  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    26  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    27  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    28  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    29  #if(DCM_ROE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    30  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    31  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    32  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    33  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    34  static VAR(Dcm_NegativeResponseCodeType,AUTOMATIC) s_dataNrc_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    35  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    36  VAR (uint8, DCM_VAR) DcmRoeQueueIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    37  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    38  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    39  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    40  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    41  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    42  VAR(Dcm_DsdStatesType_ten,DCM_VAR) Dcm_DsdRoe2State_en; /* ROE2 DSD state */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    43  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    44  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    45  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    46  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    47  VAR(Dcm_MsgContextType,DCM_VAR) Dcm_Roe2MesContext_st; /* ROE2 message context table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    48  VAR(Dcm_DsldResponseType_ten,DCM_VAR) Dcm_Roe2ResponseType_en; /* ROE2 response type */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    49  VAR(PduInfoType,DCM_VAR) Dcm_DsldRoe2PduInfo_st; /* ROE2 PDU info structure*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    50  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    51  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    52  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    53  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    54  VAR(uint8,DCM_VAR) Dcm_DsldSrvIndex_u8; /* ROE2 Index to service in table*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    55  VAR(Std_ReturnType,DCM_VAR) Dcm_Roe2TxResult_u8; /* ROE2 Tx confirmation result */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    56  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    57  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    58  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    59  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    60  P2CONST(Dcm_ProtocolExtendedInfo_type,DCM_VAR,DCM_INTERN_CONST) Dcm_DsldRoe2_pcst; /* Ptr to Roe info structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    61  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    62  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    63  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    64  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    65  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    66  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    67  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    68   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    69   * Dcm_UpdateROEQueue:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    70   * This function will be invoked incase any of the event needs to be queued and postpone the processing
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    71   * since DCM is busy currently.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    72   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    73   * \parameters           RoeEventId
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    74   *                       RxPdu
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    75   * \return value         void
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    76   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    77   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    78   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    79  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_UpdateROEQueue( uint8 RoeEventId, PduIdType RxPdu)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    80  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    81      VAR(uint8,AUTOMATIC) index_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    82      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    83      dataReturnValue_u8=DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    84      for(index_u8=0;index_u8<DCM_MAX_SETUPROEEVENTS;index_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    85      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    86          if(Dcm_DcmDspEventQueue[index_u8].EventId_u8 == RoeEventId)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    87          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    88              Dcm_DcmDspEventQueue[index_u8].Is_Queued = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    89              Dcm_DcmDspEventQueue[index_u8].RxPduId_u8 = RxPdu;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    90              dataReturnValue_u8 = DCM_E_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    91              break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    92          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    93      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    94      return dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    95  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    96  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    97  /***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    98   Function name    : Dcm_Prv_ROEResetOnConfirmation
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	    99   Syntax           : Dcm_Prv_ROEResetOnConfirmation(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   100   Description      : Reset on ROE message confiramtion
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   101   Parameter        : void
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   102   Return value     : void
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   103  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   104  void Dcm_Prv_ROEResetOnConfirmation(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   105  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   106      Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].Is_Processed = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   107      /* Change the service table to original active table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   108      Dcm_DsldGlobal_st.datActiveSrvtable_u8 = Dcm_DsldGlobal_st.dataOldSrvtable_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   109      Dcm_DsldSrvTable_pcst = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   110  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   111  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   112  /***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   113   Function name    : Dcm_Prv_DsdVerifySubFncID
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   114   Syntax           : Dcm_Prv_DsdVerifySubFncID(idxSubservice_u8,ErrorCode)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   115   Description      : Check whether at least one sub-function byte exists and extract
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   116                      requested sub-function index
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   117   Parameter        : uint8,Dcm_NegativeResponseCodeType
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   118   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   119  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   120  LOCAL_INLINE Std_ReturnType Dcm_Prv_DsdVerifyROESubFncID(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   121          P2CONST(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_CONST) Msgcontext_s,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   122          uint8* idxSubservice_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   123          const Dcm_Dsld_ServiceType* service_pcs,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   124          Dcm_NegativeResponseCodeType* ErrorCode)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   125  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   126      const Dcm_Dsld_SubServiceType* adrSubservice_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   127      Std_ReturnType VerificationResult_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   128      /* Variable to store the sub-function byte from the request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   129      uint8 dataSubfunction_u8 = Msgcontext_s->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   130      *idxSubservice_u8 = 0u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   131      *ErrorCode = DEFAULT_VALUE;  /* Reset the error code to 0x00 */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   132  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   133      /* Check if there is at least one byte (sub function byte exists) */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   134      if (Msgcontext_s->reqDataLen > DEFAULT_VALUE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   135      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   136          /* Get the sub service configuration structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   137          adrSubservice_pcst = service_pcs->ptr_subservice_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   138          if(Dcm_DsldGlobal_st.dataSid_u8 ==0x86)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   139          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   140              dataSubfunction_u8 =  (dataSubfunction_u8 & ((uint8)(~(0x40u))));
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   141          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   142  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   143          /* Loop through to check , whether requested SubFunction is configured */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   144          while(*idxSubservice_u8 < service_pcs->num_sf_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   145          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   146              if (dataSubfunction_u8 == adrSubservice_pcst[*idxSubservice_u8].subservice_id_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   147              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   148                  break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   149              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   150              (*idxSubservice_u8)++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   151          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   152          /* If sub service is configured*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   153          if (*idxSubservice_u8 < service_pcs->num_sf_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   154          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   155              VerificationResult_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   156          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   157          /* If the sub service is not supported */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   158          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   159          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   160              *ErrorCode = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   161          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   162      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   163      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   164      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   165          /* If service is outside DSP */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   166          if (service_pcs->servicelocator_b == FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   167          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   168              /* Call the DcmAppl API to get the NRC to be returned in case minimum length check fails for project/vendor specific services  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   169              DcmAppl_DcmGetNRCForMinLengthCheck(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   170                      Dcm_DsldProtocol_pcst[Dcm_DsldGlobal_st.idxCurrentProtocol_u8].protocolid_u8, service_pcs->sid_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   171                      ErrorCode);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   172          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   173          if (*ErrorCode == DEFAULT_VALUE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   174          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   175              /* If no ErrorCode is set , then NRC to 0x13 as sub function byte is missing in the service request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   176              *ErrorCode = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   177          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   178      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   179      return VerificationResult_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   180  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   181  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   182  /***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   183   Function name    : Dcm_Prv_DsdCheckSubFunction
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   184   Syntax           : Dcm_Prv_DsdCheckSubFunction()
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   185   Description      : Function to do subservice specific checks in DSD
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   186   Parameter        : void
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   187   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   188  ***********************************************************************************************************************/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   189  LOCAL_INLINE Std_ReturnType Dcm_CheckRoeSubFunction(P2CONST(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_CONST) Msgcontext_s,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   190          P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST) service_pcs,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   191          P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) ErrorCode_u8 )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   192  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   193  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   194      uint8 idxSubservice_u8; /* Index to loop through the sub-service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   195      uint32 dataActiveMask_u32; /* bit mask to represent session */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   196      Std_ReturnType VerificationResult_u8 = Dcm_Prv_DsdVerifyROESubFncID(Msgcontext_s,&idxSubservice_u8,service_pcs,ErrorCode_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   197      /* local pointer to sub-service configuration structure*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   198      const Dcm_Dsld_SubServiceType* adrSubservice_pcst =service_pcs->ptr_subservice_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   199      *ErrorCode_u8 = 0u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   200  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   201      if(VerificationResult_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   202      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   203          VerificationResult_u8 = E_NOT_OK; /* Set it to E_NOT_OK again */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   204          /* Generate bit mask for active session */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   205          dataActiveMask_u32 = (uint32) (DEFAULT_MASKVALUE << Dcm_DsldGlobal_st.idxActiveSession_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   206          /* Check requested sub service is allowed in this session */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   207          if ((adrSubservice_pcst[idxSubservice_u8].allowed_session_b32 & dataActiveMask_u32) == (dataActiveMask_u32))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   208          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   209              /* generate bit mask for active security level */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   210              dataActiveMask_u32 = (uint32) (DEFAULT_MASKVALUE << Dcm_DsldGlobal_st.idxActiveSecurity_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   211              /* Check if the requested sub-service is allowed in current security */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   212              if ((adrSubservice_pcst[idxSubservice_u8].allowed_security_b32 & dataActiveMask_u32)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   213                      == (dataActiveMask_u32))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   214              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   215                  /* DcmAppl_UserSubServiceModeRuleService will be invoked in case no mode rule is configured */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   216                  VerificationResult_u8 = (*adrSubservice_pcst[idxSubservice_u8].adrUserSubServiceModeRule_pfct)(ErrorCode_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   217                              Dcm_DsldGlobal_st.dataSid_u8, adrSubservice_pcst[idxSubservice_u8].subservice_id_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   218                  /* If the function returns any other value other than E_OK or a set NRC value */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   219                  *ErrorCode_u8=((VerificationResult_u8 != E_OK) && (*ErrorCode_u8 == 0x00))?DCM_E_CONDITIONSNOTCORRECT:*ErrorCode_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   220  #if(DCM_CFG_DSD_MODERULESUBFNC_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   221                  /* Check if the mode rule is configured for the sub function */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   222                  if((adrSubservice_pcst[idxSubservice_u8].moderule_fp != NULL_PTR) && (VerificationResult_u8==E_OK))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   223                  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   224                      /* Call the mode rule API configured */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   225                      VerificationResult_u8 = ((*adrSubservice_pcst[idxSubservice_u8].moderule_fp)(ErrorCode_u8) == TRUE)?E_OK:E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   226                  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   227  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   228              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   229              /* If sub service is not allowed in  current security */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   230              else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   231              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   232                  *ErrorCode_u8 = DCM_E_SECURITYACCESSDENIED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   233              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   234          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   235          /* If sub service is not allowed in current session */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   236          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   237          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   238              *ErrorCode_u8 = DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   239          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   240      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   241      return VerificationResult_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   242  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   243  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   244  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   245  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   246  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   247   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   248   * Dcm_GetRoeProtValidity : This function is used only to Check if the protocol corresponding to the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   249   *                          RxPduId passed supports ROE
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   250   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   251   * \param           DcmRxPduId
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   252   *                  idxProtocol_u8
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   253   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   254   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   255   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   256   * \retval         Dcm_StatusType
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   257   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   258   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   259   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   260   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   261   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   262  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_GetRoeProtValidity(VAR(PduIdType,AUTOMATIC) DcmRxPduId,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   263          P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) idxProtocol_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   264  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   265      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   266  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   267      /*Initialize the local variables*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   268      *idxProtocol_u8 = Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[DcmRxPduId]].protocol_num_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   269  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   270      /* Check if the protocol corresponding to the RxPduId passed supports ROE */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   271      dataReturnValue_u8 = (Dcm_DsldProtocol_pcst[*idxProtocol_u8].roe_info_pcs != NULL_PTR) ? E_OK : DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   272  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   273      return dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   274  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   275  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   276  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   277  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   278  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   279  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   280  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   281  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   282  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   283  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   284   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   285   * Dcm_DsldRoeInitiateResponseTransmission :
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   286   * The  function is a generic library introduced to invoke the triggering of positive, negative
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   287   * response or Response Pending operation (NRC0x78) or PENDING return
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   288   * \param           retVal_u8    :   Type of operation to be carried out
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   289   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   290   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   291   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   292   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   293   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   294  static FUNC(void,DCM_CODE) Dcm_DsldRoeInitiateResponseTransmission(VAR(Std_ReturnType,AUTOMATIC) retVal_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   295  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   296      if(retVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   297      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   298          /*Trigger transmission of positive response*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   299          Dcm_ProcessingDone ( & Dcm_Roe2MesContext_st);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   300      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   301      else if (retVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   302      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   303          /*Do nothing here, just set opstatus to pendin operation*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   304      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   305      else if (retVal_u8 == DCM_E_FORCE_RCRRP)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   306      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   307          (void)Dcm_ForceRespPend();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   308      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   309      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   310      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   311          /*If no NRC is set by the service send NRC22 as default service, ideally this should nevery occur*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   312          if(s_dataNrc_u8 ==0x00)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   313          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   314              s_dataNrc_u8 = DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   315          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   316          /*Trigger transmission of negative response*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   317          Dcm_SetNegResponse( & Dcm_Roe2MesContext_st ,s_dataNrc_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   318          Dcm_ProcessingDone ( & Dcm_Roe2MesContext_st);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   319      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   320  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   321  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   322   *********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   323   * Dcm_ChkIfDidServiceIsActive :  This API is called from ROE Type2 state machine/DSD to check if  DID service is active
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   324   * for Roe Event and in DslDsd for tester request. Also this API checks if the tester request is processing DID
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   325   * service and ROE events also wants to access the DID service. There is no possibility to run the DID services in
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   326   * parallel due to re-enterancy/data consistency issues
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   327   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   328   * \param           TesterReqSid_u8: Service ID of the active tester request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   329   *                  RoeType2Sid_u8 : Service ID of the Roe Type2 event triggered
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   330   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   331   * \retval          TRUE : Parallel processing of tester request and ROE event is possible
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   332   *                  FALSE: Parallel processing of tester request and ROE event is not possible
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   333   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   334   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   335   *********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   336   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   337  FUNC(boolean,DCM_CODE) Dcm_ChkIfDidServiceIsActive(VAR(uint8, AUTOMATIC) TesterReqSid_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   338          VAR(uint8, AUTOMATIC) RoeType2Sid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   339  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   340      VAR(boolean,AUTOMATIC) retval_b;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   341      P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST) adrSrvTable_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   342      adrSrvTable_pcst = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   343      /*initialize the return value to true*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   344      retval_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   345  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   346      /* If the Service requested by tester and the service triggered by ROE are both located in DCM */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   347      if((Dcm_DsldSrvTable_pcst[Dcm_DsldGlobal_st.idxService_u8].servicelocator_b)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   348              (adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].servicelocator_b))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   349      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   350          /* If the tester requested service is same as the ROE requested service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   351          if(TesterReqSid_u8 == RoeType2Sid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   352          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   353              /*Initialize the return val to false*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   354              retval_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   355          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   356          /* If the tester requested service and ROE requested service are both DID services */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   357          else if(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   358                  ((TesterReqSid_u8 == DCM_DSP_SID_READDATABYIDENTIFIER) ||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   359                          (TesterReqSid_u8 == DCM_DSP_SID_WRITEDATABYIDENTIFIER)||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   360                          (TesterReqSid_u8 == DCM_DSP_SID_DYNAMICALLYDEFINEDATAIDENTIFIER)||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   361                          (TesterReqSid_u8 == DCM_DSP_SID_INPUTOUTPUTCONTROLBYIDENTIFIER))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   362                  &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   363                  ((RoeType2Sid_u8 == DCM_DSP_SID_READDATABYIDENTIFIER) ||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   364                          (RoeType2Sid_u8 == DCM_DSP_SID_WRITEDATABYIDENTIFIER)||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   365                          (RoeType2Sid_u8 == DCM_DSP_SID_DYNAMICALLYDEFINEDATAIDENTIFIER)||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   366                          (RoeType2Sid_u8 == DCM_DSP_SID_INPUTOUTPUTCONTROLBYIDENTIFIER))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   367          )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   368          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   369              /*Initialize the return value to false*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   370              retval_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   371          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   372          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   373          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   374              /* nothing to set */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   375          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   376      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   377      return(retval_b);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   378  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   379  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   380  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   381   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   382   * Dcm_Prv_DsldRoe2StateMachine_DSD_VERIFY_DIAGNOSTIC_DATA :  This function called from Dcm_DsldRoe2StateMachine() to
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   383   * process ROE requested service to verify diagnostic data
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   384   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   385   * \param           adrSrvTable_pcst
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   386   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   387   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   388   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   389   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   390   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   391   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   392   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   393  static FUNC(void,DCM_CODE) Dcm_Prv_DsldRoe2StateMachine_DSD_VERIFY_DIAGNOSTIC_DATA(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   394          P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST)  adrSrvTable_pcst)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   395  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   396      VAR(uint8,AUTOMATIC) dataNrc_u8; /* Variable to store negative response code */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   397      VAR(Std_ReturnType,AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   398  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   399      /* Initializing the negative response code */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   400      dataNrc_u8=0x00;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   401  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   402      /* Fill the addressing mode info (physical or functional) */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   403      if(Dcm_Roe2MesContext_st.dcmRxPduId >= DCM_INDEX_FUNC_RX_PDUID)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   404      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   405          Dcm_Roe2MesContext_st.msgAddInfo.reqType = DCM_PRV_FUNCTIONAL_REQUEST;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   406      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   407      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   408      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   409          Dcm_Roe2MesContext_st.msgAddInfo.reqType = DCM_PRV_PHYSICAL_REQUEST;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   410      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   411  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   412      /* Fill the Rx buffer pointer excluding Sid */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   413      Dcm_Roe2MesContext_st.reqData = &(Dcm_DsldRoe2_pcst->txbuffer_ptr[1]);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   414  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   415      /* Fill the Tx buffer pointer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   416      Dcm_Roe2MesContext_st.resData = &(Dcm_DsldRoe2_pcst->txbuffer_ptr[3]);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   417  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   418      /* Fill the maximum possible response length */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   419      Dcm_Roe2MesContext_st.resMaxDataLen = Dcm_DsldRoe2_pcst->txbuffer_length_u32 - 1u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   420  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   421      /* Check whether the suppressed positive bit is enabled for this request*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   422  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   423      if((adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].subfunction_exist_b != FALSE)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   424              ((Dcm_DsldRoe2_pcst->txbuffer_ptr[1]&0x80u) == 0x80u))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   425      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   426          /*suppressed positive bit is always set to true*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   427          Dcm_Roe2MesContext_st.msgAddInfo.suppressPosResponse = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   428  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   429          /* Remove the suppress positive bit from the sub-function byte*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   430          (*Dcm_Roe2MesContext_st.reqData) = ((*Dcm_Roe2MesContext_st.reqData) & 0x7Fu);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   431      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   432      /* If sub-function is supported and sub-services are configured in DSD */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   433  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   434      if((adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].subfunction_exist_b!= FALSE) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   435              (adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].num_sf_u8!=0))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   436      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   437          /* Call the API to do sub-function related checks */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   438          dataRetVal_u8 = Dcm_CheckRoeSubFunction(&Dcm_Roe2MesContext_st,&adrSrvTable_pcst[Dcm_DsldSrvIndex_u8],&dataNrc_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   439          if(dataRetVal_u8 != E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   440          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   441              dataNrc_u8 = (dataNrc_u8==0u)?DCM_E_CONDITIONSNOTCORRECT:dataNrc_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   442          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   443          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   444          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   445              dataNrc_u8 = 0u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   446          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   447      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   448      if(dataNrc_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   449      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   450          /* Change state to call the service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   451          Dcm_DsdRoe2State_en = DSD_CALL_SERVICE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   452  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   453          /* Start ROE2 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   454  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   455          DCM_TimerStart(Dcm_DsldGlobal_st.datRoeType2Timeout_u32,DCM_CFG_GET_TIMEOUT,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   456                  Dcm_Roe2StartTick_u32,Dcm_RoeType2TimerStatus_uchr);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   457  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   458          /* Call the service first time */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   459          dataRetVal_u8=(*adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].service_handler_fp)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   460          (DCM_INITIAL,&Dcm_Roe2MesContext_st,&dataNrc_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   461  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   462          Dcm_DsldRoeInitiateResponseTransmission(dataRetVal_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   463      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   464      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   465      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   466          Dcm_SetNegResponse(&Dcm_Roe2MesContext_st,dataNrc_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   467          Dcm_ProcessingDone(&Dcm_Roe2MesContext_st );
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   468      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   469  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   470  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   471  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   472   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   473   * Dcm_Prv_DsldRoe2StateMachine_DSD_CALL_SERVICE :  This function called from Dcm_DsldRoe2StateMachine() to
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   474   * process and call ROE requested service
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   475   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   476   * \param           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   477   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   478   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   479   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   480   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   481   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   482   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   483   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   484  static FUNC(void,DCM_CODE) Dcm_Prv_DsldRoe2StateMachine_DSD_CALL_SERVICE(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   485          P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST)  adrSrvTable_pcst)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   486  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   487      VAR(uint8,AUTOMATIC) dataNrc_u8; /* Variable to store negative response code */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   488      VAR(Std_ReturnType,AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   489  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   490      /* Check whether the ROE timeout has occurred  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   491      if(DCM_TimerElapsed(Dcm_DsldGlobal_st.datRoeType2Timeout_u32)== FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   492      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   493          /* Start ROE2 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   494          DCM_TimerProcess(Dcm_DsldGlobal_st.datRoeType2Timeout_u32,Dcm_Roe2StartTick_u32,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   495                  Dcm_RoeType2TimerStatus_uchr);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   496  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   497          /* Call the service if it located inside the DCM */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   498          /*Is Service existing in DSP*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   499          if(adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].servicelocator_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   500          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   501              dataRetVal_u8=(*adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].service_handler_fp)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   502              (DCM_INITIAL,&Dcm_Roe2MesContext_st,&dataNrc_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   503  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   504              Dcm_DsldRoeInitiateResponseTransmission(dataRetVal_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   505          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   506      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   507      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   508      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   509          /* Give the confirmation to ROE application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   510          DcmAppl_DcmConfirmation(Dcm_Roe2MesContext_st.idContext,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   511                  Dcm_Roe2MesContext_st.dcmRxPduId,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   512                  Dcm_Dsld_RoeRxToTestSrcMappingTable[Dcm_Roe2MesContext_st.dcmRxPduId].testsrcaddr_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   513                  DCM_RES_POS_NOT_OK);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   514  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   515          if(adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].Service_init_fp != NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   516          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   517              /* Call initialization of the active service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   518              (*adrSrvTable_pcst[Dcm_DsldSrvIndex_u8].Service_init_fp)();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   519          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   520          /* reset the DCM states */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   521          Dcm_DsdRoe2State_en = DSD_IDLE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   522      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   523  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   524  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   525  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   526   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   527   * Dcm_Prv_DsldRoe2StateMachine_DSD_TX_CONFIRMATION :  This function called from Dcm_DsldRoe2StateMachine() to
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   528   * process ROE requested service TX CONFIRMATION
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   529   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   530   * \param           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   531   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   532   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   533   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   534   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   535   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   536   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   537   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   538  static FUNC(void,DCM_CODE) Dcm_Prv_DsldRoe2StateMachine_DSD_TX_CONFIRMATION(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   539  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   540      VAR(Dcm_ConfirmationStatusType,AUTOMATIC) stConfirm_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   541  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   542      /* Is previous response sent successfully by PduR? */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   543      if(Dcm_Roe2TxResult_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   544      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   545          if(Dcm_Roe2ResponseType_en == DCM_DSLD_POS_RESPONSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   546          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   547              /* POS response sent successfully */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   548              stConfirm_u8 = DCM_RES_POS_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   549          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   550          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   551          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   552              /* NEG response sent successfully */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   553              stConfirm_u8 = DCM_RES_NEG_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   554          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   555      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   556      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   557      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   558          if(Dcm_Roe2ResponseType_en == DCM_DSLD_POS_RESPONSE )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   559          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   560              /* Unable to send positive response */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   561              stConfirm_u8 = DCM_RES_POS_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   562          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   563          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   564          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   565              /* Unable to send negative response response */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   566              stConfirm_u8 = DCM_RES_NEG_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   567          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   568      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   569  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   570      Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].Is_Processed = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   571  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   572      /* Give the confirmation to application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   573      DcmAppl_DcmConfirmation(Dcm_Roe2MesContext_st.idContext,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   574              Dcm_Roe2MesContext_st.dcmRxPduId,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   575              Dcm_Dsld_RoeRxToTestSrcMappingTable[Dcm_Roe2MesContext_st.dcmRxPduId].testsrcaddr_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   576              stConfirm_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   577  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   578      /* DSD state made to Idle */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   579      Dcm_DsdRoe2State_en = DSD_IDLE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   580      /* Start ROE2 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   581      DCM_TimerStart(Dcm_DsldGlobal_st.datRoeType2Timeout_u32,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   582              DCM_CFG_ROETYPE2_INTERMSGTIME,Dcm_Roe2StartTick_u32,Dcm_RoeType2TimerStatus_uchr);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   583  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   584  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   585  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   586  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   587   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   588   * Dcm_DsldRoe2StateMachine :  This function called from Dcm_MainFunction() to process ROE requested
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   589   *                              service in parallel to normal tester request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   590   * \param           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   591   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   592   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   593   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   594   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   595   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   596   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   597   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   598  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   599  FUNC(void,DCM_CODE) Dcm_DsldRoe2StateMachine(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   600  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   601      VAR(uint8,AUTOMATIC) nrService_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   602      VAR(uint8,AUTOMATIC) idxIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   603      VAR(uint8,AUTOMATIC) dataNrc_u8; /* Variable to store negative response code */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   604      VAR(Dcm_DsdStatesType_ten,AUTOMATIC) DsdState_en;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   605      P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST) adrSrvTable_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   606  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   607      switch(Dcm_DsdRoe2State_en)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   608      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   609          case DSD_IDLE:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   610          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   611  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   612          case DSD_VERIFY_DIAGNOSTIC_DATA:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   613          /* Initializing the negative response code */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   614          dataNrc_u8=0x00;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   615  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   616          /* Fill the default response type */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   617          Dcm_Roe2ResponseType_en = DCM_DSLD_POS_RESPONSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   618  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   619          /* Response length (filled by the service) */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   620          Dcm_Roe2MesContext_st.resDataLen = 0x0u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   621  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   622          /* Get the number of services present in the ROE service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   623          nrService_u8 = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].num_services_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   624  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   625          /* Get the pointer to service table*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   626          adrSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   627          Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   628  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   629          /* Fill the Sid */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   630          Dcm_Roe2MesContext_st.idContext = Dcm_DsldRoe2_pcst->txbuffer_ptr[0];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   631  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   632          /* This is ROE requested service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   633          Dcm_Roe2MesContext_st.msgAddInfo.sourceofRequest = DCM_ROE_SOURCE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   634          /* Search the requested service in ROE service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   635          for(idxIndex_u8 = 0x00; idxIndex_u8 != nrService_u8; idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   636          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   637              if(Dcm_Roe2MesContext_st.idContext == adrSrvTable_pcst[idxIndex_u8].sid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   638              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   639                  /* SID Found, break the loop */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   640                  break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   641              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   642          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   643  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   644          /* Is SID exists in table? */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   645          if(idxIndex_u8 != nrService_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   646          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   647              DsdState_en = Dcm_Prv_GetDsdState();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   648              /* Multicore: No lock needed here as Dsl state is an atomic operation */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   649              /* DSL state machine handling ensures that there is no data consistency issues*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   650              /* If there is a parallel update to DSL state there is no functionality problems observed*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   651              if(((Dcm_Prv_GetDslState() == DSL_STATE_IDLE)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   652                              (DsdState_en == DSD_IDLE)) ||
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   653                      (Dcm_ChkIfDidServiceIsActive(Dcm_DsldGlobal_st.dataSid_u8,Dcm_Roe2MesContext_st.idContext)!=FALSE))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   654              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   655                  Dcm_Prv_DsldRoe2StateMachine_DSD_VERIFY_DIAGNOSTIC_DATA(adrSrvTable_pcst);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   656              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   657              else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   658              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   659                  /* SID not found, send the negative response */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   660                  Dcm_SetNegResponse(&Dcm_Roe2MesContext_st,DCM_E_SERVICENOTSUPPORTED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   661                  Dcm_ProcessingDone(&Dcm_Roe2MesContext_st );
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   662              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   663          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   664          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   665  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   666          case DSD_CALL_SERVICE:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   667  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   668          /* Get the pointer to service table*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   669          adrSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   670          Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   671          Dcm_Prv_DsldRoe2StateMachine_DSD_CALL_SERVICE(adrSrvTable_pcst);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   672          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   673  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   674          case DSD_WAITFORTXCONF:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   675          /* DCM is sending the response */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   676          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   677  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   678          case DSD_SENDTXCONF_APPL:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   679  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   680          Dcm_Prv_DsldRoe2StateMachine_DSD_TX_CONFIRMATION();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   681          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   682  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   683          default:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   684          /* Intentionally Empty */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   685          break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   686      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   687  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   688  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   689  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   690  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   691  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   692  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   693  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   694  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   695  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   696  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   697   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   698   * Dcm_ROE_StartProtocol : Function called by the ROE service whene the application function is
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   699   *                         request is received.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   700   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   701   * \param
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   702   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   703   * \retval         DCM_E_OK: ResponseOnOneEvent request is accepted by DCM ,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   704   *                 DCM_E_ROE_NOT_ACCEPTED: ResponseOnOneEvent request is not accepted by DCM
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   705   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   706   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   707   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   708   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   709  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_Prv_ROE_StartProtocol(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   710  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   711      VAR(uint8,AUTOMATIC) idxProtocol_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   712      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   713      idxProtocol_u8 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   714      /* Initialize the value to ROE not accepted */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   715      dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   716      /* Start the application function */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   717      if (Dcm_StartProtocol(Dcm_DsldProtocol_pcst[idxProtocol_u8].protocolid_u8) == E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   718      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   719          /* Call the Initialisation function of service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   720          Dcm_Dsd_ServiceIni(Dcm_DsldGlobal_st.datActiveSrvtable_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   721  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   722          /* Get the active service table of the protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   723          Dcm_DsldSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   724                  Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   725      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   726      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   727      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   728          /* reject the request because unable to start protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   729          /* Report development error "DCM_E_PROTOCOL_NOT_STARTED " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   730          DCM_DET_ERROR(DCM_ROE_ID, DCM_E_PROTOCOL_NOT_STARTED)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   731  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   732          /*Initialize the Comm Active flag to the value false*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   733          Dcm_DsldGlobal_st.flgCommActive_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   734          dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   735      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   736      return (dataReturnValue_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   737  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   738  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   739   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   740   * Dcm_ROE_TYPE1 : Function called by the ROE service whenever the ROE_TYPE1 request is received.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   741   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   742   * \param          Dcm_MsgType MsgPtr :    Pointer to buffer which contains the request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   743   *                 Dcm_MsgLenType MsgLen : Length of the request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   744   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   745   * \retval         DCM_E_OK: ResponseOnOneEvent request is accepted by DCM ,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   746   *                 DCM_E_ROE_NOT_ACCEPTED: ResponseOnOneEvent request is not accepted by DCM
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   747   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   748   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   749   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   750   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   751  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   752  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_Prv_ROE_TYPE1( VAR(Dcm_MsgType,AUTOMATIC) adrSrc_pu8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   753          CONST(Dcm_MsgType,AUTOMATIC) MsgPtr,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   754          VAR(Dcm_MsgLenType, AUTOMATIC) MsgLen,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   755          VAR(PduIdType,AUTOMATIC) dcmRxPduId_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   756  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   757      VAR(Dcm_MsgType,AUTOMATIC) adrDest_pu8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   758      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   759      VAR(uint16_least,AUTOMATIC) idxIndex_qu16;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   760      VAR(boolean,AUTOMATIC) roeReqAccepted_b;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   761      VAR(uint8,AUTOMATIC) idxProtocol_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   762      VAR(Dcm_DsdStatesType_ten,AUTOMATIC) DsdState_en = Dcm_Prv_GetDsdState();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   763  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   764      VAR(uint8, AUTOMATIC) DslPreemptionStateTemp_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   765  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   766      adrDest_pu8 = MsgPtr;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   767      idxProtocol_u8 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   768      /* Initialize the flag to reject ROE event during initialization */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   769  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   770      roeReqAccepted_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   771  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   772      /* Initialize the value to ROE not accepted */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   773      dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   774      /* Check whether the DCM is free */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   775      /* Below section of the code is to protect the state transition from IDLE or
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   776       * READY_FOR_RECEPTION to ROETYPE1_RECEIVED, it is possible that other state
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   777       * transitions from these states can also be triggered in parallel from other
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   778       * contexts, thus this lock is needed
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   779       */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   780      SchM_Enter_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   781      /* Multicore: Lock needed here to avoid parallel DSL state update in Rx and Tx confirmation calls */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   782      if ((Dcm_Prv_GetDslState() == DSL_STATE_IDLE) && (DsdState_en== DSD_IDLE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   783              && (adrDest_pu8 != NULL_PTR) && (adrSrc_pu8 != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   784      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   785  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   786          DslPreemptionStateTemp_u8 = Dcm_Prv_GetDslPreemptionState();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   787          if((DslPreemptionStateTemp_u8 != DSL_SUBSTATE_STOP_PROTOCOL)&& (DslPreemptionStateTemp_u8 != DSL_SUBSTATE_STOP_PROTOCOL))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   788  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   789          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   790              /* By moving the DSL state ignore request from tester */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   791              Dcm_Prv_SetDslState(DSL_STATE_ROETYPE1_RECEIVED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   792              Dcm_Prv_SetDslSubState(DSL_SUBSTATE_S3_OR_P3_TIMEMONITORING);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   793              Dcm_Prv_SetDsdState(DSD_VERIFY_DIAGNOSTIC_DATA);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   794              Dcm_Prv_SetDslNextState(DSL_STATE_IDLE);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   795              Dcm_Prv_SetDslNextSubState(DSL_SUBSTATE_S3_OR_P3_TIMEMONITORING);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   796              /*Initialize the flag to accept ROE event during initialization*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   797              roeReqAccepted_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   798          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   799      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   800  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   801      SchM_Exit_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   802      if (roeReqAccepted_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   803      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   804          /* Multicore: No lock necessary as the DSL state machine will ensure data consistency */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   805          /* Only when Dcm is free there is a possibility that code reaches here */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   806          Dcm_DsldGlobal_st.dataActiveRxPduId_u8 = dcmRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   807          Dcm_DsldGlobal_st.dataRequestLength_u16 = (PduLengthType) MsgLen;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   808          Dcm_DsldRoe_pcst = Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   809  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   810          Dcm_DsldGlobal_st.dataSid_u8 = adrDest_pu8[0];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   811  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   812          /* Set the ROE service table by storing active service table Id */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   813          Dcm_DsldGlobal_st.dataOldSrvtable_u8 = Dcm_DsldGlobal_st.datActiveSrvtable_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   814          Dcm_DsldGlobal_st.datActiveSrvtable_u8 = Dcm_DsldRoe_pcst->servicetable_Id_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   815          Dcm_DsldSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   816                  Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   817          /* Store the RXPduid */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   818          /* Multicore: No locking necessary as Dcm_DsldGlobal_st.dataActiveRxPduId_u8 is an atomic variable and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   819           there is no parallel writing due to DSL state machine handling */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   820          Dcm_DsldMsgContext_st.dcmRxPduId = Dcm_DsldGlobal_st.dataActiveRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   821  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   822          /* This is ROE requested service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   823          Dcm_DsldMsgContext_st.msgAddInfo.sourceofRequest = DCM_ROE_SOURCE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   824  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   825          /* Copy the request and free the buffer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   826          for (idxIndex_qu16 = (uint16) MsgLen; idxIndex_qu16 != 0x00u; idxIndex_qu16--)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   827          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   828  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   829              *adrSrc_pu8 = *adrDest_pu8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   830  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   831              adrSrc_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   832  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   833              adrDest_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   834  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   835          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   836      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   837      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   838      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   839          /* pass the event Id to the function Dcm_UpdateROEQueue ()to queue the event since DCM is currently busy. */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   840          dataReturnValue_u8 = Dcm_UpdateROEQueue(*(MsgPtr + MsgLen), dcmRxPduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   841      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   842  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   843      return (dataReturnValue_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   844  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   845  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   846  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   847  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   848   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   849   * Dcm_ROE_TYPE2 : Function called by the ROE service whenever the ROE_TYPE2 request is received.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   850   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   851   * \param          Dcm_MsgLenType MsgLen : Length of the request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   852   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   853   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   854   * \retval         DCM_E_OK: ResponseOnOneEvent request is accepted by DCM ,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   855   *                 DCM_E_ROE_NOT_ACCEPTED: ResponseOnOneEvent request is not accepted by DCM
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   856   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   857   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   858   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   859   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   860  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   861  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_Prv_ROE_TYPE2(VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   862                                                         VAR(Dcm_MsgType,AUTOMATIC) adrSrc_pu8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   863                                                         CONST(Dcm_MsgType,AUTOMATIC) MsgPtr,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   864                                                         VAR(Dcm_MsgLenType, AUTOMATIC) MsgLen,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   865                                                         VAR(PduIdType,AUTOMATIC) dcmRxPduId_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   866  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   867      VAR(Dcm_MsgType,AUTOMATIC) adrDest_pu8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   868      VAR(uint8,AUTOMATIC) idxProtocol_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   869      VAR(uint8,AUTOMATIC) idxIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   870      VAR(uint16_least,AUTOMATIC) idxIndex_qu16;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   871  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   872  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   873      VAR(uint8,AUTOMATIC) nrService_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   874      P2CONST(Dcm_Dsld_ServiceType,AUTOMATIC,DCM_INTERN_CONST) adrSrvTable_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   875  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   876  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   877      adrDest_pu8 = MsgPtr;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   878      idxProtocol_u8 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   879  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   880      /* Check if any event response under processing*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   881      if((Dcm_DsdRoe2State_en == DSD_IDLE) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   882              (dataReturnValue_u8 == DCM_E_OK) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   883              (adrDest_pu8 != NULL_PTR) && (adrSrc_pu8 != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   884      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   885  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   886          /* Copy the request and free the buffer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   887          for(idxIndex_qu16 = (uint16)MsgLen; idxIndex_qu16 != 0x00u; idxIndex_qu16--)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   888          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   889              *adrSrc_pu8 = *adrDest_pu8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   890  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   891              adrSrc_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   892  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   893              adrDest_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   894          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   895          /* Get the ROE structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   896          Dcm_DsldRoe2_pcst = Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   897          /* Store the request length */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   898          Dcm_Roe2MesContext_st.reqDataLen = MsgLen - 1u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   899          /* Store the RxPdu Id */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   900          Dcm_Roe2MesContext_st.dcmRxPduId = dcmRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   901          /* Get the number of services present in the ROE service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   902          nrService_u8 = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].num_services_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   903          /* Get the pointer to service table*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   904          adrSrvTable_pcst = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldRoe2_pcst->servicetable_Id_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   905  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   906          Dcm_Roe2MesContext_st.idContext = Dcm_DsldRoe2_pcst->txbuffer_ptr[0];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   907  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   908          /* Search the requested service in ROE service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   909          for(idxIndex_u8 = 0x00u; idxIndex_u8 != nrService_u8; idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   910          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   911              if(Dcm_Roe2MesContext_st.idContext == adrSrvTable_pcst[idxIndex_u8].sid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   912              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   913                  /* SID Found, break the loop */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   914                  break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   915              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   916          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   917          /* Is SID exists in table? */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   918          if(idxIndex_u8 != nrService_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   919          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   920              /* Store the index of the service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   921              Dcm_DsldSrvIndex_u8 = idxIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   922              /* Process the request in next call of Dcm_MainFunction() */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   923              Dcm_DsdRoe2State_en = DSD_VERIFY_DIAGNOSTIC_DATA;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   924          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   925          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   926          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   927              /* Service requested by ROE is not configured in ROE service table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   928              dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   929          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   930      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   931      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   932      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   933          /* pass the event Id to the function Dcm_UpdateROEQueue ()to queue the event since DCM is currently busy. */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   934          dataReturnValue_u8= Dcm_UpdateROEQueue(*(adrDest_pu8+MsgLen+1) , dcmRxPduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   935      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   936      return(dataReturnValue_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   937  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   938  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   939  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   940  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   941   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   942   * Dcm_Prv_ROE_CheckLength : Function called by the ROE service when the request is received and check
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   943   * for the length.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   944   * \param
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   945   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   946   * \retval         DCM_E_OK: ResponseOnOneEvent request is accepted by DCM ,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   947   *                 DCM_E_ROE_NOT_ACCEPTED: ResponseOnOneEvent request is not accepted by DCM
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   948   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   949   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   950   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   951   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   952  static FUNC(Dcm_StatusType,DCM_CODE) Dcm_Prv_ROE_CheckLength(CONST(Dcm_MsgType,AUTOMATIC) MsgPtr,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   953          VAR(Dcm_MsgLenType, AUTOMATIC) MsgLen,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   954          VAR(PduIdType,AUTOMATIC) dcmRxPduId_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   955  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   956      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   957      VAR(boolean,AUTOMATIC) dataStartProtocol_b;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   958      VAR(Dcm_MsgType,AUTOMATIC) adrSrc_pu8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   959      VAR(uint8,AUTOMATIC) idxProtocol_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   960      /* Initialize the value to ROE not accepted */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   961      dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   962  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   963      /* Copy the buffer pointer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   964      dataStartProtocol_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   965      idxProtocol_u8 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   966      adrSrc_pu8 = NULL_PTR;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   967  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   968      /* Check for validity of RxPdu before accepting for processing */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   969      if (dcmRxPduId_u8 < DCM_CFG_NUM_RX_PDUID)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   970      { /* Update the local variables */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   971          dataReturnValue_u8 = Dcm_GetRoeProtValidity(dcmRxPduId_u8, &idxProtocol_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   972      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   973  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   974      /* Protocols buffer should be greater than or equal to request length and check if the protocol is available
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   975       in the current active config set*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   976      if ((dataReturnValue_u8 == DCM_E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   977              && (DCM_CHKFULLCOMM_MODE(Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[dcmRxPduId_u8]].channel_idx_u8))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   978              && (MsgLen <= Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs->txbuffer_length_u32)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   979  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   980              )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   981      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   982          adrSrc_pu8 = Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs->txbuffer_ptr;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   983          /* Lock required here to maintain consistency within Dcm_DsldGlobal_st structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   984          SchM_Enter_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   985          /* check whether any protocol is active in DCM */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   986          /*Check if Dsl state is ready for receving the request*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   987          if ((Dcm_DsldGlobal_st.flgCommActive_b == FALSE) && (Dcm_Prv_GetDslState()  == DSL_STATE_IDLE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   988  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   989                  &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   990                  ((Dcm_Prv_GetDslPreemptionState() != DSL_SUBSTATE_STOP_PROTOCOL_RECEIVING) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   991                                  (Dcm_Prv_GetDslPreemptionState() != DSL_SUBSTATE_STOP_PROTOCOL))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   992  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   993                  )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   994          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   995              /* Activate the protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   996              /* Update the global variables  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   997              Dcm_DsldGlobal_st.idxCurrentProtocol_u8 = idxProtocol_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   998              Dcm_DsldGlobal_st.nrActiveConn_u8 = Dcm_DsldRxTable_pcu8[dcmRxPduId_u8];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	   999              Dcm_DsldGlobal_st.datActiveSrvtable_u8 = Dcm_DsldProtocol_pcst[idxProtocol_u8].sid_tableid_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1000              /*Initialize the flag for Comm Active protocol*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1001              Dcm_DsldGlobal_st.flgCommActive_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1002              /*Initialize the data start protocol to get protocol id*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1003              dataStartProtocol_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1004          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1005          /*Dcm is busy, queue the DTCs*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1006          SchM_Exit_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1007          /*Check if the data protocol id is set to get the protocol id*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1008          if (dataStartProtocol_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1009          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1010              dataReturnValue_u8 = Dcm_Prv_ROE_StartProtocol();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1011          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1012  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1013          /* Check the type of ROE */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1014          if ((DCM_PRV_DSLD_TYPE1 == (Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs)->protocolTransType_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1015                  && (dataReturnValue_u8 == DCM_E_OK))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1016          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1017              dataReturnValue_u8 = Dcm_Prv_ROE_TYPE1(adrSrc_pu8, MsgPtr, MsgLen, dcmRxPduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1018          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1019  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1020          else if((dataReturnValue_u8 == DCM_E_OK) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1021                  (DCM_PRV_DSLD_TYPE2 == (Dcm_DsldProtocol_pcst[idxProtocol_u8].roe_info_pcs)->protocolTransType_u8))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1022          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1023              dataReturnValue_u8 = Dcm_Prv_ROE_TYPE2(dataReturnValue_u8, adrSrc_pu8, MsgPtr, MsgLen, dcmRxPduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1024          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1025  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1026          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1027          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1028              /* Reject the request because unable to start protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1029              dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1030          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1031      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1032      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1033      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1034          /* reject the request because unable to buffer is not enough to hold request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1035          dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1036      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1037      return (dataReturnValue_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1038  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1039  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1040  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1041   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1042   * Dcm_Prv_ResponseOnOneEvent : Function called by the ROE service whenever the event occurred.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1043   *                          This function is not re-entrant function and it not called in other than
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1044   *                          Dcm_MainFunction() task.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1045   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1046   * \param          Dcm_MsgType MsgPtr :    Pointer to buffer which contains the request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1047   *                 Dcm_MsgLenType MsgLen : Length of the request
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1048   *                 PduIdType DcmRxPduId  : Rx PDU id on which ROE request is received.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1049   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1050   * \retval         DCM_E_OK: ResponseOnOneEvent request is accepted by DCM ,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1051   *                 DCM_E_ROE_NOT_ACCEPTED: ResponseOnOneEvent request is not accepted by DCM
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1052   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1053   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1054   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1055   **/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1056  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1057  FUNC(Dcm_StatusType,DCM_CODE) Dcm_Prv_ResponseOnOneEvent( CONST(Dcm_MsgType,AUTOMATIC) MsgPtr,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1058          VAR(Dcm_MsgLenType, AUTOMATIC) MsgLen,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1059          VAR(uint16,AUTOMATIC) TesterSrcAddr
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1060  )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1061  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1062      VAR(Dcm_StatusType,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1063  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1064      VAR(uint8,AUTOMATIC) idxIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1065  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1066      VAR(PduIdType,AUTOMATIC) dcmRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1067  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1068  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1069      /* Initialize the value to ROE not accepted */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1070      dataReturnValue_u8 = DCM_E_ROE_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1071  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1072      for (idxIndex_u8 = 0; idxIndex_u8 < DCM_CFG_NUM_RX_PDUID; idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1073      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1074          if (Dcm_Dsld_RoeRxToTestSrcMappingTable[idxIndex_u8].testsrcaddr_u16 == TesterSrcAddr)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1075          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1076              break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1077          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1078  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1079      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1080      if (idxIndex_u8 < DCM_CFG_NUM_RX_PDUID)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1081      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1082          /*Copy the RxPduID corresponding to the tester source address */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1083          dcmRxPduId_u8 = Dcm_Dsld_RoeRxToTestSrcMappingTable[idxIndex_u8].rxpduid_num_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1084  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1085          /* Check if Dcm is initialized and ready to accept the the request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1086          if ((Dcm_isInitialised_b != FALSE) && (Dcm_acceptRequests_b != FALSE))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1087          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1088              dataReturnValue_u8 = Dcm_Prv_ROE_CheckLength(MsgPtr, MsgLen, dcmRxPduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1089          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1090  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1091      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1092      return (dataReturnValue_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1093  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1094  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1095  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1096  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1097  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1098  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1099   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1100   * Dcm_DsldRoeTimeOut :  Monitoring of ROE timer
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1101   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1102   * \param           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1103   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1104   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1105   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1106   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1107   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1108   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1109   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1110  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1111  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1112  #if(DCM_ROE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1113  FUNC(void,DCM_CODE) Dcm_DsldRoeTimeOut(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1114  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1115      /* Is this ROE call */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1116      /* Multicore: No lock needed here as Dsl state is an atomic operation */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1117      /* DSL state machine handling ensures that there is no data consistency issues */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1118      /* And this API is called only when DSL is processing ROE event and hence no parallel write is possible */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1119      if(Dcm_Prv_GetDslState() == DSL_STATE_ROETYPE1_RECEIVED)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1120      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1121          /* Is ROE timeout occurred? */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1122          if(DCM_TimerElapsed(Dcm_DsldGlobal_st.dataTimerTimeout_u32)== FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1123          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1124              /* Start ROE2 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1125              DCM_TimerProcess(Dcm_DsldGlobal_st.dataTimerTimeout_u32,Dcm_TimerStartTick_u32,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1126                      Dcm_CounterValueTimerStatus_uchr);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1127          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1128          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1129          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1130              /* Give the confirmation to ROE application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1131              DcmAppl_DcmConfirmation(Dcm_DsldMsgContext_st.idContext,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1132                      Dcm_DsldMsgContext_st.dcmRxPduId,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1133                      Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[Dcm_DsldMsgContext_st.dcmRxPduId]].testaddr_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1134                      DCM_RES_POS_NOT_OK);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1135  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1136              /* reset the DCM states */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1137              Dcm_Prv_SetDsdState(DSD_IDLE);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1138  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1139              /* Change the service table to originally active table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1140              Dcm_DsldGlobal_st.datActiveSrvtable_u8 = Dcm_DsldGlobal_st.dataOldSrvtable_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1141              Dcm_DsldSrvTable_pcst = Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1142              ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1143  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1144              /* Multicore: No lock needed here as Dsl state is an atomic operation */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1145              /* DSL state machine handling ensures that there is no data consistency issues */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1146              /* Also this API is called from DSD state machine after DSL state machine, hence no parallel write */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1147              Dcm_Prv_SetDslState(DSL_STATE_IDLE);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1148              Dcm_Prv_SetDslSubState(DSL_SUBSTATE_S3_OR_P3_TIMEMONITORING);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1149          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1150      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1151  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1152  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1153  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1154  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1155   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1156   * Dcm_TriggerOnEvent:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1157   * The call to this function allows to trigger an event linked to a ResponseOnEvent request.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1158   * On the function call, the DCM will execute the associated service. This function
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1159   * shall be called only if the associated event has been activated through a
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1160   * xxx_ActivateEvent() call.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1161   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1162   * \parameters           RoeEventId
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1163   * \return value         Std_ReturnType
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1164   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1165   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1166   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1167  FUNC(Std_ReturnType,DCM_CODE) Dcm_TriggerOnEvent( VAR(uint8,AUTOMATIC) RoeEventId)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1168  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1169  #if((DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF) && (DCM_ROE_ENABLED != DCM_CFG_OFF) &&\ 
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1170      (DCM_CFG_DSP_RESPONSEONEVENT_ENABLED != DCM_CFG_OFF)&&(DCM_CFG_DSP_ROEDID_ENABLED != DCM_CFG_OFF))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1171      VAR(uint16,AUTOMATIC) idxRoeDid_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1172      VAR(Std_ReturnType,AUTOMATIC) dataRetStartFunc_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1173      VAR(Dcm_StatusType,AUTOMATIC) dataRoeStatus_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1174      VAR(uint8,AUTOMATIC) dataSrc_u8[4];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1175      VAR(uint32,AUTOMATIC) datatMsgLen_u32;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1176  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1177      idxRoeDid_u8=0x0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1178      dataRetStartFunc_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1179      datatMsgLen_u32=0;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1180  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1181      /*Loop through all the ROE dids and chk if the event id is valid*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1182      for(idxRoeDid_u8=0;idxRoeDid_u8<DCM_MAX_DIDROEEVENTS;idxRoeDid_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1183      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1184          if(RoeEventId==DcmDspRoeDidEvents[idxRoeDid_u8].RoeEventId_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1185          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1186              /*Valid ROEEVENT ID*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1187              break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1188          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1189      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1190      /*Check if the event is valid and is in the started state & if not return value is already
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1191       * set to E_NOT_OK if the event is not found or cleared.*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1192      if(idxRoeDid_u8<DCM_MAX_DIDROEEVENTS)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1193      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1194          /*Chk if the event is started*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1195          if(DCM_ROE_STARTED==DcmDspRoeDidStateVariables[idxRoeDid_u8].RoeEventStatus)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1196          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1197              /*Enters here only if the event is started and the event id is valid*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1198              dataRetStartFunc_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1199          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1200      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1201  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1202      if(E_OK==dataRetStartFunc_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1203      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1204          /**Simulate the request in the buffer and invoke Dcm_Prv_ResponseOnOneEvent*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1205          dataSrc_u8[0]=0x22u; /*RDBI service ID*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1206          dataSrc_u8[1]=(uint8)((DcmDspRoeDidStateVariables[idxRoeDid_u8].stSrvToRespDid_u16)>>8u); /*DID high byte*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1207          dataSrc_u8[2]=(uint8)(DcmDspRoeDidStateVariables[idxRoeDid_u8].stSrvToRespDid_u16); /*DID low byte*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1208          dataSrc_u8[3]= RoeEventId;/*Roe Event ID is passed to the Dcm_Prv_ResponseOnOneEvent as an implicit parameter,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1209           the datatMsgLen_u32 will not be changed,it is intentional*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1210          datatMsgLen_u32=3;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1211          dataRoeStatus_u8=Dcm_Prv_ResponseOnOneEvent(dataSrc_u8,datatMsgLen_u32,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1212                  DcmDspRoeDidStateVariables[idxRoeDid_u8].SourceAddress_u16);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1213          /*  Check if DCM Is free or busy processing another request, if DCM is busy return E_NOT_OK*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1214          if(dataRoeStatus_u8!=DCM_E_OK)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1215          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1216              dataRetStartFunc_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1217          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1218      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1219      return dataRetStartFunc_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1220  #else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1221      (void) RoeEventId;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1222      return E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1223  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1224  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1225  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1226  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1227   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1228   * Dcm_DemTriggerOnDTCStatus :  This function is invoked by Dem on an interrupt context to inform DCM about the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1229   * status mask change for a particular DTC, this information can be used by DTC
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1230   * to check if RDTC service has to be invoked or not based on the DTC if it was
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1231   * setup by tester for ROE onchangeofDTC.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1232   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1233   * \param           Dtc                 :   This is the DTC the change trigger is assigned
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1234   *                  DTCStatusOld        :   Old Status
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1235   *                  DTCStatusNew        :   New Status
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1236   * \retval          E_OK          :   This value is always returned
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1237   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1238   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1239   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1240   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1241  FUNC(Std_ReturnType,DCM_CODE) Dcm_DemTriggerOnDTCStatus( VAR(uint32, AUTOMATIC) Dtc,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1242                                                           VAR(uint8, AUTOMATIC) DTCStatusOld,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1243                                                           VAR(uint8, AUTOMATIC) DTCStatusNew )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1244  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1245  #if((DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF) && (DCM_CFG_DSP_RESPONSEONEVENT_ENABLED != DCM_CFG_OFF)&&\ 
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1246      (DCM_ROE_ENABLED != DCM_CFG_OFF)&&(DCM_CFG_DSP_ROEONDTCSTATUSCHANGE_ENABLED != DCM_CFG_OFF))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1247      VAR(uint8,AUTOMATIC) dataSid_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1248      VAR(uint8,AUTOMATIC) dataSrc_u8[3];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1249      VAR(uint32,AUTOMATIC) datatMsgLen_u32;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1250  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1251      /* Multicore: The read needs to be locked as there could be parallel Rx and ROE requests */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1252      SchM_Enter_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1253      dataSid_u8=Dcm_DsldGlobal_st.dataSid_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1254      SchM_Exit_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1255  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1256      /*Make sure the current active service is not CDI service and SID variable is not in init state (SID value as 0)*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1257      if((dataSid_u8 != 0x14) && (dataSid_u8 != 0x0))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1258      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1259          /*Check if ROE for DTC is already started*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1260          if(DCM_ROE_STARTED==DcmDspRoeDtcStateVariable.RoeEventStatus)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1261          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1262              /*Has the DTC status changed and if the mask bit provided by the tester is changed*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1263              if(((DTCStatusOld & DcmDspRoeDtcStateVariable.testerReqDTCStatusMask_u8) ^\ 
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1264   (DTCStatusNew & DcmDspRoeDtcStateVariable.testerReqDTCStatusMask_u8)) != 0x0)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1265              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1266                  /**Simulate the request in the buffer and invoke Dcm_Prv_ResponseOnOneEvent*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1267                  dataSrc_u8[0]=0x19u; /*RDTC service ID*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1268                  dataSrc_u8[1]=0x0Eu; /*DID high byte*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1269                  dataSrc_u8[2]= DcmDspRoeDtcEvent.RoeEventId_u8;/*Roe Event ID is passed to the Dcm_Prv_ResponseOnOneEvent
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1270                   as an implicit parameter,the datatMsgLen_u32 will not be changed,it is intentional*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1271                  datatMsgLen_u32=0x02u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1272                  (void)Dcm_Prv_ResponseOnOneEvent(dataSrc_u8,datatMsgLen_u32,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1273                          DcmDspRoeDtcStateVariable.SourceAddress_u16);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1274              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1275          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1276      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1277  #else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1278  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1279      (void)(DTCStatusOld);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1280      (void)(DTCStatusNew);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1281  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1282  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1283      (void)(Dtc);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1284      return E_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1285  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1286  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1287  #if(DCM_ROE_ENABLED != DCM_CFG_OFF && DCM_CFG_DSP_RESPONSEONEVENT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1288  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1289  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1290   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1291   * Dcm_CheckDTCEventWindowTimeROE_STARTED:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1292   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1293   * In this function handling of the DTC event window time when the ROE event is STARTED
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1294   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1295   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1296   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1297   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1298   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1299   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1300  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDTCEventWindowTimeROE_STARTED(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1301  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1302      if((roeEventWindowTime_u8 == 0x02u) || (roeEventWindowTime_u8 == 0x04u))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1303      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1304          /*Restart the events which are started in the default session ans the storage state is set TRUE for
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1305           both the control start request and the set up request and the event window  time supports the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1306           storage state(event window time is infinity(0x02) or current and following cycle(0x04u))*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1307          if((TRUE == DcmDspRoeDtcStateVariable.stDspRoeSessionIsDefault_b )&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1308                  (TRUE == DcmDspRoeDtcStateVariable.stDspRoeCtrlStorageState_b)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1309                  (TRUE == DcmDspRoeDtcStateVariable.stDspRoeStorageState_b))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1310          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1311              /*Inform application to restsrt the roe event*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1312  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1313              (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_STARTED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1314  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1315              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_STARTED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1316  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1317          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1318          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1319          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1320              /*Conditions does not support  to restart the ROE ,therefore stop it and inform application*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1321              DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1322  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1323              (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1324  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1325              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1326          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1327      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1328      /*Check if the event window time is CURRENT_CYCLE, then the window period is over .Stop the event and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1329       inform the application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1330      else if(roeEventWindowTime_u8 == 0x03u)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1331      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1332          /*Check whether the event is preconfigured*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1333          if(FALSE != DcmDspRoeDtcStateVariable.Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1334          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1335              DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1336          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1337          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1338          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1339              /*The set up is done by the tester,if the set up is stored in NVM update the status as stopped,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1340               else cleared*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1341              if(FALSE == DcmDspRoeDtcStateVariable.stDspRoeStorageState_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1342              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1343                  DcmDspRoeDtcStateVariable.RoeEventStatus = DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1344              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1345              else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1346              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1347                  DcmDspRoeDtcStateVariable.RoeEventStatus = DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1348              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1349          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1350  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1351          (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1352  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1353          DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1354                  DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1355      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1356      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1357      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1358  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1359          /*dummy else*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1360      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1361  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1362  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1363  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1364   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1365   * Dcm_CheckDTCEventWindowTimeROE_STOPPED:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1366   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1367   * In this function handling of the DTC event window time when the ROE event is STOPPED
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1368   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1369   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1370   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1371   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1372   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1373   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1374  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDTCEventWindowTimeROE_STOPPED(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1375  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1376      /*Remain in the stopped state if the  the events are stopped in the default session ans the storage state
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1377       is set TRUE fro both the control start request and the set up request and the event window  time
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1378       supports the storage state(event window time is infinity(0x02) or current and following cycle(0x04u))*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1379  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1380      if(((roeEventWindowTime_u8 == 0x02u) ||(roeEventWindowTime_u8 == 0x04u)) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1381              (TRUE == DcmDspRoeDtcStateVariable.stDspRoeCtrlStorageState_b) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1382              (TRUE == DcmDspRoeDtcStateVariable.stDspRoeStorageState_b) )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1383      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1384  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1385  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1386          (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1387  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1388          DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1389      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1390      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1391      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1392          /*Conditions does not support  to continue in the stopped state of  ROE ,therefore clear it and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1393           inform application*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1394          if(FALSE == DcmDspRoeDtcStateVariable.Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1395          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1396              DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1397  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1398              (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1399  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1400              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1401                      DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1402          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1403      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1404  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1405  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1406  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1407   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1408   * Dcm_Prv_CheckDTCEventWindowTime:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1409   * The function handling of the DTC event window time
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1410   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1411   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1412   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1413   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1414   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1415   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1416  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDTCEventWindowTime(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1417  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1418      /*Status change in conbination with current staus STARTED*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1419      if((DCM_ROE_STARTED==DcmDspRoeDtcStateVariable.RoeEventStatus))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1420      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1421          Dcm_Prv_CheckDTCEventWindowTimeROE_STARTED(roeEventWindowTime_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1422      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1423      else if(DCM_ROE_STOPPED == DcmDspRoeDtcStateVariable.RoeEventStatus)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1424      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1425          Dcm_Prv_CheckDTCEventWindowTimeROE_STOPPED(roeEventWindowTime_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1426      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1427      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1428      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1429          /*Event status is cleared*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1430          if(FALSE==DcmDspRoeDtcStateVariable.Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1431          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1432  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1433              DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1434  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1435              (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1436  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1437              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1438          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1439      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1440      if(roeEventWindowTime_u8 == 0x04u)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1441      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1442          /*Now one cycle is already over ,reset the event windowtime CURRENT_FOLLOWING_CYCLE to CURRENT_CYCLE*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1443          DcmAppl_DcmStoreROEcycleCounter(DcmDspRoeDtcEvent.RoeEventId_u8,0x03u);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1444      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1445  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1446  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1447  #if(DCM_CFG_DSP_ROEDID_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1448  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1449   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1450   * Dcm_CheckDIDEventWindowTimeROE_STARTED:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1451   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1452   * In this function handling of the DID event window time when the ROE event is STARTED
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1453   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1454   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1455   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1456   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1457   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1458   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1459   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1460  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDIDEventWindowTimeROE_STARTED(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1461                                                                        VAR(uint8,DCM_VAR) dataidxLoop_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1462  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1463      if((roeEventWindowTime_u8 == 0x02u) || (roeEventWindowTime_u8 == 0x04u))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1464      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1465          /*Restart the events which are started in the default session ans the storage state is set TRUE for
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1466           both the control start request and the set up request and the event window  time supports the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1467           storage state(event window time is infinity(0x02) or current and following cycle(0x04u))*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1468          if((TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeSessionIsDefault_b )&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1469                  (TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeCtrlStorageState_b)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1470                  (TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeStorageState_b) )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1471          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1472              /*Inform application to restsrt the roe event*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1473  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1474              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_STARTED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1475  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1476              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,DCM_ROE_STARTED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1477  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1478          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1479          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1480          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1481              /*Conditions does not support  to restart the ROE ,therefore stop it and inform application*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1482              DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1483  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1484              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1485  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1486              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1487          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1488      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1489      /*Check if the event window time is CURRENT_CYCLE, then the window period is over .Stop the event and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1490       inform the application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1491      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1492      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1493          if(roeEventWindowTime_u8 == 0x03u)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1494          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1495              if(FALSE != DcmDspRoeDidStateVariables[dataidxLoop_u8].Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1496              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1497                  DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1498              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1499              else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1500              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1501                  /*The set up is done by the tester,if the set up is stored in NVM update the status as
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1502                   stopped,else cleared*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1503                  if(FALSE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeStorageState_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1504                  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1505                      DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus = DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1506                  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1507                  else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1508                  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1509                      DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus = DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1510                  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1511              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1512  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1513              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1514  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1515              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1516                      DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1517          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1518      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1519  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1520  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1521  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1522   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1523   * Dcm_CheckDIDEventWindowTimeROE_STOPPED:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1524   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1525   * In this function handling of the DID event window time when the ROE event is STOPPED
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1526   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1527   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1528   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1529   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1530   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1531   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1532   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1533  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDIDEventWindowTimeROE_STOPPED(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1534                                                                        VAR(uint8,DCM_VAR) dataidxLoop_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1535  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1536      /*Remain in the stopped state if the  the events are stopped in the default session and the storage
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1537       state is set TRUE fro both the control start request and the set up request and the event window
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1538       time supports the storage state(event window time is infinity(0x02) or current and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1539       following cycle(0x04u))*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1540      if(((roeEventWindowTime_u8 == 0x02u) ||(roeEventWindowTime_u8 == 0x04u)) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1541              (TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeCtrlStorageState_b) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1542              (TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeStorageState_b))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1543      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1544  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1545  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1546          (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1547  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1548          DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1549  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1550      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1551      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1552      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1553          /*Conditions does not support  to continue in the stopped state of  ROE ,therefore clear it and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1554           inform application*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1555          if(FALSE == DcmDspRoeDidStateVariables[dataidxLoop_u8].Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1556          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1557              DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus =DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1558  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1559  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1560              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1561  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1562              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1563                      DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1564          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1565      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1566  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1567  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1568   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1569   * Dcm_Prv_CheckDIDEventWindowTime:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1570   * The function handling of the DID event window time
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1571   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1572   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1573   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1574   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1575   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1576   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1577  static FUNC(void,DCM_CODE) Dcm_Prv_CheckDIDEventWindowTime(VAR(uint8, AUTOMATIC) roeEventWindowTime_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1578                                                             VAR(uint8,DCM_VAR) dataidxLoop_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1579  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1580      /*Status change in conbination with current staus STARTED*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1581      if ((DCM_ROE_STARTED == DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1582      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1583          Dcm_Prv_CheckDIDEventWindowTimeROE_STARTED(roeEventWindowTime_u8, dataidxLoop_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1584      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1585      else if (DCM_ROE_STOPPED == DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1586      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1587          Dcm_Prv_CheckDIDEventWindowTimeROE_STOPPED(roeEventWindowTime_u8, dataidxLoop_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1588      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1589      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1590      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1591          if (FALSE == DcmDspRoeDidStateVariables[dataidxLoop_u8].Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1592          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1593  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1594              DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus = DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1595  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1596              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1597  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1598              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8, DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1599          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1600      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1601  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1602      if (roeEventWindowTime_u8 == 0x04u)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1603      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1604          /*Now one cycle is already over ,reset the event windowtime CURRENT_FOLLOWING_CYCLE to CURRENT_CYCLE*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1605          DcmAppl_DcmStoreROEcycleCounter(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8, 0x03u);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1606      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1607  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1608  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1609  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1610   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1611   * Dcm_RestoreROEDtcEvents:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1612   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1613   * In this function handling of the event window time restoring and storing of DTC information from and to
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1614   * application happens.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1615   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1616   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1617   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1618   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1619   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1620  #if(DCM_CFG_DSP_ROEONDTCSTATUSCHANGE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1621  FUNC(void,DCM_CODE) Dcm_RestoreROEDtcEvents(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1622  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1623      VAR(uint8, AUTOMATIC) roeEventWindowTime_u8;/*local varaible to store the event windowtime*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1624      VAR(Std_ReturnType,AUTOMATIC) dataResult_u8;/* local variable to store the return value from the application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1625      roeEventWindowTime_u8 =0x0u;/*initialize the local variable*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1626  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1627      /*Check the initial event status from the configuration ,if the event is preconfigured inform the application
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1628       through API call*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1629      if(TRUE==DcmDspRoeDtcStateVariable.Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1630      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1631  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1632  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1633          (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1634  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1635          DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1636      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1637      if((TRUE == DcmDspRoeDtcStateVariable.stDspRoeSessionIsDefault_b )&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1638              (FALSE == DcmDspRoeDtcStateVariable.stDspRoeCtrlStorageState_b))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1639      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1640          /*Call the application API to retrieve the roe evnet information stored in the NvM*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1641          dataResult_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1642      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1643      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1644      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1645          /*Call the application API to retrieve the roe evnet information stored in the NvM*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1646          dataResult_u8 = DcmAppl_DcmGetRoeDTCInfo(DcmDspRoeDtcEvent.RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1647                     &DcmDspRoeDtcStateVariable.RoeEventStatus,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1648                     &roeEventWindowTime_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1649                     &DcmDspRoeDtcStateVariable.SourceAddress_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1650                     &DcmDspRoeDtcStateVariable.testerReqDTCStatusMask_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1651                     &DcmDspRoeDtcStateVariable.stDspRoeCtrlStorageState_b,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1652                     &DcmDspRoeDtcStateVariable.stDspRoeStorageState_b,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1653                     &DcmDspRoeDtcStateVariable.stDspRoeSessionIsDefault_b);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1654      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1655      if(E_OK == dataResult_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1656      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1657          Dcm_Prv_CheckDTCEventWindowTime(roeEventWindowTime_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1658      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1659      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1660      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1661          if(FALSE==DcmDspRoeDtcStateVariable.Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1662          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1663              /*The information could not be taken from the Nvm,move evnt status to CLEARED*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1664              DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1665  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1666              (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1667  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1668              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1669          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1670      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1671  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1672  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1673  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1674   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1675   * Dcm_RestoreROEDidEvents:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1676   * This function will be invoked from the Dcm_Init().
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1677   * In this function handling of the event window time restoring and storing of DID information from and to
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1678   * application happens.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1679   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1680   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1681   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1682   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1683   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1684  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1685  #if(DCM_CFG_DSP_ROEDID_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1686  FUNC(void,DCM_CODE) Dcm_RestoreROEDidEvents(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1687  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1688  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1689      VAR(Std_ReturnType,AUTOMATIC) dataResult_u8;/* local variable to store the return value from the application */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1690      VAR(uint8,DCM_VAR) dataidxLoop_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1691      VAR(uint8, AUTOMATIC) roeEventWindowTime_u8;/*local varaible to store the event windowtime*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1692  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1693      for(dataidxLoop_u8 =0x0u;dataidxLoop_u8<DCM_MAX_DIDROEEVENTS;dataidxLoop_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1694      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1695          roeEventWindowTime_u8 =0x0u;/*Reset the loacal variable*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1696  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1697          /*Check the initial event status from the configuration ,if the event is preconfigured inform the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1698           application through API call*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1699          if(TRUE==DcmDspRoeDidStateVariables[dataidxLoop_u8].Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1700          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1701  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1702  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1703              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1704  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1705              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,DCM_ROE_STOPPED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1706          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1707          if((TRUE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeSessionIsDefault_b )&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1708                  (FALSE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeCtrlStorageState_b))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1709          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1710              /*Call the application API to retrieve the roe evnet information stored in the NvM*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1711              dataResult_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1712          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1713          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1714          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1715          /*Call the application API to retrieve the roe evnet information stored in the NvM*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1716          dataResult_u8 = DcmAppl_DcmGetROEDidInfo(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventDid_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1717                  DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1718                  &DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1719                  &roeEventWindowTime_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1720                  &DcmDspRoeDidStateVariables[dataidxLoop_u8].SourceAddress_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1721                  &DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeCtrlStorageState_b,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1722                  &DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeStorageState_b,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1723                  &DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeSessionIsDefault_b);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1724          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1725  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1726          if(E_OK == dataResult_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1727          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1728              Dcm_Prv_CheckDIDEventWindowTime(roeEventWindowTime_u8, dataidxLoop_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1729          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1730          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1731          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1732              if(FALSE==DcmDspRoeDidStateVariables[dataidxLoop_u8].Is_PreConfigured_b)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1733              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1734                  /*The information could not be taken from the Nvm,move evnt status to CLEARED*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1735                  DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus =DCM_ROE_CLEARED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1736  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1737                  (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1738  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1739                  DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,DCM_ROE_CLEARED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1740              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1741          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1742      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1743  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1744  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1745  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1746  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1747   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1748   * Dcm_ResetROEEvents:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1749   * This function will be invoked whenever a session change occurs from Dcm_DspConfirmation.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1750   * In this function will stop all the events which are already started in the previous session.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1751   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1752   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1753   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1754   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1755   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1756  FUNC(void,DCM_CODE) Dcm_ResetROEEvents(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1757  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1758  #if(DCM_CFG_DSP_ROEDID_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1759      VAR(uint8,AUTOMATIC) dataidxLoop_u8;/*Loop index*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1760  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1761  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1762  #if(DCM_CFG_DSP_ROEONDTCSTATUSCHANGE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1763      /*Move the already started ROE events to the STOPPED state if it is started in any non-default session */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1764      if((DCM_ROE_STARTED==DcmDspRoeDtcStateVariable.RoeEventStatus) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1765              (DcmDspRoeDtcStateVariable.stDspRoeSessionIsDefault_b == FALSE))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1766      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1767          DcmDspRoeDtcStateVariable.RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1768  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1769          (*(DcmDspRoeDtcEvent.ROEDTC_fp))(DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1770  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1771          DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDtcEvent.RoeEventId_u8,DcmDspRoeDtcStateVariable.RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1772      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1773  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1774  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1775  #if(DCM_CFG_DSP_ROEDID_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1776      for(dataidxLoop_u8 =0x0u;dataidxLoop_u8<DCM_MAX_DIDROEEVENTS;dataidxLoop_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1777      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1778          if((DCM_ROE_STARTED==DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1779                  (FALSE == DcmDspRoeDidStateVariables[dataidxLoop_u8].stDspRoeSessionIsDefault_b ))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1780          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1781              DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus =DCM_ROE_STOPPED;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1782              /*Inform application to reset the roe event*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1783  #if (DCM_CFG_RTESUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1784              (*(DcmDspRoeDidEvents[dataidxLoop_u8].ROEDID_fp))(DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1785  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1786              DcmAppl_Switch_DcmResponseOnEvent(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1787                      DcmDspRoeDidStateVariables[dataidxLoop_u8].RoeEventStatus);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1788          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1789      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1790  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1791  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1792  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1793  #if(DCM_CFG_ROETYPE2_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1794  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1795   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1796   * Dcm_Prv_CheckRoeType1StartProtocol:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1797   * The API will be invoked from the Dcm_DsldProcessRoeType1(),this will intern trigger the processing of the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1798   * start protocol RoeType1.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1799   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1800   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1801   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1802   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1803   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1804   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1805  static FUNC(void,DCM_CODE) Dcm_Prv_CheckRoeType1StartProtocol(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1806  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1807      /* Start the application function */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1808      if(Dcm_StartProtocol(Dcm_DsldProtocol_pcst[ Dcm_DsldGlobal_st.idxCurrentProtocol_u8].protocolid_u8)== E_OK )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1809      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1810          /* Call the Initialisation function of service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1811          Dcm_Dsd_ServiceIni(Dcm_DsldGlobal_st.datActiveSrvtable_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1812  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1813          /* Get the active service table of the protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1814          Dcm_DsldSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1815          Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1816      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1817      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1818      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1819          /*Initialize the Comm Active flag to false*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1820          Dcm_DsldGlobal_st.flgCommActive_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1821      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1822  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1823  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1824  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1825   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1826   * Dcm_DsldProcessRoeType1:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1827   * The API will be invoked from the Dcm_DsldProcessRoeQueue(),this will intern trigger the processing of the RoeType1.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1828   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1829   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1830   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1831   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1832   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1833   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1834  static FUNC(void,DCM_CODE) Dcm_DsldProcessRoeType1(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1835  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1836      VAR(Dcm_MsgType,AUTOMATIC) adrSrc_pu8; /* static source address variable */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1837      VAR(uint8,AUTOMATIC) RxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1838  #if(DCM_CFG_DSP_ROEDID_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1839  	VAR(uint8,AUTOMATIC) dataidxLoop_u8;/*Loop index*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1840  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1841      VAR(boolean,AUTOMATIC) dataStartProtocol_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1842      VAR(uint8, AUTOMATIC) DslPreemptionStateTemp_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1843      VAR(Dcm_DsdStatesType_ten,AUTOMATIC) DsdState_en ;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1844  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1845  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1846      RxPduId_u8 = (uint8)Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].RxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1847  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1848      if(DCM_CHKFULLCOMM_MODE(Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[RxPduId_u8]].channel_idx_u8))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1849      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1850          adrSrc_pu8 =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1851          Dcm_DsldProtocol_pcst[Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[RxPduId_u8]].protocol_num_u8].roe_info_pcs->txbuffer_ptr;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1852          /* Lock required here to maintain consistency within Dcm_DsldGlobal_st structure */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1853          SchM_Enter_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1854          /* check whether any protocol is active in DCM */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1855          /*If the Dsl state is Ready for receving the request*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1856          if((Dcm_DsldGlobal_st.flgCommActive_b == FALSE) && ( Dcm_Prv_GetDslState() == DSL_STATE_IDLE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1857  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1858                  &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1859                  ((Dcm_Prv_GetDslPreemptionState() != DSL_SUBSTATE_STOP_PROTOCOL_RECEIVING) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1860                          (Dcm_Prv_GetDslPreemptionState() != DSL_SUBSTATE_STOP_PROTOCOL))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1861  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1862          )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1863          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1864              /* Activate the protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1865              /* Update the global variables  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1866              Dcm_DsldGlobal_st.idxCurrentProtocol_u8 =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1867              Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[RxPduId_u8]].protocol_num_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1868              Dcm_DsldGlobal_st.nrActiveConn_u8 = Dcm_DsldRxTable_pcu8[RxPduId_u8];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1869              Dcm_DsldGlobal_st.datActiveSrvtable_u8 =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1870              Dcm_DsldProtocol_pcst[Dcm_DsldConnTable_pcst[Dcm_DsldRxTable_pcu8[RxPduId_u8]].protocol_num_u8].sid_tableid_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1871              /*Initialize the Comm Active flag to value true */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1872              Dcm_DsldGlobal_st.flgCommActive_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1873              /*Initialize the data start protocol value to true */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1874              dataStartProtocol_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1875          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1876          /*Dcm is busy, queue the DTCs*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1877          SchM_Exit_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1878          /*Check if data start protocol value is set to get the protocol id*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1879          if(dataStartProtocol_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1880          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1881              Dcm_Prv_CheckRoeType1StartProtocol();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1882          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1883  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1884          SchM_Enter_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1885          /* Multicore: Lock needed here to avoid parallel DSL state update in Rx and Tx confirmation calls */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1886  		DsdState_en = Dcm_Prv_GetDsdState();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1887          if((Dcm_Prv_GetDslState()   == DSL_STATE_IDLE)&&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1888                  (DsdState_en == DSD_IDLE) &&
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1889                  (adrSrc_pu8 != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1890          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1891  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1892              DslPreemptionStateTemp_u8 = Dcm_Prv_GetDslPreemptionState();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1893              if((DslPreemptionStateTemp_u8 != DSL_SUBSTATE_STOP_PROTOCOL)&& (DslPreemptionStateTemp_u8 != DSL_SUBSTATE_STOP_ROE))
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1894  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1895              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1896                  /* By moving the DSL state ignore request from tester */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1897                  Dcm_Prv_SetDslState(DSL_STATE_ROETYPE1_RECEIVED);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1898                  Dcm_Prv_SetDslSubState(DSL_SUBSTATE_S3_OR_P3_TIMEMONITORING);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1899                  Dcm_Prv_SetDsdState(DSD_VERIFY_DIAGNOSTIC_DATA);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1900                  Dcm_Prv_SetDslNextState(DSL_STATE_IDLE);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1901                  Dcm_Prv_SetDslNextSubState(DSL_SUBSTATE_S3_OR_P3_TIMEMONITORING);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1902              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1903          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1904          SchM_Exit_Dcm_Global_NoNest();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1905          /* Multicore: No lock necessary as the DSL state machine will ensure data consistency */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1906          /* Only when Dcm is free there is a possibility that code reaches here */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1907          Dcm_DsldGlobal_st.dataActiveRxPduId_u8 =RxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1908  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1909          Dcm_DsldRoe_pcst = Dcm_DsldProtocol_pcst[Dcm_DsldGlobal_st.idxCurrentProtocol_u8].roe_info_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1910  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1911  #if(DCM_CFG_DSP_ROEONDTCSTATUSCHANGE_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1912          if( Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].EventId_u8 == DCM_ROE_DTCEVENTID)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1913          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1914              Dcm_DsldGlobal_st.dataSid_u8=0x19u; /*RDTC service ID*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1915              (*adrSrc_pu8)= 0x19;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1916              adrSrc_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1917              *adrSrc_pu8 = 0x0Eu;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1918  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1919              Dcm_DsldGlobal_st.dataRequestLength_u16 =(PduLengthType)2u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1920          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1921          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1922  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1923          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1924  #if(DCM_CFG_DSP_ROEDID_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1925  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1926              for(dataidxLoop_u8 =0x0u;dataidxLoop_u8<DCM_MAX_DIDROEEVENTS;dataidxLoop_u8++)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1927              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1928                  if(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventId_u8 == Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].EventId_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1929                  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1930                      break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1931                  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1932              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1933              Dcm_DsldGlobal_st.dataSid_u8=0x22u; /*RDBI service ID*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1934              (*adrSrc_pu8)= 0x22;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1935              adrSrc_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1936              *(adrSrc_pu8) = (uint8)(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventDid_u16>>8u);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1937              adrSrc_pu8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1938              *(adrSrc_pu8) = (uint8)(DcmDspRoeDidEvents[dataidxLoop_u8].RoeEventDid_u16);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1939              Dcm_DsldGlobal_st.dataRequestLength_u16 =(PduLengthType)3u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1940  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1941          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1942          Dcm_DsldGlobal_st.dataOldSrvtable_u8 = Dcm_DsldGlobal_st.datActiveSrvtable_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1943          Dcm_DsldGlobal_st.datActiveSrvtable_u8 = Dcm_DsldRoe_pcst->servicetable_Id_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1944          Dcm_DsldSrvTable_pcst =
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1945          Dcm_Dsld_Conf_cs.sid_table_pcs[Dcm_DsldGlobal_st.datActiveSrvtable_u8].ptr_service_table_pcs;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1946          /* Store the RXPduid */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1947          /* Multicore: No locking necessary as Dcm_DsldGlobal_st.dataActiveRxPduId_u8 is an atomic variable and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1948           there is no parallel writing due to DSL state machine handling */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1949          Dcm_DsldMsgContext_st.dcmRxPduId = Dcm_DsldGlobal_st.dataActiveRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1950  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1951          /* This is ROE requested service */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1952          Dcm_DsldMsgContext_st.msgAddInfo.sourceofRequest = DCM_ROE_SOURCE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1953      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1954  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1955  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1956  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1957  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1958  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1959   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1960   * Dcm_DsldProcessRoeQueue:
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1961   * The API will be invoked from the Dcm_main(),this will intern trigger the processing of the RoeType1 and RoeType2
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1962   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1963   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1964   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1965   *
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1966   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1967   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1968  FUNC(void,DCM_CODE) Dcm_DsldProcessRoeQueue(void)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1969  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1970  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1971      /*Check if ROE timeout is occured?*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1972      if(DCM_TimerElapsed(Dcm_DsldGlobal_st.datRoeType2Timeout_u32)== FALSE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1973      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1974          /* Start ROE2 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1975          DCM_TimerProcess(Dcm_DsldGlobal_st.datRoeType2Timeout_u32,Dcm_Roe2StartTick_u32,Dcm_RoeType2TimerStatus_uchr)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1976      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1977      else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1978  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1979      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1980          if(DcmRoeQueueIndex_u8 == DCM_MAX_SETUPROEEVENTS)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1981          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1982              DcmRoeQueueIndex_u8 = 0x00u;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1983          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1984          while(DcmRoeQueueIndex_u8<DCM_MAX_SETUPROEEVENTS)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1985          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1986              if(Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].Is_Queued == TRUE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1987              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1988                  Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].Is_Queued = FALSE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1989                  Dcm_DcmDspEventQueue[DcmRoeQueueIndex_u8].Is_Processed = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1990                  break;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1991              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1992              DcmRoeQueueIndex_u8++;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1993          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1994          if(DcmRoeQueueIndex_u8!=DCM_MAX_SETUPROEEVENTS)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1995          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1996  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1997  #if(DCM_CFG_ROETYPE2_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1998              if(Dcm_DsdRoe2State_en == DSD_IDLE)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  1999              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2000                  Dcm_DsdRoe2State_en = DSD_VERIFY_DIAGNOSTIC_DATA;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2001                  /* Roe type 2 handling */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2002                  Dcm_DsldRoe2StateMachine();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2003              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2004  #else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2005              Dcm_DsldProcessRoeType1();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2006  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2007          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2008      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2009  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2010  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2011  #if(DCM_CFG_PROTOCOL_PREMPTION_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2012  /**
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2013   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2014   * Dcm_DsldPersistentRoeHandling_en : Function to do the persistent ROE handling
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2015   * \param           adrArrivedProt_pcst (in):  Pointer to protocol table (for newly arrived request)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2016   *                  nrTpSduLength_u16 (in) : Length of the request.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2017   *                  RxPduid     (in) : Rx PDU id of arrived request.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2018   *  If a high priority request is to be taken; and ROE events are invoked - there is a chance ROE would reject the
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2019   * high priority protocols request. IS0 specifies ROE to work persistently as application demands. But when a higher
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2020   * priority protocol preempts the ROE protocol. THe high priority protocols requests are not to be ignored.
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2021   * \retval          BufReq_ReturnType : same as above function
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2022   * \seealso
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2023   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2024   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2025   */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2026  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2027  FUNC(BufReq_ReturnType, DCM_CODE) Dcm_DsldPersistentRoeHandling_en(
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2028                                           P2CONST(Dcm_Dsld_protocol_tableType,AUTOMATIC,DCM_INTERN_CONST) adrArrivedProt_pcst,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2029                                           VAR(PduLengthType,AUTOMATIC) nrTpSduLength_u16,
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2030                                           VAR(PduIdType,AUTOMATIC) dataRxpduId_u8
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2031                                                       )
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2032  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2033  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2034      /* Local variable for return value */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2035      VAR(BufReq_ReturnType,AUTOMATIC) dataReturnVal_en;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2036      /* Local variable for Roe connection index */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2037      VAR(uint8,AUTOMATIC) dataRoeConnId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2038      /* Local variable for Roe protocol index  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2039      VAR(uint8,AUTOMATIC) idxRoeProt_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2040      /* Local variable for ROE dataRxPduId_u8  */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2041      VAR(PduIdType,AUTOMATIC) dataRoeRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2042      /* ROE protocol Table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2043      P2CONST(Dcm_Dsld_protocol_tableType,AUTOMATIC,DCM_INTERN_CONST) adrRoeProtTable_pcst;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2044  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2045      /* The Active dataRxpduId_u8 when ROETYPE1 is active would be from the protocol where ROE was started*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2046      /* This dataRxPduId_u8 can be used to calculate the protocol from where ROE was started */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2047      /* Multicore: No locking necessary as Dcm_DsldGlobal_st.dataActiveRxPduId_u8 is an atomic variable and
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2048         there is no parallel writing due to DSL state machine handling */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2049      dataRoeRxPduId_u8 = Dcm_DsldGlobal_st.dataActiveRxPduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2050  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2051      /* The connection on which the application invoked ROE */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2052      dataRoeConnId_u8 = Dcm_DsldRxTable_pcu8[dataRoeRxPduId_u8];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2053  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2054      /* Protocol of the ROE Rx pdu id */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2055      idxRoeProt_u8 = Dcm_DsldConnTable_pcst[dataRoeConnId_u8].protocol_num_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2056  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2057      /* Get the pointer of ROE protocol table */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2058      adrRoeProtTable_pcst = &Dcm_DsldProtocol_pcst[idxRoeProt_u8];
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2059  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2060      dataReturnVal_en = BUFREQ_E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2061  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2062      /* If the request has not arrived on the active protocol yet */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2063      if(Dcm_DsldGlobal_st.dataPassRxPduId_u8 == 0xff)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2064      {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2065          /* Check the size of the buffer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2066          if((uint32)nrTpSduLength_u16 <= adrArrivedProt_pcst->rx_buffer_size_u32)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2067          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2068              /* Check arrived request has higher priority */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2069              if(adrRoeProtTable_pcst->premption_level_u8 > adrArrivedProt_pcst->premption_level_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2070              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2071                  /* case when the incoming request is from a same protocol which is active.*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2072                  /* ROE might stop the preemption*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2073                  /* this check is for the incoming requests protocol id with the active protocol */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2074                  if(Dcm_DsldProtocol_pcst[Dcm_DsldGlobal_st.idxCurrentProtocol_u8].protocolid_u8 ==
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2075                   adrArrivedProt_pcst->protocolid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2076                  {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2077                      /* Store the Rx pduid, request length and ready to receive buffer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2078                      Dcm_DsldGlobal_st.dataPassRxPduId_u8 = dataRxpduId_u8;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2079                      Dcm_DsldGlobal_st.dataPassdataRequestLength_u16  = nrTpSduLength_u16;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2080                      /*Initialize the CopyRxData status to the value true*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2081                      Dcm_DslRxPduArray_ast[dataRxpduId_u8].Dcm_DslCopyRxData_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2082                      Dcm_Prv_ResetCopyRxDataStatus(dataRxpduId_u8);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2083                      dataReturnVal_en = BUFREQ_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2084  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2085                      /* The Trasmit_s Dsl Next State is pushed to DSL_STATE_WAITING_FOR_RXINDICATION ,since if ROE TxConfirmation arrives */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2086                      /* before RxIndication for this provide Rx Buffer call; DCM has to wait for the RxIndication of */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2087                      /* current provide Rx Buffer call */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2088  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2089                      Dcm_Prv_SetDslNextState(DSL_STATE_WAITING_FOR_RXINDICATION);
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2090                  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2091              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2092              else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2093              {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2094                   if(Dcm_DsldProtocol_pcst[Dcm_DsldGlobal_st.idxCurrentProtocol_u8].protocolid_u8 ==
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2095                    adrArrivedProt_pcst->protocolid_u8)
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2096                   {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2097                       /* ROE type1 request under processing and tester request comes. Reset S3 timer */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2098                       Dcm_Prv_ReloadS3Timer();
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2099                   }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2100               /* But ignore the request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2101               dataReturnVal_en = BUFREQ_E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2102              }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2103  
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2104          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2105          else
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2106          {
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2107              /* buffer is not big enough, ignore the request */
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2108              dataReturnVal_en = BUFREQ_E_OVFL;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2109          }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2110      }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2111      return dataReturnVal_en;
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2112  }
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2113  #endif
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2114  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2115  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\Dsd\Dcm_Dsd_Roe.c	  2116  #endif

	; Module end
