	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc11528a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds_TransferData.src BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_TransferData.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_TransferData.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	16216
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_TransferData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	165
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	182
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	182
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	165
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	165
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	165
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	182
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	165
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	165
	.byte	6,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	495
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	517
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	517
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	165
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	495
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	495
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	517
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	165
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	165
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	834
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	850
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	850
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	165
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	834
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	834
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	165
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	850
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	165
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	165
	.byte	6,0,8
	.word	187
	.byte	9
	.word	217
	.byte	9
	.word	232
	.byte	6,0,8
	.word	255
	.byte	9
	.word	287
	.byte	9
	.word	302
	.byte	6,0,8
	.word	325
	.byte	9
	.word	365
	.byte	9
	.word	379
	.byte	6,0,8
	.word	402
	.byte	9
	.word	435
	.byte	9
	.word	449
	.byte	9
	.word	470
	.byte	6,0,8
	.word	522
	.byte	9
	.word	553
	.byte	9
	.word	568
	.byte	6,0,8
	.word	591
	.byte	9
	.word	624
	.byte	9
	.word	639
	.byte	6,0,8
	.word	662
	.byte	9
	.word	703
	.byte	9
	.word	717
	.byte	6,0,8
	.word	740
	.byte	9
	.word	774
	.byte	9
	.word	788
	.byte	9
	.word	809
	.byte	6,0,8
	.word	855
	.byte	9
	.word	886
	.byte	9
	.word	901
	.byte	6,0,8
	.word	924
	.byte	9
	.word	957
	.byte	9
	.word	972
	.byte	6,0,8
	.word	995
	.byte	9
	.word	1036
	.byte	9
	.word	1050
	.byte	6,0,8
	.word	1073
	.byte	9
	.word	1107
	.byte	9
	.word	1121
	.byte	9
	.word	1142
	.byte	6,0,10,1,3
	.word	1386
	.byte	11
	.byte	'__codeptr',0,4,1,1
	.word	1388
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,5,76,25
	.word	1411
	.byte	11
	.byte	'uint8',0,5,81,25
	.word	165
	.byte	11
	.byte	'uint16',0,5,91,25
	.word	495
	.byte	11
	.byte	'uint32',0,5,106,24
	.word	834
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,5,111,30
	.word	1477
	.byte	11
	.byte	'boolean',0,5,127,25
	.word	165
	.byte	2
	.byte	'unsigned long int',0,4,7,11
	.byte	'uint16_least',0,5,147,1,25
	.word	1534
	.byte	11
	.byte	'StatusType',0,6,191,1,27
	.word	165
	.byte	11
	.byte	'Std_ReturnType',0,6,199,1,15
	.word	165
	.byte	12,6,206,1,9,8,13
	.byte	'vendorID',0
	.word	495
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	495
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	165
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	165
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	165
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	1621
	.byte	11
	.byte	'PduIdType',0,7,22,19
	.word	495
	.byte	11
	.byte	'PduLengthType',0,7,26,19
	.word	495
	.byte	12,8,71,9,8,13
	.byte	'SduDataPtr',0
	.word	182
	.byte	4,2,35,0,13
	.byte	'SduLength',0
	.word	495
	.byte	2,2,35,4,0,11
	.byte	'PduInfoType',0,8,75,3
	.word	1811
	.byte	14,8,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,8,118,3
	.word	1876
	.byte	11
	.byte	'NetworkHandleType',0,8,128,1,17
	.word	165
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	834
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	495
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	165
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	834
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	2023
	.byte	16,68
	.word	834
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	2103
	.byte	68,2,35,0,0,16,68
	.word	2112
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	2134
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	834
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	834
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2194
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2194
	.byte	18,1,1,3
	.word	2279
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2282
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	165
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2345
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	834
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	495
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	834
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	834
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	834
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	850
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	495
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	495
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2652
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2745
	.byte	20
	.byte	'void',0,3
	.word	2857
	.byte	21,1,1,22
	.word	165
	.byte	22
	.word	2863
	.byte	0,3
	.word	2868
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2882
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	834
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	834
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2194
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2194
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2194
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2194
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2917
	.byte	3
	.word	2917
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	3115
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	165
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	834
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2917
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3194
	.byte	3
	.word	3194
	.byte	23
	.word	3255
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2287
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3260
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	834
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2194
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	165
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3265
	.byte	3
	.word	2279
	.byte	23
	.word	3265
	.byte	3
	.word	3424
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3429
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	834
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	834
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	834
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	834
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	834
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3537
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	834
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	834
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	834
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3601
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	165
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	2143
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2917
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	165
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3699
	.byte	16,68
	.word	2112
	.byte	17,0,0,3
	.word	3699
	.byte	23
	.word	3825
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3830
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2287
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3537
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3601
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3601
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	495
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	834
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2194
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	165
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	165
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3835
	.byte	23
	.word	3835
	.byte	3
	.word	4085
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	4090
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	4113
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3601
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4200
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4223
	.byte	3
	.word	4223
	.byte	23
	.word	4303
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4308
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3601
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4313
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	834
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4412
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	165
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	834
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4507
	.byte	26
	.word	165
	.byte	1,1,3
	.word	4593
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4600
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	834
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4636
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4664
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4683
	.byte	3
	.word	4683
	.byte	23
	.word	4761
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4766
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4605
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4412
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2863
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	165
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4771
	.byte	3
	.word	4593
	.byte	23
	.word	4771
	.byte	3
	.word	4923
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4928
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4954
	.byte	23
	.word	.L6-.L3
	.byte	3
	.word	5154
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5159
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5164
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4954
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	495
	.byte	2,2,35,12,0,3
	.word	5191
	.byte	23
	.word	5284
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5289
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4933
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	165
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	495
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	165
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	165
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	165
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5294
	.byte	23
	.word	5294
	.byte	3
	.word	5474
	.byte	23
	.word	4771
	.byte	3
	.word	5484
	.byte	27
	.word	2587
	.byte	27
	.word	3537
	.byte	27
	.word	3434
	.byte	27
	.word	4095
	.byte	27
	.word	3601
	.byte	27
	.word	165
	.byte	27
	.word	4095
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	2023
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5494
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5499
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5504
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5509
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5514
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	3120
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2917
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	165
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5519
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2194
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	165
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5524
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2194
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	165
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	165
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	165
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5529
	.byte	3
	.word	834
	.byte	23
	.word	3265
	.byte	3
	.word	5985
	.byte	23
	.word	3835
	.byte	3
	.word	5995
	.byte	3
	.word	2917
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	834
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	834
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	834
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	834
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	2143
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	165
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	6010
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	834
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	165
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	834
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6287
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	165
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	165
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6423
	.byte	16,4
	.word	165
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6563
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6572
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	495
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6673
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	495
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6748
	.byte	23
	.word	6748
	.byte	3
	.word	6913
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6918
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6923
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6563
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	7023
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	165
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	165
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2863
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2863
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	495
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	165
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7169
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7256
	.byte	3
	.word	7169
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7354
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	165
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	495
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	495
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2863
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2863
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7256
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7359
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	834
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	495
	.byte	16,128,8
	.word	165
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7597
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	834
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	495
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	165
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	165
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	165
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	165
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7788
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	165
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	165
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	165
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	165
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	165
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	495
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	165
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	495
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	165
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	8129
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	495
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	165
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	834
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	495
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	165
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	165
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	495
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	165
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	165
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	165
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	165
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	165
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	165
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	165
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	165
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	165
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	165
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	165
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	165
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8361
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	495
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	495
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	165
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	165
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	165
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	165
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	165
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8865
	.byte	11
	.byte	'Dcm_ConfirmationStatusType',0,13,243,1,15
	.word	165
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	165
	.byte	11
	.byte	'Dcm_NegativeResponseCodeType',0,13,132,2,15
	.word	165
	.byte	11
	.byte	'Dcm_OpStatusType',0,13,134,2,15
	.word	165
	.byte	11
	.byte	'Dcm_ProtocolType',0,13,136,2,15
	.word	165
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	165
	.byte	11
	.byte	'Dcm_SecLevelType',0,13,142,2,15
	.word	165
	.byte	11
	.byte	'Dcm_SesCtrlType',0,13,144,2,15
	.word	165
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	165
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	165
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	165
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7608
	.byte	16,128,8
	.word	165
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7608
	.byte	11
	.byte	'Rte_ModeType_DcmDiagnosticSessionControl',0,14,37,15
	.word	165
	.byte	11
	.byte	'Dcm_MsgItemType',0,15,182,2,15
	.word	165
	.byte	3
	.word	165
	.byte	11
	.byte	'Dcm_MsgType',0,15,188,2,57
	.word	9934
	.byte	11
	.byte	'Dcm_MsgLenType',0,15,197,2,16
	.word	834
	.byte	12,15,206,2,9,4,13
	.byte	'reqType',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'suppressPosResponse',0
	.word	165
	.byte	1,2,35,1,13
	.byte	'sourceofRequest',0
	.word	165
	.byte	1,2,35,2,0,11
	.byte	'Dcm_MsgAddInfoType',0,15,219,2,2
	.word	9984
	.byte	11
	.byte	'Dcm_IdContextType',0,15,225,2,15
	.word	165
	.byte	12,15,238,5,9,32,13
	.byte	'tx_buffer_pa',0
	.word	9939
	.byte	4,2,35,0,13
	.byte	'rx_mainBuffer_pa',0
	.word	9939
	.byte	4,2,35,4,13
	.byte	'tx_buffer_size_u32',0
	.word	834
	.byte	4,2,35,8,13
	.byte	'rx_buffer_size_u32',0
	.word	834
	.byte	4,2,35,12,13
	.byte	'dataP2TmrAdjust',0
	.word	834
	.byte	4,2,35,16,13
	.byte	'dataP2StarTmrAdjust',0
	.word	834
	.byte	4,2,35,20,13
	.byte	'protocolid_u8',0
	.word	165
	.byte	1,2,35,24,13
	.byte	'sid_tableid_u8',0
	.word	165
	.byte	1,2,35,25,13
	.byte	'premption_level_u8',0
	.word	165
	.byte	1,2,35,26,13
	.byte	'pduinfo_idx_u8',0
	.word	165
	.byte	1,2,35,27,13
	.byte	'nrc21_b',0
	.word	165
	.byte	1,2,35,28,13
	.byte	'sendRespPendTransToBoot',0
	.word	165
	.byte	1,2,35,29,0,11
	.byte	'Dcm_Dsld_protocol_tableType',0,15,143,6,2
	.word	10117
	.byte	3
	.word	165
	.byte	21,1,1,22
	.word	165
	.byte	22
	.word	495
	.byte	22
	.word	495
	.byte	22
	.word	165
	.byte	0,3
	.word	10473
	.byte	11
	.byte	'Dcm_ConfirmationApiType',0,15,145,6,16
	.word	10497
	.byte	3
	.word	165
	.byte	28
	.word	165
	.byte	1,1,22
	.word	10535
	.byte	22
	.word	165
	.byte	22
	.word	165
	.byte	0,3
	.word	10540
	.byte	12,15,240,2,9,28,13
	.byte	'resData',0
	.word	9939
	.byte	4,2,35,0,13
	.byte	'reqData',0
	.word	9939
	.byte	4,2,35,4,13
	.byte	'msgAddInfo',0
	.word	9984
	.byte	4,2,35,8,13
	.byte	'resDataLen',0
	.word	834
	.byte	4,2,35,12,13
	.byte	'reqDataLen',0
	.word	834
	.byte	4,2,35,16,13
	.byte	'resMaxDataLen',0
	.word	834
	.byte	4,2,35,20,13
	.byte	'idContext',0
	.word	165
	.byte	1,2,35,24,13
	.byte	'dcmRxPduId',0
	.word	495
	.byte	2,2,35,26,0,3
	.word	10568
	.byte	28
	.word	165
	.byte	1,1,22
	.word	165
	.byte	22
	.word	10731
	.byte	22
	.word	10535
	.byte	0,3
	.word	10736
	.byte	12,15,158,6,9,20,13
	.byte	'allowed_session_b32',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'adrUserSubServiceModeRule_pfct',0
	.word	10563
	.byte	4,2,35,8,13
	.byte	'SubFunc_fp',0
	.word	10759
	.byte	4,2,35,12,13
	.byte	'subservice_id_u8',0
	.word	165
	.byte	1,2,35,16,13
	.byte	'isDspRDTCSubFnc_b',0
	.word	165
	.byte	1,2,35,17,0,11
	.byte	'Dcm_Dsld_SubServiceType',0,15,169,6,2
	.word	10764
	.byte	23
	.word	10764
	.byte	3
	.word	10976
	.byte	28
	.word	165
	.byte	1,1,22
	.word	10535
	.byte	22
	.word	165
	.byte	0,3
	.word	10986
	.byte	12,15,186,6,9,36,13
	.byte	'allowed_session_b32',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'service_handler_fp',0
	.word	10759
	.byte	4,2,35,8,13
	.byte	'Service_init_fp',0
	.word	2282
	.byte	4,2,35,12,13
	.byte	'sid_u8',0
	.word	165
	.byte	1,2,35,16,13
	.byte	'subfunction_exist_b',0
	.word	165
	.byte	1,2,35,17,13
	.byte	'servicelocator_b',0
	.word	165
	.byte	1,2,35,18,13
	.byte	'ptr_subservice_table_pcs',0
	.word	10981
	.byte	4,2,35,20,13
	.byte	'num_sf_u8',0
	.word	165
	.byte	1,2,35,24,13
	.byte	'adrUserServiceModeRule_pfct',0
	.word	11004
	.byte	4,2,35,28,13
	.byte	'Dcm_ConfirmationService',0
	.word	10502
	.byte	4,2,35,32,0,11
	.byte	'Dcm_Dsld_ServiceType',0,15,204,6,3
	.word	11009
	.byte	3
	.word	10473
	.byte	23
	.word	11009
	.byte	3
	.word	11357
	.byte	12,15,218,6,9,8,13
	.byte	'ptr_service_table_pcs',0
	.word	11362
	.byte	4,2,35,0,13
	.byte	'num_services_u8',0
	.word	165
	.byte	1,2,35,4,13
	.byte	'nrc_sessnot_supported_u8',0
	.word	165
	.byte	1,2,35,5,13
	.byte	'cdtc_index_u8',0
	.word	165
	.byte	1,2,35,6,0,11
	.byte	'Dcm_Dsld_sid_tableType',0,15,224,6,3
	.word	11367
	.byte	12,15,238,6,9,14,13
	.byte	'protocol_num_u8',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'txpduid_num_u8',0
	.word	495
	.byte	2,2,35,2,13
	.byte	'roetype2_txpdu_u8',0
	.word	495
	.byte	2,2,35,4,13
	.byte	'rdpitype2_txpdu_u8',0
	.word	495
	.byte	2,2,35,6,13
	.byte	'testaddr_u16',0
	.word	495
	.byte	2,2,35,8,13
	.byte	'channel_idx_u8',0
	.word	165
	.byte	1,2,35,10,13
	.byte	'ConnectionIndex_u8',0
	.word	165
	.byte	1,2,35,11,13
	.byte	'NumberOfTxpdu_u8',0
	.word	165
	.byte	1,2,35,12,0,11
	.byte	'Dcm_Dsld_connType',0,15,248,6,3
	.word	11519
	.byte	14,15,146,7,9,4,15
	.byte	'DCM_DSLD_NO_COM_MODE',0,0,15
	.byte	'DCM_DSLD_SILENT_COM_MODE',0,1,15
	.byte	'DCM_DSLD_FULL_COM_MODE',0,2,0,11
	.byte	'Dcm_Dsld_commodeType',0,15,151,7,2
	.word	11757
	.byte	14,16,200,1,9,4,15
	.byte	'USE_ASYNCH_CLIENT_SERVER',0,0,15
	.byte	'USE_ASYNCH_FNC',0,1,0,11
	.byte	'DcmDspSecurityUsePort',0,16,204,1,2
	.word	11869
	.byte	14,17,22,9,4,15
	.byte	'DCM_NO_BOOT',0,0,15
	.byte	'DCM_OEM_BOOT',0,1,15
	.byte	'DCM_SYS_BOOT',0,2,0,11
	.byte	'Dcm_SessionForBootType',0,17,27,2
	.word	11951
	.byte	14,18,192,3,9,4,15
	.byte	'DCM_READ_OK',0,0,15
	.byte	'DCM_READ_FAILED',0,1,15
	.byte	'DCM_READ_PENDING',0,2,15
	.byte	'DCM_READ_FORCE_RCRRP',0,3,15
	.byte	'DCM_READ_NOT_AVAILABLE',0,4,0,11
	.byte	'Dcm_ReadMemoryRet_t',0,18,199,3,3
	.word	12032
	.byte	14,19,21,9,4,15
	.byte	'DSD_IDLE',0,0,15
	.byte	'DSD_VERIFY_DIAGNOSTIC_DATA',0,1,15
	.byte	'DSD_CALL_SERVICE',0,2,15
	.byte	'DSD_WAITFORTXCONF',0,3,15
	.byte	'DSD_SENDTXCONF_APPL',0,4,0,11
	.byte	'Dcm_DsdStatesType_ten',0,19,28,2
	.word	12167
	.byte	14,20,215,2,9,4,15
	.byte	'DCM_DSLD_POS_RESPONSE',0,0,15
	.byte	'DCM_DSLD_NEG_RESPONSE',0,1,0,11
	.byte	'Dcm_DsldResponseType_ten',0,20,219,2,2
	.word	12304
	.byte	14,21,148,1,9,4,15
	.byte	'DCM_ROE_CLEARED',0,0,15
	.byte	'DCM_ROE_STOPPED',0,1,15
	.byte	'DCM_ROE_STARTED',0,2,0,11
	.byte	'Dcm_DspRoeEventState_ten',0,21,153,1,2
	.word	12393
	.byte	14,21,231,1,9,4,15
	.byte	'DCM_CONTROLMASK_NO',0,0,15
	.byte	'DCM_CONTROLMASK_INTERNAL',0,1,15
	.byte	'DCM_CONTROLMASK_EXTERNAL',0,2,0,11
	.byte	'Dcm_Dsp_IocbiCtrlMask_ten',0,21,236,1,2
	.word	12488
	.byte	14,18,203,1,9,4,15
	.byte	'DCM_SUPPORT_READ',0,0,15
	.byte	'DCM_SUPPORT_WRITE',0,1,15
	.byte	'DCM_SUPPORT_IOCONTROL',0,2,0,28
	.word	165
	.byte	1,1,22
	.word	10535
	.byte	22
	.word	495
	.byte	22
	.word	12605
	.byte	0,3
	.word	12675
	.byte	12,21,239,1,9,44,13
	.byte	'dataAllowedSessRead_u32',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'dataAllowedSecRead_u32',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'adrUserReadModeRule_pfct',0
	.word	12698
	.byte	4,2,35,8,13
	.byte	'dataAllowedSessWrite_u32',0
	.word	834
	.byte	4,2,35,12,13
	.byte	'dataAllowedSecWrite_u32',0
	.word	834
	.byte	4,2,35,16,13
	.byte	'adrUserWriteModeRule_pfct',0
	.word	12698
	.byte	4,2,35,20,13
	.byte	'dataSessBitMask_u32',0
	.word	834
	.byte	4,2,35,24,13
	.byte	'dataSecBitMask_u32',0
	.word	834
	.byte	4,2,35,28,13
	.byte	'adrUserControlModeRule_pfct',0
	.word	12698
	.byte	4,2,35,32,13
	.byte	'dataCtrlMask_en',0
	.word	12488
	.byte	4,2,35,36,13
	.byte	'dataCtrlMaskSize_u8',0
	.word	165
	.byte	1,2,35,40,13
	.byte	'dataIocbirst_b',0
	.word	165
	.byte	1,2,35,41,13
	.byte	'statusmaskIOControl_u8',0
	.word	165
	.byte	1,2,35,42,0,11
	.byte	'Dcm_ExtendedDIDConfig_tst',0,21,141,2,3
	.word	12703
	.byte	12,21,200,2,9,4,13
	.byte	'posnSigBit_u16',0
	.word	495
	.byte	2,2,35,0,13
	.byte	'idxDcmDspDatainfo_u16',0
	.word	495
	.byte	2,2,35,2,0,11
	.byte	'Dcm_SignalDIDConfig_tst',0,21,204,2,3
	.word	13150
	.byte	11
	.byte	'Rte_TaskRefType',0,22,184,1,32
	.word	4095
	.byte	11
	.byte	'Rte_EventRefType',0,22,185,1,32
	.word	165
	.byte	11
	.byte	'Rte_EventType',0,22,186,1,32
	.word	834
	.byte	11
	.byte	'Rte_REActCounterType',0,22,252,1,15
	.word	165
	.byte	3
	.word	165
	.byte	11
	.byte	'Rte_REActCounterRefType',0,22,253,1,58
	.word	13349
	.byte	12,22,255,1,9,8,13
	.byte	'task',0
	.word	13245
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	13354
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,22,130,2,3
	.word	13387
	.byte	23
	.word	3835
	.byte	3
	.word	13451
	.byte	3
	.word	165
	.byte	23
	.word	13387
	.byte	3
	.word	13466
	.byte	11
	.byte	'Rte_REContainerRefType',0,22,132,2,60
	.word	13471
	.byte	11
	.byte	'Rte_MSICounterType',0,22,149,2,16
	.word	495
	.byte	3
	.word	495
	.byte	11
	.byte	'Rte_MSICounterRefType',0,22,150,2,56
	.word	13536
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,22,152,2,17
	.word	165
	.byte	3
	.word	165
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,22,153,2,60
	.word	13604
	.byte	12,22,163,2,9,24,13
	.byte	'counter',0
	.word	13541
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	165
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	13609
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	13245
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	13354
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	165
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	495
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,22,172,2,3
	.word	13644
	.byte	3
	.word	495
	.byte	3
	.word	165
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,22,179,2,16
	.word	165
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,22,180,2,16
	.word	165
	.byte	12,22,182,2,9,4,13
	.byte	'pending',0
	.word	165
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	165
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	165
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,22,186,2,3
	.word	13862
	.byte	3
	.word	13862
	.byte	12,22,226,2,9,12,13
	.byte	'event_id',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	13954
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	834
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,22,230,2,3
	.word	13959
	.byte	23
	.word	13959
	.byte	3
	.word	14048
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,22,232,2,66
	.word	14053
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,22,234,2,29
	.word	13387
	.byte	19
	.byte	'Rte_QTaskType',0,22,243,2,16,28,13
	.byte	'cmn',0
	.word	7359
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13245
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,22,246,2,3
	.word	14130
	.byte	19
	.byte	'Rte_QREType',0,22,250,2,16,28,13
	.byte	'cmn',0
	.word	7359
	.byte	24,2,35,0,13
	.byte	're',0
	.word	13476
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,22,253,2,3
	.word	14201
	.byte	23
	.word	13387
	.byte	3
	.word	14266
	.byte	19
	.byte	'Rte_QWWPType',0,22,129,3,16,28,13
	.byte	'cmn',0
	.word	7359
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	14058
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,22,132,3,3
	.word	14276
	.byte	23
	.word	13959
	.byte	3
	.word	14344
	.byte	19
	.byte	'Rte_QEvType',0,22,136,3,16,36,13
	.byte	'cmn',0
	.word	7359
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13245
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	165
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	13354
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,22,141,3,3
	.word	14354
	.byte	19
	.byte	'Rte_QMSIType',0,22,145,3,16,48,13
	.byte	'cmn',0
	.word	7359
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13245
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	165
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	13354
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	13541
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	13609
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	495
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,22,153,3,3
	.word	14449
	.byte	11
	.byte	'rba_BswSrv_uint64',0,23,66,28
	.word	1477
	.byte	14,24,31,9,4,15
	.byte	'DCM_RESET_NO_BOOT',0,0,15
	.byte	'DCM_RESET_OEM_BOOT',0,1,15
	.byte	'DCM_RESET_SYS_BOOT',0,2,15
	.byte	'DCM_RESET_DRIVE_TO_DRIVE',0,3,0,11
	.byte	'Dcm_ResetForBootType',0,24,37,2
	.word	14630
	.byte	14,25,205,1,9,4,15
	.byte	'DCM_IOCBI_IDLESTATE',0,0,15
	.byte	'DCM_IOCBI_FCS_ACTIVE',0,1,15
	.byte	'DCM_IOCBI_FCS_PENDING',0,2,15
	.byte	'DCM_IOCBI_RTD_ACTIVE',0,3,15
	.byte	'DCM_IOCBI_RTD_PENDING',0,4,15
	.byte	'DCM_IOCBI_STA_ACTIVE',0,5,15
	.byte	'DCM_IOCBI_STA_PENDING',0,6,15
	.byte	'DCM_IOCBI_RCE_ACTIVE',0,7,15
	.byte	'DCM_IOCBI_RCE_PENDING',0,8,0,11
	.byte	'Dcm_Dsp_IocbiDidStatus_ten',0,25,216,1,4
	.word	14754
	.byte	12,26,26,9,8,13
	.byte	'posnStart_u16',0
	.word	495
	.byte	2,2,35,0,13
	.byte	'dataLength_u16',0
	.word	495
	.byte	2,2,35,2,13
	.byte	'idxSignal_u16',0
	.word	495
	.byte	2,2,35,4,13
	.byte	'dataEndianness_u8',0
	.word	165
	.byte	1,2,35,6,13
	.byte	'dataType_u8',0
	.word	165
	.byte	1,2,35,7,0,11
	.byte	'Dcm_DspRoutineSignalInfo_tst',0,26,33,3
	.word	15007
	.byte	28
	.word	165
	.byte	1,1,22
	.word	10535
	.byte	22
	.word	495
	.byte	22
	.word	165
	.byte	0,3
	.word	15168
	.byte	23
	.word	15007
	.byte	3
	.word	15196
	.byte	23
	.word	15201
	.byte	23
	.word	15201
	.byte	23
	.word	15201
	.byte	23
	.word	15201
	.byte	23
	.word	15201
	.byte	23
	.word	15201
	.byte	12,26,35,9,68,13
	.byte	'dataSecBitMask_u32',0
	.word	834
	.byte	4,2,35,0,13
	.byte	'dataSessBitMask_u32',0
	.word	834
	.byte	4,2,35,4,13
	.byte	'adrUserRidModeRule_pfct',0
	.word	15191
	.byte	4,2,35,8,13
	.byte	'adrStartInSignalRef_cpcst',0
	.word	15206
	.byte	4,2,35,12,13
	.byte	'adrStopInSignalRef_cpcst',0
	.word	15211
	.byte	4,2,35,16,13
	.byte	'adrReqRslInSignalRef_cpcst',0
	.word	15216
	.byte	4,2,35,20,13
	.byte	'adrStartOutSignalRef_cpcst',0
	.word	15221
	.byte	4,2,35,24,13
	.byte	'adrStopOutSignalRef_cpcst',0
	.word	15226
	.byte	4,2,35,28,13
	.byte	'adrReqRsltOutSignalRef_cpcst',0
	.word	15231
	.byte	4,2,35,32,13
	.byte	'dataCtrlOptRecSizeStart_u16',0
	.word	495
	.byte	2,2,35,36,13
	.byte	'dataCtrlOptRecSizeStop_u16',0
	.word	495
	.byte	2,2,35,38,13
	.byte	'dataCtrlOptRecSizeReqRslt_u16',0
	.word	495
	.byte	2,2,35,40,13
	.byte	'dataStsOptRecSizeStart_u16',0
	.word	495
	.byte	2,2,35,42,13
	.byte	'dataStsOptRecSizeStop_u16',0
	.word	495
	.byte	2,2,35,44,13
	.byte	'dataStsOptRecSizeReqRslt_u16',0
	.word	495
	.byte	2,2,35,46,13
	.byte	'dataMinCtrlOptRecSizeStart_u16',0
	.word	495
	.byte	2,2,35,48,13
	.byte	'dataMinCtrlOptRecSizeStop_u16',0
	.word	495
	.byte	2,2,35,50,13
	.byte	'dataMinCtrlOptRecSizeReqRslt_u16',0
	.word	495
	.byte	2,2,35,52,13
	.byte	'dataMinStsOptRecSizeStart_u16',0
	.word	495
	.byte	2,2,35,54,13
	.byte	'dataMinStsOptRecSizeStop_u16',0
	.word	495
	.byte	2,2,35,56,13
	.byte	'dataMinStsOptRecSizeReqRslt_u16',0
	.word	495
	.byte	2,2,35,58,13
	.byte	'nrStartInSignals_u8',0
	.word	165
	.byte	1,2,35,60,13
	.byte	'nrStopInSignals_u8',0
	.word	165
	.byte	1,2,35,61,13
	.byte	'nrReqRslInSignals_u8',0
	.word	165
	.byte	1,2,35,62,13
	.byte	'nrStartOutSignals_u8',0
	.word	165
	.byte	1,2,35,63,13
	.byte	'nrStopOutSignals_u8',0
	.word	165
	.byte	1,2,35,64,13
	.byte	'nrReqRsltOutSignals_u8',0
	.word	165
	.byte	1,2,35,65,0,11
	.byte	'Dcm_DspRoutineInfoType_tst',0,26,69,3
	.word	15236
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3,8
	.byte	58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,4
	.byte	1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0,54
	.byte	15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0,73
	.byte	19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0,26
	.byte	21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_TransferData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dcm_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmCore_DslDsd_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Seca_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Dsc_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Uds_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmCore\\DcmCoreDslDsd\\DcmCore_DslDsd_Prot.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Uds_Prot.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Er_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Iocbi_Prot.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rc_Prot.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     1  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     2  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     3  #include "DcmDspUds_TransferData_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     4  #include "DcmCore_DslDsd_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     5  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     6  #if((DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF) && (DCM_CFG_DSP_TRANSFERDATA_ENABLED!= DCM_CFG_OFF))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     7  #include "DcmDspUds_TransferData_Priv.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     8  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	     9  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    10  VAR(Dcm_DataTransfer_tst,AUTOMATIC) Dcm_DataTransfer_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    11  static VAR(Dcm_DspTransferDataStates_ten,       DCM_VAR  ) s_stTransferDataState_en; /*State machine control variable for TransferData service*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    12  VAR (Dcm_TransferData_tst,DCM_VAR) Dcm_TransferData_st;     /* TransferData structure to store all the required parameters */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    13  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    14  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    15  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    16  #define DCM_START_SEC_VAR_CLEARED_32 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    17  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    18  static VAR(uint32,DCM_VAR) s_dataCurrentBlockSize_u32; /* The variable to store the size of the block requested */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    19  #define DCM_STOP_SEC_VAR_CLEARED_32 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    20  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    21  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    22  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    23  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    24  static VAR(Dcm_OpStatusType,  DCM_VAR) s_stTransferOpstatus_u8;     /* opstatus for handling transfer Data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    25  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    26  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    27  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    28  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    29  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    30  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    31  static FUNC(uint32,DCM_CODE) Dcm_GetLastBlockSize(void);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    32  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    33  static FUNC(Std_ReturnType,AUTOMATIC)Dcm_CheckNRCfromApplication(VAR(uint32,AUTOMATIC) dataLengthReceived_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    34                                                                   P2VAR (Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegResponseCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    35  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    36   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    37   * Dcm_Dsp_TransferDataIni : Initialisation function for TransferData (0x36) Service
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    38   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    39   * \param           None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    40   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    41   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    42   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    43   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    44   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    45   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    46  FUNC(void,DCM_CODE) Dcm_Dsp_TransferDataIni(void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    47  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    48      /* Canceling the read operation if INI of the service is called */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    49      if((DCM_PENDING == s_stTransferOpstatus_u8 ) && (Dcm_DataTransfer_st.isUploadStarted_b != FALSE))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    50      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    51          /* canceling the read operation if INI is called due to general reject behaviour */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    52          (void)(DcmAppl_Dcm_ReadMemory(DCM_CANCEL,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    53                                        Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    54                                        Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    55                                        s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    56                                        NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    57                                        NULL_PTR));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    58      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    59  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    60      else if((DCM_PENDING == s_stTransferOpstatus_u8 ) && (Dcm_DataTransfer_st.isDownloadStarted_b != FALSE))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    61      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    62          /* canceling the read operation if INI is called due to general reject behaviour */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    63          (void)(DcmAppl_Dcm_WriteMemory(DCM_CANCEL,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    64                                        Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    65                                        Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    66                                        s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    67                                        NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    68                                        NULL_PTR));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    69      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    70      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    71      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    72          /* Dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    73      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    74  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    75      /* Initializing the block sequence counter */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    76      Dcm_TransferData_st.cntCurrentBlockCount = 0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    77      Dcm_TransferData_st.dataTransferedDataSize_u32 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    78      /* Initializing the opstatus to INITIAL */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    79      s_stTransferOpstatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    80      /* Initializing the state variable of Transfer data to IDLE state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    81      s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    82      /* Resetting the complete context of sequence */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    83      Dcm_DspDeactivateRequestUploadDownloadPermission();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    84  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    85  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    86  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    87   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    88   * Dcm_CheckNrcForTransferData : This funtion is for doing the NRC checks for TransferData service
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    89   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    90   * \param           pMsgContext(in) : The service message context
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    91   *                  dataNegResponseCode_u8(out) : The ErrorCode to be updated by the function if any
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    92   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    93   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    94   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    95   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    96   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    97  /* Function for checking the NRC */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    98  static FUNC(void,DCM_CODE) Dcm_CheckNrcForTransferData(P2CONST(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	    99                                                                   P2VAR (Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegResponseCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   100  static FUNC(void,DCM_CODE) Dcm_CheckNrcForTransferData(P2CONST(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   101                                                                   P2VAR (Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegResponseCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   102  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   103      VAR(uint8,AUTOMATIC) dataReceivedBlockSequenceNr_u8;    /* Block sequence number from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   104      VAR(uint32,AUTOMATIC) dataLengthReceived_u32;    /* Received block size in the request apart from the Block Sequence number */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   105  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   106  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   107      VAR(uint32,AUTOMATIC) lastDataBlockSize_u32; /* variable to store the last block size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   108  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   109  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   110  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   111  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   112      /* Storing the block sequence number in the request locally */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   113      dataReceivedBlockSequenceNr_u8 = pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   114      dataLengthReceived_u32 = pMsgContext->reqDataLen-1uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   115  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   116  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   117      lastDataBlockSize_u32 = Dcm_GetLastBlockSize();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   118  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   119  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   120  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   121      /* Minimum length check if Previous request was RequestUpload - NRC 0X13*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   122      if((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(pMsgContext->reqDataLen < DCM_TRANSFERDATAUPLOAD_MIN_LEN))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   123      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   124          *dataNegResponseCode_u8 = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   125      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   126      /* Minimum length check if Previous request was RequestDownload - NRC 0X13*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   127      else if((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)&&(pMsgContext->reqDataLen < DCM_TRANSFERDATADOWNLOAD_MIN_LEN))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   128      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   129          *dataNegResponseCode_u8 = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   130      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   131      /* RequestSequence check if there was no Previous request of RequestUpload/RequestDownlaod - NRC 0X24*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   132      /* If the requested memory size from requestUpload/requestDownload service is already uploaded/downloaded to/from the client and the sequence number is not repeated -  NRC 0x24 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   133      else if(((Dcm_DataTransfer_st.isUploadStarted_b == FALSE)&&(Dcm_DataTransfer_st.isDownloadStarted_b == FALSE)) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   134      (((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)||(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE))&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   135              (Dcm_DataTransfer_st.compressionMethod_u8 == 0x00)&&(Dcm_TransferData_st.dataTransferedDataSize_u32 == Dcm_DataTransfer_st.dataMemorySize_u32) && (dataReceivedBlockSequenceNr_u8 !=  Dcm_TransferData_st.cntCurrentBlockCount)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   136      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   137          *dataNegResponseCode_u8 = DCM_E_REQUESTSEQUENCEERROR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   138      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   139      /* application can use the below function to update the NRC 0x24 and NRC 0x71 in case the data is compressed. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   140      else if( ((Dcm_CheckNRCfromApplication(dataLengthReceived_u32,dataNegResponseCode_u8))!= E_OK) && (Dcm_DataTransfer_st.compressionMethod_u8 != 0x00) )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   141      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   142          /* do not do anything as the NRC is set by the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   143      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   144  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   145      /* This NRC check is for the total memory size that is requested to be transfered. This 0x71 check is done only for the last block of data.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   146       * For the blocks other than the last block, block size is checked against NRC 0x31.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   147       * 1. If its is a download data request
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   148       * 2. if the request is repeated for the last block
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   149       * 3. if it is a fresh request for the last block
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   150       * check if the datalength to be transfered is consistent with the memory size*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   151      else if((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   152              (Dcm_DataTransfer_st.compressionMethod_u8 == 0x00) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   153              (((Dcm_TransferData_st.dataTransferedDataSize_u32 == Dcm_DataTransfer_st.dataMemorySize_u32)&&(dataReceivedBlockSequenceNr_u8 ==  Dcm_TransferData_st.cntCurrentBlockCount)) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   154               ((Dcm_TransferData_st.dataTransferedDataSize_u32 == (Dcm_DataTransfer_st.dataMemorySize_u32 - lastDataBlockSize_u32)) && (dataReceivedBlockSequenceNr_u8 == (Dcm_TransferData_st.cntCurrentBlockCount+1u)))) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   155              (dataLengthReceived_u32!=lastDataBlockSize_u32))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   156  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   157      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   158          *dataNegResponseCode_u8 = DCM_E_TRANSFERDATASUSPENDED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   159      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   160  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   161      /* application can use the below function to update the 0x71 in case the data is compressed and the data is flexible. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   162      else if( ((Dcm_CheckNRCfromApplication(dataLengthReceived_u32,dataNegResponseCode_u8))!= E_OK) && (Dcm_DataTransfer_st.compressionMethod_u8 == 0x00) )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   163      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   164          /* do not do anything as the NRC is set by the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   165      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   166  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   167  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   168      /* Checking if the TransferData begins with Block sequence count 0x01 otherwise NRC 0x73 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   169      else if((Dcm_TransferData_st.dataTransferedDataSize_u32 == 0u)&&(dataReceivedBlockSequenceNr_u8!=1u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   170      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   171          *dataNegResponseCode_u8 = DCM_E_WRONGBLOCKSEQUENCECOUNTER;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   172      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   173      /* Checking if the block sequence count rolls over to zero after reaching oxff otherwise NRC 0x73 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   174      else if((Dcm_TransferData_st.cntCurrentBlockCount == 0xFFu)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   175              (dataReceivedBlockSequenceNr_u8!=0x00u) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   176              (dataReceivedBlockSequenceNr_u8!=0xFFu))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   177      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   178          /* When the block sequence counter reaches 0xff */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   179          *dataNegResponseCode_u8 = DCM_E_WRONGBLOCKSEQUENCECOUNTER;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   180      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   181      /* Block sequence check - checking if the block is repeated or if it is the next block - NRC 0X73 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   182      else if((Dcm_TransferData_st.cntCurrentBlockCount != 0xffu)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   183              (dataReceivedBlockSequenceNr_u8 != Dcm_TransferData_st.cntCurrentBlockCount)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   184              (dataReceivedBlockSequenceNr_u8 != (Dcm_TransferData_st.cntCurrentBlockCount+1u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   185      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   186          /* When the block sequence is less than 0xff */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   187          *dataNegResponseCode_u8 = DCM_E_WRONGBLOCKSEQUENCECOUNTER;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   188      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   189  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   190      else if((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   191              (Dcm_DataTransfer_st.compressionMethod_u8 == 0x00)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   192              (Dcm_TransferData_st.dataTransferedDataSize_u32 != (Dcm_DataTransfer_st.dataMemorySize_u32 - lastDataBlockSize_u32))&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   193              (Dcm_TransferData_st.dataTransferedDataSize_u32 != Dcm_DataTransfer_st.dataMemorySize_u32)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   194              (dataLengthReceived_u32!= (Dcm_DataTransfer_st.dataMaxBlockLength_u32 - 2u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   195      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   196          /* The blocks except the last blocks, if have the size less than the MaxBlockSize */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   197          *dataNegResponseCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   198      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   199  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   200      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   201      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   202          /* NRC check is passed */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   203          *dataNegResponseCode_u8 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   204      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   205  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   206  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   207  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   208   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   209   * Dcm_DcmTransferData : TransferData (0x36) Service
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   210   * The TransferData service is used by the client to transfer data either from the client to the server (download)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   211   * or from the server to the client (upload).The service currently supports onlu upload of data
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   212   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   213   * \param           pMsgContext: Pointer to message structure
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   214   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   215   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   216   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   217   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   218   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   219   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   220  FUNC(Std_ReturnType,DCM_CODE) Dcm_DcmTransferData(VAR(Dcm_SrvOpStatusType,AUTOMATIC) OpStatus,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   221                                                    P2VAR(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   222                                                    P2VAR(Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   223  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   224      VAR(Dcm_TrasferDirection_en, AUTOMATIC) dataTransferDirection_ten = DCM_TRANSFER_NOT_AVAILABLE; /* Variable to indicate the direction of data transfer i.e. either Upload or DOwnload */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   225      VAR(Dcm_ReadMemoryRet_t,AUTOMATIC) dataReadMemRetValue_en = DCM_READ_NOT_AVAILABLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   226      VAR(Dcm_WriteMemoryRet_t,AUTOMATIC)dataWriteMemRetValue_en = DCM_WRITE_NOT_AVAILABLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   227      VAR(Std_ReturnType,AUTOMATIC) dataReturnValue_u8;    /* return value from the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   228      VAR(Std_ReturnType,AUTOMATIC) dataServRetValue_u8;    /* return value from the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   229      VAR(uint8,AUTOMATIC) dataReceivedBlockSequenceNr_u8;    /* Block sequence number from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   230  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   231      /* Initializing the local variables */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   232      *dataNegRespCode_u8 = 0u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   233      /*Opstatus possed by the central statemachine is unused currently, opstatus variables related to service needs to be
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   234       * removed and the one passed by the central statemachine needs to be used, this would be taken care with task XXXXX*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   235  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   236      /* If OpStatus is set to DCM_CANCEL then call the ini function for resetting */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   237      if (OpStatus == DCM_CANCEL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   238      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   239          /* Call the Ini Function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   240          Dcm_Dsp_TransferDataIni();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   241          /* Set the return value to E_OK as the Ini function will always be serviced  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   242          dataServRetValue_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   243      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   244      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   245      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   246          /* Storing the block sequence number in the request locally */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   247          dataReceivedBlockSequenceNr_u8 = pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   248          dataServRetValue_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   249  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   250          if(s_stTransferDataState_en == DCM_DSP_TRANSFERDATA_IDLE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   251          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   252              /* setting the state to Error state before doing all the NRC checks */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   253              s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_ERROR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   254              /* call the function to do the NRC checks */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   255              Dcm_CheckNrcForTransferData(pMsgContext,dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   256              if(*dataNegRespCode_u8 == 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   257              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   258                  /* increment the address and the block size only if it is the next block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   259                  if(((Dcm_TransferData_st.cntCurrentBlockCount == 0xffu) && (dataReceivedBlockSequenceNr_u8==0x00u)) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   260                          ((Dcm_TransferData_st.cntCurrentBlockCount != 0xffu)&&(dataReceivedBlockSequenceNr_u8 == (Dcm_TransferData_st.cntCurrentBlockCount+1u))))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   261                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   262      /* update the address for every new block of data transfer, in case the compression is OFF, else pass the base address always */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   263                      /* incrementing the address */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   264                      /* Updating the memory address to read the requested block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   265                      /* if it is not the 1st block, increment the address. The base address has to be sent for the first block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   266                     if((Dcm_DataTransfer_st.compressionMethod_u8 == 0x00)&&(Dcm_TransferData_st.dataTransferedDataSize_u32!=0u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   267                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   268                          /* The memory address is incremented in terms of MaxBlockSize */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   269                          Dcm_DataTransfer_st.dataMemoryAddress_u32 = Dcm_DataTransfer_st.dataMemoryAddress_u32 + (s_dataCurrentBlockSize_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   270                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   271      #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   272                      /* updatint the block size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   273                      /* Checking if the block expected is not the last block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   274                     if(Dcm_DataTransfer_st.compressionMethod_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   275                     {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   276                         if(Dcm_TransferData_st.dataTransferedDataSize_u32 < (Dcm_DataTransfer_st.dataMemorySize_u32 - Dcm_GetLastBlockSize()))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   277                         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   278                             /* update the size with the maxLength possible */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   279                             s_dataCurrentBlockSize_u32 = Dcm_DataTransfer_st.dataMaxBlockLength_u32-2u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   280                         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   281                         /* Checking if the block expected is the last block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   282                         else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   283                         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   284                             /* Update the remaining size as this is the last block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   285                             s_dataCurrentBlockSize_u32 = Dcm_GetLastBlockSize();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   286                         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   287                     }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   288                     else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   289                     {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   290                         if(Dcm_DataTransfer_st.isUploadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   291                         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   292                             /* In case of upload, always give application the Maxblocklen-2(SID,BSN), so that the application can modify the number of bytes to be transfered */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   293                             s_dataCurrentBlockSize_u32 = Dcm_DataTransfer_st.dataMaxBlockLength_u32-2u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   294                         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   295                         else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   296                         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   297                             /* In case of download, always give application the request length that is recieved */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   298                             s_dataCurrentBlockSize_u32 = pMsgContext->reqDataLen-1u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   299                         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   300                         else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   301                         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   302                             /* dummy else to remove MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   303                         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   304                     }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   305      #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   306                      /* If either compression is enabled or if the data in the request is less than the expected Maxlength */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   307                      if(Dcm_DataTransfer_st.isUploadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   308                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   309                          /* In case of upload, always give application the Maxblocklen-2(SID,BSN), so that the application can modify the number of bytes to be transfered */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   310                          s_dataCurrentBlockSize_u32 = Dcm_DataTransfer_st.dataMaxBlockLength_u32-2u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   311                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   312                      else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   313                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   314                          /* In case of download, always give application the request length that is recieved */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   315                          s_dataCurrentBlockSize_u32 = pMsgContext->reqDataLen-1uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   316                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   317                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   318                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   319                          /* dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   320                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   321  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   322      #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   323  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   324                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   325                  /* Moving the state to check the permission from application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   326                  s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_CHECKACCESS;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   327              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   328          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   329  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   330          if(s_stTransferDataState_en == DCM_DSP_TRANSFERDATA_CHECKACCESS)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   331          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   332              if(Dcm_DataTransfer_st.isUploadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   333              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   334                  /* set the data transfer direction as UPLOAD if there was a RequestUpload request active previously */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   335                  dataTransferDirection_ten = DCM_UPLOAD;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   336              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   337              else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   338              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   339                  /* set the data transfer direction as DOWNLOAD if there was a RequestDownload request active previously */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   340                  dataTransferDirection_ten = DCM_DOWNLOAD;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   341              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   342              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   343              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   344                  /* dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   345              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   346              /* calling the application to do NRC checks for 0x31,0x72,0x92,0x93 and manufacturer/supplier specific checks */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   347              /* If Transfer request paramter record is present in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   348              if(pMsgContext->reqDataLen>1u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   349              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   350                  /*MR12 RULE 9.1 VIOLATION: Control flow will not enter the else part of the above if statement.Therefor the  variable will always have a valid value. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   351                  dataReturnValue_u8 = DcmAppl_Dcm_CheckPermissionForTransferData(dataReceivedBlockSequenceNr_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   352                          Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   353                          Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   354                          &s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   355                          &pMsgContext->reqData[1],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   356                          (pMsgContext->reqDataLen)-1u,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   357                          dataTransferDirection_ten,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   358                          dataNegRespCode_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   359                  );
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   360              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   361              /* If Transfer request paramter record is not present in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   362              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   363              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   364                  /*MR12 RULE 9.1 VIOLATION: Control flow will not enter the else part of the above if statement.Therefor the  variable will always have a valid value. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   365                  dataReturnValue_u8 = DcmAppl_Dcm_CheckPermissionForTransferData(dataReceivedBlockSequenceNr_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   366                          Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   367                          Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   368                          &s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   369                          NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   370                          0,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   371                          dataTransferDirection_ten,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   372                          dataNegRespCode_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   373                  );
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   374  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   375              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   376  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   377                  /* Moving to the error state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   378              if(dataReturnValue_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   379              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   380                  /* Do nothing. Be in the same state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   381                  dataServRetValue_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   382              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   383              else if(dataReturnValue_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   384              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   385                  /* Moving the state to call the application to read from the memory if requestUpload service is active previously */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   386                  s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_READWRITE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   387              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   388              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   389              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   390                  if(*dataNegRespCode_u8 == 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   391                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   392                  /* In case the application does not NRC, but returns E_NOT_OK(or any value other than E_OK, E_PENDING and E_NOT_OK), then Dcm shall send NRC 0x22 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   393                  *dataNegRespCode_u8 = DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   394                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   395                  /* Moving to the error state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   396                  s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_ERROR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   397              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   398  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   399          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   400  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   401          if(s_stTransferDataState_en == DCM_DSP_TRANSFERDATA_READWRITE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   402          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   403              /* Call the application if the requested memory size is less than the Dcm transmission buffer size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   404              if((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(s_dataCurrentBlockSize_u32 > pMsgContext->resMaxDataLen))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   405              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   406                  /* in case the requested memory size exceeds the Dcm buffer size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   407                  *dataNegRespCode_u8 = DCM_E_RESPONSETOOLONG;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   408                  /* Report development error "DCM_E_INTERFACE_BUFFER_OVERFLOW" to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   409                  DCM_DET_ERROR(DCM_TRANSFERDATA_ID, DCM_E_INTERFACE_BUFFER_OVERFLOW)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   410              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   411              else if((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(s_dataCurrentBlockSize_u32 <=pMsgContext->resMaxDataLen))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   412              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   413                  /* Calling the application to read the data from the memory */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   414                  dataReadMemRetValue_en =  DcmAppl_Dcm_ReadMemory(s_stTransferOpstatus_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   415                                                               Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   416                                                               Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   417                                                               s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   418                                                               &pMsgContext->resData[1],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   419                                                               dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   420              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   421              else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   422              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   423                  /* Calling the application to read the data from the memory */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   424                  dataWriteMemRetValue_en =  DcmAppl_Dcm_WriteMemory(s_stTransferOpstatus_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   425                                                               Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   426                                                               Dcm_DataTransfer_st.dataMemoryAddress_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   427                                                               s_dataCurrentBlockSize_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   428                                                               &pMsgContext->reqData[1],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   429                                                               dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   430  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   431              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   432              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   433              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   434                  /* dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   435              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   436  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   437              /*MR12 RULE 9.1 VIOLATION: Control flow will not enter the else part of the above if statement.Therefor the  variable will always have a valid value. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   438               if(((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(DCM_READ_PENDING == dataReadMemRetValue_en))||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   439                      ((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)&&(DCM_WRITE_PENDING == dataWriteMemRetValue_en)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   440              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   441                  s_stTransferOpstatus_u8 = DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   442                  /* Return  DCM_E_PENDING from the service*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   443                  dataServRetValue_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   444              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   445              else if(((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(DCM_READ_FORCE_RCRRP == dataReadMemRetValue_en))||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   446                      ((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)&&(DCM_WRITE_FORCE_RCRRP == dataWriteMemRetValue_en)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   447              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   448                  s_stTransferOpstatus_u8 = DCM_FORCE_RCRRP_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   449                  /* Return  DCM_E_FORCE_RCRRP from the service*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   450                  dataServRetValue_u8=DCM_E_FORCE_RCRRP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   451              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   452              else if(((Dcm_DataTransfer_st.isUploadStarted_b != FALSE)&&(DCM_READ_OK == dataReadMemRetValue_en))||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   453                      ((Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)&&(DCM_WRITE_OK == dataWriteMemRetValue_en)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   454              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   455                  /* if this is not the repeated block, update the block sequence count and the number of completed transfers */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   456                  /* update the block sequence count to zero when it reaches 0xff and the tester client requests for the next block which is 0x00 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   457                  if((Dcm_TransferData_st.cntCurrentBlockCount == 0xffu)&&(dataReceivedBlockSequenceNr_u8==0u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   458                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   459                      /* increment the block sequence counter everytime the trasnferData is done for a new block and not the repeated block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   460                      Dcm_TransferData_st.cntCurrentBlockCount = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   461                      /* update the size of the data transfered in case it is a new block and the data is not compressed */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   462                      Dcm_TransferData_st.dataTransferedDataSize_u32 = Dcm_TransferData_st.dataTransferedDataSize_u32 + s_dataCurrentBlockSize_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   463                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   464                  /* If the block sequence counter is below 0xff and the client has requested for the next block,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   465                   * increment the internal block sequence count and the number of completed transfers */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   466                  else if((Dcm_TransferData_st.cntCurrentBlockCount != 0xffu)&&(dataReceivedBlockSequenceNr_u8 == (Dcm_TransferData_st.cntCurrentBlockCount+1u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   467                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   468                      /* increment the block sequence counter everytime the trasnferData is done for a new block and not the repeated block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   469                      Dcm_TransferData_st.cntCurrentBlockCount++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   470                      /* update the size of the data transfered in case it is a new block and the data is not compressed */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   471                      Dcm_TransferData_st.dataTransferedDataSize_u32 = Dcm_TransferData_st.dataTransferedDataSize_u32 + s_dataCurrentBlockSize_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   472                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   473                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   474                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   475                      /* dummy else */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   476                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   477  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   478                  /*Response is already filled by the application*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   479                  if(Dcm_DataTransfer_st.isUploadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   480                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   481                      /* Set final response length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   482                      pMsgContext->resDataLen =  s_dataCurrentBlockSize_u32+1u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   483                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   484                  else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   485                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   486                      /* Set final response length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   487                      pMsgContext->resDataLen =  1u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   488                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   489                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   490                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   491                      /* dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   492                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   493                  /* updating the block sequence count in the response */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   494                  pMsgContext->resData[0]= dataReceivedBlockSequenceNr_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   495  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   496                  /* Reset the state of transferData state machine to IDLE */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   497                  s_stTransferDataState_en  = DCM_DSP_TRANSFERDATA_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   498                  /* reset the opstatus to INITIAL */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   499                  s_stTransferOpstatus_u8    = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   500                  /* Return E_OK from the service*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   501                  dataServRetValue_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   502  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   503              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   504              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   505              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   506  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   507                  s_stTransferOpstatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   508  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   509                  if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   510                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   511                      if(*dataNegRespCode_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   512                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   513                          /*Write has failed*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   514                          *dataNegRespCode_u8 = DCM_E_GENERALPROGRAMMINGFAILURE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   515                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   516                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   517                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   518                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   519                      if(*dataNegRespCode_u8 == 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   520                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   521                              /*Read has failed*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   522                          *dataNegRespCode_u8 = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   523                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   524                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   525  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   526                  s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_ERROR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   527              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   528          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   529  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   530          if(s_stTransferDataState_en == DCM_DSP_TRANSFERDATA_ERROR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   531          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   532              /* If negative response code is not set, send NRC 0x22 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   533              if(*dataNegRespCode_u8==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   534              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   535                  *dataNegRespCode_u8 = DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   536              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   537              /* resetting the complete context of sequence */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   538              Dcm_DspDeactivateRequestUploadDownloadPermission();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   539              /* Reset the TransferData state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   540              s_stTransferDataState_en = DCM_DSP_TRANSFERDATA_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   541              /* reset the opstatus to INITIAL */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   542              s_stTransferOpstatus_u8    = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   543              /* Return E_NOT_OK from the service*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   544              dataServRetValue_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   545          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   546      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   547      return dataServRetValue_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   548  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   549  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   550  #if(DCM_CFG_DSP_FLEXIBLEDATA_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   551  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   552   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   553   * Dcm_GetLastBlockSize : Function to calculate the last block size
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   554   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   555   * \param           void:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   556   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   557   * \retval          uint32 : The last block size
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   558   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   559   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   560   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   561   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   562  static FUNC(uint32,AUTOMATIC) Dcm_GetLastBlockSize(void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   563  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   564      VAR(uint32,AUTOMATIC) dataLastBlockSize_u32;    /* variable to store the last block size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   565      /* if the last block is a multiple of MaxBlockLength */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   566      if((Dcm_DataTransfer_st.dataMemorySize_u32 % (Dcm_DataTransfer_st.dataMaxBlockLength_u32 - 2u))==0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   567      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   568          dataLastBlockSize_u32 = Dcm_DataTransfer_st.dataMaxBlockLength_u32 - 2u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   569      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   570      /* if the last block is not a multiple of MaxBlockLength */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   571      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   572      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   573          dataLastBlockSize_u32 = (Dcm_DataTransfer_st.dataMemorySize_u32 % (Dcm_DataTransfer_st.dataMaxBlockLength_u32 - 2u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   574      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   575      return dataLastBlockSize_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   576  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   577  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   578  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   579  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   580   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   581   * Dcm_CheckNRCfromApplication : Function to call application to get the NRC checks for NRC 0x24 and NRC 0x71.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   582   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   583   * \param           dataNegResponseCode_u8: NRC to be updated by the application
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   584   *                  dataLengthReceived_u32: Length received in the request exluding the sequence number
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   585   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   586   * \retval          Std_ReturnType : E_OK : NRC updated by the application is zero
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   587   *                                  E_NOT_OK : NRC updated by the application is non zero
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   588   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   589   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   590   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   591   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   592  static FUNC(Std_ReturnType,AUTOMATIC)Dcm_CheckNRCfromApplication(VAR(uint32,AUTOMATIC) dataLengthReceived_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   593                                                                   P2VAR (Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegResponseCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   594  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   595      VAR(uint8,AUTOMATIC) dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   596      VAR(Dcm_TrasferDirection_en, AUTOMATIC) dataTransferDirection_ten = DCM_TRANSFER_NOT_AVAILABLE; /* Variable to indicate the direction of data transfer i.e. either Upload or DOwnload */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   597      dataReturnValue_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   598      if(Dcm_DataTransfer_st.isUploadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   599      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   600          /* set the data transfer direction as UPLOAD if there was a RequestUpload request active previously */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   601          dataTransferDirection_ten = DCM_UPLOAD;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   602      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   603      else if(Dcm_DataTransfer_st.isDownloadStarted_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   604      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   605          /* set the data transfer direction as DOWNLOAD if there was a RequestDownload request active previously */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   606          dataTransferDirection_ten = DCM_DOWNLOAD;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   607      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   608      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   609      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   610  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   611         /* dummy else to remove the MISRA warning */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   612      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   613      /* call the application to get the NRC value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   614      /*MR12 RULE 9.1 VIOLATION: Control flow will not enter the else part of the above if statement.Therefor the  variable will always have a valid value. */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   615      (void)DcmAppl_DcmMemSizeCheckForTransferData(Dcm_DataTransfer_st.compressionMethod_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   616              Dcm_DataTransfer_st.dataMemoryIdentifier_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   617              dataLengthReceived_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   618              dataTransferDirection_ten,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   619              dataNegResponseCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   620      if(*dataNegResponseCode_u8 != 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   621      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   622          dataReturnValue_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   623      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   624      return dataReturnValue_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   625  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   626  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   627  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   628   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   629   * Dcm_DspDeactivateRequestUploadDownloadPermission :Function called to stop the permission for Transfer Data after RequestDownload/RequestUpload
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   630   * and reset the necessary global variables set
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   631   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   632   * \param           void:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   633   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   634   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   635   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   636   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   637   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   638   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   639  FUNC(void,DCM_CODE) Dcm_DspDeactivateRequestUploadDownloadPermission(void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   640  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   641      /*Initialize  RequestDownload request is to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   642      Dcm_DataTransfer_st.isDownloadStarted_b       = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   643      /*Initialize RequestUpload request is to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   644      Dcm_DataTransfer_st.isUploadStarted_b       = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   645      Dcm_DataTransfer_st.nrMaxBlockSequenceNum_u32 = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   646      Dcm_TransferData_st.cntCurrentBlockCount = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   647      Dcm_TransferData_st.dataTransferedDataSize_u32 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   648  	Dcm_DataTransfer_st.compressionMethod_u8  = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   649  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   650  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   651  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   652   *******************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   653   * Dcm_Prv_DspReqTrfExitConfirmation :API used for confirmation of response sent   
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   654   *										 for RequestTransferExit (0x37) service.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   655   * \param           dataIdContext_u8    Service Id 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   656   * \param           dataRxPduId_u8      PDU Id on which request is Received
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   657   * \param           dataSourceAddress_u16    Tester Source address id
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   658   * \param           status_u8                Status of Tx confirmation function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   659   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   660   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   661   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   662   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   663   *******************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   664   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   665   FUNC(void, DCM_CODE) Dcm_Prv_DspReqTrfExitConfirmation(
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   666  	VAR(Dcm_IdContextType ,AUTOMATIC)dataIdContext_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   667  	VAR(PduIdType,AUTOMATIC)dataRxPduId_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   668  	VAR(uint16,AUTOMATIC)dataSourceAddress_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   669  	VAR(Dcm_ConfirmationStatusType,AUTOMATIC)status_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   670  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   671  #if( DCM_CFG_DSP_REQUESTTRANSFEREXIT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   672              if(status_u8 == DCM_RES_POS_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   673              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   674                  Dcm_DspDeactivateRequestUploadDownloadPermission();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   675              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   676  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   677  DcmAppl_DcmConfirmation(dataIdContext_u8,dataRxPduId_u8,dataSourceAddress_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   678  																	status_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   679  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   680  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   681  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   682   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   683   * Dcm_GetRequestUploadStatus :Function called to get the status if RequestUpload is started
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   684   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   685   * \param           void:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   686   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   687   * \retval          boolean : Status if RequestUpload is started
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   688   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   689   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   690   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   691   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   692  FUNC(boolean,DCM_CODE)Dcm_GetRequestUploadStatus(void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   693  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   694      return (Dcm_DataTransfer_st.isUploadStarted_b);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   695  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   696  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   697  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   698   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   699   * Dcm_GetRequestDownloadStatus :Function called to get the status if RequestDownload is started
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   700   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   701   * \param           void:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   702   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   703   * \retval          boolean : Status if RequestDownload is started
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   704   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   705   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   706   ***********************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   707   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   708  FUNC(boolean,DCM_CODE)Dcm_GetRequestDownloadStatus(void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   709  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   710      return (Dcm_DataTransfer_st.isDownloadStarted_b);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   711  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   712  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   713  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   714  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   715  #endif /* ( (DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF) && (DCM_CFG_DSP_TRANSFERDATA_ENABLED!= DCM_CFG_OFF)) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_TransferData.c	   716  

	; Module end
