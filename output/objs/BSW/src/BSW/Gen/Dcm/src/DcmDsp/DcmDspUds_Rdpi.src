	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14688a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds_Rdpi.src BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rdpi.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rdpi.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	10582
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rdpi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	157
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	159
	.byte	5
	.byte	'char',0,1,6,4
	.byte	'sint8',0,2,76,25
	.word	182
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,2,81,25
	.word	204
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,91,25
	.word	235
	.byte	5
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,2,106,24
	.word	272
	.byte	5
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,2,111,30
	.word	303
	.byte	4
	.byte	'boolean',0,2,127,25
	.word	204
	.byte	4
	.byte	'StatusType',0,3,191,1,27
	.word	204
	.byte	4
	.byte	'Std_ReturnType',0,3,199,1,15
	.word	204
	.byte	6,3,206,1,9,8,7
	.byte	'vendorID',0
	.word	235
	.byte	2,2,35,0,7
	.byte	'moduleID',0
	.word	235
	.byte	2,2,35,2,7
	.byte	'sw_major_version',0
	.word	204
	.byte	1,2,35,4,7
	.byte	'sw_minor_version',0
	.word	204
	.byte	1,2,35,5,7
	.byte	'sw_patch_version',0
	.word	204
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,3,213,1,3
	.word	404
	.byte	4
	.byte	'PduIdType',0,4,22,19
	.word	235
	.byte	4
	.byte	'PduLengthType',0,4,26,19
	.word	235
	.byte	8,5,113,9,4,9
	.byte	'TP_DATACONF',0,0,9
	.byte	'TP_DATARETRY',0,1,9
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,118,3
	.word	594
	.byte	4
	.byte	'NetworkHandleType',0,5,128,1,17
	.word	204
	.byte	4
	.byte	'Can_IdType',0,6,32,16
	.word	272
	.byte	4
	.byte	'Can_HwHandleType',0,6,43,16
	.word	235
	.byte	6,7,93,9,8,7
	.byte	'Class',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'TIN',0
	.word	204
	.byte	1,2,35,1,7
	.byte	'ReturnAddress',0
	.word	272
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,7,97,3
	.word	741
	.byte	10,68
	.word	272
	.byte	11,16,0,6,7,154,1,9,68,7
	.byte	'store',0
	.word	821
	.byte	68,2,35,0,0,10,68
	.word	830
	.byte	11,0,0,4
	.byte	'Os_JumpBufType',0,7,156,1,3
	.word	852
	.byte	4
	.byte	'Os_StackTraceType',0,7,174,1,18
	.word	272
	.byte	6,7,175,1,9,8,7
	.byte	'sp',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'ctx',0
	.word	272
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,7,175,1,63
	.word	912
	.byte	4
	.byte	'Os_StackSizeType',0,7,176,1,27
	.word	912
	.byte	12,1,1,3
	.word	997
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,7,179,1,16
	.word	1000
	.byte	4
	.byte	'ApplicationType',0,7,193,1,23
	.word	204
	.byte	13
	.byte	'Os_ApplicationConfigurationType_s',0,7,198,1,16,2,7
	.byte	'app_id',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,7,201,1,3
	.word	1063
	.byte	4
	.byte	'Os_CoreStateType',0,7,203,1,16
	.word	272
	.byte	4
	.byte	'AreaIdType',0,7,204,1,16
	.word	235
	.byte	4
	.byte	'Os_PeripheralAddressType',0,7,212,1,22
	.word	272
	.byte	4
	.byte	'TickType',0,7,221,1,22
	.word	272
	.byte	4
	.byte	'Os_StopwatchTickType',0,7,225,1,22
	.word	272
	.byte	3
	.word	272
	.byte	4
	.byte	'Os_Lockable',0,7,234,1,18
	.word	1305
	.byte	4
	.byte	'CoreIdType',0,7,236,1,16
	.word	235
	.byte	4
	.byte	'SpinlockIdType',0,7,237,1,16
	.word	235
	.byte	8,7,239,1,9,4,9
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,9
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,7,239,1,74
	.word	1375
	.byte	8,7,174,2,9,4,9
	.byte	'APPLICATION_ACCESSIBLE',0,0,9
	.byte	'APPLICATION_RESTARTING',0,1,9
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,7,174,2,92
	.word	1468
	.byte	14
	.byte	'void',0,3
	.word	1580
	.byte	15,1,1,16
	.word	204
	.byte	16
	.word	1586
	.byte	0,3
	.word	1591
	.byte	4
	.byte	'Os_FunctionEntryType',0,7,183,2,16
	.word	1605
	.byte	13
	.byte	'Os_MeterInfoType_s',0,7,193,2,16,48,7
	.byte	'elapsed',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'previous',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'max',0
	.word	272
	.byte	4,2,35,8,7
	.byte	'cumulative',0
	.word	272
	.byte	4,2,35,12,7
	.byte	'stackbase',0
	.word	912
	.byte	8,2,35,16,7
	.byte	'stackusage',0
	.word	912
	.byte	8,2,35,24,7
	.byte	'stackmax',0
	.word	912
	.byte	8,2,35,32,7
	.byte	'stackbudget',0
	.word	912
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,7,202,2,3
	.word	1640
	.byte	3
	.word	1640
	.byte	4
	.byte	'Os_MeterInfoRefType',0,7,203,2,50
	.word	1838
	.byte	4
	.byte	'EventMaskType',0,7,206,2,15
	.word	204
	.byte	4
	.byte	'Os_imaskType',0,7,211,2,16
	.word	272
	.byte	13
	.byte	'Os_ISRDynType_s',0,7,213,2,16,48,7
	.byte	'meter',0
	.word	1640
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,7,215,2,3
	.word	1917
	.byte	3
	.word	1917
	.byte	17
	.word	1978
	.byte	13
	.byte	'Os_ISRType_s',0,7,216,2,16,24,7
	.byte	'entry_function',0
	.word	1005
	.byte	4,2,35,0,7
	.byte	'dynamic',0
	.word	1983
	.byte	4,2,35,4,7
	.byte	'imask',0
	.word	272
	.byte	4,2,35,8,7
	.byte	'stackbudget',0
	.word	912
	.byte	8,2,35,12,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,20,7
	.byte	'application',0
	.word	204
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,7,223,2,3
	.word	1988
	.byte	3
	.word	997
	.byte	17
	.word	1988
	.byte	3
	.word	2147
	.byte	4
	.byte	'ISRType',0,7,224,2,46
	.word	2152
	.byte	4
	.byte	'Os_bitmask',0,7,239,2,22
	.word	272
	.byte	4
	.byte	'Os_pset0Type',0,7,240,2,20
	.word	272
	.byte	4
	.byte	'Os_pset1Type',0,7,241,2,20
	.word	272
	.byte	4
	.byte	'Os_pset2Type',0,7,242,2,20
	.word	272
	.byte	18,7,243,2,9,4,7
	.byte	'p0',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'p1',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'p2',0
	.word	272
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,7,247,2,3
	.word	2260
	.byte	18,7,249,2,9,4,7
	.byte	't0',0
	.word	272
	.byte	4,2,35,0,7
	.byte	't1',0
	.word	272
	.byte	4,2,35,0,7
	.byte	't2',0
	.word	272
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,7,253,2,3
	.word	2324
	.byte	4
	.byte	'Os_ActivationCountType',0,7,254,2,23
	.word	204
	.byte	13
	.byte	'Os_TaskDynType_s',0,7,128,3,16,120,7
	.byte	'terminate_jump_buf',0
	.word	861
	.byte	68,2,35,0,7
	.byte	'meter',0
	.word	1640
	.byte	48,2,35,68,7
	.byte	'activation_count',0
	.word	204
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,7,132,3,3
	.word	2422
	.byte	10,68
	.word	830
	.byte	11,0,0,3
	.word	2422
	.byte	17
	.word	2548
	.byte	13
	.byte	'Os_TaskType_s',0,7,134,3,16,40,7
	.byte	'dynamic',0
	.word	2553
	.byte	4,2,35,0,7
	.byte	'entry_function',0
	.word	1005
	.byte	4,2,35,4,7
	.byte	'pset',0
	.word	2260
	.byte	4,2,35,8,7
	.byte	'base_tpmask',0
	.word	2324
	.byte	4,2,35,12,7
	.byte	'tpmask',0
	.word	2324
	.byte	4,2,35,16,7
	.byte	'core_id',0
	.word	235
	.byte	2,2,35,20,7
	.byte	'index',0
	.word	272
	.byte	4,2,35,24,7
	.byte	'stackbudget',0
	.word	912
	.byte	8,2,35,28,7
	.byte	'activation_count',0
	.word	204
	.byte	1,2,35,36,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,37,7
	.byte	'application',0
	.word	204
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,7,146,3,3
	.word	2558
	.byte	17
	.word	2558
	.byte	3
	.word	2808
	.byte	4
	.byte	'TaskType',0,7,147,3,47
	.word	2813
	.byte	19
	.byte	'Os_TaskStateType',0,7,155,3,6,4,9
	.byte	'SUSPENDED',0,0,9
	.byte	'READY',0,1,9
	.byte	'WAITING',0,2,9
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,7,156,3,31
	.word	2836
	.byte	18,7,167,3,3,4,7
	.byte	'tpmask',0
	.word	2324
	.byte	4,2,35,0,0,13
	.byte	'Os_ResourceDynType_s',0,7,166,3,16,4,7
	.byte	'saved_priority',0
	.word	2923
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,7,170,3,3
	.word	2946
	.byte	3
	.word	2946
	.byte	17
	.word	3026
	.byte	13
	.byte	'Os_ResourceType_s',0,7,171,3,16,12,7
	.byte	'dynamic',0
	.word	3031
	.byte	4,2,35,0,7
	.byte	'tpmask',0
	.word	2324
	.byte	4,2,35,4,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,7,175,3,3
	.word	3036
	.byte	6,7,181,3,9,12,7
	.byte	'maxallowedvalue',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'ticksperbase',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'mincycle',0
	.word	272
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,7,185,3,3
	.word	3135
	.byte	6,7,206,3,9,8,7
	.byte	'Running',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'Pending',0
	.word	204
	.byte	1,2,35,1,7
	.byte	'Delay',0
	.word	272
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,7,210,3,3
	.word	3230
	.byte	20
	.word	204
	.byte	1,1,3
	.word	3316
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,7,217,3,22
	.word	3323
	.byte	13
	.byte	's_swd',0,7,222,3,12,4,7
	.byte	'count',0
	.word	272
	.byte	4,2,35,0,0,18,7,221,3,3,4,7
	.byte	'sw',0
	.word	3359
	.byte	4,2,35,0,0,13
	.byte	'Os_CounterDynType_s',0,7,220,3,16,4,7
	.byte	'type_dependent',0
	.word	3387
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,7,226,3,3
	.word	3406
	.byte	3
	.word	3406
	.byte	17
	.word	3484
	.byte	13
	.byte	'Os_CounterType_s',0,7,227,3,16,28,7
	.byte	'dynamic',0
	.word	3489
	.byte	4,2,35,0,7
	.byte	'advincr',0
	.word	3328
	.byte	4,2,35,4,7
	.byte	'base',0
	.word	3135
	.byte	12,2,35,8,7
	.byte	'core',0
	.word	1586
	.byte	4,2,35,20,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,24,7
	.byte	'application',0
	.word	204
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,7,234,3,3
	.word	3494
	.byte	3
	.word	3316
	.byte	17
	.word	3494
	.byte	3
	.word	3646
	.byte	4
	.byte	'CounterType',0,7,235,3,52
	.word	3651
	.byte	19
	.byte	'Os_ScheduleTableStatusType',0,7,240,3,6,4,9
	.byte	'SCHEDULETABLE_STOPPED',0,0,9
	.byte	'SCHEDULETABLE_NEXT',0,1,9
	.byte	'SCHEDULETABLE_WAITING',0,2,9
	.byte	'SCHEDULETABLE_RUNNING',0,3,9
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,7,241,3,41
	.word	3677
	.byte	17
	.word	.L6-.L3
	.byte	3
	.word	3877
	.byte	4
	.byte	'ScheduleTableType',0,7,128,4,58
	.word	3882
	.byte	13
	.byte	'Os_ScheduleTableDynType_s',0,7,130,4,16,16,7
	.byte	'match',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'next',0
	.word	3887
	.byte	4,2,35,4,7
	.byte	'state',0
	.word	3677
	.byte	4,2,35,8,7
	.byte	'config',0
	.word	235
	.byte	2,2,35,12,0,3
	.word	3914
	.byte	17
	.word	4007
.L6:
	.byte	13
	.byte	'Os_ScheduleTableType_s',0,7,247,3,16,16,7
	.byte	'dynamic',0
	.word	4012
	.byte	4,2,35,0,7
	.byte	'counter',0
	.word	3656
	.byte	4,2,35,4,7
	.byte	'repeat',0
	.word	204
	.byte	1,2,35,8,7
	.byte	'config',0
	.word	235
	.byte	2,2,35,10,7
	.byte	'initial',0
	.word	204
	.byte	1,2,35,12,7
	.byte	'access',0
	.word	204
	.byte	1,2,35,13,7
	.byte	'application',0
	.word	204
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,7,255,3,3
	.word	4017
	.byte	17
	.word	4017
	.byte	3
	.word	4197
	.byte	17
	.word	3494
	.byte	3
	.word	4207
	.byte	21
	.word	1310
	.byte	21
	.word	2260
	.byte	21
	.word	2157
	.byte	21
	.word	2818
	.byte	21
	.word	2324
	.byte	21
	.word	204
	.byte	21
	.word	2818
	.byte	13
	.byte	'Os_ControlledCoreType_s',0,7,251,6,16,112,7
	.byte	'TrapInfo',0
	.word	741
	.byte	8,2,35,0,7
	.byte	'lock_taskaccess',0
	.word	4217
	.byte	4,2,35,8,7
	.byte	'ReadyTasks',0
	.word	4222
	.byte	4,2,35,12,7
	.byte	'RunningISR',0
	.word	4227
	.byte	4,2,35,16,7
	.byte	'RunningTask',0
	.word	4232
	.byte	4,2,35,20,7
	.byte	'RunningTPMask',0
	.word	4237
	.byte	4,2,35,24,7
	.byte	'CurrentMeteredObject',0
	.word	1843
	.byte	4,2,35,28,7
	.byte	'IdleMeter',0
	.word	1640
	.byte	48,2,35,32,7
	.byte	'AppAccess',0
	.word	204
	.byte	1,2,35,80,7
	.byte	'AppOverride',0
	.word	4242
	.byte	1,2,35,81,7
	.byte	'GetStackValueAdjust',0
	.word	912
	.byte	8,2,35,84,7
	.byte	'InErrorHook',0
	.word	204
	.byte	1,2,35,92,7
	.byte	'ChainTaskRef',0
	.word	4247
	.byte	4,2,35,96,7
	.byte	'GetStackUsageAdjust',0
	.word	912
	.byte	8,2,35,100,7
	.byte	'InProtectionHook',0
	.word	204
	.byte	1,2,35,108,7
	.byte	'CoreIsActive',0
	.word	204
	.byte	1,2,35,109,7
	.byte	'InShutdownHook',0
	.word	204
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,7,141,7,3
	.word	4252
	.byte	3
	.word	272
	.byte	17
	.word	1988
	.byte	3
	.word	4708
	.byte	17
	.word	2558
	.byte	3
	.word	4718
	.byte	3
	.word	1640
	.byte	13
	.byte	'Os_AnyCoreType_s',0,7,151,7,16,96,7
	.byte	'DisableAllImask',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'SuspendAllImask',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'SuspendOSImask',0
	.word	272
	.byte	4,2,35,8,7
	.byte	'DisableAllCount',0
	.word	272
	.byte	4,2,35,12,7
	.byte	'SuspendAllCount',0
	.word	272
	.byte	4,2,35,16,7
	.byte	'SuspendOSCount',0
	.word	272
	.byte	4,2,35,20,7
	.byte	'RestartJumpBuf',0
	.word	861
	.byte	68,2,35,24,7
	.byte	'Restartable',0
	.word	204
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,7,160,7,3
	.word	4733
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,8,219,3,16
	.word	272
	.byte	13
	.byte	'Can_TxHwObjectConfigType',0,8,231,3,16,8,7
	.byte	'MsgObjId',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'HwControllerId',0
	.word	204
	.byte	1,2,35,1,7
	.byte	'TxObjPriorityClass',0
	.word	272
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,8,252,3,3
	.word	5010
	.byte	13
	.byte	'Can_RxHwObjectConfigType',0,8,129,4,16,12,7
	.byte	'MaskRef',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'MsgId',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'MsgObjId',0
	.word	204
	.byte	1,2,35,8,7
	.byte	'HwControllerId',0
	.word	204
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,8,147,4,3
	.word	5146
	.byte	10,4
	.word	204
	.byte	11,3,0,13
	.byte	'Can_ControllerMOMapConfigType',0,8,181,4,16,4,7
	.byte	'ControllerMOMap',0
	.word	5286
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,8,184,4,3
	.word	5295
	.byte	13
	.byte	'Can_NPCRValueType',0,8,188,4,16,2,7
	.byte	'Can_NPCRValue',0
	.word	235
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,8,191,4,3
	.word	5396
	.byte	13
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,8,194,4,16,8,7
	.byte	'CanControllerBaudrate',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'CanControllerBaudrateCfg',0
	.word	235
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,8,198,4,3
	.word	5471
	.byte	17
	.word	5471
	.byte	3
	.word	5636
	.byte	13
	.byte	'Can_BaudrateConfigPtrType',0,8,201,4,16,4,7
	.byte	'Can_kBaudrateConfigPtr',0
	.word	5641
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,8,204,4,3
	.word	5646
	.byte	13
	.byte	'Can_EventHandlingType',0,8,226,4,16,4,7
	.byte	'CanEventType',0
	.word	5286
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,8,229,4,3
	.word	5746
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,9,130,1,15
	.word	204
	.byte	4
	.byte	'Rte_TransformerClass',0,9,131,1,15
	.word	204
	.byte	6,9,168,1,9,12,7
	.byte	'in',0
	.word	1586
	.byte	4,2,35,0,7
	.byte	'out',0
	.word	1586
	.byte	4,2,35,4,7
	.byte	'used',0
	.word	235
	.byte	2,2,35,8,7
	.byte	'lost_data',0
	.word	204
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,9,173,1,3
	.word	5892
	.byte	8,9,175,1,9,4,9
	.byte	'RTE_DRA',0,0,9
	.byte	'RTE_WOWP',0,1,9
	.byte	'RTE_TASK',0,2,9
	.byte	'RTE_ARE',0,3,9
	.byte	'RTE_EV',0,4,9
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,9,182,1,3
	.word	5979
	.byte	10,128,8
	.word	204
	.byte	11,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,10,50,15
	.word	6077
	.byte	4
	.byte	'CanIf_u32_impl',0,10,69,16
	.word	272
	.byte	4
	.byte	'CanIf_u16_impl',0,10,71,16
	.word	235
	.byte	4
	.byte	'CanIf_u8_impl',0,10,73,15
	.word	204
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,10,88,15
	.word	204
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,10,90,15
	.word	204
	.byte	6,10,92,9,2,7
	.byte	'DeviceMode',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'ChannelMode',0
	.word	204
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,10,95,3
	.word	6268
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,10,100,15
	.word	204
	.byte	4
	.byte	'CanSM_boolean_Impl',0,10,120,15
	.word	204
	.byte	4
	.byte	'CanSM_u8_Impl',0,10,123,15
	.word	204
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,10,128,1,15
	.word	204
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,10,132,1,15
	.word	204
	.byte	4
	.byte	'CanSM_u16_Impl',0,10,136,1,16
	.word	235
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,10,138,1,15
	.word	204
	.byte	6,10,140,1,9,4,7
	.byte	'cntTick_u16',0
	.word	235
	.byte	2,2,35,0,7
	.byte	'stTimer',0
	.word	204
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,10,143,1,3
	.word	6609
	.byte	4
	.byte	'Com_impl_u16',0,10,154,1,16
	.word	235
	.byte	4
	.byte	'Com_impl_u8',0,10,157,1,15
	.word	204
	.byte	4
	.byte	'ComM_uint32_Impl',0,10,173,1,16
	.word	272
	.byte	4
	.byte	'ComM_uint16_Impl',0,10,175,1,16
	.word	235
	.byte	4
	.byte	'ComM_uint8_Impl',0,10,177,1,15
	.word	204
	.byte	4
	.byte	'ComM_bool_Impl',0,10,179,1,15
	.word	204
	.byte	6,10,181,1,9,24,7
	.byte	'ChannelState_e',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'LightTimeoutCtr_u32',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	235
	.byte	2,2,35,8,7
	.byte	'ChannelMode_u8',0
	.word	204
	.byte	1,2,35,10,7
	.byte	'BusSmMode_u8',0
	.word	204
	.byte	1,2,35,11,7
	.byte	'UserRequestCtr_u8',0
	.word	204
	.byte	1,2,35,12,7
	.byte	'PassiveRequestState_u8',0
	.word	204
	.byte	1,2,35,13,7
	.byte	'PncRequestCtr_u8',0
	.word	204
	.byte	1,2,35,14,7
	.byte	'InhibitionReqStatus_u8',0
	.word	204
	.byte	1,2,35,15,7
	.byte	'NmNetworkRequestStatus_b',0
	.word	204
	.byte	1,2,35,16,7
	.byte	'DiagnosticRequestState_b',0
	.word	204
	.byte	1,2,35,17,7
	.byte	'CommunicationAllowed_b',0
	.word	204
	.byte	1,2,35,18,7
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	204
	.byte	1,2,35,19,7
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	204
	.byte	1,2,35,20,7
	.byte	'NmNetworkModeStatus_b',0
	.word	204
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,10,197,1,3
	.word	6841
	.byte	6,10,206,1,9,10,7
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	235
	.byte	2,2,35,0,7
	.byte	'LimitToNoComCtr_u16',0
	.word	235
	.byte	2,2,35,2,7
	.byte	'RequestedUserMode_t',0
	.word	204
	.byte	1,2,35,4,7
	.byte	'IndicatedUserMode_t',0
	.word	204
	.byte	1,2,35,5,7
	.byte	'numChannelsInFullCom_u8',0
	.word	204
	.byte	1,2,35,6,7
	.byte	'numChannelsInSilentCom_u8',0
	.word	204
	.byte	1,2,35,7,7
	.byte	'numChannelsInNoCom_u8',0
	.word	204
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,10,214,1,3
	.word	7345
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,10,252,1,15
	.word	204
	.byte	4
	.byte	'Dcm_NegativeResponseCodeType',0,10,132,2,15
	.word	204
	.byte	4
	.byte	'Dcm_OpStatusType',0,10,134,2,15
	.word	204
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	10,138,2,15
	.word	204
	.byte	4
	.byte	'Dcm_SecLevelType',0,10,142,2,15
	.word	204
	.byte	4
	.byte	'Dcm_SesCtrlType',0,10,144,2,15
	.word	204
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,10,146,2,15
	.word	204
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,10,150,2,15
	.word	204
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,10,154,2,15
	.word	204
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,10,243,3,34
	.word	6088
	.byte	10,128,8
	.word	204
	.byte	11,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,10,246,3,34
	.word	6088
	.byte	4
	.byte	'Rte_ModeType_DcmDiagnosticSessionControl',0,11,37,15
	.word	204
	.byte	4
	.byte	'Dcm_MsgItemType',0,12,182,2,15
	.word	204
	.byte	3
	.word	204
	.byte	4
	.byte	'Dcm_MsgType',0,12,188,2,57
	.word	8352
	.byte	4
	.byte	'Dcm_MsgLenType',0,12,197,2,16
	.word	272
	.byte	6,12,206,2,9,4,7
	.byte	'reqType',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'suppressPosResponse',0
	.word	204
	.byte	1,2,35,1,7
	.byte	'sourceofRequest',0
	.word	204
	.byte	1,2,35,2,0,4
	.byte	'Dcm_MsgAddInfoType',0,12,219,2,2
	.word	8402
	.byte	4
	.byte	'Dcm_IdContextType',0,12,225,2,15
	.word	204
	.byte	6,12,238,5,9,32,7
	.byte	'tx_buffer_pa',0
	.word	8357
	.byte	4,2,35,0,7
	.byte	'rx_mainBuffer_pa',0
	.word	8357
	.byte	4,2,35,4,7
	.byte	'tx_buffer_size_u32',0
	.word	272
	.byte	4,2,35,8,7
	.byte	'rx_buffer_size_u32',0
	.word	272
	.byte	4,2,35,12,7
	.byte	'dataP2TmrAdjust',0
	.word	272
	.byte	4,2,35,16,7
	.byte	'dataP2StarTmrAdjust',0
	.word	272
	.byte	4,2,35,20,7
	.byte	'protocolid_u8',0
	.word	204
	.byte	1,2,35,24,7
	.byte	'sid_tableid_u8',0
	.word	204
	.byte	1,2,35,25,7
	.byte	'premption_level_u8',0
	.word	204
	.byte	1,2,35,26,7
	.byte	'pduinfo_idx_u8',0
	.word	204
	.byte	1,2,35,27,7
	.byte	'nrc21_b',0
	.word	204
	.byte	1,2,35,28,7
	.byte	'sendRespPendTransToBoot',0
	.word	204
	.byte	1,2,35,29,0,4
	.byte	'Dcm_Dsld_protocol_tableType',0,12,143,6,2
	.word	8535
	.byte	3
	.word	204
	.byte	15,1,1,16
	.word	204
	.byte	16
	.word	235
	.byte	16
	.word	235
	.byte	16
	.word	204
	.byte	0,3
	.word	8891
	.byte	4
	.byte	'Dcm_ConfirmationApiType',0,12,145,6,16
	.word	8915
	.byte	3
	.word	204
	.byte	22
	.word	204
	.byte	1,1,16
	.word	8953
	.byte	16
	.word	204
	.byte	16
	.word	204
	.byte	0,3
	.word	8958
	.byte	6,12,240,2,9,28,7
	.byte	'resData',0
	.word	8357
	.byte	4,2,35,0,7
	.byte	'reqData',0
	.word	8357
	.byte	4,2,35,4,7
	.byte	'msgAddInfo',0
	.word	8402
	.byte	4,2,35,8,7
	.byte	'resDataLen',0
	.word	272
	.byte	4,2,35,12,7
	.byte	'reqDataLen',0
	.word	272
	.byte	4,2,35,16,7
	.byte	'resMaxDataLen',0
	.word	272
	.byte	4,2,35,20,7
	.byte	'idContext',0
	.word	204
	.byte	1,2,35,24,7
	.byte	'dcmRxPduId',0
	.word	235
	.byte	2,2,35,26,0,3
	.word	8986
	.byte	22
	.word	204
	.byte	1,1,16
	.word	204
	.byte	16
	.word	9149
	.byte	16
	.word	8953
	.byte	0,3
	.word	9154
	.byte	6,12,158,6,9,20,7
	.byte	'allowed_session_b32',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'allowed_security_b32',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'adrUserSubServiceModeRule_pfct',0
	.word	8981
	.byte	4,2,35,8,7
	.byte	'SubFunc_fp',0
	.word	9177
	.byte	4,2,35,12,7
	.byte	'subservice_id_u8',0
	.word	204
	.byte	1,2,35,16,7
	.byte	'isDspRDTCSubFnc_b',0
	.word	204
	.byte	1,2,35,17,0,4
	.byte	'Dcm_Dsld_SubServiceType',0,12,169,6,2
	.word	9182
	.byte	17
	.word	9182
	.byte	3
	.word	9394
	.byte	22
	.word	204
	.byte	1,1,16
	.word	8953
	.byte	16
	.word	204
	.byte	0,3
	.word	9404
	.byte	6,12,186,6,9,36,7
	.byte	'allowed_session_b32',0
	.word	272
	.byte	4,2,35,0,7
	.byte	'allowed_security_b32',0
	.word	272
	.byte	4,2,35,4,7
	.byte	'service_handler_fp',0
	.word	9177
	.byte	4,2,35,8,7
	.byte	'Service_init_fp',0
	.word	1000
	.byte	4,2,35,12,7
	.byte	'sid_u8',0
	.word	204
	.byte	1,2,35,16,7
	.byte	'subfunction_exist_b',0
	.word	204
	.byte	1,2,35,17,7
	.byte	'servicelocator_b',0
	.word	204
	.byte	1,2,35,18,7
	.byte	'ptr_subservice_table_pcs',0
	.word	9399
	.byte	4,2,35,20,7
	.byte	'num_sf_u8',0
	.word	204
	.byte	1,2,35,24,7
	.byte	'adrUserServiceModeRule_pfct',0
	.word	9422
	.byte	4,2,35,28,7
	.byte	'Dcm_ConfirmationService',0
	.word	8920
	.byte	4,2,35,32,0,4
	.byte	'Dcm_Dsld_ServiceType',0,12,204,6,3
	.word	9427
	.byte	3
	.word	8891
	.byte	17
	.word	9427
	.byte	3
	.word	9775
	.byte	6,12,218,6,9,8,7
	.byte	'ptr_service_table_pcs',0
	.word	9780
	.byte	4,2,35,0,7
	.byte	'num_services_u8',0
	.word	204
	.byte	1,2,35,4,7
	.byte	'nrc_sessnot_supported_u8',0
	.word	204
	.byte	1,2,35,5,7
	.byte	'cdtc_index_u8',0
	.word	204
	.byte	1,2,35,6,0,4
	.byte	'Dcm_Dsld_sid_tableType',0,12,224,6,3
	.word	9785
	.byte	6,12,238,6,9,14,7
	.byte	'protocol_num_u8',0
	.word	204
	.byte	1,2,35,0,7
	.byte	'txpduid_num_u8',0
	.word	235
	.byte	2,2,35,2,7
	.byte	'roetype2_txpdu_u8',0
	.word	235
	.byte	2,2,35,4,7
	.byte	'rdpitype2_txpdu_u8',0
	.word	235
	.byte	2,2,35,6,7
	.byte	'testaddr_u16',0
	.word	235
	.byte	2,2,35,8,7
	.byte	'channel_idx_u8',0
	.word	204
	.byte	1,2,35,10,7
	.byte	'ConnectionIndex_u8',0
	.word	204
	.byte	1,2,35,11,7
	.byte	'NumberOfTxpdu_u8',0
	.word	204
	.byte	1,2,35,12,0,4
	.byte	'Dcm_Dsld_connType',0,12,248,6,3
	.word	9937
	.byte	8,12,146,7,9,4,9
	.byte	'DCM_DSLD_NO_COM_MODE',0,0,9
	.byte	'DCM_DSLD_SILENT_COM_MODE',0,1,9
	.byte	'DCM_DSLD_FULL_COM_MODE',0,2,0,4
	.byte	'Dcm_Dsld_commodeType',0,12,151,7,2
	.word	10175
	.byte	8,13,200,1,9,4,9
	.byte	'USE_ASYNCH_CLIENT_SERVER',0,0,9
	.byte	'USE_ASYNCH_FNC',0,1,0,4
	.byte	'DcmDspSecurityUsePort',0,13,204,1,2
	.word	10287
	.byte	8,14,22,9,4,9
	.byte	'DCM_NO_BOOT',0,0,9
	.byte	'DCM_OEM_BOOT',0,1,9
	.byte	'DCM_SYS_BOOT',0,2,0,4
	.byte	'Dcm_SessionForBootType',0,14,27,2
	.word	10369
	.byte	8,15,192,3,9,4,9
	.byte	'DCM_READ_OK',0,0,9
	.byte	'DCM_READ_FAILED',0,1,9
	.byte	'DCM_READ_PENDING',0,2,9
	.byte	'DCM_READ_FORCE_RCRRP',0,3,9
	.byte	'DCM_READ_NOT_AVAILABLE',0,4,0,4
	.byte	'Dcm_ReadMemoryRet_t',0,15,199,3,3
	.word	10450
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,73,19,11,15,56
	.byte	9,0,0,8,4,1,58,15,59,15,57,15,11,15,0,0,9,40,0,3,8,28,13,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0
	.byte	12,21,0,54,15,39,12,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15,0,0,14,59,0,3,8,0,0,15,21,1,54,15,39,12,0
	.byte	0,16,5,0,73,19,0,0,17,38,0,73,19,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,20,21,0,73,19,54,15,39,12,0,0,21,53,0,73,19,0,0,22,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Rdpi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dcm_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmCore_DslDsd_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Seca_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Dsc_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Uds_Pub.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     1  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     2  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     3  #include "DcmDspUds_Rdpi_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     4  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     5  #if((DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF) && (DCM_CFG_DSP_READDATABYPERIODICIDENTIFIER_ENABLED != DCM_CFG_OFF))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     6  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     7  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     8  static VAR(Dcm_DspRdpiState_ten, DCM_VAR) Dcm_stDspRdpiState_en;      /* State for RDPI state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	     9  static VAR (Dcm_OpStatusType, DCM_VAR) s_Dcm_DspCondChkRdOpStatus_u8;  /* Variable to store the opstatus*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    10  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    11  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    12  #define DCM_START_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    13  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    14  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    15  static VAR(uint8,                DCM_VAR) s_nrPeriodicId_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    16  #define DCM_STOP_SEC_VAR_CLEARED_8 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    17  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    18  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    19  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    20  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    21   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    22   * Dcm_Dsp_RdpiIni:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    23   * Initialization function for Read Data By Periodic Identifier Service.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    24   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    25   * \parameters           None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    26   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    27   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    28   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    29   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    30  FUNC(void,DCM_CODE)Dcm_Dsp_RdpiIni   (void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    31  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    32      /* Reset the RDPI service state to default state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    33      Dcm_stDspRdpiState_en = DCM_DSP_RDPI_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    34      s_Dcm_DspCondChkRdOpStatus_u8=DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    35  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    36  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    37  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    38  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    39  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    40   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    41   * Dcm_RdpiIsTransmissionModeSupported : This function indicates if the data transmission mode
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    42   *                                       requested by the tester is supported or not
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    43   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    44   * \parameters           dataTransmissionMode_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    45   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    46   * \return value         Std_ReturnType :   If return value is E_NOT_OK the transmission mode requested by tester
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    47   *                                          is not supported, if E_OK tx mode is supported
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    48   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    49   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    50   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    51  static FUNC(Std_ReturnType,DCM_CODE)Dcm_RdpiIsTransmissionModeSupported(VAR(uint8,AUTOMATIC) dataTransmissionMode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    52  static FUNC(Std_ReturnType,DCM_CODE)Dcm_RdpiIsTransmissionModeSupported(VAR(uint8,AUTOMATIC) dataTransmissionMode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    53  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    54      VAR(Std_ReturnType,              AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    55  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    56      dataRetVal_u8=E_NOT_OK; /*If set to E_NOT_OK the transmission mode is not supported, if E_OK tx mode is supported*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    57  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    58      if((dataTransmissionMode_u8 > 0x00) && (dataTransmissionMode_u8 < 0x04))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    59      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    60          /* Check if the Transmission mode in request is supported by the server */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    61          if(((dataTransmissionMode_u8 == DCM_DSP_RDPI_SLOW_RATE)   && (DCM_CFG_PERIODICTX_SLOWRATE  !=0x00u)) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    62             ((dataTransmissionMode_u8 == DCM_DSP_RDPI_MEDIUM_RATE) && (DCM_CFG_PERIODICTX_MEDIUMRATE!=0x00u)) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    63             ((dataTransmissionMode_u8 == DCM_DSP_RDPI_FAST_RATE)   && (DCM_CFG_PERIODICTX_FASTRATE  !=0x00u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    64          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    65              dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    66          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    67      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    68      else if(dataTransmissionMode_u8 == 0x04u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    69      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    70          dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    71      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    72      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    73      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    74          /*Do nothing here, since E_NOT_OK return value is already set*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    75      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    76  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    77      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    78  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    79  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    80  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    81   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    82   * Dcm_RdpiIsDidCondtionChkReadSupported : This function checks if the condition check read for
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    83   *                                         the DID is supported or not.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    84   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    85   * \parameters          idxDidIndexType_st: index in Dcm_DIDConfig trcture
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    86   *  * \return value     Std_ReturnType :   E_OK : Condition checkread successful
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    87   *                                         E_NOT_OK : Condition checkread failed
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    88   *                                         E_PENDING : Need more time, call again
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    89   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    90   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    91   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    92  FUNC(Std_ReturnType,DCM_CODE) Dcm_RdpiIsDidCondtionChkReadSupported(P2VAR(Dcm_DIDIndexType_tst ,AUTOMATIC,DCM_INTERN_DATA) idxDidIndexType_st)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    93  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    94      VAR(uint16,                      AUTOMATIC) idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    95      VAR (Std_ReturnType,   AUTOMATIC) dataCondChkRetVal_u8; /* Return value of Condition check API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    96      P2CONST(Dcm_DIDConfig_tst,AUTOMATIC, DCM_INTERN_DATA )ptrDidConfig;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    97      P2CONST(Dcm_DataInfoConfig_tst,AUTOMATIC, DCM_INTERN_DATA )ptrSigConfig;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    98      P2CONST(Dcm_SignalDIDSubStructConfig_tst,AUTOMATIC, DCM_INTERN_DATA ) ptrControlSigConfig;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	    99      P2VAR(void,AUTOMATIC, DCM_INTERN_DATA)  ptrDIDFnc;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   100      dataCondChkRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   101      ptrDIDFnc=NULL_PTR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   102      ptrDidConfig = &Dcm_DIDConfig[idxDidIndexType_st->idxIndex_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   103      /*Check if the DID currently under process is a normal DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   104      if(idxDidIndexType_st->dataRange_b==FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   105      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   106          /*Loop throush all the signals of DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   107          for(idxIndex_u16=0;((idxIndex_u16<ptrDidConfig->nrSig_u16)&&(dataCondChkRetVal_u8==E_OK));idxIndex_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   108          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   109              ptrSigConfig  = &Dcm_DspDataInfo_st[ptrDidConfig->adrDidSignalConfig_pcst[idxIndex_u16].idxDcmDspDatainfo_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   110              ptrControlSigConfig = &Dcm_DspDid_ControlInfo_st[ptrSigConfig->idxDcmDspControlInfo_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   111  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   112              /*Check if condition check read function is configured or not*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   113              if(ptrControlSigConfig->adrCondChkRdFnc_cpv!= NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   114              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   115                  ptrDIDFnc=ptrControlSigConfig->adrCondChkRdFnc_cpv;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   116                  /* Call function to check if conditions are fulfilled to read the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   117                 if((ptrSigConfig->usePort_u8 == USE_DATA_SYNCH_FNC) ||             \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   118                     (ptrSigConfig->usePort_u8 == USE_DATA_SYNCH_CLIENT_SERVER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   119                 {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   120                     /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   121                     dataCondChkRetVal_u8 = (*(CondChkReadFunc1_pfct)(ptrDIDFnc))(&idxDidIndexType_st->dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   122                 }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   123                 else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   124                 {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   125                     if((ptrSigConfig->usePort_u8 == USE_DATA_ASYNCH_FNC) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   126      #if(DCM_CFG_RDBIPAGEDBUFFERSUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   127                    (ptrSigConfig->usePort_u8 == USE_DATA_RDBI_PAGED_FNC) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   128      #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   129                    (ptrSigConfig->usePort_u8 == USE_DATA_ASYNCH_CLIENT_SERVER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   130                     {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   131                         /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   132                         dataCondChkRetVal_u8 = (*(CondChkReadFunc2_pfct)(ptrDIDFnc))(idxDidIndexType_st->dataopstatus_b, &idxDidIndexType_st->dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   133                     }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   134                 }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   135  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   136              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   137          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   138      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   139      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   140      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   141          /*Return E_OK, since no condition check exist for range DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   142          dataCondChkRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   143      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   144  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   145      return dataCondChkRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   146  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   147  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   148  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   149   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   150   * Dcm_RdpiIsDidCondtionChkReadSupported : This function to reset a periodic DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   151   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   152   * \parameters          idxDidIndexType_st: index in Dcm_DIDConfig trcture
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   153   * \return value     void
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   154   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   155   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   156   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   157  static FUNC(void,DCM_CODE) Dcm_ResetRdpiStateVariables(VAR(uint8,AUTOMATIC)idxIndex_u8, VAR(Dcm_RdpiTxModeType_ten, AUTOMATIC) dataOverflowValue_en,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   158                                                         VAR(uint16,AUTOMATIC)dataId_u16, VAR(uint16, AUTOMATIC) idxPeriodicId_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   159                                                         VAR(uint32,AUTOMATIC) cntrTime_u32,VAR(boolean,AUTOMATIC) dataRange_b);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   160  static FUNC(void,DCM_CODE) Dcm_ResetRdpiStateVariables(VAR(uint8,AUTOMATIC)idxIndex_u8, VAR(Dcm_RdpiTxModeType_ten, AUTOMATIC) dataOverflowValue_en,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   161                                                        VAR(uint16,AUTOMATIC)dataId_u16, VAR(uint16, AUTOMATIC) idxPeriodicId_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   162                                                        VAR(uint32,AUTOMATIC) cntrTime_u32,VAR(boolean,AUTOMATIC) dataRange_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   163  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   164                      Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en= dataOverflowValue_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   165                      Dcm_PeriodicInfo_st[idxIndex_u8].dataId_u16=dataId_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   166                      Dcm_PeriodicInfo_st[idxIndex_u8].idxPeriodicId_u16=idxPeriodicId_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   167                      Dcm_PeriodicInfo_st[idxIndex_u8].cntrTime_u32=cntrTime_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   168                      Dcm_PeriodicInfo_st[idxIndex_u8].dataRange_b=dataRange_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   169  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   170  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   171   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   172   * Dcm_DcmReadDataByPeriodicIdentifier : The ReadDataByPeriodicIdentifier Service requests a server to periodically transmit
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   173   * transmission of responses.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   174   * This service provides the possibility of scheduling an identifier to be periodically transmitted in the requested transmission rate.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   175   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   176   * \parameters           pMsgContext Pointer to message structure
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   177   *                                   (input : RequestLength, Response buffer size, request bytes)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   178   *                                   (output: Response bytes and Response length )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   179   * \return value         None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   180   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   181   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   182   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   183  FUNC(Std_ReturnType,DCM_CODE) Dcm_DcmReadDataByPeriodicIdentifier(VAR(Dcm_SrvOpStatusType,AUTOMATIC) OpStatus,P2VAR(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,P2VAR(Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   184  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   185      VAR (Dcm_DIDIndexType_tst,       AUTOMATIC) s_Dcm_idxDidIndexType_st;                   /* Variable to store the idxIndex_u8 of the Periodic identifier */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   186      VAR (uint32,AUTOMATIC) dataSessionMask_u32;   /* Variable to hold the configured sessions value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   187      VAR (uint32,AUTOMATIC) dataSecurityMask_u32;  /* Variable to hold the configured security value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   188      P2CONST(Dcm_ExtendedDIDConfig_tst,AUTOMATIC,DCM_INTERN_CONST) adrExtendedConfig_pcst; /* Pointer to extended configuration */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   189      VAR(uint8,                       AUTOMATIC) idxIndex_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   190      VAR(uint8,                       AUTOMATIC) dataTransmissionMode_u8;          /* Local variable to transmission mode */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   191      VAR(Dcm_RdpiTxModeType_ten,              AUTOMATIC) dataOverflowValue_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   192      VAR(boolean,                     AUTOMATIC) isValidId_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   193      VAR(Std_ReturnType,AUTOMATIC) retVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   194      VAR (Std_ReturnType,   AUTOMATIC) dataCondChkRetVal_u8; /* Return value of Condition check API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   195      P2CONST(Dcm_DIDConfig_tst,AUTOMATIC, DCM_INTERN_DATA )ptrDidConfig;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   196      static VAR(uint32,DCM_VAR) s_idxLoop_qu32;                   /* Index for loop counter */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   197      #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   198      VAR (Std_ReturnType,AUTOMATIC) IsDIDAvailFnc_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   199      #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   200      /* Local variable initialization */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   201      *dataNegRespCode_u8        = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   202      /*Initialize the variable to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   203      isValidId_b             = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   204      s_nrPeriodicId_u8 = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   205      s_Dcm_idxDidIndexType_st.idxIndex_u16   =   0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   206      /*Initialize the variable to indicate  did is a range did or not to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   207      s_Dcm_idxDidIndexType_st.dataRange_b    =   FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   208      s_Dcm_idxDidIndexType_st.dataNegRespCode_u8=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   209      dataCondChkRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   210      dataSessionMask_u32=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   211      dataSecurityMask_u32=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   212      adrExtendedConfig_pcst=NULL_PTR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   213      ptrDidConfig=NULL_PTR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   214      retVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   215      /*Opstatus possed by the central statemachine is unused currently, opstatus variables related to service needs to be
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   216       * removed and the one passed by the central statemachine needs to be used, this would be taken care with task XXXXX*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   217  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   218      /* If OpStatus is set to DCM_CANCEL then call the ini function for resetting */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   219      if (OpStatus == DCM_CANCEL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   220      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   221          /* Call the Ini Function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   222          Dcm_Dsp_RdpiIni();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   223          /* Set the return value to E_OK as the Ini function will always be serviced  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   224          retVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   225      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   226      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   227      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   228          /* Initialized state */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   229          if(Dcm_stDspRdpiState_en == DCM_DSP_RDPI_INIT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   230          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   231           /* Check for minimum request length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   232              if(((pMsgContext->reqDataLen)!=0u)&&(DCMRDPIMINLENGTHCHECK((pMsgContext->reqDataLen),(pMsgContext->reqData[DCM_DSP_RDPI_POSTXMODE]))))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   233              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   234                  /* Check for maximum request length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   235                  if(DCMRDPIMAXLENGTHCHECK( pMsgContext->reqDataLen ))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   236                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   237                      /* Copy transmission mode to local variable */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   238                      dataTransmissionMode_u8 = pMsgContext->reqData[DCM_DSP_RDPI_POSTXMODE];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   239                      /* Check if the transmission mode requested by the tester is supported by the ECU*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   240                      if(E_OK==Dcm_RdpiIsTransmissionModeSupported(dataTransmissionMode_u8))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   241                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   242                          /* If Transmission mode is 0x04, move the state to DCM_DSP_RDPI_CHECKPERMISSION to process the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   243                          if(dataTransmissionMode_u8==DCM_DSP_RDPI_STOP_SENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   244                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   245                              /* Change the state to check for permissions for the PDIDs in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   246                              Dcm_stDspRdpiState_en = DCM_DSP_RDPI_CHECKPERMISSION;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   247                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   248                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   249                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   250                              /*Is the scheduler free at all???*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   251                              if(Dcm_NumOfActivePeriodicId_u8<DCM_CFG_MAX_DID_SCHEDULER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   252                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   253                                  /* Loop through the identifiers in the request and find the number of periodic identifiers which is not in the scheduler table*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   254                                  for(s_idxLoop_qu32=1u;((s_idxLoop_qu32 < (pMsgContext->reqDataLen)) && (*dataNegRespCode_u8 ==0x00));s_idxLoop_qu32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   255                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   256                                      /* Check if the DID sent from tester is configured in Server */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   257                                      if(E_OK == Dcm_GetIndexOfDID((uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u), &s_Dcm_idxDidIndexType_st))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   258                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   259                                          /*Is the DID range DID or not*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   260  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   261                                          if(s_Dcm_idxDidIndexType_st.dataRange_b==FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   262                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   263                                              ptrDidConfig = &Dcm_DIDConfig[s_Dcm_idxDidIndexType_st.idxIndex_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   264                                              adrExtendedConfig_pcst=Dcm_DIDConfig[s_Dcm_idxDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   265                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   266  #if ( DCM_CFG_DIDRANGE_EXTENSION != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   267                                          /*Control comes here for range DIDS*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   268                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   269                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   270                                              adrExtendedConfig_pcst=Dcm_DIDRangeConfig_cast[s_Dcm_idxDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   271                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   272  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   273  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   274                                          /*Obtain the session and security mask based on the type of DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   275                                          dataSessionMask_u32  = adrExtendedConfig_pcst->dataAllowedSessRead_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   276                                          dataSecurityMask_u32 = adrExtendedConfig_pcst->dataAllowedSecRead_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   277  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   278  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   279                                         if(*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] != NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   280  									   {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   281                                          IsDIDAvailFnc_u8 = (*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16]))((uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   282  									   }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   283                                          /* Check if the DID is supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   284                                          if((s_Dcm_idxDidIndexType_st.dataRange_b==TRUE) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   285                                             ((s_Dcm_idxDidIndexType_st.dataRange_b==FALSE) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   286                                               ((*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] == NULL_PTR)||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   287                                                ((*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] != NULL_PTR) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   288                                                 (IsDIDAvailFnc_u8 == E_OK)))))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   289  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   290                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   291                                              /* If the identifier is supported in the current session level */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   292                                              if ((Dcm_DsldGetActiveSessionMask_u32() & dataSessionMask_u32) != 0x0uL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   293                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   294                                                  /* If the identifier is supported in the current security level */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   295                                                  if ((Dcm_DsldGetActiveSecurityMask_u32() & dataSecurityMask_u32) != 0x0uL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   296                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   297                                                      /*Check if condition read for the DID is fine*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   298                                                      s_Dcm_idxDidIndexType_st.dataopstatus_b=s_Dcm_DspCondChkRdOpStatus_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   299  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   300                                                      dataCondChkRetVal_u8=Dcm_RdpiIsDidCondtionChkReadSupported(&s_Dcm_idxDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   301  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   302                                                      if(E_OK==dataCondChkRetVal_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   303                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   304  #if (DCM_CFG_DSP_DYNAMICALLYDEFINEIDENTIFIER_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   305                                                       /*Check if the DID is range or not, if range do not check for Dynamic did*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   306                                                          if(s_Dcm_idxDidIndexType_st.dataRange_b!=TRUE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   307                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   308                                                              /*Check if the Did is Dynamically Defined DID or not*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   309                                                              if( ptrDidConfig->dataDynamicDid_b!=FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   310                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   311                                                                  if(E_OK==Dcm_DspGetIndexOfDDDI_u8((uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u),&(s_Dcm_idxDidIndexType_st.idxIndex_u16)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   312                                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   313                                                                      if(Dcm_DDDIBaseConfig_cast[s_Dcm_idxDidIndexType_st.idxIndex_u16].dataDDDIRecordContext_pst->nrCurrentlyDefinedRecords_u16==0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   314                                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   315                                                                          *dataNegRespCode_u8=DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   316                                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   317                                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   318                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   319                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   320  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   321  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   322                                                          if(*dataNegRespCode_u8==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   323                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   324                                                              /* Loop through the scheduler table to identify if the periodic identifier is already active */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   325                                                              for(idxIndex_u8=0;idxIndex_u8<DCM_CFG_MAX_DID_SCHEDULER ;idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   326                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   327                                                                  /* If the requested identifier is already an active identifier scheduled in the scheduler table, do nothing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   328                                                                  if((Dcm_PeriodicInfo_st[idxIndex_u8].dataId_u16 == (pMsgContext->reqData[s_idxLoop_qu32]|0xF200u)) && (Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en!=DCM_RDPI_NO_TRANMISSION))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   329                                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   330                                                                      /*Set the flag for valid Id is to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   331                                                                      isValidId_b=TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   332                                                                      break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   333                                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   334                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   335                                                              /* If the identifier is not currently active */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   336                                                              if(idxIndex_u8==DCM_CFG_MAX_DID_SCHEDULER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   337                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   338                                                                  /* Increment the counter indicating the number of supported identifiers not present in the scheduler table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   339                                                                  s_nrPeriodicId_u8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   340                                                                  /*Set the flag for valid Id is to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   341                                                                  isValidId_b=TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   342                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   343                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   344                                                          /*Set the opstatus variable to initial*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   345                                                          s_Dcm_DspCondChkRdOpStatus_u8=DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   346                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   347                                                      else if(DCM_E_PENDING==dataCondChkRetVal_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   348                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   349                                                          /*Do nothing here*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   350                                                          s_Dcm_DspCondChkRdOpStatus_u8=DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   351                                                          retVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   352                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   353                                                      /*Conditions not correct for read**/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   354                                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   355                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   356                                                          if(s_Dcm_idxDidIndexType_st.dataNegRespCode_u8==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   357                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   358                                                              /*Conditions not correct*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   359                                                              *dataNegRespCode_u8=DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   360                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   361                                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   362                                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   363                                                              /*Application has already set the NRC, transmit the same NRC*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   364                                                              *dataNegRespCode_u8=s_Dcm_idxDidIndexType_st.dataNegRespCode_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   365                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   366                                                          /*Set the opstatus variable to initial*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   367                                                          s_Dcm_DspCondChkRdOpStatus_u8=DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   368                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   369                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   370                                                  /* Set NRC 0x33 if any of the supported identifier is not allowed in the current security level */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   371                                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   372                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   373                                                      *dataNegRespCode_u8 = DCM_E_SECURITYACCESSDENIED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   374                                                      break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   375                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   376                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   377                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   378                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   379                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   380                                  if(*dataNegRespCode_u8 ==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   381                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   382                                      /* Check if atleast one PID is supported in active session and  number of active
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   383                                       * identifiers + number of new supported identifiers does not exceed the maximum allowed scheduler limit */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   384                                       /*Check if the flag for ValidId is set to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   385                                      if((isValidId_b!=FALSE) && ((s_nrPeriodicId_u8+Dcm_NumOfActivePeriodicId_u8)<=DCM_CFG_MAX_DID_SCHEDULER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   386                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   387                                          Dcm_stDspRdpiState_en = DCM_DSP_RDPI_CHECKPERMISSION;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   388                                          s_nrPeriodicId_u8 = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   389                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   390                                      /* Send NRC 0x31 since no pid is supported in active session or the supported PID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   391                                       * cannot be scheduled since scheduler is busy */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   392                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   393                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   394                                          *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   395                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   396                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   397                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   398                              /*Scheduler is not free, send NRC0x31*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   399                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   400                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   401                                  *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   402                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   403                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   404                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   405                      /* Transmission mode requested by the ECU is not supported, trigger NRC31 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   406                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   407                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   408                          *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   409                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   410                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   411                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   412                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   413                      /* maximum length is incorrect , NRC0x13 is triggered in case of ISO14229-01 2013-03 edition, else NRC0x31*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   414  #if(DCM_CFG_RDPIISOVERSION==DCM_ISO14229_1_2013_03)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   415                      *dataNegRespCode_u8 = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   416  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   417                      *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   418  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   419                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   420              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   421              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   422              {   /* minimum length is incorrect */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   423                  *dataNegRespCode_u8 = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   424              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   425          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   426          /* Check for permissions from application to process the eventType sent from tester */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   427          if(Dcm_stDspRdpiState_en == DCM_DSP_RDPI_CHECKPERMISSION)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   428          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   429              /* Copy transmission mode to local variable */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   430              dataTransmissionMode_u8 = pMsgContext->reqData[DCM_DSP_RDPI_POSTXMODE];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   431              /* If the transmission mode is sendAtSlowRate */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   432              if(dataTransmissionMode_u8 == DCM_DSP_RDPI_SLOW_RATE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   433              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   434                  dataOverflowValue_en=DCM_RDPI_SLOW_RATE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   435              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   436              /* If the transmission mode is sendAtMediumRate */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   437              else if(dataTransmissionMode_u8 == DCM_DSP_RDPI_MEDIUM_RATE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   438              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   439                  dataOverflowValue_en=DCM_RDPI_MEDIUM_RATE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   440              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   441              /* If the transmission mode is sendAtFastRate */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   442              else if(dataTransmissionMode_u8 == DCM_DSP_RDPI_FAST_RATE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   443              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   444                  dataOverflowValue_en=DCM_RDPI_FAST_RATE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   445              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   446              /* If the transmission mode is stopSending */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   447              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   448              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   449                  dataOverflowValue_en = DCM_RDPI_NO_TRANMISSION;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   450              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   451              /* If the transmission mode is stopSending */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   452              if(dataTransmissionMode_u8 == DCM_DSP_RDPI_STOP_SENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   453              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   454                  /* If there are no identifiers in the request,i.e, to stop all the transmissions */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   455                  if(pMsgContext->reqDataLen == 0x01u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   456                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   457                      for(idxIndex_u8=0;idxIndex_u8<DCM_CFG_MAX_DID_SCHEDULER;idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   458                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   459                          /*Reset the RDPI state variables*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   460                          Dcm_ResetRdpiStateVariables(idxIndex_u8,DCM_RDPI_NO_TRANMISSION,(uint16)0x00,(uint16)0x00,(uint32)0x00,FALSE);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   461                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   462                      Dcm_NumOfActivePeriodicId_u8=0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   463                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   464                  /* If there is at least one identifier in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   465                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   466                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   467                      /* Loop through the identifiers in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   468                      for(s_idxLoop_qu32=1;s_idxLoop_qu32 < (pMsgContext->reqDataLen);s_idxLoop_qu32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   469                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   470                          /* Loop through the identifiers in the periodic scheduler */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   471                          for(idxIndex_u8=0;idxIndex_u8<DCM_CFG_MAX_DID_SCHEDULER;idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   472                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   473                              if((Dcm_PeriodicInfo_st[idxIndex_u8].dataId_u16 == ((pMsgContext->reqData[s_idxLoop_qu32]|0xF200u))) && (Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en!=DCM_RDPI_NO_TRANMISSION))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   474                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   475                                  /*Reset the RDPI state variables*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   476                                  Dcm_ResetRdpiStateVariables(idxIndex_u8,DCM_RDPI_NO_TRANMISSION,(uint16)0x00,(uint16)0x00,(uint32)0x00,FALSE);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   477                                  Dcm_NumOfActivePeriodicId_u8--;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   478                                  break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   479                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   480                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   481                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   482                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   483                  /* Reset the state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   484                  Dcm_stDspRdpiState_en = DCM_DSP_RDPI_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   485              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   486              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   487              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   488                  /* Loop through the identifiers in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   489                  for(s_idxLoop_qu32=1;s_idxLoop_qu32 < (pMsgContext->reqDataLen);s_idxLoop_qu32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   490                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   491                      /* Check if the DID sent from tester is configured in Server */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   492                      if(E_OK == Dcm_GetIndexOfDID((uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u), &s_Dcm_idxDidIndexType_st))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   493                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   494                          /*Check if Did is range did or not*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   495                          if(s_Dcm_idxDidIndexType_st.dataRange_b==FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   496                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   497                              /*DID is normal DID and not range DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   498                              ptrDidConfig = &Dcm_DIDConfig[s_Dcm_idxDidIndexType_st.idxIndex_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   499                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   500  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   501  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   502  						if(*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] != NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   503  						{
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   504  							  IsDIDAvailFnc_u8 = (*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16]))((uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   505  						}
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   506                        
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   507                          /* Check if the DID is supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   508  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   509                          if(((s_Dcm_idxDidIndexType_st.dataRange_b==FALSE))&&((*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] == NULL_PTR)||((*Dcm_DIDIsAvail[ptrDidConfig->idxDIDSupportedFnc_u16] != NULL_PTR) && (IsDIDAvailFnc_u8==E_OK))))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   510  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   511                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   512                              s_nrPeriodicId_u8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   513                              /* Loop through the identifiers in the periodic scheduler */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   514                              for(idxIndex_u8=0;idxIndex_u8<DCM_CFG_MAX_DID_SCHEDULER;idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   515                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   516  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   517                                  /* If the identifier is already added in the scheduler table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   518                                  if(Dcm_PeriodicInfo_st[idxIndex_u8].dataId_u16 == (pMsgContext->reqData[s_idxLoop_qu32]|0xF200u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   519                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   520                                      /* If the identifier is currently not active */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   521                                      if(Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en==DCM_RDPI_NO_TRANMISSION)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   522                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   523                                          Dcm_NumOfActivePeriodicId_u8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   524                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   525                                      /* Update the overflow counter,idxIndex_u8 of the identifier and reset the timer counter */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   526                                      Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en= dataOverflowValue_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   527                                      Dcm_PeriodicInfo_st[idxIndex_u8].cntrTime_u32=1;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   528                                      break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   529                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   530                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   531                              /* If the identifier is not found in the scheduler table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   532                              if(idxIndex_u8==DCM_CFG_MAX_DID_SCHEDULER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   533                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   534                                  /* Loop through the entire scheduler table and find the first inactive identifier and update the new identifier */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   535                                  for(idxIndex_u8=0;idxIndex_u8<DCM_CFG_MAX_DID_SCHEDULER;idxIndex_u8++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   536                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   537                                      if(Dcm_PeriodicInfo_st[idxIndex_u8].dataOverflowValue_en==DCM_RDPI_NO_TRANMISSION)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   538                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   539                                          /* Update the identifier, idxIndex_u8 to the configuration table, overflow counter and timer counter */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   540                                          /* Update the number of active periodic identifiers in the scheduler table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   541                                          Dcm_ResetRdpiStateVariables(idxIndex_u8,dataOverflowValue_en,(uint16)(pMsgContext->reqData[s_idxLoop_qu32]|0xF200u),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   542                                                                      s_Dcm_idxDidIndexType_st.idxIndex_u16,(uint32)0x01,s_Dcm_idxDidIndexType_st.dataRange_b);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   543                                          Dcm_NumOfActivePeriodicId_u8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   544                                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   545                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   546                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   547                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   548                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   549                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   550                     
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   551                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   552                  /* If none of the identifiers in the request are valid in the current conditions */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   553                  if(s_nrPeriodicId_u8 ==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   554                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   555                      *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   556                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   557                  if((s_idxLoop_qu32 == pMsgContext->reqDataLen)&& (*dataNegRespCode_u8==0x00))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   558                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   559                      /* Reset the state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   560                      Dcm_stDspRdpiState_en = DCM_DSP_RDPI_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   561                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   562              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   563              /* If State machine is in the INIT state  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   564              if(Dcm_stDspRdpiState_en == DCM_DSP_RDPI_INIT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   565              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   566                  /* Set the response data length to 0 as response consists of only the response identifier */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   567                  pMsgContext->resDataLen=0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   568                  retVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   569              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   570          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   571          /* If negative response code is set */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   572          if(*dataNegRespCode_u8 != 0x0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   573          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   574              /* Reset RDPI state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   575              Dcm_stDspRdpiState_en = DCM_DSP_RDPI_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   576              retVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   577          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   578      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   579      return retVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   580  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   581  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   582  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   583  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Rdpi.c	   584  #endif

	; Module end
