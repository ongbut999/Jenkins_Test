	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc12936a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds_Dddi.src BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Dddi.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Dddi.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	14593
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Dddi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	157
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	174
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	174
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	157
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	157
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	157
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	174
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	157
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	157
	.byte	6,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	487
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	509
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	509
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	157
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	487
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	487
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	509
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	157
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	157
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	826
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	842
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	842
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	157
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	826
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	826
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	157
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	842
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	157
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	157
	.byte	6,0,8
	.word	179
	.byte	9
	.word	209
	.byte	9
	.word	224
	.byte	6,0,8
	.word	247
	.byte	9
	.word	279
	.byte	9
	.word	294
	.byte	6,0,8
	.word	317
	.byte	9
	.word	357
	.byte	9
	.word	371
	.byte	6,0,8
	.word	394
	.byte	9
	.word	427
	.byte	9
	.word	441
	.byte	9
	.word	462
	.byte	6,0,8
	.word	514
	.byte	9
	.word	545
	.byte	9
	.word	560
	.byte	6,0,8
	.word	583
	.byte	9
	.word	616
	.byte	9
	.word	631
	.byte	6,0,8
	.word	654
	.byte	9
	.word	695
	.byte	9
	.word	709
	.byte	6,0,8
	.word	732
	.byte	9
	.word	766
	.byte	9
	.word	780
	.byte	9
	.word	801
	.byte	6,0,8
	.word	847
	.byte	9
	.word	878
	.byte	9
	.word	893
	.byte	6,0,8
	.word	916
	.byte	9
	.word	949
	.byte	9
	.word	964
	.byte	6,0,8
	.word	987
	.byte	9
	.word	1028
	.byte	9
	.word	1042
	.byte	6,0,8
	.word	1065
	.byte	9
	.word	1099
	.byte	9
	.word	1113
	.byte	9
	.word	1134
	.byte	6,0,10,1,3
	.word	1378
	.byte	11
	.byte	'__codeptr',0,4,1,1
	.word	1380
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,5,76,25
	.word	1403
	.byte	11
	.byte	'uint8',0,5,81,25
	.word	157
	.byte	11
	.byte	'uint16',0,5,91,25
	.word	487
	.byte	11
	.byte	'uint32',0,5,106,24
	.word	826
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,5,111,30
	.word	1469
	.byte	11
	.byte	'boolean',0,5,127,25
	.word	157
	.byte	2
	.byte	'unsigned long int',0,4,7,11
	.byte	'uint16_least',0,5,147,1,25
	.word	1526
	.byte	11
	.byte	'StatusType',0,6,191,1,27
	.word	157
	.byte	11
	.byte	'Std_ReturnType',0,6,199,1,15
	.word	157
	.byte	12,6,206,1,9,8,13
	.byte	'vendorID',0
	.word	487
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	487
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	157
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	157
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	157
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	1613
	.byte	11
	.byte	'PduIdType',0,7,22,19
	.word	487
	.byte	11
	.byte	'PduLengthType',0,7,26,19
	.word	487
	.byte	12,8,71,9,8,13
	.byte	'SduDataPtr',0
	.word	174
	.byte	4,2,35,0,13
	.byte	'SduLength',0
	.word	487
	.byte	2,2,35,4,0,11
	.byte	'PduInfoType',0,8,75,3
	.word	1803
	.byte	14,8,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,8,118,3
	.word	1868
	.byte	11
	.byte	'NetworkHandleType',0,8,128,1,17
	.word	157
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	826
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	487
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	157
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	826
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	2015
	.byte	16,68
	.word	826
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	2095
	.byte	68,2,35,0,0,16,68
	.word	2104
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	2126
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	826
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	826
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2186
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2186
	.byte	18,1,1,3
	.word	2271
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2274
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	157
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2337
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	826
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	487
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	826
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	826
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	826
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	842
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	487
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	487
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2644
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2737
	.byte	20
	.byte	'void',0,3
	.word	2849
	.byte	21,1,1,22
	.word	157
	.byte	22
	.word	2855
	.byte	0,3
	.word	2860
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2874
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	826
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	826
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2186
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2186
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2186
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2186
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2909
	.byte	3
	.word	2909
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	3107
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	157
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	826
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2909
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3186
	.byte	3
	.word	3186
	.byte	23
	.word	3247
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2279
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3252
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	826
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2186
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	157
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3257
	.byte	3
	.word	2271
	.byte	23
	.word	3257
	.byte	3
	.word	3416
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3421
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	826
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	826
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	826
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	826
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	826
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3529
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	826
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	826
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	826
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3593
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	157
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	2135
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2909
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	157
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3691
	.byte	16,68
	.word	2104
	.byte	17,0,0,3
	.word	3691
	.byte	23
	.word	3817
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3822
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2279
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3529
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3593
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3593
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	487
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	826
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2186
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	157
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	157
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3827
	.byte	23
	.word	3827
	.byte	3
	.word	4077
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	4082
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	4105
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3593
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4192
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4215
	.byte	3
	.word	4215
	.byte	23
	.word	4295
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4300
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3593
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4305
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	826
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4404
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	157
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	826
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4499
	.byte	26
	.word	157
	.byte	1,1,3
	.word	4585
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4592
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	826
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4628
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4656
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4675
	.byte	3
	.word	4675
	.byte	23
	.word	4753
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4758
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4597
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4404
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2855
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	157
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4763
	.byte	3
	.word	4585
	.byte	23
	.word	4763
	.byte	3
	.word	4915
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4920
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4946
	.byte	23
	.word	.L6-.L3
	.byte	3
	.word	5146
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5151
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5156
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4946
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	487
	.byte	2,2,35,12,0,3
	.word	5183
	.byte	23
	.word	5276
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5281
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4925
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	157
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	487
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	157
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	157
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	157
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5286
	.byte	23
	.word	5286
	.byte	3
	.word	5466
	.byte	23
	.word	4763
	.byte	3
	.word	5476
	.byte	27
	.word	2579
	.byte	27
	.word	3529
	.byte	27
	.word	3426
	.byte	27
	.word	4087
	.byte	27
	.word	3593
	.byte	27
	.word	157
	.byte	27
	.word	4087
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	2015
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5486
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5491
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5496
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5501
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5506
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	3112
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2909
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	157
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5511
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2186
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	157
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5516
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2186
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	157
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	157
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	157
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5521
	.byte	3
	.word	826
	.byte	23
	.word	3257
	.byte	3
	.word	5977
	.byte	23
	.word	3827
	.byte	3
	.word	5987
	.byte	3
	.word	2909
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	826
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	826
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	826
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	826
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	2135
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	157
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	6002
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	826
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	157
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	826
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6279
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	157
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	157
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6415
	.byte	16,4
	.word	157
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6555
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6564
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	487
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6665
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	487
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6740
	.byte	23
	.word	6740
	.byte	3
	.word	6905
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6910
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6915
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6555
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	7015
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	157
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	157
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2855
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2855
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	487
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	157
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7161
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7248
	.byte	3
	.word	7161
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7346
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	157
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	487
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	487
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2855
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2855
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7248
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7351
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	826
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	487
	.byte	16,128,8
	.word	157
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7589
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	826
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	487
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	157
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	157
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	157
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	157
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7780
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	157
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	157
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	157
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	157
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	157
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	487
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	157
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	487
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	157
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	8121
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	487
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	157
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	826
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	487
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	157
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	157
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	487
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	157
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	157
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	157
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	157
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	157
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	157
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	157
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	157
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	157
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	157
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	157
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	157
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8353
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	487
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	487
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	157
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	157
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	157
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	157
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	157
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8857
	.byte	11
	.byte	'Dcm_ConfirmationStatusType',0,13,243,1,15
	.word	157
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	157
	.byte	11
	.byte	'Dcm_NegativeResponseCodeType',0,13,132,2,15
	.word	157
	.byte	11
	.byte	'Dcm_OpStatusType',0,13,134,2,15
	.word	157
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	157
	.byte	11
	.byte	'Dcm_SecLevelType',0,13,142,2,15
	.word	157
	.byte	11
	.byte	'Dcm_SesCtrlType',0,13,144,2,15
	.word	157
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	157
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	157
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	157
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7600
	.byte	16,128,8
	.word	157
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7600
	.byte	11
	.byte	'Rte_ModeType_DcmDiagnosticSessionControl',0,14,37,15
	.word	157
	.byte	11
	.byte	'Dcm_MsgItemType',0,15,182,2,15
	.word	157
	.byte	3
	.word	157
	.byte	11
	.byte	'Dcm_MsgType',0,15,188,2,57
	.word	9900
	.byte	11
	.byte	'Dcm_MsgLenType',0,15,197,2,16
	.word	826
	.byte	12,15,206,2,9,4,13
	.byte	'reqType',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'suppressPosResponse',0
	.word	157
	.byte	1,2,35,1,13
	.byte	'sourceofRequest',0
	.word	157
	.byte	1,2,35,2,0,11
	.byte	'Dcm_MsgAddInfoType',0,15,219,2,2
	.word	9950
	.byte	11
	.byte	'Dcm_IdContextType',0,15,225,2,15
	.word	157
	.byte	12,15,238,5,9,32,13
	.byte	'tx_buffer_pa',0
	.word	9905
	.byte	4,2,35,0,13
	.byte	'rx_mainBuffer_pa',0
	.word	9905
	.byte	4,2,35,4,13
	.byte	'tx_buffer_size_u32',0
	.word	826
	.byte	4,2,35,8,13
	.byte	'rx_buffer_size_u32',0
	.word	826
	.byte	4,2,35,12,13
	.byte	'dataP2TmrAdjust',0
	.word	826
	.byte	4,2,35,16,13
	.byte	'dataP2StarTmrAdjust',0
	.word	826
	.byte	4,2,35,20,13
	.byte	'protocolid_u8',0
	.word	157
	.byte	1,2,35,24,13
	.byte	'sid_tableid_u8',0
	.word	157
	.byte	1,2,35,25,13
	.byte	'premption_level_u8',0
	.word	157
	.byte	1,2,35,26,13
	.byte	'pduinfo_idx_u8',0
	.word	157
	.byte	1,2,35,27,13
	.byte	'nrc21_b',0
	.word	157
	.byte	1,2,35,28,13
	.byte	'sendRespPendTransToBoot',0
	.word	157
	.byte	1,2,35,29,0,11
	.byte	'Dcm_Dsld_protocol_tableType',0,15,143,6,2
	.word	10083
	.byte	3
	.word	157
	.byte	21,1,1,22
	.word	157
	.byte	22
	.word	487
	.byte	22
	.word	487
	.byte	22
	.word	157
	.byte	0,3
	.word	10439
	.byte	11
	.byte	'Dcm_ConfirmationApiType',0,15,145,6,16
	.word	10463
	.byte	3
	.word	157
	.byte	28
	.word	157
	.byte	1,1,22
	.word	10501
	.byte	22
	.word	157
	.byte	22
	.word	157
	.byte	0,3
	.word	10506
	.byte	12,15,240,2,9,28,13
	.byte	'resData',0
	.word	9905
	.byte	4,2,35,0,13
	.byte	'reqData',0
	.word	9905
	.byte	4,2,35,4,13
	.byte	'msgAddInfo',0
	.word	9950
	.byte	4,2,35,8,13
	.byte	'resDataLen',0
	.word	826
	.byte	4,2,35,12,13
	.byte	'reqDataLen',0
	.word	826
	.byte	4,2,35,16,13
	.byte	'resMaxDataLen',0
	.word	826
	.byte	4,2,35,20,13
	.byte	'idContext',0
	.word	157
	.byte	1,2,35,24,13
	.byte	'dcmRxPduId',0
	.word	487
	.byte	2,2,35,26,0,3
	.word	10534
	.byte	28
	.word	157
	.byte	1,1,22
	.word	157
	.byte	22
	.word	10697
	.byte	22
	.word	10501
	.byte	0,3
	.word	10702
	.byte	12,15,158,6,9,20,13
	.byte	'allowed_session_b32',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'adrUserSubServiceModeRule_pfct',0
	.word	10529
	.byte	4,2,35,8,13
	.byte	'SubFunc_fp',0
	.word	10725
	.byte	4,2,35,12,13
	.byte	'subservice_id_u8',0
	.word	157
	.byte	1,2,35,16,13
	.byte	'isDspRDTCSubFnc_b',0
	.word	157
	.byte	1,2,35,17,0,11
	.byte	'Dcm_Dsld_SubServiceType',0,15,169,6,2
	.word	10730
	.byte	23
	.word	10730
	.byte	3
	.word	10942
	.byte	28
	.word	157
	.byte	1,1,22
	.word	10501
	.byte	22
	.word	157
	.byte	0,3
	.word	10952
	.byte	12,15,186,6,9,36,13
	.byte	'allowed_session_b32',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'allowed_security_b32',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'service_handler_fp',0
	.word	10725
	.byte	4,2,35,8,13
	.byte	'Service_init_fp',0
	.word	2274
	.byte	4,2,35,12,13
	.byte	'sid_u8',0
	.word	157
	.byte	1,2,35,16,13
	.byte	'subfunction_exist_b',0
	.word	157
	.byte	1,2,35,17,13
	.byte	'servicelocator_b',0
	.word	157
	.byte	1,2,35,18,13
	.byte	'ptr_subservice_table_pcs',0
	.word	10947
	.byte	4,2,35,20,13
	.byte	'num_sf_u8',0
	.word	157
	.byte	1,2,35,24,13
	.byte	'adrUserServiceModeRule_pfct',0
	.word	10970
	.byte	4,2,35,28,13
	.byte	'Dcm_ConfirmationService',0
	.word	10468
	.byte	4,2,35,32,0,11
	.byte	'Dcm_Dsld_ServiceType',0,15,204,6,3
	.word	10975
	.byte	3
	.word	10439
	.byte	23
	.word	10975
	.byte	3
	.word	11323
	.byte	12,15,218,6,9,8,13
	.byte	'ptr_service_table_pcs',0
	.word	11328
	.byte	4,2,35,0,13
	.byte	'num_services_u8',0
	.word	157
	.byte	1,2,35,4,13
	.byte	'nrc_sessnot_supported_u8',0
	.word	157
	.byte	1,2,35,5,13
	.byte	'cdtc_index_u8',0
	.word	157
	.byte	1,2,35,6,0,11
	.byte	'Dcm_Dsld_sid_tableType',0,15,224,6,3
	.word	11333
	.byte	12,15,238,6,9,14,13
	.byte	'protocol_num_u8',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'txpduid_num_u8',0
	.word	487
	.byte	2,2,35,2,13
	.byte	'roetype2_txpdu_u8',0
	.word	487
	.byte	2,2,35,4,13
	.byte	'rdpitype2_txpdu_u8',0
	.word	487
	.byte	2,2,35,6,13
	.byte	'testaddr_u16',0
	.word	487
	.byte	2,2,35,8,13
	.byte	'channel_idx_u8',0
	.word	157
	.byte	1,2,35,10,13
	.byte	'ConnectionIndex_u8',0
	.word	157
	.byte	1,2,35,11,13
	.byte	'NumberOfTxpdu_u8',0
	.word	157
	.byte	1,2,35,12,0,11
	.byte	'Dcm_Dsld_connType',0,15,248,6,3
	.word	11485
	.byte	14,15,146,7,9,4,15
	.byte	'DCM_DSLD_NO_COM_MODE',0,0,15
	.byte	'DCM_DSLD_SILENT_COM_MODE',0,1,15
	.byte	'DCM_DSLD_FULL_COM_MODE',0,2,0,11
	.byte	'Dcm_Dsld_commodeType',0,15,151,7,2
	.word	11723
	.byte	14,16,200,1,9,4,15
	.byte	'USE_ASYNCH_CLIENT_SERVER',0,0,15
	.byte	'USE_ASYNCH_FNC',0,1,0,11
	.byte	'DcmDspSecurityUsePort',0,16,204,1,2
	.word	11835
	.byte	14,17,22,9,4,15
	.byte	'DCM_NO_BOOT',0,0,15
	.byte	'DCM_OEM_BOOT',0,1,15
	.byte	'DCM_SYS_BOOT',0,2,0,11
	.byte	'Dcm_SessionForBootType',0,17,27,2
	.word	11917
	.byte	14,18,192,3,9,4,15
	.byte	'DCM_READ_OK',0,0,15
	.byte	'DCM_READ_FAILED',0,1,15
	.byte	'DCM_READ_PENDING',0,2,15
	.byte	'DCM_READ_FORCE_RCRRP',0,3,15
	.byte	'DCM_READ_NOT_AVAILABLE',0,4,0,11
	.byte	'Dcm_ReadMemoryRet_t',0,18,199,3,3
	.word	11998
	.byte	11
	.byte	'rba_BswSrv_uint64',0,19,66,28
	.word	1469
	.byte	14,20,21,9,4,15
	.byte	'DSD_IDLE',0,0,15
	.byte	'DSD_VERIFY_DIAGNOSTIC_DATA',0,1,15
	.byte	'DSD_CALL_SERVICE',0,2,15
	.byte	'DSD_WAITFORTXCONF',0,3,15
	.byte	'DSD_SENDTXCONF_APPL',0,4,0,11
	.byte	'Dcm_DsdStatesType_ten',0,20,28,2
	.word	12159
	.byte	14,21,215,2,9,4,15
	.byte	'DCM_DSLD_POS_RESPONSE',0,0,15
	.byte	'DCM_DSLD_NEG_RESPONSE',0,1,0,11
	.byte	'Dcm_DsldResponseType_ten',0,21,219,2,2
	.word	12296
	.byte	14,22,148,1,9,4,15
	.byte	'DCM_ROE_CLEARED',0,0,15
	.byte	'DCM_ROE_STOPPED',0,1,15
	.byte	'DCM_ROE_STARTED',0,2,0,11
	.byte	'Dcm_DspRoeEventState_ten',0,22,153,1,2
	.word	12385
	.byte	14,22,231,1,9,4,15
	.byte	'DCM_CONTROLMASK_NO',0,0,15
	.byte	'DCM_CONTROLMASK_INTERNAL',0,1,15
	.byte	'DCM_CONTROLMASK_EXTERNAL',0,2,0,11
	.byte	'Dcm_Dsp_IocbiCtrlMask_ten',0,22,236,1,2
	.word	12480
	.byte	14,18,203,1,9,4,15
	.byte	'DCM_SUPPORT_READ',0,0,15
	.byte	'DCM_SUPPORT_WRITE',0,1,15
	.byte	'DCM_SUPPORT_IOCONTROL',0,2,0,28
	.word	157
	.byte	1,1,22
	.word	10501
	.byte	22
	.word	487
	.byte	22
	.word	12597
	.byte	0,3
	.word	12667
	.byte	12,22,239,1,9,44,13
	.byte	'dataAllowedSessRead_u32',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'dataAllowedSecRead_u32',0
	.word	826
	.byte	4,2,35,4,13
	.byte	'adrUserReadModeRule_pfct',0
	.word	12690
	.byte	4,2,35,8,13
	.byte	'dataAllowedSessWrite_u32',0
	.word	826
	.byte	4,2,35,12,13
	.byte	'dataAllowedSecWrite_u32',0
	.word	826
	.byte	4,2,35,16,13
	.byte	'adrUserWriteModeRule_pfct',0
	.word	12690
	.byte	4,2,35,20,13
	.byte	'dataSessBitMask_u32',0
	.word	826
	.byte	4,2,35,24,13
	.byte	'dataSecBitMask_u32',0
	.word	826
	.byte	4,2,35,28,13
	.byte	'adrUserControlModeRule_pfct',0
	.word	12690
	.byte	4,2,35,32,13
	.byte	'dataCtrlMask_en',0
	.word	12480
	.byte	4,2,35,36,13
	.byte	'dataCtrlMaskSize_u8',0
	.word	157
	.byte	1,2,35,40,13
	.byte	'dataIocbirst_b',0
	.word	157
	.byte	1,2,35,41,13
	.byte	'statusmaskIOControl_u8',0
	.word	157
	.byte	1,2,35,42,0,11
	.byte	'Dcm_ExtendedDIDConfig_tst',0,22,141,2,3
	.word	12695
	.byte	12,22,200,2,9,4,13
	.byte	'posnSigBit_u16',0
	.word	487
	.byte	2,2,35,0,13
	.byte	'idxDcmDspDatainfo_u16',0
	.word	487
	.byte	2,2,35,2,0,11
	.byte	'Dcm_SignalDIDConfig_tst',0,22,204,2,3
	.word	13142
	.byte	11
	.byte	'Rte_TaskRefType',0,23,184,1,32
	.word	4087
	.byte	11
	.byte	'Rte_EventRefType',0,23,185,1,32
	.word	157
	.byte	11
	.byte	'Rte_EventType',0,23,186,1,32
	.word	826
	.byte	11
	.byte	'Rte_REActCounterType',0,23,252,1,15
	.word	157
	.byte	3
	.word	157
	.byte	11
	.byte	'Rte_REActCounterRefType',0,23,253,1,58
	.word	13341
	.byte	12,23,255,1,9,8,13
	.byte	'task',0
	.word	13237
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	13346
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,23,130,2,3
	.word	13379
	.byte	23
	.word	3827
	.byte	3
	.word	13443
	.byte	3
	.word	157
	.byte	23
	.word	13379
	.byte	3
	.word	13458
	.byte	11
	.byte	'Rte_REContainerRefType',0,23,132,2,60
	.word	13463
	.byte	11
	.byte	'Rte_MSICounterType',0,23,149,2,16
	.word	487
	.byte	3
	.word	487
	.byte	11
	.byte	'Rte_MSICounterRefType',0,23,150,2,56
	.word	13528
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,23,152,2,17
	.word	157
	.byte	3
	.word	157
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,23,153,2,60
	.word	13596
	.byte	12,23,163,2,9,24,13
	.byte	'counter',0
	.word	13533
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	157
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	13601
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	13237
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	13346
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	157
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	487
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,23,172,2,3
	.word	13636
	.byte	3
	.word	487
	.byte	3
	.word	157
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,23,179,2,16
	.word	157
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,23,180,2,16
	.word	157
	.byte	12,23,182,2,9,4,13
	.byte	'pending',0
	.word	157
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	157
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	157
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,23,186,2,3
	.word	13854
	.byte	3
	.word	13854
	.byte	12,23,226,2,9,12,13
	.byte	'event_id',0
	.word	826
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	13946
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	826
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,23,230,2,3
	.word	13951
	.byte	23
	.word	13951
	.byte	3
	.word	14040
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,23,232,2,66
	.word	14045
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,23,234,2,29
	.word	13379
	.byte	19
	.byte	'Rte_QTaskType',0,23,243,2,16,28,13
	.byte	'cmn',0
	.word	7351
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13237
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,23,246,2,3
	.word	14122
	.byte	19
	.byte	'Rte_QREType',0,23,250,2,16,28,13
	.byte	'cmn',0
	.word	7351
	.byte	24,2,35,0,13
	.byte	're',0
	.word	13468
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,23,253,2,3
	.word	14193
	.byte	23
	.word	13379
	.byte	3
	.word	14258
	.byte	19
	.byte	'Rte_QWWPType',0,23,129,3,16,28,13
	.byte	'cmn',0
	.word	7351
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	14050
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,23,132,3,3
	.word	14268
	.byte	23
	.word	13951
	.byte	3
	.word	14336
	.byte	19
	.byte	'Rte_QEvType',0,23,136,3,16,36,13
	.byte	'cmn',0
	.word	7351
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13237
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	157
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	13346
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,23,141,3,3
	.word	14346
	.byte	19
	.byte	'Rte_QMSIType',0,23,145,3,16,48,13
	.byte	'cmn',0
	.word	7351
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	13237
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	157
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	13346
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	13533
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	13601
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	487
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,23,153,3,3
	.word	14441
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3,8
	.byte	58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,4
	.byte	1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0,54
	.byte	15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0,73
	.byte	19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0,26
	.byte	21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Dddi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dcm_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmCore_DslDsd_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Seca_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Dsc_Pub.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\api\\DcmDspUds_Uds_Pub.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\Dsd\\Dcm_Dsd.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmCore\\DcmCoreDslDsd\\DcmCore_DslDsd_Prot.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dcm\\src\\DcmDsp\\DcmDspUds\\DcmDspUds_Uds_Prot.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     1  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     2  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     3  #include "DcmDspUds_Dddi_Inf.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     4  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     5  #if(DCM_CFG_DSPUDSSUPPORT_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     6  #if (DCM_CFG_DSP_DYNAMICALLYDEFINEIDENTIFIER_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     7  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     8  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	     9  /* Variable to store state of function Dcm_DcmDddiAddIdRecords_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    10  VAR (Dcm_DddiDefineById_ten,DCM_VAR) Dcm_stAddIdRecords_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    11  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    12  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    13  static VAR (Dcm_DddiWriteOrClear_ten,DCM_VAR) s_isWriteOrClear_en; /* Enum to inform application whether it is a clear operation or Write operation */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    14  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    15  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    16  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    17  #define DCM_START_SEC_VAR_CLEARED_16 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    18  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    19  VAR (uint16 ,DCM_VAR) Dcm_AddIdCurrentBlockIndex_u16;       /* Variable to store the index of the current block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    20  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    21  static VAR (uint16,DCM_VAR) s_ActiveDDDI_u16; /* DDDI for which the write and clear NvM APIs are called */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    22  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    23  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    24  #define DCM_STOP_SEC_VAR_CLEARED_16 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    25  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    26  #define DCM_START_SEC_VAR_CLEARED_32 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    27  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    28  VAR (uint32,DCM_VAR) Dcm_AddIdCurrentLength_u32;            /* Variable to store the length of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    29  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    30  static VAR (uint32,DCM_VAR) s_dataLength_u32; /* Variable to store the length of the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    31  #define DCM_STOP_SEC_VAR_CLEARED_32 /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    32  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    33  #define DCM_START_SEC_VAR_CLEARED_8/*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    34  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    35  VAR (Dcm_OpStatusType, DCM_VAR) Dcm_DspDddidOpStatus_u8;    /* Variable to store the opstatus*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    36  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    37  static VAR (Std_ReturnType, DCM_VAR) s_dataFunctionRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    38  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    39  static VAR (Std_ReturnType, DCM_VAR) s_dataLengthFuncRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    40  #define DCM_STOP_SEC_VAR_CLEARED_8/*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    41  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    42  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED/*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    43  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    44  static VAR (Dcm_DIDIndexType_tst,DCM_VAR) s_Dcm_idxSrcDidIndexType_st;  /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    45  VAR (Dcm_DddiDefineByMem_ten,DCM_VAR) Dcm_stAddMemRecords_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    46  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    47  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    48  #define DCM_START_SEC_VAR_CLEARED_16/*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    49  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    50  /* Variable to store the index of the block being added */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    51  VAR (uint16 ,                 DCM_VAR) Dcm_AddMemCurrentBlockIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    52  #define DCM_STOP_SEC_VAR_CLEARED_16/*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    53  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    54  #define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    55  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    56  VAR (Dcm_DddiServiceStatus_ten ,DCM_VAR)   Dcm_DspStDddi_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    57  #define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    58  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    59  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    60  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    61  #define DCM_START_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    62  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    63  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    64  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    65  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    66   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    67   * Dcm_DddiCheckOverflow : Function to check memory requirements in case of SubFunction - DefineByMemoryAddress
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    68   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    69   * \param           MemLength_u32 : Requested memory size from the request
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    70   *                  AddIdCurrentLength_u32 : Current length of memory updated
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    71   *                  MaxDidLen_u16 : Maximum data size configured for the DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    72   * \retval         boolean :  TRUE : The memory requirements are valid
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    73   *                            FALSE : Memory requirements are not met (possibly overflow memory exceeds uint32 value)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    74   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    75   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    76   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    77   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    78  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    79  static FUNC(boolean,DCM_CODE)Dcm_DddiCheckOverflow(VAR(uint32,AUTOMATIC) MemLength_u32, VAR(uint32,AUTOMATIC) AddIdCurrentLength_u32, VAR(uint16,AUTOMATIC) MaxDidLen_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    80  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    81  static FUNC(boolean,DCM_CODE)Dcm_DddiCheckOverflow(VAR(uint32,AUTOMATIC) MemLength_u32, VAR(uint32,AUTOMATIC) AddIdCurrentLength_u32, VAR(uint16,AUTOMATIC) MaxDidLen_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    82  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    83      VAR(boolean,AUTOMATIC) flag_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    84      flag_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    85  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    86    if( (uint32)MaxDidLen_u16 > MemLength_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    87    {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    88         if(((uint32)(MaxDidLen_u16) - ( MemLength_u32)) >= AddIdCurrentLength_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    89         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    90             flag_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    91         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    92         /* Dummy Else to remove Misra */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    93         else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    94         {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    95  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    96         }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    97    }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    98    /* Dummy else to remove misra */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	    99    else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   100    {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   101  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   102    }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   103    return flag_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   104  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   105  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   106  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   107  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   108   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   109   * Dcm_GetDynamicSignalConfiguration : Function to get the dynamic configuration(position and size)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   110   *                                    of the signals of a DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   111   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   112   * \param           DidIndex_u16 : Index of the DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   113   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   114   * \retval          Std_ReturnType : E_OK,E_NOT_OK
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   115   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   116   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   117   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   118   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   119  static FUNC(Std_ReturnType,DCM_CODE) Dcm_GetDynamicSignalConfiguration(uint16 DidIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   120  static FUNC(Std_ReturnType,DCM_CODE) Dcm_GetDynamicSignalConfiguration(uint16 DidIndex_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   121  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   122      VAR (uint32,        AUTOMATIC) dataSigLength_u32;  /* Local variable to store the adrTotalLength_pu16                            */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   123      VAR (uint16,        AUTOMATIC) dataSigLength_u16;  /* Local variable to store the adrTotalLength_pu16                            */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   124      VAR (uint16,        AUTOMATIC) index_u16;          /* Local variable to loop through the DID signals                             */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   125      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8;      /* Local variable to store the return value of the API                        */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   126      VAR(boolean,        AUTOMATIC) stVariableLength_b; /* Local variable to store if the signal is the first variable length signal  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   127  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   128      /* Initialization of local variables */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   129      dataSigLength_u32   = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   130      dataSigLength_u16   = 0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   131      /*Initialize the variable length signal value to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   132      stVariableLength_b  = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   133      dataRetVal_u8       = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   134  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   135      /* Loop through all the DIDs of the signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   136      for(index_u16=0;index_u16<Dcm_DIDConfig[DidIndex_u16].nrSig_u16;index_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   137      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   138          /* If the signal is of fixed length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   139  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   140          if(Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].dataFixedLength_b   !=FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   141          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   142              /* If the signal is not of type boolean */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   143              if(Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].dataType_u8!=DCM_BOOLEAN)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   144              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   145                  /* Store the position and data size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   146                  Dcm_DynamicSignalConfig_cast[index_u16].sigPosnBit_u32=Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].posnSigBit_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   147                  Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32=Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].dataSize_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   148              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   149              /* If the signal is of type boolean */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   150              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   151              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   152                  /* Set the position to the start position of the byte */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   153                  Dcm_DynamicSignalConfig_cast[index_u16].sigPosnBit_u32  = (Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].posnSigBit_u16/8)*8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   154                  /* Set the data size of the boolean signal to 8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   155                  Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32 = 8 ;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   156              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   157              /* Set the return value to E_OK */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   158              dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   159          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   160          /* If the signal is the first variable length signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   161  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   162          else if(stVariableLength_b==FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   163          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   164              /*Set the variable length signal value to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   165              stVariableLength_b=TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   166              /* Set the position to the configured position */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   167              Dcm_DynamicSignalConfig_cast[index_u16].sigPosnBit_u32 =Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].posnSigBit_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   168          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   169          /* If the signal is of type variable length but not the first variable length signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   170          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   171          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   172              /* Calculate the position from the previous signal position and size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   173              Dcm_DynamicSignalConfig_cast[index_u16].sigPosnBit_u32 =Dcm_DynamicSignalConfig_cast[(index_u16-1)].sigPosnBit_u32+Dcm_DynamicSignalConfig_cast[(index_u16-1)].sigDataSize_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   174          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   175          /* If the signal is of variable length type */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   176  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   177          if(Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].dataFixedLength_b   ==FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   178          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   179              /* Check for USE FUNC and valid Read Data length function configuration */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   180              if(((Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_SYNCH_FNC) || \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   181                      (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_FNC) ||    \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   182                      (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_SYNCH_CLIENT_SERVER) ||   \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   183                      (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_CLIENT_SERVER)) &&     \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   184                      ((Dcm_DIDConfig[DidIndex_u16].adrExtendedConfig_pcst->dataAllowedSessRead_u32 >0x00u) && (Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrReadDataLengthFnc_pfct != NULL_PTR)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   185  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   186              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   187                  /* Check if the DID is a dynamically defined or not, if it is a dynamically defined DID one typecast it to ReadDataLengthFnc2_pf whose data length *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   188                   *  parameter is of uint32 type where as if it is a normal one typecast it to ReadDataLengthFnc1_pf whose data length parameter is of 2bytes       */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   189  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   190                  if(FALSE==Dcm_DIDConfig[DidIndex_u16].dataDynamicDid_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   191                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   192                      /* Get the length from the configured API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   193                      /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   194                      if ((Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_SYNCH_FNC) || (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_SYNCH_CLIENT_SERVER))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   195                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   196                          dataRetVal_u8 = (*(ReadDataLengthFnc1_pf)(Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrReadDataLengthFnc_pfct))(&dataSigLength_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   197                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   198                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   199                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   200                          if((Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_CLIENT_SERVER) || (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_FNC)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   201      #if(DCM_CFG_RDBIPAGEDBUFFERSUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   202                                  ||  (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_RDBI_PAGED_FNC)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   203      #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   204                          )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   205                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   206                              /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   207                              dataRetVal_u8 = (*(ReadDataLengthFnc4_pf)(Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrReadDataLengthFnc_pfct))(s_Dcm_idxSrcDidIndexType_st.dataopstatus_b,&dataSigLength_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   208                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   209                     }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   210                     Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32 = dataSigLength_u16*8uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   211                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   212                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   213                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   214                      /* Get the length from the configured API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   215                      /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   216                      dataRetVal_u8 = (*(ReadDataLengthFnc2_pf)(Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrReadDataLengthFnc_pfct))(&dataSigLength_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   217                      /*Convert the Data length returned by DDDI length function in to bits, since DDDI length function returns the length always in bytes*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   218                      Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32 = dataSigLength_u32*8uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   219  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   220                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   221  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   222                  if(dataRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   223                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   224  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   225                      /* If the length received in more than the configured maximum length for a length then return error */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   226  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   227                      if(((Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32 > Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].dataSize_u16) ||(Dcm_DynamicSignalConfig_cast[index_u16].sigDataSize_u32==0u)) &&(Dcm_DIDConfig[DidIndex_u16].dataDynamicDid_b == FALSE))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   228                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   229                          dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   230                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   231                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   232                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   233                  else if((dataRetVal_u8==DCM_E_PENDING) && ((Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_CLIENT_SERVER) || (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_FNC)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   234  #if(DCM_CFG_RDBIPAGEDBUFFERSUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   235                          ||  (Dcm_DspDataInfo_st[Dcm_DIDConfig[DidIndex_u16].adrDidSignalConfig_pcst[index_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_RDBI_PAGED_FNC)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   236  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   237                  ))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   238                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   239                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   240                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   241                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   242                      /* Do nothing. Infrastructure error is not returned separately as the NRC 0x10 is sent to the tester for any return type other than E_OK */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   243                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   244              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   245          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   246      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   247      return(dataRetVal_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   248  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   249  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   250  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   251  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   252   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   253   * Dcm_isDDDIDSupported : Function to check if the DDDId is supported in current variant
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   254   *                                    of the signals of a DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   255   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   256   * \param           DynamicIdentifier_u16 : DynamicallyDefinedDataIdentifier to be checked
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   257   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   258   * \retval          Std_ReturnType : E_OK,E_NOT_OK
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   259   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   260   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   261   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   262   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   263  static FUNC(Std_ReturnType, DCM_CODE) Dcm_isDDDIDSupported(uint16 DynamicIdentifier_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   264  static FUNC(Std_ReturnType, DCM_CODE) Dcm_isDDDIDSupported(uint16 DynamicIdentifier_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   265  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   266      VAR(uint16,AUTOMATIC) index_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   267      VAR(Std_ReturnType,AUTOMATIC) retVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   268  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   269      retVal_u8 =E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   270  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   271      for(index_u16 =0x00;index_u16<Dcm_DIDcalculateTableSize_u16();index_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   272      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   273          if(Dcm_DIDConfig[index_u16].dataDid_u16==DynamicIdentifier_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   274          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   275              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   276          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   277      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   278      if(index_u16==Dcm_DIDcalculateTableSize_u16())
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   279      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   280          retVal_u8= E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   281      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   282      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   283      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   284          if(*Dcm_DIDIsAvail[Dcm_DIDConfig[index_u16].idxDIDSupportedFnc_u16]!=NULL_PTR)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   285          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   286              if((*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[Dcm_DIDConfig[index_u16].idxDIDSupportedFnc_u16]))(DynamicIdentifier_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   287              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   288                  retVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   289              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   290          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   291      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   292      return retVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   293  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   294  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   295  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   296   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   297   * Dcm_DDDI_Ini : Initialisation function for DDDI Service
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   298   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   299   * \param           None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   300   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   301   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   302   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   303   * \usedresources
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   304   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   305   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   306  FUNC (void,DCM_CODE) Dcm_DDDI_Ini (void)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   307  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   308  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED == DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   309      VAR (uint32,AUTOMATIC) idxLoop_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   310      /* Get the number of DDDIs/PDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   311      VAR (uint16,AUTOMATIC) dataSize_u16= Dcm_DddiCalculateTableSize_u16 ();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   312      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) stContext_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   313  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   314  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   315      VAR(Dcm_NegativeResponseCodeType,AUTOMATIC) NegResCode_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   316      VAR(Std_ReturnType,AUTOMATIC) dataCondChkRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   317  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   318      dataCondChkRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   319      NegResCode_u8 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   320  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   321      if((Dcm_DspDddidOpStatus_u8 == DCM_PENDING) && (Dcm_stAddIdRecords_en == DCM_DDDI_DEFINE_BY_ID_GETSUPPORT))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   322      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   323          if(((Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[Dcm_DidSignalIdx_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16 >0u) && (Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst->dataAllowedSessRead_u32 >0x00u))&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   324                  ((Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[Dcm_DidSignalIdx_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrCondChkRdFnc_cpv)!= NULL_PTR)&&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   325                  ((Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[Dcm_DidSignalIdx_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_CLIENT_SERVER) ||
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   326                          (Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[Dcm_DidSignalIdx_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_ASYNCH_FNC)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   327          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   328              /* MR12 RULE 11.1 VIOLATION: Typecast to function pointer required for implementation - Required for efficient RAM usage by using single void function pointer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   329              dataCondChkRetVal_u8 = (*(CondChkReadFunc2_pfct)(Dcm_DspDid_ControlInfo_st[Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[Dcm_DidSignalIdx_u16].idxDcmDspDatainfo_u16].idxDcmDspControlInfo_u16].adrCondChkRdFnc_cpv))(DCM_CANCEL, &NegResCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   330          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   331      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   332  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   333      if((Dcm_DspDddidOpStatus_u8 == DCM_PENDING)&&(Dcm_DspStDddi_en == DCM_DDDI_SENDRESP))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   334      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   335          /* canceling the operation of storing/clearing */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   336          (void)DcmAppl_DcmWriteOrClearDddiInNvM(NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   337                  s_ActiveDDDI_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   338                  DCM_CANCEL,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   339                  s_isWriteOrClear_en);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   340      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   341      /* clearing the DDDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   342      s_ActiveDDDI_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   343  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   344      for (idxLoop_u32=0; idxLoop_u32<dataSize_u16;idxLoop_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   345      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   346          /* Clearing the definition of all the DDDIs/PDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   347          stContext_st=Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   348          Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   349          stContext_st=Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   350          Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   351      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   352  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   353      /* Set DDDI state machine to DCM_DDDI_IDLE */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   354      Dcm_DspStDddi_en  = DCM_DDDI_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   355  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   356      /* Set the state machine for functions Dcm_DcmDddiAddIdRecords_u8 and Dcm_DcmDddiAddMemRecords_u8 to init status */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   357      Dcm_stAddIdRecords_en  = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   358      Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   359      /* Reset the Signal idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   360      Dcm_DidSignalIdx_u16 = 0x0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   361      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   362      Dcm_ResetDIDIndexstruct(&s_Dcm_idxSrcDidIndexType_st);      /*This function is invoked to reset all the elements of DID index structure to its default value*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   363  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   364      (void)dataCondChkRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   365      (void)NegResCode_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   366  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   367  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   368  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   369  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   370   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   371   * Dcm_DcmDynamicalDefineDataIdentifier :
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   372   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   373   * UDS service for definition of DynamicalDefinedID.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   374   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   375   * \param           pMsgContext    Pointer to message structure
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   376   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   377   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   378   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   379   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   380   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   381   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   382  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   383  FUNC (Std_ReturnType,DCM_CODE) Dcm_DcmDDDI (VAR(Dcm_SrvOpStatusType,AUTOMATIC) OpStatus,P2VAR(Dcm_MsgContextType,AUTOMATIC,DCM_INTERN_DATA) pMsgContext,P2VAR(Dcm_NegativeResponseCodeType,AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   384  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   385      VAR (uint8, AUTOMATIC) dataSubFunction_u8;  /* static variable for storing the subfunction */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   386  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   387      static VAR (uint16, AUTOMATIC) s_idxIndexForStore_u16;  /* static varaible to store the index of the active DDDID for storing in NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   388      VAR (Std_ReturnType, AUTOMATIC) dataRetValFromNvMStorage_u8;  /* Local variable to store the return value from the NvM storage/Clear */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   389  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   390      VAR (uint16,AUTOMATIC) idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   391      VAR (uint32,AUTOMATIC) idxLoop_u32; /* Local variable to loop through the DDDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   392      VAR(Std_ReturnType, AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   393      /* Initialisation of local variables */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   394      *dataNegRespCode_u8             = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   395      idxIndex_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   396      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   397  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   398      /*Opstatus possed by the central statemachine is unused currently, opstatus variables related to service needs to be
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   399       * removed and the one passed by the central statemachine needs to be used, this would be taken care with task XXXXX*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   400  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   401      if(OpStatus == DCM_CANCEL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   402      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   403          /* If OpStatus is set to DCM_CANCEL , then invoke the Ini function from the service */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   404          Dcm_DDDI_Ini();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   405          /* Return E_OK as Ini function will always be serviced */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   406          dataRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   407      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   408      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   409      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   410  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   411      dataRetValFromNvMStorage_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   412  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   413          if (Dcm_DspStDddi_en==DCM_DDDI_IDLE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   414          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   415              /* Get the subfunction byte from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   416              dataSubFunction_u8=pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   417  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   418              /* If sub-function is clearDynamicallyDefinedDataIdentifier (0x03) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   419              if (dataSubFunction_u8==DCM_DDDI_CLEAR_DYNAMIC_IDENTIFIER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   420              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   421  #if( DCM_CFG_RDPI_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   422                  VAR (uint32,AUTOMATIC) idxRdpi_u32; /* Local variable to loop through the DDDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   423  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   424                  /* Check for request length of 1 byte , idxLoop_u32.e, only sub-function byte is present in request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   425                  /* No identifier provided in the request for sub-function 0x03 means to clear all the DDDIs defined */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   426                  if (pMsgContext->reqDataLen == DCM_DDDI_MIN_LENGTH)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   427                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   428                      /* Get the total number of DDDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   429                      VAR (uint16,AUTOMATIC) nrIds_u16 = Dcm_DddiCalculateTableSize_u16 ();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   430                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   431                      /* Looping through the DDDIs */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   432                      for (idxLoop_u32=0; idxLoop_u32<nrIds_u16;idxLoop_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   433                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   434  #if(DCM_CFG_DSP_NUMISDIDAVAIL > 0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   435                          *dataNegRespCode_u8 =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   436                          if(Dcm_isDDDIDSupported(Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataDddId_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   437                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   438                              /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   439                              *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   440                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   441                              /* Report development error "DCM_E_DDDI_NOT_CONFIGURED " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   442                              DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_DDDI_NOT_CONFIGURED )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   443                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   444                          if(*dataNegRespCode_u8 ==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   445  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   446                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   447                              P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) stContext_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   448                              stContext_st=Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   449                              /* Resetting the definition of DIDs for the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   450                              Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   451                              stContext_st=Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   452                              /* Resetting the definition of DIDs for the PDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   453                              Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   454  #if(DCM_CFG_RDPI_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   455                              for(idxRdpi_u32=0;idxRdpi_u32<DCM_CFG_MAX_DID_SCHEDULER;idxRdpi_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   456                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   457                                  if(Dcm_PeriodicInfo_st[idxRdpi_u32].dataId_u16==Dcm_DDDIBaseConfig_cast[idxLoop_u32].dataDddId_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   458                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   459                                      Dcm_PeriodicInfo_st[idxRdpi_u32].dataOverflowValue_en=DCM_RDPI_NO_TRANMISSION;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   460                                      Dcm_NumOfActivePeriodicId_u8--;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   461                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   462                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   463  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   464                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   465                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   466                      /* Change the state to Send Response*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   467                      Dcm_DspStDddi_en = DCM_DDDI_SENDRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   468                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   469                  /* If the tester request is to clear the DDDI provided in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   470                  /* Checking if the request length is 3 bytes(subfunction and DDDI(2 bytes)) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   471                  else if ((pMsgContext->reqDataLen) == (DCM_DDDI_MIN_LENGTH + 2u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   472                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   473                      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) stContext_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   474                      VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   475                      /* Get the DDDI from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   476                      VAR (uint16,AUTOMATIC) dataDid_u16 = (uint16)pMsgContext->reqData[1];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   477                      dataDid_u16  <<=  8u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   478                      dataDid_u16   |= (uint16)pMsgContext->reqData[2];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   479  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   480                      /* Get the idxIndex_u16 of the  DDDI in request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   481                      dataFuncRetVal_u8 = Dcm_DspGetIndexOfDDDI_u8 (dataDid_u16,&idxIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   482                      /* If the DDDI is configured and idxIndex_u16 is obtained */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   483                      if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   484                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   485  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   486                          if(Dcm_isDDDIDSupported(dataDid_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   487                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   488                              /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   489                              *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   490                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   491                              /* Report development error "DCM_E_DDDI_NOT_CONFIGURED " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   492                              DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_DDDI_NOT_CONFIGURED )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   493                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   494  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   495                          if(*dataNegRespCode_u8==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   496                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   497                              /* updating the active DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   498                              s_ActiveDDDI_u16 = Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   499                              stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   500                              /* Clear the definition of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   501                              Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   502                              stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   503                              /* Clear the definition of the PDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   504                              Dcm_DddiResetCompleteContext (stContext_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   505  #if(DCM_CFG_RDPI_ENABLED!=DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   506                              for(idxRdpi_u32=0;idxRdpi_u32<DCM_CFG_MAX_DID_SCHEDULER;idxRdpi_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   507                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   508                                  if(Dcm_PeriodicInfo_st[idxRdpi_u32].dataId_u16==Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   509                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   510                                      Dcm_PeriodicInfo_st[idxRdpi_u32].dataOverflowValue_en=DCM_RDPI_NO_TRANMISSION;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   511                                      Dcm_NumOfActivePeriodicId_u8--;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   512                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   513                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   514  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   515                              /* Change the state to Send Response*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   516                              Dcm_DspStDddi_en = DCM_DDDI_SENDRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   517                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   518                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   519                      /* If DDDI is not configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   520                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   521                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   522                          /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   523                          *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   524                          Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   525                          /* Report development error "DCM_E_DDDI_NOT_CONFIGURED " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   526                          DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_DDDI_NOT_CONFIGURED )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   527                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   528                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   529                  /* If the request length is incorrect */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   530                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   531                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   532                      *dataNegRespCode_u8      = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   533                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   534                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   535              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   536              /* If sub-function is defineByIdentifier (0x01) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   537              else if (dataSubFunction_u8==DCM_DEFINITION_BY_ID)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   538              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   539                  /* Calculate request length excluding sub-function and DDDI(2 bytes) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   540                  VAR (uint32,AUTOMATIC) dataReqMsgLen_u32=((uint32)pMsgContext->reqDataLen)-3uL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   541                  /* Check if request length calculated is greater than 0 and divisible by 4.4 is the number of bytes of  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   542                  /* information present in the request for each source identifier which includes sourceDataIdentifier    */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   543                  /* (2 bytes), posnInSourceDataRecord_u8(1 byte) and dataMemorySize_u8(1 byte).                                */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   544                  if ((dataReqMsgLen_u32>0u) && ((dataReqMsgLen_u32 % 4u)==0u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   545                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   546                      VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8; /* Local variable to store the return value of function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   547                      /* Get the DDDI from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   548                      VAR (uint16,AUTOMATIC) dataDid_u16 = (uint16)pMsgContext->reqData[1];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   549                      dataDid_u16  <<=  8u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   550                      dataDid_u16   |= (uint16)pMsgContext->reqData[2];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   551                      /* Call the sub function to get the idxIndex_u16 of DDDI in the configuration table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   552                      dataFuncRetVal_u8 = Dcm_DspGetIndexOfDDDI_u8 (dataDid_u16,&idxIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   553                      /* If the DDDI is supported and the idxIndex_u16 is obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   554                      if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   555                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   556                          VAR (Dcm_DIDIndexType_tst,AUTOMATIC) idxsrcDidIndexType_st; /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   557                          /* Call the function to get the idxIndex_u16 of the DID from Dcm_DIDConfig*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   558                          dataFuncRetVal_u8 = Dcm_GetIndexOfDID (dataDid_u16,&idxsrcDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   559  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   560                          /* Check if the DID is supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   561  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   562                          if((dataFuncRetVal_u8 == E_OK) && (idxsrcDidIndexType_st.dataRange_b == FALSE) && (*Dcm_DIDIsAvail[Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16] != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   563                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   564                              if((*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16]))(dataDid_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   565                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   566                                  dataFuncRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   567                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   568                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   569  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   570                          if(dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   571                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   572                              /* If the DDDI is supported in current session and the idxIndex_u16 is obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   573                              if (((Dcm_DsldGetActiveSessionMask_u32() & \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   574                                      (Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst->dataAllowedSessRead_u32))!= 0x00uL))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   575                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   576                                  /* If the DDDI is supported in current security level */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   577                                  if((Dcm_DsldGetActiveSecurityMask_u32()& \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   578                                          (Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst->dataAllowedSecRead_u32))!=0x00uL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   579                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   580                                      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) stContext_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   581                                      P2VAR (Dcm_DddiRecord_tst,AUTOMATIC,DCM_INTERN_DATA) adrRecord_pst =Dcm_DDDIBaseConfig_cast[idxIndex_u16].addrRecord_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   582                                      /* Get the number of records in the request by dividing the length by 4 (block size) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   583                                      VAR (uint16,AUTOMATIC) nrBlocks_u16=(uint16)(dataReqMsgLen_u32/4uL);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   584                                      stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   585                                      /* If the number of records already defined for the DDDI + number of records in the request
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   586                                         exceeds total number of records allowed for the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   587                                      if ((nrBlocks_u16+(stContext_st->nrCurrentlyDefinedRecords_u16)) <=
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   588                                              Dcm_DDDIBaseConfig_cast[idxIndex_u16].nrMaxNumOfRecords_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   589                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   590                                          /* Pointer pointing to the source identifier of the first block */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   591                                          P2CONST (uint8,AUTOMATIC,DCM_INTERN_CONST) adrSourceBuffer_pcu8=&pMsgContext->reqData[3];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   592                                          /* updating the active DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   593                                          s_ActiveDDDI_u16 = Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   594  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   595                                          /* store the index for future use in case the storing of DDDID returns Pending */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   596                                          s_idxIndexForStore_u16 = idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   597  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   598                                          /* Call the function to add the records in the request to the definition of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   599                                          dataFuncRetVal_u8=Dcm_DcmDddiAddIdRecords_u8(nrBlocks_u16,stContext_st->nrCurrentlyDefinedRecords_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   600                                                  adrSourceBuffer_pcu8,adrRecord_pst,dataNegRespCode_u8,idxIndex_u16,(pMsgContext->resMaxDataLen-2u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   601                                          /* If the records are successfully added */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   602                                          if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   603                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   604                                              /* Update the number of currently defined records for the DDDI and PDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   605                                              stContext_st->nrCurrentlyDefinedRecords_u16 = (uint16)(stContext_st->nrCurrentlyDefinedRecords_u16 + nrBlocks_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   606                                              stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   607                                              stContext_st->nrCurrentlyDefinedRecords_u16 = (uint16)(stContext_st->nrCurrentlyDefinedRecords_u16 + nrBlocks_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   608  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   609                                              Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   610                                              /* Change the state to Send Response*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   611                                              Dcm_DspStDddi_en = DCM_DDDI_SENDRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   612                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   613                                          else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   614                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   615                                              /* wait and come back to the service */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   616                                              Dcm_DspDddidOpStatus_u8 = DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   617                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   618                                          /* If any record is not added to the DDDI definition successfully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   619                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   620                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   621                                              /* Negative response code already set within function Dcm_DcmDddiAddIdRecords_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   622                                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   623                                              Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   624                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   625                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   626                                      /* If the total number of records defined for DDDI exceeds the maximum number allowed */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   627                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   628                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   629                                          /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   630                                          *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   631                                          Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   632                                          /* Report development error "DCM_E_EXCEEDED_MAX_RECORDS " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   633                                          DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_EXCEEDED_MAX_RECORDS )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   634                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   635                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   636                                  /*IF Security access failed for defining the DDDI*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   637                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   638                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   639                                      /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   640                                      *dataNegRespCode_u8      = DCM_E_SECURITYACCESSDENIED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   641                                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   642                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   643                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   644                              /*If DDDI is not supported in current active session*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   645                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   646                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   647                                  /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   648                                  *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   649                                  Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   650                                  /* Report development error "DCM_E_NOT_SUPPORTED_IN_CURRENT_SESSION " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   651                                  DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_NOT_SUPPORTED_IN_CURRENT_SESSION )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   652                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   653                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   654                          /*If DDDI is not supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   655                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   656                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   657                              /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   658                              *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   659                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   660                              /* Report development error "DCM_E_DDDI_NOT_CONFIGURED " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   661                              DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_DDDI_NOT_CONFIGURED)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   662                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   663                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   664                      /* If the DDDI is not supported */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   665                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   666                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   667                          /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   668                          *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   669                          Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   670                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   671                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   672                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   673                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   674                      /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   675                      *dataNegRespCode_u8      = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   676                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   677                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   678              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   679              /* If subfunction is defineByMemoryAddress (0x02) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   680              else if (dataSubFunction_u8==DCM_DEFINITION_BY_MEMORYADDRESS)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   681              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   682                  /* Check for minimum request length (Subfunction(1 byte,DDDI(2 bytes),dataAdrAndLenFormatIdentifier_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   683                     (1 byte),memoryAddress(at least 1 byte) and dataMemorySize_u8 (at least 1 byte) */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   684                  if (pMsgContext->reqDataLen>=DCM_DDDI_MEMADDR_MINLEN)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   685                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   686                      /* Get the dataAdrAndLenFormatIdentifier_u8 from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   687                      VAR (uint8,AUTOMATIC) dataAdrAndLenFormatIdentifier_u8 = pMsgContext->reqData[3];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   688  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   689                      /* Calculate number of bytes assigned for address in request from dataAdrAndLenFormatIdentifier_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   690                      VAR (uint8,AUTOMATIC) nrBytesForAddress_u8 = dataAdrAndLenFormatIdentifier_u8 & 0x0Fu;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   691  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   692                      /* Calculate number of bytes assigned for length in request from dataAdrAndLenFormatIdentifier_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   693                      VAR (uint8,AUTOMATIC) nrBytesForLength_u8 = (dataAdrAndLenFormatIdentifier_u8>>4u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   694  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   695                      /* Calculate the block length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   696                      VAR (uint8,AUTOMATIC) dataBlockLen_u8 = nrBytesForAddress_u8 + nrBytesForLength_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   697  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   698                      /* Calculate the request length excluding  subfunction , DDDI and dataAdrAndLenFormatIdentifier_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   699                      VAR (uint16,AUTOMATIC) dataReqMsgLen_u16 = (uint16)(pMsgContext->reqDataLen-4u);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   700  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   701                      /* If  dataAdrAndLenFormatIdentifier_u8 in request is invalid*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   702                      if (( nrBytesForAddress_u8 == 0 ) || ( nrBytesForLength_u8 == 0 ) || ( nrBytesForAddress_u8 > 4 ) || ( nrBytesForLength_u8 > 4))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   703                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   704                          /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   705                          *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   706                          Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   707                          /* Report development error "DCM_E_INVALID_ADDRLENGTH_FORMAT " to DET module if the DET module is enabled */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   708                          DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_INVALID_ADDRLENGTH_FORMAT )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   709                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   710                      /* If dataAdrAndLenFormatIdentifier_u8 in request is valid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   711                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   712                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   713                          /* If the calculated request length has no extra bytes of data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   714                          if ((dataReqMsgLen_u16%dataBlockLen_u8)==0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   715                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   716                              /* Local variable to store the return value of function Dcm_DspGetIndexOfDDDI_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   717                              VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   718  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   719                              /* Get the DDDI from the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   720                              VAR (uint16,AUTOMATIC) dataDid_u16 = (uint16)pMsgContext->reqData[1];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   721                              dataDid_u16  <<=  8u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   722                              dataDid_u16   |= (uint16)pMsgContext->reqData[2];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   723  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   724                              /* Call the function to get the idxIndex_u16 of DDDI in the configuration table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   725                              dataFuncRetVal_u8 = Dcm_DspGetIndexOfDDDI_u8 (dataDid_u16,&idxIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   726                              /* If the DDDI is supported and the idxIndex_u16 is obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   727                              if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   728                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   729                                  VAR (Dcm_DIDIndexType_tst,AUTOMATIC) idxDidIndexType_st;    /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   730                                  /* Call the function to get the idxIndex_u16 of the DID from Dcm_DIDConfig*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   731                                  dataFuncRetVal_u8 = Dcm_GetIndexOfDID (dataDid_u16,&idxDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   732  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   733                                  /* Check if the DID is supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   734                                  if((dataFuncRetVal_u8 == E_OK) && (idxDidIndexType_st.dataRange_b ==FALSE)&& (*Dcm_DIDIsAvail[Dcm_DIDConfig[idxDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16] != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   735                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   736                                      if((*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[Dcm_DIDConfig[idxDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16]))(dataDid_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   737                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   738                                          dataFuncRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   739                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   740                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   741  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   742                                  if(dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   743                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   744                                      /* If the DDDI is supported in current session and the idxIndex_u16 is obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   745                                      if (((Dcm_DsldGetActiveSessionMask_u32() & \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   746                                              (Dcm_DIDConfig[idxDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst->dataAllowedSessRead_u32))!= 0x00uL))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   747                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   748                                          /* If the DDDI is supported in current security level */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   749                                          if((Dcm_DsldGetActiveSecurityMask_u32()& \ 
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   750                                                  (Dcm_DIDConfig[idxDidIndexType_st.idxIndex_u16].adrExtendedConfig_pcst->dataAllowedSecRead_u32))!=0x00uL)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   751                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   752                                              P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) stContext_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   753                                              P2VAR (Dcm_DddiRecord_tst,AUTOMATIC,DCM_INTERN_DATA) adrRecord_pst =
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   754                                                      Dcm_DDDIBaseConfig_cast[idxIndex_u16].addrRecord_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   755  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   756                                              /* Calculate the number of blocks in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   757                                              VAR (uint16,AUTOMATIC) nrBlocks_u16 = (uint16)(dataReqMsgLen_u16/dataBlockLen_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   758  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   759                                              stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   760                                              /* If the number of records already defined for the DDDI + number of records in the request
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   761                                                 exceeds total number of records allowed for the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   762                                              if ((nrBlocks_u16+(stContext_st->nrCurrentlyDefinedRecords_u16)) <=
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   763                                                      Dcm_DDDIBaseConfig_cast[idxIndex_u16].nrMaxNumOfRecords_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   764                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   765                                                  P2CONST (uint8,AUTOMATIC,DCM_INTERN_CONST) adrSourceBuffer_pcu8 = &pMsgContext->reqData[4];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   766                                                      /* updating the active DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   767                                                      s_ActiveDDDI_u16 = Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   768  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   769                                                      /* store the index for future use in case the storing of DDDID returns Pending */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   770                                                      s_idxIndexForStore_u16 = idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   771  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   772                                                  /* Call the function to add the record to the current definition of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   773                                                  dataFuncRetVal_u8=Dcm_DcmDddiAddMemRecords_u8(nrBlocks_u16,stContext_st->nrCurrentlyDefinedRecords_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   774                                                          adrSourceBuffer_pcu8,adrRecord_pst,dataNegRespCode_u8, nrBytesForAddress_u8,nrBytesForLength_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   775                                                          idxIndex_u16,(pMsgContext->resMaxDataLen-2u));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   776                                                  /* If all records are successfully added to the definition of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   777                                                  if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   778                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   779                                                      /* Update number of currently defined records for the DDDI/PDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   780                                                      stContext_st->nrCurrentlyDefinedRecords_u16 = (uint16)(stContext_st->nrCurrentlyDefinedRecords_u16 + nrBlocks_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   781                                                      stContext_st=Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   782                                                      stContext_st->nrCurrentlyDefinedRecords_u16 = (uint16)(stContext_st->nrCurrentlyDefinedRecords_u16 + nrBlocks_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   783  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   784                                                      /* Change the state to Send Response*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   785                                                      Dcm_DspStDddi_en = DCM_DDDI_SENDRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   786                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   787                                                  else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   788                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   789                                                      /* wait and come back to the service */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   790                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   791                                                  /* If any record is not added to the DDDI definition successfully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   792                                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   793                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   794                                                      /* Negative response code already set within function Dcm_DcmDddiAddMemRecords_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   795                                                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   796                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   797                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   798                                              /* If the total number of records defined for DDDI exceeds the maximum number allowed */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   799                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   800                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   801                                                  *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   802                                                  Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   803                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   804                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   805                                          /*IF DDDI is not supported in the current active security level*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   806                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   807                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   808                                              *dataNegRespCode_u8      = DCM_E_SECURITYACCESSDENIED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   809                                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   810                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   811                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   812                                      /*If DDDI is not supported in current active session*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   813                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   814                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   815                                          *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   816                                          Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   817                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   818                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   819                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   820                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   821                                      *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   822                                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   823                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   824                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   825                              /* If the DDDI/PDI is not supported */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   826                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   827                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   828                                  *dataNegRespCode_u8      = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   829                                  Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   830                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   831                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   832                          /* For incorrect request length for subfunction 0x02 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   833                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   834                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   835                              *dataNegRespCode_u8      = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   836                              Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   837                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   838                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   839                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   840                  /* If the request length is less than the minimum request length for the subfunction */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   841                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   842                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   843                      /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   844                      *dataNegRespCode_u8      = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   845                      Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   846                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   847              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   848              /* If the subfunction in the request is invalid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   849              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   850              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   851                  /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   852                  *dataNegRespCode_u8      = DCM_E_SUBFUNCTIONNOTSUPPORTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   853                  Dcm_DspStDddi_en = DCM_DDDI_NEGRESP;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   854              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   855          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   856  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   857          /* if storing of DDDIDs is enabled, then call the application accordingly. Otherwise, just trigger Dcm_ProcessingDone call */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   858          if(Dcm_DspStDddi_en == DCM_DDDI_SENDRESP)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   859          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   860              dataSubFunction_u8=pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   861              if((dataSubFunction_u8==DCM_DDDI_CLEAR_DYNAMIC_IDENTIFIER) && (pMsgContext->reqDataLen == DCM_DDDI_MIN_LENGTH))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   862              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   863  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   864                  s_isWriteOrClear_en = DCM_DDDI_CLEARALL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   865                  /* calling the application to store the DDDI definition in NvM. In this case, stored DDDIDs in NvM shall be cleared by the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   866                  dataRetValFromNvMStorage_u8 = DcmAppl_DcmWriteOrClearDddiInNvM(NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   867                          0,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   868                          Dcm_DspDddidOpStatus_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   869                          s_isWriteOrClear_en);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   870                  if(dataRetValFromNvMStorage_u8==DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   871                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   872                      /* change the opstatus to PENDING */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   873                      Dcm_DspDddidOpStatus_u8 = DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   874                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   875                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   876                  else if(dataRetValFromNvMStorage_u8 != E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   877                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   878                      /* Reporting the DET error */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   879                      DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_NVM_UPDATION_NOT_OK )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   880                              /* clearing the opstatus for storing the DDDID in NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   881                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   882                      /* clearing the DDDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   883                      s_ActiveDDDI_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   884                      s_idxIndexForStore_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   885                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   886                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   887                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   888                      /**dummy else*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   889                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   890                  if(dataRetValFromNvMStorage_u8!= DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   891                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   892                      /* clearing the opstatus for storing the DDDID in NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   893                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   894                      /* clearing the DDDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   895                      s_ActiveDDDI_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   896                      s_idxIndexForStore_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   897                      dataRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   898                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   899  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   900                  if(Dcm_DspDddidOpStatus_u8 != DCM_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   901                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   902                      /* Copy the sub function byte from source buffer to target buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   903                      pMsgContext->resData[0] = pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   904  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   905                      /* Set final response length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   906                      pMsgContext->resDataLen =  1;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   907                      Dcm_DspStDddi_en = DCM_DDDI_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   908                      dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   909                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   910              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   911              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   912              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   913  #if(DCM_CFG_DSP_DDDISTORINGTONVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   914                  if((dataSubFunction_u8==DCM_DDDI_CLEAR_DYNAMIC_IDENTIFIER) && (pMsgContext->reqDataLen == (DCM_DDDI_MIN_LENGTH + 2u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   915                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   916                      s_isWriteOrClear_en = DCM_DDDI_CLEAR;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   917                      /* calling the application to store the DDDI definition in NvM. In this case, stored DDDIDs in NvM shall be cleared by the application */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   918                      dataRetValFromNvMStorage_u8 = DcmAppl_DcmWriteOrClearDddiInNvM(NULL_PTR,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   919                              s_ActiveDDDI_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   920                              Dcm_DspDddidOpStatus_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   921                              s_isWriteOrClear_en);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   922                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   923                  else if((dataSubFunction_u8==DCM_DEFINITION_BY_ID)||(dataSubFunction_u8==DCM_DEFINITION_BY_MEMORYADDRESS))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   924                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   925                      s_isWriteOrClear_en = DCM_DDDI_WRITE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   926                      /* calling the application to store the DDDI definition in NvM. In this case, DDDID shall be written into NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   927                      dataRetValFromNvMStorage_u8 = DcmAppl_DcmWriteOrClearDddiInNvM(&Dcm_DDDIBaseConfig_cast[s_idxIndexForStore_u16],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   928                              s_ActiveDDDI_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   929                              Dcm_DspDddidOpStatus_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   930                              s_isWriteOrClear_en);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   931                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   932                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   933                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   934                      /* dummy else */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   935                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   936                  if(dataRetValFromNvMStorage_u8==DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   937                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   938                      /* change the opstatus to PENDING */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   939                      Dcm_DspDddidOpStatus_u8 = DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   940                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   941                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   942                  else if(dataRetValFromNvMStorage_u8 != E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   943                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   944                      /* Reporting the DET error */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   945                      DCM_DET_ERROR(DCM_DDDI_ID , DCM_E_NVM_UPDATION_NOT_OK )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   946                     /* clearing the opstatus for storing the DDDID in NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   947                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   948                      /* clearing the static variable */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   949                      s_idxIndexForStore_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   950                      /* clearing the DDDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   951                      s_ActiveDDDI_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   952                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   953                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   954                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   955                      /*Dummy else**/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   956                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   957                  if(dataRetValFromNvMStorage_u8!= DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   958                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   959                      /* clearing the static variable */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   960                      s_idxIndexForStore_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   961                      /* clearing the opstatus for storing the DDDID in NvM */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   962                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   963                      /* clearing the DDDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   964                      s_ActiveDDDI_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   965                      dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   966                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   967  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   968                  if( Dcm_DspDddidOpStatus_u8 != DCM_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   969                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   970                      /* Copy the sub-function byte and the DDDI from the source buffer to target buffer */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   971                      pMsgContext->resData[2] = pMsgContext->reqData[2];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   972                      pMsgContext->resData[1] = pMsgContext->reqData[1];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   973                      pMsgContext->resData[0] = pMsgContext->reqData[0];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   974  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   975                      /* Set final response length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   976                      pMsgContext->resDataLen =  3;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   977                      /* reset the opstatus */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   978                      Dcm_DspDddidOpStatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   979                      /* reset the state of DDDID state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   980                      Dcm_DspStDddi_en = DCM_DDDI_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   981                      /* Send positive response */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   982                      dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   983                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   984  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   985              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   986          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   987  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   988          /* If an error was encountered and negative response code is set*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   989          if (Dcm_DspStDddi_en == DCM_DDDI_NEGRESP)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   990          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   991              /* Update the state machine status to DCM_DDDI_IDLE */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   992              Dcm_DspStDddi_en = DCM_DDDI_IDLE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   993              dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   994          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   995      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   996      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   997  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   998  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	   999  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1000   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1001   * Dcm_DddiResetCompleteContext
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1002   *  A processing context gets reset by call to this function including the definition for the DID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1003   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1004   * \param           adrContext_pst The pointer to the Context to be reset
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1005   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1006   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1007   * \seealso         Dcm_DddiResetProcessingInfoInContext
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1008   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1009   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1010   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1011  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1012  FUNC (void,DCM_CODE) Dcm_DddiResetCompleteContext(P2VAR(Dcm_DddiIdContext_tst, AUTOMATIC,DCM_INTERN_DATA) adrContext_pst)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1013  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1014      /* Reset the number of currently defined records ,current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1015      adrContext_pst->nrCurrentlyDefinedRecords_u16=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1016      adrContext_pst->posnCurrentPosInDataBuffer_u16=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1017      adrContext_pst->idxCurrentRecord_u16=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1018  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1019  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1020  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1021   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1022   * Dcm_DddiResetProcessingInfoInContext:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1023   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1024   * A processing context gets reset by call to this function with respect to the current processing status
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1025   * only. The number of records defined in this context stays unchanged.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1026   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1027   * \param           adrContext_pst The pointer to the Context to be reset
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1028   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1029   * \retval          None
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1030   * \seealso         Dcm_DddiResetCompleteContext
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1031   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1032   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1033   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1034  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1035  FUNC (void,DCM_CODE) Dcm_DddiResetProcessingInfoInContext (
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1036          P2VAR(Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) adrPtrToContext_pst
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1037  )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1038  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1039      /* Reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1040      adrPtrToContext_pst->posnCurrentPosInDataBuffer_u16=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1041      adrPtrToContext_pst->idxCurrentRecord_u16=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1042  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1043  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1044  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1045   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1046   * Dcm_DddiReadById_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1047   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1048   * read data from an DDID as per the specification in a DynamicalDefinedID record
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1049   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1050   * \param     adrRecord_pst: The pointer to the Dcm_DddiDefId_tst specifies from which DID this function shall
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1051   *                    read how many bytes using which offset
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1052   *            adrLength_pu16: The reference in which to tell the calling function how many bytes were filled in.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1053   *            adrData_pu8: The pointer to RAM were to put the memory content
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1054   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1055   * \retval    E_OK:      in case of success
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1056   *            DCM_E_PENDING: in case of more time is required and the function needs to be called again
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1057   *            E_NOT_OK:  in case the DDID could not be read
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1058   * \seealso   DcmAppl_DDDI_Read_Memory
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1059   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1060   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1061   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1062  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1063  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1064  FUNC (Std_ReturnType,DCM_CODE) Dcm_DddiReadById_u8 (P2CONST (Dcm_DddiDefId_tst,AUTOMATIC,DCM_INTERN_CONST) adrRecord_pst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1065          P2VAR (uint16,AUTOMATIC,DCM_INTERN_DATA) adrLength_pu16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1066          P2VAR (uint8,AUTOMATIC,DCM_INTERN_DATA) adrData_pu8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1067  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1068      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1069      VAR (Std_ReturnType, AUTOMATIC)  dataReadIfcRetVal_u8; /* Local variable to store the return value of Read function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1070  #if(DCM_CFG_DSP_DIDBUFFER == DCM_STACK_BUFFER)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1071      VAR (uint8,AUTOMATIC) Dcm_DspDidBuffer_au8[DCM_CFG_LONGESTSINGLEDID]; /* Temporary buffer to store data of record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1072  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1073      static VAR (uint8,AUTOMATIC) Dcm_DspDidBuffer_au8[DCM_CFG_LONGESTSINGLEDID];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1074  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1075      /*If Current Did Range Status is valid or not*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1076      if(FALSE == adrRecord_pst->stCurrentDidRangeStatus_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1077      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1078          s_Dcm_idxSrcDidIndexType_st.idxIndex_u16 = adrRecord_pst->idxOfDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1079          /*data range of did is set to value FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1080          s_Dcm_idxSrcDidIndexType_st.dataRange_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1081  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1082          dataReadIfcRetVal_u8 = Dcm_GetDIDData(&s_Dcm_idxSrcDidIndexType_st,Dcm_DspDidBuffer_au8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1083      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1084      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1085      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1086  #if ( DCM_CFG_DIDRANGE_EXTENSION != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1087          s_Dcm_idxSrcDidIndexType_st.dataRangeDid_16 = adrRecord_pst->dataSrcDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1088  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1089          /*Data range of Did is a range did*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1090          s_Dcm_idxSrcDidIndexType_st.dataRange_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1091          dataReadIfcRetVal_u8 = Dcm_GetDIDData(&s_Dcm_idxSrcDidIndexType_st,Dcm_DspDidBuffer_au8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1092      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1093      if(s_Dcm_idxSrcDidIndexType_st.dataNegRespCode_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1094      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1095          switch (dataReadIfcRetVal_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1096          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1097              /* IF data is read successfully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1098              case (Std_ReturnType)E_OK:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1099                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1100                  /*MR12 DIR 1.1 VIOLATION:This is required for implememtaion as DCM_MEMCOPY takes void pointer as input and object type pointer is converted to void pointer*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1101                  DCM_MEMCOPY(adrData_pu8, &Dcm_DspDidBuffer_au8[adrRecord_pst->posnInSourceDataRecord_u8-1],adrRecord_pst->dataMemorySize_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1102                  /* Updating the length with the current record length */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1103                  *adrLength_pu16 = adrRecord_pst->dataMemorySize_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1104                  s_Dcm_idxSrcDidIndexType_st.nrNumofSignalsRead_u16 = 0x0;   /*All the signals read correctly, therefore reset it to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1105                  s_Dcm_idxSrcDidIndexType_st.dataSignalLengthInfo_u32 = 0x0; /*All the signals read correctly, therefore reset the signal data length to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1106                  dataRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1107                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1108              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1109              case (Std_ReturnType)DCM_E_PENDING:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1110                      dataRetVal_u8 = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1111              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1112  #if (DCM_CFG_DSP_NVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1113              case (Std_ReturnType)DCM_E_REQUEST_ENV_NOK:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1114                      s_Dcm_idxSrcDidIndexType_st.nrNumofSignalsRead_u16 = 0x0;   /*All the signals not read correctly, therefore reset it to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1115              s_Dcm_idxSrcDidIndexType_st.dataSignalLengthInfo_u32 = 0x0; /*All the signals read correctly, therefore reset the signal data length to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1116              dataRetVal_u8 = DCM_E_REQUEST_ENV_NOK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1117              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1118  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1119              /*If data is not read successfully*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1120              case (Std_ReturnType)E_NOT_OK:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1121              default:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1122                  s_Dcm_idxSrcDidIndexType_st.nrNumofSignalsRead_u16 = 0x0;   /*All the signals not read correctly, therefore reset it to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1123                  s_Dcm_idxSrcDidIndexType_st.dataSignalLengthInfo_u32 = 0x0; /*All the signals read correctly, therefore reset the signal data length to zero*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1124                  dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1125                  break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1126          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1127      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1128      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1129      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1130          dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1131      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1132      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1133  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1134  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1135  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1136   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1137   * Dcm_DddiRead_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1138   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1139   * Read data from the complete DDID as per the specification in the array of DynamicalDefinedID records passed
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1140   * as an argument. The status of the processing in this function is stored in the one of the contexts of the
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1141   * DID; one for readDataByIdentifier Service and one for ReadDataByPeriodicDataIdentifier.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1142   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1143   * \param    adrConfig_pcst:       Reference to the records for which the processing shall be performed
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1144   *           adrData_pu8:     The pointer to the message buffer were the DID shall be written to.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1145   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1146   * \retval   E_OK:      in case of success
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1147   *           DCM_E_PENDING: in case of more time is required and the function needs to be called again
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1148   *           E_NOT_OK:  in case the DDID could not be read
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1149   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1150   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1151   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1152   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1153  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1154  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1155  FUNC (Std_ReturnType,DCM_CODE) Dcm_DddiRead_u8 (P2CONST (Dcm_DddiMainConfig_tst,AUTOMATIC,DCM_INTERN_CONST) adrConfig_pcst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1156          P2VAR (uint8,AUTOMATIC,DCM_INTERN_DATA) adrData_pu8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1157          P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1158  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1159      /* Local variable to store return value of function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1160      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1161  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1162      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) adrContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1163      /* if periodic scheduler is running */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1164      /* MR12 RULE 14.4 VIOLATION: Controlling expression is not 'essentially Boolean' expression. MISRA C:2012 Rule-14.4*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1165      if (Dcm_PeriodicSchedulerRunning_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1166      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1167          adrContext_pst = adrConfig_pcst->dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1168      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1169      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1170      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1171          adrContext_pst = adrConfig_pcst->dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1172      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1173      if(adrContext_pst->nrCurrentlyDefinedRecords_u16>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1174      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1175          /* Looping through the defined records */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1176          while ((adrContext_pst->idxCurrentRecord_u16 < adrContext_pst->nrCurrentlyDefinedRecords_u16) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1177                  (dataRetVal_u8 == E_OK))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1178          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1179              /* If the record has definition type as DCM_DEFINITION_BY_ID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1180              if (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_ID)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1181              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1182                  VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8; /* Local variable to store return value of API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1183                  VAR (uint16,AUTOMATIC) dataLength_u16; /* Local variable to store length of record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1184                  /* Call the function to read  the data corresponding to the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1185                  dataFuncRetVal_u8 = Dcm_DddiReadById_u8 (&(adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1186                          &dataLength_u16,&adrData_pu8[adrContext_pst->posnCurrentPosInDataBuffer_u16]);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1187                  /* If data is read successfully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1188                  if (dataFuncRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1189                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1190                      /* Update the current position of record in data buffer and record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1191                      adrContext_pst->posnCurrentPosInDataBuffer_u16 = (uint16)(adrContext_pst->posnCurrentPosInDataBuffer_u16 + dataLength_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1192                      adrContext_pst->idxCurrentRecord_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1193                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1194                  else if (dataFuncRetVal_u8 == E_NOT_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1195                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1196                      dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1197                      /* Call the function to reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1198                      Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1199                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1200                  else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1201                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1202                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1203                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1204  #if (DCM_CFG_DSP_NVRAM_ENABLED != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1205                  else if (dataFuncRetVal_u8 == DCM_E_REQUEST_ENV_NOK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1206                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1207                      dataRetVal_u8=DCM_E_REQUEST_ENV_NOK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1208                      /* Calling API to reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1209                      Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1210                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1211  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1212                  /* For any other return values */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1213                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1214                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1215                      dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1216                      /* Calling API to reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1217                      Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1218                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1219              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1220              /* If the record has definition type as DCM_DEFINITION_BY_MEMORYADDRESS */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1221              else if (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_MEMORYADDRESS)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1222              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1223                  VAR (Dcm_ReadMemoryRet_t,AUTOMATIC) dataFuncRetVal_en; /* Local variable to store return value of API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1224  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1225                  /* Call the API to read  the data corresponding to the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1226                  dataFuncRetVal_en =DcmAppl_Dcm_ReadMemory (Dcm_DspDddidOpStatus_u8,0,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1227                          (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.adrDddiMem_u32),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1228                          (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.dataMemLength_u32),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1229                          &adrData_pu8[adrContext_pst->posnCurrentPosInDataBuffer_u16],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1230                          dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1231  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1232                  if (dataFuncRetVal_en == DCM_READ_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1233                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1234                      *dataNegRespCode_u8 =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1235                      /* Update the current position of record in data buffer and record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1236                      adrContext_pst->posnCurrentPosInDataBuffer_u16 = (uint16)(adrContext_pst->posnCurrentPosInDataBuffer_u16 + adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.dataMemLength_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1237                      adrContext_pst->idxCurrentRecord_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1238                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1239                  else if (dataFuncRetVal_en == DCM_READ_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1240                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1241                      *dataNegRespCode_u8 =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1242                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1243                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1244                  else if(dataFuncRetVal_en == DCM_READ_FORCE_RCRRP)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1245                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1246                      *dataNegRespCode_u8 =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1247                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1248                      /* Trigger DSL/DSD to send NRC-78 forcefully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1249                      (void)Dcm_ForceRespPend();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1250                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1251                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1252                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1253                      dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1254                      if(*dataNegRespCode_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1255                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1256                          *dataNegRespCode_u8=DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1257                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1258                      /* Call the function to reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1259                      Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1260                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1261  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1262              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1263              /* If definition type is invalid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1264              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1265              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1266                  dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1267                  Dcm_DddiResetCompleteContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1268              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1269          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1270      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1271      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1272      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1273          dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1274      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1275      if (dataRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1276      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1277          /* Call the function to reset the current position in data buffer and current record idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1278          Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1279      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1280      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1281  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1282  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1283  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1284  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1285   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1286   * Dcm_DspGetIndexOfDDDI_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1287   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1288   * Determine the idxIndex_u16 of the entry for the DID in the table Dcm_DDDIBaseConfig_cast.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1289   * Dcm_DDDIBaseConfig_cast holds all defined DIDs and PDID.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1290   * Dcm_DDDIBaseConfig_cast needs to be sorted by the field id.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1291   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1292   * \param   dataDid_u16: The dataDid_u16 searched for
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1293   *          idxIndex_u16: A reference to which the idxIndex_u16 is written in case of success.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1294   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1295   * \retval   E_OK: The dataDid_u16 is configured and was found.The idxIndex_u16 is written to the argument idxIndex_u16 passed to this
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1296   *           function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1297   *           DCM_E_REQUEST_NOT_ACCEPTED: The dataDid_u16 was not found. The argument idxIndex_u16 is not modified.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1298   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1299   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1300   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1301   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1302  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1303  FUNC (Std_ReturnType,DCM_CODE) Dcm_DspGetIndexOfDDDI_u8 (VAR (uint16,AUTOMATIC) dataDid_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1304          P2VAR (uint16,AUTOMATIC,DCM_INTERN_DATA) idxIndex_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1305  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1306      VAR (uint32,         AUTOMATIC) posnValue_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1307      VAR (uint32,         AUTOMATIC) posnStart_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1308      VAR (uint32,         AUTOMATIC) posnEnd_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1309      VAR (uint32,         AUTOMATIC) dataSize_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1310      VAR (Std_ReturnType, AUTOMATIC) dataRetVal_u8;            /* read interface return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1311      dataRetVal_u8=DCM_E_REQUEST_NOT_ACCEPTED;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1312  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1313      /* Storing the number of DDDIs configured */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1314      dataSize_u32 = Dcm_DddiCalculateTableSize_u16 ();
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1315      posnStart_u32 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1316      posnEnd_u32 = dataSize_u32 -1u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1317      posnValue_u32 = posnEnd_u32/2u;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1318  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1319      /* If First element is the matching local id */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1320      if (Dcm_DDDIBaseConfig_cast[posnStart_u32].dataDddId_u16 == dataDid_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1321      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1322          *idxIndex_u16=(uint16)posnStart_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1323          dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1324      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1325      /* If Last element is the matching local id */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1326      else if (Dcm_DDDIBaseConfig_cast[posnEnd_u32].dataDddId_u16 == dataDid_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1327      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1328          *idxIndex_u16=(uint16)posnEnd_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1329          dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1330      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1331      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1332      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1333          while (posnValue_u32 > 0u)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1334          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1335              posnValue_u32 += posnStart_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1336              if (Dcm_DDDIBaseConfig_cast[posnValue_u32].dataDddId_u16 == dataDid_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1337              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1338                  *idxIndex_u16=(uint16)posnValue_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1339                  dataRetVal_u8=E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1340                  break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1341              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1342              else if (Dcm_DDDIBaseConfig_cast[posnValue_u32].dataDddId_u16 > dataDid_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1343              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1344                  posnEnd_u32 = posnValue_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1345              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1346              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1347              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1348                  posnStart_u32 = posnValue_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1349              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1350              posnValue_u32 = (posnEnd_u32-posnStart_u32)/2u ;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1351          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1352      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1353      return (dataRetVal_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1354  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1355  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1356  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1357  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1358   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1359   * Dcm_DcmDddiAddIdRecords_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1360   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1361   * Add DDDI-Records to the internal data structure which is evaluated on RDBI for DDDIs.  The function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1362   * evaluates one or more blocks from the request and checks the support and the availability of the IDs
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1363   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1364   * \param nrBlocks_u16: The number of blocks in the request. A block consists of the sourceDataIdentifier[],
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1365   *                     posnInSourceDataRecord_u8 and dataMemorySize_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1366   *        nrCurrentlyDefinedRecords_u16: The number of blocks defined in this DDDI till now (to support appending)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1367   *        adrSourceBuffer_pcu8: Pointer to the message Buffer
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1368   *        adrRecord_pst: Pointer to the DDDI's record
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1369   *        dataNegRespCode_u8: Pointer to a Byte in which to store a negative Response code in case of detection of
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1370   *                     an error in the request.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1371   *        idxIndex_u16 : Index of the DDDI in the DDDI configuration table
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1372   *        nrResponseBufferLen_u32 : Maximum response buffer length available for the DDDI data for the current active protocol
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1373   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1374   * \retval    E_OK: Message was O.K. and the blocks (as defined in nrBlocks_u16 ) were successfully added to the record
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1375   *            E_NOT_OK:  an error was detected and the Negative Response code was set by this function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1376   *            DCM_E_PENDING: in case of more time is required and the function needs to be called again
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1377   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1378   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1379   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1380   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1381  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1382  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1383  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1384  FUNC (Std_ReturnType,DCM_CODE) Dcm_DcmDddiAddIdRecords_u8 (VAR (uint16,AUTOMATIC)nrBlocks_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1385          VAR (uint16,AUTOMATIC) nrCurrentlyDefinedRecords_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1386          P2CONST (uint8,AUTOMATIC,DCM_INTERN_CONST) adrSourceBuffer_pcu8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1387          P2VAR (Dcm_DddiRecord_tst,AUTOMATIC,DCM_INTERN_DATA) adrRecord_pst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1388          P2VAR (Dcm_NegativeResponseCodeType, AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1389          VAR (uint16,AUTOMATIC) idxIndex_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1390          VAR (Dcm_MsgLenType,AUTOMATIC) nrResponseBufferLen_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1391  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1392      /* Local variable to store the return value of the function Dcm_DddiGetLen_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1393      VAR (Std_ReturnType,AUTOMATIC) dataRetValGetLen_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1394  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1395      /* Local variable to store the return value of function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1396      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1397      VAR (boolean, AUTOMATIC) flgRdpi_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1398      static VAR (uint16,AUTOMATIC) Dcm_dataDID_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1399  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1400      flgRdpi_b = FALSE ;            /* read interface return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1401      dataRetVal_u8        = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1402  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1403      if (Dcm_stAddIdRecords_en==DCM_DDDI_DEFINE_BY_ID_INIT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1404      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1405          /* Initialize the idxIndex_u16 of current block to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1406          Dcm_AddIdCurrentBlockIndex_u16 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1407          Dcm_stAddIdRecords_en            = DCM_DDDI_DEFINE_BY_ID_GETINDEX;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1408          /* Initialize the current length of DDDI to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1409          Dcm_AddIdCurrentLength_u32     = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1410          s_dataLength_u32 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1411          s_dataFunctionRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1412          s_dataLengthFuncRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1413      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1414  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1415      /* Call the function to get the current length of records of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1416      dataRetValGetLen_u8=Dcm_DddiGetLen_u8 (&Dcm_DDDIBaseConfig_cast[idxIndex_u16], &Dcm_AddIdCurrentLength_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1417      if(dataRetValGetLen_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1418      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1419          /* Loop till all the records are added and no error occurs while adding the records to the DDDI definition */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1420          while ((Dcm_AddIdCurrentBlockIndex_u16<nrBlocks_u16) && (dataRetVal_u8==E_OK))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1421          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1422              if (Dcm_stAddIdRecords_en == DCM_DDDI_DEFINE_BY_ID_GETINDEX)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1423              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1424                  /* Variable to store return value of function Dcm_GetIndexOfDID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1425                  VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1426                  VAR (uint16,        AUTOMATIC) dataDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1427  #if(DCM_CFG_RDBIPAGEDBUFFERSUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1428                  VAR (uint16,        AUTOMATIC) idxLoop_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1429  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1430  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1431                  /* Get the DID(source identifier) of the current record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1432                  dataDid_u16=(uint16)((uint16)(((uint16)adrSourceBuffer_pcu8[Dcm_AddIdCurrentBlockIndex_u16*DCM_DDDI_DEFINE_BY_ID_BLOCKLENGTH])<<8u)+
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1433                          ((uint8)adrSourceBuffer_pcu8[(Dcm_AddIdCurrentBlockIndex_u16*DCM_DDDI_DEFINE_BY_ID_BLOCKLENGTH)+1u]));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1434                  Dcm_dataDID_u16=dataDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1435  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1436                  /* Check if the DDDI to be added is same as the source DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1437                  /* If yes, then set the NRC to 0x31 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1438                  if(dataDid_u16 == Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1439                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1440                      *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1441                      Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1442                      dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1443                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1444                  /* If the record to be added is not referring to the source DDDI*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1445                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1446                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1447                      /* Call the function to get the idxIndex_u16 of the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1448                      dataFuncRetVal_u8 = Dcm_GetIndexOfDID (dataDid_u16,&s_Dcm_idxSrcDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1449                      if(E_OK == dataFuncRetVal_u8 )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1450                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1451  #if(DCM_CFG_DSP_NUMISDIDAVAIL>0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1452                          /* Check if the DID is supported in current variant */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1453  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1454                          if((s_Dcm_idxSrcDidIndexType_st.dataRange_b ==FALSE)&& (*Dcm_DIDIsAvail[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16] != NULL_PTR))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1455                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1456                              if((*(IsDIDAvailFnc_pf)(Dcm_DIDIsAvail[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].idxDIDSupportedFnc_u16]))(dataDid_u16)!=E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1457                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1458                                  dataFuncRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1459                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1460                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1461  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1462  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1463                          /*Check if the src DID to be added has use port of type USE_RDBI_PAGED_FNC, if yes reject the DID and send NRC0x31 for the same*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1464  #if(DCM_CFG_RDBIPAGEDBUFFERSUPPORT != DCM_CFG_OFF)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1465                          if(E_OK == dataFuncRetVal_u8 )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1466                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1467                              for(idxLoop_u16=0;idxLoop_u16<Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].nrSig_u16;idxLoop_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1468                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1469                                  if(Dcm_DspDataInfo_st[Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].adrDidSignalConfig_pcst[idxLoop_u16].idxDcmDspDatainfo_u16].usePort_u8 == USE_DATA_RDBI_PAGED_FNC)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1470                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1471                                      dataFuncRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1472                                      *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1473                                      break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1474                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1475                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1476                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1477  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1478                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1479  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1480                      /* If the DID is supported */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1481                      if (dataFuncRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1482                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1483                          VAR (Dcm_DIDIndexType_tst,AUTOMATIC) idxsrcDidIndexType_st; /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1484                          /* Call the function to get the idxIndex_u16 of the DID from Dcm_DIDConfig*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1485                          dataFuncRetVal_u8 = Dcm_GetIndexOfDID (Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16,&idxsrcDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1486                          if((dataFuncRetVal_u8 ==E_OK) &&  (((adrSourceBuffer_pcu8[(Dcm_AddIdCurrentBlockIndex_u16*DCM_DDDI_DEFINE_BY_ID_BLOCKLENGTH)+3u])+ Dcm_AddIdCurrentLength_u32) <=  Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].dataMaxDidLen_u16))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1487                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1488                              Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_GETSUPPORT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1489                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1490                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1491                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1492                              *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1493                              dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1494                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1495                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1496                      else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1497                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1498                          /*s_Dcm_idxSrcDidIndexType_st.dataopstatus_b=DCM_PENDING;*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1499                          dataRetVal_u8 = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1500                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1501                      /* If DID is not supported */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1502                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1503                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1504                          /* Set the negative response code and reset the state machine */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1505                          Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1506                          /*Check if flag Rdpi is set to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1507                          if(FALSE== flgRdpi_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1508                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1509                              *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1510                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1511  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1512                          dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1513                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1514                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1515              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1516              if (Dcm_stAddIdRecords_en == DCM_DDDI_DEFINE_BY_ID_GETSUPPORT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1517              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1518                  VAR (Dcm_SupportRet_t, AUTOMATIC) dataSupportInfo_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1519  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1520                  /* Call the function to check for support for the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1521                  dataSupportInfo_en=Dcm_GetSupportOfIndex (&s_Dcm_idxSrcDidIndexType_st,DCM_SUPPORT_READ,dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1522                  /* Critical: assumption is that we at least require the read access for possible later write access */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1523                  switch (dataSupportInfo_en)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1524                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1525                      case DCM_SUPPORT_OK:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1526                          Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_GETLENGTH;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1527                          s_dataLength_u32 = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1528                          s_dataFunctionRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1529                          s_dataLengthFuncRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1530                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1531                      case DCM_SUPPORT_SESSION_VIOLATED:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1532                      case DCM_SUPPORT_SECURITY_VIOLATED:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1533                      case DCM_SUPPORT_CONDITION_VIOLATED:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1534                          /* Negative Response code is already set by function Dcm_GetSupportOfIndex */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1535                          Dcm_stAddIdRecords_en=DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1536                          dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1537                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1538                      case DCM_SUPPORT_CONDITION_PENDING:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1539                          /* Keep the status unchanged and get back to this function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1540                          dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1541                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1542                      default:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1543                          /* Reset the state and set the return value and negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1544                          Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1545                          dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1546                          *dataNegRespCode_u8         = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1547                          break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1548                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1549              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1550              if (Dcm_stAddIdRecords_en == DCM_DDDI_DEFINE_BY_ID_GETLENGTH)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1551              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1552                  if(((s_dataFunctionRetVal_u8==E_OK)&&(s_dataLengthFuncRetVal_u8==E_OK))||(s_dataFunctionRetVal_u8==DCM_E_PENDING))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1553                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1554  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1555                      /* Call the function to get the length of the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1556                      s_dataFunctionRetVal_u8 = Dcm_GetLengthOfDIDIndex (&s_Dcm_idxSrcDidIndexType_st,&s_dataLength_u32,Dcm_dataDID_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1557  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1558                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1559  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1560                  if (s_dataFunctionRetVal_u8==E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1561                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1562                      /* Check if the length returned is less than the size configured for the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1563  #if ( DCM_CFG_DIDRANGE_EXTENSION != DCM_CFG_OFF )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1564                      /*If the did is a range did or not and Maximum size of the DID including Gaps is less than or equal to configured Did */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1565                      if(((s_dataLength_u32 <=  Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].dataMaxDidLen_u16) && (FALSE== s_Dcm_idxSrcDidIndexType_st.dataRange_b)) ||((s_dataLength_u32 <=  Dcm_DIDRangeConfig_cast[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].dataMaxDidLen_u16)&& (FALSE != s_Dcm_idxSrcDidIndexType_st.dataRange_b )))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1566  #else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1567                          if ( s_dataLength_u32 <=  Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].dataMaxDidLen_u16 )
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1568  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1569                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1570                              /* Get the posnInSourceDataRecord_u8 for the current record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1571                              VAR (uint8,AUTOMATIC) posnInSourceDataRecord_u8=
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1572                                      adrSourceBuffer_pcu8[(Dcm_AddIdCurrentBlockIndex_u16*DCM_DDDI_DEFINE_BY_ID_BLOCKLENGTH)+2u];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1573                              /* Check if the posnInSourceDataRecord_u8 is zero */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1574                              /* Valid range for posnInSourceDataRecord_u8 starts at value 1 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1575                              if (posnInSourceDataRecord_u8==0)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1576                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1577                                  /* Reset the state machine and set the negative response code and the return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1578                                  Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1579                                  *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1580                                  dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1581                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1582                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1583                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1584                                  /* Get the memory size for the current record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1585                                  VAR (uint8,AUTOMATIC) dataMemorySize_u8=
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1586                                          adrSourceBuffer_pcu8[(Dcm_AddIdCurrentBlockIndex_u16*DCM_DDDI_DEFINE_BY_ID_BLOCKLENGTH)+3u];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1587                                  /* If memory size is greater than length of the DID or if the dataMemorySize_u8 bytes of data
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1588                                 from posnInSourceDataRecord_u8  exceeds actual number of bytes of data available */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1589                                  if ((s_dataLength_u32+1u) >= (posnInSourceDataRecord_u8+dataMemorySize_u8))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1590                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1591                                      /* Error Indicator */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1592                                      /*Error Indicator flag value set to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1593                                      VAR(boolean,AUTOMATIC) flgErrorIndn_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1594                                      /*Initialize the variable value to FALSE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1595                                      VAR(boolean,AUTOMATIC) flgValidDef_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1596                                      VAR(uint16,AUTOMATIC) idxSignal1_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1597                                      VAR(uint16,AUTOMATIC) idxSignal2_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1598                                      if(FALSE== s_Dcm_idxSrcDidIndexType_st.dataRange_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1599                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1600                                          /* Call the API to get the dynamic configuration of signals of the DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1601                                          s_dataLengthFuncRetVal_u8 = Dcm_GetDynamicSignalConfiguration(s_Dcm_idxSrcDidIndexType_st.idxIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1602                                          if(s_dataLengthFuncRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1603                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1604                                              /* Loop for all the signals configured for this DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1605                                              for(idxSignal1_u16=0; (idxSignal1_u16 < Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].nrSig_u16)&&(flgErrorIndn_b==FALSE);idxSignal1_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1606                                              {   /* Check if the Position in the request is the Start position of the current signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1607                                                  if((Dcm_DynamicSignalConfig_cast[idxSignal1_u16].sigPosnBit_u32) ==((posnInSourceDataRecord_u8-(uint8)1u)*8u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1608                                                  {   /* Loop through all the signals */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1609                                                      for(idxSignal2_u16=idxSignal1_u16;(idxSignal2_u16<Dcm_DIDConfig[s_Dcm_idxSrcDidIndexType_st.idxIndex_u16].nrSig_u16)&&(flgErrorIndn_b==FALSE);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1610                                                              idxSignal2_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1611                                                      {   /* Check if the Size in the request ends at the Signal boundary */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1612                                                          if(((Dcm_DynamicSignalConfig_cast[idxSignal2_u16].sigPosnBit_u32) +
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1613                                                                  (Dcm_DynamicSignalConfig_cast[idxSignal2_u16].sigDataSize_u32)) ==
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1614                                                                          (((posnInSourceDataRecord_u8-(uint8)1u) + dataMemorySize_u8)*8u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1615                                                          {   /* Valid position and size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1616                                                              /*Set the variable value to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1617                                                              flgValidDef_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1618                                                              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1619                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1620                                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1621                                                          {   /* Check if the size in the request is ending in the middle of the signal */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1622                                                              if(((Dcm_DynamicSignalConfig_cast[idxSignal2_u16].sigPosnBit_u32) +
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1623                                                                      (Dcm_DynamicSignalConfig_cast[idxSignal2_u16].sigDataSize_u32)) >
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1624                                                              ((((posnInSourceDataRecord_u8-(uint8)1u) + dataMemorySize_u8)*8u)))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1625                                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1626                                                                  /*Set the Error Indication flag value to TRUE*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1627                                                                  flgErrorIndn_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1628                                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1629                                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1630                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1631                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1632  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1633                                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1634                                                  {   /* Check if the Position in the request is in between the signals and indication flag value to FALSE */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1635                                                      if(((((Dcm_DynamicSignalConfig_cast[idxSignal1_u16].sigPosnBit_u32) < (((uint8)(posnInSourceDataRecord_u8-1)*8)))&& (((Dcm_DynamicSignalConfig_cast[idxSignal1_u16].sigPosnBit_u32)+Dcm_DynamicSignalConfig_cast[idxSignal1_u16].sigDataSize_u32)>(((uint8)(posnInSourceDataRecord_u8-1u)*8u)))))&& (flgValidDef_b == FALSE))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1636                                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1637                                                          /*Set the Error Indication flag value to TRUE */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1638                                                          flgErrorIndn_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1639                                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1640                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1641                                                  /*Check if for Error Indication*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1642                                                  if(flgValidDef_b != FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1643                                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1644                                                      break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1645                                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1646                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1647                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1648                                          /* For pending return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1649                                          else if(s_dataLengthFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1650  										{
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1651                                              /* Set the return value as E_PENDING and break out 0f the loop */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1652                                              dataRetVal_u8               = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1653  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1654                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1655                                          /* For any other return values */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1656                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1657                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1658                                              /* Set the negative response code, return value and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1659                                              *dataNegRespCode_u8         = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1660                                              Dcm_stAddIdRecords_en       = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1661                                              dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1662                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1663                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1664                                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1665                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1666                                          if(s_dataLength_u32 == (uint32)((posnInSourceDataRecord_u8-(uint8)1) + dataMemorySize_u8))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1667                                          {   /* Valid position and size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1668                                              /* dummy if */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1669  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1670                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1671                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1672                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1673                                              if(s_dataLength_u32 > (uint32)((posnInSourceDataRecord_u8-(uint8)1) + dataMemorySize_u8))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1674                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1675                                                  /*Error Indication flag is set*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1676                                                  flgErrorIndn_b = TRUE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1677                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1678  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1679                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1680                                          s_dataLengthFuncRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1681                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1682                                      if(s_dataLengthFuncRetVal_u8 != DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1683                                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1684                                          if(flgErrorIndn_b == FALSE)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1685                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1686                                              /* If current length of the DDDI + memory size is less than the size of longest single
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1687                                             DID allowed and if entire DDDI definition will fit in response buffer during read */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1688                                              if((Dcm_AddIdCurrentLength_u32+dataMemorySize_u8) <= (uint16)nrResponseBufferLen_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1689                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1690                                                  /* Update definition type,idxIndex_u16,position from where data is retrieved and size */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1691                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDefinitionType_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1692                                                  = DCM_DEFINITION_BY_ID;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1693                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.dataIdAccess_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1694                                                  idxOfDid_u16 = s_Dcm_idxSrcDidIndexType_st.idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1695                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.dataIdAccess_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1696                                                  posnInSourceDataRecord_u8 = posnInSourceDataRecord_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1697                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1698                                                  dataIdAccess_st.dataMemorySize_u8 =  dataMemorySize_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1699                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1700                                                  dataIdAccess_st.stCurrentDidRangeStatus_b =  s_Dcm_idxSrcDidIndexType_st.dataRange_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1701                                                  adrRecord_pst[Dcm_AddIdCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1702                                                  dataIdAccess_st.dataSrcDid_u16 =  Dcm_dataDID_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1703  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1704                                                  /* Increment the block idxIndex_u16 to get the next block in the request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1705                                                  Dcm_AddIdCurrentBlockIndex_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1706                                                  /* Update the length of DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1707                                                  Dcm_AddIdCurrentLength_u32 = (uint16)(Dcm_AddIdCurrentLength_u32 + dataMemorySize_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1708                                                  Dcm_stAddIdRecords_en         = DCM_DDDI_DEFINE_BY_ID_GETINDEX;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1709                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1710                                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1711                                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1712                                                  /* Set negative response code and reset state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1713                                                  Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1714                                                  *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1715                                                  dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1716                                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1717                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1718                                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1719                                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1720                                              /* Set negative response code and reset state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1721                                              Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1722                                              *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1723                                              dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1724                                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1725                                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1726                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1727                                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1728                                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1729                                      /* Set  negative response code and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1730                                      Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1731                                      *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1732                                      dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1733                                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1734                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1735                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1736                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1737                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1738                              /* Set  negative response code and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1739                              Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1740                              *dataNegRespCode_u8         = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1741                              dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1742                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1743                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1744                  else if (s_dataFunctionRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1745                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1746                      /* Keep the status unchanged and get back to this function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1747                      dataRetVal_u8=DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1748                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1749                  /* For any other return values */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1750                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1751                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1752                      /* Set the negative response code, return value and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1753                      *dataNegRespCode_u8         = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1754                      Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1755                      dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1756                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1757              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1758          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1759      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1760      /* If the current length is not obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1761      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1762      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1763          *dataNegRespCode_u8         = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1764          Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1765          dataRetVal_u8               = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1766      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1767      if (dataRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1768      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1769          Dcm_stAddIdRecords_en = DCM_DDDI_DEFINE_BY_ID_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1770      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1771      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1772  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1773  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1774  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1775   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1776   * Dcm_DcmDddiAddMemRecords_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1777   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1778   * Add DDDI-Records to the internal data structure which is evaluated on RDBI for DDDIs.  The function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1779   * evaluates one or more blocks from the request and checks the support and the availability of the memory
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1780   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1781   * \param nrBlocks_u16: The number of blocks in the request. A block consists of the memoryAddress and the
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1782   *                     dataMemorySize_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1783   *        nrCurrentlyDefinedRecords_u16: The number of blocks defined in this DDDI till now (to support appending)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1784   *        adrSourceBuffer_pcu8: Pointer to the message Buffer
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1785   *        adrRecord_pst: Pointer to the DDDI's record
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1786   *        dataNegRespCode_u8: Pointer to a Byte in which to store a negative Response code in case of detection of
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1787   *                     an error in the request.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1788   *        idxIndex_u16 : Index of the DDDI in the DDDI configuration table
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1789   *        nrResponseBufferLen_u32 : Maximum response buffer length available for the DDDI data for the current active protocol
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1790   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1791   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1792   * \retval    E_OK: Message was O.K. and the blocks (as defined in nrBlocks_u16) were successfully added to the record
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1793   *            E_NOT_OK:  an error was detected and the Negative Response code was set by this function
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1794   *            DCM_E_PENDING: in case of more time is required and the function needs to be called again
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1795   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1796   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1797   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1798   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1799  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1800  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1801  FUNC (Std_ReturnType,DCM_CODE) Dcm_DcmDddiAddMemRecords_u8 (VAR (uint16,AUTOMATIC)nrBlocks_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1802          VAR (uint16,AUTOMATIC)nrCurrentlyDefinedRecords_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1803          P2CONST (uint8,AUTOMATIC,DCM_INTERN_CONST) adrSourceBuffer_pcu8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1804          P2VAR (Dcm_DddiRecord_tst,AUTOMATIC,DCM_INTERN_DATA) adrRecord_pst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1805          P2VAR (Dcm_NegativeResponseCodeType, AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1806          VAR (uint8,AUTOMATIC)nrBytesForAddress_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1807          VAR (uint8,AUTOMATIC)nrBytesForLength_u8,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1808          VAR (uint16,AUTOMATIC) idxIndex_u16,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1809          VAR (Dcm_MsgLenType,AUTOMATIC) nrResponseBufferLen_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1810  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1811      VAR (Dcm_DIDIndexType_tst,AUTOMATIC) idxsrcDidIndexType_st; /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1812      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8;        /* Variable to store the return value of the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1813      VAR (Std_ReturnType,AUTOMATIC) stGetMemAccess_u8;   /* Variable to store the return value of the function DcmAppl_DcmGetPermissionForMemoryAccess_u8*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1814      VAR (Std_ReturnType,AUTOMATIC) dataRetValGetLen_u8; /* Variable to store the return value of the API Dcm_DddiGetLen_u8 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1815  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1816      dataRetVal_u8        = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1817  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1818      if (Dcm_stAddMemRecords_en==DCM_DDDI_DEFINE_BY_MEM_INIT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1819      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1820          Dcm_AddIdCurrentLength_u32     = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1821          /* If the nrBytesForAddress_u8 or nrBytesForLength_u8 is invalid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1822          if ((nrBytesForAddress_u8>4u) || (nrBytesForLength_u8>4u) || (nrBytesForAddress_u8==0) || (nrBytesForLength_u8==0))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1823          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1824              /* Set negative response code */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1825              *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1826              dataRetVal_u8       = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1827          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1828          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1829          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1830              /* Initialize the current block idxIndex_u16 to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1831              Dcm_AddMemCurrentBlockIndex_u16= 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1832              Dcm_stAddMemRecords_en           = DCM_DDDI_DEFINE_BY_MEM_GETSUPPORT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1833          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1834      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1835      /* Call the function to get the current length of the DDDI*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1836      dataRetValGetLen_u8 = Dcm_DddiGetLen_u8 (&Dcm_DDDIBaseConfig_cast[idxIndex_u16], &Dcm_AddIdCurrentLength_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1837      if(dataRetValGetLen_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1838      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1839          /* Loop till all records are added to DDDI definition successfully */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1840          while ((Dcm_AddMemCurrentBlockIndex_u16<nrBlocks_u16) &&(dataRetVal_u8==E_OK))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1841          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1842              if (Dcm_stAddMemRecords_en == DCM_DDDI_DEFINE_BY_MEM_GETSUPPORT)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1843              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1844                  /* Variable to store return value of API DcmAppl_DDDI_Read_Memory_Condition */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1845                  VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1846                  VAR (Dcm_DDDI_DEF_MEM_t,AUTOMATIC) dataMemRecord_st;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1847                  VAR (uint32,AUTOMATIC) idxLoop_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1848                  P2CONST (uint8,AUTOMATIC,DCM_INTERN_CONST) adrInputBuffer_pcu8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1849                  VAR(boolean,AUTOMATIC) flgValidMemoryAccess_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1850  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1851                  flgValidMemoryAccess_b = FALSE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1852                  dataMemRecord_st.adrDddiMem_u32   =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1853                  dataMemRecord_st.dataMemLength_u32 =0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1854  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1855                  /* Calculate where to read the memory address and the length from. Keep in mind that after a pending
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1856                  message the function is left and entered again. In this case a simple usage of the adrSourceBuffer_pcu8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1857                  would fail because it would get reset in the second call to this function.*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1858  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1859                  adrInputBuffer_pcu8=adrSourceBuffer_pcu8+ ((nrBytesForLength_u8+nrBytesForAddress_u8)*Dcm_AddMemCurrentBlockIndex_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1860                  /* Get the memory address of the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1861                  for (idxLoop_u32=0;idxLoop_u32<nrBytesForAddress_u8;idxLoop_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1862                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1863                      dataMemRecord_st.adrDddiMem_u32 = (dataMemRecord_st.adrDddiMem_u32<<8u)+(*adrInputBuffer_pcu8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1864  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1865                      adrInputBuffer_pcu8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1866                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1867                  /* Get the length of data to be added to the definition of DDDI for the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1868                  for (idxLoop_u32=0;idxLoop_u32<nrBytesForLength_u8;idxLoop_u32++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1869                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1870                      dataMemRecord_st.dataMemLength_u32 = ((dataMemRecord_st.dataMemLength_u32<<8u)+(*adrInputBuffer_pcu8));
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1871  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1872                      adrInputBuffer_pcu8++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1873                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1874  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1875                  /* Call the function to get the idxIndex_u16 of the DID from Dcm_DIDConfig*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1876                  dataFuncRetVal_u8 = Dcm_GetIndexOfDID (Dcm_DDDIBaseConfig_cast[idxIndex_u16].dataDddId_u16,&idxsrcDidIndexType_st);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1877                  flgValidMemoryAccess_b = Dcm_DddiCheckOverflow(dataMemRecord_st.dataMemLength_u32,Dcm_AddIdCurrentLength_u32,Dcm_DIDConfig[idxsrcDidIndexType_st.idxIndex_u16].dataMaxDidLen_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1878                  if((dataFuncRetVal_u8 ==E_OK) &&  (flgValidMemoryAccess_b == TRUE))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1879                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1880                      /* Call the API to check if it is permitted to read from the ECU memory as specified in request */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1881                      dataFuncRetVal_u8=DcmAppl_DDDI_Read_Memory_Condition (&dataMemRecord_st, dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1882                      if (dataFuncRetVal_u8 == E_NOT_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1883                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1884                          if(*dataNegRespCode_u8 ==0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1885                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1886                              *dataNegRespCode_u8=DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1887                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1888                          Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1889                          dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1890                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1891                      else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1892                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1893                          /* keep the status unchanged and get back to this function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1894                          dataRetVal_u8 = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1895                          *dataNegRespCode_u8          = 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1896                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1897                      else if (dataFuncRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1898                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1899                          *dataNegRespCode_u8= 0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1900                          /* The appl function to check the memory access permission*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1901                          stGetMemAccess_u8=DcmAppl_DcmGetPermissionForMemoryAccess_u8(dataMemRecord_st.adrDddiMem_u32,dataMemRecord_st.dataMemLength_u32,DCM_SUPPORT_WRITE);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1902                          if(stGetMemAccess_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1903                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1904                              /* If entire DDDI definition will fit in response buffer during a read */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1905                              if((Dcm_AddIdCurrentLength_u32+dataMemRecord_st.dataMemLength_u32) <= nrResponseBufferLen_u32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1906                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1907                                  /* Update definition type,memory address and length of data */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1908                                  adrRecord_pst[Dcm_AddMemCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDefinitionType_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1909                                  = DCM_DEFINITION_BY_MEMORYADDRESS;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1910                                  adrRecord_pst[Dcm_AddMemCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.dataMemAccess_st.dataMemLength_u32
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1911                                  = dataMemRecord_st.dataMemLength_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1912                                  adrRecord_pst[Dcm_AddMemCurrentBlockIndex_u16+nrCurrentlyDefinedRecords_u16].dataDddi_st.dataMemAccess_st.adrDddiMem_u32
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1913                                  = dataMemRecord_st.adrDddiMem_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1914                                  Dcm_AddMemCurrentBlockIndex_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1915                                  /* Update the length of the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1916                                  Dcm_AddIdCurrentLength_u32 = (uint16)(Dcm_AddIdCurrentLength_u32 + dataMemRecord_st.dataMemLength_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1917                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1918                              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1919                              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1920                                  /* Set the negative response code and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1921                                  Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1922                                  *dataNegRespCode_u8          = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1923                                  dataRetVal_u8                = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1924                              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1925                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1926                          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1927                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1928                              /* Set the negative response code and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1929                              Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1930                              *dataNegRespCode_u8          = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1931                              dataRetVal_u8                = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1932                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1933                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1934                      /* For any other return values */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1935                      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1936                      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1937                          if(*dataNegRespCode_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1938                          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1939                              /* Set the negative response code, return value and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1940                              *dataNegRespCode_u8          = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1941                          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1942                          Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1943                          dataRetVal_u8                = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1944                      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1945                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1946                  /* For any other return values */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1947                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1948                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1949                      /* Set the negative response code, return value and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1950                      *dataNegRespCode_u8          = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1951                      Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1952                      dataRetVal_u8                = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1953                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1954              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1955          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1956      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1957      /* If the current length of DDDI is not obtained correctly */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1958      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1959      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1960          /* Set the negative response code, return value and reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1961          *dataNegRespCode_u8          = DCM_E_GENERALREJECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1962          Dcm_stAddMemRecords_en = DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1963          dataRetVal_u8                = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1964      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1965      if (dataRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1966      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1967          /* Reset the state machine for the function */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1968          Dcm_stAddMemRecords_en=DCM_DDDI_DEFINE_BY_MEM_INIT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1969      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1970      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1971  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1972  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1973  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1974   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1975   *   Dcm_DddiGetLen_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1976   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1977   * Calculate the length of an DDDI.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1978   * \param      *adrConfig_pcst       : pointer to the configuration of the DDDI in RAM of the ECU
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1979   *             *uint16 adrLen_pu16: pointer to an uint16 in which the length of the DIDI is returned.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1980   * \retval        E_OK:  in case of success
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1981   *            E_NOT_OK:  in case the internal memory structure was found to include invalid dataDddi_st.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1982   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1983   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1984   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1985   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1986  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1987  FUNC (Std_ReturnType,DCM_CODE) Dcm_DddiGetLen_u8 (P2CONST (Dcm_DddiMainConfig_tst,AUTOMATIC,DCM_INTERN_CONST) adrConfig_pcst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1988          P2VAR (uint32,AUTOMATIC,DCM_INTERN_DATA) adrLen_pu32)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1989  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1990      VAR (uint32,AUTOMATIC) idxCurrentRecord_u16 = 0; /* Variable to store current record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1991      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) adrContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1992      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1993      /* Initializing DDDI length to 0 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1994      *adrLen_pu32=0;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1995  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1996      /* If periodic scheduler is running */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1997      /* MR12 RULE 14.4 VIOLATION: Controlling expression is not 'essentially Boolean' expression. MISRA C:2012 Rule-14.4 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1998      if (Dcm_PeriodicSchedulerRunning_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  1999      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2000          adrContext_pst=adrConfig_pcst->dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2001      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2002      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2003      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2004          adrContext_pst=adrConfig_pcst->dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2005      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2006      /* Looping through the records */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2007      for (; idxCurrentRecord_u16 < adrContext_pst->nrCurrentlyDefinedRecords_u16; idxCurrentRecord_u16++)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2008      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2009          /* If definition type is DCM_DEFINITION_BY_ID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2010          if (adrConfig_pcst->addrRecord_pst[idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_ID)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2011          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2012              /* Variable to store length of the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2013              VAR (uint32,AUTOMATIC) dataLenOfThisRecord_u32=adrConfig_pcst->addrRecord_pst[idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.dataMemorySize_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2014              /* Updating the total length of DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2015              *adrLen_pu32 = *adrLen_pu32 + dataLenOfThisRecord_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2016          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2017          /* If definition type is DCM_DEFINITION_BY_MEMORYADDRESS */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2018          else if (adrConfig_pcst->addrRecord_pst[idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_MEMORYADDRESS)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2019          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2020              /* Variable to store length of the record */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2021              VAR (uint32,AUTOMATIC) dataLenOfThisRecord_u32 = adrConfig_pcst->addrRecord_pst[idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.dataMemLength_u32;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2022              /* Updating the total length of DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2023              *adrLen_pu32 = (uint16)(*adrLen_pu32 + dataLenOfThisRecord_u32);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2024          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2025          /* If definition type is invalid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2026          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2027          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2028              dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2029              Dcm_DddiResetCompleteContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2030              break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2031          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2032      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2033      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2034  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2035  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2036  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2037  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2038   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2039   * Dcm_DddiGetCondition_u8:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2040   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2041   * Calculate if the DID is supported at this point in time or not.  Calculation is based on the context valid
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2042   * at the point of the time of this function call. Context is either for periodic data processing or normal
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2043   * processing based on the value of the global variable Dcm_PeriodicSchedulerRunning_b
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2044   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2045   * \param    *adrConfig_pcst       : pointer to the configuration of the DDDI in RAM of the ECU
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2046   *              dataNegRespCode_u8: Pointer to a Byte in which to store a negative Response code in case of detection of
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2047   *                           an error.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2048   * \retval           E_OK: ID is supported
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2049   *               E_NOT_OK: An Error or negative result for the support of one of the included IDs or memory
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2050   *                         blocks in this DID was detected during the calculation of the support of this ID
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2051   *              DCM_E_PENDING: More time is required to calculate the support
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2052   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2053   * \seealso    Dcm_PeriodicSchedulerRunning_b
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2054   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2055   **************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2056   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2057  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2058  FUNC (Std_ReturnType,DCM_CODE) Dcm_DddiGetCondition_u8(P2CONST (Dcm_DddiMainConfig_tst,AUTOMATIC,DCM_INTERN_CONST) adrConfig_pcst,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2059          P2VAR (Dcm_NegativeResponseCodeType, AUTOMATIC,DCM_INTERN_DATA) dataNegRespCode_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2060  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2061      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8=E_OK; /* Variable to store the return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2062      VAR (Std_ReturnType,   AUTOMATIC) stGetMemAccess_u8; /* Return value of Memory access check API */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2063      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) adrContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2064      /* If periodic scheduler is running */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2065      /* MR12 RULE 14.4 VIOLATION: Controlling expression is not 'essentially Boolean' expression. MISRA C:2012 Rule-14.4 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2066      if (Dcm_PeriodicSchedulerRunning_b)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2067      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2068          adrContext_pst=adrConfig_pcst->dataPDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2069      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2070      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2071      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2072          adrContext_pst=adrConfig_pcst->dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2073      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2074      /* Looping through the records defined for the DDDI */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2075      while ((adrContext_pst->idxCurrentRecord_u16 < adrContext_pst->nrCurrentlyDefinedRecords_u16) &&
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2076              (dataRetVal_u8 == E_OK))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2077      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2078          /* If definition type of record is DCM_DEFINITION_BY_ID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2079          if (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_ID)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2080          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2081              VAR (Dcm_SupportRet_t, AUTOMATIC) dataSupportInfo_en;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2082              VAR (Dcm_DIDIndexType_tst,AUTOMATIC) idxDidCondIndexType_st;    /*Store the index of DID of either Dcm_DidConfig or Dcm_DIDRangeCOnfig structure*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2083              /* Variable to store idxIndex_u16 of record in DID configuration table */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2084              idxDidCondIndexType_st.idxIndex_u16 = adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.idxOfDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2085              idxDidCondIndexType_st.dataRange_b =  adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.stCurrentDidRangeStatus_b;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2086              idxDidCondIndexType_st.dataopstatus_b = Dcm_DspDataOpstatus_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2087  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2088              /* Call the API to check support for DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2089              dataSupportInfo_en = Dcm_GetSupportOfIndex (&idxDidCondIndexType_st, DCM_SUPPORT_READ,dataNegRespCode_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2090  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2091              if (dataSupportInfo_en == DCM_SUPPORT_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2092              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2093                  Dcm_DspDataOpstatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2094                  /* Increment the current idxIndex_u16 and proceed  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2095                  adrContext_pst->idxCurrentRecord_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2096              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2097              else if (dataSupportInfo_en == DCM_SUPPORT_CONDITION_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2098              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2099                  Dcm_DspDataOpstatus_u8 = DCM_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2100                  dataRetVal_u8 = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2101              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2102              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2103              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2104                  Dcm_DspDataOpstatus_u8 = DCM_INITIAL;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2105                  dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2106                  /* Call the function to reset the current position in data buffer and record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2107                  Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2108              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2109          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2110          /* If definition type of record is DCM_DEFINITION_BY_MEMORYADDRESS */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2111          else if (adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDefinitionType_u8 == DCM_DEFINITION_BY_MEMORYADDRESS)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2112          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2113              VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8; /* Variable to store the return value */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2114              /* Call the function to check support for DID */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2115              dataFuncRetVal_u8 = DcmAppl_DDDI_Read_Memory_Condition   (
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2116                      &(adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st),
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2117                      dataNegRespCode_u8
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2118              );
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2119              if (dataFuncRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2120              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2121                  *dataNegRespCode_u8=0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2122                  /* The appl function to check the memory access permission*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2123                  stGetMemAccess_u8 = DcmAppl_DcmGetPermissionForMemoryAccess_u8(adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.adrDddiMem_u32,adrConfig_pcst->addrRecord_pst[adrContext_pst->idxCurrentRecord_u16].dataDddi_st.dataMemAccess_st.dataMemLength_u32,
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2124                          DCM_SUPPORT_READ);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2125                  if(stGetMemAccess_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2126                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2127                      /* Increment the current idxIndex_u16 and proceed  */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2128                      adrContext_pst->idxCurrentRecord_u16++;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2129                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2130                  else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2131                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2132                      *dataNegRespCode_u8 = DCM_E_REQUESTOUTOFRANGE;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2133                      dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2134                      /* Call the function to reset the current position in data buffer and record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2135                      Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2136                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2137              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2138              else if (dataFuncRetVal_u8 == DCM_E_PENDING)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2139              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2140                  *dataNegRespCode_u8=0x00;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2141                  dataRetVal_u8 = DCM_E_PENDING;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2142              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2143              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2144              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2145                  if(*dataNegRespCode_u8 == 0x00)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2146                  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2147                      *dataNegRespCode_u8=DCM_E_CONDITIONSNOTCORRECT;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2148                  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2149                  dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2150                  /* Call the function to reset the current position in data buffer and record idxIndex_u16 */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2151                  Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2152              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2153          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2154          /* If definition type is invalid */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2155          else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2156          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2157              dataRetVal_u8 = E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2158              Dcm_DddiResetCompleteContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2159          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2160      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2161      if (dataRetVal_u8 == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2162      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2163          Dcm_DddiResetProcessingInfoInContext (adrContext_pst);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2164      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2165      return dataRetVal_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2166  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2167  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2168  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2169   *************************************************************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2170   * Dcm_GetActiveDDDIDid:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2171   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2172   * This API returns the active DDDID being processed when RDBI service request is being processed. This function is called from the Dcm API Dcm_GetActiveDid
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2173   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2174   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2175   * \param     uint16* dataDid_u16 : Parameter for updating of the DDDI under processing. The DDDI value returned is valid only if return value is E_OK.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2176   * \retval    Std_ReturnType : E_OK : The DDDI under processing is a normal DDDI.The parameter dataDid_u16 contains valid DDDI value in this case.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2177   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2178   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2179   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2180   **************************************************************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2181   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2182  FUNC(Std_ReturnType,DCM_CODE) Dcm_GetActiveDDDid(P2VAR(uint16,AUTOMATIC,DCM_INTERN_DATA) dataDid_u16)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2183  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2184      /* Update the DDDID value currently under process */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2185      *dataDid_u16 = s_ActiveDDDI_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2186      return (E_OK);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2187  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2188  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2189  /**
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2190   *******************************************************************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2191   * Dcm_GetActiveSourceDataId:
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2192   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2193   * This API will update the Source Data Identifiers (source DIDs) sent during a 0x2c request.The API can be polled from  Read/CondionCheckRead/ReadDataLength functions
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2194   * during RDBI request processing. If a DDDI is defined with one or more source DIDs using 0x2C request, when read, this API can be used to determine the current
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2195   * source DID being processed.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2196   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2197   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2198   * \param     uint16* dataSrcDid_u16 : Parameter for updating of the Source DID under processing. The value returned is valid only if return value is E_OK.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2199   *            uint8*  posnSrcDataRec_u8 : Parameter to update the position in the source Data Record for DID under process
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2200   *            uint8*  adrMemSize_u8 : Memory size/length of the source DID under progress.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2201   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2202   * \retval    Std_ReturnType : E_OK : The source DID under processing is a normal DID.The parameter dataSrcDid_u16 contains valid Source DID value in this case.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2203   *                             E_NOT_OK: The DID under processing is a range DID. The parameter dataDid_u16 contains invalid data in this case.
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2204   * \seealso
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2205   *
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2206   *******************************************************************************************************************************************************************
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2207   */
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2208  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2209  FUNC(Std_ReturnType,DCM_CODE) Dcm_GetActiveSourceDataId(P2VAR(uint16,AUTOMATIC,DCM_INTERN_DATA) dataSrcDid_u16,P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) posnSrcDataRec_u8, P2VAR(uint8,AUTOMATIC,DCM_INTERN_DATA) adrMemSize_u8)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2210  {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2211      /*Local variable to store final return value*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2212      VAR (Std_ReturnType,AUTOMATIC) dataRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2213      static VAR (Std_ReturnType,AUTOMATIC) dataFuncRetVal_u8=E_NOT_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2214      /*Local variable to store the index of the DDDI*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2215      VAR (uint16,AUTOMATIC) idxIndex_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2216      /*Local variable to access the DDDI RAM buffer*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2217      P2CONST (Dcm_DddiMainConfig_tst,AUTOMATIC,DCM_INTERN_CONST) adrConfig_pcst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2218      /* Pointer to access index of currently active source data identifier*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2219      P2VAR (Dcm_DddiIdContext_tst,AUTOMATIC,DCM_INTERN_DATA) adrContextDddi_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2220  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2221  	/*Get Active DDDI from the RDBI request*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2222      dataFuncRetVal_u8 = Dcm_GetActiveDid(dataSrcDid_u16);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2223      if(dataFuncRetVal_u8== E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2224      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2225          /*Valid DID or DDDI found in the record*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2226          while(Dcm_DspGetIndexOfDDDI_u8(*dataSrcDid_u16,&idxIndex_u16) == E_OK)
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2227          {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2228              /* Valid DDDI available, get the index of the active DDDI*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2229              adrConfig_pcst = &Dcm_DDDIBaseConfig_cast[idxIndex_u16];
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2230              adrContextDddi_pst = adrConfig_pcst->dataDDDIRecordContext_pst;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2231              /*Retrieve active data source identifier from RAM buffer*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2232              *dataSrcDid_u16 = adrConfig_pcst->addrRecord_pst[adrContextDddi_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.dataSrcDid_u16;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2233              /*Update corresponding position in the data record*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2234              *posnSrcDataRec_u8 = adrConfig_pcst->addrRecord_pst[adrContextDddi_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.posnInSourceDataRecord_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2235              /*Updating the memory address and index of the source DID*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2236              *adrMemSize_u8 = adrConfig_pcst->addrRecord_pst[adrContextDddi_pst->idxCurrentRecord_u16].dataDddi_st.dataIdAccess_st.dataMemorySize_u8;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2237              dataRetVal_u8 = E_OK;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2238              if((*dataSrcDid_u16 <0xf3ffu) && (*dataSrcDid_u16 >0xf200u))
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2239              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2240                  /*Continue*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2241              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2242              else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2243              {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2244                  /*Source DID has been obtained. The loop need not execute again*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2245                  break;
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2246              }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2247          }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2248  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2249      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2250      else
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2251      {
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2252          /*Do nothing. The return value is already set to E_NOT_OK*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2253      }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2254          return(dataRetVal_u8);
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2255  }
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2256  
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2257  #define DCM_STOP_SEC_CODE /*Adding this for memory mapping*/
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2258  #include "Dcm_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2259  #endif
; BSW\src\BSW\Gen\Dcm\src\DcmDsp\DcmDspUds\DcmDspUds_Dddi.c	  2260  #endif

	; Module end
