	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15672a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Nm\\Nm_MainFunction.src BSW\\src\\BSW\\Gen\\Nm\\src\\Nm_MainFunction.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Nm\\src\\Nm_MainFunction.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	8784
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Nm\\src\\Nm_MainFunction.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	140
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	142
	.byte	5,2,116,9,4,6
	.byte	'NM_ACTIVE_CHANNEL',0,0,6
	.byte	'NM_PASSIVE_CHANNEL',0,1,0,4
	.byte	'Nm_ChannelType',0,2,120,3
	.word	165
	.byte	7
	.byte	'char',0,1,6,4
	.byte	'sint8',0,3,76,25
	.word	235
	.byte	7
	.byte	'unsigned char',0,1,8,4
	.byte	'uint8',0,3,81,25
	.word	257
	.byte	7
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,3,91,25
	.word	288
	.byte	7
	.byte	'unsigned int',0,4,7,4
	.byte	'uint32',0,3,106,24
	.word	325
	.byte	7
	.byte	'unsigned long long int',0,8,7,4
	.byte	'uint64',0,3,111,30
	.word	356
	.byte	4
	.byte	'boolean',0,3,127,25
	.word	257
	.byte	4
	.byte	'StatusType',0,4,191,1,27
	.word	257
	.byte	4
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	257
	.byte	8,4,206,1,9,8,9
	.byte	'vendorID',0
	.word	288
	.byte	2,2,35,0,9
	.byte	'moduleID',0
	.word	288
	.byte	2,2,35,2,9
	.byte	'sw_major_version',0
	.word	257
	.byte	1,2,35,4,9
	.byte	'sw_minor_version',0
	.word	257
	.byte	1,2,35,5,9
	.byte	'sw_patch_version',0
	.word	257
	.byte	1,2,35,6,0,4
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	457
	.byte	4
	.byte	'PduIdType',0,5,22,19
	.word	288
	.byte	4
	.byte	'PduLengthType',0,5,26,19
	.word	288
	.byte	5,6,113,9,4,6
	.byte	'TP_DATACONF',0,0,6
	.byte	'TP_DATARETRY',0,1,6
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,6,118,3
	.word	647
	.byte	4
	.byte	'NetworkHandleType',0,6,128,1,17
	.word	257
	.byte	4
	.byte	'CanNm_TimerType',0,7,74,17
	.word	325
	.byte	4
	.byte	'Can_IdType',0,8,32,16
	.word	325
	.byte	4
	.byte	'Can_HwHandleType',0,8,43,16
	.word	288
	.byte	8,9,93,9,8,9
	.byte	'Class',0
	.word	257
	.byte	1,2,35,0,9
	.byte	'TIN',0
	.word	257
	.byte	1,2,35,1,9
	.byte	'ReturnAddress',0
	.word	325
	.byte	4,2,35,4,0,4
	.byte	'OsTrapInfoType',0,9,97,3
	.word	818
	.byte	10,68
	.word	325
	.byte	11,16,0,8,9,154,1,9,68,9
	.byte	'store',0
	.word	898
	.byte	68,2,35,0,0,10,68
	.word	907
	.byte	11,0,0,4
	.byte	'Os_JumpBufType',0,9,156,1,3
	.word	929
	.byte	4
	.byte	'Os_StackTraceType',0,9,174,1,18
	.word	325
	.byte	8,9,175,1,9,8,9
	.byte	'sp',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'ctx',0
	.word	325
	.byte	4,2,35,4,0,4
	.byte	'Os_StackValueType',0,9,175,1,63
	.word	989
	.byte	4
	.byte	'Os_StackSizeType',0,9,176,1,27
	.word	989
	.byte	12,1,1,3
	.word	1074
	.byte	4
	.byte	'Os_VoidVoidFunctionType',0,9,179,1,16
	.word	1077
	.byte	4
	.byte	'ApplicationType',0,9,193,1,23
	.word	257
	.byte	13
	.byte	'Os_ApplicationConfigurationType_s',0,9,198,1,16,2,9
	.byte	'app_id',0
	.word	257
	.byte	1,2,35,0,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,1,0,4
	.byte	'Os_ApplicationConfigurationType',0,9,201,1,3
	.word	1140
	.byte	4
	.byte	'Os_CoreStateType',0,9,203,1,16
	.word	325
	.byte	4
	.byte	'AreaIdType',0,9,204,1,16
	.word	288
	.byte	4
	.byte	'Os_PeripheralAddressType',0,9,212,1,22
	.word	325
	.byte	4
	.byte	'TickType',0,9,221,1,22
	.word	325
	.byte	4
	.byte	'Os_StopwatchTickType',0,9,225,1,22
	.word	325
	.byte	3
	.word	325
	.byte	4
	.byte	'Os_Lockable',0,9,234,1,18
	.word	1382
	.byte	4
	.byte	'CoreIdType',0,9,236,1,16
	.word	288
	.byte	4
	.byte	'SpinlockIdType',0,9,237,1,16
	.word	288
	.byte	5,9,239,1,9,4,6
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,6
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,4
	.byte	'TryToGetSpinlockType',0,9,239,1,74
	.word	1452
	.byte	5,9,174,2,9,4,6
	.byte	'APPLICATION_ACCESSIBLE',0,0,6
	.byte	'APPLICATION_RESTARTING',0,1,6
	.byte	'APPLICATION_TERMINATED',0,2,0,4
	.byte	'ApplicationStateType',0,9,174,2,92
	.word	1545
	.byte	14
	.byte	'void',0,3
	.word	1657
	.byte	15,1,1,16
	.word	257
	.byte	16
	.word	1663
	.byte	0,3
	.word	1668
	.byte	4
	.byte	'Os_FunctionEntryType',0,9,183,2,16
	.word	1682
	.byte	13
	.byte	'Os_MeterInfoType_s',0,9,193,2,16,48,9
	.byte	'elapsed',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'previous',0
	.word	325
	.byte	4,2,35,4,9
	.byte	'max',0
	.word	325
	.byte	4,2,35,8,9
	.byte	'cumulative',0
	.word	325
	.byte	4,2,35,12,9
	.byte	'stackbase',0
	.word	989
	.byte	8,2,35,16,9
	.byte	'stackusage',0
	.word	989
	.byte	8,2,35,24,9
	.byte	'stackmax',0
	.word	989
	.byte	8,2,35,32,9
	.byte	'stackbudget',0
	.word	989
	.byte	8,2,35,40,0,4
	.byte	'Os_MeterInfoType',0,9,202,2,3
	.word	1717
	.byte	3
	.word	1717
	.byte	4
	.byte	'Os_MeterInfoRefType',0,9,203,2,50
	.word	1915
	.byte	4
	.byte	'EventMaskType',0,9,206,2,15
	.word	257
	.byte	4
	.byte	'Os_imaskType',0,9,211,2,16
	.word	325
	.byte	13
	.byte	'Os_ISRDynType_s',0,9,213,2,16,48,9
	.byte	'meter',0
	.word	1717
	.byte	48,2,35,0,0,4
	.byte	'Os_ISRDynType',0,9,215,2,3
	.word	1994
	.byte	3
	.word	1994
	.byte	17
	.word	2055
	.byte	13
	.byte	'Os_ISRType_s',0,9,216,2,16,24,9
	.byte	'entry_function',0
	.word	1082
	.byte	4,2,35,0,9
	.byte	'dynamic',0
	.word	2060
	.byte	4,2,35,4,9
	.byte	'imask',0
	.word	325
	.byte	4,2,35,8,9
	.byte	'stackbudget',0
	.word	989
	.byte	8,2,35,12,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,20,9
	.byte	'application',0
	.word	257
	.byte	1,2,35,21,0,4
	.byte	'Os_ISRType',0,9,223,2,3
	.word	2065
	.byte	3
	.word	1074
	.byte	17
	.word	2065
	.byte	3
	.word	2224
	.byte	4
	.byte	'ISRType',0,9,224,2,46
	.word	2229
	.byte	4
	.byte	'Os_bitmask',0,9,239,2,22
	.word	325
	.byte	4
	.byte	'Os_pset0Type',0,9,240,2,20
	.word	325
	.byte	4
	.byte	'Os_pset1Type',0,9,241,2,20
	.word	325
	.byte	4
	.byte	'Os_pset2Type',0,9,242,2,20
	.word	325
	.byte	18,9,243,2,9,4,9
	.byte	'p0',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'p1',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'p2',0
	.word	325
	.byte	4,2,35,0,0,4
	.byte	'Os_psetType',0,9,247,2,3
	.word	2337
	.byte	18,9,249,2,9,4,9
	.byte	't0',0
	.word	325
	.byte	4,2,35,0,9
	.byte	't1',0
	.word	325
	.byte	4,2,35,0,9
	.byte	't2',0
	.word	325
	.byte	4,2,35,0,0,4
	.byte	'Os_tpmaskType',0,9,253,2,3
	.word	2401
	.byte	4
	.byte	'Os_ActivationCountType',0,9,254,2,23
	.word	257
	.byte	13
	.byte	'Os_TaskDynType_s',0,9,128,3,16,120,9
	.byte	'terminate_jump_buf',0
	.word	938
	.byte	68,2,35,0,9
	.byte	'meter',0
	.word	1717
	.byte	48,2,35,68,9
	.byte	'activation_count',0
	.word	257
	.byte	1,2,35,116,0,4
	.byte	'Os_TaskDynType',0,9,132,3,3
	.word	2499
	.byte	10,68
	.word	907
	.byte	11,0,0,3
	.word	2499
	.byte	17
	.word	2625
	.byte	13
	.byte	'Os_TaskType_s',0,9,134,3,16,40,9
	.byte	'dynamic',0
	.word	2630
	.byte	4,2,35,0,9
	.byte	'entry_function',0
	.word	1082
	.byte	4,2,35,4,9
	.byte	'pset',0
	.word	2337
	.byte	4,2,35,8,9
	.byte	'base_tpmask',0
	.word	2401
	.byte	4,2,35,12,9
	.byte	'tpmask',0
	.word	2401
	.byte	4,2,35,16,9
	.byte	'core_id',0
	.word	288
	.byte	2,2,35,20,9
	.byte	'index',0
	.word	325
	.byte	4,2,35,24,9
	.byte	'stackbudget',0
	.word	989
	.byte	8,2,35,28,9
	.byte	'activation_count',0
	.word	257
	.byte	1,2,35,36,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,37,9
	.byte	'application',0
	.word	257
	.byte	1,2,35,38,0,4
	.byte	'Os_TaskType',0,9,146,3,3
	.word	2635
	.byte	17
	.word	2635
	.byte	3
	.word	2885
	.byte	4
	.byte	'TaskType',0,9,147,3,47
	.word	2890
	.byte	19
	.byte	'Os_TaskStateType',0,9,155,3,6,4,6
	.byte	'SUSPENDED',0,0,6
	.byte	'READY',0,1,6
	.byte	'WAITING',0,2,6
	.byte	'RUNNING',0,3,0,4
	.byte	'TaskStateType',0,9,156,3,31
	.word	2913
	.byte	18,9,167,3,3,4,9
	.byte	'tpmask',0
	.word	2401
	.byte	4,2,35,0,0,13
	.byte	'Os_ResourceDynType_s',0,9,166,3,16,4,9
	.byte	'saved_priority',0
	.word	3000
	.byte	4,2,35,0,0,4
	.byte	'Os_ResourceDynType',0,9,170,3,3
	.word	3023
	.byte	3
	.word	3023
	.byte	17
	.word	3103
	.byte	13
	.byte	'Os_ResourceType_s',0,9,171,3,16,12,9
	.byte	'dynamic',0
	.word	3108
	.byte	4,2,35,0,9
	.byte	'tpmask',0
	.word	2401
	.byte	4,2,35,4,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,8,0,4
	.byte	'Os_ResourceType',0,9,175,3,3
	.word	3113
	.byte	8,9,181,3,9,12,9
	.byte	'maxallowedvalue',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'ticksperbase',0
	.word	325
	.byte	4,2,35,4,9
	.byte	'mincycle',0
	.word	325
	.byte	4,2,35,8,0,4
	.byte	'AlarmBaseType',0,9,185,3,3
	.word	3212
	.byte	8,9,206,3,9,8,9
	.byte	'Running',0
	.word	257
	.byte	1,2,35,0,9
	.byte	'Pending',0
	.word	257
	.byte	1,2,35,1,9
	.byte	'Delay',0
	.word	325
	.byte	4,2,35,4,0,4
	.byte	'Os_CounterStatusType',0,9,210,3,3
	.word	3307
	.byte	20
	.word	257
	.byte	1,1,3
	.word	3393
	.byte	4
	.byte	'Os_CounterIncrAdvType',0,9,217,3,22
	.word	3400
	.byte	13
	.byte	's_swd',0,9,222,3,12,4,9
	.byte	'count',0
	.word	325
	.byte	4,2,35,0,0,18,9,221,3,3,4,9
	.byte	'sw',0
	.word	3436
	.byte	4,2,35,0,0,13
	.byte	'Os_CounterDynType_s',0,9,220,3,16,4,9
	.byte	'type_dependent',0
	.word	3464
	.byte	4,2,35,0,0,4
	.byte	'Os_CounterDynType',0,9,226,3,3
	.word	3483
	.byte	3
	.word	3483
	.byte	17
	.word	3561
	.byte	13
	.byte	'Os_CounterType_s',0,9,227,3,16,28,9
	.byte	'dynamic',0
	.word	3566
	.byte	4,2,35,0,9
	.byte	'advincr',0
	.word	3405
	.byte	4,2,35,4,9
	.byte	'base',0
	.word	3212
	.byte	12,2,35,8,9
	.byte	'core',0
	.word	1663
	.byte	4,2,35,20,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,24,9
	.byte	'application',0
	.word	257
	.byte	1,2,35,25,0,4
	.byte	'Os_CounterType',0,9,234,3,3
	.word	3571
	.byte	3
	.word	3393
	.byte	17
	.word	3571
	.byte	3
	.word	3723
	.byte	4
	.byte	'CounterType',0,9,235,3,52
	.word	3728
	.byte	19
	.byte	'Os_ScheduleTableStatusType',0,9,240,3,6,4,6
	.byte	'SCHEDULETABLE_STOPPED',0,0,6
	.byte	'SCHEDULETABLE_NEXT',0,1,6
	.byte	'SCHEDULETABLE_WAITING',0,2,6
	.byte	'SCHEDULETABLE_RUNNING',0,3,6
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,4
	.byte	'ScheduleTableStatusType',0,9,241,3,41
	.word	3754
	.byte	17
	.word	.L6-.L3
	.byte	3
	.word	3954
	.byte	4
	.byte	'ScheduleTableType',0,9,128,4,58
	.word	3959
	.byte	13
	.byte	'Os_ScheduleTableDynType_s',0,9,130,4,16,16,9
	.byte	'match',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'next',0
	.word	3964
	.byte	4,2,35,4,9
	.byte	'state',0
	.word	3754
	.byte	4,2,35,8,9
	.byte	'config',0
	.word	288
	.byte	2,2,35,12,0,3
	.word	3991
	.byte	17
	.word	4084
.L6:
	.byte	13
	.byte	'Os_ScheduleTableType_s',0,9,247,3,16,16,9
	.byte	'dynamic',0
	.word	4089
	.byte	4,2,35,0,9
	.byte	'counter',0
	.word	3733
	.byte	4,2,35,4,9
	.byte	'repeat',0
	.word	257
	.byte	1,2,35,8,9
	.byte	'config',0
	.word	288
	.byte	2,2,35,10,9
	.byte	'initial',0
	.word	257
	.byte	1,2,35,12,9
	.byte	'access',0
	.word	257
	.byte	1,2,35,13,9
	.byte	'application',0
	.word	257
	.byte	1,2,35,14,0,4
	.byte	'Os_ScheduleTableType',0,9,255,3,3
	.word	4094
	.byte	17
	.word	4094
	.byte	3
	.word	4274
	.byte	17
	.word	3571
	.byte	3
	.word	4284
	.byte	21
	.word	1387
	.byte	21
	.word	2337
	.byte	21
	.word	2234
	.byte	21
	.word	2895
	.byte	21
	.word	2401
	.byte	21
	.word	257
	.byte	21
	.word	2895
	.byte	13
	.byte	'Os_ControlledCoreType_s',0,9,251,6,16,112,9
	.byte	'TrapInfo',0
	.word	818
	.byte	8,2,35,0,9
	.byte	'lock_taskaccess',0
	.word	4294
	.byte	4,2,35,8,9
	.byte	'ReadyTasks',0
	.word	4299
	.byte	4,2,35,12,9
	.byte	'RunningISR',0
	.word	4304
	.byte	4,2,35,16,9
	.byte	'RunningTask',0
	.word	4309
	.byte	4,2,35,20,9
	.byte	'RunningTPMask',0
	.word	4314
	.byte	4,2,35,24,9
	.byte	'CurrentMeteredObject',0
	.word	1920
	.byte	4,2,35,28,9
	.byte	'IdleMeter',0
	.word	1717
	.byte	48,2,35,32,9
	.byte	'AppAccess',0
	.word	257
	.byte	1,2,35,80,9
	.byte	'AppOverride',0
	.word	4319
	.byte	1,2,35,81,9
	.byte	'GetStackValueAdjust',0
	.word	989
	.byte	8,2,35,84,9
	.byte	'InErrorHook',0
	.word	257
	.byte	1,2,35,92,9
	.byte	'ChainTaskRef',0
	.word	4324
	.byte	4,2,35,96,9
	.byte	'GetStackUsageAdjust',0
	.word	989
	.byte	8,2,35,100,9
	.byte	'InProtectionHook',0
	.word	257
	.byte	1,2,35,108,9
	.byte	'CoreIsActive',0
	.word	257
	.byte	1,2,35,109,9
	.byte	'InShutdownHook',0
	.word	257
	.byte	1,2,35,110,0,4
	.byte	'Os_ControlledCoreType',0,9,141,7,3
	.word	4329
	.byte	3
	.word	325
	.byte	17
	.word	2065
	.byte	3
	.word	4785
	.byte	17
	.word	2635
	.byte	3
	.word	4795
	.byte	3
	.word	1717
	.byte	13
	.byte	'Os_AnyCoreType_s',0,9,151,7,16,96,9
	.byte	'DisableAllImask',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'SuspendAllImask',0
	.word	325
	.byte	4,2,35,4,9
	.byte	'SuspendOSImask',0
	.word	325
	.byte	4,2,35,8,9
	.byte	'DisableAllCount',0
	.word	325
	.byte	4,2,35,12,9
	.byte	'SuspendAllCount',0
	.word	325
	.byte	4,2,35,16,9
	.byte	'SuspendOSCount',0
	.word	325
	.byte	4,2,35,20,9
	.byte	'RestartJumpBuf',0
	.word	938
	.byte	68,2,35,24,9
	.byte	'Restartable',0
	.word	257
	.byte	1,2,35,92,0,4
	.byte	'Os_AnyCoreType',0,9,160,7,3
	.word	4810
	.byte	4
	.byte	'Can_TxObjPriorityClassType',0,10,219,3,16
	.word	325
	.byte	13
	.byte	'Can_TxHwObjectConfigType',0,10,231,3,16,8,9
	.byte	'MsgObjId',0
	.word	257
	.byte	1,2,35,0,9
	.byte	'HwControllerId',0
	.word	257
	.byte	1,2,35,1,9
	.byte	'TxObjPriorityClass',0
	.word	325
	.byte	4,2,35,4,0,4
	.byte	'Can_TxHwObjectConfigType',0,10,252,3,3
	.word	5087
	.byte	13
	.byte	'Can_RxHwObjectConfigType',0,10,129,4,16,12,9
	.byte	'MaskRef',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'MsgId',0
	.word	325
	.byte	4,2,35,4,9
	.byte	'MsgObjId',0
	.word	257
	.byte	1,2,35,8,9
	.byte	'HwControllerId',0
	.word	257
	.byte	1,2,35,9,0,4
	.byte	'Can_RxHwObjectConfigType',0,10,147,4,3
	.word	5223
	.byte	10,4
	.word	257
	.byte	11,3,0,13
	.byte	'Can_ControllerMOMapConfigType',0,10,181,4,16,4,9
	.byte	'ControllerMOMap',0
	.word	5363
	.byte	4,2,35,0,0,4
	.byte	'Can_ControllerMOMapConfigType',0,10,184,4,3
	.word	5372
	.byte	13
	.byte	'Can_NPCRValueType',0,10,188,4,16,2,9
	.byte	'Can_NPCRValue',0
	.word	288
	.byte	2,2,35,0,0,4
	.byte	'Can_NPCRValueType',0,10,191,4,3
	.word	5473
	.byte	13
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,194,4,16,8,9
	.byte	'CanControllerBaudrate',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'CanControllerBaudrateCfg',0
	.word	288
	.byte	2,2,35,4,0,4
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,10,198,4,3
	.word	5548
	.byte	17
	.word	5548
	.byte	3
	.word	5713
	.byte	13
	.byte	'Can_BaudrateConfigPtrType',0,10,201,4,16,4,9
	.byte	'Can_kBaudrateConfigPtr',0
	.word	5718
	.byte	4,2,35,0,0,4
	.byte	'Can_BaudrateConfigPtrType',0,10,204,4,3
	.word	5723
	.byte	13
	.byte	'Can_EventHandlingType',0,10,226,4,16,4,9
	.byte	'CanEventType',0
	.word	5363
	.byte	4,2,35,0,0,4
	.byte	'Can_EventHandlingType',0,10,229,4,3
	.word	5823
	.byte	4
	.byte	'Rte_TransformerErrorCode',0,11,130,1,15
	.word	257
	.byte	4
	.byte	'Rte_TransformerClass',0,11,131,1,15
	.word	257
	.byte	8,11,168,1,9,12,9
	.byte	'in',0
	.word	1663
	.byte	4,2,35,0,9
	.byte	'out',0
	.word	1663
	.byte	4,2,35,4,9
	.byte	'used',0
	.word	288
	.byte	2,2,35,8,9
	.byte	'lost_data',0
	.word	257
	.byte	1,2,35,10,0,4
	.byte	'Rte_QDynType',0,11,173,1,3
	.word	5969
	.byte	5,11,175,1,9,4,6
	.byte	'RTE_DRA',0,0,6
	.byte	'RTE_WOWP',0,1,6
	.byte	'RTE_TASK',0,2,6
	.byte	'RTE_ARE',0,3,6
	.byte	'RTE_EV',0,4,6
	.byte	'RTE_MSI',0,5,0,4
	.byte	'Rte_NotificationType',0,11,182,1,3
	.word	6056
	.byte	10,128,8
	.word	257
	.byte	11,255,7,0,4
	.byte	'Impl_NVM_DstPtrType_1024',0,12,50,15
	.word	6154
	.byte	4
	.byte	'CanIf_u32_impl',0,12,69,16
	.word	325
	.byte	4
	.byte	'CanIf_u16_impl',0,12,71,16
	.word	288
	.byte	4
	.byte	'CanIf_u8_impl',0,12,73,15
	.word	257
	.byte	4
	.byte	'CanIf_ControllerModeType_Enum_impl',0,12,88,15
	.word	257
	.byte	4
	.byte	'CanIf_PduModeType_Enum_impl',0,12,90,15
	.word	257
	.byte	8,12,92,9,2,9
	.byte	'DeviceMode',0
	.word	257
	.byte	1,2,35,0,9
	.byte	'ChannelMode',0
	.word	257
	.byte	1,2,35,1,0,4
	.byte	'CanIf_ControllerStateType_struct_impl',0,12,95,3
	.word	6345
	.byte	4
	.byte	'CanIf_NotifStatusType_Enum_impl',0,12,100,15
	.word	257
	.byte	4
	.byte	'CanSM_boolean_Impl',0,12,120,15
	.word	257
	.byte	4
	.byte	'CanSM_u8_Impl',0,12,123,15
	.word	257
	.byte	4
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,12,128,1,15
	.word	257
	.byte	4
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,12,132,1,15
	.word	257
	.byte	4
	.byte	'CanSM_u16_Impl',0,12,136,1,16
	.word	288
	.byte	4
	.byte	'CanSM_TimerStateType_Enum_impl',0,12,138,1,15
	.word	257
	.byte	8,12,140,1,9,4,9
	.byte	'cntTick_u16',0
	.word	288
	.byte	2,2,35,0,9
	.byte	'stTimer',0
	.word	257
	.byte	1,2,35,2,0,4
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,12,143,1,3
	.word	6686
	.byte	4
	.byte	'Com_impl_u16',0,12,154,1,16
	.word	288
	.byte	4
	.byte	'Com_impl_u8',0,12,157,1,15
	.word	257
	.byte	4
	.byte	'ComM_uint32_Impl',0,12,173,1,16
	.word	325
	.byte	4
	.byte	'ComM_uint16_Impl',0,12,175,1,16
	.word	288
	.byte	4
	.byte	'ComM_uint8_Impl',0,12,177,1,15
	.word	257
	.byte	4
	.byte	'ComM_bool_Impl',0,12,179,1,15
	.word	257
	.byte	8,12,181,1,9,24,9
	.byte	'ChannelState_e',0
	.word	325
	.byte	4,2,35,0,9
	.byte	'LightTimeoutCtr_u32',0
	.word	325
	.byte	4,2,35,4,9
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	288
	.byte	2,2,35,8,9
	.byte	'ChannelMode_u8',0
	.word	257
	.byte	1,2,35,10,9
	.byte	'BusSmMode_u8',0
	.word	257
	.byte	1,2,35,11,9
	.byte	'UserRequestCtr_u8',0
	.word	257
	.byte	1,2,35,12,9
	.byte	'PassiveRequestState_u8',0
	.word	257
	.byte	1,2,35,13,9
	.byte	'PncRequestCtr_u8',0
	.word	257
	.byte	1,2,35,14,9
	.byte	'InhibitionReqStatus_u8',0
	.word	257
	.byte	1,2,35,15,9
	.byte	'NmNetworkRequestStatus_b',0
	.word	257
	.byte	1,2,35,16,9
	.byte	'DiagnosticRequestState_b',0
	.word	257
	.byte	1,2,35,17,9
	.byte	'CommunicationAllowed_b',0
	.word	257
	.byte	1,2,35,18,9
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	257
	.byte	1,2,35,19,9
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	257
	.byte	1,2,35,20,9
	.byte	'NmNetworkModeStatus_b',0
	.word	257
	.byte	1,2,35,21,0,4
	.byte	'ComM_ChannelStruct_Impl',0,12,197,1,3
	.word	6918
	.byte	8,12,206,1,9,10,9
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	288
	.byte	2,2,35,0,9
	.byte	'LimitToNoComCtr_u16',0
	.word	288
	.byte	2,2,35,2,9
	.byte	'RequestedUserMode_t',0
	.word	257
	.byte	1,2,35,4,9
	.byte	'IndicatedUserMode_t',0
	.word	257
	.byte	1,2,35,5,9
	.byte	'numChannelsInFullCom_u8',0
	.word	257
	.byte	1,2,35,6,9
	.byte	'numChannelsInSilentCom_u8',0
	.word	257
	.byte	1,2,35,7,9
	.byte	'numChannelsInNoCom_u8',0
	.word	257
	.byte	1,2,35,8,0,4
	.byte	'ComM_UserStruct_Impl',0,12,214,1,3
	.word	7422
	.byte	4
	.byte	'Dcm_IOOperationResponseType',0,12,252,1,15
	.word	257
	.byte	4
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	12,138,2,15
	.word	257
	.byte	4
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,12,146,2,15
	.word	257
	.byte	4
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,12,150,2,15
	.word	257
	.byte	4
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,12,154,2,15
	.word	257
	.byte	4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,12,243,3,34
	.word	6165
	.byte	10,128,8
	.word	257
	.byte	11,255,7,0,4
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,12,246,3,34
	.word	6165
	.byte	5,13,186,1,10,4,6
	.byte	'NM_BUS_TYPE_CAN',0,0,0,4
	.byte	'Nm_BusType',0,13,189,1,3
	.word	8240
	.byte	4
	.byte	'Nm_TimerType',0,14,73,16
	.word	325
	.byte	4
	.byte	'rba_BswSrv_uint64',0,15,66,28
	.word	356
	.byte	5,16,136,3,9,4,6
	.byte	'NM_SYNCPOINT_INVALID',0,0,6
	.byte	'NM_SYNCPOINT_INIT',0,1,6
	.byte	'NM_SYNCPOINT_READY',0,2,6
	.byte	'NM_SYNCPOINT_REACHED',0,3,0,4
	.byte	'Nm_SynchType',0,16,142,3,3
	.word	8332
	.byte	5,16,155,3,9,4,6
	.byte	'NM_CLUSTER_INIT',0,0,6
	.byte	'NM_CLUSTER_PASSIVE',0,1,6
	.byte	'NM_CLUSTER_ACTIVE_ACTIVE',0,2,6
	.byte	'NM_CLUSTER_ACTIVE_PASSIVE',0,3,0,4
	.byte	'Nm_ClusterStateType',0,16,161,3,3
	.word	8448
	.byte	5,16,177,3,9,4,6
	.byte	'NM_CHANNEL_STATE_UNINIT',0,0,6
	.byte	'NM_CHANNEL_STATE_INIT',0,1,6
	.byte	'NM_CHANNEL_STATE_NORMAL',0,2,6
	.byte	'NM_CHANNEL_STATE_PREPARE_WAIT_SLEEP',0,3,6
	.byte	'NM_CHANNEL_STATE_WAIT_SLEEP',0,4,6
	.byte	'NM_CHANNEL_STATE_BUS_SLEEP',0,5,0,4
	.byte	'Nm_ChannelStateType',0,16,186,3,3
	.word	8578
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,4,1,58,15,59,15,57,15,11,15,0,0,6,40,0,3,8,28,13,0,0,7,36,0,3,8,11,15,62,15,0,0,8,19
	.byte	1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0
	.byte	12,21,0,54,15,39,12,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15,0,0,14,59,0,3,8,0,0,15,21,1,54,15,39,12,0
	.byte	0,16,5,0,73,19,0,0,17,38,0,73,19,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,20,21,0,73,19,54,15,39,12,0,0,21,53,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Nm\\src\\Nm_MainFunction.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\NmStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm_PreCompile_and_PB_Variant\\CanNm_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\Nm_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\Nm.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\Nm_Priv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     1  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     2  /*
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     3   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     4   * Includes
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     5   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     6   */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     7  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     8  /* NM Interface private header file, this file is included only by Nm module */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	     9  #include "Nm_Priv.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    10  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    11  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    12  /*
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    13   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    14   * Variables
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    15   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    16   */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    17  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    18  /**************************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    19   * Function
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    20   **************************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    21   **************************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    22   * Function Name: Nm_MainFunction
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    23   * Syntax :       void Nm_MainFunction( void )
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    24   * Description:   This is the main function of NM Coordinator, this handles all channels that are being
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    25   *                coordinated for shutdown.
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    26   * Parameter:     void
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    27   * Return:        void
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    28   *************************************************************************************************************/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    29  /*
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    30   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    31   * Defines
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    32   ***************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    33   */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    34  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    35  #if (NM_COORDINATOR_SUPPORT_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    36  #define NM_START_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    37  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    38  static FUNC(void, NM_CODE) Nm_ComputeSwFRTimer(const uint32 MainFunctionCycleTime);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    39  #define NM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    40  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    41  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    42  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    43  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    44  #define NM_START_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    45  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    46  FUNC(void, NM_CODE) Nm_MainFunction(void)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    47  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    48  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    49      P2CONST(Nm_ConfigType,AUTOMATIC,NM_APPL_CONST)      ConfDataPtr;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    50  #if (NM_BUS_SYNCHRONIZATION_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    51      P2CONST(Nm_BusNmApiType,AUTOMATIC,NM_APPL_CONST)    FuncPtr;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    52  #endif
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    53      P2VAR(Nm_NetworkRamType,AUTOMATIC,NM_APPL_DATA)     MainNetworkRamDataPtr;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    54      P2VAR(Nm_GlobalRamType,AUTOMATIC,NM_APPL_DATA)      GlobalRamDataPtr;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    55  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    56  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    57      VAR(Std_ReturnType,AUTOMATIC)                        RetVal;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    58      VAR(NetworkHandleType, AUTOMATIC)                   NetworkHandle;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    59      VAR(uint8,AUTOMATIC)                                ClusterLoopIdx;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    60      VAR(uint8,AUTOMATIC)                                ChannelLoopIdx;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    61      VAR(boolean,AUTOMATIC)                              stateChangePossible;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    62      static VAR(Nm_ClusterStateType,AUTOMATIC)           PrevClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    63  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    64      /*Computation of Nm timer*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    65      Nm_ComputeSwFRTimer(NM_MAIN_FUNCTION_CYCLETIME);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    66  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    67      //loop through every cluster
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    68      for(ClusterLoopIdx=0;ClusterLoopIdx < NM_NUMBER_OF_CLUSTERS;ClusterLoopIdx++)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    69      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    70          GlobalRamDataPtr = &Nm_GlobalData_s[ClusterLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    71  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    72          if(GlobalRamDataPtr->InitStatus != TRUE)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    73          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    74              /********************************* Start: DET *************************************/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    75              /* Report DET if NM is Uninitialized */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    76              NM_DET_REPORT_ERROR(ClusterLoopIdx, NM_SID_MAINFUNCTION,NM_E_UNINIT);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    77  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    78              /*********************************  End: DET  *************************************/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    79          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    80  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    81          stateChangePossible = FALSE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    82  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    83          do{
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    84              switch(GlobalRamDataPtr->ClusterState)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    85              {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    86                  case NM_CLUSTER_INIT:
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    87                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    88                      stateChangePossible = FALSE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    89  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    90                      /*check if there is any network request or passive request*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    91                      if((GlobalRamDataPtr->ctActive > 0) || (GlobalRamDataPtr->ctPassive > 0) || (GlobalRamDataPtr->ctComMRequests >0))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    92                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    93                          PrevClusterState = GlobalRamDataPtr->ClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    94                          GlobalRamDataPtr->ClusterState=NM_CLUSTER_ACTIVE_ACTIVE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    95                          stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    96                      }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    97                      break;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    98                  }//case NM_CLUSTER_INIT
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	    99  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   100                  case NM_CLUSTER_ACTIVE_ACTIVE:
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   101                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   102                      if(stateChangePossible == TRUE)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   103                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   104                          stateChangePossible=FALSE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   105                          if(PrevClusterState == NM_CLUSTER_INIT)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   106                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   107                              if((GlobalRamDataPtr->ctActive == 0) && (GlobalRamDataPtr->ctComMRequests == 0))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   108                              {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   109                                  PrevClusterState = GlobalRamDataPtr->ClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   110                                  GlobalRamDataPtr->ClusterState = NM_CLUSTER_ACTIVE_PASSIVE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   111                                  stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   112                              }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   113                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   114                          else if(PrevClusterState == NM_CLUSTER_ACTIVE_PASSIVE)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   115                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   116                              for(ChannelLoopIdx = 0 ;ChannelLoopIdx < NM_NUMBER_OF_CHANNELS; ChannelLoopIdx++)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   117                              {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   118                                  ConfDataPtr = &Nm_ConfData_cs[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   119                                  NetworkHandle = ConfDataPtr->comMHandle;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   120                                  if((ConfDataPtr->NmChannelType == NM_PASSIVE_CHANNEL) && (ConfDataPtr->ClusterIdx == ClusterLoopIdx))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   121                                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   122                                      /*call internal network request to request bus specific network request and handle the states accordingly*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   123                                      RetVal = Nm_Int_NetworkRequest(FALSE , NetworkHandle , NM_INTERNAL_REQUEST);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   124                                  }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   125                              }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   126                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   127                          /*Previous state of cluster  is Passive*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   128                          else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   129                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   130                              //To be handled in abort shutdown case.
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   131                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   132  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   133                      }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   134                      else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   135                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   136                          /*Check if only passive channel is requested and active request for any channel form ComM within cluster */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   137                          if((GlobalRamDataPtr->ctActive == 0) && (GlobalRamDataPtr->ctComMRequests == 0))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   138                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   139                              PrevClusterState = GlobalRamDataPtr->ClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   140                              GlobalRamDataPtr->ClusterState = NM_CLUSTER_ACTIVE_PASSIVE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   141                              stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   142                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   143                      }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   144                      break;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   145                  }//case NM_CLUSTER_ACTIVE_ACTIVE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   146  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   147                  case NM_CLUSTER_ACTIVE_PASSIVE:
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   148                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   149                      if(stateChangePossible == TRUE)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   150                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   151                          stateChangePossible = FALSE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   152                          for(ChannelLoopIdx = 0;ChannelLoopIdx < NM_NUMBER_OF_CHANNELS;ChannelLoopIdx++)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   153                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   154                              ConfDataPtr = &Nm_ConfData_cs[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   155                              NetworkHandle = ConfDataPtr->comMHandle;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   156                              MainNetworkRamDataPtr=&Nm_ChannelData_s[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   157                              if((ConfDataPtr->NmChannelType == NM_PASSIVE_CHANNEL)&&(ConfDataPtr->ClusterIdx == ClusterLoopIdx) \ 
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   158                                      &&(MainNetworkRamDataPtr->ChannelState == NM_CHANNEL_STATE_NORMAL))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   159                              {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   160                                  /*call bus specific release for passive channel and handle channel state accordingly*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   161                                  RetVal = Nm_Int_NetworkRelease(NetworkHandle,NM_INTERNAL_REQUEST);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   162                              }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   163                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   164                      }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   165                      else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   166                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   167                          if((GlobalRamDataPtr->ctActive > 0) || (GlobalRamDataPtr->ctComMRequests > 0))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   168                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   169                              PrevClusterState = GlobalRamDataPtr->ClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   170                              GlobalRamDataPtr->ClusterState = NM_CLUSTER_ACTIVE_ACTIVE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   171                              stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   172                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   173                          else if(GlobalRamDataPtr->ctPassive == 0)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   174                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   175                              PrevClusterState = GlobalRamDataPtr->ClusterState;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   176                              GlobalRamDataPtr->ClusterState = NM_CLUSTER_PASSIVE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   177                              stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   178                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   179                          else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   180                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   181                              //do nothing
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   182                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   183                      }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   184                      break;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   185                  }//case NM_CLUSTER_ACTIVE_PASSIVE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   186  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   187                  case NM_CLUSTER_PASSIVE:
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   188                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   189                      if(stateChangePossible == TRUE)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   190                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   191                          stateChangePossible=FALSE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   192                          GlobalRamDataPtr->ctBusSleep = 0;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   193                          /*Syncpoint would be initialized if Nm_SynchronizingNetwork is enabled */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   194                          /*Check whether Syncpoint is initialized*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   195                          if(GlobalRamDataPtr->SyncPointState == NM_SYNCPOINT_INIT)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   196                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   197                              GlobalRamDataPtr->SyncPointState = NM_SYNCPOINT_READY;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   198                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   199                          else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   200                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   201                              GlobalRamDataPtr->SyncPointState = NM_SYNCPOINT_REACHED;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   202                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   203  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   204  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   205                      }//if(statechangepossible)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   206                      else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   207                      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   208                          if(GlobalRamDataPtr->SyncPointState == NM_SYNCPOINT_REACHED)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   209                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   210                             GlobalRamDataPtr->SyncPointState = NM_SYNCPOINT_INVALID;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   211                             /*loop through every active channel to initiate shutdown procedure*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   212                             for(ChannelLoopIdx = 0 ; ChannelLoopIdx < NM_NUMBER_OF_CHANNELS ; ChannelLoopIdx++)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   213                             {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   214                                 ConfDataPtr=&Nm_ConfData_cs[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   215                                 NetworkHandle = ConfDataPtr->comMHandle;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   216                                 MainNetworkRamDataPtr=&Nm_ChannelData_s[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   217  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   218                                 if((ConfDataPtr->ClusterIdx == ClusterLoopIdx))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   219                                 {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   220                                     if((ConfDataPtr->NmChannelType == NM_ACTIVE_CHANNEL) && (MainNetworkRamDataPtr->ChannelState == NM_CHANNEL_STATE_NORMAL))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   221                                     {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   222                                         RetVal = Nm_Int_NetworkRelease(NetworkHandle,NM_INTERNAL_REQUEST);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   223                                     }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   224  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   225                                     if((MainNetworkRamDataPtr->ChannelState == NM_CHANNEL_STATE_PREPARE_WAIT_SLEEP) || \ 
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   226                                             (MainNetworkRamDataPtr->ChannelState == NM_CHANNEL_STATE_WAIT_SLEEP))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   227                                     {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   228                                         /*Increament BusSleep counter based on number of channel within a cluster are expected to go to bus sleep*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   229                                         SchM_Enter_Nm_ChangeStateNoNest();
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   230                                         GlobalRamDataPtr->ctBusSleep++;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   231                                         SchM_Exit_Nm_ChangeStateNoNest();
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   232                                     }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   233                                 }// if(part of cluster)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   234                             }//for loop
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   235                          }//if(syncpointreached)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   236  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   237                          /*check all the bus have went to sleep*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   238                          if((GlobalRamDataPtr->SyncPointState == NM_SYNCPOINT_INVALID) && (GlobalRamDataPtr->ctBusSleep == 0))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   239                          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   240                              /*reset all the channels within the cluster*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   241                              Nm_Reset(ClusterLoopIdx);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   242                              stateChangePossible = TRUE;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   243                          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   244                      }//else
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   245                      break;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   246                  }//case NM_CLUSTER_PASSIVE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   247                  default:
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   248                      /* Intentionally Empty */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   249                      break;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   250              }//switch
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   251  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   252          }while(stateChangePossible == TRUE);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   253  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   254      }// for loop through clusters
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   255  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   256  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   257  /* Checking each channel whether shutdown delay timer has expired or not*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   258      for(ChannelLoopIdx = 0; ChannelLoopIdx < NM_NUMBER_OF_CHANNELS ; ChannelLoopIdx++)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   259      {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   260          ConfDataPtr = &Nm_ConfData_cs[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   261          MainNetworkRamDataPtr = &Nm_ChannelData_s[ChannelLoopIdx];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   262  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   263          if(ConfDataPtr->ClusterIdx != 0xFF)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   264          {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   265              if(MainNetworkRamDataPtr->ChannelState == NM_CHANNEL_STATE_PREPARE_WAIT_SLEEP)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   266              {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   267                  /*Wait for Shutdown timer to expire*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   268                  if(Nm_TimerExpired(MainNetworkRamDataPtr->ShutdownDelayTimeStamp,ConfDataPtr->ShutdownDelay))
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   269                  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   270                     NetworkHandle = ConfDataPtr->comMHandle;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   271  #if (NM_BUS_SYNCHRONIZATION_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   272                     /*Call busSynchronization to send the Nm message*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   273                     FuncPtr = &Nm_BusNmApi[ConfDataPtr->BusNmType];
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   274                     RetVal = (*FuncPtr->BusNm_RequestBusSynchronization)(NetworkHandle);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   275  #endif
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   276                     /*call Bus Specific Network release and handle the channel state accordingly*/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   277                     RetVal = Nm_Int_NetworkRelease(NetworkHandle,NM_INTERNAL_REQUEST);
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   278                  }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   279              }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   280          }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   281      }//for loop channels
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   282      (void)RetVal;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   283  }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   284  #define NM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   285  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   286  
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   287  /*****************************************************************************************************
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   288   * Function name: Nm_ComputeSwFRTimer
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   289   * Description: This function calculate the Free running timer for NM Coordinator
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   290   * Parameter: MainFunctionCycleTime - period of MainFunction calls
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   291   * Return: void
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   292   ****************************************************************************************************/
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   293  #define NM_START_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   294  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   295  static FUNC(void, NM_CODE) Nm_ComputeSwFRTimer(const uint32 MainFunctionCycleTime)
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   296  {
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   297      SwFRTimer += MainFunctionCycleTime;
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   298  }
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   299  #define NM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   300  #include "Nm_MemMap.h"
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   301  #endif /* #if (NM_COORDINATOR_SUPPORT_ENABLED != STD_OFF) */
; BSW\src\BSW\Gen\Nm\src\Nm_MainFunction.c	   302  

	; Module end
