	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc9048a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\CanNm\\CanNm.src BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c'

	
$TC16X
	
	.sdecl	'.text.CanNm.CanNm_MainFunction',code,cluster('CanNm_MainFunction')
	.sect	'.text.CanNm.CanNm_MainFunction'
	.align	2
	
	.global	CanNm_MainFunction

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     1  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     2  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     3  /*
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     4   ***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     5   * Includes
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     6   ***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     7   */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     8  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	     9  #include "CanNm_Inl.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    10  #include "CanIf.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    11  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    12  #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    13  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    14  #if (!defined(CANIF_AR_RELEASE_MINOR_VERSION) || (CANIF_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    15  #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    16  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    17  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    18  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    19  #define CANNM_START_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    20  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    21  static FUNC(void, CANNM_CODE) CanNm_InternalMainProcess(CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    22  static FUNC(void, CANNM_CODE) CanNm_MainFunctionTx(CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    23  #define CANNM_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    24  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    25  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    26  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    27  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_MainProcess_EIRA(void);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    28  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    29  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    30  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    31  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_MainProcess_ERA(VAR(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    32  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    33  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    34  /**************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    35  /* Global functions (declared in header files )                                                   */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    36  /**************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    37  /***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    38   Function name    : CanNm_MainFunction
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    39   Syntax           : void CanNm_MainFunction( void )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    40   Description      : This is an autosar specific API describing the main function of CAN NM
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    41                      This calls channel specific main Function for each channel with the proper
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    42                      handle and raster period
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    43   Parameter        : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    44   Return value     : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    45   ***************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    46  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    47  #define CANNM_START_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    48  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    49  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    50  FUNC(void, CANNM_CODE) CanNm_MainFunction( void )
; Function CanNm_MainFunction
.L93:
CanNm_MainFunction:	.type	func

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    51  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    52      VAR(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    53  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    54      P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    55  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    56      for(CanNm_NetworkHandle = 0; CanNm_NetworkHandle < CANNM_NUMBER_OF_CHANNELS; CanNm_NetworkHandle++)
	mov	d15,#0
.L351:
	j	.L2
.L3:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    57      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    58          /* Set the pointer to configuration structure of channel CanNm_NetworkHandle */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    59          ConfigPtr_pcs = CANNM_GET_CHANNEL_CONFIG(CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    60  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    61          CanNm_InternalMainProcess(CanNm_NetworkHandle);
	mov	d4,d15
.L352:
	call	CanNm_InternalMainProcess
.L353:
	add	d15,#1
.L2:
	jeq	d15,#0,.L3
.L431:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    62  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    63  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    64          if(ConfigPtr_pcs->EraCalcStatus_b != FALSE)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    65          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    66              CanNm_MainProcess_ERA(CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    67          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    68  #else
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    69       (void)ConfigPtr_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    70  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    71       }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    72  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    73  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    74      CanNm_MainProcess_EIRA();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    75  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    76  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    77  }
	ret
.L117:
	
__CanNm_MainFunction_function_end:
	.size	CanNm_MainFunction,__CanNm_MainFunction_function_end-CanNm_MainFunction
.L106:
	; End of function
	
	.sdecl	'.text.CanNm.CanNm_InternalMainProcess',code,cluster('CanNm_InternalMainProcess')
	.sect	'.text.CanNm.CanNm_InternalMainProcess'
	.align	2
	

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    78  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    79  #define CANNM_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    80  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    81  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    82  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    83  /***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    84   Function name    : CanNm_InternalMainProcess
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    85   Syntax           : void CanNm_InternalMainProcess( const NetworkHandleType CanNm_NetworkHandle )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    86   Description      : This is an internal main function of CANNM which does state machine processing
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    87                      for all channels.
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    88   Parameter        : CanNm_NetworkHandle - Identification of the CANNM-channel
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    89   Return value     : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    90   ***************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    91  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    92  #define CANNM_START_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    93  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    94  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    95  static FUNC(void, CANNM_CODE) CanNm_InternalMainProcess (CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle)
; Function CanNm_InternalMainProcess
.L95:
CanNm_InternalMainProcess:	.type	func
	sub.a	a10,#8
.L354:
	mov	d8,d4
.L356:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    96  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    97  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    98      /* Pointer to configuration data */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	    99      P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   100  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   101      /* Pointer to RAM data */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   102      P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   103  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   104      /* To store local copy of Rx Indication flag */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   105      VAR(boolean, AUTOMATIC) PduRxInd_b;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   106  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   107  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   108      /* To store local copy of Tx confirmation flag */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   109      VAR(boolean, AUTOMATIC) PduTxConfirmation_b;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   110  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   111  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   112  #if ((CANNM_NODE_DETECTION_ENABLED != STD_OFF)||(CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF))
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   113      /* To store local copy of received Control Bit Vector */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   114      VAR(uint8, AUTOMATIC) CtrlBitVector_u8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   115  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   116  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   117  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   118      /* To store Network Request state */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   119      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   120  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   121  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   122      /* To store local copy of CanNmRepeatMessageTime [to reduce run-time] */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   123      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   124  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   125      /* To store local copy of CanNm state [to reduce run-time] */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   126      VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   127  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   128      /**** End Of Declarations ****/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   129  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   130      /* Set the pointer to configuration structure of channel CanNm_NetworkHandle */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   131      ConfigPtr_pcs = CANNM_GET_CHANNEL_CONFIG(CanNm_NetworkHandle);
	movh.a	a15,#@his(CanNm_ChannelConfigData_cs)
	lea	a15,[a15]@los(CanNm_ChannelConfigData_cs)
	mul	d15,d8,#52
	addsc.a	a12,a15,d15,#0
.L357:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   132  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   133      /********************************* Start: DET *************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   134  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   135      /* Report DET if CANNM is uninitialized */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   136      CANNM_DET_REPORT_ERROR((CanNm_RamData_s[CanNm_NetworkHandle].State_en == NM_STATE_UNINIT),
	movh.a	a15,#@his(CanNm_RamData_s)
	lea	a15,[a15]@los(CanNm_RamData_s)
	mul	d15,d8,#88
	addsc.a	a15,a15,d15,#0
.L358:
	ld.w	d15,[a15]56
	jne	d15,#0,.L4
	mov	d4,#31
.L355:
	ld.bu	d5,[a12]38
	mov	d6,#19
	mov	d7,#1
	call	Det_ReportError
	j	.L5
.L4:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   137              ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NO_INIT)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   138  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   139      /*********************************  End: DET  *************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   140  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   141      /* Set the pointer to RAM structure of Channel CanNm_NetworkHandle */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   142      RamPtr_ps = &CanNm_RamData_s[CanNm_NetworkHandle];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   143  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   144      /* Store a local copy of CanNm state */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   145      StateCopy_e = RamPtr_ps->State_en;
	ld.w	d2,[a15]56
.L138:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
	ld.w	d15,[a15]8
.L436:
	addi	d15,d15,#10000
	st.w	[a15]8,d15
.L162:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   146  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   147      /* Compute the free running timer */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   148      CanNm_ComputeSwFrTimer(RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   149  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   150      /*** protect from interrupt ***/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   151      SchM_Enter_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   152  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   153      /* Get the RxIndication status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   154      PduRxInd_b = RamPtr_ps->RxIndication_b;
	ld.bu	d3,[a15]82
.L361:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   155      RamPtr_ps->RxIndication_b = FALSE;
	mov	d0,#0
.L437:
	st.b	[a15]82,d0
.L438:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   156  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   157  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   158      /* Get transmit confirmation status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   159      PduTxConfirmation_b = RamPtr_ps->TxConfirmation_b;
	ld.bu	d0,[a15]83
.L362:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   160      RamPtr_ps->TxConfirmation_b = FALSE;
	mov	d1,#0
.L439:
	st.b	[a15]83,d1
.L440:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   161  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   162  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   163  #if ((CANNM_NODE_DETECTION_ENABLED != STD_OFF)||(CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF))
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   164      /* Store the received control bit vector locally */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   165      CtrlBitVector_u8 = RamPtr_ps->RxCtrlBitVector_u8;
	ld.bu	d4,[a15]77
.L359:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   166  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   167  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   168  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   169      /* Get the NmCoordinatorSleepReady bit from the CBV of the received message */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   170      RamPtr_ps->CoordReadySleepBit_u8 = (CtrlBitVector_u8 & CANNM_COORD_READY_SLEEP_BIT_MASK );
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   171  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   172  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   173      /* Reset the control bit vector after storage*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   174      RamPtr_ps->RxCtrlBitVector_u8 = (RamPtr_ps->RxCtrlBitVector_u8 & CANNM_RESET_CONTROL_BIT_VECTOR_MASK );
	mov	d1,#0
.L441:
	st.b	[a15]77,d1
.L442:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   175  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   176      /*** unprotect ***/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   177      SchM_Exit_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   178  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   179      /* Check whether CanNm is in Network mode */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   180      if (RamPtr_ps->Mode_en == NM_MODE_NETWORK)
	ld.w	d15,[a15]72
.L443:
	jne	d15,#3,.L6
.L149:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
	ld.w	d2,[a15]56
.L444:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)      (inlined)
	jeq	d3,#0,.L7
.L445:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	ld.w	d15,[a15]8
	st.w	[a15]28,d15
.L446:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);      (inlined)
	j	.L8

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)      (inlined)
.L7:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)      (inlined)
	jeq	d0,#0,.L9
.L447:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	ld.w	d15,[a15]8
	st.w	[a15]28,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)      (inlined)
.L9:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else      (inlined)
.L8:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;      (inlined)
	j	.L10

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }      (inlined)
.L10:
.L6:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   181      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   182          StateCopy_e = CanNm_NetworkModeProcessing(
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   183                      #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   184                          CanNm_NetworkHandle,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   185                      #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   186                      #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   187                           CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   188                          ConfigPtr_pcs,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   189                      #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   190                          RamPtr_ps,PduRxInd_b
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   191                      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   192                          ,PduTxConfirmation_b
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   193                      #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   194                          );
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   195      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   196  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   197  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   198      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d15,[a15]60
.L364:
	st.w	[a10],d15
.L365:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   199  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   200      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
	ld.w	d9,[a12]24
.L366:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   201  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   202      /* Start state machine handling */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   203      switch(StateCopy_e)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   204      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   205  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   206          case NM_STATE_BUS_SLEEP:
	mov	d15,#1
.L150:
	jeq	d15,d2,.L11
.L151:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   207          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   208              CanNm_CaseBusSleep(
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   209                                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   210                                      CanNm_NetworkHandle,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   211                                  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   212                                      ConfigPtr_pcs,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   213                                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   214                                      RamPtr_ps,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   215                                  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   216                                      PduRxInd_b );
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   217              break;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   218          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   219  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   220          case NM_STATE_PREPARE_BUS_SLEEP:
	mov	d0,#2
.L152:
	jeq	d0,d2,.L12
.L153:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   221          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   222              CanNm_CasePrepareBusSleep(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps,PduRxInd_b);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   223              break;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   224          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   225  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   226          case NM_STATE_READY_SLEEP:
	mov	d0,#3
.L154:
	jeq	d0,d2,.L13
.L155:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   227          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   228              CanNm_CaseReadySleep(
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   229                            #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   230                             CanNm_NetworkHandle,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   231                            #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   232                             ConfigPtr_pcs, RamPtr_ps
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   233                            #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   234                             ,CtrlBitVector_u8
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   235                            #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   236              );
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   237              break;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   238          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   239  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   240  /* These states are available only if the passive mode  is disabled*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   241  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   242          case NM_STATE_NORMAL_OPERATION:
	mov	d0,#4
.L156:
	jeq	d0,d2,.L14
.L157:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   243          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   244              CanNm_CaseNormalOperation(
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   245                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   246                                  CanNm_NetworkHandle,
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   247                              #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   248                                  ConfigPtr_pcs, RamPtr_ps
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   249                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   250                                  , CtrlBitVector_u8
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   251                              #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   252              );
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   253              break;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   254          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   255  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   256          case NM_STATE_REPEAT_MESSAGE:
	mov	d0,#5
.L158:
	jeq	d0,d2,.L15
.L159:
	j	.L16
.L11:
	mov	d11,#0
.L167:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d15,[a15]60
.L367:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
	ld.bu	d10,[a12]38
.L369:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
	jne	d15,#1,.L17
.L448:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
	ld.bu	d15,[a12]47
.L368:
	st.b	[a15]79,d15
.L449:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
	ld.bu	d15,[a12]50
.L450:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)      (inlined)
	jne	d15,#1,.L18
.L451:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
	ld.bu	d15,[a15]78
.L452:
	or	d15,#16
.L453:
	st.b	[a15]78,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)      (inlined)
.L18:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
	mov	d10,#1
.L180:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
	mov	d4,#5
.L363:
	mov	d5,#3
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L360:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
	ld.bu	d4,[a12]38
	call	Nm_NetworkMode
.L454:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
	ld.w	d15,[a12]24
.L455:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
	jeq	d15,#0,.L19
.L456:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
	ld.w	d15,[a15]8
	st.w	[a15]24,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
.L19:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	ld.w	d15,[a15]8
	st.w	[a15]28,d15
.L457:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
	mov	d4,d11
	call	CanNm_StartTransmission
.L458:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
	ld.bu	d4,[a12]38
.L459:
	mov	d6,#5
	mov	d5,d10
	call	Nm_StateChangeNotification
.L181:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
.L17:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)      (inlined)
	jeq	d3,#0,.L21
.L460:
	mov	d4,d10
.L370:
	call	Nm_NetworkStartIndication
.L371:
	mov	d4,#31
.L461:
	mov	d6,#19
.L462:
	mov	d7,#4
	mov	d5,d10
.L372:
	call	Det_ReportError

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)      (inlined)
.L21:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else      (inlined)
.L20:
	j	.L22
.L12:
	mov	d11,#0
.L192:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d0,[a15]60
.L375:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)      (inlined)
	jeq	d3,#0,.L23
.L463:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
	mov	d10,#2
.L203:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
	mov	d4,#5
.L373:
	mov	d5,#3
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L374:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
	ld.bu	d4,[a12]38
	call	Nm_NetworkMode
.L464:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
	ld.w	d15,[a12]24
.L465:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
	jeq	d15,#0,.L24
.L466:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
	ld.w	d15,[a15]8
	st.w	[a15]24,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
.L24:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	ld.w	d15,[a15]8
	st.w	[a15]28,d15
.L467:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
	mov	d4,d11
	call	CanNm_StartTransmission
.L468:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
	ld.bu	d4,[a12]38
.L469:
	mov	d6,#5
	mov	d5,d10
	call	Nm_StateChangeNotification
.L204:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L25

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)      (inlined)
.L23:
	ld.w	d15,[a15]8
	ld.w	d1,[a15]32
	sub	d1,d15,d1
	ld.w	d15,[a12]32
.L470:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)      (inlined)
	jlt.u	d1,d15,.L26
.L206:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1007      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1008  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1009      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1010  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1011      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1012  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1013      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1014  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1015  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1016  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1017      CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1018  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1019  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1020  #if ((CANNM_STATE_CHANGE_IND_ENABLED == STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED != STD_OFF) && \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1021          (CANNM_REMOTE_SLEEP_IND_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1022      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1023  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1024  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1025  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1026  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1027   Function name    : CanNm_NormalOperationToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1028   Description      : This inline function does transition to Ready Sleep state from Normal Operation state.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1029   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1030                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1031   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1032   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1033  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1034  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1035          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1036          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1037  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1038  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1039  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1040  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1041      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1042  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1043      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_NORMAL_OPERATION, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1044  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1045      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1046  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1047  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1048      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1049      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1050  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1051  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1052  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1053   Function name    : CanNm_ReadySleepToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1054   Description      : This inline function does transition to Normal Operation state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1055   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1056                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1057   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1058   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1059  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1060  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1061          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1062          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1063          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1064  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1065  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1066      /* goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1067      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1068  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1069      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1070      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1071  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1072  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1073      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1074  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1075      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1076      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1077  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1078  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1079      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1080  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1081      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_READY_SLEEP,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1082  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1083      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1084  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1085  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1086  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1087  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1088   Function name    : CanNm_GotoPrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1089   Description      : This inline function does transition to Prepare Bus Sleep state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1090   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1091                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1092   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1093   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1094  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1095  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1096          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1097          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1098  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1099  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1100  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1101      /* Reset active wakeup bit in transmit control bit vector after Network mode is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1102      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & ((uint8)(~(CANNM_ACTIVE_WAKEUP_BIT_POS)));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1103  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1104      /* goto Prepare Bus sleep mode as NMTimeout has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1105      CanNm_ChangeState(RamPtr_ps, NM_STATE_PREPARE_BUS_SLEEP, NM_MODE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1106  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1107      /* TRACE[SWS_CanNm_00114] :  Notify NM Interface about transition to Prepare Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1108      Nm_PrepareBusSleepMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1110      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1111  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1112      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_READY_SLEEP, NM_STATE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1113  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1114  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1115      /* Start wait bus sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1116      /* NM shall wait in Prepare Bus sleep mode until ctWaitBusSleepTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1117      CanNm_StartTimer(RamPtr_ps->ctWaitBusSleepTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1118  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1119  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1120  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1121   Function name    : CanNm_GotoBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1122   Description      : This inline function does transition to Bus Sleep mode from Prepare Bus Sleep mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1123   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1124                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1125   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1126   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1128  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1129          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1130          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1131  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1132  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1133      /* Goto Bus Sleep as timer expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1134      CanNm_ChangeState(RamPtr_ps, NM_STATE_BUS_SLEEP, NM_MODE_BUS_SLEEP);
	mov	d4,#1
.L376:
	mov	d5,#0
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L377:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1135  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1136      /* Clear the Rx status information for this NM Sleep-Cycle */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1137      RamPtr_ps->RxStatus_b = FALSE;
	mov	d15,#0
.L471:
	st.b	[a15]84,d15
.L472:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1138  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1139      RamPtr_ps->CoordReadySleepBit_u8 = 0x00;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1140      RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1141      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & (~(CANNM_COORD_READY_SLEEP_BIT_MASK));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1142  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1143  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1144  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1145      /* The CanNm modules initialization and entering the Bus-Sleep Mode shall cause the PN message filtering to be
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1146       * disabled on the respective channel. As a result all received (PN) NM messages shall be processed in the following
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1147       * as being normal NM messages (i.e. NM-Timeout Timer shall be restarted) */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1148  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1149  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1150      CANNM_ResetPnMsgFilteringStatus(RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1153      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1154  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1155      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, NM_STATE_BUS_SLEEP);
	ld.bu	d4,[a12]38
.L473:
	mov	d5,#2
.L474:
	mov	d6,#1
	call	Nm_StateChangeNotification
.L475:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1156  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1157  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1158      /* TRACE[SWS_CanNm_00126] : Notify Nm about transition to Bus Sleep mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1159      /* This triggers shut down of the corresponding bus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1160      Nm_BusSleepMode(ConfigPtr_pcs->NetworkHandle);
	ld.bu	d4,[a12]38
	call	Nm_BusSleepMode
.L207:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L27

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)      (inlined)
.L26:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
	jne	d0,#1,.L28
.L476:
	ld.bu	d15,[a12]47
.L477:
	st.b	[a15]79,d15
.L478:
	ld.bu	d15,[a12]50
.L479:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)      (inlined)
	jne	d15,#1,.L29
.L480:
	ld.bu	d15,[a15]78
.L481:
	or	d15,#16
.L482:
	st.b	[a15]78,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)      (inlined)
.L29:
	mov	d10,#2
.L213:
	mov	d4,#5
.L378:
	mov	d5,#3
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L379:
	ld.bu	d4,[a12]38
	call	Nm_NetworkMode
.L483:
	ld.w	d15,[a12]24
.L484:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
	jeq	d15,#0,.L30
.L485:
	ld.w	d15,[a15]8
	st.w	[a15]24,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
.L30:
	ld.w	d15,[a15]8
	st.w	[a15]28,d15
.L486:
	mov	d4,d11
	call	CanNm_StartTransmission
.L487:
	ld.bu	d4,[a12]38
.L488:
	mov	d6,#5
	mov	d5,d10
	call	Nm_StateChangeNotification

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
.L28:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else      (inlined)
.L27:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else      (inlined)
.L25:
	j	.L31
.L13:
	mov	d11,#0
.L489:
	mov	d0,d4
.L215:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
	and	d12,d4,#1
.L383:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
	ld.bu	d1,[a15]81
.L384:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d2,[a15]60
.L382:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
	ld.w	d3,[a15]28
.L381:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
	ld.bu	d10,[a12]38
.L386:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
	ld.bu	d15,[a12]42
.L490:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))      (inlined)
	jeq	d15,#0,.L32
.L491:
	jnz.t	d0:0,.L33
.L492:
	jeq	d1,#0,.L34
.L33:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
	mov	d5,#3
.L231:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
	mov	d15,#5
.L493:
	st.w	[a15]56,d15
.L494:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
	mov	d15,#0
.L495:
	st.b	[a15]81,d15
.L496:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
	ld.bu	d4,[a12]38
.L380:
	mov	d6,#5
	call	Nm_StateChangeNotification
.L385:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
	ld.w	d15,[a12]24
.L497:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
	jeq	d15,#0,.L35
.L498:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
	ld.w	d15,[a15]8
	st.w	[a15]24,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
.L35:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1007      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1008  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1009      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1010  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1011      CanNm_StartTransmission(CanNm_NetworkHandle);
	mov	d4,d11
	call	CanNm_StartTransmission
.L232:
	ld.bu	d15,[a12]44
.L499:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))      (inlined)
	jeq	d15,#0,.L36
.L500:
	jeq	d12,#0,.L37
.L501:
	mov	d4,d10
.L387:
	call	Nm_RepeatMessageIndication

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))      (inlined)
.L37:
.L36:
	j	.L38

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))      (inlined)
.L34:
.L32:
	ld.w	d15,[a15]8
	sub	d0,d15,d3
	ld.w	d15,[a12]20
.L502:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&      (inlined)
	jlt.u	d0,d15,.L39
.L503:
	ld.bu	d15,[a15]85
.L504:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))      (inlined)
	jeq	d15,#0,.L40
.L243:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1012  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1013      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1014  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1015  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1016  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1017      CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1018  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1019  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1020  #if ((CANNM_STATE_CHANGE_IND_ENABLED == STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED != STD_OFF) && \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1021          (CANNM_REMOTE_SLEEP_IND_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1022      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1023  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1024  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1025  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1026  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1027   Function name    : CanNm_NormalOperationToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1028   Description      : This inline function does transition to Ready Sleep state from Normal Operation state.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1029   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1030                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1031   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1032   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1033  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1034  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1035          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1036          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1037  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1038  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1039  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1040  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1041      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1042  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1043      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_NORMAL_OPERATION, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1044  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1045      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1046  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1047  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1048      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1049      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1050  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1051  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1052  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1053   Function name    : CanNm_ReadySleepToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1054   Description      : This inline function does transition to Normal Operation state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1055   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1056                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1057   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1058   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1059  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1060  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1061          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1062          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1063          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1064  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1065  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1066      /* goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1067      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1068  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1069      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1070      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1071  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1072  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1073      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1074  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1075      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1076      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1077  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1078  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1079      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1080  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1081      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_READY_SLEEP,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1082  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1083      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1084  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1085  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1086  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1087  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1088   Function name    : CanNm_GotoPrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1089   Description      : This inline function does transition to Prepare Bus Sleep state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1090   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1091                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1092   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1093   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1094  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1095  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1096          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1097          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1098  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1099  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1100  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1101      /* Reset active wakeup bit in transmit control bit vector after Network mode is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1102      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & ((uint8)(~(CANNM_ACTIVE_WAKEUP_BIT_POS)));
	ld.bu	d15,[a15]78
.L505:
	and	d15,#239
.L506:
	st.b	[a15]78,d15
.L507:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1103  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1104      /* goto Prepare Bus sleep mode as NMTimeout has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1105      CanNm_ChangeState(RamPtr_ps, NM_STATE_PREPARE_BUS_SLEEP, NM_MODE_PREPARE_BUS_SLEEP);
	mov	d4,#2
.L388:
	mov	d5,#1
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L389:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1106  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1107      /* TRACE[SWS_CanNm_00114] :  Notify NM Interface about transition to Prepare Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1108      Nm_PrepareBusSleepMode(ConfigPtr_pcs->NetworkHandle);
	ld.bu	d4,[a12]38
	call	Nm_PrepareBusSleepMode
.L508:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1110      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1111  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1112      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_READY_SLEEP, NM_STATE_PREPARE_BUS_SLEEP);
	ld.bu	d4,[a12]38
.L509:
	mov	d5,#3
.L510:
	mov	d6,#2
	call	Nm_StateChangeNotification
.L511:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1113  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1114  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1115      /* Start wait bus sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1116      /* NM shall wait in Prepare Bus sleep mode until ctWaitBusSleepTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1117      CanNm_StartTimer(RamPtr_ps->ctWaitBusSleepTimer);
	ld.w	d15,[a15]8
	st.w	[a15]32,d15
.L244:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&      (inlined)
.L40:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))      (inlined)
.L39:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
	jne	d2,#1,.L42
.L251:
	mov	d15,#4
.L512:
	st.w	[a15]56,d15
.L513:
	mov	d4,d11
.L390:
	call	CanNm_StartTransmission
.L391:
	ld.bu	d4,[a12]38
.L514:
	mov	d5,#3
.L515:
	mov	d6,#4
	call	Nm_StateChangeNotification
.L252:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)      (inlined)
.L42:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else      (inlined)
.L43:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else      (inlined)
.L41:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else      (inlined)
.L38:
	j	.L44
.L14:
	mov	d10,d4
.L261:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d13,[a15]60
.L394:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
	and	d11,d4,#1
.L395:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
	ld.bu	d12,[a15]81
.L396:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
	ld.w	d0,[a15]28
.L397:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
	ld.bu	d14,[a12]38
.L516:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
	ld.bu	d15,[a15]85
.L517:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)      (inlined)
	jeq	d15,#0,.L45
.L518:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
	ld.w	d1,[a12]20
	ld.w	d15,[a15]8
	sub	d2,d15,d0
.L393:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)      (inlined)
	jlt.u	d2,d1,.L46
.L519:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	st.w	[a15]28,d15
.L520:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
	ld.w	d15,[a15]8
	sub	d15,d0

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),      (inlined)
	jlt.u	d15,d1,.L47
	mov	d4,#31
.L392:
	mov	d6,#19
	mov	d7,#17
	mov	d5,d14
	call	Det_ReportError

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),      (inlined)
.L47:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)      (inlined)
.L46:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)      (inlined)
.L45:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
	ld.bu	d15,[a12]42
.L521:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))      (inlined)
	jeq	d15,#0,.L48
.L522:
	jnz.t	d10:0,.L49
.L523:
	jeq	d12,#0,.L50
.L49:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
	mov	d5,#4
.L278:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
	mov	d15,#5
.L524:
	st.w	[a15]56,d15
.L525:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
	mov	d15,#0
.L526:
	st.b	[a15]81,d15
.L527:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
	ld.bu	d4,[a12]38
.L528:
	mov	d6,#5
	call	Nm_StateChangeNotification
.L529:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
	ld.w	d15,[a12]24
.L530:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
	jeq	d15,#0,.L51
.L531:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
	ld.w	d15,[a15]8
	st.w	[a15]24,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)      (inlined)
.L51:
	mov	d4,#0
.L272:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1007      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1008  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1009      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1010  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1011      CanNm_StartTransmission(CanNm_NetworkHandle);
	call	CanNm_StartTransmission
.L280:
	ld.bu	d15,[a12]44
.L532:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))      (inlined)
	jeq	d15,#0,.L52
.L533:
	jeq	d11,#0,.L53
.L534:
	mov	d4,d14
	call	Nm_RepeatMessageIndication

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))      (inlined)
.L53:
.L52:
	j	.L54

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))      (inlined)
.L50:
.L48:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)      (inlined)
	jne	d13,#0,.L55
.L282:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1012  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1013      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1014  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1015  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1016  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1017      CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1018  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1019  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1020  #if ((CANNM_STATE_CHANGE_IND_ENABLED == STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED != STD_OFF) && \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1021          (CANNM_REMOTE_SLEEP_IND_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1022      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1023  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1024  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1025  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1026  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1027   Function name    : CanNm_NormalOperationToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1028   Description      : This inline function does transition to Ready Sleep state from Normal Operation state.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1029   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1030                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1031   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1032   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1033  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1034  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1035          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1036          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1037  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1038  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1039  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
	mov	d15,#3
.L535:
	st.w	[a15]56,d15
.L536:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1040  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1041      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1042  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1043      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_NORMAL_OPERATION, NM_STATE_READY_SLEEP);
	ld.bu	d4,[a12]38
.L537:
	mov	d5,#4
.L538:
	mov	d6,#3
	call	Nm_StateChangeNotification
.L539:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1044  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1045      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1046  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1047  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1048      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1049      RamPtr_ps->MsgTxStatus_b = FALSE;
	mov	d15,#0
.L540:
	st.b	[a15]80,d15
.L283:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)      (inlined)
.L55:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else      (inlined)
.L56:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else      (inlined)
.L54:
	j	.L57
.L15:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
	ld.w	d10,[a15]60
.L541:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
	ld.w	d0,[a15]28
.L400:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
	ld.w	d11,[a12]24
.L401:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
	ld.w	d1,[a12]20
	ld.w	d15,[a15]8
	sub	d2,d15,d0
.L399:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&      (inlined)
	jlt.u	d2,d1,.L58
.L542:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
	ld.bu	d2,[a15]85
.L543:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))      (inlined)
	jeq	d2,#0,.L59
.L544:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
	st.w	[a15]28,d15
.L545:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
	ld.w	d15,[a15]8
	sub	d15,d0

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),      (inlined)
	jlt.u	d15,d1,.L60
	mov	d4,#31
.L398:
	ld.bu	d5,[a12]38
	mov	d6,#19
	mov	d7,#17
	call	Det_ReportError

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),      (inlined)
.L60:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&      (inlined)
.L59:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))      (inlined)
.L58:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
	ld.w	d15,[a15]8
	ld.w	d0,[a15]24
	sub	d15,d0
.L546:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)      (inlined)
	jlt.u	d15,d11,.L61
.L547:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
	ld.bu	d15,[a12]42
.L548:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)      (inlined)
	jeq	d15,#0,.L62
.L549:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
	ld.bu	d15,[a15]78
.L550:
	and	d15,#254
.L551:
	st.b	[a15]78,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)      (inlined)
.L62:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)      (inlined)
	jne	d10,#0,.L63
.L299:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
	mov	d15,#3
.L552:
	st.w	[a15]56,d15
.L553:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
	ld.bu	d4,[a12]38
.L554:
	mov	d5,#5
.L555:
	mov	d6,#3
	call	Nm_StateChangeNotification
.L556:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
	mov	d15,#0
.L557:
	st.b	[a15]80,d15
.L300:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);      (inlined)
	j	.L64

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)      (inlined)
.L63:
	mov	d15,#4
.L558:
	st.w	[a15]56,d15
.L559:
	ld.bu	d4,[a12]38
.L560:
	mov	d5,#5
.L561:
	mov	d6,#4
	call	Nm_StateChangeNotification

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else      (inlined)
.L64:
	j	.L65

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)      (inlined)
.L61:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else      (inlined)
.L65:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   257          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   258              CanNm_CaseRepeatMessage(ConfigPtr_pcs, RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   259              break;
	j	.L66

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   260          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   261  #endif /* End of the passive mode switch */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   262  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   263          default:
.L16:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   264          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   265              /* Do nothing*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   266              break;
	j	.L67

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   267          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   268      } /* End - SWITCH CASE -> State Machine handling */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   269  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   270      /* Get the updated CanNm state */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   271      StateCopy_e = RamPtr_ps->State_en;
.L67:
.L66:
.L57:
.L44:
.L31:
.L22:
	ld.w	d10,[a15]56
.L402:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   272  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   273      /* Processing for zero wait bus sleep time */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   274      if ((ConfigPtr_pcs->WaitBusSleepTime == 0U) && (StateCopy_e == NM_STATE_PREPARE_BUS_SLEEP))
	ld.w	d15,[a12]32
.L562:
	jne	d15,#0,.L68
.L563:
	jne	d10,#2,.L69
.L312:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1007      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1008  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1009      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1010  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1011      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1012  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1013      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1014  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1015  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1016  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1017      CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1018  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1019  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1020  #if ((CANNM_STATE_CHANGE_IND_ENABLED == STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED != STD_OFF) && \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1021          (CANNM_REMOTE_SLEEP_IND_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1022      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1023  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1024  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1025  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1026  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1027   Function name    : CanNm_NormalOperationToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1028   Description      : This inline function does transition to Ready Sleep state from Normal Operation state.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1029   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1030                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1031   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1032   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1033  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1034  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1035          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1036          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1037  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1038  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1039  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1040  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1041      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1042  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1043      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_NORMAL_OPERATION, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1044  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1045      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1046  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1047  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1048      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1049      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1050  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1051  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1052  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1053   Function name    : CanNm_ReadySleepToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1054   Description      : This inline function does transition to Normal Operation state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1055   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1056                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1057   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1058   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1059  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1060  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1061          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1062          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1063          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1064  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1065  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1066      /* goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1067      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1068  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1069      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1070      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1071  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1072  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1073      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1074  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1075      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1076      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1077  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1078  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1079      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1080  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1081      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_READY_SLEEP,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1082  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1083      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1084  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1085  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1086  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1087  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1088   Function name    : CanNm_GotoPrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1089   Description      : This inline function does transition to Prepare Bus Sleep state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1090   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1091                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1092   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1093   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1094  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1095  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1096          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1097          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1098  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1099  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1100  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1101      /* Reset active wakeup bit in transmit control bit vector after Network mode is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1102      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & ((uint8)(~(CANNM_ACTIVE_WAKEUP_BIT_POS)));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1103  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1104      /* goto Prepare Bus sleep mode as NMTimeout has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1105      CanNm_ChangeState(RamPtr_ps, NM_STATE_PREPARE_BUS_SLEEP, NM_MODE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1106  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1107      /* TRACE[SWS_CanNm_00114] :  Notify NM Interface about transition to Prepare Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1108      Nm_PrepareBusSleepMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1110      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1111  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1112      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_READY_SLEEP, NM_STATE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1113  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1114  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1115      /* Start wait bus sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1116      /* NM shall wait in Prepare Bus sleep mode until ctWaitBusSleepTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1117      CanNm_StartTimer(RamPtr_ps->ctWaitBusSleepTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1118  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1119  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1120  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1121   Function name    : CanNm_GotoBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1122   Description      : This inline function does transition to Bus Sleep mode from Prepare Bus Sleep mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1123   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1124                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1125   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1126   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1128  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1129          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1130          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1131  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1132  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1133      /* Goto Bus Sleep as timer expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1134      CanNm_ChangeState(RamPtr_ps, NM_STATE_BUS_SLEEP, NM_MODE_BUS_SLEEP);
	mov	d4,#1
.L564:
	mov	d5,#0
	mov.aa	a4,a15
	call	CanNm_ChangeState
.L565:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1135  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1136      /* Clear the Rx status information for this NM Sleep-Cycle */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1137      RamPtr_ps->RxStatus_b = FALSE;
	mov	d15,#0
.L566:
	st.b	[a15]84,d15
.L567:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1138  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1139      RamPtr_ps->CoordReadySleepBit_u8 = 0x00;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1140      RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1141      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & (~(CANNM_COORD_READY_SLEEP_BIT_MASK));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1142  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1143  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1144  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1145      /* The CanNm modules initialization and entering the Bus-Sleep Mode shall cause the PN message filtering to be
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1146       * disabled on the respective channel. As a result all received (PN) NM messages shall be processed in the following
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1147       * as being normal NM messages (i.e. NM-Timeout Timer shall be restarted) */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1148  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1149  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1150      CANNM_ResetPnMsgFilteringStatus(RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1153      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1154  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1155      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, NM_STATE_BUS_SLEEP);
	ld.bu	d4,[a12]38
.L568:
	mov	d5,#2
.L569:
	mov	d6,#1
	call	Nm_StateChangeNotification
.L570:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1156  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1157  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1158      /* TRACE[SWS_CanNm_00126] : Notify Nm about transition to Bus Sleep mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1159      /* This triggers shut down of the corresponding bus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1160      Nm_BusSleepMode(ConfigPtr_pcs->NetworkHandle);
	ld.bu	d4,[a12]38
	call	Nm_BusSleepMode
.L69:
.L68:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   275      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   276          /* Prepare Bus Sleep State is transient*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   277          CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   278      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   279  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   280  /* Network can be requested if passive mode is disabled*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   281  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   282      /* Repeat Message state is transient */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   283      if((RepeatMsgTime == 0U) && (StateCopy_e == NM_STATE_REPEAT_MESSAGE))
	jne	d9,#0,.L70
.L571:
	jne	d10,#5,.L71
.L572:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   284      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   285          if(stNetworkState_e == CANNM_NETWORK_RELEASED_E)
	ld.w	d15,[a10]
.L403:
	jne	d15,#0,.L72
.L313:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
	mov	d15,#3
.L404:
	st.w	[a15]56,d15
.L573:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
	ld.bu	d4,[a12]38
.L574:
	mov	d5,#5
.L575:
	mov	d6,#3
	call	Nm_StateChangeNotification
.L576:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
	mov	d15,#0
.L577:
	st.b	[a15]80,d15
.L314:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   286          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   287              /* If network is released, goto Ready Sleep state */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   288              CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
	j	.L73
.L72:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
	mov	d15,#4
.L405:
	st.w	[a15]56,d15
.L578:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
	ld.bu	d4,[a12]38
.L579:
	mov	d5,#5
.L580:
	mov	d6,#4
	call	Nm_StateChangeNotification

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   289          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   290          else
.L73:
.L71:
.L70:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   291          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   292              /* If network is requested, goto Normal Operation state */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   293              CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   294          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   295      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   296  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   297  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   298  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   299  /* Transmit NM PDU if passive mode is disabled */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   300  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   301      CanNm_MainFunctionTx(CanNm_NetworkHandle);
	mov	d4,d8
.L406:
	call	CanNm_MainFunctionTx
.L407:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   302  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   303  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   304      return;
	j	.L74

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   305  }
.L74:
.L5:
	ret
.L122:
	
__CanNm_InternalMainProcess_function_end:
	.size	CanNm_InternalMainProcess,__CanNm_InternalMainProcess_function_end-CanNm_InternalMainProcess
.L111:
	; End of function
	
	.sdecl	'.text.CanNm.CanNm_MainFunctionTx',code,cluster('CanNm_MainFunctionTx')
	.sect	'.text.CanNm.CanNm_MainFunctionTx'
	.align	2
	

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   306  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   307  #define CANNM_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   308  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   309  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   310  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   311  /***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   312   Function name    : CanNm_MainFunctionTx
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   313   Syntax           : void CanNm_MainFunctionTx( const NetworkHandleType CanNm_NetworkHandle)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   314   Description      : This is the internal function of CanNm for transmission of Nm messages on CAN.
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   315   Parameter        : CanNm_NetworkHandle - Identification of the CANNM-channel
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   316   Return value     : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   317   ***************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   318  /* NM PDUs can be transmitted if Passive Mode is disabled*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   319  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   320  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   321  #define CANNM_START_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   322  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   323  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   324  static FUNC(void, CANNM_CODE) CanNm_MainFunctionTx(CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle)
; Function CanNm_MainFunctionTx
.L97:
CanNm_MainFunctionTx:	.type	func

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   325  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   326  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   327      /* Pointer to configuration data */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   328      P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   329  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   330      /* Pointer to RAM data */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   331      P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   332  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   333      /* Return value of the functions called by Main */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   334      VAR(uint8_least, AUTOMATIC) RetValOfFuncs_ui;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   335  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   336      /* To store local copy of ComM ChannelId */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   337      NetworkHandleType nmChannelHandle;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   338  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   339      /**** End Of Declarations ****/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   340  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   341      /* Set the pointer to RAM structure of Channel CanNm_NetworkHandle */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   342      RamPtr_ps = &CanNm_RamData_s[CanNm_NetworkHandle];
	movh.a	a15,#@his(CanNm_RamData_s)
	lea	a15,[a15]@los(CanNm_RamData_s)
.L585:
	mul	d15,d4,#88
	addsc.a	a15,a15,d15,#0
.L409:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   343  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   344      /* Initialise pointer to configuration structure */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   345      ConfigPtr_pcs = CANNM_GET_CHANNEL_CONFIG(CanNm_NetworkHandle);
	movh.a	a2,#@his(CanNm_ChannelConfigData_cs)
	lea	a2,[a2]@los(CanNm_ChannelConfigData_cs)
	mul	d15,d4,#52
	addsc.a	a12,a2,d15,#0
.L410:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   346  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   347      /* Store ComM ChannelId from the configuration */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   348      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
	ld.bu	d8,[a12]38
.L411:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   349  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   350      /* TRACE[SWS_CanNm_00108] : Check for start of transmission and message cycle time expiration */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   351      if((RamPtr_ps->stCanNmComm != FALSE) && (RamPtr_ps->MsgTxStatus_b != FALSE) &&
	ld.bu	d15,[a15]85
.L586:
	jeq	d15,#0,.L75
.L587:
	ld.bu	d15,[a15]80
.L588:
	jeq	d15,#0,.L76
.L589:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   352              (CanNm_TimerExpired(RamPtr_ps->PrevMsgCycleTimestamp, RamPtr_ps->MsgCyclePeriod) != FALSE))
	ld.w	d15,[a15]8
	ld.w	d0,[a15]16
	sub	d0,d15,d0
	ld.w	d15,[a15]12
.L590:
	jlt.u	d0,d15,.L77
.L591:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   353      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   354  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   355          /* Check for the number of immediate Nm Pdus to be transmitted */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   356          if(RamPtr_ps->ImmediateNmTx_u8 == 0)
	ld.bu	d15,[a15]79
.L592:
	jne	d15,#0,.L78
.L593:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   357          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   358              /* Store the message cycle time */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   359              RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgCycleTime;
	ld.w	d15,[a12]
.L594:
	st.w	[a15]12,d15
.L595:
	j	.L79
.L78:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   360          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   361          else
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   362          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   363              /* Store the immediate Nm cycle time */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   364              RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->ImmediateNmCycleTime;
	ld.w	d15,[a12]16
.L596:
	st.w	[a15]12,d15
.L597:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   365  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   366              /* Decrement the immediate Nm Tx counter    */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   367              RamPtr_ps->ImmediateNmTx_u8--;
	ld.bu	d15,[a15]79
.L598:
	add	d15,#-1
	st.b	[a15]79,d15
.L599:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   368  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   369              /* Check for the number of immediate Nm Pdus after decrementing the immediate Nm Tx counter */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   370              if(RamPtr_ps->ImmediateNmTx_u8 == 0)
	ld.bu	d15,[a15]79
.L600:
	jne	d15,#0,.L80
.L601:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   371              {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   372  				/* Load with message cycle offset time, after the transmission of all immediate Nm Pdus */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   373                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgCycleOffset;
	ld.w	d15,[a12]4
.L602:
	st.w	[a15]12,d15
.L80:
.L79:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     1  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     2  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     3  #ifndef CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     4  #define CANNM_INL_H
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     5  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     6  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     7   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     8   * Includes
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	     9   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    10   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    11  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    12  #include "CanNm_Prv.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    13  #include "CanIf.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    14  #if (!defined(CANIF_AR_RELEASE_MAJOR_VERSION) || (CANIF_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    15  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    16  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    17  #include "Nm_Cbk.h"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    18  #if (!defined(NM_AR_RELEASE_MAJOR_VERSION) || (NM_AR_RELEASE_MAJOR_VERSION != CANNM_AR_RELEASE_MAJOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    19  #error "AUTOSAR major version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    20  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    21  #if (!defined(NM_AR_RELEASE_MINOR_VERSION) || (NM_AR_RELEASE_MINOR_VERSION != CANNM_AR_RELEASE_MINOR_VERSION))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    22  #error "AUTOSAR minor version undefined or mismatched"
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    23  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    24  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    25  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    26          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    27  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    28  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    29  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    30          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    31          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    32  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    33  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    34  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    35          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    36          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    37          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    38          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    39  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    40  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    41  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    42          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    43          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    44  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    45  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    46  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    47          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    48          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    49  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    50  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    51  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    52          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    53          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    54          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    55          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    56  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    57  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    58  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    59          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    60          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    61  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    62  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    63  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    64          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    65          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    66          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    67  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    68  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    69  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    70          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    71          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    72  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    73  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    74  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    75          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    76          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    77  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    78  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    79  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    80          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    81          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    82  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    83  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    84  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    85          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    86          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    87          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    88  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    89  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    90  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    91                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    92                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    93                                       );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    94  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    95  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    96                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    97                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    98                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	    99                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   100                       CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   101                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   102                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   103                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   104                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   105                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   106                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   107                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   108  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   110  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   111                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   112                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   113                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   114                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   115                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   116                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   117                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   118                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   119  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   120  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   121  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   122                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   123                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   124                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   125                                          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   126  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   128  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   129  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   130                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   131                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   132                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   133                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   134                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   135                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   136                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   137                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   138  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   139  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   140  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   141  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   142                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   143                                  CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   144                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   145                                  P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   146                                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   147                              #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   148                                  ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   149                              #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   150              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   153  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   154  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   155          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   156          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   157  );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   158  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   159  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   160  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   161  LOCAL_INLINE void CanNm_Init_EIRA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   162  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   163  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   164  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   165  LOCAL_INLINE void CanNm_Init_ERA_Status(void);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   166  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   167  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   168  #if((CANNM_CONFIGURATION_VARIANT == CANNM_VARIANT_POSTBUILD_LOADABLE) && (CANNM_VERSION_INFO_API != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   169  LOCAL_INLINE VAR(boolean, AUTOMATIC) CanNm_CompareVersionInfo(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   170                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) srcVersionInfo,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   171                                               P2CONST(Std_VersionInfoType, AUTOMATIC, CANNM_APPL_CONST) destVersionInfo
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   172                                                              );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   173  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   174  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   175  /*
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   176   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   177   * Inline functions
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   178   ***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   179   */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   181  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   182   Function name    : CanNm_NetworkModeProcessing
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   183   Description      : This is an internal function of CanNm for Network Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   184   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   185   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   186   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   187   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   188   Parameter        : PduTxConfirmation_b - Tx confirmation flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   189   Return value     : Nm_StateType        - State of network to be updated
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   190   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   191  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   192  LOCAL_INLINE FUNC(Nm_StateType, CANNM_CODE) CanNm_NetworkModeProcessing(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   193                  #if (CANNM_PN_ENABLED != STD_OFF && CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   194                              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   195                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   196                  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF || CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF || \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   197                              CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   198                              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   199                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   200                  P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   201                  VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   202                  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   203                     ,VAR(boolean, AUTOMATIC) PduTxConfirmation_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   204                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   205  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   207  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   208          /* local copy of CanNm state [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   209          VAR(Nm_StateType, AUTOMATIC) StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   210  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   211          /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   212          VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   213  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   214          /* Store a local copy of CanNm state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   215          StateCopy_e = RamPtr_ps->State_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   216  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   217  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   218          /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   219          nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   220  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   221          if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   222          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   223              /* TRACE[SWS_CanNm_00098] : Restart NMTimeoutTimer on any Rx indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   224              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   225  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   226  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   227              /* Prepare for next RemoteSleep detection after every NM message reception */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   228              CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   230              /* Cancellation of RemoteSleepIndication upon reception is allowed only in these states */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   231              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) || (StateCopy_e == NM_STATE_READY_SLEEP))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   232              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   233                  CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   234              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   235  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   236  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   237  #if (CANNM_BUS_LOAD_REDUCTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   238  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   239              /* check if it is normal operation mode and bus load reduction is activated*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   240              if ((StateCopy_e == NM_STATE_NORMAL_OPERATION) && (ConfigPtr_pcs->stBusLoadReductionActive_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   241              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   242                  /* Reload the NmMsgCycleTimer with MsgReducedTime */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   243                  RamPtr_ps->MsgCyclePeriod = ConfigPtr_pcs->MsgReducedTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   244  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   245                  /* Restart the NmMessageCycleTimer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   246                  CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   247  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   248                  /* Restart the NmMessageTimeoutTimer*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   249                  CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   250              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   251  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   252  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   253  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   254          /* Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 under network mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   255           *  or after Nm_CoordReadyToSleepCancellation is called */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   256          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x08) && (RamPtr_ps->stCoordReadySleepInd_b == FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   257          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   258             Nm_CoordReadyToSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   259  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   260              /* Indicates that Nm_CoordReadyToSleepIndication has been called.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   261               * Helps to give the Nm_CoordReadyToSleepIndication to Nm only for the first reception of NM-PDU with NmCoordinatorSleepReady BIT set to 1 */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   262              RamPtr_ps->stCoordReadySleepInd_b = TRUE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   263          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   264          /*Check if this is the first reception of NM-PDU with NmCoordinatorSleepReady Bit set to 0, after Nm_CoordReadyToSleepIndication is called
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   265           * and it is still in Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   266          if((RamPtr_ps->CoordReadySleepBit_u8 == 0x00) && (RamPtr_ps->stCoordReadySleepInd_b != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   267          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   268            Nm_CoordReadyToSleepCancellation(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   269  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   270              RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   271          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   272  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   273          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   274          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   275          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   276  /* Tx_Confirmation can not be received if Passive mode is Enabled*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   277  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   278              if (PduTxConfirmation_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   279              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   280                  /* TRACE[SWS_CanNm_00099] : Restart NMTimeoutTimer on Tx confirmation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   281                  CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   282              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   283  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   284  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   285          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   286  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   287  /* When Passive Mode is on there will be no Transmission of NM Pdus*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   288  # if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   289          /* Check the flag for spontaneous transmission of Nm pdu */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   290          if(RamPtr_ps->PnHandleMultipleNetworkRequests_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   291          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   292              /* Reset the flag to false  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   293              RamPtr_ps->PnHandleMultipleNetworkRequests_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   294  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   295              /* TRACE[SWS_CanNm_00454] : Load the number of Immediate Nm for spontaneous transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   296              RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   297  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   298              /* TRACE[SWS_CanNm_00444] : Change to or restart the Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   299              CanNm_GotoRepeatMessage(CanNm_NetworkHandle, StateCopy_e, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   301              /* Copy the current CanNm state to local copy after change or restart  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   302              StateCopy_e = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   303          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   304  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   305  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   306          return StateCopy_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   307  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   308  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   309  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   310   Function name    : CanNm_CaseBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   311   Description      : This is an internal function of CanNm for Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   312   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   313   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   314   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   315   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   316   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   317   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   318  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   319  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   320                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   321                                                     CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   322                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   323                                                     P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   324                                                    #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   325                                                     P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   326                                                    #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   327                                                     VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   328  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   329  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   330  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   331  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   332      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   333      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   334  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   335      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   336      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   337  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   338      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   339  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   340      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   341  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   342  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   343      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   344      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   345  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   346      /* When ECU is the PASSIVE ECU it will only wake up by the Passive start up */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   347      #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   348  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   349              /* TRACE[SWS_CanNm_00129] : Transit to Network Mode if network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   350              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   351              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   352                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   353                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   354  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   355                  /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   356                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   357                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   358                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   359                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   360  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   361                  /* Internal function to do routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   362                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   363              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   364              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   365      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   366              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   367                  if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   368                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   369                      /* TRACE[SWS_CanNm_00127] : Indicate Nm about network start */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   370                      Nm_NetworkStartIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   371  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   372                      /* TRACE[SWS_CanNm_00336] : Report DET if NM message is received in Bus-Sleep Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   373                      #if (CANNM_DEV_ERROR_DETECT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   374                          (void)Det_ReportError((CANNM_MODULE_ID), nmChannelHandle, CANNM_SID_MAINFUNCTION,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   375                                  CANNM_E_NET_START_IND);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   376                      #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   377                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   378              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   379  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   380  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   381  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   382   Function name    : CanNm_CasePrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   383   Description      : This is an internal function of CanNm for Prepare Bus Sleep Mode operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   384   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   385   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   386   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   387   Parameter        : PduRxInd_b          - NM PDU reception indication flag
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   388   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   389   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   390  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   391  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CasePrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   392          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   393          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   394          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   395          VAR(boolean, AUTOMATIC) PduRxInd_b
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   396  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   397  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   398  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   399  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   400  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   401      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   402      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   403  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   404      /* store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   405  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   406      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   407  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   408  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   409      /* TRACE[SWS_CanNm_00124] : Go to Network Mode on Rx Indication */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   410      if (PduRxInd_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   411      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   412          /* This is a function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   413          CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   414      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   415      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   416      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   417          /* TRACE[SWS_CanNm_00115] : Transit to Bus Sleep Mode on expiration of Wait Bus Sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   418          if (CanNm_TimerExpired(RamPtr_ps->ctWaitBusSleepTimer,ConfigPtr_pcs->WaitBusSleepTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   419          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   420              CanNm_GotoBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   421          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   422  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   423  /* Network cannot be requested in passive mode*/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   424  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   425          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   426          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   427              /* TRACE[SWS_CanNm_00123] : Go to Network Mode on Network Request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   428              if(stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   429              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   430                  /* Store number of immediate Nm Pdus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   431                  RamPtr_ps->ImmediateNmTx_u8 = ConfigPtr_pcs->ImmediateNmTransmissions_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   432  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   433                   /* TRACE[SWS_CanNm_00401] : Set active wakeup bit in CBV if CanNmActiveWakeupBitEnabled is TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   434                  if(ConfigPtr_pcs->ActiveWakeupBitEnabled_b == TRUE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   435                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   436                      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 | CANNM_ACTIVE_WAKEUP_BIT_POS;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   437                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   438  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   439                  /* This is an internal function to do the routine work of transition to Network Mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   440                  CanNm_GotoNetworkMode(CanNm_NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   441              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   442          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   443  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   444      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   445  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   446      /* TRACE[SWS_CanNm_00122] : Trigger transmission of an asynchronous message to ensure that other nodes do not enter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   447        Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   448  #if (CANNM_IMMEDIATE_RESTART_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   449      if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   450      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   451          (void)CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   452      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   453  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   454  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   455  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   456  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   457  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   458   Function name    : CanNm_CaseReadySleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   459   Description      : This is an internal function of CanNm for Ready Sleep state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   460   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   461   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   462   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   463   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   464   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   465   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   466  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   467  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseReadySleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   468                                  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF || CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   469                                          CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   470                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   471                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   472                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   473                                  #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   474                                          ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   475                                  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   476  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   477  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   478  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   479  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   480      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   481      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   482  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   483  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   484  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   485          /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   486          VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   487          /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   488          VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   489  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   490  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   491  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   492      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   493      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   494  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   495  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   496      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   497      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   498  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   499  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   500          /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   501          stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   502          /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   503          RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   504  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   505  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   506  /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   507  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   508      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   509  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   510      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   511  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   512  #if ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   513      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   514      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   515  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   516  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   517  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   518          /* TRACE[SWS_CanNm_00111,SWS_CanNm_00112] : Go to Repeat Message State on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   519           * repeat message request if NodeDetection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   520          if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   521          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   522              /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   523              CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_READY_SLEEP, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   524  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   525  # if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   526              /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if NodeDetection and RepeatMsgInd is
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   527               * enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   528              if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   529              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   530                  Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   531              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   532  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   533          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   534      else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   535  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   536      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   537          /* TRACE[SWS_CanNm_00109] : Go to Prepare Bus Sleep Mode on expiration of NM Timeout Timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   538          if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   539                  (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   540          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   541              /* This is an internal function to do the routine work of transition to Prepare Bus Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   542              CanNm_GotoPrepareBusSleep(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   543          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   544          else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   545          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   546  /* Network cannot be requested if passive mode is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   547  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   548              /* TRACE[SWS_CanNm_00110] : Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   549              if (stNetworkState_e == CANNM_NETWORK_REQUESTED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   550              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   551                  CanNm_ReadySleepToNO(CanNm_NetworkHandle,ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   552              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   553              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   554  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   555              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   556                  /* Stay in Ready Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   557              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   558          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   559      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   560  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   561  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   562  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   563   Function name    : CanNm_CaseNormalOperation
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   564   Description      : This is an internal function of CanNm for Normal Operation state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   565   Parameter        : CanNm_NetworkHandle - Identification of the channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   566   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   567   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   568   Parameter        : CtrlBitVector_u8    - Control Bit Vector
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   569   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   570   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   571  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   572  /*This State is only available if the Passive Mode is disabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   573  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   574  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseNormalOperation(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   575          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   576              CONST(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   577          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   578              P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   579              P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   580          #if(CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   581              ,VAR(uint8, AUTOMATIC) CtrlBitVector_u8
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   582          #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   583              )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   584  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   585  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   586  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   587  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   588      /* To store local copy of ComM ChannelId */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   589      VAR(NetworkHandleType, AUTOMATIC) nmChannelHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   590  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   591  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   592  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   593      /* Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   594      VAR(uint8, AUTOMATIC) stRepeatMessage_u8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   595      /* Local copy Tx Repeat Message request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   596      VAR(boolean, AUTOMATIC) RepeatMessageRequest_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   597  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   598  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   599      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   600      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   601  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   602      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   603      VAR(CanNm_TimerType, AUTOMATIC) tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   604  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   605      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   606      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   607  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   608  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   609  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   610      /* Read the repeat message bit from the control bit vector */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   611      stRepeatMessage_u8 = (CtrlBitVector_u8 & CANNM_READ_RPTMSG_MASK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   612      /* Read the status of Tx Repeat message request */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   613      RepeatMessageRequest_b = RamPtr_ps->TxRptMsgStatus_b;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   614  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   615  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   616      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   617  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   618  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF) || ((CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF) && (CANNM_NODE_DETECTION_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   619      /* Store ComM ChannelId from the configuration */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   620      nmChannelHandle = ConfigPtr_pcs->NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   621  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   622  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   623      /* These timer expirations are valid only if transmission ability is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   624      if (RamPtr_ps->stCanNmComm != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   625      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   626          /* TRACE[SWS_CanNm_00117] : Restart NM Timeout timer if it expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   627          if (CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   628          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   629              CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   630  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   631              /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   632              CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   633                                      ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   634          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   635  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   636          /* TRACE[SWS_CanNm_00150] : Indicate remote sleep to Nm if RemoteSleepTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   637  # if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   638  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   639          if (CanNm_TimerExpired(RamPtr_ps->ctRemoteSleepIndTimer,ConfigPtr_pcs->RemoteSleepIndTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   640          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   641              if (CANNM_REMOTE_SLEEP_DETECTED() == FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   642              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   643                  CANNM_SET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   644                  CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   645                  Nm_RemoteSleepIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   646              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   647          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   648  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   649      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   650  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   651           /* TRACE[SWS_CanNm_00119,SWS_CanNm_00120] : Go to Repeat Message state on repeat message bit indication or
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   652                 repeat message request if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   653             if((ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE) && ((stRepeatMessage_u8 != 0) || (RepeatMessageRequest_b != FALSE)))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   654              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   655                  /* This is an internal function to do the routine work of transition to Repeat Message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   656                  CanNm_GotoRepeatMessage(CanNm_NetworkHandle,NM_STATE_NORMAL_OPERATION, ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   657  #  if (CANNM_REPEAT_MSG_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   658                  if((ConfigPtr_pcs->RepeatMsgIndEnabled_b != FALSE) && (stRepeatMessage_u8 != 0))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   659                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   660                      /* TRACE[SWS_CanNm_00014] : Notify Repeat Message Bit reception to Nm if Node Detection and
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   661                       * RepeatMsgInd is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   662                      Nm_RepeatMessageIndication(nmChannelHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   663                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   664  #  endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   665               }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   666           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   667  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   668          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   669              /* TRACE[SWS_CanNm_00118] : Go to Ready Sleep State if network is released */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   670              if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   671              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   672                  /* This is an internal function to do the routine work of transition to Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   673                  CanNm_NormalOperationToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   674              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   675              else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   676              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   677                  /* stay in Normal Operation */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   678              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   679          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   680  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   681  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   682  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   683  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   684   Function name    : CanNm_CaseRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   685   Description      : This is an internal function of CanNm for Repeat Message state operations
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   686   Parameter        : ConfigPtr_pcs       - Pointer to Config data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   687   Parameter        : RamPtr_ps           - Pointer to RAM data structure currently under use
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   688   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   689   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   690  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   691  #if(CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   692  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_CaseRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   693          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   694          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   695  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   696  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   697      /* local copy of CanNmRepeatMessageTime [to reduce run-time] */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   698      VAR(CanNm_TimerType, AUTOMATIC) RepeatMsgTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   699  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   700      /* Network Request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   701      VAR(CanNm_NetworkStateType, AUTOMATIC) stNetworkState_e;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   702  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   703      /* Timer to hold NM-Timeout */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   704      VAR(CanNm_TimerType, AUTOMATIC)   tiNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   705  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   706      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   707      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   708  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   709      /* Store globals to local variables: this reduces code size & run-time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   710      stNetworkState_e = RamPtr_ps->NetworkReqState_en;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   711  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   712      tiNMTimeoutTimer = RamPtr_ps->ctNMTimeoutTimer;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   713      RepeatMsgTime = ConfigPtr_pcs->RepeatMessageTime;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   714  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   715       /* TRACE[SWS_CanNm_00101] : Restart NM timeout timer if it has expierd */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   716       if ((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE) &&
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   717               (RamPtr_ps->stCanNmComm != FALSE))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   718       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   719           CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   720  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   721           /* Report DET that the NM Timeout has expired abnormally */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   722           CANNM_DET_REPORT_ERROR_NO_RET((CanNm_TimerExpired(tiNMTimeoutTimer, ConfigPtr_pcs->NMTimeoutTime) != FALSE),
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   723                                                   ConfigPtr_pcs->NetworkHandle, CANNM_SID_MAINFUNCTION, CANNM_E_NETWORK_TIMEOUT)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   724       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   725  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   726       /* TRACE[SWS_CanNm_00102] : Leave Repeat Message state if RepeatMessageTimer has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   727       if (CanNm_TimerExpired(RamPtr_ps->ctRepeatMessageTimer, RepeatMsgTime) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   728       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   729  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   730  # if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   731           /* Check if Node Detection is enabled for the channel */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   732           if(ConfigPtr_pcs->NodeDetectionEnabled_b != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   733           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   734               /* TRACE[SWS_CanNm_00107] : Clear Repeat Message request bit when Repeat Message state is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   735               RamPtr_ps->TxCtrlBitVector_u8 = ( RamPtr_ps->TxCtrlBitVector_u8 & CANNM_RESET_RPTMSG_MASK );
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   736           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   737  # endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   738  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   739           /* TRACE[SWS_CanNm_00103,SWS_CanNm_00106] : Transit to Normal Operation or Ready Sleep state based on network
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   740              request state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   741           if (stNetworkState_e == CANNM_NETWORK_RELEASED_E)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   742           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   743               CanNm_RepeatMessageToRS(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   744           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   745           else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   746           {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   747               CanNm_RepeatMessageToNO(ConfigPtr_pcs, RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   748           }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   749       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   750       else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   751       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   752           /* Stay in Repeat Message State until RepeatMessageTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   753       }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   754  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   755  #endif /* End of the Passive Mode Switch */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   756  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   757  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   758   Function name    : CanNm_Init_EIRA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   759   Description      : This inline function initialises PN EIRA timer, EIRA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   760                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   761   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   762   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   763   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   764  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   765  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   766  LOCAL_INLINE void CanNm_Init_EIRA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   767  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   768  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   769      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   770      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   771  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   772      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   773      for(Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   774      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   775          CanNm_PNTimer_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   776      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   777      /* Initialize the current and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   778      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   779      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   780          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   781          CanNM_EIRAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   782      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   783  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   784  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   785  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   786  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   787   Function name    : CanNm_Init_ERA_Status
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   788   Description      : This inline function initialises PN ERA timer, ERA Current status and  Global
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   789                      status arrays
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   790   Parameter        : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   791   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   792   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   793  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   794  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   795  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   796  LOCAL_INLINE void CanNm_Init_ERA_Status(void)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   797  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   798      /* Variable to hold byte position in the buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   799      VAR(uint8_least, AUTOMATIC) Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   800  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   801      /* Initialize the timers for all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   802      for(Index_ui = 0; Index_ui < (CANNM_GET_NUMBER_OF_PN_CONFIGURED() * CANNM_NUMBER_OF_ERA_CHANNELS); Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   803      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   804          CanNm_PNTimer_ERA_au32[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   805      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   806      /* Initialize the cuurent and global status of all the PN's */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   807      for (Index_ui = 0;Index_ui < CANNM_ERA_ARRAYSIZE;Index_ui++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   808      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   809          CanNM_ERAGlobalStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   810          CanNM_ERACurrentStatus_au8[Index_ui] = 0;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   811      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   812  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   813  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   814  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   815  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   816   Function name    : CanNm_ComputeSwFrTimer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   817   Description      : This inline function computes the free running timer using Main Function period.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   818   Parameter        : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   819   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   820   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   821  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   822  LOCAL_INLINE void CanNm_ComputeSwFrTimer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   823          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   824  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   825  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   826      /* Read the current time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   827      RamPtr_ps->ctSwFrTimer += CANNM_MAINFUNCTION_PERIOD;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   828  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   829  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   830  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   831   Function name    : CanNm_CancelRemoteSleepInd
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   832   Description      : This inline function cancels Remote Sleep indication if detected already.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   833   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   834                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   835   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   836   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   837  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   838  LOCAL_INLINE void CanNm_CancelRemoteSleepInd(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   839          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   840          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   841  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   842  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   843      if (CANNM_REMOTE_SLEEP_DETECTED() != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   844      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   845          CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   846  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   847  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   848          Nm_RemoteSleepCancellation(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   849  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   850          (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   851  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   852      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   853  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   854  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   855  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   856   Function name    : CanNm_GotoNetworkMode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   857   Description      : This inline function does transition to to Network Mode from either Bus Sleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   858                      state or Prepare Bus Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   859   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   860                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   861                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   862                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   863   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   864   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   865  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   866  LOCAL_INLINE void CanNm_GotoNetworkMode(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   867          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   868          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   869          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   870          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   871  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   872  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   873      /* Do state transition to repeat message state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   874      CanNm_ChangeState(RamPtr_ps, NM_STATE_REPEAT_MESSAGE, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   875  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   876      /* Indicate Nm about Network mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   877      Nm_NetworkMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   878  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   879      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   880      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   881      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   882          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   883      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   884  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   885  #if (CANNM_PASSIVE_MODE_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   886      //* if network is released, goto Ready Sleep state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   887      RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   888  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   889      CanNm_ChangeState(RamPtr_ps, NM_STATE_READY_SLEEP, NM_MODE_NETWORK);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   890  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   891      /* Notify to the upper layer about changes of the CanNm states if configuration parameter
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   892         CANNM_STATE_CHANGE_IND_ENABLED is set to TRUE */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   893  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   894      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   895  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   896  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   897  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   898      /* Start NM-Timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   899      CanNm_StartTimer(RamPtr_ps->ctNMTimeoutTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   900  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   901      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   902  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   903      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   904  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   905      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   906  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   907  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   908  #if ((CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   909      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   910  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   911      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   912  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   913  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   914  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   915  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   916   Function name    : CanNm_RepeatMessageToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   917   Description      : This inline function does transition to Normal Operation state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   918   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   919                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   920   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   921   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   922  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   923  LOCAL_INLINE void CanNm_RepeatMessageToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   924          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   925          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   926  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   927  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   928      /* Goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   929      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   930  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   931  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   932      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   933  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   934      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   935      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   936  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   937  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   938      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   939  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   940      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_REPEAT_MESSAGE,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   941  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   942      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   943  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   944  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   945  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   946  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   947   Function name    : CanNm_RepeatMessageToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   948   Description      : This inline function does transition to Ready Sleep state from Repeat Message state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   949   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   950                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   951   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   952   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   953  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   954  LOCAL_INLINE void CanNm_RepeatMessageToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   955          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   956          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   957  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   958  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   959  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   960  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   961      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   962  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   963      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_REPEAT_MESSAGE, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   964  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   965      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   966  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   967  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   968      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   969      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   970  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   971  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   972  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   973   Function name    : CanNm_GotoRepeatMessage
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   974   Description      : This function does transition to Repeat Message from either Normal Operation or Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   975   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   976                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   977                      CanNm_NetworkHandle - Identification of the NM-channel
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   978                      PrevState - state from which Network Mode is entered
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   979   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   980   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   981  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   982  LOCAL_INLINE void CanNm_GotoRepeatMessage(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   983          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   984          VAR(Nm_StateType, AUTOMATIC)  PrevState,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   985          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   986          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   987  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   988  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   989  	/* Transition to Repeat Message state  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   990  	RamPtr_ps->State_en = NM_STATE_REPEAT_MESSAGE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   991  #if (CANNM_NODE_DETECTION_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   992          /* Reset the Repeat Message Status bit */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   993          RamPtr_ps->TxRptMsgStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   994  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   995      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   996  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   997      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, PrevState, NM_STATE_REPEAT_MESSAGE);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   998  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	   999      (void)PrevState;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1000  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1001  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1002      /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1003      if(ConfigPtr_pcs->RepeatMessageTime != 0U)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1004      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1005          /* Start Repeat Message timer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1006          CanNm_StartTimer(RamPtr_ps->ctRepeatMessageTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1007      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1008  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1009      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1010  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1011      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1012  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1013      (void)CanNm_NetworkHandle;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1014  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1015  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1016  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1017      CanNm_CancelRemoteSleepInd(ConfigPtr_pcs,RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1018  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1019  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1020  #if ((CANNM_STATE_CHANGE_IND_ENABLED == STD_OFF) && (CANNM_PASSIVE_MODE_ENABLED != STD_OFF) && \ 
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1021          (CANNM_REMOTE_SLEEP_IND_ENABLED == STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1022      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1023  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1024  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1025  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1026  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1027   Function name    : CanNm_NormalOperationToRS
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1028   Description      : This inline function does transition to Ready Sleep state from Normal Operation state.
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1029   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1030                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1031   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1032   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1033  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1034  LOCAL_INLINE void CanNm_NormalOperationToRS(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1035          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1036          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1037  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1038  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1039  	RamPtr_ps->State_en = NM_STATE_READY_SLEEP;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1040  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1041      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1042  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1043      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_NORMAL_OPERATION, NM_STATE_READY_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1044  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1045      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1046  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1047  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1048      /* Stop Tx */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1049      RamPtr_ps->MsgTxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1050  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1051  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1052  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1053   Function name    : CanNm_ReadySleepToNO
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1054   Description      : This inline function does transition to Normal Operation state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1055   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1056                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1057   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1058   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1059  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1060  LOCAL_INLINE void CanNm_ReadySleepToNO(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1061          NetworkHandleType CanNm_NetworkHandle,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1062          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1063          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1064  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1065  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1066      /* goto Normal Operation state if Network is requested */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1067      RamPtr_ps->State_en = NM_STATE_NORMAL_OPERATION;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1068  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1069      /* Start transmission */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1070      CanNm_StartTransmission(CanNm_NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1071  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1072  #if (CANNM_REMOTE_SLEEP_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1073      CanNm_StartTimer(RamPtr_ps->ctRemoteSleepIndTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1074  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1075      /* Set the Remote Sleep state to Undetected */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1076      CANNM_RESET_REMOTE_SLEEP();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1077  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1078  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1079      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1080  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1081      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle,NM_STATE_READY_SLEEP,NM_STATE_NORMAL_OPERATION);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1082  #else
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1083      (void)ConfigPtr_pcs;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1084  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1085  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1086  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1087  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1088   Function name    : CanNm_GotoPrepareBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1089   Description      : This inline function does transition to Prepare Bus Sleep state from Ready Sleep state
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1090   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1091                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1092   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1093   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1094  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1095  LOCAL_INLINE void CanNm_GotoPrepareBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1096          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1097          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1098  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1099  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1100  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1101      /* Reset active wakeup bit in transmit control bit vector after Network mode is left */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1102      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & ((uint8)(~(CANNM_ACTIVE_WAKEUP_BIT_POS)));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1103  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1104      /* goto Prepare Bus sleep mode as NMTimeout has expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1105      CanNm_ChangeState(RamPtr_ps, NM_STATE_PREPARE_BUS_SLEEP, NM_MODE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1106  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1107      /* TRACE[SWS_CanNm_00114] :  Notify NM Interface about transition to Prepare Bus Sleep */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1108      Nm_PrepareBusSleepMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1109  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1110      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1111  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1112      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_READY_SLEEP, NM_STATE_PREPARE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1113  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1114  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1115      /* Start wait bus sleep time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1116      /* NM shall wait in Prepare Bus sleep mode until ctWaitBusSleepTimer expires */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1117      CanNm_StartTimer(RamPtr_ps->ctWaitBusSleepTimer);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1118  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1119  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1120  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1121   Function name    : CanNm_GotoBusSleep
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1122   Description      : This inline function does transition to Bus Sleep mode from Prepare Bus Sleep mode
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1123   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1124                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1125   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1126   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1127  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1128  LOCAL_INLINE void CanNm_GotoBusSleep(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1129          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1130          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1131  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1132  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1133      /* Goto Bus Sleep as timer expired */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1134      CanNm_ChangeState(RamPtr_ps, NM_STATE_BUS_SLEEP, NM_MODE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1135  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1136      /* Clear the Rx status information for this NM Sleep-Cycle */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1137      RamPtr_ps->RxStatus_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1138  #if (CANNM_COORDINATOR_SYNC_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1139      RamPtr_ps->CoordReadySleepBit_u8 = 0x00;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1140      RamPtr_ps->stCoordReadySleepInd_b = FALSE;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1141      RamPtr_ps->TxCtrlBitVector_u8 = RamPtr_ps->TxCtrlBitVector_u8 & (~(CANNM_COORD_READY_SLEEP_BIT_MASK));
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1142  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1143  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1144  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1145      /* The CanNm modules initialization and entering the Bus-Sleep Mode shall cause the PN message filtering to be
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1146       * disabled on the respective channel. As a result all received (PN) NM messages shall be processed in the following
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1147       * as being normal NM messages (i.e. NM-Timeout Timer shall be restarted) */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1148  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1149  #if (CANNM_PN_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1150      CANNM_ResetPnMsgFilteringStatus(RamPtr_ps);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1151  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1152  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1153      /* Inform Nm about change of state */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1154  #if (CANNM_STATE_CHANGE_IND_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1155      Nm_StateChangeNotification(ConfigPtr_pcs->NetworkHandle, NM_STATE_PREPARE_BUS_SLEEP, NM_STATE_BUS_SLEEP);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1156  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1157  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1158      /* TRACE[SWS_CanNm_00126] : Notify Nm about transition to Bus Sleep mode */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1159      /* This triggers shut down of the corresponding bus */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1160      Nm_BusSleepMode(ConfigPtr_pcs->NetworkHandle);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1161  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1162  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1163  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1164   Function name    : CanNm_UpdateTxPdu
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1165   Description      : This inline function updates User Data in the outgoing NM PDU
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1166   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1167                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1168   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1169   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1170  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1171  #if (CANNM_PASSIVE_MODE_ENABLED == STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1172  LOCAL_INLINE void CanNm_UpdateTxPdu(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1173          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1174          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1175  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1176  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1177  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1178      /* Pointer to Tx buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1179      P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) TxBufferPtr;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1180  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1181      /* Variable to hold PduInfo */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1182  #if (( CANNM_COM_USER_DATA_SUPPORT != STD_OFF) || ( CANNM_EIRACALC_ENABLED != STD_OFF))
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1183      VAR(PduInfoType, AUTOMATIC) PduInfo_s;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1184  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1185  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1186  #if(CANNM_USER_DATA_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1187      /* Pointer to user data */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1188      P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA)  UserDataPtr;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1189      /* Index of the User bytes in Tx buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1190      VAR(uint8_least, AUTOMATIC) UserDataOffset;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1191  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1192  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1193      /**** End Of Declarations ****/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1194      RamPtr_ps = RamPtr_ps;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1195  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1196      /* Get the user data bytes if COM User data is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1197  #if (CANNM_COM_USER_DATA_SUPPORT != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1198      PduInfo_s.SduDataPtr = RamPtr_ps->UserDataBuffer_au8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1199      (void)PduR_CanNmTriggerTransmit(ConfigPtr_pcs->PduRId,&PduInfo_s);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1200  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1201  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1202  #if(CANNM_USER_DATA_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1203      UserDataOffset = ConfigPtr_pcs->PduLength_u8 - ConfigPtr_pcs->UserDataLength_u8;
	ld.bu	d0,[a12]39
.L603:
	ld.bu	d15,[a12]46
.L412:
	sub	d0,d15
.L604:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1204      UserDataPtr = &(RamPtr_ps->UserDataBuffer_au8[0]);
	lea	a2,[a15]64
.L414:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1205  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1206  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1207      /* Enter Critical Section */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1208      SchM_Enter_CanNm_UpdateTxPduDataNoNest();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1209  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1210      /* Check if Control bit vector is enabled */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1211      if(ConfigPtr_pcs->ControlBitVectorPos_u8 != CANNM_PDU_OFF )
	ld.bu	d15,[a12]41
.L605:
	mov	d1,#255
.L606:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1211      if(ConfigPtr_pcs->ControlBitVectorPos_u8 != CANNM_PDU_OFF )      (inlined)
	jeq	d15,d1,.L81
.L607:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1212      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1213          /* Initialize the local TxBuffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1214          TxBufferPtr = &(RamPtr_ps->TxBuffer_au8[0]);
	lea	a4,[a15]48
.L416:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1215  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1216          /* Store the Control bit vector to be transmitted in the TxBuffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1217          TxBufferPtr[ConfigPtr_pcs->ControlBitVectorPos_u8] = RamPtr_ps->TxCtrlBitVector_u8 ;
	addsc.a	a4,a4,d15,#0
.L417:
	ld.bu	d15,[a15]78
.L608:
	st.b	[a4],d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1211      if(ConfigPtr_pcs->ControlBitVectorPos_u8 != CANNM_PDU_OFF )      (inlined)
.L81:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1218      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1219  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1220  #if(CANNM_USER_DATA_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1221  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1222      /* Initialize the local TxBuffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1223      TxBufferPtr = &(RamPtr_ps->TxBuffer_au8[UserDataOffset]);
	addsc.a	a4,a15,d0,#0
	lea	a4,[a4]48
.L418:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1224  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1225      /* This is an internal function with predictable run-time; hence doesn't affect interrupt lock */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1226      CanNm_CopyBuffer(UserDataPtr,TxBufferPtr,ConfigPtr_pcs->UserDataLength_u8);
	ld.bu	d15,[a12]46
.L335:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1227  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1228  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1229  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1230  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1231      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1232          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) data_pu8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1233          P2CONST(uint8, AUTOMATIC, CANNM_APPL_CONST)  PnFilterMask_pcu8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1234          uint8 index;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1235          /* Index of the User bytes in Tx buffer */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1236          VAR(uint8, AUTOMATIC) PNDataOffset;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1237  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1238          PNDataOffset  = CANNM_PN_INFO_OFFSET - (ConfigPtr_pcs->PduLength_u8 - ConfigPtr_pcs->UserDataLength_u8);
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1239          data_pu8 = &PduInfo_s.SduDataPtr[PNDataOffset];
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1240          PnFilterMask_pcu8 = CanNm_GlobalConfigData_pcs->PnFilterMask_pcu8;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1241          /* EIRA should not be calculated when
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1242           * 1. The corresponding channel has configured CanNmPNEnabled to FALSE
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1243           * 2. The received message has no PNI bit set in the CBV  */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1244          if (CANNM_GetPnEnabledStatus(ConfigPtr_pcs) != FALSE)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1245          {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1246  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1247              for (index = 0;index < CANNM_PN_INFOLENGTH;index++)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1248              {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1249                  //Check if any PN , which is relevant for ECU, is requested
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1250                  if ((data_pu8[index] & PnFilterMask_pcu8[index]) != 0u)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1251                  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1252                      CanNM_EIRACurrentStatus_au8[index] = CanNM_EIRACurrentStatus_au8[index] | data_pu8[index];
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1253                  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1254              }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1255          }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1256      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1257  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1258  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1259      /* Leave Critical Section */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1260      SchM_Exit_CanNm_UpdateTxPduDataNoNest();
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1261  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1262  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1263  #endif
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1264  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1265  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1266   Function name    : CanNm_CopyBuffer
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1267   Description      : This inline function copies data from SrcPtr to DestPtr
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1268   Parameter        : SrcPtr - pointer to source address
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1269                    : DestPtr - pointer to destination address
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1270   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1271   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1272  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1273  LOCAL_INLINE void CanNm_CopyBuffer(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1274          P2CONST(uint8, AUTOMATIC, CANNM_APPL_DATA) SrcPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1275          P2VAR(uint8, AUTOMATIC, CANNM_APPL_DATA) DestPtr,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1276          uint8 Len
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1277  )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1278  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1279      uint8_least Index_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1280  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1281      for(Index_ui = 0; Index_ui < Len; Index_ui++)
	mov	d0,#0
.L413:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1281      for(Index_ui = 0; Index_ui < Len; Index_ui++)      (inlined)
	j	.L82
.L83:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1282      {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1283          *DestPtr = *SrcPtr;
	ld.bu	d1,[a2]
.L609:
	st.b	[a4],d1
.L610:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1284          SrcPtr++;
	add.a	a2,#1
.L611:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1285          DestPtr++;
	add.a	a4,#1
.L612:
	add	d0,#1

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1281      for(Index_ui = 0; Index_ui < Len; Index_ui++)      (inlined)
.L82:
	jlt.u	d0,d15,.L83
.L324:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1286      }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1287  }
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1288  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1289  /***************************************************************************************************
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1290   Function name    : CanNm_MessageTransmit
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1291   Description      : This inline function is for transmitting NM PDUs by calling CanIf_Tranmsit
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1292   Parameter        : ConfigPtr_pcs - pointer to the Configuration structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1293                    : RamPtr_ps - pointer to the RAM structure
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1294   Return value     : None
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1295   ***************************************************************************************************/
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1296  LOCAL_INLINE FUNC(Std_ReturnType, CANNM_CODE) CanNm_MessageTransmit(
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1297                                          P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs,
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1298                                          P2VAR(CanNm_RamType, AUTOMATIC, CANNM_APPL_DATA) RamPtr_ps
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1299                                       )
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1300  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1301  {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1302       /* Variable to store return value of the function */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1303       VAR(Std_ReturnType, AUTOMATIC)                             RetValOfFuncs_ui;
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1304  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1305       /* Transmit the PDU */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1306       RetValOfFuncs_ui = CanIf_Transmit(ConfigPtr_pcs->TxPduId, &(RamPtr_ps->Pdu_s));
	ld.hu	d4,[a12]36
.L408:
	mov.aa	a4,a15
.L419:
	call	CanIf_Transmit
.L415:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1308       if(RetValOfFuncs_ui == E_OK)      (inlined)
	jne	d2,#0,.L84
.L613:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1307  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1308       if(RetValOfFuncs_ui == E_OK)
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1309       {
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1310         /* Start Message timeout time only if message is accepted */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1311         CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
	ld.w	d15,[a15]8
	st.w	[a15]20,d15
.L614:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1312  
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1313         /* Set TxTimeoutMonitoringActive_b flag for monitoring message timeout time */
; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1314         RamPtr_ps->TxTimeoutMonitoringActive_b = TRUE;
	mov	d15,#1
.L615:
	st.b	[a15]87,d15

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1308       if(RetValOfFuncs_ui == E_OK)      (inlined)
.L84:

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1318       return RetValOfFuncs_ui;      (inlined)
	j	.L85

; .\BSW\src\BSW\Gen\CanNm\api\CanNm_Inl.h	  1319  }      (inlined)
.L85:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   374              }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   375          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   376          /* Copy the Pdu data into Tx Buffer */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   377          CanNm_UpdateTxPdu(ConfigPtr_pcs,RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   378  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   379          /* Transmit the PDU */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   380          RetValOfFuncs_ui = CanNm_MessageTransmit(ConfigPtr_pcs,RamPtr_ps);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   381  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   382          /* Start monitoring message cycle time */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   383          CanNm_StartTimer(RamPtr_ps->PrevMsgCycleTimestamp);
	ld.w	d15,[a15]8
	st.w	[a15]16,d15
.L616:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   384  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   385          /* Start Msg timeout timer if there is transmit confirmation */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   386          if((RetValOfFuncs_ui == (uint8_least)E_OK) && (RamPtr_ps->TxConfirmation_b != FALSE))
	jne	d2,#0,.L86
.L617:
	ld.bu	d15,[a15]83
.L618:
	jeq	d15,#0,.L87
.L619:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   387          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   388              /* Start Timeout time */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   389              CanNm_StartTimer(RamPtr_ps->PrevMsgTimeoutTimestamp);
	ld.w	d15,[a15]8
	st.w	[a15]20,d15
.L620:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   390  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   391              /* Msg transmit confirmation required */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   392              RamPtr_ps->TxConfirmation_b = FALSE;
	mov	d15,#0
.L621:
	st.b	[a15]83,d15
.L87:
.L86:
.L77:
.L76:
.L75:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   393          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   394      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   395  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   396      /* Monitor Msg timeout timer only in Repeat Message state and Normal Operation state. Also only when there is a transmission*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   397      if ((RamPtr_ps->TxTimeoutMonitoringActive_b != FALSE) && (RamPtr_ps->stCanNmComm != FALSE) &&
	ld.bu	d15,[a15]87
.L622:
	jeq	d15,#0,.L88
.L623:
	ld.bu	d15,[a15]85
.L624:
	jeq	d15,#0,.L89
.L625:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   398              (RamPtr_ps->MsgTxStatus_b != FALSE) && (CanNm_TimerExpired(RamPtr_ps->PrevMsgTimeoutTimestamp, ConfigPtr_pcs->MsgTimeoutTime) != FALSE))
	ld.bu	d15,[a15]80
.L626:
	jeq	d15,#0,.L90
.L627:
	ld.w	d15,[a15]8
	ld.w	d0,[a15]20
	sub	d0,d15,d0
	ld.w	d15,[a12]8
.L628:
	jlt.u	d0,d15,.L91
.L629:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   399      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   400          /* Inform NM about Tx Timeout */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   401          Nm_TxTimeoutException(nmChannelHandle);
	mov	d4,d8
.L420:
	call	Nm_TxTimeoutException
.L421:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   402  # if (CANNM_PN_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   403          CanSM_TxTimeoutException(nmChannelHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   404  # endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   405  		/* TRACE[SWS_CanNm_00066]: Clearing TxTimeoutMonitoringActive_b flag as Nm_TxTimeoutException should be called only once */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   406      	RamPtr_ps->TxTimeoutMonitoringActive_b = FALSE;
	mov	d15,#0
.L630:
	st.b	[a15]87,d15
.L91:
.L90:
.L89:
.L88:

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   407      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   408  }
	ret
.L315:
	
__CanNm_MainFunctionTx_function_end:
	.size	CanNm_MainFunctionTx,__CanNm_MainFunctionTx_function_end-CanNm_MainFunctionTx
.L116:
	; End of function
	
	.calls	'CanNm_MainFunction','CanNm_InternalMainProcess'
	.calls	'CanNm_InternalMainProcess','Det_ReportError'
	.calls	'CanNm_InternalMainProcess','CanNm_ChangeState'
	.calls	'CanNm_InternalMainProcess','Nm_NetworkMode'
	.calls	'CanNm_InternalMainProcess','CanNm_StartTransmission'
	.calls	'CanNm_InternalMainProcess','Nm_StateChangeNotification'
	.calls	'CanNm_InternalMainProcess','Nm_NetworkStartIndication'
	.calls	'CanNm_InternalMainProcess','Nm_BusSleepMode'
	.calls	'CanNm_InternalMainProcess','Nm_RepeatMessageIndication'
	.calls	'CanNm_InternalMainProcess','Nm_PrepareBusSleepMode'
	.calls	'CanNm_InternalMainProcess','CanNm_MainFunctionTx'
	.calls	'CanNm_MainFunctionTx','CanIf_Transmit'
	.calls	'CanNm_MainFunctionTx','Nm_TxTimeoutException'
	.calls	'CanNm_MainFunction','',0
	.calls	'CanNm_InternalMainProcess','',8
	.extern	Det_ReportError
	.extern	CanNm_ChannelConfigData_cs
	.extern	CanNm_RamData_s
	.extern	CanNm_ChangeState
	.extern	CanNm_StartTransmission
	.extern	CanIf_Transmit
	.extern	Nm_NetworkMode
	.extern	Nm_BusSleepMode
	.extern	Nm_PrepareBusSleepMode
	.extern	Nm_NetworkStartIndication
	.extern	Nm_TxTimeoutException
	.extern	Nm_StateChangeNotification
	.extern	Nm_RepeatMessageIndication
	.calls	'CanNm_MainFunctionTx','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L99:
	.word	166899
	.half	3
	.word	.L100
	.byte	4
.L98:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L101
.L118:
	.byte	2
	.byte	'unsigned char',0,1,8
.L330:
	.byte	3
	.word	133
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	150
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	150
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	133
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	133
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	150
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	133
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	133
	.byte	6,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	463
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	485
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	485
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	463
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	463
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	485
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	133
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	133
	.byte	6,0
.L133:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	802
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	818
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	818
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	133
	.byte	6,0,7
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	802
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	802
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	133
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	818
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	133
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	133
	.byte	6,0,7
	.byte	'Gtm_GetMcsRamRstStat',0,3,4,221,33,32
	.word	133
	.byte	1,1,5
	.byte	'McsModule',0,4,221,33,60
	.word	133
	.byte	6,0,8,7,71,9,8,9
	.byte	'SduDataPtr',0
	.word	150
	.byte	4,2,35,0,9
	.byte	'SduLength',0
	.word	463
	.byte	2,2,35,4,0,10,8
	.word	133
	.byte	11,7,0
.L135:
	.byte	12,8,67,9,4,13
	.byte	'NM_STATE_UNINIT',0,0,13
	.byte	'NM_STATE_BUS_SLEEP',0,1,13
	.byte	'NM_STATE_PREPARE_BUS_SLEEP',0,2,13
	.byte	'NM_STATE_READY_SLEEP',0,3,13
	.byte	'NM_STATE_NORMAL_OPERATION',0,4,13
	.byte	'NM_STATE_REPEAT_MESSAGE',0,5,13
	.byte	'NM_STATE_SYNCHRONIZE',0,6,13
	.byte	'NM_STATE_OFFLINE',0,7,0
.L131:
	.byte	12,6,199,1,9,4,13
	.byte	'CANNM_NETWORK_RELEASED_E',0,0,13
	.byte	'CANNM_NETWORK_REQUESTED_E',0,1,0,12,8,43,9,4,13
	.byte	'NM_MODE_BUS_SLEEP',0,0,13
	.byte	'NM_MODE_PREPARE_BUS_SLEEP',0,1,13
	.byte	'NM_MODE_SYNCHRONIZE',0,2,13
	.byte	'NM_MODE_NETWORK',0,3,0,8,6,206,1,9,88,9
	.byte	'Pdu_s',0
	.word	1189
	.byte	8,2,35,0,9
	.byte	'ctSwFrTimer',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'MsgCyclePeriod',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'PrevMsgCycleTimestamp',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'PrevMsgTimeoutTimestamp',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'ctRepeatMessageTimer',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'ctNMTimeoutTimer',0
	.word	802
	.byte	4,2,35,28,9
	.byte	'ctWaitBusSleepTimer',0
	.word	802
	.byte	4,2,35,32,9
	.byte	'ctRemoteSleepIndTimer',0
	.word	802
	.byte	4,2,35,36,9
	.byte	'RxBuffer_au8',0
	.word	1234
	.byte	8,2,35,40,9
	.byte	'TxBuffer_au8',0
	.word	1234
	.byte	8,2,35,48,9
	.byte	'State_en',0
	.word	1243
	.byte	4,2,35,56,9
	.byte	'NetworkReqState_en',0
	.word	1436
	.byte	4,2,35,60,9
	.byte	'UserDataBuffer_au8',0
	.word	1234
	.byte	8,2,35,64,9
	.byte	'Mode_en',0
	.word	1498
	.byte	4,2,35,72,9
	.byte	'RxNodeId_u8',0
	.word	133
	.byte	1,2,35,76,9
	.byte	'RxCtrlBitVector_u8',0
	.word	133
	.byte	1,2,35,77,9
	.byte	'TxCtrlBitVector_u8',0
	.word	133
	.byte	1,2,35,78,9
	.byte	'ImmediateNmTx_u8',0
	.word	133
	.byte	1,2,35,79,9
	.byte	'MsgTxStatus_b',0
	.word	133
	.byte	1,2,35,80,9
	.byte	'TxRptMsgStatus_b',0
	.word	133
	.byte	1,2,35,81,9
	.byte	'RxIndication_b',0
	.word	133
	.byte	1,2,35,82,9
	.byte	'TxConfirmation_b',0
	.word	133
	.byte	1,2,35,83,9
	.byte	'RxStatus_b',0
	.word	133
	.byte	1,2,35,84,9
	.byte	'stCanNmComm',0
	.word	133
	.byte	1,2,35,85,9
	.byte	'stRemoteSleepInd',0
	.word	133
	.byte	1,2,35,86,9
	.byte	'TxTimeoutMonitoringActive_b',0
	.word	133
	.byte	1,2,35,87,0
.L126:
	.byte	3
	.word	1592
.L161:
	.byte	4
	.byte	'CanNm_ComputeSwFrTimer',0,3,5,182,6,19,1,1
.L163:
	.byte	5
	.byte	'RamPtr_ps',0,5,183,6,58
	.word	2280
.L165:
	.byte	6,0,8,9,82,9,52,9
	.byte	'MsgCycleTime',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'MsgCycleOffset',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'MsgTimeoutTime',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'MsgReducedTime',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'ImmediateNmCycleTime',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'NMTimeoutTime',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'RepeatMessageTime',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'RemoteSleepIndTime',0
	.word	802
	.byte	4,2,35,28,9
	.byte	'WaitBusSleepTime',0
	.word	802
	.byte	4,2,35,32,9
	.byte	'TxPduId',0
	.word	463
	.byte	2,2,35,36,9
	.byte	'NetworkHandle',0
	.word	133
	.byte	1,2,35,38,9
	.byte	'PduLength_u8',0
	.word	133
	.byte	1,2,35,39,9
	.byte	'NodeIdPos_u8',0
	.word	133
	.byte	1,2,35,40,9
	.byte	'ControlBitVectorPos_u8',0
	.word	133
	.byte	1,2,35,41,9
	.byte	'NodeDetectionEnabled_b',0
	.word	133
	.byte	1,2,35,42,9
	.byte	'NodeIdEnabled_b',0
	.word	133
	.byte	1,2,35,43,9
	.byte	'RepeatMsgIndEnabled_b',0
	.word	133
	.byte	1,2,35,44,9
	.byte	'NodeId_u8',0
	.word	133
	.byte	1,2,35,45,9
	.byte	'UserDataLength_u8',0
	.word	133
	.byte	1,2,35,46,9
	.byte	'ImmediateNmTransmissions_u8',0
	.word	133
	.byte	1,2,35,47,9
	.byte	'stChannelActive_b',0
	.word	133
	.byte	1,2,35,48,9
	.byte	'stBusLoadReductionActive_b',0
	.word	133
	.byte	1,2,35,49,9
	.byte	'ActiveWakeupBitEnabled_b',0
	.word	133
	.byte	1,2,35,50,0,14
	.word	2337
.L120:
	.byte	3
	.word	2955
.L179:
	.byte	4
	.byte	'CanNm_GotoNetworkMode',0,3,5,226,6,19,1,1
.L182:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,227,6,27
	.word	133
.L184:
	.byte	5
	.byte	'PrevState',0,5,228,6,39
	.word	1243
.L186:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,229,6,71
	.word	2960
.L188:
	.byte	5
	.byte	'RamPtr_ps',0,5,230,6,58
	.word	2280
.L190:
	.byte	6,0
.L306:
	.byte	4
	.byte	'CanNm_RepeatMessageToNO',0,3,5,155,7,19,1,1
.L307:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,156,7,71
	.word	2960
.L309:
	.byte	5
	.byte	'RamPtr_ps',0,5,157,7,58
	.word	2280
.L311:
	.byte	6,0
.L298:
	.byte	4
	.byte	'CanNm_RepeatMessageToRS',0,3,5,186,7,19,1,1
.L301:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,187,7,71
	.word	2960
.L303:
	.byte	5
	.byte	'RamPtr_ps',0,5,188,7,58
	.word	2280
.L305:
	.byte	6,0
.L230:
	.byte	4
	.byte	'CanNm_GotoRepeatMessage',0,3,5,214,7,19,1,1
.L233:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,215,7,27
	.word	133
.L235:
	.byte	5
	.byte	'PrevState',0,5,216,7,39
	.word	1243
.L237:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,217,7,71
	.word	2960
.L239:
	.byte	5
	.byte	'RamPtr_ps',0,5,218,7,58
	.word	2280
.L241:
	.byte	6,0
.L281:
	.byte	4
	.byte	'CanNm_NormalOperationToRS',0,3,5,138,8,19,1,1
.L284:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,139,8,71
	.word	2960
.L286:
	.byte	5
	.byte	'RamPtr_ps',0,5,140,8,58
	.word	2280
.L288:
	.byte	6,0
.L250:
	.byte	4
	.byte	'CanNm_ReadySleepToNO',0,3,5,164,8,19,1,1
.L253:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,165,8,27
	.word	133
.L255:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,166,8,71
	.word	2960
.L257:
	.byte	5
	.byte	'RamPtr_ps',0,5,167,8,58
	.word	2280
.L259:
	.byte	6,0
.L242:
	.byte	4
	.byte	'CanNm_GotoPrepareBusSleep',0,3,5,199,8,19,1,1
.L245:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,200,8,71
	.word	2960
.L247:
	.byte	5
	.byte	'RamPtr_ps',0,5,201,8,58
	.word	2280
.L249:
	.byte	6,0
.L205:
	.byte	4
	.byte	'CanNm_GotoBusSleep',0,3,5,232,8,19,1,1
.L208:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,233,8,71
	.word	2960
.L210:
	.byte	5
	.byte	'RamPtr_ps',0,5,234,8,58
	.word	2280
.L212:
	.byte	6,0
.L323:
	.byte	4
	.byte	'CanNm_UpdateTxPdu',0,3,5,148,9,19,1,1
.L325:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,149,9,71
	.word	2960
.L327:
	.byte	5
	.byte	'RamPtr_ps',0,5,150,9,58
	.word	2280
.L329:
	.byte	15,6,0,0,14
	.word	133
	.byte	3
	.word	3764
.L334:
	.byte	4
	.byte	'CanNm_CopyBuffer',0,3,5,249,9,19,1,1
.L336:
	.byte	5
	.byte	'SrcPtr',0,5,250,9,52
	.word	3769
.L338:
	.byte	5
	.byte	'DestPtr',0,5,251,9,50
	.word	150
.L340:
	.byte	5
	.byte	'Len',0,5,252,9,15
	.word	133
.L342:
	.byte	6,0
.L344:
	.byte	7
	.byte	'CanNm_MessageTransmit',0,3,5,144,10,47
	.word	133
	.byte	1,1
.L345:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,145,10,103
	.word	2960
.L347:
	.byte	5
	.byte	'RamPtr_ps',0,5,146,10,90
	.word	2280
.L349:
	.byte	6,0
.L137:
	.byte	7
	.byte	'CanNm_NetworkModeProcessing',0,3,5,192,1,45
	.word	1243
	.byte	1,1
.L139:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,198,1,91
	.word	2960
.L141:
	.byte	5
	.byte	'RamPtr_ps',0,5,200,1,66
	.word	2280
.L143:
	.byte	5
	.byte	'PduRxInd_b',0,5,201,1,41
	.word	133
.L145:
	.byte	5
	.byte	'PduTxConfirmation_b',0,5,203,1,45
	.word	133
.L147:
	.byte	6,0,14
	.word	133
.L166:
	.byte	4
	.byte	'CanNm_CaseBusSleep',0,3,5,191,2,37,1,1
.L168:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,193,2,88
	.word	4058
.L170:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,195,2,114
	.word	2960
.L172:
	.byte	5
	.byte	'RamPtr_ps',0,5,197,2,101
	.word	2280
.L174:
	.byte	5
	.byte	'PduRxInd_b',0,5,199,2,76
	.word	133
.L176:
	.byte	15,6,0,0,14
	.word	133
.L191:
	.byte	4
	.byte	'CanNm_CasePrepareBusSleep',0,3,5,135,3,37,1,1
.L193:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,136,3,45
	.word	4185
.L195:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,137,3,71
	.word	2960
.L197:
	.byte	5
	.byte	'RamPtr_ps',0,5,138,3,58
	.word	2280
.L199:
	.byte	5
	.byte	'PduRxInd_b',0,5,139,3,33
	.word	133
.L201:
	.byte	15,6,6,6,0,0,14
	.word	133
.L214:
	.byte	4
	.byte	'CanNm_CaseReadySleep',0,3,5,211,3,37,1,1
.L216:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,213,3,77
	.word	4321
.L218:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,215,3,103
	.word	2960
.L220:
	.byte	5
	.byte	'RamPtr_ps',0,5,216,3,90
	.word	2280
.L222:
	.byte	5
	.byte	'CtrlBitVector_u8',0,5,218,3,64
	.word	133
.L224:
	.byte	15,6,6,6,0,0,14
	.word	133
.L260:
	.byte	4
	.byte	'CanNm_CaseNormalOperation',0,3,5,190,4,37,1,1
.L262:
	.byte	5
	.byte	'CanNm_NetworkHandle',0,5,192,4,49
	.word	4458
.L264:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,194,4,75
	.word	2960
.L266:
	.byte	5
	.byte	'RamPtr_ps',0,5,195,4,62
	.word	2280
.L268:
	.byte	5
	.byte	'CtrlBitVector_u8',0,5,197,4,36
	.word	133
.L270:
	.byte	15,6,6,0,0
.L289:
	.byte	4
	.byte	'CanNm_CaseRepeatMessage',0,3,5,180,5,37,1,1
.L290:
	.byte	5
	.byte	'ConfigPtr_pcs',0,5,181,5,71
	.word	2960
.L292:
	.byte	5
	.byte	'RamPtr_ps',0,5,182,5,58
	.word	2280
.L294:
	.byte	15,6,6,0,0,16
	.byte	'Det_ReportError',0,10,112,16
	.word	133
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,10,112,39
	.word	463
	.byte	5
	.byte	'InstanceId',0,10,112,55
	.word	133
	.byte	5
	.byte	'ApiId',0,10,112,73
	.word	133
	.byte	5
	.byte	'ErrorId',0,10,112,86
	.word	133
	.byte	0,17
	.word	155
	.byte	18
	.word	185
	.byte	18
	.word	200
	.byte	6,0,17
	.word	223
	.byte	18
	.word	255
	.byte	18
	.word	270
	.byte	6,0,17
	.word	293
	.byte	18
	.word	333
	.byte	18
	.word	347
	.byte	6,0,17
	.word	370
	.byte	18
	.word	403
	.byte	18
	.word	417
	.byte	18
	.word	438
	.byte	6,0,17
	.word	490
	.byte	18
	.word	521
	.byte	18
	.word	536
	.byte	6,0,17
	.word	559
	.byte	18
	.word	592
	.byte	18
	.word	607
	.byte	6,0,17
	.word	630
	.byte	18
	.word	671
	.byte	18
	.word	685
	.byte	6,0,17
	.word	708
	.byte	18
	.word	742
	.byte	18
	.word	756
	.byte	18
	.word	777
	.byte	6,0,17
	.word	823
	.byte	18
	.word	854
	.byte	18
	.word	869
	.byte	6,0,17
	.word	892
	.byte	18
	.word	925
	.byte	18
	.word	940
	.byte	6,0,17
	.word	963
	.byte	18
	.word	1004
	.byte	18
	.word	1018
	.byte	6,0,17
	.word	1041
	.byte	18
	.word	1075
	.byte	18
	.word	1089
	.byte	18
	.word	1110
	.byte	6,0,19
	.byte	'CanNm_ChangeState',0,6,203,2,31,1,1,1,1,5
	.byte	'RamPtr_ps',0,6,204,2,100
	.word	2280
	.byte	5
	.byte	'nmState_en',0,6,205,2,80
	.word	1243
	.byte	5
	.byte	'nmMode_en',0,6,206,2,79
	.word	1498
	.byte	0,14
	.word	133
	.byte	19
	.byte	'CanNm_StartTransmission',0,6,213,2,31,1,1,1,1,5
	.byte	'CanNm_NetworkHandle',0,6,213,2,92
	.word	5078
	.byte	0,17
	.word	1135
	.byte	18
	.word	1168
	.byte	6,0,14
	.word	1189
	.byte	3
	.word	5158
	.byte	16
	.byte	'CanIf_Transmit',0,11,82,41
	.word	133
	.byte	1,1,1,1,5
	.byte	'CanIfTxSduId',0,11,82,81
	.word	463
	.byte	5
	.byte	'CanIfTxInfoPtr',0,11,83,59
	.word	5163
	.byte	0,19
	.byte	'Nm_NetworkMode',0,12,51,28,1,1,1,1,5
	.byte	'NetworkHandle',0,12,51,77
	.word	133
	.byte	0,19
	.byte	'Nm_BusSleepMode',0,12,67,28,1,1,1,1,5
	.byte	'NetworkHandle',0,12,67,78
	.word	133
	.byte	0,19
	.byte	'Nm_PrepareBusSleepMode',0,12,85,28,1,1,1,1,5
	.byte	'NetworkHandle',0,12,85,85
	.word	133
	.byte	0,19
	.byte	'Nm_NetworkStartIndication',0,12,101,28,1,1,1,1,5
	.byte	'NetworkHandle',0,12,101,88
	.word	133
	.byte	0,19
	.byte	'Nm_TxTimeoutException',0,12,150,1,28,1,1,1,1,5
	.byte	'NetworkHandle',0,12,150,1,84
	.word	133
	.byte	0,19
	.byte	'Nm_StateChangeNotification',0,12,210,1,28,1,1,1,1,5
	.byte	'nmNetworkHandle',0,12,212,1,39
	.word	133
	.byte	5
	.byte	'nmPreviousState',0,12,213,1,34
	.word	1243
	.byte	5
	.byte	'nmCurrentState',0,12,214,1,34
	.word	1243
	.byte	0,19
	.byte	'Nm_RepeatMessageIndication',0,12,232,1,28,1,1,1,1,5
	.byte	'nmNetworkHandle',0,12,232,1,89
	.word	133
	.byte	0,17
	.word	2285
	.byte	18
	.word	2316
	.byte	6,0,17
	.word	2965
	.byte	18
	.word	2995
	.byte	18
	.word	3024
	.byte	18
	.word	3043
	.byte	18
	.word	3066
	.byte	6,0,17
	.word	3087
	.byte	18
	.word	3119
	.byte	18
	.word	3142
	.byte	6,0,17
	.word	3163
	.byte	18
	.word	3195
	.byte	18
	.word	3218
	.byte	6,0,17
	.word	3239
	.byte	18
	.word	3271
	.byte	18
	.word	3300
	.byte	18
	.word	3319
	.byte	18
	.word	3342
	.byte	6,0,17
	.word	3363
	.byte	18
	.word	3397
	.byte	18
	.word	3420
	.byte	6,0,17
	.word	3441
	.byte	18
	.word	3470
	.byte	18
	.word	3499
	.byte	18
	.word	3522
	.byte	6,0,17
	.word	3543
	.byte	18
	.word	3577
	.byte	18
	.word	3600
	.byte	6,0,17
	.word	3621
	.byte	18
	.word	3648
	.byte	18
	.word	3671
	.byte	6,0,17
	.word	3692
	.byte	18
	.word	3718
	.byte	18
	.word	3741
	.byte	15,20
	.word	3774
	.byte	18
	.word	3799
	.byte	18
	.word	3815
	.byte	18
	.word	3832
	.byte	21
	.word	3845
	.byte	0,6,0,0,17
	.word	3774
	.byte	18
	.word	3799
	.byte	18
	.word	3815
	.byte	18
	.word	3832
	.byte	6,0,17
	.word	3847
	.byte	18
	.word	3881
	.byte	18
	.word	3904
	.byte	6,0,17
	.word	3925
	.byte	18
	.word	3965
	.byte	18
	.word	3988
	.byte	18
	.word	4007
	.byte	18
	.word	4027
	.byte	6,0,17
	.word	4063
	.byte	18
	.word	4090
	.byte	18
	.word	4119
	.byte	18
	.word	4142
	.byte	18
	.word	4161
	.byte	15,20
	.word	2965
	.byte	18
	.word	2995
	.byte	18
	.word	3024
	.byte	18
	.word	3043
	.byte	18
	.word	3066
	.byte	21
	.word	3085
	.byte	0,6,0,0,17
	.word	4190
	.byte	18
	.word	4224
	.byte	18
	.word	4253
	.byte	18
	.word	4276
	.byte	18
	.word	4295
	.byte	15,20
	.word	3621
	.byte	18
	.word	3648
	.byte	18
	.word	3671
	.byte	21
	.word	3690
	.byte	0,6,20
	.word	2965
	.byte	18
	.word	2995
	.byte	18
	.word	3024
	.byte	18
	.word	3043
	.byte	18
	.word	3066
	.byte	21
	.word	3085
	.byte	0,6,20
	.word	2965
	.byte	18
	.word	2995
	.byte	18
	.word	3024
	.byte	18
	.word	3043
	.byte	18
	.word	3066
	.byte	21
	.word	3085
	.byte	0,6,0,0,17
	.word	4326
	.byte	18
	.word	4355
	.byte	18
	.word	4384
	.byte	18
	.word	4407
	.byte	18
	.word	4426
	.byte	15,20
	.word	3441
	.byte	18
	.word	3470
	.byte	18
	.word	3499
	.byte	18
	.word	3522
	.byte	21
	.word	3541
	.byte	0,6,20
	.word	3239
	.byte	18
	.word	3271
	.byte	18
	.word	3300
	.byte	18
	.word	3319
	.byte	18
	.word	3342
	.byte	21
	.word	3361
	.byte	0,6,20
	.word	3543
	.byte	18
	.word	3577
	.byte	18
	.word	3600
	.byte	21
	.word	3619
	.byte	0,6,0,0,17
	.word	4463
	.byte	18
	.word	4497
	.byte	18
	.word	4526
	.byte	18
	.word	4549
	.byte	18
	.word	4568
	.byte	15,20
	.word	3363
	.byte	18
	.word	3397
	.byte	18
	.word	3420
	.byte	21
	.word	3439
	.byte	0,6,20
	.word	3239
	.byte	18
	.word	3271
	.byte	18
	.word	3300
	.byte	18
	.word	3319
	.byte	18
	.word	3342
	.byte	21
	.word	3361
	.byte	0,6,0,0,17
	.word	4599
	.byte	18
	.word	4631
	.byte	18
	.word	4654
	.byte	15,20
	.word	3087
	.byte	18
	.word	3119
	.byte	18
	.word	3142
	.byte	21
	.word	3161
	.byte	0,6,20
	.word	3163
	.byte	18
	.word	3195
	.byte	18
	.word	3218
	.byte	21
	.word	3237
	.byte	0,6,0,0
.L123:
	.byte	14
	.word	133
.L316:
	.byte	14
	.word	133
.L320:
	.byte	2
	.byte	'unsigned long int',0,4,7,22,1,3
	.word	6414
	.byte	23
	.byte	'__codeptr',0,13,1,1
	.word	6416
	.byte	2
	.byte	'char',0,1,6,23
	.byte	'sint8',0,14,76,25
	.word	6439
	.byte	23
	.byte	'uint8',0,14,81,25
	.word	133
	.byte	23
	.byte	'uint16',0,14,91,25
	.word	463
	.byte	23
	.byte	'uint32',0,14,106,24
	.word	802
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,14,111,30
	.word	6505
	.byte	23
	.byte	'boolean',0,14,127,25
	.word	133
	.byte	23
	.byte	'uint8_least',0,14,137,1,25
	.word	6393
	.byte	23
	.byte	'uint16_least',0,14,147,1,25
	.word	6393
	.byte	23
	.byte	'StatusType',0,15,191,1,27
	.word	133
	.byte	23
	.byte	'Std_ReturnType',0,15,199,1,15
	.word	133
	.byte	8,15,206,1,9,8,9
	.byte	'vendorID',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'moduleID',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'sw_major_version',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'sw_minor_version',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'sw_patch_version',0
	.word	133
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,15,213,1,3
	.word	6649
	.byte	23
	.byte	'PduIdType',0,16,22,19
	.word	463
	.byte	23
	.byte	'PduLengthType',0,16,26,19
	.word	463
	.byte	23
	.byte	'PduInfoType',0,7,75,3
	.word	1189
	.byte	12,7,113,9,4,13
	.byte	'TP_DATACONF',0,0,13
	.byte	'TP_DATARETRY',0,1,13
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,7,118,3
	.word	6859
	.byte	23
	.byte	'NetworkHandleType',0,7,128,1,17
	.word	133
	.byte	23
	.byte	'CanNm_TimerType',0,9,74,17
	.word	802
	.byte	23
	.byte	'CanNm_ChannelConfigType',0,9,131,1,3
	.word	2337
	.byte	23
	.byte	'Nm_ModeType',0,8,49,3
	.word	1498
	.byte	23
	.byte	'Nm_StateType',0,8,77,3
	.word	1243
	.byte	12,8,116,9,4,13
	.byte	'NM_ACTIVE_CHANNEL',0,0,13
	.byte	'NM_PASSIVE_CHANNEL',0,1,0,23
	.byte	'Nm_ChannelType',0,8,120,3
	.word	7060
	.byte	23
	.byte	'Can_IdType',0,17,32,16
	.word	802
	.byte	23
	.byte	'Can_HwHandleType',0,17,43,16
	.word	463
	.byte	8,18,93,9,8,9
	.byte	'Class',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TIN',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'ReturnAddress',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,18,97,3
	.word	7174
	.byte	10,68
	.word	802
	.byte	11,16,0,8,18,154,1,9,68,9
	.byte	'store',0
	.word	7254
	.byte	68,2,35,0,0,10,68
	.word	7263
	.byte	11,0,0,23
	.byte	'Os_JumpBufType',0,18,156,1,3
	.word	7285
	.byte	23
	.byte	'Os_StackTraceType',0,18,174,1,18
	.word	802
	.byte	8,18,175,1,9,8,9
	.byte	'sp',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'ctx',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,18,175,1,63
	.word	7345
	.byte	23
	.byte	'Os_StackSizeType',0,18,176,1,27
	.word	7345
	.byte	24,1,1,3
	.word	7430
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,18,179,1,16
	.word	7433
	.byte	23
	.byte	'ApplicationType',0,18,193,1,23
	.word	133
	.byte	25
	.byte	'Os_ApplicationConfigurationType_s',0,18,198,1,16,2,9
	.byte	'app_id',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,18,201,1,3
	.word	7496
	.byte	23
	.byte	'Os_CoreStateType',0,18,203,1,16
	.word	802
	.byte	23
	.byte	'AreaIdType',0,18,204,1,16
	.word	463
	.byte	23
	.byte	'Os_PeripheralAddressType',0,18,212,1,22
	.word	802
	.byte	23
	.byte	'TickType',0,18,221,1,22
	.word	802
	.byte	23
	.byte	'Os_StopwatchTickType',0,18,225,1,22
	.word	802
	.byte	23
	.byte	'Os_Lockable',0,18,234,1,18
	.word	818
	.byte	23
	.byte	'CoreIdType',0,18,236,1,16
	.word	463
	.byte	23
	.byte	'SpinlockIdType',0,18,237,1,16
	.word	463
	.byte	12,18,239,1,9,4,13
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,13
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,18,239,1,74
	.word	7803
	.byte	12,18,174,2,9,4,13
	.byte	'APPLICATION_ACCESSIBLE',0,0,13
	.byte	'APPLICATION_RESTARTING',0,1,13
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,18,174,2,92
	.word	7896
	.byte	26
	.byte	'void',0,3
	.word	8008
	.byte	27,1,1,28
	.word	133
	.byte	28
	.word	8014
	.byte	0,3
	.word	8019
	.byte	23
	.byte	'Os_FunctionEntryType',0,18,183,2,16
	.word	8033
	.byte	25
	.byte	'Os_MeterInfoType_s',0,18,193,2,16,48,9
	.byte	'elapsed',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'previous',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'max',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'cumulative',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'stackbase',0
	.word	7345
	.byte	8,2,35,16,9
	.byte	'stackusage',0
	.word	7345
	.byte	8,2,35,24,9
	.byte	'stackmax',0
	.word	7345
	.byte	8,2,35,32,9
	.byte	'stackbudget',0
	.word	7345
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,18,202,2,3
	.word	8068
	.byte	3
	.word	8068
	.byte	23
	.byte	'Os_MeterInfoRefType',0,18,203,2,50
	.word	8266
	.byte	23
	.byte	'EventMaskType',0,18,206,2,15
	.word	133
	.byte	23
	.byte	'Os_imaskType',0,18,211,2,16
	.word	802
	.byte	25
	.byte	'Os_ISRDynType_s',0,18,213,2,16,48,9
	.byte	'meter',0
	.word	8068
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,18,215,2,3
	.word	8345
	.byte	3
	.word	8345
	.byte	14
	.word	8406
	.byte	25
	.byte	'Os_ISRType_s',0,18,216,2,16,24,9
	.byte	'entry_function',0
	.word	7438
	.byte	4,2,35,0,9
	.byte	'dynamic',0
	.word	8411
	.byte	4,2,35,4,9
	.byte	'imask',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'stackbudget',0
	.word	7345
	.byte	8,2,35,12,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,18,223,2,3
	.word	8416
	.byte	3
	.word	7430
	.byte	14
	.word	8416
	.byte	3
	.word	8575
	.byte	23
	.byte	'ISRType',0,18,224,2,46
	.word	8580
	.byte	23
	.byte	'Os_bitmask',0,18,239,2,22
	.word	802
	.byte	23
	.byte	'Os_pset0Type',0,18,240,2,20
	.word	802
	.byte	23
	.byte	'Os_pset1Type',0,18,241,2,20
	.word	802
	.byte	23
	.byte	'Os_pset2Type',0,18,242,2,20
	.word	802
	.byte	29,18,243,2,9,4,9
	.byte	'p0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'p1',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'p2',0
	.word	802
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,18,247,2,3
	.word	8688
	.byte	29,18,249,2,9,4,9
	.byte	't0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	't1',0
	.word	802
	.byte	4,2,35,0,9
	.byte	't2',0
	.word	802
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,18,253,2,3
	.word	8752
	.byte	23
	.byte	'Os_ActivationCountType',0,18,254,2,23
	.word	133
	.byte	25
	.byte	'Os_TaskDynType_s',0,18,128,3,16,120,9
	.byte	'terminate_jump_buf',0
	.word	7294
	.byte	68,2,35,0,9
	.byte	'meter',0
	.word	8068
	.byte	48,2,35,68,9
	.byte	'activation_count',0
	.word	133
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,18,132,3,3
	.word	8850
	.byte	10,68
	.word	7263
	.byte	11,0,0,3
	.word	8850
	.byte	14
	.word	8976
	.byte	25
	.byte	'Os_TaskType_s',0,18,134,3,16,40,9
	.byte	'dynamic',0
	.word	8981
	.byte	4,2,35,0,9
	.byte	'entry_function',0
	.word	7438
	.byte	4,2,35,4,9
	.byte	'pset',0
	.word	8688
	.byte	4,2,35,8,9
	.byte	'base_tpmask',0
	.word	8752
	.byte	4,2,35,12,9
	.byte	'tpmask',0
	.word	8752
	.byte	4,2,35,16,9
	.byte	'core_id',0
	.word	463
	.byte	2,2,35,20,9
	.byte	'index',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'stackbudget',0
	.word	7345
	.byte	8,2,35,28,9
	.byte	'activation_count',0
	.word	133
	.byte	1,2,35,36,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,37,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,18,146,3,3
	.word	8986
	.byte	14
	.word	8986
	.byte	3
	.word	9236
	.byte	23
	.byte	'TaskType',0,18,147,3,47
	.word	9241
	.byte	30
	.byte	'Os_TaskStateType',0,18,155,3,6,4,13
	.byte	'SUSPENDED',0,0,13
	.byte	'READY',0,1,13
	.byte	'WAITING',0,2,13
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,18,156,3,31
	.word	9264
	.byte	29,18,167,3,3,4,9
	.byte	'tpmask',0
	.word	8752
	.byte	4,2,35,0,0,25
	.byte	'Os_ResourceDynType_s',0,18,166,3,16,4,9
	.byte	'saved_priority',0
	.word	9351
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,18,170,3,3
	.word	9374
	.byte	3
	.word	9374
	.byte	14
	.word	9454
	.byte	25
	.byte	'Os_ResourceType_s',0,18,171,3,16,12,9
	.byte	'dynamic',0
	.word	9459
	.byte	4,2,35,0,9
	.byte	'tpmask',0
	.word	8752
	.byte	4,2,35,4,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,18,175,3,3
	.word	9464
	.byte	8,18,181,3,9,12,9
	.byte	'maxallowedvalue',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'ticksperbase',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'mincycle',0
	.word	802
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,18,185,3,3
	.word	9563
	.byte	8,18,206,3,9,8,9
	.byte	'Running',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'Pending',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'Delay',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,18,210,3,3
	.word	9658
	.byte	31
	.word	133
	.byte	1,1,3
	.word	9744
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,18,217,3,22
	.word	9751
	.byte	25
	.byte	's_swd',0,18,222,3,12,4,9
	.byte	'count',0
	.word	802
	.byte	4,2,35,0,0,29,18,221,3,3,4,9
	.byte	'sw',0
	.word	9787
	.byte	4,2,35,0,0,25
	.byte	'Os_CounterDynType_s',0,18,220,3,16,4,9
	.byte	'type_dependent',0
	.word	9815
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,18,226,3,3
	.word	9834
	.byte	3
	.word	9834
	.byte	14
	.word	9912
	.byte	25
	.byte	'Os_CounterType_s',0,18,227,3,16,28,9
	.byte	'dynamic',0
	.word	9917
	.byte	4,2,35,0,9
	.byte	'advincr',0
	.word	9756
	.byte	4,2,35,4,9
	.byte	'base',0
	.word	9563
	.byte	12,2,35,8,9
	.byte	'core',0
	.word	8014
	.byte	4,2,35,20,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,24,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,18,234,3,3
	.word	9922
	.byte	3
	.word	9744
	.byte	14
	.word	9922
	.byte	3
	.word	10074
	.byte	23
	.byte	'CounterType',0,18,235,3,52
	.word	10079
	.byte	30
	.byte	'Os_ScheduleTableStatusType',0,18,240,3,6,4,13
	.byte	'SCHEDULETABLE_STOPPED',0,0,13
	.byte	'SCHEDULETABLE_NEXT',0,1,13
	.byte	'SCHEDULETABLE_WAITING',0,2,13
	.byte	'SCHEDULETABLE_RUNNING',0,3,13
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,18,241,3,41
	.word	10105
	.byte	14
	.word	.L422-.L99
	.byte	3
	.word	10305
	.byte	23
	.byte	'ScheduleTableType',0,18,128,4,58
	.word	10310
	.byte	25
	.byte	'Os_ScheduleTableDynType_s',0,18,130,4,16,16,9
	.byte	'match',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'next',0
	.word	10315
	.byte	4,2,35,4,9
	.byte	'state',0
	.word	10105
	.byte	4,2,35,8,9
	.byte	'config',0
	.word	463
	.byte	2,2,35,12,0,3
	.word	10342
	.byte	14
	.word	10435
.L422:
	.byte	25
	.byte	'Os_ScheduleTableType_s',0,18,247,3,16,16,9
	.byte	'dynamic',0
	.word	10440
	.byte	4,2,35,0,9
	.byte	'counter',0
	.word	10084
	.byte	4,2,35,4,9
	.byte	'repeat',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'config',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'initial',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'access',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'application',0
	.word	133
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,18,255,3,3
	.word	10445
	.byte	14
	.word	10445
	.byte	3
	.word	10625
	.byte	14
	.word	9922
	.byte	3
	.word	10635
	.byte	32
	.word	7738
	.byte	32
	.word	8688
	.byte	32
	.word	8585
	.byte	32
	.word	9246
	.byte	32
	.word	8752
	.byte	32
	.word	133
	.byte	32
	.word	9246
	.byte	25
	.byte	'Os_ControlledCoreType_s',0,18,251,6,16,112,9
	.byte	'TrapInfo',0
	.word	7174
	.byte	8,2,35,0,9
	.byte	'lock_taskaccess',0
	.word	10645
	.byte	4,2,35,8,9
	.byte	'ReadyTasks',0
	.word	10650
	.byte	4,2,35,12,9
	.byte	'RunningISR',0
	.word	10655
	.byte	4,2,35,16,9
	.byte	'RunningTask',0
	.word	10660
	.byte	4,2,35,20,9
	.byte	'RunningTPMask',0
	.word	10665
	.byte	4,2,35,24,9
	.byte	'CurrentMeteredObject',0
	.word	8271
	.byte	4,2,35,28,9
	.byte	'IdleMeter',0
	.word	8068
	.byte	48,2,35,32,9
	.byte	'AppAccess',0
	.word	133
	.byte	1,2,35,80,9
	.byte	'AppOverride',0
	.word	10670
	.byte	1,2,35,81,9
	.byte	'GetStackValueAdjust',0
	.word	7345
	.byte	8,2,35,84,9
	.byte	'InErrorHook',0
	.word	133
	.byte	1,2,35,92,9
	.byte	'ChainTaskRef',0
	.word	10675
	.byte	4,2,35,96,9
	.byte	'GetStackUsageAdjust',0
	.word	7345
	.byte	8,2,35,100,9
	.byte	'InProtectionHook',0
	.word	133
	.byte	1,2,35,108,9
	.byte	'CoreIsActive',0
	.word	133
	.byte	1,2,35,109,9
	.byte	'InShutdownHook',0
	.word	133
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,18,141,7,3
	.word	10680
	.byte	3
	.word	802
	.byte	14
	.word	8416
	.byte	3
	.word	11136
	.byte	14
	.word	8986
	.byte	3
	.word	11146
	.byte	3
	.word	8068
	.byte	25
	.byte	'Os_AnyCoreType_s',0,18,151,7,16,96,9
	.byte	'DisableAllImask',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'SuspendAllImask',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'SuspendOSImask',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'DisableAllCount',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'SuspendAllCount',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'SuspendOSCount',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'RestartJumpBuf',0
	.word	7294
	.byte	68,2,35,24,9
	.byte	'Restartable',0
	.word	133
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,18,160,7,3
	.word	11161
	.byte	2
	.byte	'int',0,4,5,23
	.byte	'signed_int',0,19,114,20
	.word	11402
	.byte	23
	.byte	'unsigned_int',0,19,116,22
	.word	802
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,20,219,3,16
	.word	802
	.byte	25
	.byte	'Can_TxHwObjectConfigType',0,20,231,3,16,8,9
	.byte	'MsgObjId',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'HwControllerId',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'TxObjPriorityClass',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,20,252,3,3
	.word	11485
	.byte	25
	.byte	'Can_RxHwObjectConfigType',0,20,129,4,16,12,9
	.byte	'MaskRef',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'MsgId',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'MsgObjId',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'HwControllerId',0
	.word	133
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,20,147,4,3
	.word	11621
	.byte	10,4
	.word	133
	.byte	11,3,0,25
	.byte	'Can_ControllerMOMapConfigType',0,20,181,4,16,4,9
	.byte	'ControllerMOMap',0
	.word	11761
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,20,184,4,3
	.word	11770
	.byte	25
	.byte	'Can_NPCRValueType',0,20,188,4,16,2,9
	.byte	'Can_NPCRValue',0
	.word	463
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,20,191,4,3
	.word	11871
	.byte	25
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,20,194,4,16,8,9
	.byte	'CanControllerBaudrate',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CanControllerBaudrateCfg',0
	.word	463
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,20,198,4,3
	.word	11946
	.byte	14
	.word	11946
	.byte	3
	.word	12111
	.byte	25
	.byte	'Can_BaudrateConfigPtrType',0,20,201,4,16,4,9
	.byte	'Can_kBaudrateConfigPtr',0
	.word	12116
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,20,204,4,3
	.word	12121
	.byte	25
	.byte	'Can_EventHandlingType',0,20,226,4,16,4,9
	.byte	'CanEventType',0
	.word	11761
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,20,229,4,3
	.word	12221
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,21,130,1,15
	.word	133
	.byte	23
	.byte	'Rte_TransformerClass',0,21,131,1,15
	.word	133
	.byte	8,21,168,1,9,12,9
	.byte	'in',0
	.word	8014
	.byte	4,2,35,0,9
	.byte	'out',0
	.word	8014
	.byte	4,2,35,4,9
	.byte	'used',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'lost_data',0
	.word	133
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,21,173,1,3
	.word	12367
	.byte	12,21,175,1,9,4,13
	.byte	'RTE_DRA',0,0,13
	.byte	'RTE_WOWP',0,1,13
	.byte	'RTE_TASK',0,2,13
	.byte	'RTE_ARE',0,3,13
	.byte	'RTE_EV',0,4,13
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,21,182,1,3
	.word	12454
	.byte	3
	.word	12367
	.byte	25
	.byte	'Rte_QCmnType',0,21,184,1,16,24,9
	.byte	'dynamic',0
	.word	12552
	.byte	4,2,35,0,9
	.byte	'copy',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'queue_size',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'element_size',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'buffer_start',0
	.word	8014
	.byte	4,2,35,12,9
	.byte	'buffer_end',0
	.word	8014
	.byte	4,2,35,16,9
	.byte	'notification_type',0
	.word	12454
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,21,192,1,3
	.word	12557
	.byte	23
	.byte	'Rte_AlarmRefType',0,21,224,1,32
	.word	802
	.byte	23
	.byte	'Rte_AlarmIndexType',0,21,226,1,32
	.word	463
	.byte	10,128,8
	.word	133
	.byte	11,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,22,50,15
	.word	12795
	.byte	23
	.byte	'CanIf_u32_impl',0,22,69,16
	.word	802
	.byte	23
	.byte	'CanIf_u16_impl',0,22,71,16
	.word	463
	.byte	23
	.byte	'CanIf_u8_impl',0,22,73,15
	.word	133
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,22,88,15
	.word	133
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,22,90,15
	.word	133
	.byte	8,22,92,9,2,9
	.byte	'DeviceMode',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'ChannelMode',0
	.word	133
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,22,95,3
	.word	12986
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,22,100,15
	.word	133
	.byte	23
	.byte	'CanSM_boolean_Impl',0,22,120,15
	.word	133
	.byte	23
	.byte	'CanSM_u8_Impl',0,22,123,15
	.word	133
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,22,128,1,15
	.word	133
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,22,132,1,15
	.word	133
	.byte	23
	.byte	'CanSM_u16_Impl',0,22,136,1,16
	.word	463
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,22,138,1,15
	.word	133
	.byte	8,22,140,1,9,4,9
	.byte	'cntTick_u16',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'stTimer',0
	.word	133
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,22,143,1,3
	.word	13327
	.byte	23
	.byte	'Com_impl_u16',0,22,154,1,16
	.word	463
	.byte	23
	.byte	'Com_impl_u8',0,22,157,1,15
	.word	133
	.byte	23
	.byte	'ComM_uint32_Impl',0,22,173,1,16
	.word	802
	.byte	23
	.byte	'ComM_uint16_Impl',0,22,175,1,16
	.word	463
	.byte	23
	.byte	'ComM_uint8_Impl',0,22,177,1,15
	.word	133
	.byte	23
	.byte	'ComM_bool_Impl',0,22,179,1,15
	.word	133
	.byte	8,22,181,1,9,24,9
	.byte	'ChannelState_e',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'LightTimeoutCtr_u32',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'ChannelMode_u8',0
	.word	133
	.byte	1,2,35,10,9
	.byte	'BusSmMode_u8',0
	.word	133
	.byte	1,2,35,11,9
	.byte	'UserRequestCtr_u8',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'PassiveRequestState_u8',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'PncRequestCtr_u8',0
	.word	133
	.byte	1,2,35,14,9
	.byte	'InhibitionReqStatus_u8',0
	.word	133
	.byte	1,2,35,15,9
	.byte	'NmNetworkRequestStatus_b',0
	.word	133
	.byte	1,2,35,16,9
	.byte	'DiagnosticRequestState_b',0
	.word	133
	.byte	1,2,35,17,9
	.byte	'CommunicationAllowed_b',0
	.word	133
	.byte	1,2,35,18,9
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	133
	.byte	1,2,35,19,9
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'NmNetworkModeStatus_b',0
	.word	133
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,22,197,1,3
	.word	13559
	.byte	8,22,206,1,9,10,9
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'LimitToNoComCtr_u16',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'RequestedUserMode_t',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'IndicatedUserMode_t',0
	.word	133
	.byte	1,2,35,5,9
	.byte	'numChannelsInFullCom_u8',0
	.word	133
	.byte	1,2,35,6,9
	.byte	'numChannelsInSilentCom_u8',0
	.word	133
	.byte	1,2,35,7,9
	.byte	'numChannelsInNoCom_u8',0
	.word	133
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,22,214,1,3
	.word	14063
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,22,252,1,15
	.word	133
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	22,138,2,15
	.word	133
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,22,146,2,15
	.word	133
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,22,150,2,15
	.word	133
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,22,154,2,15
	.word	133
	.byte	23
	.byte	'EcuM_ShutdownCauseType',0,22,191,2,15
	.word	133
	.byte	23
	.byte	'EcuM_ShutdownModeType',0,22,195,2,16
	.word	463
	.byte	23
	.byte	'EcuM_ShutdownTargetType',0,22,197,2,15
	.word	133
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,22,243,3,34
	.word	12806
	.byte	10,128,8
	.word	133
	.byte	11,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,22,246,3,34
	.word	12806
	.byte	12,23,186,1,10,4,13
	.byte	'NM_BUS_TYPE_CAN',0,0,0,23
	.byte	'Nm_BusType',0,23,189,1,3
	.word	14977
	.byte	23
	.byte	'Nm_TimerType',0,24,73,16
	.word	802
	.byte	23
	.byte	'Rte_TaskRefType',0,25,184,1,32
	.word	9246
	.byte	23
	.byte	'Rte_EventRefType',0,25,185,1,32
	.word	133
	.byte	23
	.byte	'Rte_EventType',0,25,186,1,32
	.word	802
	.byte	23
	.byte	'Rte_REActCounterType',0,25,252,1,15
	.word	133
	.byte	3
	.word	133
	.byte	23
	.byte	'Rte_REActCounterRefType',0,25,253,1,58
	.word	15147
	.byte	8,25,255,1,9,8,9
	.byte	'task',0
	.word	15043
	.byte	4,2,35,0,9
	.byte	'acnt',0
	.word	15152
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,25,130,2,3
	.word	15185
	.byte	14
	.word	8986
	.byte	3
	.word	15249
	.byte	3
	.word	133
	.byte	14
	.word	15185
	.byte	3
	.word	15264
	.byte	23
	.byte	'Rte_REContainerRefType',0,25,132,2,60
	.word	15269
	.byte	23
	.byte	'Rte_MSICounterType',0,25,149,2,16
	.word	463
	.byte	3
	.word	463
	.byte	23
	.byte	'Rte_MSICounterRefType',0,25,150,2,56
	.word	15334
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,25,152,2,17
	.word	133
	.byte	3
	.word	133
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,25,153,2,60
	.word	15402
	.byte	8,25,163,2,9,24,9
	.byte	'counter',0
	.word	15339
	.byte	4,2,35,0,9
	.byte	'incCounter',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'pending',0
	.word	15407
	.byte	4,2,35,8,9
	.byte	'osTask',0
	.word	15043
	.byte	4,2,35,12,9
	.byte	'acnt',0
	.word	15152
	.byte	4,2,35,16,9
	.byte	'osEvent',0
	.word	133
	.byte	1,2,35,20,9
	.byte	'MSIInit',0
	.word	463
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,25,172,2,3
	.word	15442
	.byte	3
	.word	463
	.byte	3
	.word	133
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,25,179,2,16
	.word	133
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,25,180,2,16
	.word	133
	.byte	8,25,182,2,9,4,9
	.byte	'pending',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'count',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'firstWaitingTask',0
	.word	133
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,25,186,2,3
	.word	15660
	.byte	3
	.word	15660
	.byte	8,25,226,2,9,12,9
	.byte	'event_id',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'wd',0
	.word	15752
	.byte	4,2,35,4,9
	.byte	'timeout',0
	.word	802
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,25,230,2,3
	.word	15757
	.byte	14
	.word	15757
	.byte	3
	.word	15846
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,25,232,2,66
	.word	15851
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,25,234,2,29
	.word	15185
	.byte	25
	.byte	'Rte_QTaskType',0,25,243,2,16,28,9
	.byte	'cmn',0
	.word	12557
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	15043
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,25,246,2,3
	.word	15928
	.byte	25
	.byte	'Rte_QREType',0,25,250,2,16,28,9
	.byte	'cmn',0
	.word	12557
	.byte	24,2,35,0,9
	.byte	're',0
	.word	15274
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,25,253,2,3
	.word	15999
	.byte	14
	.word	15185
	.byte	3
	.word	16064
	.byte	25
	.byte	'Rte_QWWPType',0,25,129,3,16,28,9
	.byte	'cmn',0
	.word	12557
	.byte	24,2,35,0,9
	.byte	'wwp',0
	.word	15856
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,25,132,3,3
	.word	16074
	.byte	14
	.word	15757
	.byte	3
	.word	16142
	.byte	25
	.byte	'Rte_QEvType',0,25,136,3,16,36,9
	.byte	'cmn',0
	.word	12557
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	15043
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	15152
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,25,141,3,3
	.word	16152
	.byte	25
	.byte	'Rte_QMSIType',0,25,145,3,16,48,9
	.byte	'cmn',0
	.word	12557
	.byte	24,2,35,0,9
	.byte	'task',0
	.word	15043
	.byte	4,2,35,24,9
	.byte	'mask',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'acnt',0
	.word	15152
	.byte	4,2,35,32,9
	.byte	'msiCounter',0
	.word	15339
	.byte	4,2,35,36,9
	.byte	'msiPending',0
	.word	15407
	.byte	4,2,35,40,9
	.byte	'msiLimit',0
	.word	463
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,25,153,3,3
	.word	16247
	.byte	23
	.byte	'CanNm_NetworkStateType',0,6,204,1,3
	.word	1436
	.byte	23
	.byte	'CanNm_RamType',0,6,247,1,3
	.word	1592
	.byte	33
	.word	2337
	.byte	34,0,14
	.word	16457
	.byte	35
	.byte	'CanNm_ChannelConfigData_cs',0,6,134,2,70
	.word	16464
	.byte	1,1,33
	.word	1592
	.byte	34,0,35
	.byte	'CanNm_RamData_s',0,6,160,2,70
	.word	16507
	.byte	1,1,25
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,26,45,16,4,36
	.byte	'EN0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'EN1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'EN2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'EN3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'EN4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'EN5',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'EN6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'EN7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'EN8',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'EN9',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'EN10',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'EN11',0,1
	.word	133
	.byte	1,4,2,35,1,36
	.byte	'EN12',0,1
	.word	133
	.byte	1,3,2,35,1,36
	.byte	'EN13',0,1
	.word	133
	.byte	1,2,2,35,1,36
	.byte	'EN14',0,1
	.word	133
	.byte	1,1,2,35,1,36
	.byte	'EN15',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'EN16',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'EN17',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'EN18',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'EN19',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'EN20',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'EN21',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'EN22',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'EN23',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'EN24',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'EN25',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'EN26',0,1
	.word	133
	.byte	1,5,2,35,3,36
	.byte	'EN27',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'EN28',0,1
	.word	133
	.byte	1,3,2,35,3,36
	.byte	'EN29',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'EN30',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'EN31',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_ACCEN0_Bits',0,26,79,3
	.word	16541
	.byte	25
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,26,82,16,4,36
	.byte	'reserved_0',0,4
	.word	802
	.byte	32,0,2,35,0,0,23
	.byte	'Ifx_SCU_ACCEN1_Bits',0,26,85,3
	.word	17098
	.byte	25
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,26,88,16,4,36
	.byte	'STM0DIS',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'STM1DIS',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'STM2DIS',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'reserved_3',0,4
	.word	802
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,26,94,3
	.word	17175
	.byte	25
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,26,97,16,4,36
	.byte	'BAUD1DIV',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'BAUD2DIV',0,1
	.word	133
	.byte	4,0,2,35,0,36
	.byte	'SRIDIV',0,1
	.word	133
	.byte	4,4,2,35,1,36
	.byte	'LPDIV',0,1
	.word	133
	.byte	4,0,2,35,1,36
	.byte	'SPBDIV',0,1
	.word	133
	.byte	4,4,2,35,2,36
	.byte	'FSI2DIV',0,1
	.word	133
	.byte	2,2,2,35,2,36
	.byte	'reserved_22',0,1
	.word	133
	.byte	2,0,2,35,2,36
	.byte	'FSIDIV',0,1
	.word	133
	.byte	2,6,2,35,3,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	2,4,2,35,3,36
	.byte	'CLKSEL',0,1
	.word	133
	.byte	2,2,2,35,3,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON0_Bits',0,26,111,3
	.word	17311
	.byte	25
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,26,114,16,4,36
	.byte	'CANDIV',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'ERAYDIV',0,1
	.word	133
	.byte	4,0,2,35,0,36
	.byte	'STMDIV',0,1
	.word	133
	.byte	4,4,2,35,1,36
	.byte	'GTMDIV',0,1
	.word	133
	.byte	4,0,2,35,1,36
	.byte	'ETHDIV',0,1
	.word	133
	.byte	4,4,2,35,2,36
	.byte	'ASCLINFDIV',0,1
	.word	133
	.byte	4,0,2,35,2,36
	.byte	'ASCLINSDIV',0,1
	.word	133
	.byte	4,4,2,35,3,36
	.byte	'INSEL',0,1
	.word	133
	.byte	2,2,2,35,3,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON1_Bits',0,26,126,3
	.word	17591
	.byte	25
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,26,129,1,16,4,36
	.byte	'BBBDIV',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	26,2,2,35,0,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON2_Bits',0,26,135,1,3
	.word	17829
	.byte	25
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,26,138,1,16,4,36
	.byte	'PLLDIV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'PLLSEL',0,1
	.word	133
	.byte	2,0,2,35,0,36
	.byte	'PLLERAYDIV',0,1
	.word	133
	.byte	6,2,2,35,1,36
	.byte	'PLLERAYSEL',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'SRIDIV',0,1
	.word	133
	.byte	6,2,2,35,2,36
	.byte	'SRISEL',0,1
	.word	133
	.byte	2,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON3_Bits',0,26,150,1,3
	.word	17957
	.byte	25
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,26,153,1,16,4,36
	.byte	'SPBDIV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'SPBSEL',0,1
	.word	133
	.byte	2,0,2,35,0,36
	.byte	'GTMDIV',0,1
	.word	133
	.byte	6,2,2,35,1,36
	.byte	'GTMSEL',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'STMDIV',0,1
	.word	133
	.byte	6,2,2,35,2,36
	.byte	'STMSEL',0,1
	.word	133
	.byte	2,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON4_Bits',0,26,165,1,3
	.word	18200
	.byte	25
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,26,168,1,16,4,36
	.byte	'MAXDIV',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	26,2,2,35,0,36
	.byte	'UP',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CCUCON5_Bits',0,26,174,1,3
	.word	18435
	.byte	25
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,26,177,1,16,4,36
	.byte	'CPU0DIV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON6_Bits',0,26,181,1,3
	.word	18563
	.byte	25
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,26,184,1,16,4,36
	.byte	'CPU1DIV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON7_Bits',0,26,188,1,3
	.word	18663
	.byte	25
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,26,191,1,16,4,36
	.byte	'CPU2DIV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON8_Bits',0,26,195,1,3
	.word	18763
	.byte	25
	.byte	'_Ifx_SCU_CHIPID_Bits',0,26,198,1,16,4,36
	.byte	'CHREV',0,1
	.word	133
	.byte	6,2,2,35,0,36
	.byte	'CHTEC',0,1
	.word	133
	.byte	2,0,2,35,0,36
	.byte	'CHID',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'EEA',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'UCODE',0,1
	.word	133
	.byte	7,0,2,35,2,36
	.byte	'FSIZE',0,1
	.word	133
	.byte	4,4,2,35,3,36
	.byte	'SP',0,1
	.word	133
	.byte	2,2,2,35,3,36
	.byte	'SEC',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_CHIPID_Bits',0,26,209,1,3
	.word	18863
	.byte	25
	.byte	'_Ifx_SCU_DTSCON_Bits',0,26,212,1,16,4,36
	.byte	'PWD',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'START',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,36
	.byte	'CAL',0,4
	.word	802
	.byte	22,6,2,35,0,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	5,1,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_DTSCON_Bits',0,26,220,1,3
	.word	19071
	.byte	25
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,26,223,1,16,4,36
	.byte	'LOWER',0,2
	.word	463
	.byte	10,6,2,35,0,36
	.byte	'reserved_10',0,1
	.word	133
	.byte	5,1,2,35,1,36
	.byte	'LLU',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'UPPER',0,2
	.word	463
	.byte	10,6,2,35,2,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	4,2,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'UOF',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_DTSLIM_Bits',0,26,232,1,3
	.word	19236
	.byte	25
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,26,235,1,16,4,36
	.byte	'RESULT',0,2
	.word	463
	.byte	10,6,2,35,0,36
	.byte	'reserved_10',0,1
	.word	133
	.byte	4,2,2,35,1,36
	.byte	'RDY',0,1
	.word	133
	.byte	1,1,2,35,1,36
	.byte	'BUSY',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,26,242,1,3
	.word	19419
	.byte	25
	.byte	'_Ifx_SCU_EICR_Bits',0,26,245,1,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'EXIS0',0,1
	.word	133
	.byte	3,1,2,35,0,36
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'FEN0',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'REN0',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'LDEN0',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'EIEN0',0,1
	.word	133
	.byte	1,4,2,35,1,36
	.byte	'INP0',0,1
	.word	133
	.byte	3,1,2,35,1,36
	.byte	'reserved_15',0,4
	.word	802
	.byte	5,12,2,35,0,36
	.byte	'EXIS1',0,1
	.word	133
	.byte	3,1,2,35,2,36
	.byte	'reserved_23',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'FEN1',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'REN1',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'LDEN1',0,1
	.word	133
	.byte	1,5,2,35,3,36
	.byte	'EIEN1',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'INP1',0,1
	.word	133
	.byte	3,1,2,35,3,36
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EICR_Bits',0,26,136,2,3
	.word	19573
	.byte	25
	.byte	'_Ifx_SCU_EIFR_Bits',0,26,139,2,16,4,36
	.byte	'INTF0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'INTF1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'INTF2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'INTF3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'INTF4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'INTF5',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'INTF6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'INTF7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_SCU_EIFR_Bits',0,26,150,2,3
	.word	19937
	.byte	25
	.byte	'_Ifx_SCU_EMSR_Bits',0,26,153,2,16,4,36
	.byte	'POL',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'MODE',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'ENON',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'PSEL',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,2
	.word	463
	.byte	12,0,2,35,0,36
	.byte	'EMSF',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'SEMSF',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'reserved_18',0,1
	.word	133
	.byte	6,0,2,35,2,36
	.byte	'EMSFM',0,1
	.word	133
	.byte	2,6,2,35,3,36
	.byte	'SEMSFM',0,1
	.word	133
	.byte	2,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_EMSR_Bits',0,26,166,2,3
	.word	20148
	.byte	25
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,26,169,2,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	7,1,2,35,0,36
	.byte	'EDCON',0,2
	.word	463
	.byte	2,7,2,35,0,36
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_SCU_ESRCFG_Bits',0,26,174,2,3
	.word	20400
	.byte	25
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,26,177,2,16,4,36
	.byte	'ARI',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ARC',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_ESROCFG_Bits',0,26,182,2,3
	.word	20518
	.byte	25
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,26,185,2,16,4,36
	.byte	'reserved_0',0,4
	.word	802
	.byte	28,4,2,35,0,36
	.byte	'EVR13OFF',0,1
	.word	133
	.byte	1,3,2,35,3,36
	.byte	'BPEVR13OFF',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVR13CON_Bits',0,26,192,2,3
	.word	20629
	.byte	25
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,26,195,2,16,4,36
	.byte	'reserved_0',0,4
	.word	802
	.byte	28,4,2,35,0,36
	.byte	'EVR33OFF',0,1
	.word	133
	.byte	1,3,2,35,3,36
	.byte	'BPEVR33OFF',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVR33CON_Bits',0,26,202,2,3
	.word	20792
	.byte	25
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,26,205,2,16,4,36
	.byte	'ADC13V',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'ADC33V',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'ADCSWDV',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'VAL',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,26,212,2,3
	.word	20955
	.byte	25
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,26,215,2,16,4,36
	.byte	'DVS13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'DVS33TRIM',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'VAL',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,26,222,2,3
	.word	21113
	.byte	25
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,26,225,2,16,4,36
	.byte	'EVR13OVMOD',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,36
	.byte	'EVR13UVMOD',0,1
	.word	133
	.byte	2,2,2,35,0,36
	.byte	'reserved_6',0,1
	.word	133
	.byte	2,0,2,35,0,36
	.byte	'EVR33OVMOD',0,1
	.word	133
	.byte	2,6,2,35,1,36
	.byte	'reserved_10',0,1
	.word	133
	.byte	2,4,2,35,1,36
	.byte	'EVR33UVMOD',0,1
	.word	133
	.byte	2,2,2,35,1,36
	.byte	'reserved_14',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'SWDOVMOD',0,1
	.word	133
	.byte	2,6,2,35,2,36
	.byte	'reserved_18',0,1
	.word	133
	.byte	2,4,2,35,2,36
	.byte	'SWDUVMOD',0,1
	.word	133
	.byte	2,2,2,35,2,36
	.byte	'reserved_22',0,2
	.word	463
	.byte	8,2,2,35,2,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,26,241,2,3
	.word	21278
	.byte	25
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,26,244,2,16,4,36
	.byte	'EVR13OVVAL',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'EVR33OVVAL',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'SWDOVVAL',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	6,2,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVROVMON_Bits',0,26,252,2,3
	.word	21646
	.byte	25
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,26,255,2,16,4,36
	.byte	'RST13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'reserved_8',0,4
	.word	802
	.byte	16,8,2,35,0,36
	.byte	'RST13OFF',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'BPRST13OFF',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'RST33OFF',0,1
	.word	133
	.byte	1,5,2,35,3,36
	.byte	'BPRST33OFF',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'RSTSWDOFF',0,1
	.word	133
	.byte	1,3,2,35,3,36
	.byte	'BPRSTSWDOFF',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,26,139,3,3
	.word	21825
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,26,142,3,16,4,36
	.byte	'SD5P',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SD5I',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'SD5D',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,26,149,3,3
	.word	22090
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,26,152,3,16,4,36
	.byte	'SD33P',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SD33I',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'SD33D',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,26,159,3,3
	.word	22243
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,26,162,3,16,4,36
	.byte	'CT5REG0',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'CT5REG1',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'CT5REG2',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,26,169,3,3
	.word	22399
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,26,172,3,16,4,36
	.byte	'CT5REG3',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'CT5REG4',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	15,1,2,35,2,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,26,178,3,3
	.word	22561
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,26,181,3,16,4,36
	.byte	'CT33REG0',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'CT33REG1',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'CT33REG2',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,26,188,3,3
	.word	22704
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,26,191,3,16,4,36
	.byte	'CT33REG3',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'CT33REG4',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	15,1,2,35,2,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,26,197,3,3
	.word	22869
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,26,200,3,16,4,36
	.byte	'SDFREQSPRD',0,2
	.word	463
	.byte	16,0,2,35,0,36
	.byte	'SDFREQ',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'SDSTEP',0,1
	.word	133
	.byte	4,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	2,2,2,35,3,36
	.byte	'SDSAMPLE',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,26,208,3,3
	.word	23014
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,26,211,3,16,4,36
	.byte	'DRVP',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SDMINMAXDC',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'DRVN',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'SDLUT',0,1
	.word	133
	.byte	6,2,2,35,3,36
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,26,219,3,3
	.word	23195
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,26,222,3,16,4,36
	.byte	'SDPWMPRE',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SDPID',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'SDVOKLVL',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,26,229,3,3
	.word	23369
	.byte	25
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,26,232,3,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SYNCDIV',0,1
	.word	133
	.byte	3,5,2,35,1,36
	.byte	'reserved_11',0,4
	.word	802
	.byte	20,1,2,35,0,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,26,238,3,3
	.word	23529
	.byte	25
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,26,241,3,16,4,36
	.byte	'EVR13',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'OV13',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'EVR33',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'OV33',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'OVSWD',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'UV13',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'UV33',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'UVSWD',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'EXTPASS13',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'EXTPASS33',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'BGPROK',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'reserved_11',0,4
	.word	802
	.byte	21,0,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,26,255,3,3
	.word	23673
	.byte	25
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,26,130,4,16,4,36
	.byte	'EVR13TRIM',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'SDVOUTSEL',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	14,2,2,35,2,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,26,137,4,3
	.word	23947
	.byte	25
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,26,140,4,16,4,36
	.byte	'EVR13UVVAL',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'EVR33UVVAL',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'SWDUVVAL',0,1
	.word	133
	.byte	8,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	6,2,2,35,3,36
	.byte	'SLCK',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,26,148,4,3
	.word	24102
	.byte	25
	.byte	'_Ifx_SCU_EXTCON_Bits',0,26,151,4,16,4,36
	.byte	'EN0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'SEL0',0,1
	.word	133
	.byte	4,2,2,35,0,36
	.byte	'reserved_6',0,2
	.word	463
	.byte	10,0,2,35,0,36
	.byte	'EN1',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'NSEL',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'SEL1',0,1
	.word	133
	.byte	4,2,2,35,2,36
	.byte	'reserved_22',0,1
	.word	133
	.byte	2,0,2,35,2,36
	.byte	'DIV1',0,1
	.word	133
	.byte	8,0,2,35,3,0,23
	.byte	'Ifx_SCU_EXTCON_Bits',0,26,162,4,3
	.word	24281
	.byte	25
	.byte	'_Ifx_SCU_FDR_Bits',0,26,165,4,16,4,36
	.byte	'STEP',0,2
	.word	463
	.byte	10,6,2,35,0,36
	.byte	'reserved_10',0,1
	.word	133
	.byte	4,2,2,35,1,36
	.byte	'DM',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'RESULT',0,2
	.word	463
	.byte	10,6,2,35,2,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	5,1,2,35,3,36
	.byte	'DISCLK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_FDR_Bits',0,26,173,4,3
	.word	24499
	.byte	25
	.byte	'_Ifx_SCU_FMR_Bits',0,26,176,4,16,4,36
	.byte	'FS0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'FS1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'FS2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'FS3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'FS4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'FS5',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'FS6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'FS7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'FC0',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'FC1',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'FC2',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'FC3',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'FC4',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'FC5',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'FC6',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'FC7',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	8,0,2,35,3,0,23
	.byte	'Ifx_SCU_FMR_Bits',0,26,196,4,3
	.word	24662
	.byte	25
	.byte	'_Ifx_SCU_ID_Bits',0,26,199,4,16,4,36
	.byte	'MODREV',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'MODTYPE',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'MODNUMBER',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_ID_Bits',0,26,204,4,3
	.word	24998
	.byte	25
	.byte	'_Ifx_SCU_IGCR_Bits',0,26,207,4,16,4,36
	.byte	'IPEN00',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'IPEN01',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'IPEN02',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'IPEN03',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'IPEN04',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'IPEN05',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'IPEN06',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'IPEN07',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,1
	.word	133
	.byte	5,3,2,35,1,36
	.byte	'GEEN0',0,1
	.word	133
	.byte	1,2,2,35,1,36
	.byte	'IGP0',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'IPEN10',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'IPEN11',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'IPEN12',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'IPEN13',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'IPEN14',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'IPEN15',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'IPEN16',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'IPEN17',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	5,3,2,35,3,36
	.byte	'GEEN1',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'IGP1',0,1
	.word	133
	.byte	2,0,2,35,3,0,23
	.byte	'Ifx_SCU_IGCR_Bits',0,26,231,4,3
	.word	25105
	.byte	25
	.byte	'_Ifx_SCU_IN_Bits',0,26,234,4,16,4,36
	.byte	'P0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'P1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_IN_Bits',0,26,239,4,3
	.word	25557
	.byte	25
	.byte	'_Ifx_SCU_IOCR_Bits',0,26,242,4,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	4,4,2,35,0,36
	.byte	'PC0',0,1
	.word	133
	.byte	4,0,2,35,0,36
	.byte	'reserved_8',0,1
	.word	133
	.byte	4,4,2,35,1,36
	.byte	'PC1',0,1
	.word	133
	.byte	4,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_IOCR_Bits',0,26,249,4,3
	.word	25656
	.byte	25
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,26,252,4,16,4,36
	.byte	'LBISTREQ',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'LBISTREQP',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'PATTERNS',0,2
	.word	463
	.byte	14,0,2,35,0,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,26,130,5,3
	.word	25806
	.byte	25
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,26,133,5,16,4,36
	.byte	'SEED',0,4
	.word	802
	.byte	23,9,2,35,0,36
	.byte	'reserved_23',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'SPLITSH',0,1
	.word	133
	.byte	3,5,2,35,3,36
	.byte	'BODY',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'LBISTFREQU',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,26,140,5,3
	.word	25955
	.byte	25
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,26,143,5,16,4,36
	.byte	'SIGNATURE',0,4
	.word	802
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,1
	.word	133
	.byte	7,1,2,35,3,36
	.byte	'LBISTDONE',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,26,148,5,3
	.word	26116
	.byte	25
	.byte	'_Ifx_SCU_LCLCON_Bits',0,26,151,5,16,4,36
	.byte	'reserved_0',0,2
	.word	463
	.byte	16,0,2,35,0,36
	.byte	'LS',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'reserved_17',0,2
	.word	463
	.byte	14,1,2,35,2,36
	.byte	'LSEN',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_LCLCON_Bits',0,26,157,5,3
	.word	26246
	.byte	25
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,26,160,5,16,4,36
	.byte	'LCLT0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'LCLT1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_LCLTEST_Bits',0,26,165,5,3
	.word	26378
	.byte	25
	.byte	'_Ifx_SCU_MANID_Bits',0,26,168,5,16,4,36
	.byte	'DEPT',0,1
	.word	133
	.byte	5,3,2,35,0,36
	.byte	'MANUF',0,2
	.word	463
	.byte	11,0,2,35,0,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_MANID_Bits',0,26,173,5,3
	.word	26493
	.byte	25
	.byte	'_Ifx_SCU_OMR_Bits',0,26,176,5,16,4,36
	.byte	'PS0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'PS1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,2
	.word	463
	.byte	14,0,2,35,0,36
	.byte	'PCL0',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'PCL1',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'reserved_18',0,2
	.word	463
	.byte	14,0,2,35,2,0,23
	.byte	'Ifx_SCU_OMR_Bits',0,26,184,5,3
	.word	26604
	.byte	25
	.byte	'_Ifx_SCU_OSCCON_Bits',0,26,187,5,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'PLLLV',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'OSCRES',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'GAINSEL',0,1
	.word	133
	.byte	2,3,2,35,0,36
	.byte	'MODE',0,1
	.word	133
	.byte	2,1,2,35,0,36
	.byte	'SHBY',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'PLLHV',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'reserved_9',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'X1D',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'X1DEN',0,1
	.word	133
	.byte	1,4,2,35,1,36
	.byte	'reserved_12',0,1
	.word	133
	.byte	4,0,2,35,1,36
	.byte	'OSCVAL',0,1
	.word	133
	.byte	5,3,2,35,2,36
	.byte	'reserved_21',0,1
	.word	133
	.byte	2,1,2,35,2,36
	.byte	'APREN',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'CAP0EN',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'CAP1EN',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'CAP2EN',0,1
	.word	133
	.byte	1,5,2,35,3,36
	.byte	'CAP3EN',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_OSCCON_Bits',0,26,208,5,3
	.word	26762
	.byte	25
	.byte	'_Ifx_SCU_OUT_Bits',0,26,211,5,16,4,36
	.byte	'P0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'P1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_OUT_Bits',0,26,216,5,3
	.word	27174
	.byte	25
	.byte	'_Ifx_SCU_OVCCON_Bits',0,26,219,5,16,4,36
	.byte	'CSEL0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'CSEL1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'CSEL2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'reserved_3',0,2
	.word	463
	.byte	13,0,2,35,0,36
	.byte	'OVSTRT',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'OVSTP',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'DCINVAL',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,36
	.byte	'OVCONF',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'POVCONF',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	6,0,2,35,3,0,23
	.byte	'Ifx_SCU_OVCCON_Bits',0,26,232,5,3
	.word	27275
	.byte	25
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,26,235,5,16,4,36
	.byte	'OVEN0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'OVEN1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'OVEN2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'reserved_3',0,4
	.word	802
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,26,241,5,3
	.word	27542
	.byte	25
	.byte	'_Ifx_SCU_PDISC_Bits',0,26,244,5,16,4,36
	.byte	'PDIS0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'PDIS1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_PDISC_Bits',0,26,249,5,3
	.word	27678
	.byte	25
	.byte	'_Ifx_SCU_PDR_Bits',0,26,252,5,16,4,36
	.byte	'PD0',0,1
	.word	133
	.byte	3,5,2,35,0,36
	.byte	'PL0',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'PD1',0,1
	.word	133
	.byte	3,1,2,35,0,36
	.byte	'PL1',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_SCU_PDR_Bits',0,26,131,6,3
	.word	27789
	.byte	25
	.byte	'_Ifx_SCU_PDRR_Bits',0,26,134,6,16,4,36
	.byte	'PDR0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'PDR1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'PDR2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'PDR3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'PDR4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'PDR5',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'PDR6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PDR7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_SCU_PDRR_Bits',0,26,145,6,3
	.word	27922
	.byte	25
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,26,148,6,16,4,36
	.byte	'VCOBYP',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'VCOPWD',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'MODEN',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'reserved_3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'SETFINDIS',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'CLRFINDIS',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'OSCDISCDIS',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'reserved_7',0,2
	.word	463
	.byte	2,7,2,35,0,36
	.byte	'NDIV',0,1
	.word	133
	.byte	7,0,2,35,1,36
	.byte	'PLLPWD',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'RESLD',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,36
	.byte	'PDIV',0,1
	.word	133
	.byte	4,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_PLLCON0_Bits',0,26,165,6,3
	.word	28125
	.byte	25
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,26,168,6,16,4,36
	.byte	'K2DIV',0,1
	.word	133
	.byte	7,1,2,35,0,36
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'K3DIV',0,1
	.word	133
	.byte	7,1,2,35,1,36
	.byte	'reserved_15',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'K1DIV',0,1
	.word	133
	.byte	7,1,2,35,2,36
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,23
	.byte	'Ifx_SCU_PLLCON1_Bits',0,26,176,6,3
	.word	28481
	.byte	25
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,26,179,6,16,4,36
	.byte	'MODCFG',0,2
	.word	463
	.byte	16,0,2,35,0,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_PLLCON2_Bits',0,26,183,6,3
	.word	28659
	.byte	25
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,26,186,6,16,4,36
	.byte	'VCOBYP',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'VCOPWD',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	2,4,2,35,0,36
	.byte	'SETFINDIS',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'CLRFINDIS',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'OSCDISCDIS',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'reserved_7',0,2
	.word	463
	.byte	2,7,2,35,0,36
	.byte	'NDIV',0,1
	.word	133
	.byte	5,2,2,35,1,36
	.byte	'reserved_14',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'PLLPWD',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'RESLD',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'reserved_19',0,1
	.word	133
	.byte	5,0,2,35,2,36
	.byte	'PDIV',0,1
	.word	133
	.byte	4,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,26,203,6,3
	.word	28759
	.byte	25
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,26,206,6,16,4,36
	.byte	'K2DIV',0,1
	.word	133
	.byte	7,1,2,35,0,36
	.byte	'reserved_7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'K3DIV',0,1
	.word	133
	.byte	4,4,2,35,1,36
	.byte	'reserved_12',0,1
	.word	133
	.byte	4,0,2,35,1,36
	.byte	'K1DIV',0,1
	.word	133
	.byte	7,1,2,35,2,36
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,23
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,26,214,6,3
	.word	29129
	.byte	25
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,26,217,6,16,4,36
	.byte	'VCOBYST',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'PWDSTAT',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'VCOLOCK',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'FINDIS',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'K1RDY',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'K2RDY',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'reserved_6',0,4
	.word	802
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,26,226,6,3
	.word	29315
	.byte	25
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,26,229,6,16,4,36
	.byte	'VCOBYST',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'VCOLOCK',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'FINDIS',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'K1RDY',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'K2RDY',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'reserved_6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'MODRUN',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,4
	.word	802
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,26,240,6,3
	.word	29513
	.byte	25
	.byte	'_Ifx_SCU_PMCSR_Bits',0,26,243,6,16,4,36
	.byte	'REQSLP',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'SMUSLP',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'reserved_3',0,1
	.word	133
	.byte	5,0,2,35,0,36
	.byte	'PMST',0,1
	.word	133
	.byte	3,5,2,35,1,36
	.byte	'reserved_11',0,4
	.word	802
	.byte	21,0,2,35,0,0,23
	.byte	'Ifx_SCU_PMCSR_Bits',0,26,250,6,3
	.word	29746
	.byte	25
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,26,253,6,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1WKEN',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'PINAWKEN',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'PINBWKEN',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'ESR0DFEN',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'ESR0EDCON',0,1
	.word	133
	.byte	2,1,2,35,0,36
	.byte	'ESR1DFEN',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'ESR1EDCON',0,1
	.word	133
	.byte	2,6,2,35,1,36
	.byte	'PINADFEN',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'PINAEDCON',0,1
	.word	133
	.byte	2,3,2,35,1,36
	.byte	'PINBDFEN',0,1
	.word	133
	.byte	1,2,2,35,1,36
	.byte	'PINBEDCON',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'reserved_16',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'STBYRAMSEL',0,1
	.word	133
	.byte	2,5,2,35,2,36
	.byte	'reserved_19',0,1
	.word	133
	.byte	2,3,2,35,2,36
	.byte	'TRISTEN',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'TRISTREQ',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'PORSTDF',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'PWRWKEN',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'DCDCSYNC',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'BLNKFIL',0,1
	.word	133
	.byte	3,3,2,35,3,36
	.byte	'ESR0TRIST',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'reserved_30',0,1
	.word	133
	.byte	1,1,2,35,3,36
	.byte	'LCK',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,26,151,7,3
	.word	29898
	.byte	25
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,26,154,7,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'CPUIDLSEL',0,1
	.word	133
	.byte	3,5,2,35,1,36
	.byte	'reserved_11',0,1
	.word	133
	.byte	1,4,2,35,1,36
	.byte	'IRADIS',0,1
	.word	133
	.byte	1,3,2,35,1,36
	.byte	'reserved_13',0,4
	.word	802
	.byte	11,8,2,35,0,36
	.byte	'CPUSEL',0,1
	.word	133
	.byte	3,5,2,35,3,36
	.byte	'STBYEVEN',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'STBYEV',0,1
	.word	133
	.byte	3,1,2,35,3,36
	.byte	'reserved_31',0,1
	.word	133
	.byte	1,0,2,35,3,0,23
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,26,165,7,3
	.word	30446
	.byte	25
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,26,168,7,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'ESR1WKP',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'ESR1OVRUN',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'PINAWKP',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'PINAOVRUN',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'PINBWKP',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PINBOVRUN',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'PWRWKP',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'PORSTDF',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'HWCFGEVR',0,1
	.word	133
	.byte	3,3,2,35,1,36
	.byte	'STBYRAM',0,1
	.word	133
	.byte	2,1,2,35,1,36
	.byte	'TRIST',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'reserved_16',0,1
	.word	133
	.byte	4,4,2,35,2,36
	.byte	'ESR1WKEN',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'PINAWKEN',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'PINBWKEN',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'PWRWKEN',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'BLNKFIL',0,1
	.word	133
	.byte	3,5,2,35,3,36
	.byte	'ESR0TRIST',0,1
	.word	133
	.byte	1,4,2,35,3,36
	.byte	'reserved_28',0,1
	.word	133
	.byte	4,0,2,35,3,0,23
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,26,190,7,3
	.word	30691
	.byte	25
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,26,193,7,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'ESR1WKPCLR',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'ESR1OVRUNCLR',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'PINAWKPCLR',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'PINAOVRUNCLR',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'PINBWKPCLR',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PINBOVRUNCLR',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'PWRWKPCLR',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,26,204,7,3
	.word	31152
	.byte	25
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,26,207,7,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'CLRC',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,2
	.word	463
	.byte	10,4,2,35,0,36
	.byte	'CSS0',0,1
	.word	133
	.byte	1,3,2,35,1,36
	.byte	'CSS1',0,1
	.word	133
	.byte	1,2,2,35,1,36
	.byte	'CSS2',0,1
	.word	133
	.byte	1,1,2,35,1,36
	.byte	'reserved_15',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'USRINFO',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_RSTCON2_Bits',0,26,217,7,3
	.word	31422
	.byte	25
	.byte	'_Ifx_SCU_RSTCON_Bits',0,26,220,7,16,4,36
	.byte	'ESR0',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'ESR1',0,1
	.word	133
	.byte	2,4,2,35,0,36
	.byte	'reserved_4',0,1
	.word	133
	.byte	2,2,2,35,0,36
	.byte	'SMU',0,1
	.word	133
	.byte	2,0,2,35,0,36
	.byte	'SW',0,1
	.word	133
	.byte	2,6,2,35,1,36
	.byte	'STM0',0,1
	.word	133
	.byte	2,4,2,35,1,36
	.byte	'STM1',0,1
	.word	133
	.byte	2,2,2,35,1,36
	.byte	'STM2',0,1
	.word	133
	.byte	2,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_RSTCON_Bits',0,26,231,7,3
	.word	31631
	.byte	25
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,26,234,7,16,4,36
	.byte	'ESR0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'SMU',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'SW',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'STM0',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'STM1',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'STM2',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'reserved_8',0,1
	.word	133
	.byte	8,0,2,35,1,36
	.byte	'PORST',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'reserved_17',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'CB0',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'CB1',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'CB3',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'reserved_21',0,1
	.word	133
	.byte	2,1,2,35,2,36
	.byte	'EVR13',0,1
	.word	133
	.byte	1,0,2,35,2,36
	.byte	'EVR33',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'SWD',0,1
	.word	133
	.byte	1,6,2,35,3,36
	.byte	'reserved_26',0,1
	.word	133
	.byte	2,4,2,35,3,36
	.byte	'STBYR',0,1
	.word	133
	.byte	1,3,2,35,3,36
	.byte	'reserved_29',0,1
	.word	133
	.byte	3,0,2,35,3,0,23
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,26,129,8,3
	.word	31842
	.byte	25
	.byte	'_Ifx_SCU_SAFECON_Bits',0,26,132,8,16,4,36
	.byte	'HBT',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'reserved_1',0,4
	.word	802
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_SCU_SAFECON_Bits',0,26,136,8,3
	.word	32274
	.byte	25
	.byte	'_Ifx_SCU_STSTAT_Bits',0,26,139,8,16,4,36
	.byte	'HWCFG',0,1
	.word	133
	.byte	8,0,2,35,0,36
	.byte	'FTM',0,1
	.word	133
	.byte	7,1,2,35,1,36
	.byte	'MODE',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'reserved_16',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'LUDIS',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'reserved_18',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'TRSTL',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'SPDEN',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'reserved_21',0,1
	.word	133
	.byte	3,0,2,35,2,36
	.byte	'RAMINT',0,1
	.word	133
	.byte	1,7,2,35,3,36
	.byte	'reserved_25',0,1
	.word	133
	.byte	7,0,2,35,3,0,23
	.byte	'Ifx_SCU_STSTAT_Bits',0,26,152,8,3
	.word	32370
	.byte	25
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,26,155,8,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'SWRSTREQ',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,4
	.word	802
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,26,160,8,3
	.word	32636
	.byte	25
	.byte	'_Ifx_SCU_SYSCON_Bits',0,26,163,8,16,4,36
	.byte	'CCTRIG0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'RAMINTM',0,1
	.word	133
	.byte	2,4,2,35,0,36
	.byte	'SETLUDIS',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'reserved_5',0,1
	.word	133
	.byte	3,0,2,35,0,36
	.byte	'DATM',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'reserved_9',0,4
	.word	802
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_SCU_SYSCON_Bits',0,26,172,8,3
	.word	32761
	.byte	25
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,26,175,8,16,4,36
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,26,182,8,3
	.word	32958
	.byte	25
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,26,185,8,16,4,36
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,26,192,8,3
	.word	33111
	.byte	25
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,26,195,8,16,4,36
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPSET_Bits',0,26,202,8,3
	.word	33264
	.byte	25
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,26,205,8,16,4,36
	.byte	'ESR0T',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'ESR1T',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'reserved_2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'SMUT',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,4
	.word	802
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,26,212,8,3
	.word	33417
	.byte	2
	.byte	'unsigned int',0,4,7,25
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,26,215,8,16,4,36
	.byte	'ENDINIT',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'LCK',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'PW',0,4
	.word	33572
	.byte	14,16,2,35,0,36
	.byte	'REL',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,26,221,8,3
	.word	33588
	.byte	25
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,26,224,8,16,4,36
	.byte	'reserved_0',0,1
	.word	133
	.byte	2,6,2,35,0,36
	.byte	'IR0',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'DR',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'IR1',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'UR',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PAR',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'TCR',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'TCTR',0,1
	.word	133
	.byte	7,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,26,236,8,3
	.word	33718
	.byte	25
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,26,239,8,16,4,36
	.byte	'AE',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'OE',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'IS0',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'DS',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'TO',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'IS1',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'US',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PAS',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'TCS',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'TCT',0,1
	.word	133
	.byte	7,0,2,35,1,36
	.byte	'TIM',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,26,252,8,3
	.word	33956
	.byte	25
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,26,255,8,16,4,36
	.byte	'ENDINIT',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'LCK',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'PW',0,4
	.word	33572
	.byte	14,16,2,35,0,36
	.byte	'REL',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,26,133,9,3
	.word	34179
	.byte	25
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,26,136,9,16,4,36
	.byte	'CLRIRF',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'reserved_1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'IR0',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'DR',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'reserved_4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'IR1',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'UR',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PAR',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'TCR',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'TCTR',0,1
	.word	133
	.byte	7,0,2,35,1,36
	.byte	'reserved_16',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,26,149,9,3
	.word	34305
	.byte	25
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,26,152,9,16,4,36
	.byte	'AE',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'OE',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'IS0',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'DS',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'TO',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'IS1',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'US',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'PAS',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'TCS',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'TCT',0,1
	.word	133
	.byte	7,0,2,35,1,36
	.byte	'TIM',0,2
	.word	463
	.byte	16,0,2,35,2,0,23
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,26,165,9,3
	.word	34557
	.byte	29,26,173,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	16541
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ACCEN0',0,26,178,9,3
	.word	34776
	.byte	29,26,181,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17098
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ACCEN1',0,26,186,9,3
	.word	34840
	.byte	29,26,189,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17175
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ARSTDIS',0,26,194,9,3
	.word	34904
	.byte	29,26,197,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17311
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON0',0,26,202,9,3
	.word	34969
	.byte	29,26,205,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17591
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON1',0,26,210,9,3
	.word	35034
	.byte	29,26,213,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17829
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON2',0,26,218,9,3
	.word	35099
	.byte	29,26,221,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	17957
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON3',0,26,226,9,3
	.word	35164
	.byte	29,26,229,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18200
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON4',0,26,234,9,3
	.word	35229
	.byte	29,26,237,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18435
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON5',0,26,242,9,3
	.word	35294
	.byte	29,26,245,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18563
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON6',0,26,250,9,3
	.word	35359
	.byte	29,26,253,9,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18663
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON7',0,26,130,10,3
	.word	35424
	.byte	29,26,133,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18763
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CCUCON8',0,26,138,10,3
	.word	35489
	.byte	29,26,141,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	18863
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_CHIPID',0,26,146,10,3
	.word	35554
	.byte	29,26,149,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19071
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_DTSCON',0,26,154,10,3
	.word	35618
	.byte	29,26,157,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19236
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_DTSLIM',0,26,162,10,3
	.word	35682
	.byte	29,26,165,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19419
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_DTSSTAT',0,26,170,10,3
	.word	35746
	.byte	29,26,173,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19573
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EICR',0,26,178,10,3
	.word	35811
	.byte	29,26,181,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	19937
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EIFR',0,26,186,10,3
	.word	35873
	.byte	29,26,189,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20148
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EMSR',0,26,194,10,3
	.word	35935
	.byte	29,26,197,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20400
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ESRCFG',0,26,202,10,3
	.word	35997
	.byte	29,26,205,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20518
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ESROCFG',0,26,210,10,3
	.word	36061
	.byte	29,26,213,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20629
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVR13CON',0,26,218,10,3
	.word	36126
	.byte	29,26,221,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20792
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVR33CON',0,26,226,10,3
	.word	36192
	.byte	29,26,229,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	20955
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRADCSTAT',0,26,234,10,3
	.word	36258
	.byte	29,26,237,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21113
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRDVSTAT',0,26,242,10,3
	.word	36326
	.byte	29,26,245,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21278
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRMONCTRL',0,26,250,10,3
	.word	36393
	.byte	29,26,253,10,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21646
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVROVMON',0,26,130,11,3
	.word	36461
	.byte	29,26,133,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	21825
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRRSTCON',0,26,138,11,3
	.word	36527
	.byte	29,26,141,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22090
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,26,146,11,3
	.word	36594
	.byte	29,26,149,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22243
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,26,154,11,3
	.word	36663
	.byte	29,26,157,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22399
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,26,162,11,3
	.word	36732
	.byte	29,26,165,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22561
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,26,170,11,3
	.word	36801
	.byte	29,26,173,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22704
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,26,178,11,3
	.word	36870
	.byte	29,26,181,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	22869
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,26,186,11,3
	.word	36939
	.byte	29,26,189,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23014
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCTRL1',0,26,194,11,3
	.word	37008
	.byte	29,26,197,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23195
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCTRL2',0,26,202,11,3
	.word	37076
	.byte	29,26,205,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23369
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCTRL3',0,26,210,11,3
	.word	37144
	.byte	29,26,213,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23529
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSDCTRL4',0,26,218,11,3
	.word	37212
	.byte	29,26,221,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23673
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRSTAT',0,26,226,11,3
	.word	37280
	.byte	29,26,229,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	23947
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRTRIM',0,26,234,11,3
	.word	37345
	.byte	29,26,237,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24102
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EVRUVMON',0,26,242,11,3
	.word	37410
	.byte	29,26,245,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24281
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_EXTCON',0,26,250,11,3
	.word	37476
	.byte	29,26,253,11,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24499
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_FDR',0,26,130,12,3
	.word	37540
	.byte	29,26,133,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24662
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_FMR',0,26,138,12,3
	.word	37601
	.byte	29,26,141,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	24998
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_ID',0,26,146,12,3
	.word	37662
	.byte	29,26,149,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25105
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_IGCR',0,26,154,12,3
	.word	37722
	.byte	29,26,157,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25557
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_IN',0,26,162,12,3
	.word	37784
	.byte	29,26,165,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25656
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_IOCR',0,26,170,12,3
	.word	37844
	.byte	29,26,173,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25806
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_LBISTCTRL0',0,26,178,12,3
	.word	37906
	.byte	29,26,181,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	25955
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_LBISTCTRL1',0,26,186,12,3
	.word	37974
	.byte	29,26,189,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26116
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_LBISTCTRL2',0,26,194,12,3
	.word	38042
	.byte	29,26,197,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26246
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_LCLCON',0,26,202,12,3
	.word	38110
	.byte	29,26,205,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26378
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_LCLTEST',0,26,210,12,3
	.word	38174
	.byte	29,26,213,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26493
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_MANID',0,26,218,12,3
	.word	38239
	.byte	29,26,221,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26604
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_OMR',0,26,226,12,3
	.word	38302
	.byte	29,26,229,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	26762
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_OSCCON',0,26,234,12,3
	.word	38363
	.byte	29,26,237,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27174
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_OUT',0,26,242,12,3
	.word	38427
	.byte	29,26,245,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27275
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_OVCCON',0,26,250,12,3
	.word	38488
	.byte	29,26,253,12,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27542
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_OVCENABLE',0,26,130,13,3
	.word	38552
	.byte	29,26,133,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27678
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PDISC',0,26,138,13,3
	.word	38619
	.byte	29,26,141,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27789
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PDR',0,26,146,13,3
	.word	38682
	.byte	29,26,149,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	27922
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PDRR',0,26,154,13,3
	.word	38743
	.byte	29,26,157,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28125
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLCON0',0,26,162,13,3
	.word	38805
	.byte	29,26,165,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28481
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLCON1',0,26,170,13,3
	.word	38870
	.byte	29,26,173,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28659
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLCON2',0,26,178,13,3
	.word	38935
	.byte	29,26,181,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	28759
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLERAYCON0',0,26,186,13,3
	.word	39000
	.byte	29,26,189,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29129
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLERAYCON1',0,26,194,13,3
	.word	39069
	.byte	29,26,197,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29315
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLERAYSTAT',0,26,202,13,3
	.word	39138
	.byte	29,26,205,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29513
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PLLSTAT',0,26,210,13,3
	.word	39207
	.byte	29,26,213,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29746
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PMCSR',0,26,218,13,3
	.word	39272
	.byte	29,26,221,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	29898
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PMSWCR0',0,26,226,13,3
	.word	39335
	.byte	29,26,229,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30446
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PMSWCR1',0,26,234,13,3
	.word	39400
	.byte	29,26,237,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	30691
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PMSWSTAT',0,26,242,13,3
	.word	39465
	.byte	29,26,245,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31152
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_PMSWSTATCLR',0,26,250,13,3
	.word	39531
	.byte	29,26,253,13,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31631
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_RSTCON',0,26,130,14,3
	.word	39600
	.byte	29,26,133,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31422
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_RSTCON2',0,26,138,14,3
	.word	39664
	.byte	29,26,141,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	31842
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_RSTSTAT',0,26,146,14,3
	.word	39729
	.byte	29,26,149,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32274
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_SAFECON',0,26,154,14,3
	.word	39794
	.byte	29,26,157,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32370
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_STSTAT',0,26,162,14,3
	.word	39859
	.byte	29,26,165,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32636
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_SWRSTCON',0,26,170,14,3
	.word	39923
	.byte	29,26,173,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32761
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_SYSCON',0,26,178,14,3
	.word	39989
	.byte	29,26,181,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	32958
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPCLR',0,26,186,14,3
	.word	40053
	.byte	29,26,189,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33111
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPDIS',0,26,194,14,3
	.word	40118
	.byte	29,26,197,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33264
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPSET',0,26,202,14,3
	.word	40183
	.byte	29,26,205,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33417
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_TRAPSTAT',0,26,210,14,3
	.word	40248
	.byte	29,26,213,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33588
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTCPU_CON0',0,26,218,14,3
	.word	40314
	.byte	29,26,221,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33718
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTCPU_CON1',0,26,226,14,3
	.word	40383
	.byte	29,26,229,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	33956
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTCPU_SR',0,26,234,14,3
	.word	40452
	.byte	29,26,237,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	34179
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTS_CON0',0,26,242,14,3
	.word	40519
	.byte	29,26,245,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	34305
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTS_CON1',0,26,250,14,3
	.word	40586
	.byte	29,26,253,14,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	34557
	.byte	4,2,35,0,0,23
	.byte	'Ifx_SCU_WDTS_SR',0,26,130,15,3
	.word	40653
	.byte	25
	.byte	'_Ifx_SCU_WDTCPU',0,26,141,15,25,12,9
	.byte	'CON0',0
	.word	40314
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	40383
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	40452
	.byte	4,2,35,8,0,32
	.word	40718
	.byte	23
	.byte	'Ifx_SCU_WDTCPU',0,26,146,15,3
	.word	40781
	.byte	25
	.byte	'_Ifx_SCU_WDTS',0,26,149,15,25,12,9
	.byte	'CON0',0
	.word	40519
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	40586
	.byte	4,2,35,4,9
	.byte	'SR',0
	.word	40653
	.byte	4,2,35,8,0,32
	.word	40810
	.byte	23
	.byte	'Ifx_SCU_WDTS',0,26,154,15,3
	.word	40871
	.byte	25
	.byte	'_Ifx_GTM_ACCEN0_Bits',0,27,49,16,4,36
	.byte	'EN0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN22',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'EN23',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'EN24',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'EN25',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'EN26',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'EN27',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'EN28',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'EN29',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'EN30',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'EN31',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ACCEN0_Bits',0,27,83,3
	.word	40898
	.byte	25
	.byte	'_Ifx_GTM_ACCEN1_Bits',0,27,86,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	32,0,2,35,0,0,23
	.byte	'Ifx_GTM_ACCEN1_Bits',0,27,89,3
	.word	41455
	.byte	25
	.byte	'_Ifx_GTM_ADCTRIG0OUT0_Bits',0,27,92,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG0OUT0_Bits',0,27,102,3
	.word	41532
	.byte	25
	.byte	'_Ifx_GTM_ADCTRIG0OUT1_Bits',0,27,105,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG0OUT1_Bits',0,27,109,3
	.word	41727
	.byte	25
	.byte	'_Ifx_GTM_ADCTRIG1OUT0_Bits',0,27,112,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG1OUT0_Bits',0,27,122,3
	.word	41832
	.byte	25
	.byte	'_Ifx_GTM_ADCTRIG1OUT1_Bits',0,27,125,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG1OUT1_Bits',0,27,129,1,3
	.word	42027
	.byte	25
	.byte	'_Ifx_GTM_AEI_ADDR_XPT_Bits',0,27,132,1,16,4,36
	.byte	'TO_ADDR',0,4
	.word	33572
	.byte	20,12,2,35,0,36
	.byte	'TO_W1R0',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	11,0,2,35,0,0,23
	.byte	'Ifx_GTM_AEI_ADDR_XPT_Bits',0,27,137,1,3
	.word	42133
	.byte	25
	.byte	'_Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,27,140,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC_Bits',0,27,144,1,3
	.word	42263
	.byte	25
	.byte	'_Ifx_GTM_ARU_ARU_ACCESS_Bits',0,27,147,1,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'RREQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'WREQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'reserved_14',0,4
	.word	33572
	.byte	18,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_ARU_ACCESS_Bits',0,27,154,1,3
	.word	42375
	.byte	25
	.byte	'_Ifx_GTM_ARU_DATA_H_Bits',0,27,157,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DATA_H_Bits',0,27,161,1,3
	.word	42541
	.byte	25
	.byte	'_Ifx_GTM_ARU_DATA_L_Bits',0,27,164,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DATA_L_Bits',0,27,168,1,3
	.word	42645
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,27,171,1,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,27,175,1,3
	.word	42749
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,27,178,1,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,27,182,1,3
	.word	42862
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,27,185,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,27,189,1,3
	.word	42975
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,27,192,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,27,196,1,3
	.word	43089
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,27,199,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,27,203,1,3
	.word	43203
	.byte	25
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,27,206,1,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	29,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,27,210,1,3
	.word	43317
	.byte	25
	.byte	'_Ifx_GTM_ARU_IRQ_EN_Bits',0,27,213,1,16,4,36
	.byte	'NEW_DATA0_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'NEW_DATA1_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ACC_ACK_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_EN_Bits',0,27,219,1,3
	.word	43431
	.byte	25
	.byte	'_Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,27,222,1,16,4,36
	.byte	'TRG_NEW_DATA0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_NEW_DATA',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_ACC_ACK',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,27,228,1,3
	.word	43600
	.byte	25
	.byte	'_Ifx_GTM_ARU_IRQ_MODE_Bits',0,27,231,1,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_MODE_Bits',0,27,235,1,3
	.word	43769
	.byte	25
	.byte	'_Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,27,238,1,16,4,36
	.byte	'NEW_DATA0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'NEW_DATA1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ACC_ACK',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,27,244,1,3
	.word	43880
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,27,247,1,16,4,36
	.byte	'ACT_TB',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'TB_TRIG',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TBU_SEL',0,4
	.word	33572
	.byte	2,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,27,253,1,3
	.word	44036
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,27,128,2,16,4,36
	.byte	'ENDIS_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,27,139,2,3
	.word	44190
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,27,142,2,16,4,36
	.byte	'ENDIS_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,27,153,2,3
	.word	44480
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,27,156,2,16,4,36
	.byte	'FUPD_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'FUPD_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'FUPD_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'FUPD_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'FUPD_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'FUPD_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'FUPD_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'FUPD_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'RSTCN0_CH0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'RSTCN0_CH1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'RSTCN0_CH2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'RSTCN0_CH3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'RSTCN0_CH4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'RSTCN0_CH5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'RSTCN0_CH6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'RSTCN0_CH7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,27,174,2,3
	.word	44770
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,27,177,2,16,4,36
	.byte	'HOST_TRIG',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	7,24,2,35,0,36
	.byte	'RST_CH0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'RST_CH1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'RST_CH2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'RST_CH3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'RST_CH4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'RST_CH5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'RST_CH6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'RST_CH7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'UPEN_CTRL0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'UPEN_CTRL1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'UPEN_CTRL2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'UPEN_CTRL3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'UPEN_CTRL4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'UPEN_CTRL5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'UPEN_CTRL6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'UPEN_CTRL7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,27,197,2,3
	.word	45203
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,27,200,2,16,4,36
	.byte	'INT_TRIG0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'INT_TRIG1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'INT_TRIG2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'INT_TRIG3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'INT_TRIG4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'INT_TRIG5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'INT_TRIG6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'INT_TRIG7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,27,211,2,3
	.word	45653
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,27,214,2,16,4,36
	.byte	'OUTEN_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,27,225,2,3
	.word	45923
	.byte	25
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,27,228,2,16,4,36
	.byte	'OUTEN_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,27,239,2,3
	.word	46213
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_CM0_Bits',0,27,242,2,16,4,36
	.byte	'CM0',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CM0_Bits',0,27,246,2,3
	.word	46503
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_CM1_Bits',0,27,249,2,16,4,36
	.byte	'CM1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CM1_Bits',0,27,253,2,3
	.word	46608
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_CN0_Bits',0,27,128,3,16,4,36
	.byte	'CN0',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CN0_Bits',0,27,132,3,3
	.word	46713
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_CTRL_Bits',0,27,135,3,16,4,36
	.byte	'MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'TB12_SEL',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACB',0,4
	.word	33572
	.byte	5,23,2,35,0,36
	.byte	'CMP_CTRL',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'CLK_SRCCLK_SRC_SR',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'reserved_15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'WR_REQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'reserved_17',0,4
	.word	33572
	.byte	3,12,2,35,0,36
	.byte	'RST_CCU0',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'TRIGOUT',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'SLA',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'OSM',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'ABM',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CTRL_Bits',0,27,155,3,3
	.word	46818
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,27,158,3,16,4,36
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,27,163,3,3
	.word	47236
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,27,166,3,16,4,36
	.byte	'TRG_CCU0TC',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_CCU1TC',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,27,171,3,3
	.word	47381
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,27,174,3,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,27,178,3,3
	.word	47530
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,27,181,3,16,4,36
	.byte	'CCU0TC',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CCU1TC',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,27,186,3,3
	.word	47649
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_RDADDR_Bits',0,27,189,3,16,4,36
	.byte	'RDADDR0',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	7,16,2,35,0,36
	.byte	'RDADDR1',0,4
	.word	33572
	.byte	9,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	7,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_RDADDR_Bits',0,27,195,3,3
	.word	47788
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SOMC_Bits',0,27,198,3,16,4,36
	.byte	'MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'TB12_SEL',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACB10',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ACB42',0,4
	.word	33572
	.byte	3,23,2,35,0,36
	.byte	'CMP_CTRL',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'WR_REQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'reserved_17',0,4
	.word	33572
	.byte	7,8,2,35,0,36
	.byte	'TRIGOUT',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'SLA',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'reserved_26',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'ABM',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMC_Bits',0,27,216,3,3
	.word	47944
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SOMI_Bits',0,27,219,3,16,4,36
	.byte	'MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACB0',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	6,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	20,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMI_Bits',0,27,228,3,3
	.word	48317
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SOMP_Bits',0,27,231,3,16,4,36
	.byte	'MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ADL',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	5,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'CLK_SRC_SR',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'reserved_15',0,4
	.word	33572
	.byte	5,12,2,35,0,36
	.byte	'RST_CCU0',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'TRIGOUT',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'OSM',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMP_Bits',0,27,247,3,3
	.word	48517
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SOMS_Bits',0,27,250,3,16,4,36
	.byte	'MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACB0',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	6,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'CLK_SRC',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'reserved_15',0,4
	.word	33572
	.byte	11,6,2,35,0,36
	.byte	'OSM',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMS_Bits',0,27,134,4,3
	.word	48861
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SR0_Bits',0,27,137,4,16,4,36
	.byte	'SR0',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SR0_Bits',0,27,141,4,3
	.word	49118
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_SR1_Bits',0,27,144,4,16,4,36
	.byte	'SR1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SR1_Bits',0,27,148,4,3
	.word	49223
	.byte	25
	.byte	'_Ifx_GTM_ATOM_CH_STAT_Bits',0,27,151,4,16,4,36
	.byte	'OL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	15,16,2,35,0,36
	.byte	'ACBI',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'DV',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'WRF',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'ACBO',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_STAT_Bits',0,27,161,4,3
	.word	49328
	.byte	25
	.byte	'_Ifx_GTM_BRC_EIRQ_EN_Bits',0,27,164,4,16,4,36
	.byte	'DEST_ERR_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DID_EN0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'DID_EN1',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'DID_EN2',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'DID_EN3',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'DID_EN4',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DID_EN5',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'DID_EN6',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'DID_EN7',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DID_EN8',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'DID_EN9',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'DID_EN10',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'DID_EN11',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_EIRQ_EN_Bits',0,27,180,4,3
	.word	49540
	.byte	25
	.byte	'_Ifx_GTM_BRC_IRQ_EN_Bits',0,27,183,4,16,4,36
	.byte	'DEST_ERR_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DID_EN0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'DID_EN1',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'DID_EN2',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'DID_EN3',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'DID_EN4',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DID_EN5',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'DID_EN6',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'DID_EN7',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DID_EN8',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'DID_EN9',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'DID_EN10',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'DID_EN11',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_EN_Bits',0,27,199,4,3
	.word	49883
	.byte	25
	.byte	'_Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,27,202,4,16,4,36
	.byte	'TRG_DEST_ERR',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_DID0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_DID1',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_DID2',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG_DID3',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG_DID4',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TRG_DID5',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TRG_DID6',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TRG_DID7',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TRG_DID8',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TRG_DID9',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TRG_DID10',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TRG_DID11',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,27,218,4,3
	.word	50224
	.byte	25
	.byte	'_Ifx_GTM_BRC_IRQ_MODE_Bits',0,27,221,4,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_MODE_Bits',0,27,225,4,3
	.word	50588
	.byte	25
	.byte	'_Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,27,228,4,16,4,36
	.byte	'DEST_ERR',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DID0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'DID1',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'DID2',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'DID3',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'DID4',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DID5',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'DID6',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'DID7',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DID8',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'DID9',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'DID10',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'DID11',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,27,244,4,3
	.word	50699
	.byte	25
	.byte	'_Ifx_GTM_BRC_RST_Bits',0,27,247,4,16,4,36
	.byte	'RST',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_RST_Bits',0,27,251,4,3
	.word	51009
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC0_ADDR_Bits',0,27,254,4,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC0_ADDR_Bits',0,27,132,5,3
	.word	51105
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC0_DEST_Bits',0,27,135,5,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC0_DEST_Bits',0,27,161,5,3
	.word	51257
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC10_ADDR_Bits',0,27,164,5,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC10_ADDR_Bits',0,27,170,5,3
	.word	51826
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC10_DEST_Bits',0,27,173,5,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC10_DEST_Bits',0,27,199,5,3
	.word	51980
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC11_ADDR_Bits',0,27,202,5,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC11_ADDR_Bits',0,27,208,5,3
	.word	52551
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC11_DEST_Bits',0,27,211,5,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC11_DEST_Bits',0,27,237,5,3
	.word	52705
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC1_ADDR_Bits',0,27,240,5,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC1_ADDR_Bits',0,27,246,5,3
	.word	53276
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC1_DEST_Bits',0,27,249,5,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC1_DEST_Bits',0,27,147,6,3
	.word	53428
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC2_ADDR_Bits',0,27,150,6,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC2_ADDR_Bits',0,27,156,6,3
	.word	53997
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC2_DEST_Bits',0,27,159,6,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC2_DEST_Bits',0,27,185,6,3
	.word	54149
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC3_ADDR_Bits',0,27,188,6,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC3_ADDR_Bits',0,27,194,6,3
	.word	54718
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC3_DEST_Bits',0,27,197,6,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC3_DEST_Bits',0,27,223,6,3
	.word	54870
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC4_ADDR_Bits',0,27,226,6,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC4_ADDR_Bits',0,27,232,6,3
	.word	55439
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC4_DEST_Bits',0,27,235,6,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC4_DEST_Bits',0,27,133,7,3
	.word	55591
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC5_ADDR_Bits',0,27,136,7,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC5_ADDR_Bits',0,27,142,7,3
	.word	56160
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC5_DEST_Bits',0,27,145,7,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC5_DEST_Bits',0,27,171,7,3
	.word	56312
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC6_ADDR_Bits',0,27,174,7,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC6_ADDR_Bits',0,27,180,7,3
	.word	56881
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC6_DEST_Bits',0,27,183,7,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC6_DEST_Bits',0,27,209,7,3
	.word	57033
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC7_ADDR_Bits',0,27,212,7,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC7_ADDR_Bits',0,27,218,7,3
	.word	57602
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC7_DEST_Bits',0,27,221,7,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC7_DEST_Bits',0,27,247,7,3
	.word	57754
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC8_ADDR_Bits',0,27,250,7,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC8_ADDR_Bits',0,27,128,8,3
	.word	58323
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC8_DEST_Bits',0,27,131,8,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC8_DEST_Bits',0,27,157,8,3
	.word	58475
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC9_ADDR_Bits',0,27,160,8,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'BRC_MODE',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC9_ADDR_Bits',0,27,166,8,3
	.word	59044
	.byte	25
	.byte	'_Ifx_GTM_BRC_SRC9_DEST_Bits',0,27,169,8,16,4,36
	.byte	'EN_DEST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'EN_DEST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'EN_DEST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EN_DEST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'EN_DEST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'EN_DEST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'EN_DEST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'EN_DEST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'EN_DEST8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'EN_DEST9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'EN_DEST10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'EN_DEST11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'EN_DEST12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'EN_DEST13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'EN_DEST14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EN_DEST15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'EN_DEST16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'EN_DEST17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'EN_DEST18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'EN_DEST19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'EN_DEST20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'EN_DEST21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'EN_TRASHBIN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC9_DEST_Bits',0,27,195,8,3
	.word	59196
	.byte	25
	.byte	'_Ifx_GTM_BRIDGE_MODE_Bits',0,27,198,8,16,4,36
	.byte	'BRG_MODE',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MSK_WR_RSP',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	6,24,2,35,0,36
	.byte	'MODE_UP_PGR',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'BUFF_OVL',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'SYNC_INPUT_REG',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'BRG_RST',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'reserved_17',0,4
	.word	33572
	.byte	7,8,2,35,0,36
	.byte	'BUFF_DPT',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_MODE_Bits',0,27,211,8,3
	.word	59765
	.byte	25
	.byte	'_Ifx_GTM_BRIDGE_PTR1_Bits',0,27,214,8,16,4,36
	.byte	'NEW_TRAN_PTR',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'FIRST_RSP_PTR',0,4
	.word	33572
	.byte	5,22,2,35,0,36
	.byte	'TRAN_IN_PGR',0,4
	.word	33572
	.byte	5,17,2,35,0,36
	.byte	'ABT_TRAN_PGR',0,4
	.word	33572
	.byte	5,12,2,35,0,36
	.byte	'FBC',0,4
	.word	33572
	.byte	6,6,2,35,0,36
	.byte	'RSP_TRAN_RDY',0,4
	.word	33572
	.byte	6,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_PTR1_Bits',0,27,222,8,3
	.word	60073
	.byte	25
	.byte	'_Ifx_GTM_BRIDGE_PTR2_Bits',0,27,225,8,16,4,36
	.byte	'TRAN_IN_PGR2',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_PTR2_Bits',0,27,229,8,3
	.word	60275
	.byte	25
	.byte	'_Ifx_GTM_CLC_Bits',0,27,232,8,16,4,36
	.byte	'DISR',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DISS',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'EDIS',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_CLC_Bits',0,27,239,8,3
	.word	60388
	.byte	25
	.byte	'_Ifx_GTM_CMP_EIRQ_EN_Bits',0,27,242,8,16,4,36
	.byte	'ABWC0_EN_EIRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ABWC1_EN_EIRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ABWC2_EN_EIRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ABWC3_EN_EIRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ABWC4_EN_EIRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ABWC5_EN_EIRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ABWC6_EN_EIRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ABWC7_EN_EIRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ABWC8_EN_EIRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ABWC9_EN_EIRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ABWC10_EN_EIRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ABWC11_EN_EIRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TBWC0_EN_EIRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TBWC1_EN_EIRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TBWC2_EN_EIRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TBWC3_EN_EIRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TBWC4_EN_EIRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TBWC5_EN_EIRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TBWC6_EN_EIRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TBWC7_EN_EIRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TBWC8_EN_EIRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TBWC9_EN_EIRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TBWC10_EN_EIRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TBWC11_EN_EIRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_EIRQ_EN_Bits',0,27,141,9,3
	.word	60531
	.byte	25
	.byte	'_Ifx_GTM_CMP_EN_Bits',0,27,144,9,16,4,36
	.byte	'ABWC0_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ABWC1_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ABWC2_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ABWC3_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ABWC4_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ABWC5_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ABWC6_EN',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ABWC7_EN',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ABWC8_EN',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ABWC9_EN',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ABWC10_EN',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ABWC11_EN',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TBWC0_EN',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TBWC1_EN',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TBWC2_EN',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TBWC3_EN',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TBWC4_EN',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TBWC5_EN',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TBWC6_EN',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TBWC7_EN',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TBWC8_EN',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TBWC9_EN',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TBWC10_EN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TBWC11_EN',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_EN_Bits',0,27,171,9,3
	.word	61225
	.byte	25
	.byte	'_Ifx_GTM_CMP_IRQ_EN_Bits',0,27,174,9,16,4,36
	.byte	'ABWC0_EN_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ABWC1_EN_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ABWC2_EN_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ABWC3_EN_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ABWC4_EN_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ABWC5_EN_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ABWC6_EN_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ABWC7_EN_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ABWC8_EN_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ABWC9_EN_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ABWC10_EN_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ABWC11_EN_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TBWC0_EN_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TBWC1_EN_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TBWC2_EN_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TBWC3_EN_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TBWC4_EN_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TBWC5_EN_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TBWC6_EN_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TBWC7_EN_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TBWC8_EN_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TBWC9_EN_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TBWC10_EN_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TBWC11_EN_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_EN_Bits',0,27,201,9,3
	.word	61789
	.byte	25
	.byte	'_Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,27,204,9,16,4,36
	.byte	'TRG_ABWC0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_ABWC1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_ABWC2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_ABWC3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG_ABWC4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG_ABWC5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TRG_ABWC6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TRG_ABWC7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TRG_ABWC8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TRG_ABWC9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TRG_ABWC10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TRG_ABWC11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TRG_TBWC0',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TRG_TBWC1',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TRG_TBWC2',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TRG_TBWC3',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TRG_TBWC4',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TRG_TBWC5',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TRG_TBWC6',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TRG_TBWC7',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TRG_TBWC8',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TRG_TBWC9',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TRG_TBWC10',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TRG_TBWC11',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,27,231,9,3
	.word	62457
	.byte	25
	.byte	'_Ifx_GTM_CMP_IRQ_MODE_Bits',0,27,234,9,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_MODE_Bits',0,27,238,9,3
	.word	63063
	.byte	25
	.byte	'_Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,27,241,9,16,4,36
	.byte	'ABWC0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ABWC1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ABWC2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ABWC3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ABWC4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ABWC5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ABWC6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ABWC7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ABWC8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ABWC9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ABWC10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ABWC11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TBWC0',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TBWC1',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TBWC2',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TBWC3',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TBWC4',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TBWC5',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TBWC6',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TBWC7',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TBWC8',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TBWC9',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TBWC10',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TBWC11',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,27,140,10,3
	.word	63174
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,27,143,10,16,4,36
	.byte	'CLK_CNT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL_Bits',0,27,147,10,3
	.word	63682
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,27,150,10,16,4,36
	.byte	'CLK_CNT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'CLK6_SEL',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	7,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL_Bits',0,27,155,10,3
	.word	63799
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,27,158,10,16,4,36
	.byte	'CLK_CNT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'CLK7_SEL',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	7,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL_Bits',0,27,163,10,3
	.word	63934
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK_EN_Bits',0,27,166,10,16,4,36
	.byte	'EN_CLK0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'EN_CLK1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'EN_CLK2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'EN_CLK3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'EN_CLK4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'EN_CLK5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'EN_CLK6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'EN_CLK7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'EN_ECLK0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'EN_ECLK1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'EN_ECLK2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'EN_FXCLK',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_EN_Bits',0,27,181,10,3
	.word	64069
	.byte	25
	.byte	'_Ifx_GTM_CMU_ECLK_DEN_Bits',0,27,184,10,16,4,36
	.byte	'ECLK_DEN',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_ECLK_DEN_Bits',0,27,188,10,3
	.word	64389
	.byte	25
	.byte	'_Ifx_GTM_CMU_ECLK_NUM_Bits',0,27,191,10,16,4,36
	.byte	'ECLK_NUM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_ECLK_NUM_Bits',0,27,195,10,3
	.word	64501
	.byte	25
	.byte	'_Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,27,198,10,16,4,36
	.byte	'FXCLK_SEL',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,27,202,10,3
	.word	64613
	.byte	25
	.byte	'_Ifx_GTM_CMU_GCLK_DEN_Bits',0,27,205,10,16,4,36
	.byte	'GCLK_DEN',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_GCLK_DEN_Bits',0,27,209,10,3
	.word	64729
	.byte	25
	.byte	'_Ifx_GTM_CMU_GCLK_NUM_Bits',0,27,212,10,16,4,36
	.byte	'GCLK_NUM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_GCLK_NUM_Bits',0,27,216,10,3
	.word	64841
	.byte	25
	.byte	'_Ifx_GTM_CTRL_Bits',0,27,219,10,16,4,36
	.byte	'RF_PROT',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TO_MODE',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'TO_VAL',0,4
	.word	33572
	.byte	5,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_GTM_CTRL_Bits',0,27,226,10,3
	.word	64953
	.byte	25
	.byte	'_Ifx_GTM_DATAIN_Bits',0,27,229,10,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	32,0,2,35,0,0,23
	.byte	'Ifx_GTM_DATAIN_Bits',0,27,232,10,3
	.word	65106
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ACB_Bits',0,27,235,10,16,4,36
	.byte	'ACB_0',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'ACB_1',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'ACB_2',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'ACB_3',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ACB_Bits',0,27,245,10,3
	.word	65179
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ACT_STA_Bits',0,27,248,10,16,4,36
	.byte	'ACT_Ni',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ACT_STA_Bits',0,27,252,10,3
	.word	65399
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,27,255,10,16,4,36
	.byte	'ADD_IN_CAL_1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,27,131,11,3
	.word	65509
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,27,134,11,16,4,36
	.byte	'ADD_IN_CAL_2',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,27,138,11,3
	.word	65633
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,27,141,11,16,4,36
	.byte	'ADD_IN_LD_1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,27,145,11,3
	.word	65757
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,27,148,11,16,4,36
	.byte	'ADD_IN_LD_2',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,27,152,11,3
	.word	65878
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ADT_S_Bits',0,27,155,11,16,4,36
	.byte	'PD_S',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'NS',0,4
	.word	33572
	.byte	6,10,2,35,0,36
	.byte	'reserved_22',0,4
	.word	33572
	.byte	10,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADT_S_Bits',0,27,160,11,3
	.word	65999
	.byte	25
	.byte	'_Ifx_GTM_DPLL_AOSV_2_Bits',0,27,163,11,16,4,36
	.byte	'AOSV_2A',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'AOSV_2B',0,4
	.word	33572
	.byte	8,16,2,35,0,36
	.byte	'AOSV_2C',0,4
	.word	33572
	.byte	8,8,2,35,0,36
	.byte	'AOSV_2D',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_AOSV_2_Bits',0,27,169,11,3
	.word	66117
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APS_1C3_Bits',0,27,172,11,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'APS_1C3',0,4
	.word	33572
	.byte	6,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS_1C3_Bits',0,27,177,11,3
	.word	66260
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APS_Bits',0,27,180,11,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'WAPS',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'APS',0,4
	.word	33572
	.byte	6,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'WAPS_1C2',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'APS_1C2',0,4
	.word	33572
	.byte	6,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS_Bits',0,27,189,11,3
	.word	66392
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_Bits',0,27,192,11,16,4,36
	.byte	'APS_1C2_EXT',0,4
	.word	33572
	.byte	6,26,2,35,0,36
	.byte	'APS_1C2_STATUS',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'reserved_7',0,4
	.word	33572
	.byte	7,18,2,35,0,36
	.byte	'APS_1C2_OLD',0,4
	.word	33572
	.byte	6,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS_SYNC_Bits',0,27,199,11,3
	.word	66590
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APT_2C_Bits',0,27,202,11,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'APT_2C',0,4
	.word	33572
	.byte	10,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	20,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT_2C_Bits',0,27,207,11,3
	.word	66778
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APT_Bits',0,27,210,11,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'WAPT',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'APT',0,4
	.word	33572
	.byte	10,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'WAPT_2B',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'APT_2B',0,4
	.word	33572
	.byte	10,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT_Bits',0,27,219,11,3
	.word	66908
	.byte	25
	.byte	'_Ifx_GTM_DPLL_APT_SYNC_Bits',0,27,222,11,16,4,36
	.byte	'APT_2B_EXT',0,4
	.word	33572
	.byte	6,26,2,35,0,36
	.byte	'APT_2B_STATUS',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'reserved_7',0,4
	.word	33572
	.byte	7,18,2,35,0,36
	.byte	'APT_2B_OLD',0,4
	.word	33572
	.byte	10,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT_SYNC_Bits',0,27,229,11,3
	.word	67105
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CDT_SX_Bits',0,27,232,11,16,4,36
	.byte	'CDT_SX',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_SX_Bits',0,27,236,11,3
	.word	67290
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,27,239,11,16,4,36
	.byte	'CDT_SX_NOM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,27,243,11,3
	.word	67398
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CDT_TX_Bits',0,27,246,11,16,4,36
	.byte	'CDT_TX',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_TX_Bits',0,27,250,11,3
	.word	67518
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,27,253,11,16,4,36
	.byte	'CDT_TX_NOM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,27,129,12,3
	.word	67626
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CNT_NUM1_Bits',0,27,132,12,16,4,36
	.byte	'CNT_NUM_1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CNT_NUM1_Bits',0,27,136,12,3
	.word	67746
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CNT_NUM2_Bits',0,27,139,12,16,4,36
	.byte	'CNT_NUM_2',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CNT_NUM2_Bits',0,27,143,12,3
	.word	67861
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,27,146,12,16,4,36
	.byte	'DMO',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	2,29,2,35,0,36
	.byte	'COA',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'PIT',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'SGE1',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DLM1',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'PCM1',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SGE2',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DLM2',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'PCM2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'SYN_NS',0,4
	.word	33572
	.byte	21,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE_Bits',0,27,159,12,3
	.word	67976
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_0_Bits',0,27,162,12,16,4,36
	.byte	'MLT',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'IFP',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'SNU',0,4
	.word	33572
	.byte	5,16,2,35,0,36
	.byte	'TNU',0,4
	.word	33572
	.byte	9,7,2,35,0,36
	.byte	'AMS',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'AMT',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'IDS',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'IDT',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'SEN',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TEN',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'RMO',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0_Bits',0,27,175,12,3
	.word	68250
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,27,178,12,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'IFP',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	14,7,2,35,0,36
	.byte	'AMS',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'reserved_26',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'IDS',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	3,1,2,35,0,36
	.byte	'RMO',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,27,188,12,3
	.word	68482
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,27,191,12,16,4,36
	.byte	'MLT',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'IFP',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	15,6,2,35,0,36
	.byte	'AMT',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'IDS',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'IDT',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	2,1,2,35,0,36
	.byte	'RMO',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,27,201,12,3
	.word	68726
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_1_Bits',0,27,204,12,16,4,36
	.byte	'DMO',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DEN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'IDDS',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'COA',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'PIT',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'SGE1',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DLM1',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'PCM1',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SGE2',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DLM2',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'PCM2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'SYN_NS',0,4
	.word	33572
	.byte	5,16,2,35,0,36
	.byte	'SYN_NT',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'LCD',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'SWR',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'SYSF',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TS0_HRS',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'TS0_HRT',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'SMC',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'SSL',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'TSL',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_1_Bits',0,27,228,12,3
	.word	68959
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,27,231,12,16,4,36
	.byte	'DMO',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	2,29,2,35,0,36
	.byte	'COA',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'PIT',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'SGE1',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DLM1',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'PCM1',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,27,241,12,3
	.word	69386
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_2_Bits',0,27,244,12,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'AEN0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'AEN1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'AEN2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'AEN3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'AEN4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'AEN5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'AEN6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'AEN7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'WAD0',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'WAD1',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'WAD2',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'WAD3',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'WAD4',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'WAD5',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'WAD6',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'WAD7',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_2_Bits',0,27,136,13,3
	.word	69620
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_3_Bits',0,27,139,13,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'AEN8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'AEN9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'AEN10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'AEN11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'AEN12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'AEN13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'AEN14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'AEN15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'WAD8',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'WAD9',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'WAD10',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'WAD11',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'WAD12',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'WAD13',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'WAD14',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'WAD15',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_3_Bits',0,27,159,13,3
	.word	69988
	.byte	25
	.byte	'_Ifx_GTM_DPLL_CTRL_4_Bits',0,27,162,13,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'AEN16',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'AEN17',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'AEN18',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'AEN19',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'AEN20',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'AEN21',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'AEN22',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'AEN23',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'WAD16',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'WAD17',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'WAD18',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'WAD19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'WAD20',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'WAD21',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'WAD22',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'WAD23',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_4_Bits',0,27,182,13,3
	.word	70368
	.byte	25
	.byte	'_Ifx_GTM_DPLL_DLA_Bits',0,27,185,13,16,4,36
	.byte	'DLA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DLA_Bits',0,27,189,13,3
	.word	70752
	.byte	25
	.byte	'_Ifx_GTM_DPLL_DT_S_ACT_Bits',0,27,192,13,16,4,36
	.byte	'DT_S_ACT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_S_ACT_Bits',0,27,196,13,3
	.word	70851
	.byte	25
	.byte	'_Ifx_GTM_DPLL_DT_S_Bits',0,27,199,13,16,4,36
	.byte	'DT_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_S_Bits',0,27,203,13,3
	.word	70965
	.byte	25
	.byte	'_Ifx_GTM_DPLL_DT_T_ACT_Bits',0,27,206,13,16,4,36
	.byte	'DT_T_ACT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_T_ACT_Bits',0,27,210,13,3
	.word	71067
	.byte	25
	.byte	'_Ifx_GTM_DPLL_DTA_Bits',0,27,213,13,16,4,36
	.byte	'DTA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DTA_Bits',0,27,217,13,3
	.word	71181
	.byte	25
	.byte	'_Ifx_GTM_DPLL_EDT_S_Bits',0,27,221,13,16,4,36
	.byte	'EDT_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EDT_S_Bits',0,27,225,13,3
	.word	71280
	.byte	25
	.byte	'_Ifx_GTM_DPLL_EDT_T_Bits',0,27,229,13,16,4,36
	.byte	'EDT_T',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EDT_T_Bits',0,27,233,13,3
	.word	71385
	.byte	25
	.byte	'_Ifx_GTM_DPLL_EIRQ_EN_Bits',0,27,236,13,16,4,36
	.byte	'PDI_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'PEI_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TINI_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TAXI_EIRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SISI_EIRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TISI_EIRQ_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MSI_EIRQ_EN',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MTI_EIRQ_EN',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SASI_EIRQ_EN',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TASI_EIRQ_EN',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'PWI_EIRQ_EN',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'W2I_EIRQ_EN',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'W1I_EIRQ_EN',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'GL1I_EIRQ_EN',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'LL1I_EIRQ_EN',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EI_EIRQ_EN',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'GL2I_EIRQ_EN',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'LL2I_EIRQ_EN',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TE0I_EIRQ_EN',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TE1I_EIRQ_EN',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TE2I_EIRQ_EN',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TE3I_EIRQ_EN',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TE4I_EIRQ_EN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'CDTI_EIRQ_EN',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'CDSI_EIRQ_EN',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TORI',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'SORI',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'DCGI',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EIRQ_EN_Bits',0,27,139,14,3
	.word	71490
	.byte	25
	.byte	'_Ifx_GTM_DPLL_FTV_S_Bits',0,27,142,14,16,4,36
	.byte	'STATE_FT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_FTV_S_Bits',0,27,146,14,3
	.word	72221
	.byte	25
	.byte	'_Ifx_GTM_DPLL_FTV_T_Bits',0,27,149,14,16,4,36
	.byte	'TRIGGER_FT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_FTV_T_Bits',0,27,153,14,3
	.word	72329
	.byte	25
	.byte	'_Ifx_GTM_DPLL_ID_PMTR_Bits',0,27,156,14,16,4,36
	.byte	'ID_PMTR_x',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ID_PMTR_Bits',0,27,160,14,3
	.word	72439
	.byte	25
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_Bits',0,27,163,14,16,4,36
	.byte	'INC_CNT1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_INC_CNT1_Bits',0,27,167,14,3
	.word	72551
	.byte	25
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_Bits',0,27,171,14,16,4,36
	.byte	'INC_CNT2',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_INC_CNT2_Bits',0,27,175,14,3
	.word	72665
	.byte	25
	.byte	'_Ifx_GTM_DPLL_IRQ_EN_Bits',0,27,178,14,16,4,36
	.byte	'PDI_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'PEI_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TINI_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TAXI_IRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SISI_IRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TISI_IRQ_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MSI_IRQ_EN',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MTI_IRQ_EN',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SASI_IRQ_EN',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TASI_IRQ_EN',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'PWI_IRQ_EN',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'W2I_IRQ_EN',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'W1I_IRQ_EN',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'GL1I_IRQ_EN',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'LL1I_IRQ_EN',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EI_IRQ_EN',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'GL2I_IRQ_EN',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'LL2I_IRQ_EN',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TE0I_IRQ_EN',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TE1I_IRQ_EN',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TE2I_IRQ_EN',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TE3I_IRQ_EN',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TE4I_IRQ_EN',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'CDTI_IRQ_EN',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'CDSI_IRQ_EN',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TORI',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'SORI',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'DCGI',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_EN_Bits',0,27,209,14,3
	.word	72779
	.byte	25
	.byte	'_Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,27,212,14,16,4,36
	.byte	'TRG_PDI',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_PEI',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_TINI',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_TAXI',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG_SISI',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG_TISI',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TRG_MSI',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TRG_MTI',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TRG_SASI',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TRG_TASI',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TRG_PWI',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TRG_W2I',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TRG_W1I',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TRG_GL1I',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TRG_LL1I',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TRG_EI',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TRG_GL2I',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TRG_LL2I',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TRG_TE0I',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TRG_TE1I',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TRG_TE2I',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TRG_TE3I',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TRG_TE4I',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TRG_CDTI',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'TRG_CDSI',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TRG_TORI',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'TRG_SORI',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'TRG_DCGI',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,27,243,14,3
	.word	73483
	.byte	25
	.byte	'_Ifx_GTM_DPLL_IRQ_MODE_Bits',0,27,246,14,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_MODE_Bits',0,27,250,14,3
	.word	74134
	.byte	25
	.byte	'_Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,27,253,14,16,4,36
	.byte	'PDI',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'PEI',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TINI',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TAXI',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SISI',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TISI',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MSI',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MTI',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SASI',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TASI',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'PWI',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'W2I',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'W1I',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'GL1I',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'LL1I',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'EI',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'GL2I',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'LL2I',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TE0I',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TE1I',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TE2I',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TE3I',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TE4I',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'CDTI',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'CDSI',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TORI',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'SORI',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'DCGI',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,27,156,15,3
	.word	74247
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MEDT_S_Bits',0,27,160,15,16,4,36
	.byte	'MEDT_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MEDT_S_Bits',0,27,164,15,3
	.word	74784
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MEDT_T_Bits',0,27,168,15,16,4,36
	.byte	'MEDT_T',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MEDT_T_Bits',0,27,172,15,3
	.word	74892
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MLS1_Bits',0,27,175,15,16,4,36
	.byte	'MLS1',0,4
	.word	33572
	.byte	18,14,2,35,0,36
	.byte	'reserved_18',0,4
	.word	33572
	.byte	14,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MLS1_Bits',0,27,179,15,3
	.word	75000
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MLS2_Bits',0,27,182,15,16,4,36
	.byte	'MLS2',0,4
	.word	33572
	.byte	18,14,2,35,0,36
	.byte	'reserved_18',0,4
	.word	33572
	.byte	14,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MLS2_Bits',0,27,186,15,3
	.word	75102
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MPVAL1_Bits',0,27,190,15,16,4,36
	.byte	'MPVAL1',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'SIX1',0,4
	.word	33572
	.byte	8,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MPVAL1_Bits',0,27,195,15,3
	.word	75204
	.byte	25
	.byte	'_Ifx_GTM_DPLL_MPVAL2_Bits',0,27,199,15,16,4,36
	.byte	'MPVAL2',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'SIX2',0,4
	.word	33572
	.byte	8,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MPVAL2_Bits',0,27,204,15,3
	.word	75328
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NA_Bits',0,27,207,15,16,4,36
	.byte	'DB',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'DW',0,4
	.word	33572
	.byte	10,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NA_Bits',0,27,212,15,3
	.word	75452
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_S_Bits',0,27,215,15,16,4,36
	.byte	'NMB_S',0,4
	.word	33572
	.byte	20,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S_Bits',0,27,219,15,3
	.word	75562
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,27,222,15,16,4,36
	.byte	'NMB_S_TAR',0,4
	.word	33572
	.byte	20,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,27,226,15,3
	.word	75667
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,27,229,15,16,4,36
	.byte	'NMB_S_TAR_OLD',0,4
	.word	33572
	.byte	20,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,27,233,15,3
	.word	75784
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_T_Bits',0,27,236,15,16,4,36
	.byte	'NMB_T',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T_Bits',0,27,240,15,3
	.word	75913
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,27,243,15,16,4,36
	.byte	'NMB_T_TAR',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,27,247,15,3
	.word	76018
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,27,250,15,16,4,36
	.byte	'NMB_T_TAR_OLD',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,27,254,15,3
	.word	76135
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NTI_CNT_Bits',0,27,129,16,16,4,36
	.byte	'NTI_CNT',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NTI_CNT_Bits',0,27,133,16,3
	.word	76264
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NUSC_Bits',0,27,136,16,16,4,36
	.byte	'NUSE',0,4
	.word	33572
	.byte	6,26,2,35,0,36
	.byte	'FSS',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'SYN_S',0,4
	.word	33572
	.byte	6,19,2,35,0,36
	.byte	'SYN_S_OLD',0,4
	.word	33572
	.byte	6,13,2,35,0,36
	.byte	'VSN',0,4
	.word	33572
	.byte	6,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	4,3,2,35,0,36
	.byte	'WNUS',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'WSYN',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'WVSN',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NUSC_Bits',0,27,147,16,3
	.word	76375
	.byte	25
	.byte	'_Ifx_GTM_DPLL_NUTC_Bits',0,27,150,16,16,4,36
	.byte	'NUTE',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'FST',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	2,19,2,35,0,36
	.byte	'SYN_T',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'SYN_T_OLD',0,4
	.word	33572
	.byte	3,13,2,35,0,36
	.byte	'VTN',0,4
	.word	33572
	.byte	6,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	4,3,2,35,0,36
	.byte	'WNUT',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'WSYN',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'WVTN',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NUTC_Bits',0,27,162,16,3
	.word	76593
	.byte	25
	.byte	'_Ifx_GTM_DPLL_OSW_Bits',0,27,165,16,16,4,36
	.byte	'SWON_S',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SWON_T',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	6,24,2,35,0,36
	.byte	'OSS',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_OSW_Bits',0,27,172,16,3
	.word	76834
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PDT_T_Bits',0,27,175,16,16,4,36
	.byte	'DB',0,4
	.word	33572
	.byte	14,18,2,35,0,36
	.byte	'DW',0,4
	.word	33572
	.byte	10,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PDT_T_Bits',0,27,180,16,3
	.word	76991
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSA_Bits',0,27,183,16,16,4,36
	.byte	'PSA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSA_Bits',0,27,187,16,3
	.word	77107
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSAC_Bits',0,27,190,16,16,4,36
	.byte	'PSAC',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSAC_Bits',0,27,194,16,3
	.word	77206
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSSC_Bits',0,27,197,16,16,4,36
	.byte	'PSSC',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSC_Bits',0,27,201,16,3
	.word	77308
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSSM_0_Bits',0,27,204,16,16,4,36
	.byte	'PSSM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSM_0_Bits',0,27,208,16,3
	.word	77410
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSSM_1_Bits',0,27,211,16,16,4,36
	.byte	'PSSM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSM_1_Bits',0,27,215,16,3
	.word	77516
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSTC_Bits',0,27,218,16,16,4,36
	.byte	'PSTC',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTC_Bits',0,27,222,16,3
	.word	77622
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSTM_0_Bits',0,27,225,16,16,4,36
	.byte	'PSTM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTM_0_Bits',0,27,229,16,3
	.word	77724
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PSTM_1_Bits',0,27,232,16,16,4,36
	.byte	'PSTM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTM_1_Bits',0,27,236,16,3
	.word	77830
	.byte	25
	.byte	'_Ifx_GTM_DPLL_PVT_Bits',0,27,239,16,16,4,36
	.byte	'PVT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PVT_Bits',0,27,243,16,3
	.word	77936
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RAM_INI_Bits',0,27,246,16,16,4,36
	.byte	'INIT_1A',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'INIT_1B',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'INIT_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'INIT_RAM',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RAM_INI_Bits',0,27,254,16,3
	.word	78035
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_Bits',0,27,129,17,16,4,36
	.byte	'RCDT_SX',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_SX_Bits',0,27,133,17,3
	.word	78224
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,27,137,17,16,4,36
	.byte	'RCDT_SX_NOM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,27,141,17,3
	.word	78335
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_Bits',0,27,144,17,16,4,36
	.byte	'RCDT_TX',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_TX_Bits',0,27,148,17,3
	.word	78458
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,27,152,17,16,4,36
	.byte	'RCDT_TX_NOM',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,27,156,17,3
	.word	78569
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,27,159,17,16,4,36
	.byte	'RDT_S_ACT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,27,163,17,3
	.word	78692
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RDT_S_Bits',0,27,166,17,16,4,36
	.byte	'RDT_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_S_Bits',0,27,170,17,3
	.word	78809
	.byte	25
	.byte	'_Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,27,173,17,16,4,36
	.byte	'RDT_T_ACT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,27,177,17,3
	.word	78914
	.byte	25
	.byte	'_Ifx_GTM_DPLL_SLR_Bits',0,27,180,17,16,4,36
	.byte	'SLR',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_SLR_Bits',0,27,184,17,3
	.word	79031
	.byte	25
	.byte	'_Ifx_GTM_DPLL_STATUS_Bits',0,27,187,17,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CSO',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'CTO',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'CRO',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'RCS',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'RCT',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'PSE',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SOR',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MS',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TOR',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MT',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'RAM2_ERR',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	2,17,2,35,0,36
	.byte	'LOW_RES',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'CSVS',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'CSVT',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'CAIP2',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'CAIP1',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'ISN',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'ITN',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'BWD2',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'BWD1',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'LOCK2',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'SYS',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'SYT',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'FSD',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'FTD',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'LOCK1',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'ERR',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_STATUS_Bits',0,27,220,17,3
	.word	79129
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,27,223,17,16,4,36
	.byte	'TBU_TS0_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,27,227,17,3
	.word	79710
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,27,230,17,16,4,36
	.byte	'TBU_TS0_T',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,27,234,17,3
	.word	79827
	.byte	25
	.byte	'_Ifx_GTM_DPLL_THMA_Bits',0,27,237,17,16,4,36
	.byte	'THMA',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THMA_Bits',0,27,241,17,3
	.word	79944
	.byte	25
	.byte	'_Ifx_GTM_DPLL_THMI_Bits',0,27,244,17,16,4,36
	.byte	'THMI',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THMI_Bits',0,27,248,17,3
	.word	80046
	.byte	25
	.byte	'_Ifx_GTM_DPLL_THVAL_Bits',0,27,251,17,16,4,36
	.byte	'THVAL',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THVAL_Bits',0,27,255,17,3
	.word	80148
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TLR_Bits',0,27,130,18,16,4,36
	.byte	'TLR',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TLR_Bits',0,27,134,18,3
	.word	80253
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TOV_Bits',0,27,137,18,16,4,36
	.byte	'DB',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'DW',0,4
	.word	33572
	.byte	6,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TOV_Bits',0,27,142,18,3
	.word	80351
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TOV_S_Bits',0,27,145,18,16,4,36
	.byte	'DB',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'DW',0,4
	.word	33572
	.byte	6,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TOV_S_Bits',0,27,150,18,3
	.word	80463
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TS_S_0_Bits',0,27,153,18,16,4,36
	.byte	'STATE_TS',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_S_0_Bits',0,27,157,18,3
	.word	80579
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TS_S_1_Bits',0,27,160,18,16,4,36
	.byte	'STATE_TS',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_S_1_Bits',0,27,164,18,3
	.word	80689
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TS_T_0_Bits',0,27,167,18,16,4,36
	.byte	'TRIGGER_TS',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_T_0_Bits',0,27,171,18,3
	.word	80799
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TS_T_1_Bits',0,27,174,18,16,4,36
	.byte	'TRIGGER_TS',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_T_1_Bits',0,27,178,18,3
	.word	80911
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TSAC_Bits',0,27,181,18,16,4,36
	.byte	'TSAC',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TSAC_Bits',0,27,185,18,3
	.word	81023
	.byte	25
	.byte	'_Ifx_GTM_DPLL_TSF_S_Bits',0,27,188,18,16,4,36
	.byte	'TSF_S',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TSF_S_Bits',0,27,192,18,3
	.word	81125
	.byte	25
	.byte	'_Ifx_GTM_DXINCON_Bits',0,27,195,18,16,4,36
	.byte	'IN00',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'IN01',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'IN02',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'IN03',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'IN10',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'IN11',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'IN12',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'IN13',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'DSS00',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'DSS01',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'DSS02',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'DSS03',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'DSS10',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'DSS11',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'DSS12',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'DSS13',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'reserved_28',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_DXINCON_Bits',0,27,217,18,3
	.word	81230
	.byte	25
	.byte	'_Ifx_GTM_DXOUTCON_Bits',0,27,220,18,16,4,36
	.byte	'OUT00',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'OUT01',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'OUT02',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'OUT03',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'OUT10',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'OUT11',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'OUT12',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'OUT13',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	20,0,2,35,0,0,23
	.byte	'Ifx_GTM_DXOUTCON_Bits',0,27,232,18,3
	.word	81644
	.byte	25
	.byte	'_Ifx_GTM_EIRQ_EN_Bits',0,27,235,18,16,4,36
	.byte	'AEI_TO_XPT_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'AEI_USP_ADDR_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'AEI_IM_ADDR_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'AEI_USP_BE_EIRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_EIRQ_EN_Bits',0,27,242,18,3
	.word	81886
	.byte	25
	.byte	'_Ifx_GTM_F2A_ENABLE_Bits',0,27,245,18,16,4,36
	.byte	'STR0_EN',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'STR1_EN',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'STR2_EN',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'STR3_EN',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'STR4_EN',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'STR5_EN',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'STR6_EN',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'STR7_EN',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_ENABLE_Bits',0,27,128,19,3
	.word	82090
	.byte	25
	.byte	'_Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,27,131,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	9,23,2,35,0,36
	.byte	'reserved_9',0,4
	.word	33572
	.byte	23,0,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,27,135,19,3
	.word	82330
	.byte	25
	.byte	'_Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,27,138,19,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'TMODE',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'DIR',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'reserved_19',0,4
	.word	33572
	.byte	13,0,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG_Bits',0,27,144,19,3
	.word	82455
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_CTRL_Bits',0,27,147,19,16,4,36
	.byte	'RBM',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'RAP',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FLUSH',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'WULOCK',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_CTRL_Bits',0,27,154,19,3
	.word	82613
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,27,157,19,16,4,36
	.byte	'FIFO_EMPTY_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'FIFO_FULL_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FIFO_LWM_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'FIFO_UWM_EIRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'Reserved',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN_Bits',0,27,164,19,3
	.word	82769
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,27,167,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR_Bits',0,27,171,19,3
	.word	82979
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,27,174,19,16,4,36
	.byte	'LEVEL',0,4
	.word	33572
	.byte	11,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	21,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL_Bits',0,27,178,19,3
	.word	83095
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,27,181,19,16,4,36
	.byte	'FIFO_EMPTY_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'FIFO_FULL_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FIFO_LWM_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'FIFO_UWM_IRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN_Bits',0,27,188,19,3
	.word	83216
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,27,191,19,16,4,36
	.byte	'TRG_FIFO_EMPTY',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_FIFO_FULL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_FIFO_LWM',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_FIFO_UWM',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT_Bits',0,27,198,19,3
	.word	83422
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,27,201,19,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'DMA_HYSTERESIS',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'DMA_HYST_DIR',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE_Bits',0,27,207,19,3
	.word	83626
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,27,210,19,16,4,36
	.byte	'FIFO_EMPTY',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'FIFO_FULL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FIFO_LWM',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'FIFO_UWM',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY_Bits',0,27,217,19,3
	.word	83795
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,27,220,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM_Bits',0,27,224,19,3
	.word	83981
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,27,227,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR_Bits',0,27,231,19,3
	.word	84097
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,27,234,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR_Bits',0,27,238,19,3
	.word	84209
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_STATUS_Bits',0,27,241,19,16,4,36
	.byte	'EMPTY',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'FULL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'LOW_WM',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'UP_WM',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_STATUS_Bits',0,27,248,19,3
	.word	84329
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,27,251,19,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM_Bits',0,27,255,19,3
	.word	84492
	.byte	25
	.byte	'_Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,27,130,20,16,4,36
	.byte	'ADDR',0,4
	.word	33572
	.byte	10,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR_Bits',0,27,134,20,3
	.word	84608
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_0_Bits',0,27,137,20,16,4,36
	.byte	'ARU_NEW_DATA0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ARU_NEW_DATA1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ARU_ACC_ACK_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'BRC_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'AEI_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'CMP_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'SPE0_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'SPE1_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	8,16,2,35,0,36
	.byte	'PSM0_CH0_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'PSM0_CH1_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'PSM0_CH2_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'PSM0_CH3_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'PSM0_CH4_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'PSM0_CH5_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'PSM0_CH6_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'PSM0_CH7_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_0_Bits',0,27,157,20,3
	.word	84720
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_10_Bits',0,27,160,20,16,4,36
	.byte	'ATOM4_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ATOM4_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ATOM4_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ATOM4_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ATOM4_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ATOM4_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ATOM4_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ATOM4_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_10_Bits',0,27,171,20,3
	.word	85204
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_1_Bits',0,27,174,20,16,4,36
	.byte	'DPLL_DCG_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DPLL_EDI_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'DPLL_TIN_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'DPLL_TAX_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'DPLL_SIS_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'DPLL_TIS_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'DPLL_MSI_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'DPLL_MTI_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'DPLL_SAS_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'DPLL_TAS_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'DPLL_PWI_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'DPLL_W2I_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'DPLL_W1I_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'DPLL_GLI_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'DPLL_LLI_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'DPLL_EI_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'DPLL_GL2I_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'DPLL_LL2I_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'DPLL_TE0_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'DPLL_TE1_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'DPLL_TE2_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'DPLL_TE3_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'DPLL_TE4_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'DPLL_CDIT_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'DPLL_CDIS_IRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'DPLL_TORI_IRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'DPLL_SORI_IRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_1_Bits',0,27,204,20,3
	.word	85493
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_2_Bits',0,27,207,20,16,4,36
	.byte	'TIM0_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TIM0_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TIM0_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TIM0_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TIM0_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TIM0_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TIM0_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TIM0_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TIM1_CH0_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TIM1_CH1_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TIM1_CH2_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TIM1_CH3_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TIM1_CH4_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TIM1_CH5_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TIM1_CH6_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TIM1_CH7_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TIM2_CH0_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TIM2_CH1_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TIM2_CH2_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TIM2_CH3_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TIM2_CH4_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TIM2_CH5_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TIM2_CH6_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TIM2_CH7_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'TIM3_CH0_IRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TIM3_CH1_IRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'TIM3_CH2_IRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'TIM3_CH3_IRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'TIM3_CH4_IRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'TIM3_CH5_IRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TIM3_CH6_IRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'TIM3_CH7_IRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_2_Bits',0,27,241,20,3
	.word	86234
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_4_Bits',0,27,244,20,16,4,36
	.byte	'MCS0_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MCS0_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MCS0_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'MCS0_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'MCS0_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'MCS0_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MCS0_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MCS0_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'MCS1_CH0_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MCS1_CH1_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'MCS1_CH2_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MCS1_CH3_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'MCS1_CH4_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCS1_CH5_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCS1_CH6_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCS1_CH7_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'MCS2_CH0_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'MCS2_CH1_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'MCS2_CH2_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'MCS2_CH3_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'MCS2_CH4_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'MCS2_CH5_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'MCS2_CH6_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'MCS2_CH7_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'MCS3_CH0_IRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'MCS3_CH1_IRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'MCS3_CH2_IRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'MCS3_CH3_IRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'MCS3_CH4_IRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'MCS3_CH5_IRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'MCS3_CH6_IRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'MCS3_CH7_IRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_4_Bits',0,27,150,21,3
	.word	87067
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_6_Bits',0,27,153,21,16,4,36
	.byte	'TOM0_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TOM0_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TOM0_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TOM0_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TOM0_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TOM0_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TOM0_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TOM0_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TOM0_CH8_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TOM0_CH9_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TOM0_CH10_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TOM0_CH11_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TOM0_CH12_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TOM0_CH13_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TOM0_CH14_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TOM0_CH15_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TOM1_CH0_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TOM1_CH1_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TOM1_CH2_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TOM1_CH3_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TOM1_CH4_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TOM1_CH5_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TOM1_CH6_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TOM1_CH7_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'TOM1_CH8_IRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TOM1_CH9_IRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'TOM1_CH10_IRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'TOM1_CH11_IRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'TOM1_CH12_IRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'TOM1_CH13_IRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TOM1_CH14_IRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'TOM1_CH15_IRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_6_Bits',0,27,187,21,3
	.word	87900
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_7_Bits',0,27,190,21,16,4,36
	.byte	'TOM2_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TOM2_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TOM2_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TOM2_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TOM2_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TOM2_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TOM2_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TOM2_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TOM2_CH8_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TOM2_CH9_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TOM2_CH10_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TOM2_CH11_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TOM2_CH12_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TOM2_CH13_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TOM2_CH14_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TOM2_CH15_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_7_Bits',0,27,209,21,3
	.word	88745
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_9_Bits',0,27,212,21,16,4,36
	.byte	'ATOM0_CH0_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ATOM0_CH1_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ATOM0_CH2_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ATOM0_CH3_IRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ATOM0_CH4_IRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ATOM0_CH5_IRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ATOM0_CH6_IRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ATOM0_CH7_IRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ATOM1_CH0_IRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ATOM1_CH1_IRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ATOM1_CH2_IRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ATOM1_CH3_IRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'ATOM1_CH4_IRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'ATOM1_CH5_IRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'ATOM1_CH6_IRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'ATOM1_CH7_IRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'ATOM2_CH0_IRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'ATOM2_CH1_IRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'ATOM2_CH2_IRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'ATOM2_CH3_IRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'ATOM2_CH4_IRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'ATOM2_CH5_IRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'ATOM2_CH6_IRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'ATOM2_CH7_IRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'ATOM3_CH0_IRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'ATOM3_CH1_IRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'ATOM3_CH2_IRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'ATOM3_CH3_IRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'ATOM3_CH4_IRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'ATOM3_CH5_IRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'ATOM3_CH6_IRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'ATOM3_CH7_IRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_9_Bits',0,27,246,21,3
	.word	89223
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_CEI0_Bits',0,27,249,21,16,4,36
	.byte	'FIFO0_CH0_EIRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'FIFO0_CH1_EIRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FIFO0_CH2_EIRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'FIFO0_CH3_EIRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'FIFO0_CH4_EIRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'FIFO0_CH5_EIRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'FIFO0_CH6_EIRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'FIFO0_CH7_EIRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI0_Bits',0,27,132,22,3
	.word	90088
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_CEI1_Bits',0,27,135,22,16,4,36
	.byte	'TIM0_CH0_EIRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TIM0_CH1_EIRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TIM0_CH2_EIRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TIM0_CH3_EIRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TIM0_CH4_EIRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TIM0_CH5_EIRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TIM0_CH6_EIRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TIM0_CH7_EIRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TIM1_CH0_EIRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TIM1_CH1_EIRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TIM1_CH2_EIRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TIM1_CH3_EIRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TIM1_CH4_EIRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TIM1_CH5_EIRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TIM1_CH6_EIRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TIM1_CH7_EIRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'TIM2_CH0_EIRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TIM2_CH1_EIRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'TIM2_CH2_EIRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'TIM2_CH3_EIRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'TIM2_CH4_EIRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TIM2_CH5_EIRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TIM2_CH6_EIRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'TIM2_CH7_EIRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'TIM3_CH0_EIRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TIM3_CH1_EIRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'TIM3_CH2_EIRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'TIM3_CH3_EIRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'TIM3_CH4_EIRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'TIM3_CH5_IRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TIM3_CH6_EIRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'TIM3_CH7_EIRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI1_Bits',0,27,169,22,3
	.word	90389
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_CEI3_Bits',0,27,172,22,16,4,36
	.byte	'MCS0_CH0_EIRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MCS0_CH1_EIRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MCS0_CH2_EIRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'MCS0_CH3_EIRQ',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'MCS0_CH4_EIRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'MCS0_CH5_EIRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MCS0_CH6_EIRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MCS0_CH7_EIRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'MCS1_CH0_EIRQ',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MCS1_CH1_EIRQ',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'MCS1_CH2_EIRQ',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MCS1_CH3_EIRQ',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'MCS1_CH4_EIRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCS1_CH5_EIRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCS1_CH6_EIRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCS1_CH7_EIRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'MCS2_CH0_EIRQ',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'MCS2_CH1_EIRQ',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'MCS2_CH2_EIRQ',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'MCS2_CH3_EIRQ',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'MCS2_CH4_EIRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'MCS2_CH5_EIRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'MCS2_CH6_EIRQ',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'MCS2_CH7_EIRQ',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'MCS3_CH0_EIRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'MCS3_CH1_EIRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'MCS3_CH2_EIRQ',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'MCS3_CH3_EIRQ',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'MCS3_CH4_EIRQ',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'MCS3_CH5_EIRQ',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'MCS3_CH6_EIRQ',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'MCS3_CH7_EIRQ',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI3_Bits',0,27,206,22,3
	.word	91259
	.byte	25
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_Bits',0,27,209,22,16,4,36
	.byte	'GTM_EIRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'BRC_EIRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'FIFO0_EIRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TIM0_EIRQ',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TIM1_EIRQ',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TIM2_EIRQ',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TIM3_EIRQ',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'MCS0_EIRQ',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCS1_EIRQ',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCS2_EIRQ',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCS3_EIRQ',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SPE0_EIRQ',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'SPE1_EIRQ',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'reserved_22',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'CMP_EIRQ',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'DPLL_EIRQ',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'reserved_26',0,4
	.word	33572
	.byte	6,0,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_MEI_Bits',0,27,231,22,3
	.word	92130
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,27,234,22,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL_Bits',0,27,244,22,3
	.word	92625
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,27,247,22,16,4,36
	.byte	'INSEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'INSEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'INSEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'INSEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'INSEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'INSEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'INSEL6',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'INSEL7',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL_Bits',0,27,129,23,3
	.word	92836
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,27,132,23,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	3,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	3,25,2,35,0,36
	.byte	'reserved_7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	3,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'reserved_15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	3,13,2,35,0,36
	.byte	'reserved_19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	3,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	9,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0_Bits',0,27,146,23,3
	.word	93065
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,27,149,23,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0_Bits',0,27,158,23,3
	.word	93386
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,27,161,23,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL_Bits',0,27,171,23,3
	.word	93592
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,27,174,23,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'SEL8',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'SEL9',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'SEL10',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'SEL11',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'SEL12',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'SEL13',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'SEL14',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'SEL15',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL_Bits',0,27,192,23,3
	.word	93807
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,27,195,23,16,4,36
	.byte	'CH0SEL',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'CH1SEL',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'CH2SEL',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'CH3SEL',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'CH4SEL',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'CH5SEL',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'CH6SEL',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'CH7SEL',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL_Bits',0,27,205,23,3
	.word	94148
	.byte	25
	.byte	'_Ifx_GTM_IRQ_EN_Bits',0,27,208,23,16,4,36
	.byte	'AEI_TO_XPT_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'AEI_USP_ADDR_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'AEI_IM_ADDR_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'AEI_USP_BE_IRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_EN_Bits',0,27,215,23,3
	.word	94373
	.byte	25
	.byte	'_Ifx_GTM_IRQ_FORCINT_Bits',0,27,218,23,16,4,36
	.byte	'TRG_AEI_TO_XPT',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_AEI_USP_ADDR',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_AEI_IM_ADDR',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_AEI_USP_BE',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_FORCINT_Bits',0,27,225,23,3
	.word	94571
	.byte	25
	.byte	'_Ifx_GTM_IRQ_MODE_Bits',0,27,228,23,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_MODE_Bits',0,27,232,23,3
	.word	94767
	.byte	25
	.byte	'_Ifx_GTM_IRQ_NOTIFY_Bits',0,27,235,23,16,4,36
	.byte	'AEI_TO_XPT',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'AEI_USP_ADDR',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'AEI_IM_ADDR',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'AEI_USP_BE',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_NOTIFY_Bits',0,27,242,23,3
	.word	94870
	.byte	25
	.byte	'_Ifx_GTM_KRST0_Bits',0,27,245,23,16,4,36
	.byte	'RST',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'RSTSTAT',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_KRST0_Bits',0,27,250,23,3
	.word	95048
	.byte	25
	.byte	'_Ifx_GTM_KRST1_Bits',0,27,253,23,16,4,36
	.byte	'RST',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_GTM_KRST1_Bits',0,27,129,24,3
	.word	95159
	.byte	25
	.byte	'_Ifx_GTM_KRSTCLR_Bits',0,27,132,24,16,4,36
	.byte	'CLR',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_GTM_KRSTCLR_Bits',0,27,136,24,3
	.word	95251
	.byte	25
	.byte	'_Ifx_GTM_MAP_CTRL_Bits',0,27,139,24,16,4,36
	.byte	'TSEL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SSL',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'LSEL',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	11,16,2,35,0,36
	.byte	'TSPP0_EN',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'TSPP0_DLD',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'reserved_18',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'TSPP0_I0V',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'TSPP0_I1V',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'TSPP0_I2V',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'TSPP1_EN',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TSPP1_DLD',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'reserved_26',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'TSPP1_I0V',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'TSPP1_I1V',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TSPP1_I2V',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'reserved_31',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_MAP_CTRL_Bits',0,27,159,24,3
	.word	95347
	.byte	25
	.byte	'_Ifx_GTM_MCFG_CTRL_Bits',0,27,162,24,16,4,36
	.byte	'MEM0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'MEM1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'MEM2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'MEM3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCFG_CTRL_Bits',0,27,169,24,3
	.word	95777
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH0_CTRG_Bits',0,27,172,24,16,4,36
	.byte	'TRG0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TRG6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TRG7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TRG8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TRG9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TRG10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TRG11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TRG12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TRG13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TRG14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TRG15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH0_CTRG_Bits',0,27,191,24,3
	.word	95926
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH0_STRG_Bits',0,27,194,24,16,4,36
	.byte	'TRG0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'TRG6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TRG7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'TRG8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'TRG9',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'TRG10',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'TRG11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'TRG12',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'TRG13',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'TRG14',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'TRG15',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH0_STRG_Bits',0,27,213,24,3
	.word	96280
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_ACB_Bits',0,27,216,24,16,4,36
	.byte	'ACB0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ACB1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ACB2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ACB3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACB4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_ACB_Bits',0,27,224,24,3
	.word	96634
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_CTRL_Bits',0,27,227,24,16,4,36
	.byte	'EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ERR',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'CY',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'Z',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'V',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'N',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'CAT',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'CWT',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	6,16,2,35,0,36
	.byte	'SP_CNT',0,4
	.word	33572
	.byte	3,13,2,35,0,36
	.byte	'reserved_19',0,4
	.word	33572
	.byte	13,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_CTRL_Bits',0,27,242,24,3
	.word	96801
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,27,245,24,16,4,36
	.byte	'MCS_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'STK_ERR_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MEM_ERR_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,27,251,24,3
	.word	97081
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,27,254,24,16,4,36
	.byte	'MCS_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'STK_ERR_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MEM_ERR_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,27,132,25,3
	.word	97253
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,27,135,25,16,4,36
	.byte	'TRG_MCS_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_STK_ERR_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_MEM_ERR_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,27,141,25,3
	.word	97420
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,27,144,25,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,27,148,25,3
	.word	97600
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,27,151,25,16,4,36
	.byte	'MCS_IRQ',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'STK_ERR_IRQ',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MEM_ERR_IRQ',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,27,157,25,3
	.word	97717
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_PC_Bits',0,27,160,25,16,4,36
	.byte	'PC',0,4
	.word	33572
	.byte	14,18,2,35,0,36
	.byte	'reserved_14',0,4
	.word	33572
	.byte	18,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_PC_Bits',0,27,164,25,3
	.word	97883
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R0_Bits',0,27,167,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R0_Bits',0,27,171,25,3
	.word	97983
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R1_Bits',0,27,174,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R1_Bits',0,27,178,25,3
	.word	98085
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R2_Bits',0,27,181,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R2_Bits',0,27,185,25,3
	.word	98187
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R3_Bits',0,27,188,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R3_Bits',0,27,192,25,3
	.word	98289
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R4_Bits',0,27,195,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R4_Bits',0,27,199,25,3
	.word	98391
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R5_Bits',0,27,202,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R5_Bits',0,27,206,25,3
	.word	98493
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R6_Bits',0,27,209,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R6_Bits',0,27,213,25,3
	.word	98595
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH_R7_Bits',0,27,216,25,16,4,36
	.byte	'DATA',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R7_Bits',0,27,220,25,3
	.word	98697
	.byte	25
	.byte	'_Ifx_GTM_MCS_CTRL_Bits',0,27,223,25,16,4,36
	.byte	'SCHED',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'HLT_SP_OFL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	14,16,2,35,0,36
	.byte	'RAM_RST',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'reserved_17',0,4
	.word	33572
	.byte	15,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CTRL_Bits',0,27,230,25,3
	.word	98799
	.byte	25
	.byte	'_Ifx_GTM_MCS_ERR_Bits',0,27,233,25,16,4,36
	.byte	'ERR0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ERR1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ERR2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ERR3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ERR4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ERR5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ERR6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ERR7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_ERR_Bits',0,27,244,25,3
	.word	98963
	.byte	25
	.byte	'_Ifx_GTM_MCS_RST_Bits',0,27,247,25,16,4,36
	.byte	'RST0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'RST1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'RST2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'RST3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'RST4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'RST5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'RST6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'RST7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'CAT0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'CAT1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'CAT2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'CAT3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'CAT4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'CAT5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'CAT6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'CAT7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'CWT0',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'CWT1',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'CWT2',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'CWT3',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'CWT4',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'CWT5',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'CWT6',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'CWT7',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_RST_Bits',0,27,146,26,3
	.word	99172
	.byte	25
	.byte	'_Ifx_GTM_MCSINTCLR_Bits',0,27,149,26,16,4,36
	.byte	'MCS000',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MCS001',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MCS010',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'MCS011',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'MCS100',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'MCS101',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MCS110',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MCS111',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'MCS200',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MCS201',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'MCS210',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MCS211',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'MCS300',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCS301',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCS310',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCS311',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCSINTCLR_Bits',0,27,168,26,3
	.word	99638
	.byte	25
	.byte	'_Ifx_GTM_MCSINTSTAT_Bits',0,27,171,26,16,4,36
	.byte	'MCS000',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MCS001',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MCS010',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'MCS011',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'MCS100',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'MCS101',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MCS110',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MCS111',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'MCS200',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MCS201',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'MCS210',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MCS211',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'MCS300',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCS301',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCS310',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCS311',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_MCSINTSTAT_Bits',0,27,190,26,3
	.word	100012
	.byte	25
	.byte	'_Ifx_GTM_MON_ACTIVITY_0_Bits',0,27,193,26,16,4,36
	.byte	'MCA_0_0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'MCA_0_1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'MCA_0_2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'MCA_0_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'MCA_0_4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'MCA_0_5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'MCA_0_6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'MCA_0_7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'MCA_1_0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MCA_1_1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'MCA_1_2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'MCA_1_3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'MCA_1_4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'MCA_1_5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'MCA_1_6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'MCA_1_7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'MCA_2_0',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'MCA_2_1',0,4
	.word	33572
	.byte	1,14,2,35,0,36
	.byte	'MCA_2_2',0,4
	.word	33572
	.byte	1,13,2,35,0,36
	.byte	'MCA_2_3',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'MCA_2_4',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'MCA_2_5',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'MCA_2_6',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'MCA_2_7',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'MCA_3_0',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'MCA_3_1',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'MCA_3_2',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'MCA_3_3',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'MCA_3_4',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'MCA_3_5',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'MCA_3_6',0,4
	.word	33572
	.byte	1,1,2,35,0,36
	.byte	'MCA_3_7',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_MON_ACTIVITY_0_Bits',0,27,227,26,3
	.word	100388
	.byte	25
	.byte	'_Ifx_GTM_MON_STATUS_Bits',0,27,230,26,16,4,36
	.byte	'ACT_CMU0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ACT_CMU1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'ACT_CMU2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'ACT_CMU3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'ACT_CMU4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ACT_CMU5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'ACT_CMU6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'ACT_CMU7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'ACT_CMUFX0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'ACT_CMUFX1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'ACT_CMUFX2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'ACT_CMUFX3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'ACT_CMUFX4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'CMP_ERR',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'reserved_17',0,4
	.word	33572
	.byte	3,12,2,35,0,36
	.byte	'MCS0_ERR',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'MCS1_ERR',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'MCS2_ERR',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'MCS3_ERR',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_MON_STATUS_Bits',0,27,253,26,3
	.word	101069
	.byte	25
	.byte	'_Ifx_GTM_MSCIN_INHCON_Bits',0,27,128,27,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'SEL8',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'SEL9',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'SEL10',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'SEL11',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'SEL12',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'SEL13',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'SEL14',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'SEL15',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCIN_INHCON_Bits',0,27,146,27,3
	.word	101572
	.byte	25
	.byte	'_Ifx_GTM_MSCIN_INLCON_Bits',0,27,149,27,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'SEL8',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'SEL9',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'SEL10',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'SEL11',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'SEL12',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'SEL13',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'SEL14',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'SEL15',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCIN_INLCON_Bits',0,27,167,27,3
	.word	101903
	.byte	25
	.byte	'_Ifx_GTM_MSCSET_CON0_Bits',0,27,170,27,16,4,36
	.byte	'SEL0',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'SEL1',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'SEL2',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'SEL3',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON0_Bits',0,27,180,27,3
	.word	102234
	.byte	25
	.byte	'_Ifx_GTM_MSCSET_CON1_Bits',0,27,183,27,16,4,36
	.byte	'SEL4',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'SEL5',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'SEL6',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'SEL7',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON1_Bits',0,27,193,27,3
	.word	102456
	.byte	25
	.byte	'_Ifx_GTM_MSCSET_CON2_Bits',0,27,196,27,16,4,36
	.byte	'SEL8',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'SEL9',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'SEL10',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'SEL11',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON2_Bits',0,27,206,27,3
	.word	102678
	.byte	25
	.byte	'_Ifx_GTM_MSCSET_CON3_Bits',0,27,209,27,16,4,36
	.byte	'SEL12',0,4
	.word	33572
	.byte	5,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'SEL13',0,4
	.word	33572
	.byte	5,19,2,35,0,36
	.byte	'reserved_13',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'SEL14',0,4
	.word	33572
	.byte	5,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'SEL15',0,4
	.word	33572
	.byte	5,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON3_Bits',0,27,219,27,3
	.word	102902
	.byte	25
	.byte	'_Ifx_GTM_OCS_Bits',0,27,222,27,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'SUS',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'SUS_P',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'SUSSTA',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'reserved_30',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_OCS_Bits',0,27,229,27,3
	.word	103128
	.byte	25
	.byte	'_Ifx_GTM_ODA_Bits',0,27,232,27,16,4,36
	.byte	'DDREN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'DREN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_ODA_Bits',0,27,237,27,3
	.word	103274
	.byte	25
	.byte	'_Ifx_GTM_OTBU0T_Bits',0,27,240,27,16,4,36
	.byte	'CV',0,4
	.word	33572
	.byte	27,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'CM',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'reserved_30',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU0T_Bits',0,27,246,27,3
	.word	103380
	.byte	25
	.byte	'_Ifx_GTM_OTBU1T_Bits',0,27,249,27,16,4,36
	.byte	'CV',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'EN',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU1T_Bits',0,27,255,27,3
	.word	103511
	.byte	25
	.byte	'_Ifx_GTM_OTBU2T_Bits',0,27,130,28,16,4,36
	.byte	'CV',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'EN',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'reserved_29',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU2T_Bits',0,27,136,28,3
	.word	103642
	.byte	25
	.byte	'_Ifx_GTM_OTSC0_Bits',0,27,139,28,16,4,36
	.byte	'B0LMT',0,4
	.word	33572
	.byte	3,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'B0LMI',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'B0HMT',0,4
	.word	33572
	.byte	3,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'B0HMI',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'B1LMT',0,4
	.word	33572
	.byte	3,13,2,35,0,36
	.byte	'reserved_19',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'B1LMI',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'B1HMT',0,4
	.word	33572
	.byte	3,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'B1HMI',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTSC0_Bits',0,27,153,28,3
	.word	103773
	.byte	25
	.byte	'_Ifx_GTM_OTSC1_Bits',0,27,156,28,16,4,36
	.byte	'MCS',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'MI',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'MOE',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'reserved_10',0,4
	.word	33572
	.byte	22,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTSC1_Bits',0,27,163,28,3
	.word	104055
	.byte	25
	.byte	'_Ifx_GTM_OTSS_Bits',0,27,166,28,16,4,36
	.byte	'OTGB0',0,4
	.word	33572
	.byte	4,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	4,24,2,35,0,36
	.byte	'OTGB1',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'reserved_12',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'OTGB2',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'reserved_20',0,4
	.word	33572
	.byte	12,0,2,35,0,0,23
	.byte	'Ifx_GTM_OTSS_Bits',0,27,174,28,3
	.word	104199
	.byte	25
	.byte	'_Ifx_GTM_REV_Bits',0,27,177,28,16,4,36
	.byte	'STEP',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'NO',0,4
	.word	33572
	.byte	4,20,2,35,0,36
	.byte	'MINOR',0,4
	.word	33572
	.byte	4,16,2,35,0,36
	.byte	'MAJOR',0,4
	.word	33572
	.byte	4,12,2,35,0,36
	.byte	'DEV_CODE0',0,4
	.word	33572
	.byte	4,8,2,35,0,36
	.byte	'DEV_CODE1',0,4
	.word	33572
	.byte	4,4,2,35,0,36
	.byte	'DEV_CODE2',0,4
	.word	33572
	.byte	4,0,2,35,0,0,23
	.byte	'Ifx_GTM_REV_Bits',0,27,186,28,3
	.word	104371
	.byte	25
	.byte	'_Ifx_GTM_RST_Bits',0,27,189,28,16,4,36
	.byte	'RST',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_GTM_RST_Bits',0,27,193,28,3
	.word	104549
	.byte	25
	.byte	'_Ifx_GTM_SPE_CMP_Bits',0,27,196,28,16,4,36
	.byte	'CMP',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CMP_Bits',0,27,200,28,3
	.word	104637
	.byte	25
	.byte	'_Ifx_GTM_SPE_CNT_Bits',0,27,203,28,16,4,36
	.byte	'CNT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CNT_Bits',0,27,207,28,3
	.word	104734
	.byte	25
	.byte	'_Ifx_GTM_SPE_CTRL_STAT_Bits',0,27,210,28,16,4,36
	.byte	'SPE_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SIE0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'SIE1',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'SIE2',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRIG_SEL',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'TIM_SEL',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'FSOM',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'SPE_PAT_PTR',0,4
	.word	33572
	.byte	3,21,2,35,0,36
	.byte	'reserved_11',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'AIP',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'ADIR',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'PIP',0,4
	.word	33572
	.byte	3,13,2,35,0,36
	.byte	'PDIR',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'NIP',0,4
	.word	33572
	.byte	3,9,2,35,0,36
	.byte	'reserved_23',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'FSOL',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CTRL_STAT_Bits',0,27,228,28,3
	.word	104831
	.byte	25
	.byte	'_Ifx_GTM_SPE_EIRQ_EN_Bits',0,27,231,28,16,4,36
	.byte	'SPE_NIPD_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SPE_DCHG_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'SPE_PERR_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'SPE_BIS_EIRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SPE_RCMP_EIRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_EIRQ_EN_Bits',0,27,239,28,3
	.word	105185
	.byte	25
	.byte	'_Ifx_GTM_SPE_IRQ_EN_Bits',0,27,242,28,16,4,36
	.byte	'SPE_NIPD_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SPE_DCHG_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'SPE_PERR_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'SPE_BIS_IRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SPE_RCMP_IRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_EN_Bits',0,27,250,28,3
	.word	105413
	.byte	25
	.byte	'_Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,27,253,28,16,4,36
	.byte	'TRG_SPE_NIPD',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_SPE_DCHG',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_SPE_PERR',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_SPE_BIS',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG_SPE_RCMP',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,27,133,29,3
	.word	105634
	.byte	25
	.byte	'_Ifx_GTM_SPE_IRQ_MODE_Bits',0,27,136,29,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_MODE_Bits',0,27,140,29,3
	.word	105850
	.byte	25
	.byte	'_Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,27,143,29,16,4,36
	.byte	'SPE_NIPD',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SPE_DCHG',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'SPE_PERR',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'SPE_BIS',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SPE_RCMP',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'reserved_5',0,4
	.word	33572
	.byte	27,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,27,151,29,3
	.word	105961
	.byte	25
	.byte	'_Ifx_GTM_SPE_OUT_CTRL_Bits',0,27,154,29,16,4,36
	.byte	'SPE_OUT_CTRL',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_OUT_CTRL_Bits',0,27,158,29,3
	.word	106155
	.byte	25
	.byte	'_Ifx_GTM_SPE_OUT_PAT_Bits',0,27,161,29,16,4,36
	.byte	'SPE_OUT_PAT',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_OUT_PAT_Bits',0,27,165,29,3
	.word	106271
	.byte	25
	.byte	'_Ifx_GTM_SPE_PAT_Bits',0,27,168,29,16,4,36
	.byte	'IP0_VAL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'IP0_PAT',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'IP1_VAL',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'IP1_PAT',0,4
	.word	33572
	.byte	3,24,2,35,0,36
	.byte	'IP2_VAL',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'IP2_PAT',0,4
	.word	33572
	.byte	3,20,2,35,0,36
	.byte	'IP3_VAL',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'IP3_PAT',0,4
	.word	33572
	.byte	3,16,2,35,0,36
	.byte	'IP4_VAL',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'IP4_PAT',0,4
	.word	33572
	.byte	3,12,2,35,0,36
	.byte	'IP5_VAL',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'IP5_PAT',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'IP6_VAL',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'IP6_PAT',0,4
	.word	33572
	.byte	3,4,2,35,0,36
	.byte	'IP7_VAL',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'IP7_PAT',0,4
	.word	33572
	.byte	3,0,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_PAT_Bits',0,27,186,29,3
	.word	106384
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH0_BASE_Bits',0,27,189,29,16,4,36
	.byte	'BASE',0,4
	.word	33572
	.byte	27,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH0_BASE_Bits',0,27,193,29,3
	.word	106747
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH0_CTRL_Bits',0,27,196,29,16,4,36
	.byte	'LOW_RES',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CH_CLK_SRC',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH0_CTRL_Bits',0,27,201,29,3
	.word	106855
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH1_BASE_Bits',0,27,204,29,16,4,36
	.byte	'BASE',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH1_BASE_Bits',0,27,208,29,3
	.word	106987
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH1_CTRL_Bits',0,27,211,29,16,4,36
	.byte	'CH_MODE',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CH_CLK_SRC',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH1_CTRL_Bits',0,27,216,29,3
	.word	107095
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH2_BASE_Bits',0,27,219,29,16,4,36
	.byte	'BASE',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH2_BASE_Bits',0,27,223,29,3
	.word	107227
	.byte	25
	.byte	'_Ifx_GTM_TBU_CH2_CTRL_Bits',0,27,226,29,16,4,36
	.byte	'CH_MODE',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CH_CLK_SRC',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'reserved_4',0,4
	.word	33572
	.byte	28,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH2_CTRL_Bits',0,27,231,29,3
	.word	107335
	.byte	25
	.byte	'_Ifx_GTM_TBU_CHEN_Bits',0,27,234,29,16,4,36
	.byte	'ENDIS_CH0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_CH1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_CH2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CHEN_Bits',0,27,240,29,3
	.word	107467
	.byte	25
	.byte	'_Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,27,243,29,16,4,36
	.byte	'SRC_CH0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'SRC_CH1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'SRC_CH2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'SRC_CH3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'SRC_CH4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'SRC_CH5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'SRC_CH6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'SRC_CH7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC_Bits',0,27,254,29,3
	.word	107613
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_CNT_Bits',0,27,129,30,16,4,36
	.byte	'CNT',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CNT_Bits',0,27,133,30,3
	.word	107860
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_CNTS_Bits',0,27,136,30,16,4,36
	.byte	'CNTS',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'ECNT',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CNTS_Bits',0,27,140,30,3
	.word	107963
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_CTRL_Bits',0,27,143,30,16,4,36
	.byte	'TIM_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TIM_MODE',0,4
	.word	33572
	.byte	3,28,2,35,0,36
	.byte	'OSM',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'ARU_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'CICTRL',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'TBU0_SEL',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'GPR0_SEL',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'GPR1_SEL',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'CNTS_SEL',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'DSL',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'ISL',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'ECNT_RESET',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'FLT_EN',0,4
	.word	33572
	.byte	1,15,2,35,0,36
	.byte	'FLT_CNT_FRQ',0,4
	.word	33572
	.byte	2,13,2,35,0,36
	.byte	'EXT_CAP_EN',0,4
	.word	33572
	.byte	1,12,2,35,0,36
	.byte	'FLT_MODE_RE',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'FLT_CTR_RE',0,4
	.word	33572
	.byte	1,10,2,35,0,36
	.byte	'FLT_MODE_FE',0,4
	.word	33572
	.byte	1,9,2,35,0,36
	.byte	'FLT_CTR_FE',0,4
	.word	33572
	.byte	1,8,2,35,0,36
	.byte	'CLK_SEL',0,4
	.word	33572
	.byte	3,5,2,35,0,36
	.byte	'FR_ECNT_OFL',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'EGPR0_SEL',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'EGPR1_SEL',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'TOCTRL',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CTRL_Bits',0,27,169,30,3
	.word	108062
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_ECNT_Bits',0,27,172,30,16,4,36
	.byte	'ECNT',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_ECNT_Bits',0,27,176,30,3
	.word	108605
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_ECTRL_Bits',0,27,179,30,16,4,36
	.byte	'EXT_CAP_SRC',0,4
	.word	33572
	.byte	3,29,2,35,0,36
	.byte	'reserved_3',0,4
	.word	33572
	.byte	29,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_ECTRL_Bits',0,27,183,30,3
	.word	108711
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,27,186,30,16,4,36
	.byte	'NEWVAL_EIRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ECNTOFL_EIRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'CNTOFL_EIRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'GPROFL_EIRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TODET_EIRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'GLITCHDET_EIRQ_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,27,195,30,3
	.word	108825
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_FLT_FE_Bits',0,27,198,30,16,4,36
	.byte	'FLT_FE',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_FLT_FE_Bits',0,27,202,30,3
	.word	109079
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_FLT_RE_Bits',0,27,205,30,16,4,36
	.byte	'FLT_RE',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'reserved_24',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_FLT_RE_Bits',0,27,209,30,3
	.word	109191
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_GPR0_Bits',0,27,212,30,16,4,36
	.byte	'GPR0',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'ECNT',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_GPR0_Bits',0,27,216,30,3
	.word	109303
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_GPR1_Bits',0,27,219,30,16,4,36
	.byte	'GPR1',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'ECNT',0,4
	.word	33572
	.byte	8,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_GPR1_Bits',0,27,223,30,3
	.word	109402
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,27,226,30,16,4,36
	.byte	'NEWVAL_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ECNTOFL_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'CNTOFL_IRQ_EN',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'GPROFL_IRQ_EN',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TODET_IRQ_EN',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'GLITCHDET_IRQ_EN',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,27,235,30,3
	.word	109501
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,27,238,30,16,4,36
	.byte	'TRG_NEWVAL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_ECNTOFL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'TRG_CNTOFL',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'TRG_GPROFL',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TRG_TODET',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'TRG_GLITCHDET',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,27,247,30,3
	.word	109747
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,27,250,30,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,27,254,30,3
	.word	109985
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,27,129,31,16,4,36
	.byte	'NEWVAL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'ECNTOFL',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'CNTOFL',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'GPROFL',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'TODET',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'GLITCHDET',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'reserved_6',0,4
	.word	33572
	.byte	26,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,27,138,31,3
	.word	110102
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_TDUC_Bits',0,27,141,31,16,4,36
	.byte	'TO_CNT',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_TDUC_Bits',0,27,145,31,3
	.word	110314
	.byte	25
	.byte	'_Ifx_GTM_TIM_CH_TDUV_Bits',0,27,148,31,16,4,36
	.byte	'TOV',0,4
	.word	33572
	.byte	8,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	20,4,2,35,0,36
	.byte	'TCS',0,4
	.word	33572
	.byte	3,1,2,35,0,36
	.byte	'reserved_31',0,4
	.word	33572
	.byte	1,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_TDUV_Bits',0,27,154,31,3
	.word	110421
	.byte	25
	.byte	'_Ifx_GTM_TIM_IN_SRC_Bits',0,27,157,31,16,4,36
	.byte	'VAL_0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'MODE_0',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'VAL_1',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'MODE_1',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'VAL_2',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'MODE_2',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'VAL_3',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'MODE_3',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'VAL_4',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'MODE_4',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'VAL_5',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'MODE_5',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'VAL_6',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'MODE_6',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'VAL_7',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'MODE_7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_IN_SRC_Bits',0,27,175,31,3
	.word	110563
	.byte	25
	.byte	'_Ifx_GTM_TIM_RST_Bits',0,27,178,31,16,4,36
	.byte	'RST_CH0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'RST_CH1',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'RST_CH2',0,4
	.word	33572
	.byte	1,29,2,35,0,36
	.byte	'RST_CH3',0,4
	.word	33572
	.byte	1,28,2,35,0,36
	.byte	'RST_CH4',0,4
	.word	33572
	.byte	1,27,2,35,0,36
	.byte	'RST_CH5',0,4
	.word	33572
	.byte	1,26,2,35,0,36
	.byte	'RST_CH6',0,4
	.word	33572
	.byte	1,25,2,35,0,36
	.byte	'RST_CH7',0,4
	.word	33572
	.byte	1,24,2,35,0,36
	.byte	'reserved_8',0,4
	.word	33572
	.byte	24,0,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_RST_Bits',0,27,189,31,3
	.word	110908
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_CM0_Bits',0,27,192,31,16,4,36
	.byte	'CM0',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CM0_Bits',0,27,196,31,3
	.word	111141
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_CM1_Bits',0,27,199,31,16,4,36
	.byte	'CM1',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CM1_Bits',0,27,203,31,3
	.word	111244
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_CN0_Bits',0,27,206,31,16,4,36
	.byte	'CN0',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CN0_Bits',0,27,210,31,3
	.word	111347
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_CTRL_Bits',0,27,213,31,16,4,36
	.byte	'reserved_0',0,4
	.word	33572
	.byte	11,21,2,35,0,36
	.byte	'SL',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'CLK_SRC_SR',0,4
	.word	33572
	.byte	3,17,2,35,0,36
	.byte	'reserved_15',0,4
	.word	33572
	.byte	5,12,2,35,0,36
	.byte	'RST_CCU0',0,4
	.word	33572
	.byte	1,11,2,35,0,36
	.byte	'reserved_21',0,4
	.word	33572
	.byte	3,8,2,35,0,36
	.byte	'TRIGOUT',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'reserved_25',0,4
	.word	33572
	.byte	1,6,2,35,0,36
	.byte	'OSM',0,4
	.word	33572
	.byte	1,5,2,35,0,36
	.byte	'BITREV',0,4
	.word	33572
	.byte	1,4,2,35,0,36
	.byte	'SPEM',0,4
	.word	33572
	.byte	1,3,2,35,0,36
	.byte	'GCM',0,4
	.word	33572
	.byte	1,2,2,35,0,36
	.byte	'reserved_30',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CTRL_Bits',0,27,228,31,3
	.word	111450
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,27,231,31,16,4,36
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,27,236,31,3
	.word	111770
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,27,239,31,16,4,36
	.byte	'TRG_CCU0TC0',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'TRG_CCU1TC0',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,27,244,31,3
	.word	111913
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,27,247,31,16,4,36
	.byte	'IRQ_MODE',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,27,251,31,3
	.word	112062
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,27,254,31,16,4,36
	.byte	'CCU0TC',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'CCU1TC',0,4
	.word	33572
	.byte	1,30,2,35,0,36
	.byte	'reserved_2',0,4
	.word	33572
	.byte	30,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,27,131,32,3
	.word	112179
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_SR0_Bits',0,27,134,32,16,4,36
	.byte	'SR0',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_SR0_Bits',0,27,138,32,3
	.word	112316
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_SR1_Bits',0,27,141,32,16,4,36
	.byte	'SR1',0,4
	.word	33572
	.byte	16,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_SR1_Bits',0,27,145,32,3
	.word	112419
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH_STAT_Bits',0,27,148,32,16,4,36
	.byte	'OL',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	31,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_STAT_Bits',0,27,152,32,3
	.word	112522
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,27,155,32,16,4,36
	.byte	'ACT_TB',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'TB_TRIG',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TBU_SEL',0,4
	.word	33572
	.byte	2,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB_Bits',0,27,161,32,3
	.word	112625
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,27,164,32,16,4,36
	.byte	'ENDIS_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL_Bits',0,27,175,32,3
	.word	112779
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,27,178,32,16,4,36
	.byte	'ENDIS_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT_Bits',0,27,189,32,3
	.word	113069
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,27,192,32,16,4,36
	.byte	'FUPD_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'FUPD_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'FUPD_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'FUPD_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'FUPD_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'FUPD_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'FUPD_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'FUPD_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'RSTCN0_CH0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'RSTCN0_CH1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'RSTCN0_CH2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'RSTCN0_CH3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'RSTCN0_CH4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'RSTCN0_CH5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'RSTCN0_CH6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'RSTCN0_CH7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL_Bits',0,27,210,32,3
	.word	113359
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,27,213,32,16,4,36
	.byte	'HOST_TRIG',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	7,24,2,35,0,36
	.byte	'RST_CH0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'RST_CH1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'RST_CH2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'RST_CH3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'RST_CH4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'RST_CH5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'RST_CH6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'RST_CH7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'UPEN_CTRL0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'UPEN_CTRL1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'UPEN_CTRL2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'UPEN_CTRL3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'UPEN_CTRL4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'UPEN_CTRL5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'UPEN_CTRL6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'UPEN_CTRL7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL_Bits',0,27,233,32,3
	.word	113792
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,27,236,32,16,4,36
	.byte	'INT_TRIG0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'INT_TRIG1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'INT_TRIG2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'INT_TRIG3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'INT_TRIG4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'INT_TRIG5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'INT_TRIG6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'INT_TRIG7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG_Bits',0,27,247,32,3
	.word	114242
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,27,250,32,16,4,36
	.byte	'OUTEN_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL_Bits',0,27,133,33,3
	.word	114512
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,27,136,33,16,4,36
	.byte	'OUTEN_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT_Bits',0,27,147,33,3
	.word	114802
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,27,150,33,16,4,36
	.byte	'ACT_TB',0,4
	.word	33572
	.byte	24,8,2,35,0,36
	.byte	'TB_TRIG',0,4
	.word	33572
	.byte	1,7,2,35,0,36
	.byte	'TBU_SEL',0,4
	.word	33572
	.byte	2,5,2,35,0,36
	.byte	'reserved_27',0,4
	.word	33572
	.byte	5,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB_Bits',0,27,156,33,3
	.word	115092
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,27,159,33,16,4,36
	.byte	'ENDIS_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL_Bits',0,27,170,33,3
	.word	115246
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,27,173,33,16,4,36
	.byte	'ENDIS_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'ENDIS_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'ENDIS_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'ENDIS_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'ENDIS_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'ENDIS_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'ENDIS_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'ENDIS_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT_Bits',0,27,184,33,3
	.word	115536
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,27,187,33,16,4,36
	.byte	'FUPD_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'FUPD_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'FUPD_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'FUPD_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'FUPD_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'FUPD_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'FUPD_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'FUPD_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'RSTCN0_CH0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'RSTCN0_CH1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'RSTCN0_CH2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'RSTCN0_CH3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'RSTCN0_CH4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'RSTCN0_CH5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'RSTCN0_CH6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'RSTCN0_CH7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL_Bits',0,27,205,33,3
	.word	115826
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,27,208,33,16,4,36
	.byte	'HOST_TRIG',0,4
	.word	33572
	.byte	1,31,2,35,0,36
	.byte	'reserved_1',0,4
	.word	33572
	.byte	7,24,2,35,0,36
	.byte	'RST_CH0',0,4
	.word	33572
	.byte	1,23,2,35,0,36
	.byte	'RST_CH1',0,4
	.word	33572
	.byte	1,22,2,35,0,36
	.byte	'RST_CH2',0,4
	.word	33572
	.byte	1,21,2,35,0,36
	.byte	'RST_CH3',0,4
	.word	33572
	.byte	1,20,2,35,0,36
	.byte	'RST_CH4',0,4
	.word	33572
	.byte	1,19,2,35,0,36
	.byte	'RST_CH5',0,4
	.word	33572
	.byte	1,18,2,35,0,36
	.byte	'RST_CH6',0,4
	.word	33572
	.byte	1,17,2,35,0,36
	.byte	'RST_CH7',0,4
	.word	33572
	.byte	1,16,2,35,0,36
	.byte	'UPEN_CTRL0',0,4
	.word	33572
	.byte	2,14,2,35,0,36
	.byte	'UPEN_CTRL1',0,4
	.word	33572
	.byte	2,12,2,35,0,36
	.byte	'UPEN_CTRL2',0,4
	.word	33572
	.byte	2,10,2,35,0,36
	.byte	'UPEN_CTRL3',0,4
	.word	33572
	.byte	2,8,2,35,0,36
	.byte	'UPEN_CTRL4',0,4
	.word	33572
	.byte	2,6,2,35,0,36
	.byte	'UPEN_CTRL5',0,4
	.word	33572
	.byte	2,4,2,35,0,36
	.byte	'UPEN_CTRL6',0,4
	.word	33572
	.byte	2,2,2,35,0,36
	.byte	'UPEN_CTRL7',0,4
	.word	33572
	.byte	2,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL_Bits',0,27,228,33,3
	.word	116259
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,27,231,33,16,4,36
	.byte	'INT_TRIG0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'INT_TRIG1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'INT_TRIG2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'INT_TRIG3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'INT_TRIG4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'INT_TRIG5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'INT_TRIG6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'INT_TRIG7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG_Bits',0,27,242,33,3
	.word	116709
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,27,245,33,16,4,36
	.byte	'OUTEN_CTRL0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_CTRL1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_CTRL2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_CTRL3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_CTRL4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_CTRL5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_CTRL6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_CTRL7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL_Bits',0,27,128,34,3
	.word	116979
	.byte	25
	.byte	'_Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,27,131,34,16,4,36
	.byte	'OUTEN_STAT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'OUTEN_STAT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'OUTEN_STAT2',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'OUTEN_STAT3',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'OUTEN_STAT4',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'OUTEN_STAT5',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'OUTEN_STAT6',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'OUTEN_STAT7',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT_Bits',0,27,142,34,3
	.word	117269
	.byte	25
	.byte	'_Ifx_GTM_TRIGOUT_Bits',0,27,145,34,16,4,36
	.byte	'INT0',0,4
	.word	33572
	.byte	2,30,2,35,0,36
	.byte	'INT1',0,4
	.word	33572
	.byte	2,28,2,35,0,36
	.byte	'TRIG0',0,4
	.word	33572
	.byte	2,26,2,35,0,36
	.byte	'TRIG1',0,4
	.word	33572
	.byte	2,24,2,35,0,36
	.byte	'TRIG2',0,4
	.word	33572
	.byte	2,22,2,35,0,36
	.byte	'TRIG3',0,4
	.word	33572
	.byte	2,20,2,35,0,36
	.byte	'TRIG4',0,4
	.word	33572
	.byte	2,18,2,35,0,36
	.byte	'TRIG5',0,4
	.word	33572
	.byte	2,16,2,35,0,36
	.byte	'reserved_16',0,4
	.word	33572
	.byte	16,0,2,35,0,0,23
	.byte	'Ifx_GTM_TRIGOUT_Bits',0,27,156,34,3
	.word	117559
	.byte	29,27,164,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	40898
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ACCEN0',0,27,169,34,3
	.word	117775
	.byte	29,27,172,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41455
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ACCEN1',0,27,177,34,3
	.word	117839
	.byte	29,27,180,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41532
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG0OUT0',0,27,185,34,3
	.word	117903
	.byte	29,27,188,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41727
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG0OUT1',0,27,193,34,3
	.word	117973
	.byte	29,27,196,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	41832
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG1OUT0',0,27,201,34,3
	.word	118043
	.byte	29,27,204,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42027
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ADCTRIG1OUT1',0,27,209,34,3
	.word	118113
	.byte	29,27,212,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42133
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_AEI_ADDR_XPT',0,27,217,34,3
	.word	118183
	.byte	29,27,220,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42263
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_AFD_CH_BUF_ACC',0,27,225,34,3
	.word	118253
	.byte	29,27,228,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42375
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_ARU_ACCESS',0,27,233,34,3
	.word	118325
	.byte	29,27,236,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42541
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DATA_H',0,27,241,34,3
	.word	118397
	.byte	29,27,244,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42645
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DATA_L',0,27,249,34,3
	.word	118465
	.byte	29,27,252,34,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42749
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0',0,27,129,35,3
	.word	118533
	.byte	29,27,132,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42862
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1',0,27,137,35,3
	.word	118606
	.byte	29,27,140,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	42975
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H',0,27,145,35,3
	.word	118679
	.byte	29,27,148,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43089
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L',0,27,153,35,3
	.word	118752
	.byte	29,27,156,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43203
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H',0,27,161,35,3
	.word	118825
	.byte	29,27,164,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43317
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L',0,27,169,35,3
	.word	118898
	.byte	29,27,172,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43431
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_EN',0,27,177,35,3
	.word	118971
	.byte	29,27,180,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43600
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT',0,27,185,35,3
	.word	119039
	.byte	29,27,188,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43769
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_MODE',0,27,193,35,3
	.word	119112
	.byte	29,27,196,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	43880
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY',0,27,201,35,3
	.word	119182
	.byte	29,27,204,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44036
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB',0,27,209,35,3
	.word	119254
	.byte	29,27,212,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44190
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL',0,27,217,35,3
	.word	119327
	.byte	29,27,220,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44480
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT',0,27,225,35,3
	.word	119404
	.byte	29,27,228,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	44770
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL',0,27,233,35,3
	.word	119481
	.byte	29,27,236,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45203
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL',0,27,241,35,3
	.word	119557
	.byte	29,27,244,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45653
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG',0,27,249,35,3
	.word	119632
	.byte	29,27,252,35,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	45923
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL',0,27,129,36,3
	.word	119707
	.byte	29,27,132,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46213
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT',0,27,137,36,3
	.word	119784
	.byte	29,27,140,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46503
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CM0',0,27,145,36,3
	.word	119861
	.byte	29,27,148,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46608
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CM1',0,27,153,36,3
	.word	119930
	.byte	29,27,156,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46713
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CN0',0,27,161,36,3
	.word	119999
	.byte	29,27,164,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	46818
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_CTRL',0,27,169,36,3
	.word	120068
	.byte	29,27,172,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47236
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN',0,27,177,36,3
	.word	120138
	.byte	29,27,180,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47381
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT',0,27,185,36,3
	.word	120210
	.byte	29,27,188,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47530
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE',0,27,193,36,3
	.word	120287
	.byte	29,27,196,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47649
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY',0,27,201,36,3
	.word	120361
	.byte	29,27,204,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47788
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_RDADDR',0,27,209,36,3
	.word	120437
	.byte	29,27,212,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	47944
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMC',0,27,217,36,3
	.word	120509
	.byte	29,27,220,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48317
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMI',0,27,225,36,3
	.word	120579
	.byte	29,27,228,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48517
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMP',0,27,233,36,3
	.word	120649
	.byte	29,27,236,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	48861
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SOMS',0,27,241,36,3
	.word	120719
	.byte	29,27,244,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49118
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SR0',0,27,249,36,3
	.word	120789
	.byte	29,27,252,36,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49223
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_SR1',0,27,129,37,3
	.word	120858
	.byte	29,27,132,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49328
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ATOM_CH_STAT',0,27,137,37,3
	.word	120927
	.byte	29,27,140,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49540
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_EIRQ_EN',0,27,145,37,3
	.word	120997
	.byte	29,27,148,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	49883
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_EN',0,27,153,37,3
	.word	121066
	.byte	29,27,156,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50224
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT',0,27,161,37,3
	.word	121134
	.byte	29,27,164,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50588
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_MODE',0,27,169,37,3
	.word	121207
	.byte	29,27,172,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	50699
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY',0,27,177,37,3
	.word	121277
	.byte	29,27,180,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51009
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_RST',0,27,185,37,3
	.word	121349
	.byte	29,27,188,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51105
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC0_ADDR',0,27,193,37,3
	.word	121414
	.byte	29,27,196,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51257
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC0_DEST',0,27,201,37,3
	.word	121485
	.byte	29,27,204,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51826
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC10_ADDR',0,27,209,37,3
	.word	121556
	.byte	29,27,212,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	51980
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC10_DEST',0,27,217,37,3
	.word	121628
	.byte	29,27,220,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52551
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC11_ADDR',0,27,225,37,3
	.word	121700
	.byte	29,27,228,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	52705
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC11_DEST',0,27,233,37,3
	.word	121772
	.byte	29,27,236,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53276
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC1_ADDR',0,27,241,37,3
	.word	121844
	.byte	29,27,244,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53428
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC1_DEST',0,27,249,37,3
	.word	121915
	.byte	29,27,252,37,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	53997
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC2_ADDR',0,27,129,38,3
	.word	121986
	.byte	29,27,132,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54149
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC2_DEST',0,27,137,38,3
	.word	122057
	.byte	29,27,140,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54718
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC3_ADDR',0,27,145,38,3
	.word	122128
	.byte	29,27,148,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	54870
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC3_DEST',0,27,153,38,3
	.word	122199
	.byte	29,27,156,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55439
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC4_ADDR',0,27,161,38,3
	.word	122270
	.byte	29,27,164,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	55591
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC4_DEST',0,27,169,38,3
	.word	122341
	.byte	29,27,172,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56160
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC5_ADDR',0,27,177,38,3
	.word	122412
	.byte	29,27,180,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56312
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC5_DEST',0,27,185,38,3
	.word	122483
	.byte	29,27,188,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	56881
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC6_ADDR',0,27,193,38,3
	.word	122554
	.byte	29,27,196,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57033
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC6_DEST',0,27,201,38,3
	.word	122625
	.byte	29,27,204,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57602
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC7_ADDR',0,27,209,38,3
	.word	122696
	.byte	29,27,212,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	57754
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC7_DEST',0,27,217,38,3
	.word	122767
	.byte	29,27,220,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58323
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC8_ADDR',0,27,225,38,3
	.word	122838
	.byte	29,27,228,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	58475
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC8_DEST',0,27,233,38,3
	.word	122909
	.byte	29,27,236,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59044
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC9_ADDR',0,27,241,38,3
	.word	122980
	.byte	29,27,244,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59196
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC9_DEST',0,27,249,38,3
	.word	123051
	.byte	29,27,252,38,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	59765
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_MODE',0,27,129,39,3
	.word	123122
	.byte	29,27,132,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60073
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_PTR1',0,27,137,39,3
	.word	123191
	.byte	29,27,140,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60275
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRIDGE_PTR2',0,27,145,39,3
	.word	123260
	.byte	29,27,148,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60388
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CLC',0,27,153,39,3
	.word	123329
	.byte	29,27,156,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	60531
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_EIRQ_EN',0,27,161,39,3
	.word	123390
	.byte	29,27,164,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61225
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_EN',0,27,169,39,3
	.word	123459
	.byte	29,27,172,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	61789
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_EN',0,27,177,39,3
	.word	123523
	.byte	29,27,180,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	62457
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT',0,27,185,39,3
	.word	123591
	.byte	29,27,188,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63063
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_MODE',0,27,193,39,3
	.word	123664
	.byte	29,27,196,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63174
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY',0,27,201,39,3
	.word	123734
	.byte	29,27,204,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63682
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK0_5_CTRL',0,27,209,39,3
	.word	123806
	.byte	29,27,212,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63799
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_6_CTRL',0,27,217,39,3
	.word	123879
	.byte	29,27,220,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	63934
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_7_CTRL',0,27,225,39,3
	.word	123951
	.byte	29,27,228,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64069
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_CLK_EN',0,27,233,39,3
	.word	124023
	.byte	29,27,236,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64389
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_ECLK_DEN',0,27,241,39,3
	.word	124091
	.byte	29,27,244,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64501
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_ECLK_NUM',0,27,249,39,3
	.word	124161
	.byte	29,27,252,39,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64613
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL',0,27,129,40,3
	.word	124231
	.byte	29,27,132,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64729
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_GCLK_DEN',0,27,137,40,3
	.word	124303
	.byte	29,27,140,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64841
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CMU_GCLK_NUM',0,27,145,40,3
	.word	124373
	.byte	29,27,148,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	64953
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_CTRL',0,27,153,40,3
	.word	124443
	.byte	29,27,156,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65106
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DATAIN',0,27,161,40,3
	.word	124505
	.byte	29,27,164,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65179
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ACB',0,27,169,40,3
	.word	124569
	.byte	29,27,172,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65399
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ACT_STA',0,27,177,40,3
	.word	124635
	.byte	29,27,180,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65509
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1',0,27,185,40,3
	.word	124705
	.byte	29,27,188,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65633
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2',0,27,193,40,3
	.word	124779
	.byte	29,27,196,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65757
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1',0,27,201,40,3
	.word	124853
	.byte	29,27,204,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65878
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2',0,27,209,40,3
	.word	124926
	.byte	29,27,212,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	65999
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ADT_S',0,27,217,40,3
	.word	124999
	.byte	29,27,220,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66117
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_AOSV_2',0,27,225,40,3
	.word	125067
	.byte	29,27,228,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66392
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS',0,27,233,40,3
	.word	125136
	.byte	29,27,236,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66260
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS_1C3',0,27,241,40,3
	.word	125202
	.byte	29,27,244,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66590
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APS_SYNC',0,27,249,40,3
	.word	125272
	.byte	29,27,252,40,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66908
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT',0,27,129,41,3
	.word	125343
	.byte	29,27,132,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	66778
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT_2C',0,27,137,41,3
	.word	125409
	.byte	29,27,140,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67105
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_APT_SYNC',0,27,145,41,3
	.word	125478
	.byte	29,27,148,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67290
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_SX',0,27,153,41,3
	.word	125549
	.byte	29,27,156,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67398
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM',0,27,161,41,3
	.word	125618
	.byte	29,27,164,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67518
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_TX',0,27,169,41,3
	.word	125691
	.byte	29,27,172,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67626
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM',0,27,177,41,3
	.word	125760
	.byte	29,27,180,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67746
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CNT_NUM1',0,27,185,41,3
	.word	125833
	.byte	29,27,188,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67861
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CNT_NUM2',0,27,193,41,3
	.word	125904
	.byte	29,27,196,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	67976
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CRTL_1_SHADOW_STATE',0,27,201,41,3
	.word	125975
	.byte	29,27,204,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68250
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0',0,27,209,41,3
	.word	126057
	.byte	29,27,212,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68482
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE',0,27,217,41,3
	.word	126126
	.byte	29,27,220,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68726
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER',0,27,225,41,3
	.word	126208
	.byte	29,27,228,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	68959
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_1',0,27,233,41,3
	.word	126292
	.byte	29,27,236,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69386
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER',0,27,241,41,3
	.word	126361
	.byte	29,27,244,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69620
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_2',0,27,249,41,3
	.word	126445
	.byte	29,27,252,41,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	69988
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_3',0,27,129,42,3
	.word	126514
	.byte	29,27,132,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70368
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_CTRL_4',0,27,137,42,3
	.word	126583
	.byte	29,27,140,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70752
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DLA',0,27,145,42,3
	.word	126652
	.byte	29,27,148,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70965
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_S',0,27,153,42,3
	.word	126718
	.byte	29,27,156,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	70851
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_S_ACT',0,27,161,42,3
	.word	126785
	.byte	29,27,164,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71067
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DT_T_ACT',0,27,169,42,3
	.word	126856
	.byte	29,27,172,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71181
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_DTA',0,27,177,42,3
	.word	126927
	.byte	29,27,181,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71280
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EDT_S',0,27,186,42,3
	.word	126993
	.byte	29,27,190,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71385
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EDT_T',0,27,195,42,3
	.word	127061
	.byte	29,27,198,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	71490
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_EIRQ_EN',0,27,203,42,3
	.word	127129
	.byte	29,27,206,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72221
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_FTV_S',0,27,211,42,3
	.word	127199
	.byte	29,27,214,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72329
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_FTV_T',0,27,219,42,3
	.word	127267
	.byte	29,27,222,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72439
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_ID_PMTR',0,27,227,42,3
	.word	127335
	.byte	29,27,230,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72551
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_INC_CNT1',0,27,235,42,3
	.word	127405
	.byte	29,27,239,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72665
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_INC_CNT2',0,27,244,42,3
	.word	127476
	.byte	29,27,247,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	72779
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_EN',0,27,252,42,3
	.word	127547
	.byte	29,27,255,42,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	73483
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT',0,27,132,43,3
	.word	127616
	.byte	29,27,135,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74134
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_MODE',0,27,140,43,3
	.word	127690
	.byte	29,27,143,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74247
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY',0,27,148,43,3
	.word	127761
	.byte	29,27,152,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74784
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MEDT_S',0,27,157,43,3
	.word	127834
	.byte	29,27,161,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	74892
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MEDT_T',0,27,166,43,3
	.word	127903
	.byte	29,27,169,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75000
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MLS1',0,27,174,43,3
	.word	127972
	.byte	29,27,177,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75102
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MLS2',0,27,182,43,3
	.word	128039
	.byte	29,27,186,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75204
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MPVAL1',0,27,191,43,3
	.word	128106
	.byte	29,27,195,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75328
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_MPVAL2',0,27,200,43,3
	.word	128175
	.byte	29,27,203,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75452
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NA',0,27,208,43,3
	.word	128244
	.byte	29,27,211,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75562
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S',0,27,216,43,3
	.word	128309
	.byte	29,27,219,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75667
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR',0,27,224,43,3
	.word	128377
	.byte	29,27,227,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75784
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD',0,27,232,43,3
	.word	128449
	.byte	29,27,235,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	75913
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T',0,27,240,43,3
	.word	128525
	.byte	29,27,243,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76018
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR',0,27,248,43,3
	.word	128593
	.byte	29,27,251,43,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76135
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD',0,27,128,44,3
	.word	128665
	.byte	29,27,131,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76264
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NTI_CNT',0,27,136,44,3
	.word	128741
	.byte	29,27,139,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76375
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NUSC',0,27,144,44,3
	.word	128811
	.byte	29,27,147,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76593
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_NUTC',0,27,152,44,3
	.word	128878
	.byte	29,27,155,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76834
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_OSW',0,27,160,44,3
	.word	128945
	.byte	29,27,163,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	76991
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PDT_T',0,27,168,44,3
	.word	129011
	.byte	29,27,171,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77107
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSA',0,27,176,44,3
	.word	129079
	.byte	29,27,179,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77206
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSAC',0,27,184,44,3
	.word	129145
	.byte	29,27,187,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77308
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSC',0,27,192,44,3
	.word	129212
	.byte	29,27,195,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77410
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSM_0',0,27,200,44,3
	.word	129279
	.byte	29,27,203,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77516
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSSM_1',0,27,208,44,3
	.word	129348
	.byte	29,27,211,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77622
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTC',0,27,216,44,3
	.word	129417
	.byte	29,27,219,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77724
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTM_0',0,27,224,44,3
	.word	129484
	.byte	29,27,227,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77830
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PSTM_1',0,27,232,44,3
	.word	129553
	.byte	29,27,235,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	77936
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_PVT',0,27,240,44,3
	.word	129622
	.byte	29,27,243,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78035
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RAM_INI',0,27,248,44,3
	.word	129688
	.byte	29,27,251,44,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78224
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_SX',0,27,128,45,3
	.word	129758
	.byte	29,27,132,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78335
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM',0,27,137,45,3
	.word	129828
	.byte	29,27,140,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78458
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_TX',0,27,145,45,3
	.word	129902
	.byte	29,27,149,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78569
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM',0,27,154,45,3
	.word	129972
	.byte	29,27,157,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78809
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_S',0,27,162,45,3
	.word	130046
	.byte	29,27,165,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78692
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT',0,27,170,45,3
	.word	130114
	.byte	29,27,173,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	78914
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT',0,27,178,45,3
	.word	130186
	.byte	29,27,181,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79031
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_SLR',0,27,186,45,3
	.word	130258
	.byte	29,27,189,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79129
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_STATUS',0,27,194,45,3
	.word	130324
	.byte	29,27,197,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79710
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S',0,27,202,45,3
	.word	130393
	.byte	29,27,205,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79827
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T',0,27,210,45,3
	.word	130465
	.byte	29,27,213,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	79944
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THMA',0,27,218,45,3
	.word	130537
	.byte	29,27,221,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80046
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THMI',0,27,226,45,3
	.word	130604
	.byte	29,27,229,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80148
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_THVAL',0,27,234,45,3
	.word	130671
	.byte	29,27,237,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80253
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TLR',0,27,242,45,3
	.word	130739
	.byte	29,27,245,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80351
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TOV',0,27,250,45,3
	.word	130805
	.byte	29,27,253,45,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80463
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TOV_S',0,27,130,46,3
	.word	130871
	.byte	29,27,133,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80579
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_S_0',0,27,138,46,3
	.word	130939
	.byte	29,27,141,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80689
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_S_1',0,27,146,46,3
	.word	131008
	.byte	29,27,149,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80799
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_T_0',0,27,154,46,3
	.word	131077
	.byte	29,27,157,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	80911
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TS_T_1',0,27,162,46,3
	.word	131146
	.byte	29,27,165,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81023
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TSAC',0,27,170,46,3
	.word	131215
	.byte	29,27,173,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81125
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DPLL_TSF_S',0,27,178,46,3
	.word	131282
	.byte	29,27,181,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81230
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DXINCON',0,27,186,46,3
	.word	131350
	.byte	29,27,189,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81644
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_DXOUTCON',0,27,194,46,3
	.word	131415
	.byte	29,27,197,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	81886
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_EIRQ_EN',0,27,202,46,3
	.word	131481
	.byte	29,27,205,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82090
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_ENABLE',0,27,210,46,3
	.word	131546
	.byte	29,27,213,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82330
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_RD_CH_ARU_RD_FIFO',0,27,218,46,3
	.word	131614
	.byte	29,27,221,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82455
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_F2A_STR_CH_STR_CFG',0,27,226,46,3
	.word	131693
	.byte	29,27,229,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82613
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_CTRL',0,27,234,46,3
	.word	131769
	.byte	29,27,237,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82769
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_EIRQ_EN',0,27,242,46,3
	.word	131839
	.byte	29,27,245,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	82979
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_END_ADDR',0,27,250,46,3
	.word	131912
	.byte	29,27,253,46,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83095
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_FILL_LEVEL',0,27,130,47,3
	.word	131986
	.byte	29,27,133,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83216
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_EN',0,27,138,47,3
	.word	132062
	.byte	29,27,141,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83422
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_FORCINT',0,27,146,47,3
	.word	132134
	.byte	29,27,149,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83626
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_MODE',0,27,154,47,3
	.word	132211
	.byte	29,27,157,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83795
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_IRQ_NOTIFY',0,27,162,47,3
	.word	132285
	.byte	29,27,165,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	83981
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_LOWER_WM',0,27,170,47,3
	.word	132361
	.byte	29,27,173,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84097
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_RD_PTR',0,27,178,47,3
	.word	132435
	.byte	29,27,181,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84209
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_START_ADDR',0,27,186,47,3
	.word	132507
	.byte	29,27,189,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84329
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_STATUS',0,27,194,47,3
	.word	132583
	.byte	29,27,197,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84492
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_UPPER_WM',0,27,202,47,3
	.word	132655
	.byte	29,27,205,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84608
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_FIFO_CH_WR_PTR',0,27,210,47,3
	.word	132729
	.byte	29,27,213,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	84720
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_0',0,27,218,47,3
	.word	132801
	.byte	29,27,221,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	85493
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_1',0,27,226,47,3
	.word	132869
	.byte	29,27,229,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	85204
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_10',0,27,234,47,3
	.word	132937
	.byte	29,27,237,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	86234
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_2',0,27,242,47,3
	.word	133006
	.byte	29,27,245,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	87067
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_4',0,27,250,47,3
	.word	133074
	.byte	29,27,253,47,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	87900
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_6',0,27,130,48,3
	.word	133142
	.byte	29,27,133,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	88745
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_7',0,27,138,48,3
	.word	133210
	.byte	29,27,141,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	89223
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_9',0,27,146,48,3
	.word	133278
	.byte	29,27,149,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	90088
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI0',0,27,154,48,3
	.word	133346
	.byte	29,27,157,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	90389
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI1',0,27,162,48,3
	.word	133417
	.byte	29,27,165,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	91259
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_CEI3',0,27,170,48,3
	.word	133488
	.byte	29,27,173,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92130
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ICM_IRQG_MEI',0,27,178,48,3
	.word	133559
	.byte	29,27,181,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92625
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_CAN_OUTSEL',0,27,186,48,3
	.word	133629
	.byte	29,27,189,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	92836
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_DSADC_INSEL',0,27,194,48,3
	.word	133706
	.byte	29,27,197,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93065
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_DSADC_OUTSEL0',0,27,202,48,3
	.word	133784
	.byte	29,27,205,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93386
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_PSI5_OUTSEL0',0,27,210,48,3
	.word	133864
	.byte	29,27,213,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93592
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_PSI5S_OUTSEL',0,27,218,48,3
	.word	133943
	.byte	29,27,221,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	93807
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_T_OUTSEL',0,27,226,48,3
	.word	134022
	.byte	29,27,229,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94148
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_INOUTSEL_TIM_INSEL',0,27,234,48,3
	.word	134097
	.byte	29,27,237,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94373
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_EN',0,27,242,48,3
	.word	134173
	.byte	29,27,245,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94571
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_FORCINT',0,27,250,48,3
	.word	134237
	.byte	29,27,253,48,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94767
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_MODE',0,27,130,49,3
	.word	134306
	.byte	29,27,133,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	94870
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_IRQ_NOTIFY',0,27,138,49,3
	.word	134372
	.byte	29,27,141,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95048
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_KRST0',0,27,146,49,3
	.word	134440
	.byte	29,27,149,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95159
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_KRST1',0,27,154,49,3
	.word	134503
	.byte	29,27,157,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95251
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_KRSTCLR',0,27,162,49,3
	.word	134566
	.byte	29,27,165,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95347
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MAP_CTRL',0,27,170,49,3
	.word	134631
	.byte	29,27,173,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95777
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCFG_CTRL',0,27,178,49,3
	.word	134697
	.byte	29,27,181,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	95926
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH0_CTRG',0,27,186,49,3
	.word	134764
	.byte	29,27,189,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96280
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH0_STRG',0,27,194,49,3
	.word	134834
	.byte	29,27,197,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96634
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_ACB',0,27,202,49,3
	.word	134904
	.byte	29,27,205,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	96801
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_CTRL',0,27,210,49,3
	.word	134972
	.byte	29,27,213,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97081
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN',0,27,218,49,3
	.word	135041
	.byte	29,27,221,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97253
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN',0,27,226,49,3
	.word	135113
	.byte	29,27,229,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97420
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT',0,27,234,49,3
	.word	135184
	.byte	29,27,237,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97600
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE',0,27,242,49,3
	.word	135260
	.byte	29,27,245,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97717
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY',0,27,250,49,3
	.word	135333
	.byte	29,27,253,49,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97883
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_PC',0,27,130,50,3
	.word	135408
	.byte	29,27,133,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	97983
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R0',0,27,138,50,3
	.word	135475
	.byte	29,27,141,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98085
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R1',0,27,146,50,3
	.word	135542
	.byte	29,27,149,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98187
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R2',0,27,154,50,3
	.word	135609
	.byte	29,27,157,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98289
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R3',0,27,162,50,3
	.word	135676
	.byte	29,27,165,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98391
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R4',0,27,170,50,3
	.word	135743
	.byte	29,27,173,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98493
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R5',0,27,178,50,3
	.word	135810
	.byte	29,27,181,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98595
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R6',0,27,186,50,3
	.word	135877
	.byte	29,27,189,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98697
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CH_R7',0,27,194,50,3
	.word	135944
	.byte	29,27,197,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98799
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_CTRL',0,27,202,50,3
	.word	136011
	.byte	29,27,205,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	98963
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_ERR',0,27,210,50,3
	.word	136077
	.byte	29,27,213,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	99172
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCS_RST',0,27,218,50,3
	.word	136142
	.byte	29,27,221,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	99638
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCSINTCLR',0,27,226,50,3
	.word	136207
	.byte	29,27,229,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100012
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MCSINTSTAT',0,27,234,50,3
	.word	136274
	.byte	29,27,237,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	100388
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MON_ACTIVITY_0',0,27,242,50,3
	.word	136342
	.byte	29,27,245,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101069
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MON_STATUS',0,27,250,50,3
	.word	136414
	.byte	29,27,253,50,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101572
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCIN_INHCON',0,27,130,51,3
	.word	136482
	.byte	29,27,133,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	101903
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCIN_INLCON',0,27,138,51,3
	.word	136552
	.byte	29,27,141,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102234
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON0',0,27,146,51,3
	.word	136622
	.byte	29,27,149,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102456
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON1',0,27,154,51,3
	.word	136691
	.byte	29,27,157,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102678
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON2',0,27,162,51,3
	.word	136760
	.byte	29,27,165,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	102902
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_MSCSET_CON3',0,27,170,51,3
	.word	136829
	.byte	29,27,173,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103128
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OCS',0,27,178,51,3
	.word	136898
	.byte	29,27,181,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103274
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_ODA',0,27,186,51,3
	.word	136959
	.byte	29,27,189,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103380
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU0T',0,27,194,51,3
	.word	137020
	.byte	29,27,197,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103511
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU1T',0,27,202,51,3
	.word	137084
	.byte	29,27,205,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103642
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTBU2T',0,27,210,51,3
	.word	137148
	.byte	29,27,213,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	103773
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTSC0',0,27,218,51,3
	.word	137212
	.byte	29,27,221,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104055
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTSC1',0,27,226,51,3
	.word	137275
	.byte	29,27,229,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104199
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_OTSS',0,27,234,51,3
	.word	137338
	.byte	29,27,237,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104371
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_REV',0,27,242,51,3
	.word	137400
	.byte	29,27,245,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104549
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_RST',0,27,250,51,3
	.word	137461
	.byte	29,27,253,51,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104637
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CMP',0,27,130,52,3
	.word	137522
	.byte	29,27,133,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104734
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CNT',0,27,138,52,3
	.word	137587
	.byte	29,27,141,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	104831
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_CTRL_STAT',0,27,146,52,3
	.word	137652
	.byte	29,27,149,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105185
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_EIRQ_EN',0,27,154,52,3
	.word	137723
	.byte	29,27,157,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105413
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_EN',0,27,162,52,3
	.word	137792
	.byte	29,27,165,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105634
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT',0,27,170,52,3
	.word	137860
	.byte	29,27,173,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105850
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_MODE',0,27,178,52,3
	.word	137933
	.byte	29,27,181,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	105961
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY',0,27,186,52,3
	.word	138003
	.byte	29,27,189,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106155
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_OUT_CTRL',0,27,194,52,3
	.word	138075
	.byte	29,27,197,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106271
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_OUT_PAT',0,27,202,52,3
	.word	138145
	.byte	29,27,205,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106384
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_SPE_PAT',0,27,210,52,3
	.word	138214
	.byte	29,27,213,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106747
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH0_BASE',0,27,218,52,3
	.word	138279
	.byte	29,27,221,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106855
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH0_CTRL',0,27,226,52,3
	.word	138349
	.byte	29,27,229,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	106987
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH1_BASE',0,27,234,52,3
	.word	138419
	.byte	29,27,237,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107095
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH1_CTRL',0,27,242,52,3
	.word	138489
	.byte	29,27,245,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107227
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH2_BASE',0,27,250,52,3
	.word	138559
	.byte	29,27,253,52,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107335
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CH2_CTRL',0,27,130,53,3
	.word	138629
	.byte	29,27,133,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107467
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TBU_CHEN',0,27,138,53,3
	.word	138699
	.byte	29,27,141,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107613
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_AUX_IN_SRC',0,27,146,53,3
	.word	138765
	.byte	29,27,149,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107860
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CNT',0,27,154,53,3
	.word	138837
	.byte	29,27,157,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	107963
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CNTS',0,27,162,53,3
	.word	138905
	.byte	29,27,165,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108062
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_CTRL',0,27,170,53,3
	.word	138974
	.byte	29,27,173,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108605
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_ECNT',0,27,178,53,3
	.word	139043
	.byte	29,27,181,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108711
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_ECTRL',0,27,186,53,3
	.word	139112
	.byte	29,27,189,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	108825
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN',0,27,194,53,3
	.word	139182
	.byte	29,27,197,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109079
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_FLT_FE',0,27,202,53,3
	.word	139254
	.byte	29,27,205,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109191
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_FLT_RE',0,27,210,53,3
	.word	139325
	.byte	29,27,213,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109303
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_GPR0',0,27,218,53,3
	.word	139396
	.byte	29,27,221,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109402
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_GPR1',0,27,226,53,3
	.word	139465
	.byte	29,27,229,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109501
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN',0,27,234,53,3
	.word	139534
	.byte	29,27,237,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109747
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT',0,27,242,53,3
	.word	139605
	.byte	29,27,245,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	109985
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE',0,27,250,53,3
	.word	139681
	.byte	29,27,253,53,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110102
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY',0,27,130,54,3
	.word	139754
	.byte	29,27,133,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110314
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_TDUC',0,27,138,54,3
	.word	139829
	.byte	29,27,141,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110421
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_CH_TDUV',0,27,146,54,3
	.word	139898
	.byte	29,27,149,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110563
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_IN_SRC',0,27,154,54,3
	.word	139967
	.byte	29,27,157,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	110908
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TIM_RST',0,27,162,54,3
	.word	140035
	.byte	29,27,165,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111141
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CM0',0,27,170,54,3
	.word	140100
	.byte	29,27,173,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111244
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CM1',0,27,178,54,3
	.word	140168
	.byte	29,27,181,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111347
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CN0',0,27,186,54,3
	.word	140236
	.byte	29,27,189,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111450
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_CTRL',0,27,194,54,3
	.word	140304
	.byte	29,27,197,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111770
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN',0,27,202,54,3
	.word	140373
	.byte	29,27,205,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	111913
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT',0,27,210,54,3
	.word	140444
	.byte	29,27,213,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112062
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE',0,27,218,54,3
	.word	140520
	.byte	29,27,221,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112179
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY',0,27,226,54,3
	.word	140593
	.byte	29,27,229,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112316
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_SR0',0,27,234,54,3
	.word	140668
	.byte	29,27,237,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112419
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_SR1',0,27,242,54,3
	.word	140736
	.byte	29,27,245,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112522
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_CH_STAT',0,27,250,54,3
	.word	140804
	.byte	29,27,253,54,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112625
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ACT_TB',0,27,130,55,3
	.word	140873
	.byte	29,27,133,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	112779
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_CTRL',0,27,138,55,3
	.word	140946
	.byte	29,27,141,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113069
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_ENDIS_STAT',0,27,146,55,3
	.word	141023
	.byte	29,27,149,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113359
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_FUPD_CTRL',0,27,154,55,3
	.word	141100
	.byte	29,27,157,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	113792
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_GLB_CTRL',0,27,162,55,3
	.word	141176
	.byte	29,27,165,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114242
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_INT_TRIG',0,27,170,55,3
	.word	141251
	.byte	29,27,173,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114512
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_CTRL',0,27,178,55,3
	.word	141326
	.byte	29,27,181,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	114802
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC0_OUTEN_STAT',0,27,186,55,3
	.word	141403
	.byte	29,27,189,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115092
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ACT_TB',0,27,194,55,3
	.word	141480
	.byte	29,27,197,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115246
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_CTRL',0,27,202,55,3
	.word	141553
	.byte	29,27,205,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115536
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_ENDIS_STAT',0,27,210,55,3
	.word	141630
	.byte	29,27,213,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	115826
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_FUPD_CTRL',0,27,218,55,3
	.word	141707
	.byte	29,27,221,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116259
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_GLB_CTRL',0,27,226,55,3
	.word	141783
	.byte	29,27,229,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116709
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_INT_TRIG',0,27,234,55,3
	.word	141858
	.byte	29,27,237,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	116979
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_CTRL',0,27,242,55,3
	.word	141933
	.byte	29,27,245,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	117269
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TOM_TGC1_OUTEN_STAT',0,27,250,55,3
	.word	142010
	.byte	29,27,253,55,9,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	117559
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_TRIGOUT',0,27,130,56,3
	.word	142087
	.byte	10,12
	.word	133
	.byte	11,11,0,25
	.byte	'_Ifx_GTM_AFD_CH',0,27,141,56,25,16,9
	.byte	'BUF_ACC',0
	.word	118253
	.byte	4,2,35,0,9
	.byte	'reserved_4',0
	.word	142152
	.byte	12,2,35,4,0,32
	.word	142161
	.byte	23
	.byte	'Ifx_GTM_AFD_CH',0,27,145,56,3
	.word	142221
	.byte	10,32
	.word	133
	.byte	11,31,0,25
	.byte	'_Ifx_GTM_ATOM_AGC',0,27,148,56,25,64,9
	.byte	'GLB_CTRL',0
	.word	119557
	.byte	4,2,35,0,9
	.byte	'ENDIS_CTRL',0
	.word	119327
	.byte	4,2,35,4,9
	.byte	'ENDIS_STAT',0
	.word	119404
	.byte	4,2,35,8,9
	.byte	'ACT_TB',0
	.word	119254
	.byte	4,2,35,12,9
	.byte	'OUTEN_CTRL',0
	.word	119707
	.byte	4,2,35,16,9
	.byte	'OUTEN_STAT',0
	.word	119784
	.byte	4,2,35,20,9
	.byte	'FUPD_CTRL',0
	.word	119481
	.byte	4,2,35,24,9
	.byte	'INT_TRIG',0
	.word	119632
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	142250
	.byte	32,2,35,32,0,32
	.word	142259
	.byte	23
	.byte	'Ifx_GTM_ATOM_AGC',0,27,159,56,3
	.word	142456
	.byte	29,27,165,56,5,4,9
	.byte	'CTRL',0
	.word	120068
	.byte	4,2,35,0,9
	.byte	'SOMC',0
	.word	120509
	.byte	4,2,35,0,9
	.byte	'SOMI',0
	.word	120579
	.byte	4,2,35,0,9
	.byte	'SOMP',0
	.word	120649
	.byte	4,2,35,0,9
	.byte	'SOMS',0
	.word	120719
	.byte	4,2,35,0,0,10,16
	.word	133
	.byte	11,15,0,25
	.byte	'_Ifx_GTM_ATOM_CH',0,27,162,56,25,64,9
	.byte	'RDADDR',0
	.word	120437
	.byte	4,2,35,0,37
	.word	142487
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	120789
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	120858
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	119861
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	119930
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	119999
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	120927
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	120361
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	120138
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	120210
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	120287
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	142564
	.byte	16,2,35,48,0,32
	.word	142573
	.byte	23
	.byte	'Ifx_GTM_ATOM_CH',0,27,185,56,3
	.word	142797
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK0_5',0,27,188,56,25,4,9
	.byte	'CTRL',0
	.word	123806
	.byte	4,2,35,0,0,32
	.word	142827
	.byte	23
	.byte	'Ifx_GTM_CMU_CLK0_5',0,27,191,56,3
	.word	142868
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK_6',0,27,194,56,25,4,9
	.byte	'CTRL',0
	.word	123879
	.byte	4,2,35,0,0,32
	.word	142901
	.byte	23
	.byte	'Ifx_GTM_CMU_CLK_6',0,27,197,56,3
	.word	142941
	.byte	25
	.byte	'_Ifx_GTM_CMU_CLK_7',0,27,200,56,25,4,9
	.byte	'CTRL',0
	.word	123951
	.byte	4,2,35,0,0,32
	.word	142973
	.byte	23
	.byte	'Ifx_GTM_CMU_CLK_7',0,27,203,56,3
	.word	143013
	.byte	25
	.byte	'_Ifx_GTM_CMU_ECLK',0,27,206,56,25,8,9
	.byte	'NUM',0
	.word	124161
	.byte	4,2,35,0,9
	.byte	'DEN',0
	.word	124091
	.byte	4,2,35,4,0,32
	.word	143045
	.byte	23
	.byte	'Ifx_GTM_CMU_ECLK',0,27,210,56,3
	.word	143096
	.byte	25
	.byte	'_Ifx_GTM_CMU_FXCLK',0,27,213,56,25,4,9
	.byte	'CTRL',0
	.word	124231
	.byte	4,2,35,0,0,32
	.word	143127
	.byte	23
	.byte	'Ifx_GTM_CMU_FXCLK',0,27,216,56,3
	.word	143167
	.byte	25
	.byte	'_Ifx_GTM_F2A_RD_CH',0,27,219,56,25,4,9
	.byte	'ARU_RD_FIFO',0
	.word	131614
	.byte	4,2,35,0,0,32
	.word	143199
	.byte	23
	.byte	'Ifx_GTM_F2A_RD_CH',0,27,222,56,3
	.word	143246
	.byte	25
	.byte	'_Ifx_GTM_F2A_STR_CH',0,27,225,56,25,4,9
	.byte	'STR_CFG',0
	.word	131693
	.byte	4,2,35,0,0,32
	.word	143278
	.byte	23
	.byte	'Ifx_GTM_F2A_STR_CH',0,27,228,56,3
	.word	143322
	.byte	10,8
	.word	133
	.byte	11,7,0,25
	.byte	'_Ifx_GTM_FIFO_CH',0,27,231,56,25,64,9
	.byte	'CTRL',0
	.word	131769
	.byte	4,2,35,0,9
	.byte	'END_ADDR',0
	.word	131912
	.byte	4,2,35,4,9
	.byte	'START_ADDR',0
	.word	132507
	.byte	4,2,35,8,9
	.byte	'UPPER_WM',0
	.word	132655
	.byte	4,2,35,12,9
	.byte	'LOWER_WM',0
	.word	132361
	.byte	4,2,35,16,9
	.byte	'STATUS',0
	.word	132583
	.byte	4,2,35,20,9
	.byte	'FILL_LEVEL',0
	.word	131986
	.byte	4,2,35,24,9
	.byte	'WR_PTR',0
	.word	132729
	.byte	4,2,35,28,9
	.byte	'RD_PTR',0
	.word	132435
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	132285
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	132062
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	132134
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	132211
	.byte	4,2,35,48,9
	.byte	'EIRQ_EN',0
	.word	131839
	.byte	4,2,35,52,9
	.byte	'reserved_38',0
	.word	143355
	.byte	8,2,35,56,0,32
	.word	143364
	.byte	23
	.byte	'Ifx_GTM_FIFO_CH',0,27,248,56,3
	.word	143657
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_CAN',0,27,251,56,25,4,9
	.byte	'OUTSEL',0
	.word	133629
	.byte	4,2,35,0,0,32
	.word	143687
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_CAN',0,27,254,56,3
	.word	143732
	.byte	10,12
	.word	133706
	.byte	11,2,0,10,4
	.word	133
	.byte	11,3,0,25
	.byte	'_Ifx_GTM_INOUTSEL_DSADC',0,27,129,57,25,24,9
	.byte	'INSEL',0
	.word	143767
	.byte	12,2,35,0,9
	.byte	'OUTSEL00',0
	.word	133784
	.byte	4,2,35,12,9
	.byte	'reserved_10',0
	.word	143776
	.byte	4,2,35,16,9
	.byte	'OUTSEL10',0
	.word	133784
	.byte	4,2,35,20,0,32
	.word	143785
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_DSADC',0,27,135,57,3
	.word	143888
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_PSI5',0,27,138,57,25,4,9
	.byte	'OUTSEL0',0
	.word	133864
	.byte	4,2,35,0,0,32
	.word	143925
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_PSI5',0,27,141,57,3
	.word	143972
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_PSI5S',0,27,144,57,25,4,9
	.byte	'OUTSEL',0
	.word	133943
	.byte	4,2,35,0,0,32
	.word	144008
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_PSI5S',0,27,147,57,3
	.word	144055
	.byte	10,60
	.word	134022
	.byte	11,14,0,25
	.byte	'_Ifx_GTM_INOUTSEL_T',0,27,150,57,25,60,9
	.byte	'OUTSEL',0
	.word	144092
	.byte	60,2,35,0,0,32
	.word	144101
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_T',0,27,153,57,3
	.word	144144
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL_TIM',0,27,156,57,25,4,9
	.byte	'INSEL',0
	.word	134097
	.byte	4,2,35,0,0,32
	.word	144177
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL_TIM',0,27,159,57,3
	.word	144221
	.byte	10,24
	.word	133
	.byte	11,23,0,10,40
	.word	133
	.byte	11,39,0,25
	.byte	'_Ifx_GTM_MCS_CH',0,27,162,57,25,128,1,9
	.byte	'R0',0
	.word	135475
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	135542
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	135609
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	135676
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	135743
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	135810
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	135877
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	135944
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	134972
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	134904
	.byte	4,2,35,36,9
	.byte	'reserved_28',0
	.word	144256
	.byte	24,2,35,40,9
	.byte	'PC',0
	.word	135408
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	135333
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	135113
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	135184
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	135260
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	135041
	.byte	4,2,35,84,9
	.byte	'reserved_58',0
	.word	144265
	.byte	40,2,35,88,0,32
	.word	144274
	.byte	23
	.byte	'Ifx_GTM_MCS_CH',0,27,182,57,3
	.word	144567
	.byte	25
	.byte	'_Ifx_GTM_MCS_CH0',0,27,185,57,25,88,9
	.byte	'R0',0
	.word	135475
	.byte	4,2,35,0,9
	.byte	'R1',0
	.word	135542
	.byte	4,2,35,4,9
	.byte	'R2',0
	.word	135609
	.byte	4,2,35,8,9
	.byte	'R3',0
	.word	135676
	.byte	4,2,35,12,9
	.byte	'R4',0
	.word	135743
	.byte	4,2,35,16,9
	.byte	'R5',0
	.word	135810
	.byte	4,2,35,20,9
	.byte	'R6',0
	.word	135877
	.byte	4,2,35,24,9
	.byte	'R7',0
	.word	135944
	.byte	4,2,35,28,9
	.byte	'CTRL',0
	.word	134972
	.byte	4,2,35,32,9
	.byte	'ACB',0
	.word	134904
	.byte	4,2,35,36,9
	.byte	'CTRG',0
	.word	134764
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	134834
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	142564
	.byte	16,2,35,48,9
	.byte	'PC',0
	.word	135408
	.byte	4,2,35,64,9
	.byte	'IRQ_NOTIFY',0
	.word	135333
	.byte	4,2,35,68,9
	.byte	'IRQ_EN',0
	.word	135113
	.byte	4,2,35,72,9
	.byte	'IRQ_FORCINT',0
	.word	135184
	.byte	4,2,35,76,9
	.byte	'IRQ_MODE',0
	.word	135260
	.byte	4,2,35,80,9
	.byte	'EIRQ_EN',0
	.word	135041
	.byte	4,2,35,84,0,32
	.word	144596
	.byte	23
	.byte	'Ifx_GTM_MCS_CH0',0,27,206,57,3
	.word	144896
	.byte	10,56
	.word	133
	.byte	11,55,0,25
	.byte	'_Ifx_GTM_TIM_CH',0,27,209,57,25,120,9
	.byte	'GPR0',0
	.word	139396
	.byte	4,2,35,0,9
	.byte	'GPR1',0
	.word	139465
	.byte	4,2,35,4,9
	.byte	'CNT',0
	.word	138837
	.byte	4,2,35,8,9
	.byte	'ECNT',0
	.word	139043
	.byte	4,2,35,12,9
	.byte	'CNTS',0
	.word	138905
	.byte	4,2,35,16,9
	.byte	'TDUC',0
	.word	139829
	.byte	4,2,35,20,9
	.byte	'TDUV',0
	.word	139898
	.byte	4,2,35,24,9
	.byte	'FLT_RE',0
	.word	139325
	.byte	4,2,35,28,9
	.byte	'FLT_FE',0
	.word	139254
	.byte	4,2,35,32,9
	.byte	'CTRL',0
	.word	138974
	.byte	4,2,35,36,9
	.byte	'ECTRL',0
	.word	139112
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	139754
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	139534
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	139605
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	139681
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	139182
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	144926
	.byte	56,2,35,64,0,32
	.word	144935
	.byte	23
	.byte	'Ifx_GTM_TIM_CH',0,27,228,57,3
	.word	145229
	.byte	25
	.byte	'_Ifx_GTM_TOM_CH',0,27,231,57,25,48,9
	.byte	'CTRL',0
	.word	140304
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	140668
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	140736
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	140100
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	140168
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	140236
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	140804
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	140593
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	140373
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	140444
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	140520
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	143776
	.byte	4,2,35,44,0,32
	.word	145258
	.byte	23
	.byte	'Ifx_GTM_TOM_CH',0,27,245,57,3
	.word	145470
	.byte	10,128,1
	.word	142161
	.byte	11,7,0,32
	.word	145499
	.byte	25
	.byte	'_Ifx_GTM_AFD',0,27,130,58,25,128,1,9
	.byte	'CH',0
	.word	145509
	.byte	128,1,2,35,0,0,32
	.word	145514
	.byte	23
	.byte	'Ifx_GTM_AFD',0,27,133,58,3
	.word	145548
	.byte	25
	.byte	'_Ifx_GTM_ARU',0,27,136,58,25,52,9
	.byte	'ARU_ACCESS',0
	.word	118325
	.byte	4,2,35,0,9
	.byte	'DATA_H',0
	.word	118397
	.byte	4,2,35,4,9
	.byte	'DATA_L',0
	.word	118465
	.byte	4,2,35,8,9
	.byte	'DBG_ACCESS0',0
	.word	118533
	.byte	4,2,35,12,9
	.byte	'DBG_DATA0_H',0
	.word	118679
	.byte	4,2,35,16,9
	.byte	'DBG_DATA0_L',0
	.word	118752
	.byte	4,2,35,20,9
	.byte	'DBG_ACCESS1',0
	.word	118606
	.byte	4,2,35,24,9
	.byte	'DBG_DATA1_H',0
	.word	118825
	.byte	4,2,35,28,9
	.byte	'DBG_DATA1_L',0
	.word	118898
	.byte	4,2,35,32,9
	.byte	'IRQ_NOTIFY',0
	.word	119182
	.byte	4,2,35,36,9
	.byte	'IRQ_EN',0
	.word	118971
	.byte	4,2,35,40,9
	.byte	'IRQ_FORCINT',0
	.word	119039
	.byte	4,2,35,44,9
	.byte	'IRQ_MODE',0
	.word	119112
	.byte	4,2,35,48,0,32
	.word	145574
	.byte	23
	.byte	'Ifx_GTM_ARU',0,27,151,58,3
	.word	145847
	.byte	32
	.word	142573
	.byte	32
	.word	142259
	.byte	32
	.word	142573
	.byte	10,64
	.word	133
	.byte	11,63,0,32
	.word	142573
	.byte	32
	.word	142573
	.byte	32
	.word	142573
	.byte	32
	.word	142573
	.byte	32
	.word	142573
	.byte	32
	.word	142573
	.byte	10,192,8
	.word	133
	.byte	11,191,8,0,25
	.byte	'_Ifx_GTM_ATOM',0,27,154,58,25,128,16,9
	.byte	'CH0',0
	.word	145873
	.byte	64,2,35,0,9
	.byte	'AGC',0
	.word	145878
	.byte	64,2,35,64,9
	.byte	'CH1',0
	.word	145883
	.byte	64,3,35,128,1,9
	.byte	'reserved_C0',0
	.word	145888
	.byte	64,3,35,192,1,9
	.byte	'CH2',0
	.word	145897
	.byte	64,3,35,128,2,9
	.byte	'reserved_140',0
	.word	145888
	.byte	64,3,35,192,2,9
	.byte	'CH3',0
	.word	145902
	.byte	64,3,35,128,3,9
	.byte	'reserved_1C0',0
	.word	145888
	.byte	64,3,35,192,3,9
	.byte	'CH4',0
	.word	145907
	.byte	64,3,35,128,4,9
	.byte	'reserved_240',0
	.word	145888
	.byte	64,3,35,192,4,9
	.byte	'CH5',0
	.word	145912
	.byte	64,3,35,128,5,9
	.byte	'reserved_2C0',0
	.word	145888
	.byte	64,3,35,192,5,9
	.byte	'CH6',0
	.word	145917
	.byte	64,3,35,128,6,9
	.byte	'reserved_340',0
	.word	145888
	.byte	64,3,35,192,6,9
	.byte	'CH7',0
	.word	145922
	.byte	64,3,35,128,7,9
	.byte	'reserved_3C0',0
	.word	145927
	.byte	192,8,3,35,192,7,0,32
	.word	145938
	.byte	23
	.byte	'Ifx_GTM_ATOM',0,27,172,58,3
	.word	146245
	.byte	25
	.byte	'_Ifx_GTM_BRC',0,27,175,58,25,120,9
	.byte	'SRC0_ADDR',0
	.word	121414
	.byte	4,2,35,0,9
	.byte	'SRC0_DEST',0
	.word	121485
	.byte	4,2,35,4,9
	.byte	'SRC1_ADDR',0
	.word	121844
	.byte	4,2,35,8,9
	.byte	'SRC1_DEST',0
	.word	121915
	.byte	4,2,35,12,9
	.byte	'SRC2_ADDR',0
	.word	121986
	.byte	4,2,35,16,9
	.byte	'SRC2_DEST',0
	.word	122057
	.byte	4,2,35,20,9
	.byte	'SRC3_ADDR',0
	.word	122128
	.byte	4,2,35,24,9
	.byte	'SRC3_DEST',0
	.word	122199
	.byte	4,2,35,28,9
	.byte	'SRC4_ADDR',0
	.word	122270
	.byte	4,2,35,32,9
	.byte	'SRC4_DEST',0
	.word	122341
	.byte	4,2,35,36,9
	.byte	'SRC5_ADDR',0
	.word	122412
	.byte	4,2,35,40,9
	.byte	'SRC5_DEST',0
	.word	122483
	.byte	4,2,35,44,9
	.byte	'SRC6_ADDR',0
	.word	122554
	.byte	4,2,35,48,9
	.byte	'SRC6_DEST',0
	.word	122625
	.byte	4,2,35,52,9
	.byte	'SRC7_ADDR',0
	.word	122696
	.byte	4,2,35,56,9
	.byte	'SRC7_DEST',0
	.word	122767
	.byte	4,2,35,60,9
	.byte	'SRC8_ADDR',0
	.word	122838
	.byte	4,2,35,64,9
	.byte	'SRC8_DEST',0
	.word	122909
	.byte	4,2,35,68,9
	.byte	'SRC9_ADDR',0
	.word	122980
	.byte	4,2,35,72,9
	.byte	'SRC9_DEST',0
	.word	123051
	.byte	4,2,35,76,9
	.byte	'SRC10_ADDR',0
	.word	121556
	.byte	4,2,35,80,9
	.byte	'SRC10_DEST',0
	.word	121628
	.byte	4,2,35,84,9
	.byte	'SRC11_ADDR',0
	.word	121700
	.byte	4,2,35,88,9
	.byte	'SRC11_DEST',0
	.word	121772
	.byte	4,2,35,92,9
	.byte	'IRQ_NOTIFY',0
	.word	121277
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	121066
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	121134
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	121207
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	121349
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	120997
	.byte	4,2,35,116,0,32
	.word	146272
	.byte	23
	.byte	'Ifx_GTM_BRC',0,27,207,58,3
	.word	146857
	.byte	25
	.byte	'_Ifx_GTM_BRIDGE',0,27,210,58,25,12,9
	.byte	'MODE',0
	.word	123122
	.byte	4,2,35,0,9
	.byte	'PTR1',0
	.word	123191
	.byte	4,2,35,4,9
	.byte	'PTR2',0
	.word	123260
	.byte	4,2,35,8,0,32
	.word	146883
	.byte	23
	.byte	'Ifx_GTM_BRIDGE',0,27,215,58,3
	.word	146948
	.byte	25
	.byte	'_Ifx_GTM_CMP',0,27,218,58,25,24,9
	.byte	'EN',0
	.word	123459
	.byte	4,2,35,0,9
	.byte	'IRQ_NOTIFY',0
	.word	123734
	.byte	4,2,35,4,9
	.byte	'IRQ_EN',0
	.word	123523
	.byte	4,2,35,8,9
	.byte	'IRQ_FORCINT',0
	.word	123591
	.byte	4,2,35,12,9
	.byte	'IRQ_MODE',0
	.word	123664
	.byte	4,2,35,16,9
	.byte	'EIRQ_EN',0
	.word	123390
	.byte	4,2,35,20,0,32
	.word	146977
	.byte	23
	.byte	'Ifx_GTM_CMP',0,27,226,58,3
	.word	147101
	.byte	10,24
	.word	142827
	.byte	11,5,0,32
	.word	147127
	.byte	32
	.word	142901
	.byte	32
	.word	142973
	.byte	10,24
	.word	143045
	.byte	11,2,0,32
	.word	147151
	.byte	32
	.word	143127
	.byte	25
	.byte	'_Ifx_GTM_CMU',0,27,229,58,25,72,9
	.byte	'CLK_EN',0
	.word	124023
	.byte	4,2,35,0,9
	.byte	'GCLK_NUM',0
	.word	124373
	.byte	4,2,35,4,9
	.byte	'GCLK_DEN',0
	.word	124303
	.byte	4,2,35,8,9
	.byte	'CLK0_5',0
	.word	147136
	.byte	24,2,35,12,9
	.byte	'CLK_6',0
	.word	147141
	.byte	4,2,35,36,9
	.byte	'CLK_7',0
	.word	147146
	.byte	4,2,35,40,9
	.byte	'ECLK',0
	.word	147160
	.byte	24,2,35,44,9
	.byte	'FXCLK',0
	.word	147165
	.byte	4,2,35,68,0,32
	.word	147170
	.byte	23
	.byte	'Ifx_GTM_CMU',0,27,239,58,3
	.word	147317
	.byte	10,92
	.word	133
	.byte	11,91,0,10,44
	.word	133
	.byte	11,43,0,10,96
	.word	127335
	.byte	11,23,0,10,128,1
	.word	133
	.byte	11,127,0,10,96
	.word	129079
	.byte	11,23,0,10,96
	.word	126652
	.byte	11,23,0,10,96
	.word	128244
	.byte	11,23,0,10,96
	.word	126927
	.byte	11,23,0,10,88
	.word	133
	.byte	11,87,0,10,96
	.word	129011
	.byte	11,23,0,10,96
	.word	133
	.byte	11,95,0,10,128,2
	.word	130046
	.byte	11,63,0,10,128,2
	.word	131282
	.byte	11,63,0,10,128,2
	.word	124999
	.byte	11,63,0,10,128,2
	.word	126718
	.byte	11,63,0,10,128,8
	.word	133
	.byte	11,255,7,0,10,96
	.word	131215
	.byte	11,23,0,10,96
	.word	129145
	.byte	11,23,0,10,24
	.word	124569
	.byte	11,5,0,25
	.byte	'_Ifx_GTM_DPLL',0,27,242,58,25,152,30,9
	.byte	'CTRL_0',0
	.word	126057
	.byte	4,2,35,0,9
	.byte	'CTRL_1',0
	.word	126292
	.byte	4,2,35,4,9
	.byte	'CTRL_2',0
	.word	126445
	.byte	4,2,35,8,9
	.byte	'CTRL_3',0
	.word	126514
	.byte	4,2,35,12,9
	.byte	'CTRL_4',0
	.word	126583
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	143776
	.byte	4,2,35,20,9
	.byte	'ACT_STA',0
	.word	124635
	.byte	4,2,35,24,9
	.byte	'OSW',0
	.word	128945
	.byte	4,2,35,28,9
	.byte	'AOSV_2',0
	.word	125067
	.byte	4,2,35,32,9
	.byte	'APT',0
	.word	125343
	.byte	4,2,35,36,9
	.byte	'APS',0
	.word	125136
	.byte	4,2,35,40,9
	.byte	'APT_2C',0
	.word	125409
	.byte	4,2,35,44,9
	.byte	'APS_1C3',0
	.word	125202
	.byte	4,2,35,48,9
	.byte	'NUTC',0
	.word	128878
	.byte	4,2,35,52,9
	.byte	'NUSC',0
	.word	128811
	.byte	4,2,35,56,9
	.byte	'NTI_CNT',0
	.word	128741
	.byte	4,2,35,60,9
	.byte	'IRQ_NOTIFY',0
	.word	127761
	.byte	4,2,35,64,9
	.byte	'IRQ_EN',0
	.word	127547
	.byte	4,2,35,68,9
	.byte	'IRQ_FORCINT',0
	.word	127616
	.byte	4,2,35,72,9
	.byte	'IRQ_MODE',0
	.word	127690
	.byte	4,2,35,76,9
	.byte	'EIRQ_EN',0
	.word	127129
	.byte	4,2,35,80,9
	.byte	'reserved_54',0
	.word	147343
	.byte	92,2,35,84,9
	.byte	'INC_CNT1',0
	.word	127405
	.byte	4,3,35,176,1,9
	.byte	'INC_CNT2',0
	.word	127476
	.byte	4,3,35,180,1,9
	.byte	'APT_SYNC',0
	.word	125478
	.byte	4,3,35,184,1,9
	.byte	'APS_SYNC',0
	.word	125272
	.byte	4,3,35,188,1,9
	.byte	'TBU_TS0_T',0
	.word	130465
	.byte	4,3,35,192,1,9
	.byte	'TBU_TS0_S',0
	.word	130393
	.byte	4,3,35,196,1,9
	.byte	'ADD_IN_LD1',0
	.word	124853
	.byte	4,3,35,200,1,9
	.byte	'ADD_IN_LD2',0
	.word	124926
	.byte	4,3,35,204,1,9
	.byte	'reserved_D0',0
	.word	147352
	.byte	44,3,35,208,1,9
	.byte	'STATUS',0
	.word	130324
	.byte	4,3,35,252,1,9
	.byte	'ID_PMTR',0
	.word	147361
	.byte	96,3,35,128,2,9
	.byte	'reserved_160',0
	.word	147370
	.byte	128,1,3,35,224,2,9
	.byte	'CTRL_0_SHADOW_TRIGGER',0
	.word	126208
	.byte	4,3,35,224,3,9
	.byte	'CTRL_0_SHADOW_STATE',0
	.word	126126
	.byte	4,3,35,228,3,9
	.byte	'CTRL_1_SHADOW_TRIGGER',0
	.word	126361
	.byte	4,3,35,232,3,9
	.byte	'CRTL_1_SHADOW_STATE',0
	.word	125975
	.byte	4,3,35,236,3,9
	.byte	'reserved_1F0',0
	.word	142152
	.byte	12,3,35,240,3,9
	.byte	'RAM_INI',0
	.word	129688
	.byte	4,3,35,252,3,9
	.byte	'PSA',0
	.word	147380
	.byte	96,3,35,128,4,9
	.byte	'reserved_260',0
	.word	142250
	.byte	32,3,35,224,4,9
	.byte	'DLA',0
	.word	147389
	.byte	96,3,35,128,5,9
	.byte	'reserved_2E0',0
	.word	142250
	.byte	32,3,35,224,5,9
	.byte	'NA',0
	.word	147398
	.byte	96,3,35,128,6,9
	.byte	'reserved_360',0
	.word	142250
	.byte	32,3,35,224,6,9
	.byte	'DTA',0
	.word	147407
	.byte	96,3,35,128,7,9
	.byte	'reserved_3E0',0
	.word	142250
	.byte	32,3,35,224,7,9
	.byte	'TS_T_0',0
	.word	131077
	.byte	4,3,35,128,8,9
	.byte	'TS_T_1',0
	.word	131146
	.byte	4,3,35,132,8,9
	.byte	'FTV_T',0
	.word	127267
	.byte	4,3,35,136,8,9
	.byte	'reserved_40C',0
	.word	143776
	.byte	4,3,35,140,8,9
	.byte	'TS_S_0',0
	.word	130939
	.byte	4,3,35,144,8,9
	.byte	'TS_S_1',0
	.word	131008
	.byte	4,3,35,148,8,9
	.byte	'FTV_S',0
	.word	127199
	.byte	4,3,35,152,8,9
	.byte	'reserved_41C',0
	.word	143776
	.byte	4,3,35,156,8,9
	.byte	'THMI',0
	.word	130604
	.byte	4,3,35,160,8,9
	.byte	'THMA',0
	.word	130537
	.byte	4,3,35,164,8,9
	.byte	'THVAL',0
	.word	130671
	.byte	4,3,35,168,8,9
	.byte	'reserved_42C',0
	.word	143776
	.byte	4,3,35,172,8,9
	.byte	'TOV',0
	.word	130805
	.byte	4,3,35,176,8,9
	.byte	'TOV_S',0
	.word	130871
	.byte	4,3,35,180,8,9
	.byte	'ADD_IN_CAL1',0
	.word	124705
	.byte	4,3,35,184,8,9
	.byte	'ADD_IN_CAL2',0
	.word	124779
	.byte	4,3,35,188,8,9
	.byte	'MPVAL1',0
	.word	128106
	.byte	4,3,35,192,8,9
	.byte	'MPVAL2',0
	.word	128175
	.byte	4,3,35,196,8,9
	.byte	'NMB_T_TAR',0
	.word	128593
	.byte	4,3,35,200,8,9
	.byte	'NMB_T_TAR_OLD',0
	.word	128665
	.byte	4,3,35,204,8,9
	.byte	'NMB_S_TAR',0
	.word	128377
	.byte	4,3,35,208,8,9
	.byte	'NMB_S_TAR_OLD',0
	.word	128449
	.byte	4,3,35,212,8,9
	.byte	'reserved_458',0
	.word	143355
	.byte	8,3,35,216,8,9
	.byte	'RCDT_TX',0
	.word	129902
	.byte	4,3,35,224,8,9
	.byte	'RCDT_SX',0
	.word	129758
	.byte	4,3,35,228,8,9
	.byte	'RCDT_TX_NOM',0
	.word	129972
	.byte	4,3,35,232,8,9
	.byte	'RCDT_SX_NOM',0
	.word	129828
	.byte	4,3,35,236,8,9
	.byte	'RDT_T_ACT',0
	.word	130186
	.byte	4,3,35,240,8,9
	.byte	'RDT_S_ACT',0
	.word	130114
	.byte	4,3,35,244,8,9
	.byte	'DT_T_ACT',0
	.word	126856
	.byte	4,3,35,248,8,9
	.byte	'DT_S_ACT',0
	.word	126785
	.byte	4,3,35,252,8,9
	.byte	'EDT_T',0
	.word	127061
	.byte	4,3,35,128,9,9
	.byte	'MEDT_T',0
	.word	127903
	.byte	4,3,35,132,9,9
	.byte	'EDT_S',0
	.word	126993
	.byte	4,3,35,136,9,9
	.byte	'MEDT_S',0
	.word	127834
	.byte	4,3,35,140,9,9
	.byte	'CDT_TX',0
	.word	125691
	.byte	4,3,35,144,9,9
	.byte	'CDT_SX',0
	.word	125549
	.byte	4,3,35,148,9,9
	.byte	'CDT_TX_NOM',0
	.word	125760
	.byte	4,3,35,152,9,9
	.byte	'CDT_SX_NOM',0
	.word	125618
	.byte	4,3,35,156,9,9
	.byte	'TLR',0
	.word	130739
	.byte	4,3,35,160,9,9
	.byte	'SLR',0
	.word	130258
	.byte	4,3,35,164,9,9
	.byte	'reserved_4A8',0
	.word	147416
	.byte	88,3,35,168,9,9
	.byte	'PDT_T',0
	.word	147425
	.byte	96,3,35,128,10,9
	.byte	'reserved_560',0
	.word	147434
	.byte	96,3,35,224,10,9
	.byte	'MLS1',0
	.word	127972
	.byte	4,3,35,192,11,9
	.byte	'MLS2',0
	.word	128039
	.byte	4,3,35,196,11,9
	.byte	'CNT_NUM1',0
	.word	125833
	.byte	4,3,35,200,11,9
	.byte	'CNT_NUM2',0
	.word	125904
	.byte	4,3,35,204,11,9
	.byte	'PVT',0
	.word	129622
	.byte	4,3,35,208,11,9
	.byte	'reserved_5D4',0
	.word	142152
	.byte	12,3,35,212,11,9
	.byte	'PSTC',0
	.word	129417
	.byte	4,3,35,224,11,9
	.byte	'PSSC',0
	.word	129212
	.byte	4,3,35,228,11,9
	.byte	'PSTM_0',0
	.word	129484
	.byte	4,3,35,232,11,9
	.byte	'PSTM_1',0
	.word	129553
	.byte	4,3,35,236,11,9
	.byte	'PSSM_0',0
	.word	129279
	.byte	4,3,35,240,11,9
	.byte	'PSSM_1',0
	.word	129348
	.byte	4,3,35,244,11,9
	.byte	'NMB_T',0
	.word	128525
	.byte	4,3,35,248,11,9
	.byte	'NMB_S',0
	.word	128309
	.byte	4,3,35,252,11,9
	.byte	'RDT_S',0
	.word	147443
	.byte	128,2,3,35,128,12,9
	.byte	'TSF_S',0
	.word	147453
	.byte	128,2,3,35,128,14,9
	.byte	'ADT_S',0
	.word	147463
	.byte	128,2,3,35,128,16,9
	.byte	'DT_S',0
	.word	147473
	.byte	128,2,3,35,128,18,9
	.byte	'reserved_A00',0
	.word	147483
	.byte	128,8,3,35,128,20,9
	.byte	'TSAC',0
	.word	147494
	.byte	96,3,35,128,28,9
	.byte	'reserved_E60',0
	.word	142250
	.byte	32,3,35,224,28,9
	.byte	'PSAC',0
	.word	147503
	.byte	96,3,35,128,29,9
	.byte	'reserved_EE0',0
	.word	142250
	.byte	32,3,35,224,29,9
	.byte	'ACB',0
	.word	147512
	.byte	24,3,35,128,30,0,32
	.word	147521
	.byte	23
	.byte	'Ifx_GTM_DPLL',0,27,232,59,3
	.word	149698
	.byte	10,32
	.word	143199
	.byte	11,7,0,32
	.word	149725
	.byte	10,32
	.word	143278
	.byte	11,7,0,32
	.word	149739
	.byte	25
	.byte	'_Ifx_GTM_F2A',0,27,235,59,25,68,9
	.byte	'RD_CH',0
	.word	149734
	.byte	32,2,35,0,9
	.byte	'STR_CH',0
	.word	149748
	.byte	32,2,35,32,9
	.byte	'ENABLE',0
	.word	131546
	.byte	4,2,35,64,0,32
	.word	149753
	.byte	23
	.byte	'Ifx_GTM_F2A',0,27,240,59,3
	.word	149820
	.byte	10,128,4
	.word	143364
	.byte	11,7,0,32
	.word	149846
	.byte	25
	.byte	'_Ifx_GTM_FIFO',0,27,243,59,25,128,4,9
	.byte	'CH',0
	.word	149856
	.byte	128,4,2,35,0,0,32
	.word	149861
	.byte	23
	.byte	'Ifx_GTM_FIFO',0,27,246,59,3
	.word	149896
	.byte	25
	.byte	'_Ifx_GTM_ICM',0,27,249,59,25,68,9
	.byte	'IRQG_0',0
	.word	132801
	.byte	4,2,35,0,9
	.byte	'IRQG_1',0
	.word	132869
	.byte	4,2,35,4,9
	.byte	'IRQG_2',0
	.word	133006
	.byte	4,2,35,8,9
	.byte	'reserved_C',0
	.word	143776
	.byte	4,2,35,12,9
	.byte	'IRQG_4',0
	.word	133074
	.byte	4,2,35,16,9
	.byte	'reserved_14',0
	.word	143776
	.byte	4,2,35,20,9
	.byte	'IRQG_6',0
	.word	133142
	.byte	4,2,35,24,9
	.byte	'IRQG_7',0
	.word	133210
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	143776
	.byte	4,2,35,32,9
	.byte	'IRQG_9',0
	.word	133278
	.byte	4,2,35,36,9
	.byte	'IRQG_10',0
	.word	132937
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	143776
	.byte	4,2,35,44,9
	.byte	'IRQG_MEI',0
	.word	133559
	.byte	4,2,35,48,9
	.byte	'IRQG_CEI0',0
	.word	133346
	.byte	4,2,35,52,9
	.byte	'IRQG_CEI1',0
	.word	133417
	.byte	4,2,35,56,9
	.byte	'reserved_3C',0
	.word	143776
	.byte	4,2,35,60,9
	.byte	'IRQG_CEI3',0
	.word	133488
	.byte	4,2,35,64,0,32
	.word	149923
	.byte	23
	.byte	'Ifx_GTM_ICM',0,27,140,60,3
	.word	150251
	.byte	10,16
	.word	144177
	.byte	11,3,0,32
	.word	150277
	.byte	32
	.word	144101
	.byte	32
	.word	143785
	.byte	32
	.word	143687
	.byte	32
	.word	143925
	.byte	32
	.word	144008
	.byte	25
	.byte	'_Ifx_GTM_INOUTSEL',0,27,143,60,25,156,1,9
	.byte	'TIM',0
	.word	150286
	.byte	16,2,35,0,9
	.byte	'reserved_10',0
	.word	142564
	.byte	16,2,35,16,9
	.byte	'T',0
	.word	150291
	.byte	60,2,35,32,9
	.byte	'reserved_5C',0
	.word	142564
	.byte	16,2,35,92,9
	.byte	'DSADC',0
	.word	150296
	.byte	24,2,35,108,9
	.byte	'reserved_84',0
	.word	142152
	.byte	12,3,35,132,1,9
	.byte	'CAN',0
	.word	150301
	.byte	4,3,35,144,1,9
	.byte	'PSI5',0
	.word	150306
	.byte	4,3,35,148,1,9
	.byte	'PSI5S',0
	.word	150311
	.byte	4,3,35,152,1,0,32
	.word	150316
	.byte	23
	.byte	'Ifx_GTM_INOUTSEL',0,27,154,60,3
	.word	150490
	.byte	32
	.word	144596
	.byte	10,28
	.word	133
	.byte	11,27,0,32
	.word	144274
	.byte	32
	.word	144274
	.byte	32
	.word	144274
	.byte	32
	.word	144274
	.byte	32
	.word	144274
	.byte	32
	.word	144274
	.byte	32
	.word	144274
	.byte	10,128,24
	.word	133
	.byte	11,255,23,0,25
	.byte	'_Ifx_GTM_MCS',0,27,157,60,25,128,32,9
	.byte	'CH0',0
	.word	150521
	.byte	88,2,35,0,9
	.byte	'reserved_58',0
	.word	150526
	.byte	28,2,35,88,9
	.byte	'CTRL',0
	.word	136011
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	136142
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	136077
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	150535
	.byte	128,1,3,35,128,1,9
	.byte	'CH2',0
	.word	150540
	.byte	128,1,3,35,128,2,9
	.byte	'CH3',0
	.word	150545
	.byte	128,1,3,35,128,3,9
	.byte	'CH4',0
	.word	150550
	.byte	128,1,3,35,128,4,9
	.byte	'CH5',0
	.word	150555
	.byte	128,1,3,35,128,5,9
	.byte	'CH6',0
	.word	150560
	.byte	128,1,3,35,128,6,9
	.byte	'CH7',0
	.word	150565
	.byte	128,1,3,35,128,7,9
	.byte	'reserved_400',0
	.word	150570
	.byte	128,24,3,35,128,8,0,32
	.word	150581
	.byte	23
	.byte	'Ifx_GTM_MCS',0,27,172,60,3
	.word	150805
	.byte	25
	.byte	'_Ifx_GTM_MON',0,27,175,60,25,8,9
	.byte	'STATUS',0
	.word	136414
	.byte	4,2,35,0,9
	.byte	'ACTIVITY_0',0
	.word	136342
	.byte	4,2,35,4,0,32
	.word	150831
	.byte	23
	.byte	'Ifx_GTM_MON',0,27,179,60,3
	.word	150887
	.byte	25
	.byte	'_Ifx_GTM_MSCIN',0,27,182,60,25,8,9
	.byte	'INLCON',0
	.word	136552
	.byte	4,2,35,0,9
	.byte	'INHCON',0
	.word	136482
	.byte	4,2,35,4,0,32
	.word	150913
	.byte	23
	.byte	'Ifx_GTM_MSCIN',0,27,186,60,3
	.word	150967
	.byte	25
	.byte	'_Ifx_GTM_MSCSET',0,27,189,60,25,16,9
	.byte	'CON0',0
	.word	136622
	.byte	4,2,35,0,9
	.byte	'CON1',0
	.word	136691
	.byte	4,2,35,4,9
	.byte	'CON2',0
	.word	136760
	.byte	4,2,35,8,9
	.byte	'CON3',0
	.word	136829
	.byte	4,2,35,12,0,32
	.word	150995
	.byte	23
	.byte	'Ifx_GTM_MSCSET',0,27,195,60,3
	.word	151074
	.byte	10,32
	.word	138145
	.byte	11,7,0,25
	.byte	'_Ifx_GTM_SPE',0,27,198,60,25,128,1,9
	.byte	'CTRL_STAT',0
	.word	137652
	.byte	4,2,35,0,9
	.byte	'PAT',0
	.word	138214
	.byte	4,2,35,4,9
	.byte	'OUT_PAT',0
	.word	151103
	.byte	32,2,35,8,9
	.byte	'OUT_CTRL',0
	.word	138075
	.byte	4,2,35,40,9
	.byte	'IRQ_NOTIFY',0
	.word	138003
	.byte	4,2,35,44,9
	.byte	'IRQ_EN',0
	.word	137792
	.byte	4,2,35,48,9
	.byte	'IRQ_FORCINT',0
	.word	137860
	.byte	4,2,35,52,9
	.byte	'IRQ_MODE',0
	.word	137933
	.byte	4,2,35,56,9
	.byte	'EIRQ_EN',0
	.word	137723
	.byte	4,2,35,60,9
	.byte	'CNT',0
	.word	137587
	.byte	4,2,35,64,9
	.byte	'CMP',0
	.word	137522
	.byte	4,2,35,68,9
	.byte	'reserved_48',0
	.word	144926
	.byte	56,2,35,72,0,32
	.word	151112
	.byte	23
	.byte	'Ifx_GTM_SPE',0,27,212,60,3
	.word	151339
	.byte	25
	.byte	'_Ifx_GTM_TBU',0,27,215,60,25,28,9
	.byte	'CHEN',0
	.word	138699
	.byte	4,2,35,0,9
	.byte	'CH0_CTRL',0
	.word	138349
	.byte	4,2,35,4,9
	.byte	'CH0_BASE',0
	.word	138279
	.byte	4,2,35,8,9
	.byte	'CH1_CTRL',0
	.word	138489
	.byte	4,2,35,12,9
	.byte	'CH1_BASE',0
	.word	138419
	.byte	4,2,35,16,9
	.byte	'CH2_CTRL',0
	.word	138629
	.byte	4,2,35,20,9
	.byte	'CH2_BASE',0
	.word	138559
	.byte	4,2,35,24,0,32
	.word	151365
	.byte	23
	.byte	'Ifx_GTM_TBU',0,27,224,60,3
	.word	151507
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	32
	.word	144935
	.byte	10,136,8
	.word	133
	.byte	11,135,8,0,25
	.byte	'_Ifx_GTM_TIM',0,27,227,60,25,128,16,9
	.byte	'CH0',0
	.word	151533
	.byte	120,2,35,0,9
	.byte	'IN_SRC',0
	.word	139967
	.byte	4,2,35,120,9
	.byte	'RST',0
	.word	140035
	.byte	4,2,35,124,9
	.byte	'CH1',0
	.word	151538
	.byte	120,3,35,128,1,9
	.byte	'reserved_F8',0
	.word	143355
	.byte	8,3,35,248,1,9
	.byte	'CH2',0
	.word	151543
	.byte	120,3,35,128,2,9
	.byte	'reserved_178',0
	.word	143355
	.byte	8,3,35,248,2,9
	.byte	'CH3',0
	.word	151548
	.byte	120,3,35,128,3,9
	.byte	'reserved_1F8',0
	.word	143355
	.byte	8,3,35,248,3,9
	.byte	'CH4',0
	.word	151553
	.byte	120,3,35,128,4,9
	.byte	'reserved_278',0
	.word	143355
	.byte	8,3,35,248,4,9
	.byte	'CH5',0
	.word	151558
	.byte	120,3,35,128,5,9
	.byte	'reserved_2F8',0
	.word	143355
	.byte	8,3,35,248,5,9
	.byte	'CH6',0
	.word	151563
	.byte	120,3,35,128,6,9
	.byte	'reserved_378',0
	.word	143355
	.byte	8,3,35,248,6,9
	.byte	'CH7',0
	.word	151568
	.byte	120,3,35,128,7,9
	.byte	'reserved_3F8',0
	.word	151573
	.byte	136,8,3,35,248,7,0,32
	.word	151584
	.byte	23
	.byte	'Ifx_GTM_TIM',0,27,246,60,3
	.word	151906
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	32
	.word	145258
	.byte	10,144,8
	.word	133
	.byte	11,143,8,0,25
	.byte	'_Ifx_GTM_TOM',0,27,249,60,25,128,16,9
	.byte	'CH0',0
	.word	151932
	.byte	48,2,35,0,9
	.byte	'TGC0_GLB_CTRL',0
	.word	141176
	.byte	4,2,35,48,9
	.byte	'TGC0_ACT_TB',0
	.word	140873
	.byte	4,2,35,52,9
	.byte	'TGC0_FUPD_CTRL',0
	.word	141100
	.byte	4,2,35,56,9
	.byte	'TGC0_INT_TRIG',0
	.word	141251
	.byte	4,2,35,60,9
	.byte	'CH1',0
	.word	151937
	.byte	48,2,35,64,9
	.byte	'TGC0_ENDIS_CTRL',0
	.word	140946
	.byte	4,2,35,112,9
	.byte	'TGC0_ENDIS_STAT',0
	.word	141023
	.byte	4,2,35,116,9
	.byte	'TGC0_OUTEN_CTRL',0
	.word	141326
	.byte	4,2,35,120,9
	.byte	'TGC0_OUTEN_STAT',0
	.word	141403
	.byte	4,2,35,124,9
	.byte	'CH2',0
	.word	151942
	.byte	48,3,35,128,1,9
	.byte	'reserved_B0',0
	.word	142564
	.byte	16,3,35,176,1,9
	.byte	'CH3',0
	.word	151947
	.byte	48,3,35,192,1,9
	.byte	'reserved_F0',0
	.word	142564
	.byte	16,3,35,240,1,9
	.byte	'CH4',0
	.word	151952
	.byte	48,3,35,128,2,9
	.byte	'reserved_130',0
	.word	142564
	.byte	16,3,35,176,2,9
	.byte	'CH5',0
	.word	151957
	.byte	48,3,35,192,2,9
	.byte	'reserved_170',0
	.word	142564
	.byte	16,3,35,240,2,9
	.byte	'CH6',0
	.word	151962
	.byte	48,3,35,128,3,9
	.byte	'reserved_1B0',0
	.word	142564
	.byte	16,3,35,176,3,9
	.byte	'CH7',0
	.word	151967
	.byte	48,3,35,192,3,9
	.byte	'reserved_1F0',0
	.word	142564
	.byte	16,3,35,240,3,9
	.byte	'CH8',0
	.word	151972
	.byte	48,3,35,128,4,9
	.byte	'TGC1_GLB_CTRL',0
	.word	141783
	.byte	4,3,35,176,4,9
	.byte	'TGC1_ACT_TB',0
	.word	141480
	.byte	4,3,35,180,4,9
	.byte	'TGC1_FUPD_CTRL',0
	.word	141707
	.byte	4,3,35,184,4,9
	.byte	'TGC1_INT_TRIG',0
	.word	141858
	.byte	4,3,35,188,4,9
	.byte	'CH9',0
	.word	151977
	.byte	48,3,35,192,4,9
	.byte	'TGC1_ENDIS_CTRL',0
	.word	141553
	.byte	4,3,35,240,4,9
	.byte	'TGC1_ENDIS_STAT',0
	.word	141630
	.byte	4,3,35,244,4,9
	.byte	'TGC1_OUTEN_CTRL',0
	.word	141933
	.byte	4,3,35,248,4,9
	.byte	'TGC1_OUTEN_STAT',0
	.word	142010
	.byte	4,3,35,252,4,9
	.byte	'CH10',0
	.word	151982
	.byte	48,3,35,128,5,9
	.byte	'reserved_2B0',0
	.word	142564
	.byte	16,3,35,176,5,9
	.byte	'CH11',0
	.word	151987
	.byte	48,3,35,192,5,9
	.byte	'reserved_2F0',0
	.word	142564
	.byte	16,3,35,240,5,9
	.byte	'CH12',0
	.word	151992
	.byte	48,3,35,128,6,9
	.byte	'reserved_330',0
	.word	142564
	.byte	16,3,35,176,6,9
	.byte	'CH13',0
	.word	151997
	.byte	48,3,35,192,6,9
	.byte	'reserved_370',0
	.word	142564
	.byte	16,3,35,240,6,9
	.byte	'CH14',0
	.word	152002
	.byte	48,3,35,128,7,9
	.byte	'reserved_3B0',0
	.word	142564
	.byte	16,3,35,176,7,9
	.byte	'CH15',0
	.word	152007
	.byte	48,3,35,192,7,9
	.byte	'reserved_3F0',0
	.word	152012
	.byte	144,8,3,35,240,7,0,32
	.word	152023
	.byte	23
	.byte	'Ifx_GTM_TOM',0,27,167,61,3
	.word	152937
	.byte	10,20
	.word	133
	.byte	11,19,0,8,4,192,4,20,64,9
	.byte	'CTRL',0
	.word	140304
	.byte	4,2,35,0,9
	.byte	'SR0',0
	.word	140668
	.byte	4,2,35,4,9
	.byte	'SR1',0
	.word	140736
	.byte	4,2,35,8,9
	.byte	'CM0',0
	.word	140100
	.byte	4,2,35,12,9
	.byte	'CM1',0
	.word	140168
	.byte	4,2,35,16,9
	.byte	'CN0',0
	.word	140236
	.byte	4,2,35,20,9
	.byte	'STAT',0
	.word	140804
	.byte	4,2,35,24,9
	.byte	'IRQ_NOTIFY',0
	.word	140593
	.byte	4,2,35,28,9
	.byte	'IRQ_EN',0
	.word	140373
	.byte	4,2,35,32,9
	.byte	'IRQ_FORCINT',0
	.word	140444
	.byte	4,2,35,36,9
	.byte	'IRQ_MODE',0
	.word	140520
	.byte	4,2,35,40,9
	.byte	'reserved_2C',0
	.word	152963
	.byte	20,2,35,44,0,32
	.word	152972
	.byte	23
	.byte	'Ifx_GTM_TOM_CH_TYPE',0,4,217,4,4
	.word	153168
	.byte	10,48
	.word	133
	.byte	11,47,0,10,176,3
	.word	133
	.byte	11,175,3,0,8,4,219,4,20,128,4,9
	.byte	'GLB_CTRL',0
	.word	141176
	.byte	4,2,35,0,9
	.byte	'ACT_TB',0
	.word	140873
	.byte	4,2,35,4,9
	.byte	'FUPD_CTRL',0
	.word	141100
	.byte	4,2,35,8,9
	.byte	'INT_TRIG',0
	.word	141251
	.byte	4,2,35,12,9
	.byte	'reserved_tgc0',0
	.word	153202
	.byte	48,2,35,16,9
	.byte	'ENDIS_CTRL',0
	.word	140946
	.byte	4,2,35,64,9
	.byte	'ENDIS_STAT',0
	.word	141023
	.byte	4,2,35,68,9
	.byte	'OUTEN_CTRL',0
	.word	141326
	.byte	4,2,35,72,9
	.byte	'OUTEN_STAT',0
	.word	141403
	.byte	4,2,35,76,9
	.byte	'reserved_tgc1',0
	.word	153211
	.byte	176,3,2,35,80,0,32
	.word	153222
	.byte	23
	.byte	'Ifx_GTM_TOM_TGC_TYPE',0,4,239,4,5
	.word	153428
	.byte	10,128,8
	.word	153222
	.byte	11,1,0,32
	.word	153463
	.byte	10,208,7
	.word	133
	.byte	11,207,7,0,8,4,241,4,20,128,16,9
	.byte	'reserved_tom0',0
	.word	153202
	.byte	48,2,35,0,9
	.byte	'TGC',0
	.word	153473
	.byte	128,8,2,35,48,9
	.byte	'reserved_tgc2',0
	.word	153478
	.byte	208,7,3,35,176,8,0,32
	.word	153489
	.byte	23
	.byte	'Ifx_GTM_TOM_TGCx',0,4,246,4,5
	.word	153559
	.byte	10,128,8
	.word	152972
	.byte	11,15,0,32
	.word	153590
	.byte	8,4,249,4,20,128,16,9
	.byte	'CH',0
	.word	153600
	.byte	128,8,2,35,0,9
	.byte	'reserved_tom1',0
	.word	12795
	.byte	128,8,3,35,128,8,0,32
	.word	153605
	.byte	23
	.byte	'Ifx_GTM_TOM_CHx',0,4,253,4,5
	.word	153651
	.byte	32
	.word	149861
	.byte	10,128,124
	.word	133
	.byte	11,255,123,0,8,4,142,5,20,128,128,1,9
	.byte	'FIFO',0
	.word	153681
	.byte	128,4,2,35,0,9
	.byte	'reserved_Fifo1',0
	.word	153686
	.byte	128,124,3,35,128,4,0,32
	.word	153697
	.byte	23
	.byte	'Ifx_GTM_FIFOx_MOD',0,4,146,5,5
	.word	153747
	.byte	32
	.word	149753
	.byte	10,188,127
	.word	133
	.byte	11,187,127,0,8,4,157,5,20,128,128,1,9
	.byte	'F2A',0
	.word	153779
	.byte	68,2,35,0,9
	.byte	'reserved_F2A1',0
	.word	153784
	.byte	188,127,2,35,68,0,32
	.word	153795
	.byte	23
	.byte	'Ifx_GTM_F2Ax_MOD',0,4,161,5,5
	.word	153841
	.byte	32
	.word	145514
	.byte	10,128,127
	.word	133
	.byte	11,255,126,0,8,4,173,5,20,128,128,1,9
	.byte	'AFD',0
	.word	153872
	.byte	128,1,2,35,0,9
	.byte	'reserved_AFD1',0
	.word	153877
	.byte	128,127,3,35,128,1,0,32
	.word	153888
	.byte	23
	.byte	'Ifx_GTM_AFDx_MOD',0,4,177,5,5
	.word	153936
	.byte	10,80
	.word	133
	.byte	11,79,0,8,4,192,5,20,128,1,9
	.byte	'RDADDR',0
	.word	120437
	.byte	4,2,35,0,9
	.byte	'CTRL',0
	.word	120068
	.byte	4,2,35,4,9
	.byte	'SR0',0
	.word	120789
	.byte	4,2,35,8,9
	.byte	'SR1',0
	.word	120858
	.byte	4,2,35,12,9
	.byte	'CM0',0
	.word	119861
	.byte	4,2,35,16,9
	.byte	'CM1',0
	.word	119930
	.byte	4,2,35,20,9
	.byte	'CN0',0
	.word	119999
	.byte	4,2,35,24,9
	.byte	'STAT',0
	.word	120927
	.byte	4,2,35,28,9
	.byte	'IRQ_NOTIFY',0
	.word	120361
	.byte	4,2,35,32,9
	.byte	'IRQ_EN',0
	.word	120138
	.byte	4,2,35,36,9
	.byte	'IRQ_FORCINT',0
	.word	120210
	.byte	4,2,35,40,9
	.byte	'IRQ_MODE',0
	.word	120287
	.byte	4,2,35,44,9
	.byte	'reserved_30',0
	.word	153967
	.byte	80,2,35,48,0,32
	.word	153976
	.byte	23
	.byte	'Ifx_GTM_ATOM_CH_TYPE',0,4,219,5,4
	.word	154189
	.byte	10,128,8
	.word	153976
	.byte	11,7,0,32
	.word	154224
	.byte	8,4,223,5,20,128,16,9
	.byte	'CH',0
	.word	154234
	.byte	128,8,2,35,0,9
	.byte	'reserved_chx',0
	.word	12795
	.byte	128,8,3,35,128,8,0,32
	.word	154239
	.byte	23
	.byte	'Ifx_GTM_ATOM_CHx',0,4,227,5,4
	.word	154284
	.byte	10,64
	.word	133
	.byte	11,63,0,10,160,15
	.word	133
	.byte	11,159,15,0,8,4,230,5,20,128,16,9
	.byte	'reserved_30',0
	.word	154315
	.byte	64,2,35,0,9
	.byte	'AGC_GLB_CTRL',0
	.word	119557
	.byte	4,2,35,64,9
	.byte	'AGC_ENDIS_CTRL',0
	.word	119327
	.byte	4,2,35,68,9
	.byte	'AGC_ENDIS_STAT',0
	.word	119404
	.byte	4,2,35,72,9
	.byte	'AGC_ACT_TB',0
	.word	119254
	.byte	4,2,35,76,9
	.byte	'AGC_OUTEN_CTRL',0
	.word	119707
	.byte	4,2,35,80,9
	.byte	'AGC_OUTEN_STAT',0
	.word	119784
	.byte	4,2,35,84,9
	.byte	'AGC_FUPD_CTRL',0
	.word	119481
	.byte	4,2,35,88,9
	.byte	'AGC_INT_TRIG',0
	.word	119632
	.byte	4,2,35,92,9
	.byte	'reserved_chx',0
	.word	154324
	.byte	160,15,2,35,96,0,32
	.word	154335
	.byte	23
	.byte	'Ifx_GTM_ATOM_AGCx',0,4,249,5,4
	.word	154570
	.byte	8,4,141,6,20,128,1,9
	.byte	'CH_GPR0',0
	.word	139396
	.byte	4,2,35,0,9
	.byte	'CH_GPR1',0
	.word	139465
	.byte	4,2,35,4,9
	.byte	'CH_CNT',0
	.word	138837
	.byte	4,2,35,8,9
	.byte	'CH_ECNT',0
	.word	139043
	.byte	4,2,35,12,9
	.byte	'CH_CNTS',0
	.word	138905
	.byte	4,2,35,16,9
	.byte	'CH_TDUC',0
	.word	139829
	.byte	4,2,35,20,9
	.byte	'CH_TDUV',0
	.word	139898
	.byte	4,2,35,24,9
	.byte	'CH_FLT_RE',0
	.word	139325
	.byte	4,2,35,28,9
	.byte	'CH_FLT_FE',0
	.word	139254
	.byte	4,2,35,32,9
	.byte	'CH_CTRL',0
	.word	138974
	.byte	4,2,35,36,9
	.byte	'CH_ECTRL',0
	.word	139112
	.byte	4,2,35,40,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	139754
	.byte	4,2,35,44,9
	.byte	'CH_IRQ_EN',0
	.word	139534
	.byte	4,2,35,48,9
	.byte	'CH_IRQ_FORCINT',0
	.word	139605
	.byte	4,2,35,52,9
	.byte	'CH_IRQ_MODE',0
	.word	139681
	.byte	4,2,35,56,9
	.byte	'CH_EIRQ_EN',0
	.word	139182
	.byte	4,2,35,60,9
	.byte	'reserved_40',0
	.word	154315
	.byte	64,2,35,64,0,32
	.word	154602
	.byte	23
	.byte	'Ifx_GTM_TIM_CH_TYPE',0,4,177,6,4
	.word	154929
	.byte	8,4,179,6,20,8,9
	.byte	'IN_SRC',0
	.word	139967
	.byte	4,2,35,0,9
	.byte	'RST',0
	.word	140035
	.byte	4,2,35,4,0,32
	.word	154963
	.byte	23
	.byte	'Ifx_GTM_TIM_IN_SRC_RESET_TYPE',0,4,184,6,4
	.word	154999
	.byte	10,128,8
	.word	154602
	.byte	11,7,0,32
	.word	155043
	.byte	8,4,186,6,21,128,16,9
	.byte	'CH',0
	.word	155053
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	12795
	.byte	128,8,3,35,128,8,0,32
	.word	155058
	.byte	23
	.byte	'Ifx_GTM_TIM_CHx',0,4,190,6,4
	.word	155104
	.byte	10,120
	.word	133
	.byte	11,119,0,32
	.word	154963
	.byte	10,128,15
	.word	133
	.byte	11,255,14,0,8,4,192,6,20,128,16,9
	.byte	'reserved_tim2',0
	.word	155134
	.byte	120,2,35,0,9
	.byte	'IN_SRC_RESET',0
	.word	155143
	.byte	8,2,35,120,9
	.byte	'reserved_tim3',0
	.word	155148
	.byte	128,15,3,35,128,1,0,32
	.word	155159
	.byte	23
	.byte	'Ifx_GTM_TIM_IN_SRC_RSTx',0,4,197,6,4
	.word	155237
	.byte	10,24
	.word	133
	.byte	11,23,0,10,40
	.word	133
	.byte	11,39,0,8,4,214,6,20,128,1,9
	.byte	'CH_R0',0
	.word	135475
	.byte	4,2,35,0,9
	.byte	'CH_R1',0
	.word	135542
	.byte	4,2,35,4,9
	.byte	'CH_R2',0
	.word	135609
	.byte	4,2,35,8,9
	.byte	'CH_R3',0
	.word	135676
	.byte	4,2,35,12,9
	.byte	'CH_R4',0
	.word	135743
	.byte	4,2,35,16,9
	.byte	'CH_R5',0
	.word	135810
	.byte	4,2,35,20,9
	.byte	'CH_R6',0
	.word	135877
	.byte	4,2,35,24,9
	.byte	'CH_R7',0
	.word	135944
	.byte	4,2,35,28,9
	.byte	'CH_CTRL',0
	.word	134972
	.byte	4,2,35,32,9
	.byte	'CH_ACB',0
	.word	134904
	.byte	4,2,35,36,9
	.byte	'reserved_A8',0
	.word	155275
	.byte	24,2,35,40,9
	.byte	'CH_PC',0
	.word	135408
	.byte	4,2,35,64,9
	.byte	'CH_IRQ_NOTIFY',0
	.word	135333
	.byte	4,2,35,68,9
	.byte	'CH_IRQ_EN',0
	.word	135113
	.byte	4,2,35,72,9
	.byte	'CH_IRQ_FORCINT',0
	.word	135184
	.byte	4,2,35,76,9
	.byte	'CH_IRQ_MODE',0
	.word	135260
	.byte	4,2,35,80,9
	.byte	'CH_EIRQ_EN',0
	.word	135041
	.byte	4,2,35,84,9
	.byte	'reserved_D8',0
	.word	155284
	.byte	40,2,35,88,0,32
	.word	155293
	.byte	23
	.byte	'Ifx_GTM_MCS_CH_TYPE',0,4,250,6,4
	.word	155618
	.byte	10,128,8
	.word	155293
	.byte	11,7,0,32
	.word	155652
	.byte	10,128,24
	.word	133
	.byte	11,255,23,0,8,4,252,6,20,128,32,9
	.byte	'CH',0
	.word	155662
	.byte	128,8,2,35,0,9
	.byte	'reserved_tim1',0
	.word	155667
	.byte	128,24,3,35,128,8,0,32
	.word	155678
	.byte	23
	.byte	'Ifx_GTM_MCS_CHx',0,4,128,7,4
	.word	155724
	.byte	10,68
	.word	133
	.byte	11,67,0,10,128,31
	.word	133
	.byte	11,255,30,0,8,4,130,7,20,128,32,9
	.byte	'reserved_tim4',0
	.word	155284
	.byte	40,2,35,0,9
	.byte	'CTRG',0
	.word	134764
	.byte	4,2,35,40,9
	.byte	'STRG',0
	.word	134834
	.byte	4,2,35,44,9
	.byte	'reserved_tim5',0
	.word	155754
	.byte	68,2,35,48,9
	.byte	'CTRL',0
	.word	136011
	.byte	4,2,35,116,9
	.byte	'RST',0
	.word	136142
	.byte	4,2,35,120,9
	.byte	'ERR',0
	.word	136077
	.byte	4,2,35,124,9
	.byte	'reserved_tim6',0
	.word	155763
	.byte	128,31,3,35,128,1,0,32
	.word	155774
	.byte	23
	.byte	'Ifx_GTM_MCS_TGR_MOD_CTRLx',0,4,143,7,4
	.word	155921
	.byte	8,4,162,7,11,4,36
	.byte	'EN_DEST0',0,1
	.word	133
	.byte	1,7,2,35,0,36
	.byte	'EN_DEST1',0,1
	.word	133
	.byte	1,6,2,35,0,36
	.byte	'EN_DEST2',0,1
	.word	133
	.byte	1,5,2,35,0,36
	.byte	'EN_DEST3',0,1
	.word	133
	.byte	1,4,2,35,0,36
	.byte	'EN_DEST4',0,1
	.word	133
	.byte	1,3,2,35,0,36
	.byte	'EN_DEST5',0,1
	.word	133
	.byte	1,2,2,35,0,36
	.byte	'EN_DEST6',0,1
	.word	133
	.byte	1,1,2,35,0,36
	.byte	'EN_DEST7',0,1
	.word	133
	.byte	1,0,2,35,0,36
	.byte	'EN_DEST8',0,1
	.word	133
	.byte	1,7,2,35,1,36
	.byte	'EN_DEST9',0,1
	.word	133
	.byte	1,6,2,35,1,36
	.byte	'EN_DEST10',0,1
	.word	133
	.byte	1,5,2,35,1,36
	.byte	'EN_DEST11',0,1
	.word	133
	.byte	1,4,2,35,1,36
	.byte	'EN_DEST12',0,1
	.word	133
	.byte	1,3,2,35,1,36
	.byte	'EN_DEST13',0,1
	.word	133
	.byte	1,2,2,35,1,36
	.byte	'EN_DEST14',0,1
	.word	133
	.byte	1,1,2,35,1,36
	.byte	'EN_DEST15',0,1
	.word	133
	.byte	1,0,2,35,1,36
	.byte	'EN_DEST16',0,1
	.word	133
	.byte	1,7,2,35,2,36
	.byte	'EN_DEST17',0,1
	.word	133
	.byte	1,6,2,35,2,36
	.byte	'EN_DEST18',0,1
	.word	133
	.byte	1,5,2,35,2,36
	.byte	'EN_DEST19',0,1
	.word	133
	.byte	1,4,2,35,2,36
	.byte	'EN_DEST20',0,1
	.word	133
	.byte	1,3,2,35,2,36
	.byte	'EN_DEST21',0,1
	.word	133
	.byte	1,2,2,35,2,36
	.byte	'EN_TRASHBIN',0,1
	.word	133
	.byte	1,1,2,35,2,36
	.byte	'reserved_23',0,2
	.word	463
	.byte	9,0,2,35,2,0,23
	.byte	'Ifx_GTM_BRC_SRC_DEST_Bits',0,4,211,7,5
	.word	155961
	.byte	29,4,214,7,11,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	155961
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC_DEST',0,4,221,7,5
	.word	156501
	.byte	8,4,224,7,11,4,36
	.byte	'ADDR',0,2
	.word	463
	.byte	9,7,2,35,0,36
	.byte	'reserved_9',0,1
	.word	133
	.byte	3,4,2,35,1,36
	.byte	'BRC_MODE',0,1
	.word	133
	.byte	1,3,2,35,1,36
	.byte	'reserved_13',0,4
	.word	802
	.byte	19,0,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC_ADDR_Bits',0,4,231,7,5
	.word	156571
	.byte	29,4,233,7,11,4,9
	.byte	'U',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	11402
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	156571
	.byte	4,2,35,0,0,23
	.byte	'Ifx_GTM_BRC_SRC_ADDR',0,4,240,7,5
	.word	156694
	.byte	8,4,242,7,20,8,9
	.byte	'SRC_ADDR',0
	.word	156694
	.byte	4,2,35,0,9
	.byte	'SRC_DEST',0
	.word	156501
	.byte	4,2,35,4,0,32
	.word	156764
	.byte	23
	.byte	'Ifx_GTM_BRC_SRC_ADDRx',0,4,247,7,4
	.word	156807
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	32
	.word	156764
	.byte	8,4,250,7,20,120,9
	.byte	'SRC0',0
	.word	156843
	.byte	8,2,35,0,9
	.byte	'SRC1',0
	.word	156848
	.byte	8,2,35,8,9
	.byte	'SRC2',0
	.word	156853
	.byte	8,2,35,16,9
	.byte	'SRC3',0
	.word	156858
	.byte	8,2,35,24,9
	.byte	'SRC4',0
	.word	156863
	.byte	8,2,35,32,9
	.byte	'SRC5',0
	.word	156868
	.byte	8,2,35,40,9
	.byte	'SRC6',0
	.word	156873
	.byte	8,2,35,48,9
	.byte	'SRC7',0
	.word	156878
	.byte	8,2,35,56,9
	.byte	'SRC8',0
	.word	156883
	.byte	8,2,35,64,9
	.byte	'SRC9',0
	.word	156888
	.byte	8,2,35,72,9
	.byte	'SRC10',0
	.word	156893
	.byte	8,2,35,80,9
	.byte	'SRC11',0
	.word	156898
	.byte	8,2,35,88,9
	.byte	'IRQ_NOTIFY',0
	.word	121277
	.byte	4,2,35,96,9
	.byte	'IRQ_EN',0
	.word	121066
	.byte	4,2,35,100,9
	.byte	'IRQ_FORCINT',0
	.word	121134
	.byte	4,2,35,104,9
	.byte	'IRQ_MODE',0
	.word	121207
	.byte	4,2,35,108,9
	.byte	'RST',0
	.word	121349
	.byte	4,2,35,112,9
	.byte	'EIRQ_EN',0
	.word	120997
	.byte	4,2,35,116,0,32
	.word	156903
	.byte	23
	.byte	'Ifx_GTM_BRC_SRCx',0,4,148,8,4
	.word	157185
	.byte	12,4,197,8,11,4,13
	.byte	'GTM_CONFIGURABLE_CLK0',0,0,13
	.byte	'GTM_CONFIGURABLE_CLK1',0,1,13
	.byte	'GTM_CONFIGURABLE_CLK2',0,2,13
	.byte	'GTM_CONFIGURABLE_CLK3',0,3,13
	.byte	'GTM_CONFIGURABLE_CLK4',0,4,13
	.byte	'GTM_CONFIGURABLE_CLK5',0,5,13
	.byte	'GTM_CONFIGURABLE_CLK6',0,6,13
	.byte	'GTM_CONFIGURABLE_CLK7',0,7,0,23
	.byte	'Gtm_ConfigurableClockType',0,4,207,8,4
	.word	157216
	.byte	12,4,211,8,11,4,13
	.byte	'GTM_LOW',0,0,13
	.byte	'GTM_HIGH',0,1,0,23
	.byte	'Gtm_OutputLevelType',0,4,215,8,4
	.word	157450
	.byte	12,4,218,8,11,4,13
	.byte	'GTM_ARU_WRITE_FAILED',0,0,13
	.byte	'GTM_ARU_WRITE_SUCCESSFUL',0,1,13
	.byte	'GTM_ARU_RD_ISSUED_BUT_NOT_CMPLT',0,2,13
	.byte	'GTM_ARU_RD_ISSUED_AND_COMPLETED',0,3,13
	.byte	'GTM_ARU_READ_NOT_ISSUED',0,4,13
	.byte	'GTM_ARU_READ_FAILED',0,5,13
	.byte	'GTM_ARU_READ_SUCCESSFUL',0,6,13
	.byte	'GTM_INCORRECT_REQUEST',0,7,0,23
	.byte	'Gtm_AruReqStatusType',0,4,228,8,4
	.word	157507
	.byte	12,4,230,8,11,4,13
	.byte	'TOM_GLB_CTRL',0,0,13
	.byte	'TOM_ACT_TB',0,1,13
	.byte	'TOM_FUPD_CTRL',0,2,13
	.byte	'TOM_INT_TRIG',0,3,13
	.byte	'TOM_RESERVED_0',0,4,13
	.byte	'TOM_RESERVED_1',0,5,13
	.byte	'TOM_RESERVED_2',0,6,13
	.byte	'TOM_RESERVED_3',0,7,13
	.byte	'TOM_RESERVED_4',0,8,13
	.byte	'TOM_RESERVED_5',0,9,13
	.byte	'TOM_RESERVED_6',0,10,13
	.byte	'TOM_RESERVED_7',0,11,13
	.byte	'TOM_RESERVED_8',0,12,13
	.byte	'TOM_RESERVED_9',0,13,13
	.byte	'TOM_RESERVED_10',0,14,13
	.byte	'TOM_RESERVED_11',0,15,13
	.byte	'TOM_ENDIS_CTRL',0,16,13
	.byte	'TOM_ENDIS_STAT',0,17,13
	.byte	'TOM_OUTEN_CTRL',0,18,13
	.byte	'TOM_OUTEN_STAT',0,19,0,23
	.byte	'Gtm_TomTimerRegistersType',0,4,252,8,4
	.word	157760
	.byte	12,4,255,8,11,4,13
	.byte	'ATOM_GLB_CTRL',0,0,13
	.byte	'ATOM_ENDIS_CTRL',0,1,13
	.byte	'ATOM_ENDIS_STAT',0,2,13
	.byte	'ATOM_ACT_TB',0,3,13
	.byte	'ATOM_OUTEN_CTRL',0,4,13
	.byte	'ATOM_OUTEN_STAT',0,5,13
	.byte	'ATOM_FUPD_CTRL',0,6,13
	.byte	'ATOM_INT_TRIG',0,7,0,23
	.byte	'Gtm_AtomTimerRegistersType',0,4,137,9,4
	.word	158135
	.byte	8,4,141,9,11,8,9
	.byte	'FltRisingEdge',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'FltFallingEdge',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_TimFilterType',0,4,145,9,4
	.word	158313
	.byte	23
	.byte	'Gtm_TbuChCtrlType',0,4,150,9,32
	.word	138349
	.byte	23
	.byte	'Gtm_TbuChBaseType',0,4,151,9,32
	.word	138279
	.byte	8,4,153,9,11,8,9
	.byte	'CH_CTRL',0
	.word	138349
	.byte	4,2,35,0,9
	.byte	'CH_BASE',0
	.word	138279
	.byte	4,2,35,4,0,23
	.byte	'Gtm_TbuChType',0,4,157,9,4
	.word	158448
	.byte	8,4,171,9,9,8,9
	.byte	'DpllStatus',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'IntStatus',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_DpllStatType',0,4,175,9,2
	.word	158512
	.byte	10,16
	.word	802
	.byte	11,3,0,10,60
	.word	802
	.byte	11,14,0,8,4,178,9,9,76,9
	.byte	'TimInSel',0
	.word	158584
	.byte	16,2,35,0,9
	.byte	'ToutSel',0
	.word	158593
	.byte	60,2,35,16,0,23
	.byte	'Gtm_PortConfigType',0,4,182,9,2
	.word	158602
	.byte	8,4,186,9,9,8,9
	.byte	'TimRisingEdgeFilter',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'TimFallingEdgeFilter',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_TimFltType',0,4,191,9,2
	.word	158672
	.byte	14
	.word	158672
	.byte	3
	.word	158762
	.byte	8,4,195,9,11,28,9
	.byte	'TimUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TimIrqEn',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'TimErrIrqEn',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'TimAuxInSrcSel',0
	.word	133
	.byte	1,2,35,3,9
	.byte	'TimExtCapSrc',0
	.word	133
	.byte	1,2,35,4,9
	.byte	'TimCtrlValue',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmTimFltPtr',0
	.word	158767
	.byte	4,2,35,12,9
	.byte	'TimCntsValue',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'TimTduValue',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'TimInSrcSel',0
	.word	802
	.byte	4,2,35,24,0,23
	.byte	'Gtm_TimConfigType',0,4,210,9,4
	.word	158772
	.byte	10,32
	.word	1234
	.byte	11,3,0,10,16
	.word	133
	.byte	11,15,0,10,48
	.word	159026
	.byte	11,2,0,10,40
	.word	1234
	.byte	11,4,0,8,4,213,9,11,120,9
	.byte	'Gtm_TimUsage',0
	.word	159017
	.byte	32,2,35,0,9
	.byte	'Gtm_TomUsage',0
	.word	159035
	.byte	48,2,35,32,9
	.byte	'Gtm_AtomUsage',0
	.word	159044
	.byte	40,2,35,80,0,23
	.byte	'Gtm_ModUsageConfigType',0,4,225,9,4
	.word	159053
	.byte	8,4,228,9,11,16,9
	.byte	'GtmAtomUpdateEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomEndisCtrl',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmAtomEndisStat',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmAtomOutenCtrl',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmAtomOutenStat',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmAtomFupd',0
	.word	802
	.byte	4,2,35,12,0,23
	.byte	'Gtm_AtomAgcConfigGroupType',0,4,236,9,4
	.word	159159
	.byte	14
	.word	159159
	.byte	3
	.word	159352
	.byte	8,4,240,9,9,12,9
	.byte	'GtmAtomIntTrig',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomActTb',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomAgcConfigGrpPtr',0
	.word	159357
	.byte	4,2,35,8,0,23
	.byte	'Gtm_AtomAgcConfigType',0,4,247,9,2
	.word	159362
	.byte	8,4,250,9,9,28,9
	.byte	'GtmAtomIrqEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmAtomRdAddrValue',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomCn0Value',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmAtomCm0Value',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'GtmAtomCm1Value',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'GtmAtomSr0Value',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'GtmAtomSr1Value',0
	.word	802
	.byte	4,2,35,24,0,23
	.byte	'Gtm_AtomChannelConfigType',0,4,131,10,2
	.word	159478
	.byte	14
	.word	159478
	.byte	3
	.word	159695
	.byte	8,4,134,10,9,12,9
	.byte	'GtmAtomUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmAtomIrqMode',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmAtomControlWord',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmAtomChannelCfgPtr',0
	.word	159700
	.byte	4,2,35,8,0,23
	.byte	'Gtm_AtomConfigType',0,4,141,10,2
	.word	159705
	.byte	8,4,154,10,9,16,9
	.byte	'GtmTomUpdateEn',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmTomEndisCtrl',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmTomEndisStat',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmTomOutenCtrl',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmTomOutenStat',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmTomFupd',0
	.word	802
	.byte	4,2,35,12,0,23
	.byte	'Gtm_TomTgcConfigGroupType',0,4,162,10,2
	.word	159844
	.byte	14
	.word	159844
	.byte	3
	.word	160030
	.byte	8,4,166,10,9,12,9
	.byte	'GtmTomIntTrig',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmTomActTb',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmTomTgcConfigGrpPtr',0
	.word	160035
	.byte	4,2,35,8,0,23
	.byte	'Gtm_TomTgcConfigType',0,4,173,10,2
	.word	160040
	.byte	8,4,176,10,9,12,9
	.byte	'GtmTomIrqEn',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmTomCn0Value',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'GtmTomCm0Value',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'GtmTomCm1Value',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'GtmTomSr0Value',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'GtmTomSr1Value',0
	.word	463
	.byte	2,2,35,10,0,23
	.byte	'Gtm_TomChannelConfigType',0,4,184,10,2
	.word	160152
	.byte	14
	.word	160152
	.byte	3
	.word	160334
	.byte	8,4,188,10,9,12,9
	.byte	'TomUsage',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmTomIrqMode',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'GtmTomControlWord',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmTomChannelCfgPtr',0
	.word	160339
	.byte	4,2,35,8,0,23
	.byte	'Gtm_TomConfigType',0,4,196,10,2
	.word	160344
	.byte	8,4,200,10,9,8,9
	.byte	'CmuEclkNum',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CmuEclkDen',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_ExtClkType',0,4,204,10,2
	.word	160475
	.byte	10,32
	.word	802
	.byte	11,7,0,10,24
	.word	160475
	.byte	11,2,0,8,4,207,10,9,64,9
	.byte	'GtmClockEnable',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'GtmCmuClkCnt',0
	.word	160546
	.byte	32,2,35,4,9
	.byte	'GtmFxdClkControl',0
	.word	802
	.byte	4,2,35,36,9
	.byte	'GtmEclk',0
	.word	160555
	.byte	24,2,35,40,0,23
	.byte	'Gtm_ClockSettingType',0,4,213,10,2
	.word	160564
	.byte	8,4,217,10,9,4,9
	.byte	'GtmCtrlValue',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'GtmIrqEnable',0
	.word	463
	.byte	2,2,35,2,0,23
	.byte	'Gtm_GeneralConfigType',0,4,222,10,2
	.word	160690
	.byte	8,4,226,10,9,8,9
	.byte	'TbuChannelCtrl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'TbuBaseValue',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_TbuConfigType',0,4,230,10,2
	.word	160772
	.byte	8,4,234,10,9,8,9
	.byte	'BrcChannelCtrl',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'BrcDestination',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_BrcChannelType',0,4,238,10,2
	.word	160852
	.byte	14
	.word	160852
	.byte	3
	.word	160935
	.byte	8,4,242,10,9,8,9
	.byte	'BrcIrqEnable',0
	.word	463
	.byte	2,2,35,0,9
	.byte	'BrcErrIrqEnable',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'BrcChannelPtr',0
	.word	160940
	.byte	4,2,35,4,0,23
	.byte	'Gtm_BrcConfigType',0,4,248,10,2
	.word	160945
	.byte	8,4,252,10,9,12,9
	.byte	'FifoCtrl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'FifoIrqEnable',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'FifoErrIrqEnable',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'FifoStartAddress',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'FifoEndAddress',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'FifoUpperWatermark',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'FifoLowerWatermark',0
	.word	463
	.byte	2,2,35,10,0,23
	.byte	'Gtm_FifoConfigType',0,4,139,11,2
	.word	161049
	.byte	8,4,143,11,9,4,9
	.byte	'F2aChannelConfig',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'F2aAruAddress',0
	.word	463
	.byte	2,2,35,2,0,23
	.byte	'Gtm_F2aConfigType',0,4,147,11,2
	.word	161257
	.byte	8,4,151,11,9,18,9
	.byte	'McsControl',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'McsChannelConfig',0
	.word	1234
	.byte	8,2,35,1,9
	.byte	'McsErrIrqEnable',0
	.word	1234
	.byte	8,2,35,9,0,23
	.byte	'Gtm_McsConfigType',0,4,160,11,2
	.word	161340
	.byte	10,48
	.word	463
	.byte	11,23,0,8,4,164,11,9,96,9
	.byte	'DpllAps1c3',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'DpllNtiCnt',0
	.word	463
	.byte	2,2,35,2,9
	.byte	'DpllApt2c',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'DpllCtrl2',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'DpllCtrl3',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'DpllCtrl4',0
	.word	463
	.byte	2,2,35,10,9
	.byte	'DpllPmtr',0
	.word	161445
	.byte	48,2,35,12,9
	.byte	'DpllCtrl0',0
	.word	802
	.byte	4,2,35,60,9
	.byte	'DpllCtrl1',0
	.word	802
	.byte	4,2,35,64,9
	.byte	'DpllApt',0
	.word	802
	.byte	4,2,35,68,9
	.byte	'DpllAps',0
	.word	802
	.byte	4,2,35,72,9
	.byte	'DpllAssort0',0
	.word	802
	.byte	4,2,35,76,9
	.byte	'DpllIrqEnable',0
	.word	802
	.byte	4,2,35,80,9
	.byte	'DpllErrIntEnable',0
	.word	802
	.byte	4,2,35,84,9
	.byte	'DpllAddInLoad1',0
	.word	802
	.byte	4,2,35,88,9
	.byte	'DpllAddInLoad2',0
	.word	802
	.byte	4,2,35,92,0,23
	.byte	'Gtm_DpllConfigType',0,4,188,11,2
	.word	161454
	.byte	10,16
	.word	463
	.byte	11,7,0,8,4,192,11,9,36,9
	.byte	'SpeIrq',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'SpeErrIrq',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'SpeOutput',0
	.word	161813
	.byte	16,2,35,2,9
	.byte	'SpeCtrlStat',0
	.word	802
	.byte	4,2,35,20,9
	.byte	'SpePattern',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'SpeRevCntr',0
	.word	802
	.byte	4,2,35,28,9
	.byte	'SpeRevCmp',0
	.word	802
	.byte	4,2,35,32,0,23
	.byte	'Gtm_SpeConfigType',0,4,205,11,2
	.word	161822
	.byte	8,4,208,11,9,12,9
	.byte	'CmpEnable',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CmpIntEnable',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'CmpErrIntEnable',0
	.word	802
	.byte	4,2,35,8,0,23
	.byte	'Gtm_CmpConfigType',0,4,215,11,2
	.word	161990
	.byte	8,4,220,11,9,16,9
	.byte	'MscConnection',0
	.word	158584
	.byte	16,2,35,0,0,23
	.byte	'Gtm_MscSetType',0,4,223,11,2
	.word	162090
	.byte	8,4,226,11,9,8,9
	.byte	'MscLowControl',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'MscHighControl',0
	.word	802
	.byte	4,2,35,4,0,23
	.byte	'Gtm_MscInputCtrlType',0,4,230,11,2
	.word	162144
	.byte	14
	.word	162090
	.byte	3
	.word	162228
	.byte	14
	.word	162144
	.byte	3
	.word	162238
	.byte	8,4,233,11,9,8,9
	.byte	'MscSets',0
	.word	162233
	.byte	4,2,35,0,9
	.byte	'MscInputCtrlPtr',0
	.word	162243
	.byte	4,2,35,4,0,23
	.byte	'Gtm_MscConnectionsType',0,4,237,11,2
	.word	162248
	.byte	8,4,241,11,9,20,9
	.byte	'DsadcInsel0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'DsadcInsel1',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'DsadcInsel2',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'DsadcOutsel00',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'DsadcOutsel10',0
	.word	802
	.byte	4,2,35,16,0,23
	.byte	'Gtm_DsadcConnectionsType',0,4,248,11,2
	.word	162329
	.byte	10,8
	.word	802
	.byte	11,1,0,10,4
	.word	802
	.byte	11,0,0,14
	.word	158772
	.byte	3
	.word	162497
	.byte	14
	.word	160040
	.byte	3
	.word	162507
	.byte	10,12
	.word	802
	.byte	11,2,0,14
	.word	160344
	.byte	3
	.word	162526
	.byte	14
	.word	159362
	.byte	3
	.word	162536
	.byte	14
	.word	159705
	.byte	3
	.word	162546
	.byte	14
	.word	159053
	.byte	3
	.word	162556
	.byte	14
	.word	160690
	.byte	3
	.word	162566
	.byte	14
	.word	160772
	.byte	3
	.word	162576
	.byte	14
	.word	160945
	.byte	3
	.word	162586
	.byte	14
	.word	161049
	.byte	3
	.word	162596
	.byte	14
	.word	162601
	.byte	3
	.word	162606
	.byte	14
	.word	161257
	.byte	3
	.word	162616
	.byte	14
	.word	161340
	.byte	3
	.word	162626
	.byte	14
	.word	161454
	.byte	3
	.word	162636
	.byte	14
	.word	161822
	.byte	3
	.word	162646
	.byte	10,8
	.word	162651
	.byte	11,1,0,14
	.word	161990
	.byte	3
	.word	162665
	.byte	14
	.word	162248
	.byte	3
	.word	162675
	.byte	14
	.word	162329
	.byte	3
	.word	162685
	.byte	8,4,251,11,9,172,1,9
	.byte	'GtmAruConfig',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'GtmMcfgConfig',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'GtmModuleSleepEnable',0
	.word	133
	.byte	1,2,35,2,9
	.byte	'GtmGclkNum',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'GtmGclkDen',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'GtmAccessEnable0',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'GtmAccessEnable1',0
	.word	802
	.byte	4,2,35,16,9
	.byte	'GtmTimModuleUsage',0
	.word	162479
	.byte	8,2,35,20,9
	.byte	'GtmTimUsage',0
	.word	162488
	.byte	4,2,35,28,9
	.byte	'GtmTimConfigPtr',0
	.word	162502
	.byte	4,2,35,32,9
	.byte	'GtmTomTgcUsage',0
	.word	162488
	.byte	4,2,35,36,9
	.byte	'GtmTomTgcConfigPtr',0
	.word	162512
	.byte	4,2,35,40,9
	.byte	'GtmTomModuleUsage',0
	.word	162517
	.byte	12,2,35,44,9
	.byte	'GtmTomUsage',0
	.word	162479
	.byte	8,2,35,56,9
	.byte	'GtmTomConfigPtr',0
	.word	162531
	.byte	4,2,35,64,9
	.byte	'GtmAtomAgcUsage',0
	.word	162488
	.byte	4,2,35,68,9
	.byte	'GtmAtomAgcConfigPtr',0
	.word	162541
	.byte	4,2,35,72,9
	.byte	'GtmAtomModuleUsage',0
	.word	162517
	.byte	12,2,35,76,9
	.byte	'GtmAtomUsage',0
	.word	162479
	.byte	8,2,35,88,9
	.byte	'GtmAtomConfigPtr',0
	.word	162551
	.byte	4,2,35,96,9
	.byte	'GtmModUsageConfigPtr',0
	.word	162561
	.byte	4,2,35,100,9
	.byte	'GtmGeneralConfigPtr',0
	.word	162571
	.byte	4,2,35,104,9
	.byte	'GtmTbuConfigPtr',0
	.word	162581
	.byte	4,2,35,108,9
	.byte	'GtmBrcConfigPtr',0
	.word	162591
	.byte	4,2,35,112,9
	.byte	'GtmFifoConfigPtr',0
	.word	162611
	.byte	4,2,35,116,9
	.byte	'GtmF2aConfigPtr',0
	.word	162621
	.byte	4,2,35,120,9
	.byte	'GtmMcsConfigPtr',0
	.word	162631
	.byte	4,2,35,124,9
	.byte	'GtmMapConfig',0
	.word	802
	.byte	4,3,35,128,1,9
	.byte	'GtmDpllConfigPtr',0
	.word	162641
	.byte	4,3,35,132,1,9
	.byte	'GtmSpeConfigPtr',0
	.word	162656
	.byte	8,3,35,136,1,9
	.byte	'GtmCmpConfigPtr',0
	.word	162670
	.byte	4,3,35,144,1,9
	.byte	'GtmMscConnectionsPtr',0
	.word	162680
	.byte	4,3,35,148,1,9
	.byte	'GtmDsadcConnectionsPtr',0
	.word	162690
	.byte	4,3,35,152,1,9
	.byte	'GtmAdcConnectionsPtr',0
	.word	3769
	.byte	4,3,35,156,1,9
	.byte	'GtmTtcanTriggers',0
	.word	162488
	.byte	4,3,35,160,1,9
	.byte	'GtmPsi5OutSelect',0
	.word	802
	.byte	4,3,35,164,1,9
	.byte	'GtmPsi5SOutSelect',0
	.word	802
	.byte	4,3,35,168,1,0,23
	.byte	'Gtm_ModuleConfigType',0,4,188,12,2
	.word	162695
	.byte	14
	.word	160564
	.byte	3
	.word	163692
	.byte	14
	.word	158602
	.byte	3
	.word	163702
	.byte	14
	.word	162695
	.byte	3
	.word	163712
	.byte	25
	.byte	'Gtm_ConfigType',0,4,224,12,16,12,9
	.byte	'GtmClockSettingPtr',0
	.word	163697
	.byte	4,2,35,0,9
	.byte	'GtmPortConfigPtr',0
	.word	163707
	.byte	4,2,35,4,9
	.byte	'GtmModuleConfigPtr',0
	.word	163717
	.byte	4,2,35,8,0,23
	.byte	'Gtm_ConfigType',0,4,229,12,2
	.word	163722
	.byte	23
	.byte	'Mcu_ClockType',0,28,156,3,18
	.word	802
	.byte	23
	.byte	'Mcu_ModeType',0,28,162,3,18
	.word	802
	.byte	23
	.byte	'Mcu_RamSectionType',0,28,168,3,18
	.word	802
	.byte	23
	.byte	'Mcu_RamBaseAdrType',0,28,178,3,18
	.word	8014
	.byte	23
	.byte	'Mcu_RamSizeType',0,28,181,3,17
	.word	802
	.byte	23
	.byte	'Mcu_RamPrstDatType',0,28,184,3,16
	.word	133
	.byte	30
	.byte	'Mcu_ResetType',0,28,212,3,14,4,13
	.byte	'MCU_ESR0_RESET',0,0,13
	.byte	'MCU_ESR1_RESET',0,1,13
	.byte	'MCU_SMU_RESET',0,2,13
	.byte	'MCU_SW_RESET',0,3,13
	.byte	'MCU_STM0_RESET',0,4,13
	.byte	'MCU_STM1_RESET',0,5,13
	.byte	'MCU_STM2_RESET',0,6,13
	.byte	'MCU_POWER_ON_RESET',0,7,13
	.byte	'MCU_CB0_RESET',0,8,13
	.byte	'MCU_CB1_RESET',0,9,13
	.byte	'MCU_CB3_RESET',0,10,13
	.byte	'MCU_TP_RESET',0,11,13
	.byte	'MCU_EVR13_RESET',0,12,13
	.byte	'MCU_EVR33_RESET',0,13,13
	.byte	'MCU_SUPPLY_WDOG_RESET',0,14,13
	.byte	'MCU_STBYR_RESET',0,15,13
	.byte	'MCU_RESET_MULTIPLE',0,254,1,13
	.byte	'MCU_RESET_UNDEFINED',0,255,1,0,23
	.byte	'Mcu_ResetType',0,28,232,3,2
	.word	164004
	.byte	8,28,247,3,3,4,36
	.byte	'K1div',0,1
	.word	133
	.byte	7,1,2,35,0,36
	.byte	'K3div',0,2
	.word	463
	.byte	7,2,2,35,0,36
	.byte	'Ndiv',0,4
	.word	802
	.byte	7,11,2,35,0,36
	.byte	'Pdiv',0,2
	.word	463
	.byte	4,7,2,35,2,36
	.byte	'K2steps',0,1
	.word	133
	.byte	4,3,2,35,3,36
	.byte	'PllMode',0,1
	.word	133
	.byte	1,2,2,35,3,36
	.byte	'Reserved',0,1
	.word	133
	.byte	2,0,2,35,3,0,8,28,132,4,3,4,36
	.byte	'McuErayNDivider',0,1
	.word	133
	.byte	5,3,2,35,0,36
	.byte	'McuErayK2Divider',0,2
	.word	463
	.byte	7,4,2,35,0,36
	.byte	'McuErayK3Divider',0,4
	.word	802
	.byte	7,13,2,35,0,36
	.byte	'McuErayPDivider',0,1
	.word	133
	.byte	4,1,2,35,2,36
	.byte	'Reserved',0,2
	.word	463
	.byte	9,0,2,35,2,0,25
	.byte	'Mcu_ClockCfgType',0,28,236,3,16,80,9
	.byte	'K2div',0
	.word	1234
	.byte	8,2,35,0,9
	.byte	'K2RampToPllDelayTicks',0
	.word	160546
	.byte	32,2,35,8,9
	.byte	'Mcu_ClockDivValues',0
	.word	164371
	.byte	4,2,35,40,9
	.byte	'MCU_ErayPllDivValues',0
	.word	164502
	.byte	4,2,35,44,9
	.byte	'Ccucon0',0
	.word	802
	.byte	4,2,35,48,9
	.byte	'Ccucon1',0
	.word	802
	.byte	4,2,35,52,9
	.byte	'Ccucon2',0
	.word	802
	.byte	4,2,35,56,9
	.byte	'Ccucon5',0
	.word	802
	.byte	4,2,35,60,9
	.byte	'Ccucon6',0
	.word	802
	.byte	4,2,35,64,9
	.byte	'Ccucon7',0
	.word	802
	.byte	4,2,35,68,9
	.byte	'Ccucon8',0
	.word	802
	.byte	4,2,35,72,9
	.byte	'K2RampToPllDelayConf',0
	.word	133
	.byte	1,2,35,76,0,23
	.byte	'Mcu_ClockCfgType',0,28,162,4,2
	.word	164639
	.byte	25
	.byte	'Mcu_RamCfgType',0,28,164,4,16,12,9
	.byte	'RamBaseAdrPtr',0
	.word	163923
	.byte	4,2,35,0,9
	.byte	'RamSize',0
	.word	802
	.byte	4,2,35,4,9
	.byte	'RamPrstData',0
	.word	133
	.byte	1,2,35,8,0,23
	.byte	'Mcu_RamCfgType',0,28,169,4,2
	.word	164942
	.byte	3
	.word	8008
	.byte	25
	.byte	'Mcu_StandbyModeType',0,28,171,4,16,8,9
	.byte	'PMSWCR0',0
	.word	802
	.byte	4,2,35,0,9
	.byte	'CrcCheckEnable',0
	.word	133
	.byte	1,2,35,4,0,23
	.byte	'Mcu_StandbyModeType',0,28,175,4,2
	.word	165054
	.byte	23
	.byte	'rba_BswSrv_uint64',0,29,66,28
	.word	6505
	.byte	12,30,176,6,9,4,13
	.byte	'STANDARD_CAN',0,0,13
	.byte	'STANDARD_FD_CAN',0,1,13
	.byte	'EXTENDED_CAN',0,2,13
	.byte	'EXTENDED_FD_CAN',0,3,0,23
	.byte	'CanIf_Cfg_TxPduCanIdType_ten',0,30,182,6,2
	.word	165177
	.byte	12,30,244,6,9,4,13
	.byte	'CANIF_NO_UL',0,0,13
	.byte	'CAN_NM',0,1,13
	.byte	'CAN_TP',0,2,13
	.byte	'CAN_TSYN',0,3,13
	.byte	'J1939NM',0,4,13
	.byte	'J1939TP',0,5,13
	.byte	'PDUR',0,6,13
	.byte	'XCP',0,7,13
	.byte	'CDD',0,8,13
	.byte	'USER',0,9,13
	.byte	'MAX_USER_TYPE',0,10,0,23
	.byte	'CanIf_Cfg_UserType_ten',0,30,130,7,2
	.word	165288
	.byte	12,30,133,7,9,4,13
	.byte	'CANIF_BASIC',0,0,13
	.byte	'CANIF_FULL',0,1,0,23
	.byte	'CanIf_Cfg_CanHandleType_ten',0,30,138,7,2
	.word	165432
	.byte	12,30,141,7,9,4,13
	.byte	'CANIF_PRV_FULL_E',0,0,13
	.byte	'CANIF_PRV_BASIC_RANGE_E',0,1,13
	.byte	'CANIF_PRV_BASIC_LIST_E',0,2,0,23
	.byte	'CanIf_Prv_HrhType_ten',0,30,148,7,2
	.word	165503
	.byte	12,30,151,7,9,4,13
	.byte	'CANIF_DLC_OK',0,0,13
	.byte	'CANIF_DLC_E_FAILED',0,1,0,23
	.byte	'CanIf_DlcErrorReturnType',0,30,156,7,2
	.word	165611
	.byte	8,30,220,7,9,20,9
	.byte	'HrhInfo_e',0
	.word	165503
	.byte	4,2,35,0,9
	.byte	'PduIdx_t',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'NumRxPdus_u32',0
	.word	802
	.byte	4,2,35,8,9
	.byte	'HrhRangeMask_b',0
	.word	133
	.byte	1,2,35,12,9
	.byte	'ControllerId_u8',0
	.word	133
	.byte	1,2,35,13,9
	.byte	'CanId_t',0
	.word	802
	.byte	4,2,35,16,0,23
	.byte	'CanIf_Cfg_Hrhtype_tst',0,30,255,7,2
	.word	165688
	.byte	8,30,134,8,9,20,9
	.byte	'RxPduReadNotifyReadDataStatus_u8',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'IndexForUL_u8',0
	.word	6393
	.byte	4,2,35,4,9
	.byte	'CanIdtype_u8',0
	.word	133
	.byte	1,2,35,8,9
	.byte	'RxPduDlc_u8',0
	.word	133
	.byte	1,2,35,9,9
	.byte	'RxPduCanId',0
	.word	802
	.byte	4,2,35,12,9
	.byte	'Hrhref_t',0
	.word	463
	.byte	2,2,35,16,9
	.byte	'RxPduTargetId_t',0
	.word	463
	.byte	2,2,35,18,0,23
	.byte	'CanIf_Cfg_RxPduType_tst',0,30,230,8,2
	.word	165852
	.byte	14
	.word	1189
	.byte	3
	.word	166063
	.byte	27,1,1,28
	.word	463
	.byte	28
	.word	166068
	.byte	0,3
	.word	166073
	.byte	8,30,234,8,9,4,9
	.byte	'CanIfRxPduIndicationName',0
	.word	166087
	.byte	4,2,35,0,0,23
	.byte	'CanIf_RxCbk_Prototype',0,30,237,8,2
	.word	166092
	.byte	8,30,168,9,9,4,9
	.byte	'CtrlId',0
	.word	133
	.byte	1,2,35,0,9
	.byte	'CtrlCanCtrlRef',0
	.word	133
	.byte	1,2,35,1,9
	.byte	'CtrlWakeupSupport',0
	.word	133
	.byte	1,2,35,2,0,23
	.byte	'CanIf_Cfg_CtrlConfig_tst',0,30,182,9,2
	.word	166164
	.byte	14
	.word	166164
	.byte	3
	.word	166272
	.byte	8,30,184,9,9,12,9
	.byte	'CanIf_CtrlConfigPtr',0
	.word	166277
	.byte	4,2,35,0,9
	.byte	'CanObjectId',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'CanHandleType',0
	.word	165432
	.byte	4,2,35,8,0,23
	.byte	'CanIf_Cfg_HthConfig_tst',0,30,191,9,2
	.word	166282
	.byte	14
	.word	166282
	.byte	3
	.word	166395
	.byte	8,30,194,9,9,4,9
	.byte	'CanIf_HthConfigPtr',0
	.word	166400
	.byte	4,2,35,0,0,23
	.byte	'CanIf_Cfg_TxBufferConfig_tst',0,30,205,9,2
	.word	166405
	.byte	14
	.word	166405
	.byte	3
	.word	166478
	.byte	27,1,1,28
	.word	463
	.byte	0,3
	.word	166488
	.byte	3
	.word	1189
	.byte	38
	.word	133
	.byte	1,1,28
	.word	463
	.byte	28
	.word	166502
	.byte	0,3
	.word	166507
	.byte	8,30,207,9,9,40,9
	.byte	'CanIf_TxBufferConfigPtr',0
	.word	166483
	.byte	4,2,35,0,9
	.byte	'TxPduId',0
	.word	463
	.byte	2,2,35,4,9
	.byte	'TxPduTargetPduId',0
	.word	463
	.byte	2,2,35,6,9
	.byte	'TxPduType',0
	.word	463
	.byte	2,2,35,8,9
	.byte	'TxPduCanIdType',0
	.word	165177
	.byte	4,2,35,12,9
	.byte	'TxPduTxUserUL',0
	.word	165288
	.byte	4,2,35,16,9
	.byte	'UserTxConfirmation',0
	.word	166497
	.byte	4,2,35,20,9
	.byte	'TxPduCanId',0
	.word	802
	.byte	4,2,35,24,9
	.byte	'TxPduReadNotifyStatus',0
	.word	133
	.byte	1,2,35,28,9
	.byte	'UserTriggerTransmit',0
	.word	166525
	.byte	4,2,35,32,9
	.byte	'TxPduTriggerTransmit',0
	.word	133
	.byte	1,2,35,36,9
	.byte	'TxTruncEnabled_b',0
	.word	133
	.byte	1,2,35,37,9
	.byte	'TxPduLength_u8',0
	.word	133
	.byte	1,2,35,38,0,23
	.byte	'CanIf_Cfg_TxPduConfig_tst',0,30,239,9,2
	.word	166530
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L100:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,73,19,54,15,39,12,0,0,8,19,1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9
	.byte	0,0,10,1,1,11,15,73,19,0,0,11,33,0,47,15,0,0,12,4,1,58,15,59,15,57,15,11,15,0,0,13,40,0,3,8,28,13,0,0
	.byte	14,38,0,73,19,0,0,15,11,1,0,0,16,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,17,46,1
	.byte	49,19,0,0,18,5,0,49,19,0,0,19,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,20,29,1,49,19,0,0
	.byte	21,11,0,49,19,0,0,22,21,0,54,15,0,0,23,22,0,3,8,58,15,59,15,57,15,73,19,0,0,24,21,0,54,15,39,12,0,0,25
	.byte	19,1,3,8,58,15,59,15,57,15,11,15,0,0,26,59,0,3,8,0,0,27,21,1,54,15,39,12,0,0,28,5,0,73,19,0,0,29,23,1
	.byte	58,15,59,15,57,15,11,15,0,0,30,4,1,3,8,58,15,59,15,57,15,11,15,0,0,31,21,0,73,19,54,15,39,12,0,0,32,53
	.byte	0,73,19,0,0,33,1,1,73,19,0,0,34,33,0,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,36,13,0,3
	.byte	8,11,15,73,19,13,15,12,15,56,9,0,0,37,13,0,73,19,11,15,56,9,0,0,38,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L101:
	.word	.L424-.L423
.L423:
	.half	3
	.word	.L426-.L425
.L425:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Gtm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm\\api\\CanNm_Inl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm_Prv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\NmStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm_PreCompile_and_PB_Variant\\CanNm_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanIf\\api\\CanIf.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\Nm_Cbk.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\Nm_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Nm\\api\\Nm.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxScu_regdef.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\reg\\IfxGtm_regdef.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Mcu\\inc\\Mcu.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanIf\\CanIf_Cfg.h',0,0,0,0,0
.L426:
.L424:
	.sdecl	'.debug_info',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_info'
.L102:
	.word	246
	.half	3
	.word	.L103
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L105,.L104
	.byte	2
	.word	.L98
	.byte	3
	.byte	'CanNm_MainFunction',0,1,50,24,1,1,1
	.word	.L93,.L117,.L92
	.byte	4
	.word	.L93,.L117
	.byte	5
	.byte	'CanNm_NetworkHandle',0,1,52,39
	.word	.L118,.L119
	.byte	5
	.byte	'ConfigPtr_pcs',0,1,54,67
	.word	.L120,.L121
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_abbrev'
.L103:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_line'
.L104:
	.word	.L428-.L427
.L427:
	.half	3
	.word	.L430-.L429
.L429:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0,0,0,0,0
.L430:
	.byte	5,29,7,0,5,2
	.word	.L93
	.byte	3,55,1,5,80,9
	.half	.L351-.L93
	.byte	1,5,35,9
	.half	.L3-.L351
	.byte	3,5,1,5,101,9
	.half	.L353-.L3
	.byte	3,123,1,5,80,9
	.half	.L2-.L353
	.byte	1,5,1,7,9
	.half	.L431-.L2
	.byte	3,21,1,7,9
	.half	.L106-.L431
	.byte	0,1,1
.L428:
	.sdecl	'.debug_ranges',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_ranges'
.L105:
	.word	-1,.L93,0,.L106-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_info'
.L107:
	.word	2471
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L98
	.byte	3
	.byte	'CanNm_InternalMainProcess',0,1,95,31,1,1
	.word	.L95,.L122,.L94
	.byte	4
	.byte	'CanNm_NetworkHandle',0,1,95,94
	.word	.L123,.L124
	.byte	5
	.word	.L95,.L122
	.byte	6
	.byte	'ConfigPtr_pcs',0,1,99,67
	.word	.L120,.L125
	.byte	6
	.byte	'RamPtr_ps',0,1,102,54
	.word	.L126,.L127
	.byte	6
	.byte	'PduRxInd_b',0,1,105,29
	.word	.L118,.L128
	.byte	6
	.byte	'PduTxConfirmation_b',0,1,109,29
	.word	.L118,.L129
	.byte	6
	.byte	'CtrlBitVector_u8',0,1,114,27
	.word	.L118,.L130
	.byte	6
	.byte	'stNetworkState_e',0,1,119,44
	.word	.L131,.L132
	.byte	6
	.byte	'RepeatMsgTime',0,1,123,37
	.word	.L133,.L134
	.byte	6
	.byte	'StateCopy_e',0,1,126,34
	.word	.L135,.L136
	.byte	7
	.word	.L137,.L4,.L138
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	9
	.word	.L147,.L148
	.byte	6
	.byte	'StateCopy_e',0,2,209,1,38
	.word	.L135,.L160
	.byte	0,0,7
	.word	.L161,.L138,.L162
	.byte	8
	.word	.L163,.L164
	.byte	10
	.word	.L165,.L138,.L162
	.byte	0,7
	.word	.L137,.L149,.L6
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L137,.L150,.L151
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L137,.L152,.L153
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L137,.L154,.L155
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L137,.L156,.L157
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L137,.L158,.L159
	.byte	8
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L142
	.byte	8
	.word	.L143,.L144
	.byte	8
	.word	.L145,.L146
	.byte	0,7
	.word	.L166,.L167,.L20
	.byte	8
	.word	.L168,.L169
	.byte	8
	.word	.L170,.L171
	.byte	8
	.word	.L172,.L173
	.byte	8
	.word	.L174,.L175
	.byte	11
	.word	.L176,.L167,.L20
	.byte	6
	.byte	'stNetworkState_e',0,2,205,2,44
	.word	.L131,.L177
	.byte	6
	.byte	'nmChannelHandle',0,2,208,2,39
	.word	.L118,.L178
	.byte	7
	.word	.L179,.L180,.L181
	.byte	8
	.word	.L182,.L183
	.byte	8
	.word	.L184,.L185
	.byte	8
	.word	.L186,.L187
	.byte	8
	.word	.L188,.L189
	.byte	10
	.word	.L190,.L180,.L181
	.byte	0,0,0,7
	.word	.L191,.L192,.L25
	.byte	8
	.word	.L193,.L194
	.byte	8
	.word	.L195,.L196
	.byte	8
	.word	.L197,.L198
	.byte	8
	.word	.L199,.L200
	.byte	11
	.word	.L201,.L192,.L25
	.byte	6
	.byte	'stNetworkState_e',0,2,146,3,44
	.word	.L131,.L202
	.byte	7
	.word	.L179,.L203,.L204
	.byte	8
	.word	.L182,.L183
	.byte	8
	.word	.L184,.L185
	.byte	8
	.word	.L186,.L187
	.byte	8
	.word	.L188,.L189
	.byte	10
	.word	.L190,.L203,.L204
	.byte	0,7
	.word	.L205,.L206,.L207
	.byte	8
	.word	.L208,.L209
	.byte	8
	.word	.L210,.L211
	.byte	10
	.word	.L212,.L206,.L207
	.byte	0,7
	.word	.L179,.L213,.L25
	.byte	8
	.word	.L182,.L183
	.byte	8
	.word	.L184,.L185
	.byte	8
	.word	.L186,.L187
	.byte	8
	.word	.L188,.L189
	.byte	10
	.word	.L190,.L213,.L25
	.byte	0,0,0,7
	.word	.L214,.L215,.L38
	.byte	8
	.word	.L216,.L217
	.byte	8
	.word	.L218,.L219
	.byte	8
	.word	.L220,.L221
	.byte	8
	.word	.L222,.L223
	.byte	11
	.word	.L224,.L215,.L38
	.byte	6
	.byte	'nmChannelHandle',0,2,225,3,39
	.word	.L118,.L225
	.byte	6
	.byte	'stRepeatMessage_u8',0,2,230,3,31
	.word	.L118,.L226
	.byte	6
	.byte	'RepeatMessageRequest_b',0,2,232,3,33
	.word	.L118,.L227
	.byte	6
	.byte	'stNetworkState_e',0,2,237,3,44
	.word	.L131,.L228
	.byte	6
	.byte	'tiNMTimeoutTimer',0,2,241,3,39
	.word	.L133,.L229
	.byte	7
	.word	.L230,.L231,.L232
	.byte	8
	.word	.L233,.L234
	.byte	8
	.word	.L235,.L236
	.byte	8
	.word	.L237,.L238
	.byte	8
	.word	.L239,.L240
	.byte	10
	.word	.L241,.L231,.L232
	.byte	0,7
	.word	.L242,.L243,.L244
	.byte	8
	.word	.L245,.L246
	.byte	8
	.word	.L247,.L248
	.byte	10
	.word	.L249,.L243,.L244
	.byte	0,7
	.word	.L250,.L251,.L252
	.byte	8
	.word	.L253,.L254
	.byte	8
	.word	.L255,.L256
	.byte	8
	.word	.L257,.L258
	.byte	10
	.word	.L259,.L251,.L252
	.byte	0,0,0,7
	.word	.L260,.L261,.L51
	.byte	8
	.word	.L262,.L263
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	8
	.word	.L268,.L269
	.byte	9
	.word	.L270,.L271
	.byte	6
	.byte	'nmChannelHandle',0,2,205,4,39
	.word	.L118,.L273
	.byte	6
	.byte	'stRepeatMessage_u8',0,2,210,4,27
	.word	.L118,.L274
	.byte	6
	.byte	'RepeatMessageRequest_b',0,2,212,4,29
	.word	.L118,.L275
	.byte	6
	.byte	'stNetworkState_e',0,2,216,4,44
	.word	.L131,.L276
	.byte	6
	.byte	'tiNMTimeoutTimer',0,2,219,4,37
	.word	.L133,.L277
	.byte	7
	.word	.L230,.L278,.L51
	.byte	8
	.word	.L233,.L234
	.byte	8
	.word	.L235,.L236
	.byte	8
	.word	.L237,.L238
	.byte	8
	.word	.L239,.L240
	.byte	12
	.word	.L241,.L279
	.byte	0,7
	.word	.L230,.L272,.L280
	.byte	8
	.word	.L233,.L234
	.byte	8
	.word	.L235,.L236
	.byte	8
	.word	.L237,.L238
	.byte	8
	.word	.L239,.L240
	.byte	0,7
	.word	.L281,.L282,.L283
	.byte	8
	.word	.L284,.L285
	.byte	8
	.word	.L286,.L287
	.byte	10
	.word	.L288,.L282,.L283
	.byte	0,0,0,7
	.word	.L260,.L272,.L54
	.byte	8
	.word	.L262,.L263
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	8
	.word	.L268,.L269
	.byte	0,7
	.word	.L289,.L15,.L65
	.byte	8
	.word	.L290,.L291
	.byte	8
	.word	.L292,.L293
	.byte	11
	.word	.L294,.L15,.L65
	.byte	6
	.byte	'RepeatMsgTime',0,2,186,5,37
	.word	.L133,.L295
	.byte	6
	.byte	'stNetworkState_e',0,2,189,5,44
	.word	.L131,.L296
	.byte	6
	.byte	'tiNMTimeoutTimer',0,2,192,5,39
	.word	.L133,.L297
	.byte	7
	.word	.L298,.L299,.L300
	.byte	8
	.word	.L301,.L302
	.byte	8
	.word	.L303,.L304
	.byte	10
	.word	.L305,.L299,.L300
	.byte	0,7
	.word	.L306,.L63,.L64
	.byte	8
	.word	.L307,.L308
	.byte	8
	.word	.L309,.L310
	.byte	10
	.word	.L311,.L63,.L64
	.byte	0,0,0,7
	.word	.L205,.L312,.L68
	.byte	8
	.word	.L208,.L209
	.byte	8
	.word	.L210,.L211
	.byte	10
	.word	.L212,.L312,.L68
	.byte	0,7
	.word	.L298,.L313,.L314
	.byte	8
	.word	.L301,.L302
	.byte	8
	.word	.L303,.L304
	.byte	10
	.word	.L305,.L313,.L314
	.byte	0,7
	.word	.L306,.L72,.L70
	.byte	8
	.word	.L307,.L308
	.byte	8
	.word	.L309,.L310
	.byte	10
	.word	.L311,.L72,.L70
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0,10,11
	.byte	0,49,16,17,1,18,1,0,0,11,11,1,49,16,17,1,18,1,0,0,12,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_line'
.L109:
	.word	.L433-.L432
.L432:
	.half	3
	.word	.L435-.L434
.L434:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm\\api\\CanNm_Inl.h',0,0,0,0,0
.L435:
	.byte	5,31,7,0,5,2
	.word	.L95
	.byte	3,222,0,1,5,21,9
	.half	.L356-.L95
	.byte	3,36,1,5,5,9
	.half	.L357-.L356
	.byte	3,5,1,5,28,9
	.half	.L4-.L357
	.byte	3,9,1,4,2,5,14,9
	.half	.L138-.L4
	.byte	3,170,5,1,5,28,9
	.half	.L436-.L138
	.byte	1,4,1,5,27,9
	.half	.L162-.L436
	.byte	3,223,122,1,5,33,9
	.half	.L361-.L162
	.byte	3,1,1,5,31,9
	.half	.L437-.L361
	.byte	1,5,36,9
	.half	.L438-.L437
	.byte	3,4,1,5,35,9
	.half	.L362-.L438
	.byte	3,1,1,5,33,9
	.half	.L439-.L362
	.byte	1,9
	.half	.L440-.L439
	.byte	3,5,1,5,68,9
	.half	.L359-.L440
	.byte	3,9,1,5,35,9
	.half	.L441-.L359
	.byte	1,5,18,9
	.half	.L442-.L441
	.byte	3,6,1,5,5,9
	.half	.L443-.L442
	.byte	1,4,2,5,32,7,9
	.half	.L149-.L443
	.byte	3,35,1,5,9,9
	.half	.L444-.L149
	.byte	3,6,1,5,13,7,9
	.half	.L445-.L444
	.byte	3,3,1,5,58,9
	.half	.L446-.L445
	.byte	1,5,13,9
	.half	.L7-.L446
	.byte	3,54,1,5,17,7,9
	.half	.L447-.L7
	.byte	3,3,1,5,9,9
	.half	.L8-.L447
	.byte	3,25,1,4,1,5,33,9
	.half	.L6-.L8
	.byte	3,148,127,1,5,34,9
	.half	.L365-.L6
	.byte	3,2,1,5,14,9
	.half	.L366-.L365
	.byte	3,6,1,9
	.half	.L151-.L366
	.byte	3,14,1,9
	.half	.L153-.L151
	.byte	3,6,1,9
	.half	.L155-.L153
	.byte	3,16,1,9
	.half	.L157-.L155
	.byte	3,14,1,5,37,9
	.half	.L11-.L157
	.byte	3,82,1,4,2,5,33,9
	.half	.L167-.L11
	.byte	3,130,1,1,5,36,9
	.half	.L367-.L167
	.byte	3,4,1,5,13,9
	.half	.L369-.L367
	.byte	3,6,1,5,60,7,9
	.half	.L448-.L369
	.byte	3,3,1,5,45,9
	.half	.L368-.L448
	.byte	1,5,33,9
	.half	.L449-.L368
	.byte	3,3,1,5,17,9
	.half	.L450-.L449
	.byte	1,5,62,7,9
	.half	.L451-.L450
	.byte	3,2,1,5,83,9
	.half	.L452-.L451
	.byte	1,5,51,9
	.half	.L453-.L452
	.byte	1,5,60,9
	.half	.L18-.L453
	.byte	3,4,1,5,34,9
	.half	.L180-.L18
	.byte	3,128,4,1,5,59,9
	.half	.L363-.L180
	.byte	1,5,33,9
	.half	.L360-.L363
	.byte	3,3,1,5,21,9
	.half	.L454-.L360
	.byte	3,3,1,5,5,9
	.half	.L455-.L454
	.byte	1,5,9,7,9
	.half	.L456-.L455
	.byte	3,2,1,5,5,9
	.half	.L19-.L456
	.byte	3,17,1,5,29,9
	.half	.L457-.L19
	.byte	3,4,1,5,45,9
	.half	.L458-.L457
	.byte	3,6,1,5,73,9
	.half	.L459-.L458
	.byte	1,5,105,9
	.half	.L181-.L459
	.byte	3,221,123,1,5,17,9
	.half	.L17-.L181
	.byte	3,5,1,5,47,7,9
	.half	.L460-.L17
	.byte	3,3,1,5,48,9
	.half	.L371-.L460
	.byte	3,4,1,5,83,9
	.half	.L461-.L371
	.byte	1,5,33,9
	.half	.L462-.L461
	.byte	3,1,1,4,1,5,13,9
	.half	.L20-.L462
	.byte	3,226,126,1,5,39,9
	.half	.L12-.L20
	.byte	3,5,1,4,2,5,33,9
	.half	.L192-.L12
	.byte	3,184,1,1,5,5,9
	.half	.L375-.L192
	.byte	3,4,1,5,52,7,9
	.half	.L463-.L375
	.byte	3,3,1,5,34,9
	.half	.L203-.L463
	.byte	3,205,3,1,5,59,9
	.half	.L373-.L203
	.byte	1,5,33,9
	.half	.L374-.L373
	.byte	3,3,1,5,21,9
	.half	.L464-.L374
	.byte	3,3,1,5,5,9
	.half	.L465-.L464
	.byte	1,5,9,7,9
	.half	.L466-.L465
	.byte	3,2,1,5,5,9
	.half	.L24-.L466
	.byte	3,17,1,5,29,9
	.half	.L467-.L24
	.byte	3,4,1,5,45,9
	.half	.L468-.L467
	.byte	3,6,1,5,73,9
	.half	.L469-.L468
	.byte	1,5,105,9
	.half	.L204-.L469
	.byte	3,144,124,1,5,13,9
	.half	.L23-.L204
	.byte	3,5,1,5,9,9
	.half	.L470-.L23
	.byte	1,5,34,7,9
	.half	.L206-.L470
	.byte	3,204,5,1,5,54,9
	.half	.L376-.L206
	.byte	1,5,29,9
	.half	.L377-.L376
	.byte	3,3,1,5,27,9
	.half	.L471-.L377
	.byte	1,5,45,9
	.half	.L472-.L471
	.byte	3,18,1,5,62,9
	.half	.L473-.L472
	.byte	1,5,90,9
	.half	.L474-.L473
	.byte	1,5,34,9
	.half	.L475-.L474
	.byte	3,5,1,5,57,9
	.half	.L207-.L475
	.byte	3,156,122,1,5,13,9
	.half	.L26-.L207
	.byte	3,8,1,5,60,7,9
	.half	.L476-.L26
	.byte	3,3,1,5,45,9
	.half	.L477-.L476
	.byte	1,5,33,9
	.half	.L478-.L477
	.byte	3,3,1,5,17,9
	.half	.L479-.L478
	.byte	1,5,62,7,9
	.half	.L480-.L479
	.byte	3,2,1,5,83,9
	.half	.L481-.L480
	.byte	1,5,51,9
	.half	.L482-.L481
	.byte	1,5,60,9
	.half	.L29-.L482
	.byte	3,4,1,5,34,9
	.half	.L213-.L29
	.byte	3,178,3,1,5,59,9
	.half	.L378-.L213
	.byte	1,5,33,9
	.half	.L379-.L378
	.byte	3,3,1,5,21,9
	.half	.L483-.L379
	.byte	3,3,1,5,5,9
	.half	.L484-.L483
	.byte	1,5,9,7,9
	.half	.L485-.L484
	.byte	3,2,1,5,5,9
	.half	.L30-.L485
	.byte	3,17,1,5,29,9
	.half	.L486-.L30
	.byte	3,4,1,5,45,9
	.half	.L487-.L486
	.byte	3,6,1,5,73,9
	.half	.L488-.L487
	.byte	1,4,1,5,13,9
	.half	.L25-.L488
	.byte	3,210,122,1,5,28,9
	.half	.L13-.L25
	.byte	3,7,1,5,29,9
	.half	.L489-.L13
	.byte	3,4,1,4,2,5,48,9
	.half	.L215-.L489
	.byte	3,139,2,1,5,43,9
	.half	.L383-.L215
	.byte	3,2,1,5,33,9
	.half	.L384-.L383
	.byte	3,5,1,9
	.half	.L382-.L384
	.byte	3,2,1,5,36,9
	.half	.L381-.L382
	.byte	3,4,1,5,26,9
	.half	.L386-.L381
	.byte	3,6,1,5,12,9
	.half	.L490-.L386
	.byte	1,5,65,7,9
	.half	.L491-.L490
	.byte	1,5,118,7,9
	.half	.L492-.L491
	.byte	1,5,57,7,9
	.half	.L33-.L492
	.byte	3,3,1,5,24,9
	.half	.L231-.L33
	.byte	3,211,3,1,5,22,9
	.half	.L493-.L231
	.byte	1,5,39,9
	.half	.L494-.L493
	.byte	3,3,1,5,37,9
	.half	.L495-.L494
	.byte	1,5,45,9
	.half	.L496-.L495
	.byte	3,4,1,5,73,9
	.half	.L380-.L496
	.byte	1,5,21,9
	.half	.L385-.L380
	.byte	3,6,1,5,5,9
	.half	.L497-.L385
	.byte	1,5,9,7,9
	.half	.L498-.L497
	.byte	3,3,1,5,29,9
	.half	.L35-.L498
	.byte	3,5,1,5,30,9
	.half	.L232-.L35
	.byte	3,157,124,1,5,16,9
	.half	.L499-.L232
	.byte	1,5,87,7,9
	.half	.L500-.L499
	.byte	1,5,44,7,9
	.half	.L501-.L500
	.byte	3,2,1,5,92,9
	.half	.L36-.L501
	.byte	3,126,1,5,14,9
	.half	.L32-.L36
	.byte	3,10,1,5,13,9
	.half	.L502-.L32
	.byte	1,5,27,7,9
	.half	.L503-.L502
	.byte	3,1,1,5,41,9
	.half	.L504-.L503
	.byte	1,5,46,7,9
	.half	.L243-.L504
	.byte	3,179,4,1,5,67,9
	.half	.L505-.L243
	.byte	1,5,35,9
	.half	.L506-.L505
	.byte	1,5,34,9
	.half	.L507-.L506
	.byte	3,3,1,5,62,9
	.half	.L388-.L507
	.byte	1,5,41,9
	.half	.L389-.L388
	.byte	3,3,1,5,45,9
	.half	.L508-.L389
	.byte	3,4,1,5,62,9
	.half	.L509-.L508
	.byte	1,5,84,9
	.half	.L510-.L509
	.byte	1,5,5,9
	.half	.L511-.L510
	.byte	3,5,1,5,64,9
	.half	.L244-.L511
	.byte	3,193,123,1,5,13,9
	.half	.L39-.L244
	.byte	3,7,1,5,27,7,9
	.half	.L251-.L39
	.byte	3,134,4,1,5,25,9
	.half	.L512-.L251
	.byte	1,5,29,9
	.half	.L513-.L512
	.byte	3,3,1,5,45,9
	.half	.L391-.L513
	.byte	3,11,1,5,61,9
	.half	.L514-.L391
	.byte	1,5,82,9
	.half	.L515-.L514
	.byte	1,5,83,9
	.half	.L252-.L515
	.byte	3,238,123,1,4,1,5,13,9
	.half	.L38-.L252
	.byte	3,198,125,1,5,35,9
	.half	.L14-.L38
	.byte	3,13,1,4,2,5,33,9
	.half	.L261-.L14
	.byte	3,228,2,1,5,44,9
	.half	.L394-.L261
	.byte	3,5,1,5,39,9
	.half	.L395-.L394
	.byte	3,2,1,5,33,9
	.half	.L396-.L395
	.byte	3,3,1,5,36,9
	.half	.L397-.L396
	.byte	3,4,1,5,18,9
	.half	.L516-.L397
	.byte	3,4,1,5,5,9
	.half	.L517-.L516
	.byte	1,5,13,7,9
	.half	.L518-.L517
	.byte	3,3,1,5,9,9
	.half	.L393-.L518
	.byte	1,5,13,7,9
	.half	.L519-.L393
	.byte	3,2,1,9
	.half	.L520-.L519
	.byte	3,3,1,5,29,9
	.half	.L45-.L520
	.byte	3,21,1,5,15,9
	.half	.L521-.L45
	.byte	1,5,68,7,9
	.half	.L522-.L521
	.byte	1,5,121,7,9
	.half	.L523-.L522
	.byte	1,5,61,7,9
	.half	.L49-.L523
	.byte	3,3,1,5,24,9
	.half	.L278-.L49
	.byte	3,206,2,1,5,22,9
	.half	.L524-.L278
	.byte	1,5,39,9
	.half	.L525-.L524
	.byte	3,3,1,5,37,9
	.half	.L526-.L525
	.byte	1,5,45,9
	.half	.L527-.L526
	.byte	3,4,1,5,73,9
	.half	.L528-.L527
	.byte	1,5,21,9
	.half	.L529-.L528
	.byte	3,6,1,5,5,9
	.half	.L530-.L529
	.byte	1,5,9,7,9
	.half	.L531-.L530
	.byte	3,3,1,4,1,5,33,9
	.half	.L51-.L531
	.byte	3,136,122,1,4,2,5,29,9
	.half	.L272-.L51
	.byte	3,253,5,1,5,34,9
	.half	.L280-.L272
	.byte	3,159,125,1,5,20,9
	.half	.L532-.L280
	.byte	1,5,91,7,9
	.half	.L533-.L532
	.byte	1,5,48,7,9
	.half	.L534-.L533
	.byte	3,4,1,5,96,9
	.half	.L52-.L534
	.byte	3,124,1,5,13,9
	.half	.L48-.L52
	.byte	3,12,1,5,24,7,9
	.half	.L282-.L48
	.byte	3,241,2,1,5,22,9
	.half	.L535-.L282
	.byte	1,5,45,9
	.half	.L536-.L535
	.byte	3,4,1,5,62,9
	.half	.L537-.L536
	.byte	1,5,89,9
	.half	.L538-.L537
	.byte	1,5,32,9
	.half	.L539-.L538
	.byte	3,6,1,5,30,9
	.half	.L540-.L539
	.byte	1,5,68,9
	.half	.L283-.L540
	.byte	3,136,125,1,4,1,5,13,9
	.half	.L54-.L283
	.byte	3,220,124,1,4,2,5,33,9
	.half	.L15-.L54
	.byte	3,198,3,1,9
	.half	.L541-.L15
	.byte	3,5,1,5,34,9
	.half	.L400-.L541
	.byte	3,1,1,5,11,9
	.half	.L401-.L400
	.byte	3,3,1,5,10,9
	.half	.L399-.L401
	.byte	1,5,24,7,9
	.half	.L542-.L399
	.byte	3,1,1,5,38,9
	.half	.L543-.L542
	.byte	1,5,10,7,9
	.half	.L544-.L543
	.byte	3,2,1,9
	.half	.L545-.L544
	.byte	3,3,1,9
	.half	.L58-.L545
	.byte	3,5,1,5,6,9
	.half	.L546-.L58
	.byte	1,5,26,7,9
	.half	.L547-.L546
	.byte	3,5,1,5,10,9
	.half	.L548-.L547
	.byte	1,5,57,7,9
	.half	.L549-.L548
	.byte	3,3,1,5,78,9
	.half	.L550-.L549
	.byte	1,5,44,9
	.half	.L551-.L550
	.byte	1,5,10,9
	.half	.L62-.L551
	.byte	3,6,1,5,24,7,9
	.half	.L299-.L62
	.byte	3,218,1,1,5,22,9
	.half	.L552-.L299
	.byte	1,5,45,9
	.half	.L553-.L552
	.byte	3,4,1,5,62,9
	.half	.L554-.L553
	.byte	1,5,87,9
	.half	.L555-.L554
	.byte	1,5,32,9
	.half	.L556-.L555
	.byte	3,6,1,5,30,9
	.half	.L557-.L556
	.byte	1,5,63,9
	.half	.L300-.L557
	.byte	3,158,126,1,5,27,9
	.half	.L63-.L300
	.byte	3,186,1,1,5,25,9
	.half	.L558-.L63
	.byte	1,5,45,9
	.half	.L559-.L558
	.byte	3,11,1,5,61,9
	.half	.L560-.L559
	.byte	1,5,85,9
	.half	.L561-.L560
	.byte	1,5,10,9
	.half	.L64-.L561
	.byte	3,189,126,1,4,1,5,13,9
	.half	.L65-.L64
	.byte	3,154,124,1,9
	.half	.L16-.L65
	.byte	3,7,1,5,28,9
	.half	.L22-.L16
	.byte	3,5,1,5,23,9
	.half	.L402-.L22
	.byte	3,3,1,5,9,9
	.half	.L562-.L402
	.byte	1,5,65,7,9
	.half	.L563-.L562
	.byte	1,4,2,5,34,7,9
	.half	.L312-.L563
	.byte	3,220,6,1,5,54,9
	.half	.L564-.L312
	.byte	1,5,29,9
	.half	.L565-.L564
	.byte	3,3,1,5,27,9
	.half	.L566-.L565
	.byte	1,5,45,9
	.half	.L567-.L566
	.byte	3,18,1,5,62,9
	.half	.L568-.L567
	.byte	1,5,90,9
	.half	.L569-.L568
	.byte	1,5,34,9
	.half	.L570-.L569
	.byte	3,5,1,4,1,5,8,9
	.half	.L68-.L570
	.byte	3,147,121,1,5,46,7,9
	.half	.L571-.L68
	.byte	1,5,9,7,9
	.half	.L572-.L571
	.byte	3,2,1,4,2,5,24,9
	.half	.L313-.L572
	.byte	3,162,5,1,5,22,9
	.half	.L404-.L313
	.byte	1,5,45,9
	.half	.L573-.L404
	.byte	3,4,1,5,62,9
	.half	.L574-.L573
	.byte	1,5,87,9
	.half	.L575-.L574
	.byte	1,5,32,9
	.half	.L576-.L575
	.byte	3,6,1,5,30,9
	.half	.L577-.L576
	.byte	1,4,1,5,62,9
	.half	.L314-.L577
	.byte	3,215,122,1,4,2,5,27,9
	.half	.L72-.L314
	.byte	3,129,5,1,5,25,9
	.half	.L405-.L72
	.byte	1,5,45,9
	.half	.L578-.L405
	.byte	3,11,1,5,61,9
	.half	.L579-.L578
	.byte	1,5,85,9
	.half	.L580-.L579
	.byte	1,4,1,5,26,9
	.half	.L70-.L580
	.byte	3,129,123,1,5,5,9
	.half	.L407-.L70
	.byte	3,3,1,5,1,9
	.half	.L5-.L407
	.byte	3,1,1,7,9
	.half	.L111-.L5
	.byte	0,1,1
.L433:
	.sdecl	'.debug_ranges',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L95,0,.L111-.L95,0,0
.L148:
	.word	-1,.L95,.L4-.L95,.L138-.L95,.L149-.L95,.L6-.L95,.L150-.L95,.L151-.L95,.L152-.L95,.L153-.L95,.L154-.L95
	.word	.L155-.L95,.L156-.L95,.L157-.L95,.L158-.L95,.L159-.L95,0,0
.L271:
	.word	-1,.L95,.L261-.L95,.L51-.L95,.L272-.L95,.L54-.L95,0,0
.L279:
	.word	-1,.L95,.L278-.L95,.L51-.L95,.L272-.L95,.L280-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_info'
.L112:
	.word	609
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L98
	.byte	3
	.byte	'CanNm_MainFunctionTx',0,1,196,2,31,1,1
	.word	.L97,.L315,.L96
	.byte	4
	.byte	'CanNm_NetworkHandle',0,1,196,2,88
	.word	.L316,.L317
	.byte	5
	.word	.L97,.L315
	.byte	6
	.byte	'ConfigPtr_pcs',0,1,200,2,67
	.word	.L120,.L318
	.byte	6
	.byte	'RamPtr_ps',0,1,203,2,54
	.word	.L126,.L319
	.byte	6
	.byte	'RetValOfFuncs_ui',0,1,206,2,33
	.word	.L320,.L321
	.byte	6
	.byte	'nmChannelHandle',0,1,209,2,23
	.word	.L118,.L322
	.byte	7
	.word	.L323,.L79,.L324
	.byte	8
	.word	.L325,.L326
	.byte	8
	.word	.L327,.L328
	.byte	9
	.word	.L329,.L79,.L324
	.byte	6
	.byte	'TxBufferPtr',0,2,155,9,46
	.word	.L330,.L331
	.byte	6
	.byte	'UserDataPtr',0,2,164,9,47
	.word	.L330,.L332
	.byte	6
	.byte	'UserDataOffset',0,2,166,9,33
	.word	.L320,.L333
	.byte	7
	.word	.L334,.L335,.L324
	.byte	8
	.word	.L336,.L337
	.byte	8
	.word	.L338,.L339
	.byte	8
	.word	.L340,.L341
	.byte	9
	.word	.L342,.L335,.L324
	.byte	6
	.byte	'Index_ui',0,2,255,9,17
	.word	.L320,.L343
	.byte	0,0,0,0,7
	.word	.L344,.L324,.L85
	.byte	8
	.word	.L345,.L346
	.byte	8
	.word	.L347,.L348
	.byte	9
	.word	.L349,.L324,.L85
	.byte	6
	.byte	'RetValOfFuncs_ui',0,2,151,10,65
	.word	.L118,.L350
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_line'
.L114:
	.word	.L582-.L581
.L581:
	.half	3
	.word	.L584-.L583
.L583:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\CanNm\\src\\CanNm.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\CanNm\\api\\CanNm_Inl.h',0,0,0,0,0
.L584:
	.byte	5,18,7,0,5,2
	.word	.L97
	.byte	3,213,2,1,5,33,9
	.half	.L585-.L97
	.byte	1,5,21,9
	.half	.L409-.L585
	.byte	3,3,1,5,36,9
	.half	.L410-.L409
	.byte	3,3,1,5,18,9
	.half	.L411-.L410
	.byte	3,3,1,5,8,9
	.half	.L586-.L411
	.byte	1,5,55,7,9
	.half	.L587-.L586
	.byte	1,5,71,9
	.half	.L588-.L587
	.byte	1,5,14,7,9
	.half	.L589-.L588
	.byte	3,1,1,5,94,9
	.half	.L590-.L589
	.byte	1,5,21,7,9
	.half	.L591-.L590
	.byte	3,4,1,5,9,9
	.half	.L592-.L591
	.byte	1,5,54,7,9
	.half	.L593-.L592
	.byte	3,3,1,5,39,9
	.half	.L594-.L593
	.byte	1,5,68,9
	.half	.L595-.L594
	.byte	1,5,54,9
	.half	.L78-.L595
	.byte	3,5,1,5,39,9
	.half	.L596-.L78
	.byte	1,5,22,9
	.half	.L597-.L596
	.byte	3,3,1,5,40,9
	.half	.L598-.L597
	.byte	1,5,25,9
	.half	.L599-.L598
	.byte	3,3,1,5,13,9
	.half	.L600-.L599
	.byte	1,5,58,7,9
	.half	.L601-.L600
	.byte	3,3,1,5,43,9
	.half	.L602-.L601
	.byte	1,4,2,5,35,9
	.half	.L79-.L602
	.byte	3,190,6,1,5,65,9
	.half	.L603-.L79
	.byte	1,5,50,9
	.half	.L412-.L603
	.byte	1,5,30,9
	.half	.L604-.L412
	.byte	3,1,1,5,21,9
	.half	.L414-.L604
	.byte	3,7,1,5,49,9
	.half	.L605-.L414
	.byte	1,5,5,9
	.half	.L606-.L605
	.byte	1,5,34,7,9
	.half	.L607-.L606
	.byte	3,3,1,5,20,9
	.half	.L416-.L607
	.byte	3,3,1,5,71,9
	.half	.L417-.L416
	.byte	1,5,60,9
	.half	.L608-.L417
	.byte	1,5,44,9
	.half	.L81-.L608
	.byte	3,6,1,5,59,9
	.half	.L418-.L81
	.byte	3,3,1,5,18,9
	.half	.L335-.L418
	.byte	3,55,1,5,37,9
	.half	.L413-.L335
	.byte	1,5,20,9
	.half	.L83-.L413
	.byte	3,2,1,5,18,9
	.half	.L609-.L83
	.byte	1,5,15,9
	.half	.L610-.L609
	.byte	3,1,1,5,16,9
	.half	.L611-.L610
	.byte	3,1,1,5,47,9
	.half	.L612-.L611
	.byte	3,124,1,5,37,9
	.half	.L82-.L612
	.byte	1,5,53,7,9
	.half	.L324-.L82
	.byte	3,25,1,5,75,9
	.half	.L408-.L324
	.byte	1,5,6,9
	.half	.L415-.L408
	.byte	3,2,1,5,8,7,9
	.half	.L613-.L415
	.byte	3,3,1,5,49,9
	.half	.L614-.L613
	.byte	3,3,1,5,47,9
	.half	.L615-.L614
	.byte	1,5,6,9
	.half	.L84-.L615
	.byte	3,4,1,4,1,5,9,9
	.half	.L85-.L84
	.byte	3,217,120,1,5,12,9
	.half	.L616-.L85
	.byte	3,3,1,5,65,7,9
	.half	.L617-.L616
	.byte	1,5,84,9
	.half	.L618-.L617
	.byte	1,5,13,7,9
	.half	.L619-.L618
	.byte	3,3,1,5,43,9
	.half	.L620-.L619
	.byte	3,3,1,5,41,9
	.half	.L621-.L620
	.byte	1,5,19,9
	.half	.L75-.L621
	.byte	3,5,1,5,9,9
	.half	.L622-.L75
	.byte	1,5,72,7,9
	.half	.L623-.L622
	.byte	1,5,86,9
	.half	.L624-.L623
	.byte	1,5,23,7,9
	.half	.L625-.L624
	.byte	3,1,1,5,39,9
	.half	.L626-.L625
	.byte	1,5,53,7,9
	.half	.L627-.L626
	.byte	1,5,139,1,9
	.half	.L628-.L627
	.byte	1,5,31,7,9
	.half	.L629-.L628
	.byte	3,3,1,5,47,9
	.half	.L421-.L629
	.byte	3,5,1,5,45,9
	.half	.L630-.L421
	.byte	1,5,1,9
	.half	.L88-.L630
	.byte	3,2,1,7,9
	.half	.L116-.L88
	.byte	0,1,1
.L582:
	.sdecl	'.debug_ranges',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L97,0,.L116-.L97,0,0
	.sdecl	'.debug_loc',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L354-.L95
	.half	2
	.byte	138,0
	.word	.L354-.L95,.L122-.L95
	.half	2
	.byte	138,8
	.word	.L122-.L95,.L122-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L124:
	.word	-1,.L95,0,.L355-.L95
	.half	1
	.byte	84
	.word	.L356-.L95,.L122-.L95
	.half	1
	.byte	88
	.word	.L4-.L95,.L359-.L95
	.half	1
	.byte	84
	.word	.L406-.L95,.L407-.L95
	.half	1
	.byte	84
	.word	0,0
.L169:
	.word	0,0
.L194:
	.word	0,0
.L217:
	.word	0,0
.L263:
	.word	0,0
.L183:
	.word	0,0
.L234:
	.word	0,0
.L254:
	.word	0,0
.L125:
	.word	-1,.L95,.L357-.L95,.L122-.L95
	.half	1
	.byte	108
	.word	0,0
.L140:
	.word	0,0
.L171:
	.word	0,0
.L196:
	.word	0,0
.L219:
	.word	0,0
.L265:
	.word	0,0
.L291:
	.word	0,0
.L187:
	.word	0,0
.L308:
	.word	0,0
.L302:
	.word	0,0
.L238:
	.word	0,0
.L285:
	.word	0,0
.L256:
	.word	0,0
.L246:
	.word	0,0
.L209:
	.word	0,0
.L130:
	.word	-1,.L95,.L359-.L95,.L363-.L95
	.half	1
	.byte	84
	.word	.L17-.L95,.L370-.L95
	.half	1
	.byte	84
	.word	.L12-.L95,.L373-.L95
	.half	1
	.byte	84
	.word	.L23-.L95,.L376-.L95
	.half	1
	.byte	84
	.word	.L26-.L95,.L378-.L95
	.half	1
	.byte	84
	.word	.L13-.L95,.L380-.L95
	.half	1
	.byte	84
	.word	.L32-.L95,.L388-.L95
	.half	1
	.byte	84
	.word	.L39-.L95,.L390-.L95
	.half	1
	.byte	84
	.word	.L14-.L95,.L392-.L95
	.half	1
	.byte	84
	.word	.L15-.L95,.L398-.L95
	.half	1
	.byte	84
	.word	.L16-.L95,.L22-.L95
	.half	1
	.byte	84
	.word	0,0
.L223:
	.word	0,0
.L269:
	.word	0,0
.L128:
	.word	-1,.L95,.L361-.L95,.L360-.L95
	.half	1
	.byte	83
	.word	.L17-.L95,.L371-.L95
	.half	1
	.byte	83
	.word	.L12-.L95,.L374-.L95
	.half	1
	.byte	83
	.word	.L23-.L95,.L377-.L95
	.half	1
	.byte	83
	.word	.L26-.L95,.L379-.L95
	.half	1
	.byte	83
	.word	.L13-.L95,.L381-.L95
	.half	1
	.byte	83
	.word	.L14-.L95,.L45-.L95
	.half	1
	.byte	83
	.word	.L15-.L95,.L58-.L95
	.half	1
	.byte	83
	.word	.L16-.L95,.L22-.L95
	.half	1
	.byte	83
	.word	0,0
.L144:
	.word	0,0
.L175:
	.word	0,0
.L200:
	.word	0,0
.L129:
	.word	-1,.L95,.L362-.L95,.L152-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	.L11-.L95,.L360-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	.L17-.L95,.L371-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L146:
	.word	0,0
.L185:
	.word	0,0
.L236:
	.word	0,0
.L127:
	.word	-1,.L95,.L358-.L95,.L122-.L95
	.half	1
	.byte	111
	.word	0,0
.L142:
	.word	0,0
.L173:
	.word	0,0
.L198:
	.word	0,0
.L221:
	.word	0,0
.L267:
	.word	0,0
.L293:
	.word	0,0
.L164:
	.word	0,0
.L189:
	.word	0,0
.L310:
	.word	0,0
.L304:
	.word	0,0
.L240:
	.word	0,0
.L287:
	.word	0,0
.L258:
	.word	0,0
.L248:
	.word	0,0
.L211:
	.word	0,0
.L227:
	.word	-1,.L95,.L384-.L95,.L385-.L95
	.half	1
	.byte	81
	.word	.L32-.L95,.L389-.L95
	.half	1
	.byte	81
	.word	.L39-.L95,.L391-.L95
	.half	1
	.byte	81
	.word	0,0
.L275:
	.word	-1,.L95,.L396-.L95,.L15-.L95
	.half	1
	.byte	92
	.word	0,0
.L134:
	.word	-1,.L95,.L366-.L95,.L5-.L95
	.half	1
	.byte	89
	.word	0,0
.L295:
	.word	-1,.L95,.L401-.L95,.L16-.L95
	.half	1
	.byte	91
	.word	0,0
.L136:
	.word	-1,.L95,.L402-.L95,.L5-.L95
	.half	1
	.byte	90
	.word	0,0
.L160:
	.word	-1,.L95,.L138-.L95,.L360-.L95
	.half	1
	.byte	82
	.word	.L17-.L95,.L371-.L95
	.half	1
	.byte	82
	.word	.L12-.L95,.L374-.L95
	.half	1
	.byte	82
	.word	.L23-.L95,.L377-.L95
	.half	1
	.byte	82
	.word	.L26-.L95,.L379-.L95
	.half	1
	.byte	82
	.word	.L13-.L95,.L382-.L95
	.half	1
	.byte	82
	.word	.L14-.L95,.L393-.L95
	.half	1
	.byte	82
	.word	.L15-.L95,.L399-.L95
	.half	1
	.byte	82
	.word	.L16-.L95,.L22-.L95
	.half	1
	.byte	82
	.word	0,0
.L178:
	.word	-1,.L95,.L369-.L95,.L180-.L95
	.half	1
	.byte	90
	.word	.L17-.L95,.L20-.L95
	.half	1
	.byte	90
	.word	.L370-.L95,.L371-.L95
	.half	1
	.byte	84
	.word	.L372-.L95,.L20-.L95
	.half	1
	.byte	85
	.word	0,0
.L225:
	.word	-1,.L95,.L386-.L95,.L14-.L95
	.half	1
	.byte	90
	.word	.L387-.L95,.L36-.L95
	.half	1
	.byte	84
	.word	0,0
.L273:
	.word	0,0
.L132:
	.word	-1,.L95,.L364-.L95,.L150-.L95
	.half	1
	.byte	95
	.word	.L365-.L95,.L5-.L95
	.half	2
	.byte	145,120
	.word	.L403-.L95,.L404-.L95
	.half	1
	.byte	95
	.word	.L72-.L95,.L405-.L95
	.half	1
	.byte	95
	.word	0,0
.L177:
	.word	-1,.L95,.L367-.L95,.L368-.L95
	.half	1
	.byte	95
	.word	.L17-.L95,.L20-.L95
	.half	1
	.byte	95
	.word	0,0
.L202:
	.word	-1,.L95,.L375-.L95,.L374-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	.L23-.L95,.L377-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	.L26-.L95,.L379-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L228:
	.word	-1,.L95,.L382-.L95,.L385-.L95
	.half	1
	.byte	82
	.word	.L32-.L95,.L389-.L95
	.half	1
	.byte	82
	.word	.L39-.L95,.L391-.L95
	.half	1
	.byte	82
	.word	0,0
.L276:
	.word	-1,.L95,.L394-.L95,.L15-.L95
	.half	1
	.byte	93
	.word	0,0
.L296:
	.word	0,0
.L226:
	.word	-1,.L95,.L383-.L95,.L14-.L95
	.half	1
	.byte	92
	.word	0,0
.L274:
	.word	-1,.L95,.L395-.L95,.L15-.L95
	.half	1
	.byte	91
	.word	0,0
.L229:
	.word	-1,.L95,.L381-.L95,.L385-.L95
	.half	1
	.byte	83
	.word	.L32-.L95,.L389-.L95
	.half	1
	.byte	83
	.word	.L39-.L95,.L391-.L95
	.half	1
	.byte	83
	.word	0,0
.L277:
	.word	-1,.L95,.L397-.L95,.L45-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L297:
	.word	-1,.L95,.L400-.L95,.L58-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L117-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L119:
	.word	-1,.L93,.L351-.L93,.L117-.L93
	.half	1
	.byte	95
	.word	.L352-.L93,.L353-.L93
	.half	1
	.byte	84
	.word	0,0
.L121:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L315-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L317:
	.word	-1,.L97,0,.L408-.L97
	.half	1
	.byte	84
	.word	0,0
.L318:
	.word	-1,.L97,.L410-.L97,.L315-.L97
	.half	1
	.byte	108
	.word	0,0
.L326:
	.word	0,0
.L346:
	.word	0,0
.L339:
	.word	0,0
.L343:
	.word	-1,.L97,.L413-.L97,.L415-.L97
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L341:
	.word	0,0
.L319:
	.word	-1,.L97,.L409-.L97,.L315-.L97
	.half	1
	.byte	111
	.word	.L419-.L97,.L415-.L97
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	0,0
.L348:
	.word	0,0
.L321:
	.word	0,0
.L350:
	.word	-1,.L97,.L415-.L97,.L75-.L97
	.half	1
	.byte	82
	.word	0,0
.L337:
	.word	0,0
.L331:
	.word	-1,.L97,.L416-.L97,.L417-.L97
	.half	1
	.byte	100
	.word	.L418-.L97,.L419-.L97
	.half	1
	.byte	100
	.word	0,0
.L333:
	.word	-1,.L97,.L412-.L97,.L413-.L97
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L332:
	.word	-1,.L97,.L414-.L97,.L415-.L97
	.half	1
	.byte	98
	.word	0,0
.L322:
	.word	-1,.L97,.L411-.L97,.L315-.L97
	.half	1
	.byte	88
	.word	.L420-.L97,.L421-.L97
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L631:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CanNm_MainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L631,.L93,.L117-.L93
	.sdecl	'.debug_frame',debug,cluster('CanNm_InternalMainProcess')
	.sect	'.debug_frame'
	.word	36
	.word	.L631,.L95,.L122-.L95
	.byte	4
	.word	(.L354-.L95)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L122-.L354)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CanNm_MainFunctionTx')
	.sect	'.debug_frame'
	.word	12
	.word	.L631,.L97,.L315-.L97

; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   409  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   410  #define CANNM_STOP_SEC_CODE
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   411  #include "CanNm_MemMap.h"
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   412  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   413  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   414  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   415  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   416  /***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   417   Function name    : CanNm_MainProcess_EIRA
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   418   Syntax           : void CanNm_MainProcess_EIRA( void )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   419   Description      : This is the internal function of CanNm for transmission of Nm messages on CAN.
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   420   Parameter        : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   421   Return value     : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   422   ***************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   423  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   424  #if (CANNM_EIRACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   425  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_MainProcess_EIRA(void)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   426  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   427      VAR(uint8_least,CANNM_VAR)  Index_ui;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   428      VAR(boolean,CANNM_VAR)      up_Indication_b;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   429      P2CONST(CanNm_PNConfigType, AUTOMATIC, CANNM_APPL_CONST)  PnInfoType_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   430      VAR(uint8,CANNM_VAR)        currentStatusEIRA_au8[CANNM_PN_INFOLENGTH];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   431  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   432      up_Indication_b = FALSE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   433  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   434      /*** protect from interrupt ***/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   435      SchM_Enter_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   436  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   437      /* Copy the Current status into a local status variable */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   438      for (Index_ui = 0;Index_ui < CANNM_PN_INFOLENGTH;Index_ui++)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   439      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   440          /* Check if any PN , which is relevant for ECU, is requested */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   441          currentStatusEIRA_au8[Index_ui] = CanNM_EIRACurrentStatus_au8[Index_ui];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   442          /* Reset the Current status as the data is retrieved */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   443          CanNM_EIRACurrentStatus_au8[Index_ui] = 0;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   444  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   445      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   446  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   447      SchM_Exit_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   448  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   449      PnInfoType_pcs = CanNm_GlobalConfigData_pcs->PnInfo_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   450      for (Index_ui = 0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   451      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   452  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   453          /* Check if the latest state of the PN is SET */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   454          if((currentStatusEIRA_au8[PnInfoType_pcs->ByteNum] & (PnInfoType_pcs->BitMask)) != 0u)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   455          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   456              /* Reload the timer */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   457              /* Timer value +1 is added as the counter is immediately decremented */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   458              CanNm_PNTimer_au32[Index_ui] = (uint32)(CanNm_GlobalConfigData_pcs->PnResetTime + 1u);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   459              /* Check if the Status of the EIRA Flag was '0'(to detect a change)*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   460              if ((uint8)(CanNM_EIRAGlobalStatus_au8[PnInfoType_pcs->ByteNum] & (PnInfoType_pcs->BitMask)) == (uint8)0x0)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   461              {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   462                  /* Set the status of the EIRA flag to '1' */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   463                  CanNM_EIRAGlobalStatus_au8[PnInfoType_pcs->ByteNum] = (CanNM_EIRAGlobalStatus_au8[PnInfoType_pcs->ByteNum] | (PnInfoType_pcs->BitMask));
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   464  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   465                  /* Inform COMM about the change in EIRA Status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   466                  up_Indication_b = TRUE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   467              }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   468          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   469  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   470          /* Reduce the ticks for the PN-EIRA timer, if it is started  */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   471          if (CanNm_PNTimer_au32[Index_ui] != 0U)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   472          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   473              CanNm_PNTimer_au32[Index_ui]--;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   474              /* If there is a Time-Out and if the Old state of the PN was Set */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   475              if (CanNm_PNTimer_au32[Index_ui] == 0U)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   476              {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   477                  /* Set the status of the EIRA flag to '0' */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   478                  CanNM_EIRAGlobalStatus_au8[PnInfoType_pcs->ByteNum] = (CanNM_EIRAGlobalStatus_au8[PnInfoType_pcs->ByteNum] & ((uint8)(~(PnInfoType_pcs->BitMask))));
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   479  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   480                  /* Inform COMM about the change in EIRA Status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   481                  up_Indication_b = TRUE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   482  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   483              }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   484  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   485          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   486  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   487  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   488          /* Check if the latest state of the PN is RESET */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   489          PnInfoType_pcs++;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   490      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   491  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   492      if (up_Indication_b == TRUE)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   493      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   494          PduInfoType Data;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   495          Data.SduDataPtr = CanNM_EIRAGlobalStatus_au8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   496          Data.SduLength = CANNM_PN_INFOLENGTH;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   497          /*Notify about the change in EIRA*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   498          PduR_CanNmRxIndication(CANNM_PNEIRA_RXPDU_ID,&Data);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   499      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   500  }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   501  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   502  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   503  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   504  /***************************************************************************************************
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   505   Function name    : CanNm_MainProcess_ERA
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   506   Syntax           : void CanNm_MainProcess_ERA( NetworkHandleType CanNm_NetworkHandle )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   507   Description      : This is the internal function of CanNm for transmission of Nm messages on CAN.
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   508   Parameter        : CanNm_NetworkHandle - Identification of the CANNM-channel
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   509   Return value     : None
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   510   ***************************************************************************************************/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   511  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   512  #if (CANNM_ERACALC_ENABLED != STD_OFF)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   513  LOCAL_INLINE FUNC(void, CANNM_CODE) CanNm_MainProcess_ERA(VAR(NetworkHandleType, AUTOMATIC) CanNm_NetworkHandle)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   514  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   515      /* Pointer to Configuration Data */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   516      P2CONST(CanNm_ChannelConfigType, AUTOMATIC, CANNM_APPL_CONST) ConfigPtr_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   517      P2CONST(CanNm_PNConfigType, AUTOMATIC, CANNM_APPL_CONST)  PnInfoType_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   518      P2VAR(uint32, AUTOMATIC, CANNM_APPL_CONST) StartIndex_timer_pu32;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   519      VAR(uint8,CANNM_VAR) currentStatusERA_au8[CANNM_PN_INFOLENGTH];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   520      VAR(uint8_least,CANNM_VAR) Index_ui;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   521      VAR(uint8,CANNM_VAR) start_index_status_u8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   522      VAR(uint8,CANNM_VAR) start_index_timer_u8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   523      VAR(uint8,CANNM_VAR) index_ERA_u8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   524      boolean up_Indication_b;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   525  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   526      up_Indication_b = FALSE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   527      /* Initialize the Config data Ptr */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   528      ConfigPtr_pcs = CANNM_GET_CHANNEL_CONFIG(CanNm_NetworkHandle);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   529      /* get the start index for the channel in ERA array */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   530      start_index_status_u8 = CANNM_GetStartIndex_ERAStatus(ConfigPtr_pcs->ChannelOffset_u8);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   531      /* get the start index for the channel in Timer array */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   532      start_index_timer_u8 = CANNM_GetStartIndex_ERATimer(ConfigPtr_pcs->ChannelOffset_u8);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   533  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   534      /*** protect from interrupt ***/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   535      SchM_Enter_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   536  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   537      /* Copy the Current status into a local status variable */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   538      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   539          uint8 * StartIndex_Status_pu8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   540          StartIndex_Status_pu8 = &CanNM_ERACurrentStatus_au8[start_index_status_u8];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   541          for (Index_ui = 0; Index_ui < CANNM_PN_INFOLENGTH; Index_ui++)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   542          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   543              /* Check if any PN , which is relevant for ECU, is requested */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   544              currentStatusERA_au8[Index_ui] = *StartIndex_Status_pu8;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   545              /* Reset the Current status as the data is retrieved */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   546              *StartIndex_Status_pu8 = 0;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   547              StartIndex_Status_pu8++;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   548  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   549          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   550      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   551  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   552      SchM_Exit_CanNm_MainFunctionNoNest();
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   553  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   554      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   555          PnInfoType_pcs = CanNm_GlobalConfigData_pcs->PnInfo_pcs;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   556  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   557          StartIndex_timer_pu32 = &CanNm_PNTimer_ERA_au32[start_index_timer_u8];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   558  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   559          /* Loop through Partial networks for this channel */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   560          for (Index_ui =  0; Index_ui < CANNM_GET_NUMBER_OF_PN_CONFIGURED(); Index_ui++)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   561          {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   562              /* Get the index into the CanNM_ERAGlobalStatus array for this PNC */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   563              index_ERA_u8 = start_index_status_u8 + PnInfoType_pcs->ByteNum;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   564              /* Check if the latest state of the PN is SET */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   565              if((currentStatusERA_au8[PnInfoType_pcs->ByteNum] & (PnInfoType_pcs->BitMask)) != 0u )
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   566              {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   567                  /* Reload the timer */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   568                  /* Timer value +1 is added as the counter is immediately decremented */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   569                  *StartIndex_timer_pu32 = (uint32)(CanNm_GlobalConfigData_pcs->PnResetTime + 1u);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   570                  /* Check if the Status of the ERA Flag was '0'(to detect a change)*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   571                  if ((uint8)(CanNM_ERAGlobalStatus_au8[index_ERA_u8] & (PnInfoType_pcs->BitMask)) == (uint8)0x0)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   572                  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   573                      /* Set the status of the ERA flag to '1' */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   574                      CanNM_ERAGlobalStatus_au8[index_ERA_u8] = (CanNM_ERAGlobalStatus_au8[index_ERA_u8]  | (PnInfoType_pcs->BitMask));
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   575  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   576                      /* Inform COMM about the change in ERA Status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   577                      up_Indication_b = TRUE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   578                  }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   579              }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   580  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   581              /* Reduce the ticks for the PN-ERA timer, if it is started  */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   582              if (*StartIndex_timer_pu32 != 0U)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   583              {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   584                  *StartIndex_timer_pu32 = (uint32)(*StartIndex_timer_pu32) - 1u;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   585                  /* If there is a Time-Out and if the Old state of the PN was Set */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   586                  if (*StartIndex_timer_pu32 == 0U)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   587                  {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   588                      /* Set the status of the ERA flag to '0' */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   589                      CanNM_ERAGlobalStatus_au8[index_ERA_u8] = (CanNM_ERAGlobalStatus_au8[index_ERA_u8] & ((uint8)(~(PnInfoType_pcs->BitMask))));
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   590  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   591                      /* Inform COMM about the change in ERA Status */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   592                      up_Indication_b = TRUE;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   593  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   594                  }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   595  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   596              }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   597  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   598              /* Increment to point to the next PN */
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   599              PnInfoType_pcs++;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   600              StartIndex_timer_pu32++;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   601          }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   602      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   603  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   604      if (up_Indication_b == TRUE)
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   605      {
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   606          PduInfoType Data;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   607          Data.SduDataPtr = &CanNM_ERAGlobalStatus_au8[start_index_status_u8];
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   608          Data.SduLength = CANNM_PN_INFOLENGTH;
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   609          /*Notify about the change in ERA*/
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   610          PduR_CanNmRxIndication(ConfigPtr_pcs->ERA_ComPduId_u8,&Data);
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   611      }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   612  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   613  }
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   614  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   615  #endif
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   616  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   617  
; BSW\src\BSW\Gen\CanNm\src\CanNm.c	   618  

	; Module end
