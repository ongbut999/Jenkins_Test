	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14204a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\rba_FeeFs1_HlWriteBlock.src BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c'

	
$TC16X
	
	.sdecl	'.text.rba_FeeFs1_HlWriteBlock.Fee_HLWriteBlock',code,cluster('Fee_HLWriteBlock')
	.sect	'.text.rba_FeeFs1_HlWriteBlock.Fee_HLWriteBlock'
	.align	2
	
	.global	Fee_HLWriteBlock

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     3  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     4  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     6   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     7   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     8   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	     9   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    10   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    11   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    12  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    13  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    14  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    15   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    16   * Includes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    17   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    18   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    19  #include "Fee.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    20  #include "rba_FeeFs1_Prv.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    21  #include "Crc.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    22  #if (!defined(CRC_AR_RELEASE_MAJOR_VERSION) || (CRC_AR_RELEASE_MAJOR_VERSION != FEE_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    23      #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    24  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    25  #if (!defined(CRC_AR_RELEASE_MINOR_VERSION) || ((CRC_AR_RELEASE_MINOR_VERSION != 0) && (CRC_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    26      #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    27  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    28  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    29  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    30  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    31  #if (FEE_PRESENT == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    32  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    33   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    34   * Fee_HLWriteBlock(): Write a block into a sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    35   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    36   * This function is used to write a block into the memory media or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    37   * to invalidate a block (write only the block header with a
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    38   * block length of zero).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    39   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    40   * The block is being searched in all the sectors due to the verification
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    41   * whether a write is necessary or not (data identical and checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    42   * in the flash still correct). After a successfull write operation
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    43   * the data is being compared automcatically.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    44   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    45   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    46   * \return   Function result
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    47   * \retval   FEE_ORDER_PENDING_E:   Order is still pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    48   * \retval   FEE_ABORTED_E:         Order was aborted due to a wrong
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    49   *                                  FLS compare function call
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    50   * \retval   FEE_ERROR_E:           Block write caused an error
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    51   *                                  (3 retries failed)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    52   * \retval   FEE_SECTORFULL_E:      The write order cannot be executed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    53   *                                  because the HSR threshold will be
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    54   *                                  exceeded
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    55   * \retval   FEE_ORDER_FINISHED_E:  Order finished successfully or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    56   *                                  write order not necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    57   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    58   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    59   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    60   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    61  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    62  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    63  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLWriteBlock(void)
; Function Fee_HLWriteBlock
.L92:
Fee_HLWriteBlock:	.type	func
	sub.a	a10,#16
.L110:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    64  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    65      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal_en = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d8,#0
.L111:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    66      VAR(Fee_stRetVal_ten, AUTOMATIC) xtmpRetVal_en;                     /* Temp return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    67      VAR(uint16, AUTOMATIC)           xNumBytes_u16 = 0;                 /* Number of bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    68      static uint32                     xAdrLastBlkHeader_u32;             /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    69      static uint16  xBlkLength_u16;                                        /* Block length */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    70      static uint32  xNumCrcBytesConsid_u16;                              /* Number of bytes which were already considered */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    71      static uint32  xBlkCrc_u32;                                         /* Block CRC value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    72      static boolean xSearchRetry_b;                                      /* First try indicator for finding a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    73  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    74  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    75      /* Switch over function state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    76      switch (Fee_RdWrOrder_st.Fee_HLWrBlock_en)
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L133:
	lea	a2,[a15]52
	st.a	[a10]8,a2
	ld.w	d0,[a15]52
.L134:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    77      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    78          /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    79          case FEE_HL_RDWR_BLK_INIT_E:
	mov	d15,#0
	jeq	d15,d0,.L2
.L135:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    80          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    81              /* Init last block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    82              xAdrLastBlkHeader_u32 = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    83  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    84              /* Extract the required information from the configuration table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    85              Fee_GlobInfoLastRdHeader_st.FeeIndex_u16  =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    86                      Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    87              Fee_GlobInfoLastRdHeader_st.BlkLength_u16 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    88                      Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    89              Fee_GlobInfoLastRdHeader_st.BlkStatus_u8  =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    90                      (uint8)(Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & 0xFFu);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    91  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    92              Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32   = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    93              Fee_GlobInfoLastRdHeader_st.BlkCrc32_u32       = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    94              Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16       = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    96              /* Init the block CRC and amount of Crc bytes that have already been considered */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    97              xBlkCrc_u32 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    98              xNumCrcBytesConsid_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	    99              xBlkLength_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   100  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   101              /* Reset start search indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   102              xSearchRetry_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   103  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   104              #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   105              /* Reset the fall back indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   106              Fee_Rb_NoFallback_RemAdr_u32 = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   107              Fee_Rb_NoFallback_LastBlockCfg_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   108              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   109  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   110              /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   111              Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_SEARCH_BLK_HDR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   112          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   113          /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   114  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   115          /* Search for a block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   116          /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   117          case FEE_HL_SEARCH_BLK_HDR_E:
	mov	d1,#1
	jeq	d1,d0,.L3
.L136:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   118          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   119              /* Search next block header of FeeBlock with given FeeIdx_u16.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   120               * Start address for the search can be set with variable xAdrLastBlkHeader_u32.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   121               * If the sector should be read from the beginning, FEE_NULL has to be taken.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   122               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   123              /* Search for the latest valid block header within all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   124              xtmpRetVal_en = Fee_LLSearchSpecifiedBlkHeader(Fee_OrderFifo_st[Fee_idxActQueue_u8].FeeIdx_u16,   /* FeeIdx */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   125                                                             &xAdrLastBlkHeader_u32,                  /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   126                                                             &Fee_GlobInfoLastRdHeader_st,               /* Result structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   127                                                             xSearchRetry_b);                         /* Indicate first try */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   128              /* Evaluate the search result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   129              switch(xtmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   130              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   131                  /* Search is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   132                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   133                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   134                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   135                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   136                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   137                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   139                      /* A block header was found in the DFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   140                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   141                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   142                      /* Possible cases:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   143                       * 1. block in data flash is invalid
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   144                       * 2. block in data flash is identical to what the user wants to write
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   145                       * 3. block in data flash is different
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   146                       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   147                       * Due to the fact that there is only block write access possible, it is not necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   148                       * to verify the block content in the data flash but the checksum only. If both
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   149                       * checksums are identical, it is not necessary to write the block again.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   150                       * Also in case the block is already invalidated it is not necessary to execute
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   151                       * an invalidation order again. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   153                      /* Check if an invalidation order is active or the block was invalidated in
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   154                       * the flash before */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   155                      if (((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8) FEE_FLAG_INVALID_MSK) > 0) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   156                               (Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en == FEE_INVALIDATE_ORDER))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   157                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   158                          /* Check if a write without a compare can be performed */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   159                          if (((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8) FEE_FLAG_INVALID_MSK) > 0) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   160                                   (Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en == FEE_INVALIDATE_ORDER))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   161                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   162                              /* A block which is already invalidated should not be invalidated
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   163                               * again (redundant)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   164                               * --> leave the function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   165  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   166                              /* Finish this function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   167                              xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   168  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   169                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   170                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   171                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   172                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   173                              /* The block was either invalidated before and now a regular write order
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   174                               * is requested or this is an invalidation order for a block which was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   175                               * not invalidated before */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   177                              /* Due to a former invalidation, the block length was set to 0.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   178                               * Reset the block length */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   179                              Fee_GlobInfoLastRdHeader_st.BlkLength_u16 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   180                                      Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   181                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   182                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   183                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   184                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   185                          /* The block header was found and this is a regular write order of a non-invalidated block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   186                           * --> just calculate the checksum over the user data (state is set below) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   187                          ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   188                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   189  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   190                      /* Check if the current order is an invalidation order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   191                      if (Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en == FEE_INVALIDATE_ORDER)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   192                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   193                          /* Set the corresponding flag in block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   194                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= (uint8) FEE_FLAG_INVALID_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   195  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   196                          /* Set the block length to zero (only save the block header, data is not necessary. Save flash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   197                          Fee_GlobInfoLastRdHeader_st.BlkLength_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   198                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   199                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   200                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   201                          /* For write orders reset the invalidation bit */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   202                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 &= ~ FEE_FLAG_INVALID_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   203                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   204  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   205  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   206                      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   207                      /* In case of a Layout change (e.g. NoFallback is now set to TRUE for a specific block)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   208                       * -> remember the configuration of the found block to avoid a writing of the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   209                      if ((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_NOFALLBACK_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   210                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   211                          /* An old copy of the block was found with NoFallback = TRUE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   212                           * -> This copy must be invalidated by writing the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   213                          Fee_Rb_NoFallback_LastBlockCfg_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   214                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   215                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   216                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   217                          /* An old copy of the block was found with NoFallback = FALSE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   218                           * -> Prevent a write of the NoFallback marker since there is no area reserved for that block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   219                          Fee_Rb_NoFallback_LastBlockCfg_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   220                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   221  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   222                      /* Since the status flags are overwritten with the flags from the last found block (by Fee_LLSearchSpecifiedBlkHeader())
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   223                       * --> reset the the NoFallback configuration according to the BlockProperties */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   224                      if((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & FEE_FLAG_NOFALLBACK_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   225                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   226                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= FEE_FLAG_NOFALLBACK_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   227                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   228                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   229                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   230                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 &= (uint8)~FEE_FLAG_NOFALLBACK_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   231                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   232                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   233  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   234                      /* Initialize the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   235                      Fee_SrvMemSet8((uint8*) &Fee_PageBytePtr_cpu8[0], (uint8) FEE_ERASE_PATTERN, FEE_LL_PAGEBUFFSIZE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   236  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   237                      /* While searching the block, the flag was overwritten from DFLASH values. Restore the values for Security level, Survival and Robustness flags.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   238                       * Remaining flags are already handled correctly. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   239                      if((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & FEE_FLAG_SEC_LEVEL_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   240                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   241                          /* Double security block, set bit 0. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   242                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= FEE_FLAG_SEC_LEVEL_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   243                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   244                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   245                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   246                          /* Single security block, clear bit 0. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   247                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 &= (uint8)~FEE_FLAG_SEC_LEVEL_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   248                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   249  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   250                      if((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & FEE_FLAG_SURV_ATTR_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   251                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   252                          /* Surivival feature enabled. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   253                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= FEE_FLAG_SURV_ATTR_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   254                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   255                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   256                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   257                          /* Survival feature disabled. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   258                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 &= (uint8)~FEE_FLAG_SURV_ATTR_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   259                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   260  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   261                      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   262                      if((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & (uint16)FEE_FLAG_ROBUST_ATTR_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   263                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   264                          /* Surivival feature enabled. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   265                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= (uint8)FEE_FLAG_ROBUST_ATTR_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   266  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   267                          if(FEE_INVALIDATE_ORDER != Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   268                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   269                              /* It may happen that the read block in DFLASH block is 4 bytes lesser (because the block was previously disabled),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   270                               * restore the block lenght as per the actual length. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   271                              Fee_GlobInfoLastRdHeader_st.BlkLength_u16 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   272                                      Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   273                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   274  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   275                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   276                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   277                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   278                          /* Survival feature disabled. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   279                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 &= (uint8)~(uint8)FEE_FLAG_ROBUST_ATTR_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   280                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   281                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   282  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   283                      /* Calculate the header CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   284                      Fee_LLPrepPageBufWithHdrDataStart(&Fee_GlobInfoLastRdHeader_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   285  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   286                      /* Set the start value for the block CRC calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   287                      xBlkCrc_u32 = ((uint32)Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16) ^ FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   288  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   289                      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   290                      /* Set the block length depending on the robustness configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   291                      if ((((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 &
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   292                              (uint16) FEE_FLAG_ROBUST_ATTR_MSK) >> (uint16) FEE_FLAG_ROBUST_ATTR_BP) > 0) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   293                              ((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8) FEE_FLAG_INVALID_MSK) == 0u))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   294                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   295                          /* Set the block length for the checksum calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   296                          xBlkLength_u16 = Fee_GlobInfoLastRdHeader_st.BlkLength_u16 - FEE_SIZE_OF_BLOCK_CS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   297                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   298                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   299                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   300                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   301                          /* Set the block length for the checksum calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   302                          xBlkLength_u16 = Fee_GlobInfoLastRdHeader_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   303                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   304  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   305                      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   306                      /* Check if the search for the first copy is necessary or not. This is the case if:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   307                       * - the NoFallback feature is active for this block and
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   308                       * - the block is a double storage block and
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   309                       * - the second copy has been found already */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   310                      // Shift of the block properties' flag SEC LEVEL is not necessary here, because the offset is 0
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   311                      if (((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   312                              & FEE_FLAG_NOFALLBACK_MSK) > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   313                              && ((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8) FEE_FLAG_SEC_LEVEL_MSK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   314                                      == FEE_BLK_INT_DOUBLE_STORAGE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   315                              && (Fee_Rb_NoFallback_RemAdr_u32 == FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   316                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   317                          /* Search for the first copy of this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   318  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   319                          /* Save the address of the 2nd copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   320                          Fee_Rb_NoFallback_RemAdr_u32 = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   321  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   322                          /* Save the upper limit for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   323                          xAdrLastBlkHeader_u32 = Fee_Rb_NoFallback_RemAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   324  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   325                          /* Indicate a retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   326                          xSearchRetry_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   327                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   328                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   329                      /* #if (FEE_NO_FALLBACK_ACTIVE != FALSE) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   330                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   331                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   332                          /* NoFallback feature is deactivated for this block or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   333                           * both copies of a double storage block have been found already,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   334                           * go on with the block checksum calculation over the user data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   335                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   337                          /* Calculate the checksum over the user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   338                          Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_CALC_BLK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   339                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   340                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   341                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   342  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   343                  /* The block doesn't exist in any of the sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   344                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   345                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   346                      /* Block can be written immediately without any compare
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   347                       * to the next free address in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   348  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   349                      /* Extract the required information from the configuration table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   350                      Fee_GlobInfoLastRdHeader_st.FeeIndex_u16  =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   351                              Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   352                      Fee_GlobInfoLastRdHeader_st.BlkLength_u16 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   353                              Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   354                      Fee_GlobInfoLastRdHeader_st.BlkStatus_u8  =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   355                              (uint8)(Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & 0xFFu);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   356  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   357  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   358                      /*Enforce a rewrite of that block even for 2sec blocks with one copy present*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   359                      Fee_GlobInfoLastRdHeader_st.BlkCrc32_u32     = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   360  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   361                      /*Reset the search result, which can be set at the first search for double security blocks*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   362                      /*This change prevents a double write at the same address in LLWrite NoFB marker writing*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   363                      Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   364  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   365                      /* Check if the current order is an invalidation order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   366                      if(Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en == FEE_INVALIDATE_ORDER)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   367                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   368                          /* Set the corresponding flag in block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   369                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 |= (uint8)FEE_FLAG_INVALID_MSK;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   370  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   371                          /* Set the block length to zero (save the block header only, data is not necessary) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   372                          Fee_GlobInfoLastRdHeader_st.BlkLength_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   373                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   374  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   375                      /* Initialize the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   376                      Fee_SrvMemSet8((uint8*)&Fee_PageBytePtr_cpu8[0], (uint8)FEE_ERASE_PATTERN, FEE_LL_PAGEBUFFSIZE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   377  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   378                      /* Calculate the header CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   379                      Fee_LLPrepPageBufWithHdrDataStart(&Fee_GlobInfoLastRdHeader_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   380  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   381                      /* Set the start value for the block CRC calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   382                      xBlkCrc_u32 = ((uint32)Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16) ^ FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   383  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   384                      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   385                      /* Set the block length depending on the robustness configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   386                      if((((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 &
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   387                                                          (uint16)FEE_FLAG_ROBUST_ATTR_MSK) >> (uint16)FEE_FLAG_ROBUST_ATTR_BP) > 0) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   388                          ((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_INVALID_MSK) == 0u))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   389                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   390                          /* Set the block length for the checksum calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   391                          xBlkLength_u16 = Fee_GlobInfoLastRdHeader_st.BlkLength_u16 - FEE_SIZE_OF_BLOCK_CS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   392                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   393                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   394                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   395                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   396                          /* Set the block length for the checksum calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   397                          xBlkLength_u16 = Fee_GlobInfoLastRdHeader_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   398                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   399  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   400                      /* Set next state to prepare the block checksum before writing the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   401                      Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_CALC_BLK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   402                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   403                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   404  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   405                  /* The cache is corrupt */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   406                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   407                      /* Indicate retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   408                       xSearchRetry_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   409  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   410                      /* Search again manually (since the cache was marked for a manual search inside
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   411                       * the Fee_LLSearchSpecificBlkHeader already,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   412                       * the search will be switched to the manual mode automatically. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   413                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   414  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   415  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   416                  /* Default states (can never be reached) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   417                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   418                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   419                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   420                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   421                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   422                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   423                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   424                      /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   425                      xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   426                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   427                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   428              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   429          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   430          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   432          /* Calculate the user checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   433          case FEE_HL_CALC_BLK_CS_E:
	mov	d1,#4
	jeq	d1,d0,.L4
.L137:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   434          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   435              /* Get the number of bytes for this Crc calculation run */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   436              xNumBytes_u16 = (uint16)(xBlkLength_u16 - xNumCrcBytesConsid_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   437  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   438              /* Check for a necessary restriction */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   439              if(xNumBytes_u16 > FEE_LL_CRC_CALC_RESTRICTION)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   440              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   441                  /* Restrict the amount of bytes that are used for calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   442                  xNumBytes_u16 = FEE_LL_CRC_CALC_RESTRICTION;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   443              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   444  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   445              /* Check how many data bytes are left (relevant for write orders only) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   446              if (xNumBytes_u16 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   447              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   448                  /* Calculate the block checksum step wise */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   449                  xBlkCrc_u32 = Crc_CalculateCRC32((uint8*)&Fee_OrderFifo_st[Fee_idxActQueue_u8].DataBufferPtr_pu8[xNumCrcBytesConsid_u16],
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   450                                                   (uint32)xNumBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   451                                                   xBlkCrc_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   452                                                   FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   453  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   454                  /* Increment the amount of already considered bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   455                  xNumCrcBytesConsid_u16 += xNumBytes_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   456              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   457              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   458              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   459                  /* The checksum calculation is finished for Non - Invalidation orders. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   460  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   461                  /* Check if the current order is an invalidation order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   462                  if(Fee_OrderFifo_st[Fee_idxActQueue_u8].Mode_en == FEE_INVALIDATE_ORDER)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   463                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   464                      /* Due to a block length of zero the checksum calculation has to be done here */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   465                      xBlkCrc_u32 = Crc_CalculateCRC32((uint8*)&Fee_OrderFifo_st[Fee_idxActQueue_u8].DataBufferPtr_pu8[0],
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   466                                                       (uint32)xNumBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   467                                                       (((uint32)Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16) ^ FEE_MAXUINT32),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   468                                                        FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   469                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   470  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   471                  /* Check if the calculated checksum is equal to the checksum in the flash (out of the block header) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   472                  if((xBlkCrc_u32 == Fee_GlobInfoLastRdHeader_st.BlkCrc32_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   473                     (Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 != FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   474                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   475                      /* Write sequence is not necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   476                       * Verify the block checksum in the block header in the flash to make sure that
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   477                       * the former write was not aborted or that the flash is still OK */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   478                      Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_CHECK_BLK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   479                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   480                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   481                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   482                      /* The block checksum in the flash is different to the calculated one
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   483                       * --> write the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   484                      Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_WR_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   485                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   486  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   487                  /* Prepare the page buffer independent from any subsequent write access to the flash
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   488                   * (a compare order might result in a write order afterwards) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   489                  Fee_LLPrepPageBufWithHdrDataEnd(&Fee_GlobInfoLastRdHeader_st, &Fee_OrderFifo_st[Fee_idxActQueue_u8].DataBufferPtr_pu8[0], xBlkCrc_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   490              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   491          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   492          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   493  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   494          /* Verify the block checksum in the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   495          case FEE_HL_CHECK_BLK_CS_E:
	mov	d1,#5
	jeq	d1,d0,.L5
.L138:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   496          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   497              /* Compare the user data + block header with the complete block and the block header in the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   498              xtmpRetVal_en = Fee_LLCompBlkInFlash(&Fee_GlobInfoLastRdHeader_st,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   499                                                   &Fee_OrderFifo_st[Fee_idxActQueue_u8].DataBufferPtr_pu8[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   500  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   501              /* Evaluate the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   502              switch(xtmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   503              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   504                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   505                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   506                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   507                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   508                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   509                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   510                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   511  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   512                  /* Order is finished with success, the block is still OK in the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   513                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   514                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   515                      /*  A refresh of the cache entry was already done inside the compare function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   516                       * (it might be overwritten due to a retry while searching the header) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   517  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   518                      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   519                      /* In case of NoFallback blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   520                       * - it doesn't matter which block is checked since Fee_HLMaintainBlock ensures that always two
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   521                       *   copies are available
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   522                       * - the 1. copy was checked and the Cache is pointing to that after comparing the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   523                      // Shift of the block propertie's flags is not necessary here, because the offset is 0
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   524                      if(((Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Flags_u16 & FEE_FLAG_NOFALLBACK_MSK) > 0u) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   525                         ((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_SEC_LEVEL_MSK) == FEE_BLK_INT_DOUBLE_STORAGE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   526                         (Fee_Rb_NoFallback_RemAdr_u32 != FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   527                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   528                          /* Restore the Cache with the address of the latest copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   529                          Fee_LLUpdateAddressInCache(Fee_GlobInfoLastRdHeader_st.FeeIndex_u16, Fee_Rb_NoFallback_RemAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   530                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   531                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   532  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   533                      /* Finish this function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   534                      xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   535                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   536                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   537  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   538                  /* The data in the flash is different compared to the user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   539                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   540                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   541                      /* Write the data again (a cache update is handled right before the Fls is accessed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   542                       * inside the function Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   543                      Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_WR_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   544                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   545                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   546  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   547                  /* Default, states cannot be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   548                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   549                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   550                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   551                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   552                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   553                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   554                  case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   555                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   556                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   557                      /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   558                      xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   559                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   560                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   561              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   562          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   563          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   564  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   565          /* Write the complete block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   566          case FEE_HL_WR_BLK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   567          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   568              /* Call the write interface */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   569              xtmpRetVal_en = Fee_LLWriteBlock(&Fee_GlobInfoLastRdHeader_st,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   570                                               Fee_OrderFifo_st[Fee_idxActQueue_u8].DataBufferPtr_pu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   571  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   572              /* Evaluate the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   573              switch(xtmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   574              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   575                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   576                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   577                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   578                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   579                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   580                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   581                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   582  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   583                  /* A write error occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   584                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   585                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   586                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   587                      /* if the function Fee_LLWriteBlock() abort with error start the retry on this block, this will be done               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   588                      /* in case  of flash interface problems (FEE_ABORT_E) and in case if the fls driver returns with error (FEE_ERROR_E). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   589                      if(Fee_GlobInfoWrBlock_st.cntWriteRetry_u8 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   590                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   591                          /* Decrement retry possibilities */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   592                          Fee_GlobInfoWrBlock_st.cntWriteRetry_u8--;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   593  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   594                          /* Restart with the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   595                          Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_RDWR_BLK_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   596                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   597                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   598                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   599                          xRetVal_en = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   600                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   601  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   602                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   603                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   604  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   605                  /* The write order exceeds the HSR */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   606                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   607                      /* Return the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   608                      xRetVal_en = xtmpRetVal_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   609                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   610  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   611                  /* Error states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   612                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   613                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   614                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   615                      /* Return the function return (cache is already updated in the function Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   616                      xRetVal_en = xtmpRetVal_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   617                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   618                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   619  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   620                  /* Default, case should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   621                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   622                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   623                      /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   624                      xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   625                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   626                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   627              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   628          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   629          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   631          /* Cases are not reachable for the write function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   632          case FEE_HL_RD_DATA_FROM_BLK_E:
	mov	d1,#6
	jeq	d1,d0,.L6
.L139:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   633          case FEE_HL_COMP_BLK_E:
	mov	d1,#7
	jeq	d1,d0,.L7
.L140:
	mov	d15,#8
	jeq	d15,d0,.L8
	j	.L9
.L2:
	movh.a	a15,#@his(_999001_xAdrLastBlkHeader_u32)
	lea	a15,[a15]@los(_999001_xAdrLastBlkHeader_u32)
.L141:
	mov	d15,#-1
.L142:
	st.w	[a15],d15
.L143:
	movh.a	a15,#@his(Fee_idxActQueue_u8)
	lea	a15,[a15]@los(Fee_idxActQueue_u8)
.L144:
	movh.a	a2,#@his(Fee_OrderFifo_st)
	lea	a2,[a2]@los(Fee_OrderFifo_st)
.L145:
	ld.bu	d15,[a15]
.L146:
	mul	d15,d15,#24
	addsc.a	a15,a2,d15,#0
.L147:
	movh.a	a2,#@his(Fee_BlockProperties_st)
	lea	a2,[a2]@los(Fee_BlockProperties_st)
.L148:
	ld.hu	d15,[a15]6
	sha	d15,#4
.L149:
	addsc.a	a2,a2,d15,#0
.L150:
	movh.a	a15,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a15,[a15]@los(Fee_GlobInfoLastRdHeader_st)
.L151:
	ld.hu	d15,[a2]0
.L152:
	st.h	[a15]12,d15
.L153:
	lea	a4,[a15]10
.L154:
	ld.hu	d15,[a2]4
.L155:
	st.h	[a4],d15
.L156:
	lea	a4,[a15]14
.L157:
	ld.hu	d15,[a2]2
.L158:
	st.b	[a4],d15
.L159:
	mov	d15,#-1
.L160:
	st.w	[a15],d15
.L161:
	mov	d15,#0
.L162:
	st.w	[a15]4,d15
.L163:
	mov	d15,#0
.L164:
	st.h	[a15]8,d15
.L165:
	movh.a	a15,#@his(_999004_xBlkCrc_u32)
	lea	a15,[a15]@los(_999004_xBlkCrc_u32)
.L166:
	mov	d15,#0
.L167:
	st.w	[a15],d15
.L168:
	movh.a	a15,#@his(_999003_xNumCrcBytesConsid_u16)
	lea	a15,[a15]@los(_999003_xNumCrcBytesConsid_u16)
.L169:
	mov	d15,#0
.L170:
	st.w	[a15],d15
.L171:
	movh.a	a15,#@his(_999002_xBlkLength_u16)
	lea	a15,[a15]@los(_999002_xBlkLength_u16)
.L172:
	mov	d15,#0
.L173:
	st.h	[a15],d15
.L174:
	movh.a	a15,#@his(_999005_xSearchRetry_b)
	lea	a15,[a15]@los(_999005_xSearchRetry_b)
.L175:
	mov	d15,#0
.L176:
	st.b	[a15],d15
.L177:
	mov	d15,#1
.L178:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L3:
	movh.a	a15,#@his(Fee_idxActQueue_u8)
	lea	a15,[a15]@los(Fee_idxActQueue_u8)
	st.a	[a10]4,a15
.L179:
	movh.a	a15,#@his(Fee_OrderFifo_st)
	lea	a15,[a15]@los(Fee_OrderFifo_st)
	st.a	[a10],a15
.L180:
	movh.a	a12,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a12,[a12]@los(Fee_GlobInfoLastRdHeader_st)
.L181:
	movh.a	a13,#@his(_999005_xSearchRetry_b)
	lea	a13,[a13]@los(_999005_xSearchRetry_b)
.L182:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L183:
	mul	d15,d15,#24
	ld.a	a2,[a10]
	addsc.a	a15,a2,d15,#0
.L184:
	ld.hu	d4,[a15]4
.L185:
	movh.a	a4,#@his(_999001_xAdrLastBlkHeader_u32)
	lea	a4,[a4]@los(_999001_xAdrLastBlkHeader_u32)
.L186:
	ld.bu	d5,[a13]
	mov.aa	a5,a12
	call	Fee_LLSearchSpecifiedBlkHeader
.L113:
	mov	d15,#0
	jeq	d15,d2,.L10
.L187:
	mov	d15,#1
	jeq	d15,d2,.L11
.L188:
	mov	d15,#2
	jeq	d15,d2,.L12
.L189:
	mov	d15,#3
	jeq	d15,d2,.L13
.L190:
	mov	d15,#4
	jeq	d15,d2,.L14
.L191:
	mov	d15,#5
	jeq	d15,d2,.L15
.L192:
	mov	d15,#6
	jeq	d15,d2,.L16
.L193:
	mov	d15,#7
	jeq	d15,d2,.L17
.L194:
	mov	d15,#9
	jeq	d15,d2,.L18
	j	.L19
.L10:
	j	.L20
.L11:
	lea	a13,[a12]14
	ld.bu	d15,[a13]
.L195:
	and	d0,d15,#8
.L196:
	jnz.t	d15:3,.L21
.L197:
	ld.a	a15,[a10]4
	ld.bu	d1,[a15]
.L198:
	mul	d1,d1,#24
	ld.a	a15,[a10]
	addsc.a	a15,a15,d1,#0
.L199:
	ld.w	d1,[a15]12
.L200:
	jne	d1,#3,.L22
.L21:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L201:
	mul	d15,d15,#24
	ld.a	a15,[a10]
	addsc.a	a15,a15,d15,#0
.L202:
	ld.w	d1,[a15]12
.L203:
	jeq	d0,#0,.L23
.L204:
	jne	d1,#3,.L24
.L205:
	mov	d8,#1
.L206:
	j	.L25
.L24:
.L23:
	movh.a	a14,#@his(Fee_BlockProperties_st)
	lea	a14,[a14]@los(Fee_BlockProperties_st)
.L207:
	ld.hu	d15,[a15]6
	sha	d15,#4
.L208:
	addsc.a	a2,a14,d15,#0
.L209:
	lea	a15,[a12]10
.L210:
	ld.hu	d15,[a2]4
.L211:
	st.h	[a15],d15
.L212:
	ld.bu	d15,[a13]
.L213:
	j	.L26
.L22:
	lea	a15,[a12]10
.L214:
	movh.a	a14,#@his(Fee_BlockProperties_st)
	lea	a14,[a14]@los(Fee_BlockProperties_st)
.L26:
	jne	d1,#3,.L27
.L215:
	or	d15,#8
	st.b	[a13],d15
.L216:
	mov	d15,#0
.L217:
	st.h	[a15],d15
.L218:
	j	.L28
.L27:
	and	d15,#247
	st.b	[a13],d15
.L28:
	movh.a	a2,#@his(Fee_PageBytePtr_cpu8)
	lea	a2,[a2]@los(Fee_PageBytePtr_cpu8)
	ld.a	a4,[a2]
.L219:
	mov	d4,#0
.L220:
	mov	d5,#1024
	call	Fee_SrvMemSet8
.L114:
	ld.bu	d0,[a13]
.L221:
	ld.a	a2,[a10]4
	ld.bu	d15,[a2]
.L222:
	mul	d15,d15,#24
	ld.a	a2,[a10]
	addsc.a	a2,a2,d15,#0
.L223:
	ld.hu	d15,[a2]6
	sha	d15,#4
.L224:
	addsc.a	a4,a14,d15,#0
.L225:
	ld.hu	d1,[a4]2
.L226:
	jz.t	d1:0,.L29
.L227:
	or	d15,d0,#1
	st.b	[a13],d15
.L228:
	j	.L30
.L29:
	and	d15,d0,#254
	st.b	[a13],d15
.L30:
	ld.bu	d15,[a13]
.L229:
	jz.t	d1:4,.L31
.L230:
	or	d15,#16
	st.b	[a13],d15
.L231:
	j	.L32
.L31:
	and	d15,#239
	st.b	[a13],d15
.L32:
	ld.bu	d15,[a13]
.L232:
	jz.t	d1:5,.L33
.L233:
	or	d15,#32
	st.b	[a13],d15
.L234:
	ld.w	d15,[a2]12
.L235:
	jeq	d15,#3,.L34
.L236:
	ld.hu	d15,[a4]4
.L237:
	st.h	[a15],d15
.L34:
	j	.L35
.L33:
	and	d15,#223
	st.b	[a13],d15
.L35:
	mov.aa	a4,a12
	call	Fee_LLPrepPageBufWithHdrDataStart
.L238:
	movh.a	a15,#@his(_999004_xBlkCrc_u32)
	lea	a15,[a15]@los(_999004_xBlkCrc_u32)
.L239:
	ld.hu	d15,[a12]8
.L240:
	mov	d0,#-1
.L241:
	xor	d15,d0
.L242:
	st.w	[a15],d15
.L243:
	movh.a	a2,#@his(_999002_xBlkLength_u16)
	lea	a2,[a2]@los(_999002_xBlkLength_u16)
.L244:
	ld.hu	d0,[a12]10
.L245:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L246:
	mul	d15,d15,#24
	ld.a	a15,[a10]
	addsc.a	a15,a15,d15,#0
.L247:
	ld.hu	d15,[a15]6
	sha	d15,#4
.L248:
	addsc.a	a15,a14,d15,#0
.L249:
	ld.hu	d15,[a15]2
.L250:
	and	d15,#32
.L251:
	sha	d15,#-5
.L252:
	jeq	d15,#0,.L36
.L253:
	ld.bu	d15,[a13]
.L254:
	jnz.t	d15:3,.L37
.L255:
	add	d0,#-4
.L256:
	st.h	[a2],d0
.L257:
	j	.L38
.L37:
.L36:
	st.h	[a2],d0
.L38:
	mov	d15,#4
.L258:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L259:
	j	.L39
.L13:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L260:
	mul	d15,d15,#24
	ld.a	a15,[a10]
	addsc.a	a15,a15,d15,#0
.L261:
	movh.a	a14,#@his(Fee_BlockProperties_st)
	lea	a14,[a14]@los(Fee_BlockProperties_st)
.L262:
	ld.hu	d15,[a15]6
	sha	d15,#4
.L263:
	addsc.a	a2,a14,d15,#0
.L264:
	ld.hu	d15,[a2]0
.L265:
	st.h	[a12]12,d15
.L266:
	lea	a4,[a12]10
.L267:
	ld.hu	d15,[a2]4
.L268:
	st.h	[a4],d15
.L269:
	lea	a13,[a12]14
.L270:
	ld.hu	d15,[a2]2
.L271:
	st.b	[a13],d15
.L272:
	mov	d15,#0
.L273:
	st.w	[a12]4,d15
.L274:
	mov	d15,#-1
.L275:
	st.w	[a12],d15
.L276:
	ld.w	d15,[a15]12
.L277:
	jne	d15,#3,.L40
.L278:
	ld.bu	d15,[a13]
.L279:
	or	d15,#8
	st.b	[a13],d15
.L280:
	mov	d15,#0
.L281:
	st.h	[a4],d15
.L40:
	movh.a	a15,#@his(Fee_PageBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_PageBytePtr_cpu8)
	ld.a	a4,[a15]
.L282:
	mov	d4,#0
.L283:
	mov	d5,#1024
	call	Fee_SrvMemSet8
.L115:
	mov.aa	a4,a12
	call	Fee_LLPrepPageBufWithHdrDataStart
.L284:
	movh.a	a15,#@his(_999004_xBlkCrc_u32)
	lea	a15,[a15]@los(_999004_xBlkCrc_u32)
.L285:
	ld.hu	d15,[a12]8
.L286:
	mov	d0,#-1
.L287:
	xor	d15,d0
.L288:
	st.w	[a15],d15
.L289:
	movh.a	a2,#@his(_999002_xBlkLength_u16)
	lea	a2,[a2]@los(_999002_xBlkLength_u16)
.L290:
	ld.hu	d0,[a12]10
.L291:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L292:
	mul	d15,d15,#24
	ld.a	a15,[a10]
	addsc.a	a15,a15,d15,#0
.L293:
	ld.hu	d15,[a15]6
	sha	d15,#4
.L294:
	addsc.a	a15,a14,d15,#0
.L295:
	ld.hu	d15,[a15]2
.L296:
	and	d15,#32
.L297:
	sha	d15,#-5
.L298:
	jeq	d15,#0,.L41
.L299:
	ld.bu	d15,[a13]
.L300:
	jnz.t	d15:3,.L42
.L301:
	add	d0,#-4
.L302:
	st.h	[a2],d0
.L303:
	j	.L43
.L42:
.L41:
	st.h	[a2],d0
.L43:
	mov	d15,#4
.L304:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L305:
	j	.L44
.L16:
	mov	d15,#1
.L306:
	st.b	[a13],d15
.L307:
	j	.L45
.L17:
.L14:
.L15:
.L12:
.L18:
.L19:
	mov	d8,#6
.L308:
	j	.L46
.L46:
.L45:
.L44:
.L39:
.L25:
.L20:
	j	.L47
.L4:
	movh.a	a12,#@his(_999003_xNumCrcBytesConsid_u16)
	lea	a12,[a12]@los(_999003_xNumCrcBytesConsid_u16)
	ld.w	d0,[a12]
.L309:
	movh.a	a15,#@his(_999002_xBlkLength_u16)
	lea	a15,[a15]@los(_999002_xBlkLength_u16)
	ld.hu	d15,[a15]0
.L310:
	sub	d15,d0
.L311:
	extr.u	d9,d15,#0,#16
.L116:
	mov	d1,#256
.L312:
	ge.u	d15,d1,d9
.L313:
	cmovn	d9,d15,d1
.L48:
	movh.a	a14,#@his(Fee_idxActQueue_u8)
	lea	a14,[a14]@los(Fee_idxActQueue_u8)
.L314:
	movh.a	a15,#@his(Fee_OrderFifo_st)
	lea	a15,[a15]@los(Fee_OrderFifo_st)
	st.a	[a10]12,a15
.L315:
	ld.bu	d1,[a14]
.L316:
	mul	d15,d1,#24
	addsc.a	a15,a15,d15,#0
.L317:
	movh.a	a13,#@his(_999004_xBlkCrc_u32)
	lea	a13,[a13]@los(_999004_xBlkCrc_u32)
.L318:
	jeq	d9,#0,.L49
.L319:
	ld.a	a15,[a15]
.L320:
	addsc.a	a4,a15,d0,#0
.L321:
	ld.w	d5,[a13]
.L322:
	mov	d6,#0
	mov	d4,d9
.L117:
	call	Crc_CalculateCRC32
.L118:
	st.w	[a13],d2
.L323:
	ld.w	d0,[a12]
.L324:
	add	d0,d9
	st.w	[a12],d0
.L325:
	j	.L50
.L49:
	ld.w	d15,[a15]12
.L326:
	jne	d15,#3,.L51
.L327:
	movh.a	a2,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a2,[a2]@los(Fee_GlobInfoLastRdHeader_st)
.L328:
	ld.a	a4,[a15]
.L329:
	ld.hu	d5,[a2]8
.L330:
	mov	d15,#-1
.L331:
	xor	d5,d15
.L332:
	mov	d6,#0
	mov	d4,d9
.L119:
	call	Crc_CalculateCRC32
.L120:
	st.w	[a13],d2
.L51:
	movh.a	a4,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a4,[a4]@los(Fee_GlobInfoLastRdHeader_st)
.L333:
	ld.w	d4,[a13]
.L334:
	ld.w	d15,[a4]4
.L335:
	jne	d15,d4,.L52
.L336:
	ld.w	d15,[a4]
.L337:
	jeq	d15,#-1,.L53
.L338:
	mov	d15,#5
.L339:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L340:
	j	.L54
.L53:
.L52:
	mov	d15,#8
.L341:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L54:
	ld.bu	d15,[a14]
.L342:
	mul	d15,d15,#24
	ld.a	a15,[a10]12
	addsc.a	a15,a15,d15,#0
.L343:
	ld.a	a5,[a15]
.L344:
	call	Fee_LLPrepPageBufWithHdrDataEnd
.L50:
	j	.L55
.L5:
	movh.a	a15,#@his(Fee_idxActQueue_u8)
	lea	a15,[a15]@los(Fee_idxActQueue_u8)
.L345:
	movh.a	a2,#@his(Fee_OrderFifo_st)
	lea	a2,[a2]@los(Fee_OrderFifo_st)
.L346:
	ld.bu	d15,[a15]
.L347:
	mul	d15,d15,#24
	addsc.a	a15,a2,d15,#0
.L348:
	movh.a	a4,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a4,[a4]@los(Fee_GlobInfoLastRdHeader_st)
.L349:
	ld.a	a5,[a15]
.L350:
	call	Fee_LLCompBlkInFlash
.L121:
	mov	d15,#9
	jlt	d15,d2,.L56
	mov	d15,#0
	jlt	d2,d15,.L56
	sub	d15,d2,d15
	movh.a	a15,#@his(.1.jmp)
	lea	a15,[a15]@los(.1.jmp)
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ji	a15
.L56:
	j	.L57
.L112:
	
	.sdecl	'.rodata.rba_FeeFs1_HlWriteBlock..1.jmp',data,rom
	.sect	'.rodata.rba_FeeFs1_HlWriteBlock..1.jmp'
	.align	4
.1.jmp:	.type	object
	.word	.L58
	.word	.L59
	.word	.L60
	.word	.L61
	.word	.L62
	.word	.L63
	.word	.L64
	.word	.L65
	.word	.L66
	.word	.L67
	
	.sect	'.text.rba_FeeFs1_HlWriteBlock.Fee_HLWriteBlock'
.L58:
	j	.L68
.L59:
	mov	d8,#1
.L351:
	j	.L69
.L61:
	mov	d15,#8
.L352:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L353:
	j	.L70
.L65:
.L62:
.L63:
.L64:
.L60:
.L67:
.L66:
.L57:
	mov	d8,#6
.L354:
	j	.L71
.L71:
.L70:
.L69:
.L68:
	j	.L72
.L8:
	movh.a	a15,#@his(Fee_idxActQueue_u8)
	lea	a15,[a15]@los(Fee_idxActQueue_u8)
.L355:
	movh.a	a2,#@his(Fee_OrderFifo_st)
	lea	a2,[a2]@los(Fee_OrderFifo_st)
.L356:
	ld.bu	d15,[a15]
.L357:
	mul	d15,d15,#24
	addsc.a	a15,a2,d15,#0
.L358:
	movh.a	a4,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a4,[a4]@los(Fee_GlobInfoLastRdHeader_st)
.L359:
	ld.a	a5,[a15]
	call	Fee_LLWriteBlock
.L122:
	mov	d15,#0
	jeq	d15,d2,.L73
.L360:
	mov	d15,#1
	jeq	d15,d2,.L74
.L361:
	mov	d15,#3
	jeq	d15,d2,.L75
.L362:
	mov	d15,#4
	jeq	d15,d2,.L76
.L363:
	mov	d15,#5
	jeq	d15,d2,.L77
.L364:
	mov	d15,#6
	jeq	d15,d2,.L78
	j	.L79
.L73:
	j	.L80
.L75:
.L78:
	movh.a	a15,#@his(Fee_GlobInfoWrBlock_st)
	lea	a15,[a15]@los(Fee_GlobInfoWrBlock_st)
.L365:
	add.a	a15,#7
	ld.bu	d15,[a15]
.L366:
	jeq	d15,#0,.L81
.L367:
	add	d15,#-1
	st.b	[a15],d15
.L368:
	mov	d15,#0
.L369:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L370:
	j	.L82
.L81:
	mov	d8,#3
.L82:
	j	.L83
.L77:
	mov	d8,d2
.L371:
	j	.L84
.L74:
.L76:
	mov	d8,d2
.L372:
	j	.L85
.L79:
	mov	d8,#6
.L373:
	j	.L86
.L86:
.L85:
.L84:
.L83:
.L80:
	j	.L87
.L6:
.L7:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   634          default:
.L9:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   635          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   636              /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   637              xRetVal_en = FEE_ABORTED_E;
	mov	d8,#6
.L374:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   638          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   639          break;
	j	.L88

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   640  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   641      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   642  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   643      /* Reset state machine if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   644      if (xRetVal_en != FEE_ORDER_PENDING_E)
.L88:
.L87:
.L72:
.L55:
.L47:
	jeq	d8,#0,.L89
.L375:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   645      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   646          /* Init number of retries for this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   647          Fee_GlobInfoWrBlock_st.cntWriteRetry_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
	movh.a	a15,#@his(Fee_GlobInfoWrBlock_st)
	lea	a15,[a15]@los(Fee_GlobInfoWrBlock_st)
.L376:
	add.a	a15,#7
.L377:
	mov	d15,#3
.L378:
	st.b	[a15],d15
.L379:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   648  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   649          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   650          Fee_RdWrOrder_st.Fee_HLWrBlock_en = FEE_HL_RDWR_BLK_INIT_E;
	mov	d15,#0
.L380:
	ld.a	a15,[a10]8
	st.w	[a15],d15
.L89:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   651      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   652  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   653      return (xRetVal_en);
	mov	d2,d8
.L123:
	j	.L90

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   654  }
.L90:
	ret
.L103:
	
__Fee_HLWriteBlock_function_end:
	.size	Fee_HLWriteBlock,__Fee_HLWriteBlock_function_end-Fee_HLWriteBlock
.L101:
	; End of function
	
	.sdecl	'.bss.rba_FeeFs1_HlWriteBlock._999001_xAdrLastBlkHeader_u32',data,cluster('_999001_xAdrLastBlkHeader_u32')
	.sect	'.bss.rba_FeeFs1_HlWriteBlock._999001_xAdrLastBlkHeader_u32'
	.align	4
_999001_xAdrLastBlkHeader_u32:	.type	object
	.size	_999001_xAdrLastBlkHeader_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_HlWriteBlock._999002_xBlkLength_u16',data,cluster('_999002_xBlkLength_u16')
	.sect	'.bss.rba_FeeFs1_HlWriteBlock._999002_xBlkLength_u16'
	.align	2
_999002_xBlkLength_u16:	.type	object
	.size	_999002_xBlkLength_u16,2
	.space	2
	.sdecl	'.bss.rba_FeeFs1_HlWriteBlock._999003_xNumCrcBytesConsid_u16',data,cluster('_999003_xNumCrcBytesConsid_u16')
	.sect	'.bss.rba_FeeFs1_HlWriteBlock._999003_xNumCrcBytesConsid_u16'
	.align	4
_999003_xNumCrcBytesConsid_u16:	.type	object
	.size	_999003_xNumCrcBytesConsid_u16,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_HlWriteBlock._999004_xBlkCrc_u32',data,cluster('_999004_xBlkCrc_u32')
	.sect	'.bss.rba_FeeFs1_HlWriteBlock._999004_xBlkCrc_u32'
	.align	4
_999004_xBlkCrc_u32:	.type	object
	.size	_999004_xBlkCrc_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_HlWriteBlock._999005_xSearchRetry_b',data,cluster('_999005_xSearchRetry_b')
	.sect	'.bss.rba_FeeFs1_HlWriteBlock._999005_xSearchRetry_b'
_999005_xSearchRetry_b:	.type	object
	.size	_999005_xSearchRetry_b,1
	.space	1
	.calls	'Fee_HLWriteBlock','Fee_LLSearchSpecifiedBlkHeader'
	.calls	'Fee_HLWriteBlock','Fee_SrvMemSet8'
	.calls	'Fee_HLWriteBlock','Fee_LLPrepPageBufWithHdrDataStart'
	.calls	'Fee_HLWriteBlock','Crc_CalculateCRC32'
	.calls	'Fee_HLWriteBlock','Fee_LLPrepPageBufWithHdrDataEnd'
	.calls	'Fee_HLWriteBlock','Fee_LLCompBlkInFlash'
	.calls	'Fee_HLWriteBlock','Fee_LLWriteBlock'
	.extern	Fee_PageBytePtr_cpu8
	.extern	Fee_RdWrOrder_st
	.extern	Fee_OrderFifo_st
	.extern	Fee_GlobInfoLastRdHeader_st
	.extern	Fee_GlobInfoWrBlock_st
	.extern	Fee_idxActQueue_u8
	.extern	Fee_BlockProperties_st
	.extern	Fee_LLSearchSpecifiedBlkHeader
	.extern	Fee_LLCompBlkInFlash
	.extern	Fee_LLPrepPageBufWithHdrDataStart
	.extern	Fee_LLPrepPageBufWithHdrDataEnd
	.extern	Fee_LLWriteBlock
	.extern	Fee_SrvMemSet8
	.extern	Crc_CalculateCRC32
	.calls	'Fee_HLWriteBlock','',16
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L94:
	.word	16940
	.half	3
	.word	.L95
	.byte	4
.L93:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L96
.L108:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'Fee_SrvRoundUp',0,3,1,140,11,21
	.word	156
	.byte	1,1,4
	.byte	'value_u32',0,1,140,11,43
	.word	156
	.byte	4
	.byte	'stepsize_u32',0,1,140,11,62
	.word	156
	.byte	5,0
.L102:
	.byte	6,1,137,2,9,4,7
	.byte	'FEE_ORDER_PENDING_E',0,0,7
	.byte	'FEE_ORDER_FINISHED_E',0,1,7
	.byte	'FEE_BLOCK_INVALIDATED_E',0,2,7
	.byte	'FEE_ERROR_E',0,3,7
	.byte	'FEE_SECTORCHANGE_E',0,4,7
	.byte	'FEE_SECTORFULL_E',0,5,7
	.byte	'FEE_ABORTED_E',0,6,7
	.byte	'FEE_ERASE_SECTOR_E',0,7,7
	.byte	'FEE_SEARCH_ABORTED_E',0,8,7
	.byte	'FEE_NUM_RET_VAL_E',0,9,0
.L106:
	.byte	2
	.byte	'unsigned short int',0,2,7,8
	.word	156
.L109:
	.byte	2
	.byte	'unsigned char',0,1,8,9,1,227,5,9,16,10
	.byte	'AdrBlkHeader_u32',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'BlkCrc32_u32',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'HdrCrc16_u16',0
	.word	454
	.byte	2,2,35,8,10
	.byte	'BlkLength_u16',0
	.word	454
	.byte	2,2,35,10,10
	.byte	'FeeIndex_u16',0
	.word	454
	.byte	2,2,35,12,10
	.byte	'BlkStatus_u8',0
	.word	481
	.byte	1,2,35,14,0,8
	.word	498
	.byte	11
	.byte	'Fee_LLSearchSpecifiedBlkHeader',0,1,188,8,41
	.word	242
	.byte	1,1,1,1,4
	.byte	'FeeIdx_u16',0,1,188,8,95
	.word	454
	.byte	4
	.byte	'LastHdrAddr_ptr',0,1,189,8,112
	.word	476
	.byte	4
	.byte	'GlobBlkHdr_ptr',0,1,190,8,134,1
	.word	642
	.byte	4
	.byte	'SearchRetry_b',0,1,191,8,96
	.word	481
	.byte	0,12
	.word	498
	.byte	8
	.word	785
	.byte	12
	.word	481
	.byte	8
	.word	795
	.byte	11
	.byte	'Fee_LLCompBlkInFlash',0,1,210,8,41
	.word	242
	.byte	1,1,1,1,4
	.byte	'HeaderInfo_pcst',0,1,210,8,126
	.word	790
	.byte	4
	.byte	'Data_pcu8',0,1,211,8,103
	.word	800
	.byte	0,13
	.byte	'Fee_LLPrepPageBufWithHdrDataStart',0,1,221,8,41,1,1,1,1,4
	.byte	'HeaderInfo_pst',0,1,221,8,137,1
	.word	642
	.byte	0,13
	.byte	'Fee_LLPrepPageBufWithHdrDataEnd',0,1,222,8,41,1,1,1,1,4
	.byte	'HeaderInfo_pst',0,1,222,8,135,1
	.word	642
	.byte	4
	.byte	'Data_pcu8',0,1,223,8,121
	.word	800
	.byte	4
	.byte	'BlkCrc32_u32',0,1,224,8,103
	.word	156
	.byte	0,11
	.byte	'Fee_LLWriteBlock',0,1,140,9,41
	.word	242
	.byte	1,1,1,1,4
	.byte	'Info_ptr',0,1,140,9,120
	.word	642
	.byte	4
	.byte	'Data_pcu8',0,1,141,9,99
	.word	800
	.byte	0,8
	.word	481
	.byte	13
	.byte	'Fee_SrvMemSet8',0,1,191,9,30,1,1,1,1,4
	.byte	'xDest_pu8',0,1,191,9,84
	.word	1129
	.byte	4
	.byte	'xPattern_u32',0,1,192,9,66
	.word	156
	.byte	4
	.byte	'numBytes_u32',0,1,193,9,66
	.word	156
	.byte	0,14
	.word	172
	.byte	15
	.word	199
	.byte	15
	.word	218
	.byte	5,0,11
	.byte	'Crc_CalculateCRC32',0,2,80,15
	.word	156
	.byte	1,1,1,1,4
	.byte	'Crc_DataPtr',0,2,80,47
	.word	800
	.byte	4
	.byte	'Crc_Length',0,2,80,67
	.word	156
	.byte	4
	.byte	'Crc_StartValue32',0,2,80,86
	.word	156
	.byte	4
	.byte	'Crc_IsFirstCall',0,2,81,42
	.word	481
	.byte	0,16,1,8
	.word	1359
	.byte	17
	.byte	'__codeptr',0,3,1,1
	.word	1361
	.byte	2
	.byte	'char',0,1,6,17
	.byte	'sint8',0,4,76,25
	.word	1384
	.byte	17
	.byte	'uint8',0,4,81,25
	.word	481
	.byte	17
	.byte	'uint16',0,4,91,25
	.word	454
	.byte	17
	.byte	'uint32',0,4,106,24
	.word	156
	.byte	2
	.byte	'unsigned long long int',0,8,7,17
	.byte	'uint64',0,4,111,30
	.word	1450
	.byte	17
	.byte	'boolean',0,4,127,25
	.word	481
	.byte	17
	.byte	'StatusType',0,5,191,1,27
	.word	481
	.byte	17
	.byte	'Std_ReturnType',0,5,199,1,15
	.word	481
	.byte	9,5,206,1,9,8,10
	.byte	'vendorID',0
	.word	454
	.byte	2,2,35,0,10
	.byte	'moduleID',0
	.word	454
	.byte	2,2,35,2,10
	.byte	'sw_major_version',0
	.word	481
	.byte	1,2,35,4,10
	.byte	'sw_minor_version',0
	.word	481
	.byte	1,2,35,5,10
	.byte	'sw_patch_version',0
	.word	481
	.byte	1,2,35,6,0,17
	.byte	'Std_VersionInfoType',0,5,213,1,3
	.word	1551
	.byte	9,6,93,9,8,10
	.byte	'Class',0
	.word	481
	.byte	1,2,35,0,10
	.byte	'TIN',0
	.word	481
	.byte	1,2,35,1,10
	.byte	'ReturnAddress',0
	.word	156
	.byte	4,2,35,4,0,17
	.byte	'OsTrapInfoType',0,6,97,3
	.word	1701
	.byte	18,68
	.word	156
	.byte	19,16,0,9,6,154,1,9,68,10
	.byte	'store',0
	.word	1781
	.byte	68,2,35,0,0,18,68
	.word	1790
	.byte	19,0,0,17
	.byte	'Os_JumpBufType',0,6,156,1,3
	.word	1812
	.byte	17
	.byte	'Os_StackTraceType',0,6,174,1,18
	.word	156
	.byte	9,6,175,1,9,8,10
	.byte	'sp',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'ctx',0
	.word	156
	.byte	4,2,35,4,0,17
	.byte	'Os_StackValueType',0,6,175,1,63
	.word	1872
	.byte	17
	.byte	'Os_StackSizeType',0,6,176,1,27
	.word	1872
	.byte	20,1,1,8
	.word	1957
	.byte	17
	.byte	'Os_VoidVoidFunctionType',0,6,179,1,16
	.word	1960
	.byte	17
	.byte	'ApplicationType',0,6,193,1,23
	.word	481
	.byte	21
	.byte	'Os_ApplicationConfigurationType_s',0,6,198,1,16,2,10
	.byte	'app_id',0
	.word	481
	.byte	1,2,35,0,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,1,0,17
	.byte	'Os_ApplicationConfigurationType',0,6,201,1,3
	.word	2023
	.byte	17
	.byte	'Os_CoreStateType',0,6,203,1,16
	.word	156
	.byte	17
	.byte	'AreaIdType',0,6,204,1,16
	.word	454
	.byte	17
	.byte	'Os_PeripheralAddressType',0,6,212,1,22
	.word	156
	.byte	17
	.byte	'TickType',0,6,221,1,22
	.word	156
	.byte	17
	.byte	'Os_StopwatchTickType',0,6,225,1,22
	.word	156
	.byte	17
	.byte	'Os_Lockable',0,6,234,1,18
	.word	476
	.byte	17
	.byte	'CoreIdType',0,6,236,1,16
	.word	454
	.byte	17
	.byte	'SpinlockIdType',0,6,237,1,16
	.word	454
	.byte	6,6,239,1,9,4,7
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,7
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,17
	.byte	'TryToGetSpinlockType',0,6,239,1,74
	.word	2330
	.byte	6,6,174,2,9,4,7
	.byte	'APPLICATION_ACCESSIBLE',0,0,7
	.byte	'APPLICATION_RESTARTING',0,1,7
	.byte	'APPLICATION_TERMINATED',0,2,0,17
	.byte	'ApplicationStateType',0,6,174,2,92
	.word	2423
	.byte	22
	.byte	'void',0,8
	.word	2535
	.byte	23,1,1,24
	.word	481
	.byte	24
	.word	2541
	.byte	0,8
	.word	2546
	.byte	17
	.byte	'Os_FunctionEntryType',0,6,183,2,16
	.word	2560
	.byte	21
	.byte	'Os_MeterInfoType_s',0,6,193,2,16,48,10
	.byte	'elapsed',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'previous',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'max',0
	.word	156
	.byte	4,2,35,8,10
	.byte	'cumulative',0
	.word	156
	.byte	4,2,35,12,10
	.byte	'stackbase',0
	.word	1872
	.byte	8,2,35,16,10
	.byte	'stackusage',0
	.word	1872
	.byte	8,2,35,24,10
	.byte	'stackmax',0
	.word	1872
	.byte	8,2,35,32,10
	.byte	'stackbudget',0
	.word	1872
	.byte	8,2,35,40,0,17
	.byte	'Os_MeterInfoType',0,6,202,2,3
	.word	2595
	.byte	8
	.word	2595
	.byte	17
	.byte	'Os_MeterInfoRefType',0,6,203,2,50
	.word	2793
	.byte	17
	.byte	'EventMaskType',0,6,206,2,15
	.word	481
	.byte	17
	.byte	'Os_imaskType',0,6,211,2,16
	.word	156
	.byte	21
	.byte	'Os_ISRDynType_s',0,6,213,2,16,48,10
	.byte	'meter',0
	.word	2595
	.byte	48,2,35,0,0,17
	.byte	'Os_ISRDynType',0,6,215,2,3
	.word	2872
	.byte	8
	.word	2872
	.byte	12
	.word	2933
	.byte	21
	.byte	'Os_ISRType_s',0,6,216,2,16,24,10
	.byte	'entry_function',0
	.word	1965
	.byte	4,2,35,0,10
	.byte	'dynamic',0
	.word	2938
	.byte	4,2,35,4,10
	.byte	'imask',0
	.word	156
	.byte	4,2,35,8,10
	.byte	'stackbudget',0
	.word	1872
	.byte	8,2,35,12,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,20,10
	.byte	'application',0
	.word	481
	.byte	1,2,35,21,0,17
	.byte	'Os_ISRType',0,6,223,2,3
	.word	2943
	.byte	8
	.word	1957
	.byte	12
	.word	2943
	.byte	8
	.word	3102
	.byte	17
	.byte	'ISRType',0,6,224,2,46
	.word	3107
	.byte	17
	.byte	'Os_bitmask',0,6,239,2,22
	.word	156
	.byte	17
	.byte	'Os_pset0Type',0,6,240,2,20
	.word	156
	.byte	17
	.byte	'Os_pset1Type',0,6,241,2,20
	.word	156
	.byte	17
	.byte	'Os_pset2Type',0,6,242,2,20
	.word	156
	.byte	25,6,243,2,9,4,10
	.byte	'p0',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'p1',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'p2',0
	.word	156
	.byte	4,2,35,0,0,17
	.byte	'Os_psetType',0,6,247,2,3
	.word	3215
	.byte	25,6,249,2,9,4,10
	.byte	't0',0
	.word	156
	.byte	4,2,35,0,10
	.byte	't1',0
	.word	156
	.byte	4,2,35,0,10
	.byte	't2',0
	.word	156
	.byte	4,2,35,0,0,17
	.byte	'Os_tpmaskType',0,6,253,2,3
	.word	3279
	.byte	17
	.byte	'Os_ActivationCountType',0,6,254,2,23
	.word	481
	.byte	21
	.byte	'Os_TaskDynType_s',0,6,128,3,16,120,10
	.byte	'terminate_jump_buf',0
	.word	1821
	.byte	68,2,35,0,10
	.byte	'meter',0
	.word	2595
	.byte	48,2,35,68,10
	.byte	'activation_count',0
	.word	481
	.byte	1,2,35,116,0,17
	.byte	'Os_TaskDynType',0,6,132,3,3
	.word	3377
	.byte	18,68
	.word	1790
	.byte	19,0,0,8
	.word	3377
	.byte	12
	.word	3503
	.byte	21
	.byte	'Os_TaskType_s',0,6,134,3,16,40,10
	.byte	'dynamic',0
	.word	3508
	.byte	4,2,35,0,10
	.byte	'entry_function',0
	.word	1965
	.byte	4,2,35,4,10
	.byte	'pset',0
	.word	3215
	.byte	4,2,35,8,10
	.byte	'base_tpmask',0
	.word	3279
	.byte	4,2,35,12,10
	.byte	'tpmask',0
	.word	3279
	.byte	4,2,35,16,10
	.byte	'core_id',0
	.word	454
	.byte	2,2,35,20,10
	.byte	'index',0
	.word	156
	.byte	4,2,35,24,10
	.byte	'stackbudget',0
	.word	1872
	.byte	8,2,35,28,10
	.byte	'activation_count',0
	.word	481
	.byte	1,2,35,36,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,37,10
	.byte	'application',0
	.word	481
	.byte	1,2,35,38,0,17
	.byte	'Os_TaskType',0,6,146,3,3
	.word	3513
	.byte	12
	.word	3513
	.byte	8
	.word	3763
	.byte	17
	.byte	'TaskType',0,6,147,3,47
	.word	3768
	.byte	26
	.byte	'Os_TaskStateType',0,6,155,3,6,4,7
	.byte	'SUSPENDED',0,0,7
	.byte	'READY',0,1,7
	.byte	'WAITING',0,2,7
	.byte	'RUNNING',0,3,0,17
	.byte	'TaskStateType',0,6,156,3,31
	.word	3791
	.byte	25,6,167,3,3,4,10
	.byte	'tpmask',0
	.word	3279
	.byte	4,2,35,0,0,21
	.byte	'Os_ResourceDynType_s',0,6,166,3,16,4,10
	.byte	'saved_priority',0
	.word	3878
	.byte	4,2,35,0,0,17
	.byte	'Os_ResourceDynType',0,6,170,3,3
	.word	3901
	.byte	8
	.word	3901
	.byte	12
	.word	3981
	.byte	21
	.byte	'Os_ResourceType_s',0,6,171,3,16,12,10
	.byte	'dynamic',0
	.word	3986
	.byte	4,2,35,0,10
	.byte	'tpmask',0
	.word	3279
	.byte	4,2,35,4,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,8,0,17
	.byte	'Os_ResourceType',0,6,175,3,3
	.word	3991
	.byte	9,6,181,3,9,12,10
	.byte	'maxallowedvalue',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'ticksperbase',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'mincycle',0
	.word	156
	.byte	4,2,35,8,0,17
	.byte	'AlarmBaseType',0,6,185,3,3
	.word	4090
	.byte	9,6,206,3,9,8,10
	.byte	'Running',0
	.word	481
	.byte	1,2,35,0,10
	.byte	'Pending',0
	.word	481
	.byte	1,2,35,1,10
	.byte	'Delay',0
	.word	156
	.byte	4,2,35,4,0,17
	.byte	'Os_CounterStatusType',0,6,210,3,3
	.word	4185
	.byte	27
	.word	481
	.byte	1,1,8
	.word	4271
	.byte	17
	.byte	'Os_CounterIncrAdvType',0,6,217,3,22
	.word	4278
	.byte	21
	.byte	's_swd',0,6,222,3,12,4,10
	.byte	'count',0
	.word	156
	.byte	4,2,35,0,0,25,6,221,3,3,4,10
	.byte	'sw',0
	.word	4314
	.byte	4,2,35,0,0,21
	.byte	'Os_CounterDynType_s',0,6,220,3,16,4,10
	.byte	'type_dependent',0
	.word	4342
	.byte	4,2,35,0,0,17
	.byte	'Os_CounterDynType',0,6,226,3,3
	.word	4361
	.byte	8
	.word	4361
	.byte	12
	.word	4439
	.byte	21
	.byte	'Os_CounterType_s',0,6,227,3,16,28,10
	.byte	'dynamic',0
	.word	4444
	.byte	4,2,35,0,10
	.byte	'advincr',0
	.word	4283
	.byte	4,2,35,4,10
	.byte	'base',0
	.word	4090
	.byte	12,2,35,8,10
	.byte	'core',0
	.word	2541
	.byte	4,2,35,20,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,24,10
	.byte	'application',0
	.word	481
	.byte	1,2,35,25,0,17
	.byte	'Os_CounterType',0,6,234,3,3
	.word	4449
	.byte	8
	.word	4271
	.byte	12
	.word	4449
	.byte	8
	.word	4601
	.byte	17
	.byte	'CounterType',0,6,235,3,52
	.word	4606
	.byte	26
	.byte	'Os_ScheduleTableStatusType',0,6,240,3,6,4,7
	.byte	'SCHEDULETABLE_STOPPED',0,0,7
	.byte	'SCHEDULETABLE_NEXT',0,1,7
	.byte	'SCHEDULETABLE_WAITING',0,2,7
	.byte	'SCHEDULETABLE_RUNNING',0,3,7
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,17
	.byte	'ScheduleTableStatusType',0,6,241,3,41
	.word	4632
	.byte	12
	.word	.L124-.L94
	.byte	8
	.word	4832
	.byte	17
	.byte	'ScheduleTableType',0,6,128,4,58
	.word	4837
	.byte	21
	.byte	'Os_ScheduleTableDynType_s',0,6,130,4,16,16,10
	.byte	'match',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'next',0
	.word	4842
	.byte	4,2,35,4,10
	.byte	'state',0
	.word	4632
	.byte	4,2,35,8,10
	.byte	'config',0
	.word	454
	.byte	2,2,35,12,0,8
	.word	4869
	.byte	12
	.word	4962
.L124:
	.byte	21
	.byte	'Os_ScheduleTableType_s',0,6,247,3,16,16,10
	.byte	'dynamic',0
	.word	4967
	.byte	4,2,35,0,10
	.byte	'counter',0
	.word	4611
	.byte	4,2,35,4,10
	.byte	'repeat',0
	.word	481
	.byte	1,2,35,8,10
	.byte	'config',0
	.word	454
	.byte	2,2,35,10,10
	.byte	'initial',0
	.word	481
	.byte	1,2,35,12,10
	.byte	'access',0
	.word	481
	.byte	1,2,35,13,10
	.byte	'application',0
	.word	481
	.byte	1,2,35,14,0,17
	.byte	'Os_ScheduleTableType',0,6,255,3,3
	.word	4972
	.byte	12
	.word	4972
	.byte	8
	.word	5152
	.byte	12
	.word	4449
	.byte	8
	.word	5162
	.byte	28
	.word	2265
	.byte	28
	.word	3215
	.byte	28
	.word	3112
	.byte	28
	.word	3773
	.byte	28
	.word	3279
	.byte	28
	.word	481
	.byte	28
	.word	3773
	.byte	21
	.byte	'Os_ControlledCoreType_s',0,6,251,6,16,112,10
	.byte	'TrapInfo',0
	.word	1701
	.byte	8,2,35,0,10
	.byte	'lock_taskaccess',0
	.word	5172
	.byte	4,2,35,8,10
	.byte	'ReadyTasks',0
	.word	5177
	.byte	4,2,35,12,10
	.byte	'RunningISR',0
	.word	5182
	.byte	4,2,35,16,10
	.byte	'RunningTask',0
	.word	5187
	.byte	4,2,35,20,10
	.byte	'RunningTPMask',0
	.word	5192
	.byte	4,2,35,24,10
	.byte	'CurrentMeteredObject',0
	.word	2798
	.byte	4,2,35,28,10
	.byte	'IdleMeter',0
	.word	2595
	.byte	48,2,35,32,10
	.byte	'AppAccess',0
	.word	481
	.byte	1,2,35,80,10
	.byte	'AppOverride',0
	.word	5197
	.byte	1,2,35,81,10
	.byte	'GetStackValueAdjust',0
	.word	1872
	.byte	8,2,35,84,10
	.byte	'InErrorHook',0
	.word	481
	.byte	1,2,35,92,10
	.byte	'ChainTaskRef',0
	.word	5202
	.byte	4,2,35,96,10
	.byte	'GetStackUsageAdjust',0
	.word	1872
	.byte	8,2,35,100,10
	.byte	'InProtectionHook',0
	.word	481
	.byte	1,2,35,108,10
	.byte	'CoreIsActive',0
	.word	481
	.byte	1,2,35,109,10
	.byte	'InShutdownHook',0
	.word	481
	.byte	1,2,35,110,0,17
	.byte	'Os_ControlledCoreType',0,6,141,7,3
	.word	5207
	.byte	8
	.word	156
	.byte	12
	.word	2943
	.byte	8
	.word	5663
	.byte	12
	.word	3513
	.byte	8
	.word	5673
	.byte	8
	.word	2595
	.byte	21
	.byte	'Os_AnyCoreType_s',0,6,151,7,16,96,10
	.byte	'DisableAllImask',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'SuspendAllImask',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'SuspendOSImask',0
	.word	156
	.byte	4,2,35,8,10
	.byte	'DisableAllCount',0
	.word	156
	.byte	4,2,35,12,10
	.byte	'SuspendAllCount',0
	.word	156
	.byte	4,2,35,16,10
	.byte	'SuspendOSCount',0
	.word	156
	.byte	4,2,35,20,10
	.byte	'RestartJumpBuf',0
	.word	1821
	.byte	68,2,35,24,10
	.byte	'Restartable',0
	.word	481
	.byte	1,2,35,92,0,17
	.byte	'Os_AnyCoreType',0,6,160,7,3
	.word	5688
	.byte	17
	.byte	'unsigned_int',0,7,116,22
	.word	156
	.byte	6,8,31,9,4,7
	.byte	'MEMIF_JOB_OK',0,0,7
	.byte	'MEMIF_JOB_FAILED',0,1,7
	.byte	'MEMIF_JOB_PENDING',0,2,7
	.byte	'MEMIF_JOB_CANCELED',0,3,7
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,7
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,17
	.byte	'MemIf_JobResultType',0,8,39,2
	.word	5950
	.byte	6,8,41,9,4,7
	.byte	'MEMIF_MODE_SLOW',0,0,7
	.byte	'MEMIF_MODE_FAST',0,1,0,17
	.byte	'MemIf_ModeType',0,8,45,2
	.word	6108
	.byte	17
	.byte	'PduIdType',0,9,22,19
	.word	454
	.byte	17
	.byte	'PduLengthType',0,9,26,19
	.word	454
	.byte	6,10,113,9,4,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,17
	.byte	'TpDataStateType',0,10,118,3
	.word	6213
	.byte	17
	.byte	'Can_IdType',0,11,32,16
	.word	156
	.byte	17
	.byte	'Can_HwHandleType',0,11,43,16
	.word	454
	.byte	17
	.byte	'Can_TxObjPriorityClassType',0,12,219,3,16
	.word	156
	.byte	21
	.byte	'Can_TxHwObjectConfigType',0,12,231,3,16,8,10
	.byte	'MsgObjId',0
	.word	481
	.byte	1,2,35,0,10
	.byte	'HwControllerId',0
	.word	481
	.byte	1,2,35,1,10
	.byte	'TxObjPriorityClass',0
	.word	156
	.byte	4,2,35,4,0,17
	.byte	'Can_TxHwObjectConfigType',0,12,252,3,3
	.word	6369
	.byte	21
	.byte	'Can_RxHwObjectConfigType',0,12,129,4,16,12,10
	.byte	'MaskRef',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'MsgId',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'MsgObjId',0
	.word	481
	.byte	1,2,35,8,10
	.byte	'HwControllerId',0
	.word	481
	.byte	1,2,35,9,0,17
	.byte	'Can_RxHwObjectConfigType',0,12,147,4,3
	.word	6505
	.byte	18,4
	.word	481
	.byte	19,3,0,21
	.byte	'Can_ControllerMOMapConfigType',0,12,181,4,16,4,10
	.byte	'ControllerMOMap',0
	.word	6645
	.byte	4,2,35,0,0,17
	.byte	'Can_ControllerMOMapConfigType',0,12,184,4,3
	.word	6654
	.byte	21
	.byte	'Can_NPCRValueType',0,12,188,4,16,2,10
	.byte	'Can_NPCRValue',0
	.word	454
	.byte	2,2,35,0,0,17
	.byte	'Can_NPCRValueType',0,12,191,4,3
	.word	6755
	.byte	21
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,194,4,16,8,10
	.byte	'CanControllerBaudrate',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'CanControllerBaudrateCfg',0
	.word	454
	.byte	2,2,35,4,0,17
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,12,198,4,3
	.word	6830
	.byte	12
	.word	6830
	.byte	8
	.word	6995
	.byte	21
	.byte	'Can_BaudrateConfigPtrType',0,12,201,4,16,4,10
	.byte	'Can_kBaudrateConfigPtr',0
	.word	7000
	.byte	4,2,35,0,0,17
	.byte	'Can_BaudrateConfigPtrType',0,12,204,4,3
	.word	7005
	.byte	21
	.byte	'Can_EventHandlingType',0,12,226,4,16,4,10
	.byte	'CanEventType',0
	.word	6645
	.byte	4,2,35,0,0,17
	.byte	'Can_EventHandlingType',0,12,229,4,3
	.word	7105
	.byte	17
	.byte	'Rte_TransformerErrorCode',0,13,130,1,15
	.word	481
	.byte	17
	.byte	'Rte_TransformerClass',0,13,131,1,15
	.word	481
	.byte	9,13,168,1,9,12,10
	.byte	'in',0
	.word	2541
	.byte	4,2,35,0,10
	.byte	'out',0
	.word	2541
	.byte	4,2,35,4,10
	.byte	'used',0
	.word	454
	.byte	2,2,35,8,10
	.byte	'lost_data',0
	.word	481
	.byte	1,2,35,10,0,17
	.byte	'Rte_QDynType',0,13,173,1,3
	.word	7251
	.byte	6,13,175,1,9,4,7
	.byte	'RTE_DRA',0,0,7
	.byte	'RTE_WOWP',0,1,7
	.byte	'RTE_TASK',0,2,7
	.byte	'RTE_ARE',0,3,7
	.byte	'RTE_EV',0,4,7
	.byte	'RTE_MSI',0,5,0,17
	.byte	'Rte_NotificationType',0,13,182,1,3
	.word	7338
	.byte	18,128,8
	.word	481
	.byte	19,255,7,0,17
	.byte	'Impl_NVM_DstPtrType_1024',0,14,50,15
	.word	7436
	.byte	17
	.byte	'CanIf_u32_impl',0,14,69,16
	.word	156
	.byte	17
	.byte	'CanIf_u16_impl',0,14,71,16
	.word	454
	.byte	17
	.byte	'CanIf_u8_impl',0,14,73,15
	.word	481
	.byte	17
	.byte	'CanIf_ControllerModeType_Enum_impl',0,14,88,15
	.word	481
	.byte	17
	.byte	'CanIf_PduModeType_Enum_impl',0,14,90,15
	.word	481
	.byte	9,14,92,9,2,10
	.byte	'DeviceMode',0
	.word	481
	.byte	1,2,35,0,10
	.byte	'ChannelMode',0
	.word	481
	.byte	1,2,35,1,0,17
	.byte	'CanIf_ControllerStateType_struct_impl',0,14,95,3
	.word	7627
	.byte	17
	.byte	'CanIf_NotifStatusType_Enum_impl',0,14,100,15
	.word	481
	.byte	17
	.byte	'CanSM_boolean_Impl',0,14,120,15
	.word	481
	.byte	17
	.byte	'CanSM_u8_Impl',0,14,123,15
	.word	481
	.byte	17
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,14,128,1,15
	.word	481
	.byte	17
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,14,132,1,15
	.word	481
	.byte	17
	.byte	'CanSM_u16_Impl',0,14,136,1,16
	.word	454
	.byte	17
	.byte	'CanSM_TimerStateType_Enum_impl',0,14,138,1,15
	.word	481
	.byte	9,14,140,1,9,4,10
	.byte	'cntTick_u16',0
	.word	454
	.byte	2,2,35,0,10
	.byte	'stTimer',0
	.word	481
	.byte	1,2,35,2,0,17
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,14,143,1,3
	.word	7968
	.byte	17
	.byte	'Com_impl_u16',0,14,154,1,16
	.word	454
	.byte	17
	.byte	'Com_impl_u8',0,14,157,1,15
	.word	481
	.byte	17
	.byte	'ComM_uint32_Impl',0,14,173,1,16
	.word	156
	.byte	17
	.byte	'ComM_uint16_Impl',0,14,175,1,16
	.word	454
	.byte	17
	.byte	'ComM_uint8_Impl',0,14,177,1,15
	.word	481
	.byte	17
	.byte	'ComM_bool_Impl',0,14,179,1,15
	.word	481
	.byte	9,14,181,1,9,24,10
	.byte	'ChannelState_e',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'LightTimeoutCtr_u32',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	454
	.byte	2,2,35,8,10
	.byte	'ChannelMode_u8',0
	.word	481
	.byte	1,2,35,10,10
	.byte	'BusSmMode_u8',0
	.word	481
	.byte	1,2,35,11,10
	.byte	'UserRequestCtr_u8',0
	.word	481
	.byte	1,2,35,12,10
	.byte	'PassiveRequestState_u8',0
	.word	481
	.byte	1,2,35,13,10
	.byte	'PncRequestCtr_u8',0
	.word	481
	.byte	1,2,35,14,10
	.byte	'InhibitionReqStatus_u8',0
	.word	481
	.byte	1,2,35,15,10
	.byte	'NmNetworkRequestStatus_b',0
	.word	481
	.byte	1,2,35,16,10
	.byte	'DiagnosticRequestState_b',0
	.word	481
	.byte	1,2,35,17,10
	.byte	'CommunicationAllowed_b',0
	.word	481
	.byte	1,2,35,18,10
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	481
	.byte	1,2,35,19,10
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	481
	.byte	1,2,35,20,10
	.byte	'NmNetworkModeStatus_b',0
	.word	481
	.byte	1,2,35,21,0,17
	.byte	'ComM_ChannelStruct_Impl',0,14,197,1,3
	.word	8200
	.byte	9,14,206,1,9,10,10
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	454
	.byte	2,2,35,0,10
	.byte	'LimitToNoComCtr_u16',0
	.word	454
	.byte	2,2,35,2,10
	.byte	'RequestedUserMode_t',0
	.word	481
	.byte	1,2,35,4,10
	.byte	'IndicatedUserMode_t',0
	.word	481
	.byte	1,2,35,5,10
	.byte	'numChannelsInFullCom_u8',0
	.word	481
	.byte	1,2,35,6,10
	.byte	'numChannelsInSilentCom_u8',0
	.word	481
	.byte	1,2,35,7,10
	.byte	'numChannelsInNoCom_u8',0
	.word	481
	.byte	1,2,35,8,0,17
	.byte	'ComM_UserStruct_Impl',0,14,214,1,3
	.word	8704
	.byte	17
	.byte	'Dcm_IOOperationResponseType',0,14,252,1,15
	.word	481
	.byte	17
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	14,138,2,15
	.word	481
	.byte	17
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,14,146,2,15
	.word	481
	.byte	17
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,14,150,2,15
	.word	481
	.byte	17
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,14,154,2,15
	.word	481
	.byte	17
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,14,243,3,34
	.word	7447
	.byte	18,128,8
	.word	481
	.byte	19,255,7,0,17
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,14,246,3,34
	.word	7447
	.byte	17
	.byte	'Fls_LengthType',0,15,173,3,16
	.word	156
	.byte	21
	.byte	'Fls_JobStartType',0,15,175,3,16,1,29
	.byte	'Reserved1',0,1
	.word	481
	.byte	1,7,2,35,0,29
	.byte	'Write',0,1
	.word	481
	.byte	1,6,2,35,0,29
	.byte	'Erase',0,1
	.word	481
	.byte	1,5,2,35,0,29
	.byte	'Read',0,1
	.word	481
	.byte	1,4,2,35,0,29
	.byte	'Compare',0,1
	.word	481
	.byte	1,3,2,35,0,29
	.byte	'Reserved2',0,1
	.word	481
	.byte	3,0,2,35,0,0,17
	.byte	'Fls_JobStartType',0,15,183,3,3
	.word	9546
	.byte	17
	.byte	'Fls_17_Pmu_Job_Type',0,15,187,3,15
	.word	481
	.byte	18,2
	.word	481
	.byte	19,1,0,21
	.byte	'Fls_17_Pmu_StateType',0,15,198,3,16,48,10
	.byte	'FlsReadAddress',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'FlsWriteAddress',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	156
	.byte	4,2,35,8,10
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	156
	.byte	4,2,35,12,10
	.byte	'FlsReadLength',0
	.word	156
	.byte	4,2,35,16,10
	.byte	'FlsWriteLength',0
	.word	156
	.byte	4,2,35,20,10
	.byte	'FlsReadBufferPtr',0
	.word	1129
	.byte	4,2,35,24,10
	.byte	'FlsWriteBufferPtr',0
	.word	800
	.byte	4,2,35,28,10
	.byte	'FlsJobResult',0
	.word	5950
	.byte	4,2,35,32,10
	.byte	'FlsMode',0
	.word	6108
	.byte	4,2,35,36,10
	.byte	'NotifCaller',0
	.word	481
	.byte	1,2,35,40,10
	.byte	'JobStarted',0
	.word	9546
	.byte	1,2,35,41,10
	.byte	'FlsJobType',0
	.word	9736
	.byte	2,2,35,42,10
	.byte	'FlsOper',0
	.word	481
	.byte	1,2,35,44,10
	.byte	'FlsTimeoutErr',0
	.word	481
	.byte	1,2,35,45,10
	.byte	'FlsTimeoutControl',0
	.word	481
	.byte	1,2,35,46,0,17
	.byte	'Fls_17_Pmu_StateType',0,15,130,4,3
	.word	9745
	.byte	17
	.byte	'Fls_NotifFunctionPtrType',0,15,137,4,16
	.word	1960
	.byte	12
	.word	156
	.byte	8
	.word	10223
	.byte	23,1,1,24
	.word	156
	.byte	24
	.word	156
	.byte	24
	.word	10228
	.byte	24
	.word	481
	.byte	0,8
	.word	10233
	.byte	17
	.byte	'Fls_WriteCmdPtrType',0,15,139,4,16
	.word	10257
	.byte	23,1,1,24
	.word	156
	.byte	0,8
	.word	10291
	.byte	17
	.byte	'Fls_EraseCmdPtrType',0,15,144,4,16
	.word	10300
	.byte	6,16,122,9,4,7
	.byte	'FEE_NO_ORDER',0,0,7
	.byte	'FEE_READ_ORDER',0,1,7
	.byte	'FEE_WRITE_ORDER',0,2,7
	.byte	'FEE_INVALIDATE_ORDER',0,3,7
	.byte	'FEE_MAINTAIN_ORDER',0,4,7
	.byte	'FEE_FORCED_READ_ORDER',0,5,0,17
	.byte	'Fee_HlMode_ten',0,16,132,1,2
	.word	10334
	.byte	6,1,147,1,9,4,7
	.byte	'FEE_NORMAL_PRIO_E',0,0,7
	.byte	'FEE_HIGH_PRIO_E',0,1,0,17
	.byte	'Fee_HlPriority_ten',0,1,151,1,2
	.word	10482
	.byte	9,1,165,1,9,24,10
	.byte	'DataBufferPtr_pu8',0
	.word	1129
	.byte	4,2,35,0,10
	.byte	'FeeIdx_u16',0
	.word	454
	.byte	2,2,35,4,10
	.byte	'BlockPropIdx_u16',0
	.word	454
	.byte	2,2,35,6,10
	.byte	'Offset_u16',0
	.word	454
	.byte	2,2,35,8,10
	.byte	'Length_u16',0
	.word	454
	.byte	2,2,35,10,10
	.byte	'Mode_en',0
	.word	10334
	.byte	4,2,35,12,10
	.byte	'Prio_en',0
	.word	10482
	.byte	4,2,35,16,10
	.byte	'SecLevel_u8',0
	.word	481
	.byte	1,2,35,20,0,17
	.byte	'Fee_OrderFifo_tst',0,1,175,1,2
	.word	10555
	.byte	6,1,246,1,9,4,7
	.byte	'FEE_SECTOR_STATE_UNDEF_E',0,0,7
	.byte	'FEE_SECTOR_ERASED_E',0,1,7
	.byte	'FEE_SECTOR_USED_E',0,2,7
	.byte	'FEE_SECTOR_FULL_E',0,3,7
	.byte	'FEE_SECTOR_REQUEST2ERASE_E',0,4,7
	.byte	'FEE_SECTOR_CONSIDERED_E',0,13,0,17
	.byte	'Fee_SectorState_ten',0,1,254,1,2
	.word	10757
	.byte	17
	.byte	'Fee_stRetVal_ten',0,1,149,2,2
	.word	242
	.byte	12
	.word	1960
	.byte	12
	.word	1960
	.byte	9,1,192,2,9,16,10
	.byte	'BlockPersistentId_u16',0
	.word	454
	.byte	2,2,35,0,10
	.byte	'Flags_u16',0
	.word	454
	.byte	2,2,35,2,10
	.byte	'Length_u16',0
	.word	454
	.byte	2,2,35,4,10
	.byte	'JobEndNotification_pfn',0
	.word	10963
	.byte	4,2,35,8,10
	.byte	'JobErrorNotification_pfn',0
	.word	10968
	.byte	4,2,35,12,0,17
	.byte	'Fee_BlockPropertiesType_tst',0,1,199,2,2
	.word	10973
	.byte	6,1,210,2,9,4,7
	.byte	'FEE_LL_MARKER_INIT_E',0,0,7
	.byte	'FEE_LL_MARKER_BLK_CHK_E',0,1,7
	.byte	'FEE_LL_MARKER_BLK_CHK_WAIT_E',0,2,7
	.byte	'FEE_LL_MARKER_BLK_CHK_ERROR_E',0,3,7
	.byte	'FEE_LL_MARKER_BLK_CHK_FINISHED_E',0,4,7
	.byte	'FEE_LL_MARKER_WRITE_WAIT_E',0,5,7
	.byte	'FEE_LL_MARKER_WRITE_ERROR_E',0,6,7
	.byte	'FEE_LL_MARKER_VERIFY_E',0,7,7
	.byte	'FEE_LL_MARKER_VERIFY_WAIT_E',0,8,7
	.byte	'FEE_LL_MARKER_VERIFY_FINISHED_E',0,9,0,17
	.byte	'Fee_LLWrMarkerType_ten',0,1,222,2,2
	.word	11153
	.byte	6,1,225,2,9,4,7
	.byte	'FEE_HL_RDWR_BLK_INIT_E',0,0,7
	.byte	'FEE_HL_SEARCH_BLK_HDR_E',0,1,7
	.byte	'FEE_HL_READ_BLK_HDR_WAIT_E',0,2,7
	.byte	'FEE_HL_CHECK_BLK_HDR_E',0,3,7
	.byte	'FEE_HL_CALC_BLK_CS_E',0,4,7
	.byte	'FEE_HL_CHECK_BLK_CS_E',0,5,7
	.byte	'FEE_HL_RD_DATA_FROM_BLK_E',0,6,7
	.byte	'FEE_HL_COMP_BLK_E',0,7,7
	.byte	'FEE_HL_WR_BLK_E',0,8,0,17
	.byte	'Fee_HLRdWrBlockType_ten',0,1,243,2,2
	.word	11487
	.byte	6,1,246,2,9,4,7
	.byte	'FEE_LL_WR_BLK_INIT_E',0,0,7
	.byte	'FEE_LL_WR_WRITEHEADER_E',0,1,7
	.byte	'FEE_LL_WR_SIZECHECK_HSR_E',0,2,7
	.byte	'FEE_LL_WR_WRITEHEADER_WAIT_E',0,3,7
	.byte	'FEE_LL_WR_VERIFYHEADER_E',0,4,7
	.byte	'FEE_LL_WR_VERIFYHEADER_WAIT_E',0,5,7
	.byte	'FEE_LL_WR_VERIFYHEADER_ERROR_E',0,6,7
	.byte	'FEE_LL_WR_WRITEDATA_SEC_A_E',0,7,7
	.byte	'FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E',0,8,7
	.byte	'FEE_LL_WR_WRITE_ERROR_E',0,9,7
	.byte	'FEE_LL_WR_WRITE_FULL_MARKER_E',0,10,7
	.byte	'FEE_LL_WR_ERASE_SECTOR_E',0,11,7
	.byte	'FEE_LL_WR_WRITE_USED_MARKER_E',0,12,7
	.byte	'FEE_LL_WR_WRITE_START_MARKER_E',0,13,7
	.byte	'FEE_LL_WR_VERIFY_BLK_E',0,14,7
	.byte	'FEE_LL_WR_WRITEHDRPG2_E',0,15,7
	.byte	'FEE_LL_WR_WAIT_WRITEHDRPG2_E',0,16,0,17
	.byte	'Fee_LLWrBlockType_ten',0,1,162,3,2
	.word	11745
	.byte	6,1,165,3,9,4,7
	.byte	'FEE_LL_CMP_BLK_INIT_E',0,0,7
	.byte	'FEE_LL_CMP_HEADER_E',0,1,7
	.byte	'FEE_LL_CMP_WAIT_HEADER_E',0,2,7
	.byte	'FEE_LL_CMP_CHECK_OVERLAP_E',0,3,7
	.byte	'FEE_LL_CMP_DATA_SEC_A_E',0,4,7
	.byte	'FEE_LL_CMP_WAIT_DATA_SEC_A_E',0,5,7
	.byte	'FEE_LL_CMP_FINISHED_E',0,6,0,17
	.byte	'Fee_LLCmpBlkType_ten',0,1,174,3,2
	.word	12280
	.byte	6,1,177,3,9,4,7
	.byte	'FEE_LL_CPY_BLK_INIT_E',0,0,7
	.byte	'FEE_LL_CPY_BLOCK_START_E',0,1,7
	.byte	'FEE_LL_CPY_BLOCK_WAIT_E',0,2,7
	.byte	'FEE_LL_CPY_BLOCK_ERROR_E',0,3,7
	.byte	'FEE_LL_CPY_BLOCK_FINISHED_E',0,4,0,17
	.byte	'Fee_LLCpyBlkType_ten',0,1,184,3,2
	.word	12500
	.byte	6,1,187,3,9,4,7
	.byte	'FEE_LL_CRC_BLK_INIT_E',0,0,7
	.byte	'FEE_LL_CRC_RD_HD_PAGE_E',0,1,7
	.byte	'FEE_LL_CRC_RD_PAGE_E',0,2,7
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_E',0,3,7
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_E',0,4,7
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_ROB_E',0,5,7
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_WAIT_E',0,6,7
	.byte	'FEE_LL_CRC_RD_PAGE_WAIT_E',0,7,7
	.byte	'FEE_LL_CRC_RD_ERROR_E',0,8,0,17
	.byte	'Fee_LLCalcCrcBlkType_ten',0,1,200,3,2
	.word	12671
	.byte	6,1,203,3,9,4,7
	.byte	'FEE_LL_INIT_READ_E',0,0,7
	.byte	'FEE_LL_BLANK_CHECK_E',0,1,7
	.byte	'FEE_LL_BLANK_CHECK_WAIT_E',0,2,7
	.byte	'FEE_LL_READ_PAGE_E',0,3,7
	.byte	'FEE_LL_WAIT_READ_PAGE_E',0,4,7
	.byte	'FEE_LL_READ_ERROR_E',0,5,7
	.byte	'FEE_LL_READ_FINISHED_E',0,6,0,17
	.byte	'Fee_LLRdStateType_ten',0,1,223,3,3
	.word	12958
	.byte	6,1,226,3,9,4,7
	.byte	'FEE_LL_INIT_BLANK_CHECK_E',0,0,7
	.byte	'FEE_LL_PERFORM_BLANK_CHECK_E',0,1,7
	.byte	'FEE_LL_WAIT_PERFORM_BLANK_CHECK_E',0,2,7
	.byte	'FEE_LL_BLANK_CHECK_ERROR_E',0,3,7
	.byte	'FEE_LL_BLANK_CHECK_FINISHED_E',0,4,0,17
	.byte	'Fee_LLBlankCheckType_ten',0,1,233,3,3
	.word	13162
	.byte	6,1,236,3,9,4,7
	.byte	'FEE_LL_FIND_CURRENT_SECTOR_E',0,0,7
	.byte	'FEE_LL_FIND_LAST_HEADER_E',0,1,7
	.byte	'FEE_LL_FINISHED_E',0,2,0,17
	.byte	'Fee_LLFndEmptyPgeType_ten',0,1,249,3,2
	.word	13359
	.byte	6,1,252,3,9,4,7
	.byte	'FEE_LL_SEARCHBLK_INIT_E',0,0,7
	.byte	'FEE_LL_SEARCHBLK_BLK_HEADER_E',0,1,0,17
	.byte	'Fee_LLSearchBlkHdrType_ten',0,1,128,4,2
	.word	13480
	.byte	6,1,132,4,9,4,7
	.byte	'FEE_LL_BLD_UP_CACHE_INIT_E',0,0,7
	.byte	'FEE_LL_BLD_UP_CACHE_READ_E',0,1,0,17
	.byte	'Fee_LLBuildUpCache_ten',0,1,136,4,2
	.word	13581
	.byte	6,1,139,4,9,4,7
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E',0,0,7
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E',0,1,0,17
	.byte	'Fee_LLBuildUpCacheAllSect_ten',0,1,143,4,2
	.word	13678
	.byte	6,1,168,4,9,4,7
	.byte	'FEE_LL_REORG_INIT_E',0,0,7
	.byte	'FEE_LL_REORG_PREP_SEARCH_BLK_E',0,1,7
	.byte	'FEE_LL_REORG_SEARCH_BLK_E',0,2,7
	.byte	'FEE_LL_REORG_CHECK_BLOCK_CS_E',0,3,7
	.byte	'FEE_LL_REORG_REDUNDANT_BLK_CHK_E',0,4,7
	.byte	'FEE_LL_REORG_WRITE_BLOCK_E',0,5,7
	.byte	'FEE_LL_REORG_FINISHED_E',0,6,0,17
	.byte	'Fee_LLSecReorgType_ten',0,1,193,4,2
	.word	13798
	.byte	6,1,196,4,9,4,7
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_INIT_E',0,0,7
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E',0,1,7
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E',0,2,0,17
	.byte	'Fee_LLRedundantCpyChk_ten',0,1,201,4,2
	.word	14042
	.byte	6,1,204,4,9,4,7
	.byte	'FEE_LL_CPY_FLS2FLS_INIT_E',0,0,7
	.byte	'FEE_LL_CPY_FLS2FLS_READ_E',0,1,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_READ_E',0,2,7
	.byte	'FEE_LL_CPY_FLS2FLS_READ_ERROR_E',0,3,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E',0,4,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E',0,5,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E',0,6,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E',0,7,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E',0,8,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E',0,9,7
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_E',0,10,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E',0,11,7
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E',0,12,7
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_E',0,13,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E',0,14,7
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E',0,15,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E',0,16,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E',0,17,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E',0,18,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E',0,19,7
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E',0,20,7
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E',0,21,7
	.byte	'FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E',0,22,7
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E',0,23,7
	.byte	'FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E',0,24,7
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E',0,25,7
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E',0,26,0,17
	.byte	'Fee_LLCpyBlkFls2Fls_ten',0,1,133,5,2
	.word	14194
	.byte	9,1,163,5,9,116,10
	.byte	'xRdAddress',0
	.word	156
	.byte	4,2,35,0,10
	.byte	'xWrAddress',0
	.word	156
	.byte	4,2,35,4,10
	.byte	'xCmpAddress',0
	.word	156
	.byte	4,2,35,8,10
	.byte	'xCrcAddress',0
	.word	156
	.byte	4,2,35,12,10
	.byte	'xCpyAddress',0
	.word	156
	.byte	4,2,35,16,10
	.byte	'AdrHdSearchStart_u32',0
	.word	156
	.byte	4,2,35,20,10
	.byte	'xStartAddrNextSector_u32',0
	.word	156
	.byte	4,2,35,24,10
	.byte	'xHdPg2Address',0
	.word	156
	.byte	4,2,35,28,10
	.byte	'LastProgrammedAddress_u32',0
	.word	156
	.byte	4,2,35,32,10
	.byte	'LastValidHdrAddress_u32',0
	.word	156
	.byte	4,2,35,36,10
	.byte	'Fee_LLSecReorg_en',0
	.word	13798
	.byte	4,2,35,40,10
	.byte	'Fee_LLRedundantCpyChk_en',0
	.word	14042
	.byte	4,2,35,44,10
	.byte	'Fee_LLCpyBlkFls2Fls_en',0
	.word	14194
	.byte	4,2,35,48,10
	.byte	'Fee_HLWrBlock_en',0
	.word	11487
	.byte	4,2,35,52,10
	.byte	'Fee_HLMtBlock_en',0
	.word	11487
	.byte	4,2,35,56,10
	.byte	'Fee_LLWrBlock_en',0
	.word	11745
	.byte	4,2,35,60,10
	.byte	'Fee_HLRdBlock',0
	.word	11487
	.byte	4,2,35,64,10
	.byte	'Fee_LLNextUsedWrBlock_en',0
	.word	11745
	.byte	4,2,35,68,10
	.byte	'Fee_LLNextEraseWrBlock_en',0
	.word	11745
	.byte	4,2,35,72,10
	.byte	'Fee_LLCompBlk',0
	.word	12280
	.byte	4,2,35,76,10
	.byte	'Fee_LLCopyBlk_en',0
	.word	12500
	.byte	4,2,35,80,10
	.byte	'Fee_LLCalcCrcBlk_en',0
	.word	12671
	.byte	4,2,35,84,10
	.byte	'Fee_LLWrMarker_en',0
	.word	11153
	.byte	4,2,35,88,10
	.byte	'Fee_LLRdState_en',0
	.word	12958
	.byte	4,2,35,92,10
	.byte	'Fee_LLBlankCheckState_en',0
	.word	13162
	.byte	4,2,35,96,10
	.byte	'Fee_LLFindEmptyPageState_en',0
	.word	13359
	.byte	4,2,35,100,10
	.byte	'Fee_LLSearchBlkHdr_en',0
	.word	13480
	.byte	4,2,35,104,10
	.byte	'Fee_LLBuildUpCache_en',0
	.word	13581
	.byte	4,2,35,108,10
	.byte	'Fee_LLBuildUpCacheAllSect_en',0
	.word	13678
	.byte	4,2,35,112,0,17
	.byte	'Fee_RdWrOrder_tst',0,1,224,5,3
	.word	15240
	.byte	17
	.byte	'Fee_GlobInfoLastRdHeader_tst',0,1,235,5,2
	.word	498
	.byte	9,1,238,5,9,10,10
	.byte	'BytesAlrdyConsid_u16',0
	.word	454
	.byte	2,2,35,0,10
	.byte	'BytesAlrdyCompared_u16',0
	.word	454
	.byte	2,2,35,2,10
	.byte	'Bytes2Read_u16',0
	.word	454
	.byte	2,2,35,4,10
	.byte	'CompareResult_u8',0
	.word	481
	.byte	1,2,35,6,10
	.byte	'cntWriteRetry_u8',0
	.word	481
	.byte	1,2,35,7,10
	.byte	'cntCopies_u8',0
	.word	481
	.byte	1,2,35,8,0,17
	.byte	'Fee_GlobInfoWrBlock_tst',0,1,246,5,2
	.word	16135
	.byte	6,1,133,6,9,4,7
	.byte	'FEE_ERASESEC_IDLE_E',0,0,7
	.byte	'FEE_ERASESEC_CHECK_CACHE_E',0,1,7
	.byte	'FEE_ERASESEC_START_E',0,2,7
	.byte	'FEE_ERASESEC_DO_E',0,3,7
	.byte	'FEE_ERASESEC_WRITE_MARKER_E',0,4,7
	.byte	'FEE_ERASESEC_ERROR_E',0,5,0,17
	.byte	'Fee_LLEraseStateType_ten',0,1,141,6,2
	.word	16335
	.byte	18,3
	.word	481
	.byte	19,2,0,9,1,151,6,9,16,10
	.byte	'Preamble_au8',0
	.word	16523
	.byte	3,2,35,0,10
	.byte	'BlkStatus_u8',0
	.word	481
	.byte	1,2,35,3,10
	.byte	'FeeIndex_u16',0
	.word	454
	.byte	2,2,35,4,10
	.byte	'BlkLength_u16',0
	.word	454
	.byte	2,2,35,6,10
	.byte	'HdrCrc16_u16',0
	.word	454
	.byte	2,2,35,8,10
	.byte	'BlkCrc32_u32',0
	.word	156
	.byte	4,2,35,12,0,17
	.byte	'Fee_BlkHeader_tst',0,1,159,6,2
	.word	16532
	.byte	30
	.byte	'Fee_PageBytePtr_cpu8',0,1,143,7,53
	.word	1129
	.byte	1,1,30
	.byte	'Fee_RdWrOrder_st',0,1,144,7,53
	.word	15240
	.byte	1,1,18,72
	.word	10555
	.byte	19,2,0,30
	.byte	'Fee_OrderFifo_st',0,1,147,7,53
	.word	16759
	.byte	1,1,30
	.byte	'Fee_GlobInfoLastRdHeader_st',0,1,148,7,53
	.word	498
	.byte	1,1,30
	.byte	'Fee_GlobInfoWrBlock_st',0,1,149,7,53
	.word	16135
	.byte	1,1,30
	.byte	'Fee_idxActQueue_u8',0,1,193,7,53
	.word	481
	.byte	1,1,18,192,1
	.word	10973
	.byte	19,11,0,30
	.byte	'Fee_BlockProperties_st',0,1,237,7,53
	.word	16899
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,4,1,58,15,59,15,57,15,11
	.byte	15,0,0,7,40,0,3,8,28,13,0,0,8,15,0,73,19,0,0,9,19,1,58,15,59,15,57,15,11,15,0,0,10,13,0,3,8,73,19,11,15
	.byte	56,9,0,0,11,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,12,38,0,73,19,0,0,13,46,1,3,8
	.byte	58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,14,46,1,49,19,0,0,15,5,0,49,19,0,0,16,21,0,54,15,0,0,17
	.byte	22,0,3,8,58,15,59,15,57,15,73,19,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,21,0,54,15,39,12,0,0
	.byte	21,19,1,3,8,58,15,59,15,57,15,11,15,0,0,22,59,0,3,8,0,0,23,21,1,54,15,39,12,0,0,24,5,0,73,19,0,0,25,23
	.byte	1,58,15,59,15,57,15,11,15,0,0,26,4,1,3,8,58,15,59,15,57,15,11,15,0,0,27,21,0,73,19,54,15,39,12,0,0,28
	.byte	53,0,73,19,0,0,29,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,30,52,0,3,8,58,15,59,15,57,15,73,19,63,12
	.byte	60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L96:
	.word	.L126-.L125
.L125:
	.half	3
	.word	.L128-.L127
.L127:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Crc\\Crc_32.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Fee\\api\\Fee.h',0,0,0,0,0
.L128:
.L126:
	.sdecl	'.debug_info',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_info'
.L97:
	.word	445
	.half	3
	.word	.L98
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L100,.L99
	.byte	2
	.word	.L93
	.byte	3
	.byte	'Fee_HLWriteBlock',0,1,63,34
	.word	.L102
	.byte	1,1,1
	.word	.L92,.L103,.L91
	.byte	4
	.word	.L92,.L103
	.byte	5
	.byte	'xRetVal_en',0,1,65,38
	.word	.L102,.L104
	.byte	5
	.byte	'xtmpRetVal_en',0,1,66,38
	.word	.L102,.L105
	.byte	5
	.byte	'xNumBytes_u16',0,1,67,38
	.word	.L106,.L107
	.byte	6
	.byte	'xAdrLastBlkHeader_u32',0,1,68,39
	.word	.L108
	.byte	5,3
	.word	_999001_xAdrLastBlkHeader_u32
	.byte	6
	.byte	'xBlkLength_u16',0,1,69,20
	.word	.L106
	.byte	5,3
	.word	_999002_xBlkLength_u16
	.byte	6
	.byte	'xNumCrcBytesConsid_u16',0,1,70,20
	.word	.L108
	.byte	5,3
	.word	_999003_xNumCrcBytesConsid_u16
	.byte	6
	.byte	'xBlkCrc_u32',0,1,71,20
	.word	.L108
	.byte	5,3
	.word	_999004_xBlkCrc_u32
	.byte	6
	.byte	'xSearchRetry_b',0,1,72,20
	.word	.L109
	.byte	5,3
	.word	_999005_xSearchRetry_b
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_abbrev'
.L98:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_line'
.L99:
	.word	.L130-.L129
.L129:
	.half	3
	.word	.L132-.L131
.L131:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_HlWriteBlock.c',0,0,0,0,0
.L132:
	.byte	5,34,7,0,5,2
	.word	.L92
	.byte	3,62,1,5,49,9
	.half	.L110-.L92
	.byte	3,2,1,5,13,9
	.half	.L111-.L110
	.byte	3,11,1,5,29,9
	.half	.L133-.L111
	.byte	1,5,14,9
	.half	.L134-.L133
	.byte	3,3,1,9
	.half	.L135-.L134
	.byte	3,38,1,9
	.half	.L136-.L135
	.byte	3,188,2,1,9
	.half	.L137-.L136
	.byte	3,62,1,9
	.half	.L138-.L137
	.byte	3,137,1,1,9
	.half	.L139-.L138
	.byte	3,1,1,9
	.half	.L140-.L139
	.byte	3,189,127,1,5,13,9
	.half	.L2-.L140
	.byte	3,156,124,1,5,37,9
	.half	.L141-.L2
	.byte	1,5,35,9
	.half	.L142-.L141
	.byte	1,5,61,9
	.half	.L143-.L142
	.byte	3,4,1,5,44,9
	.half	.L144-.L143
	.byte	1,5,61,9
	.half	.L145-.L144
	.byte	1,5,60,9
	.half	.L146-.L145
	.byte	1,5,21,9
	.half	.L147-.L146
	.byte	1,5,80,9
	.half	.L148-.L147
	.byte	1,5,43,9
	.half	.L149-.L148
	.byte	1,5,13,9
	.half	.L150-.L149
	.byte	3,127,1,5,98,9
	.half	.L151-.L150
	.byte	3,1,1,5,55,9
	.half	.L152-.L151
	.byte	3,127,1,5,40,9
	.half	.L153-.L152
	.byte	3,2,1,5,98,9
	.half	.L154-.L153
	.byte	3,1,1,5,55,9
	.half	.L155-.L154
	.byte	3,127,1,5,40,9
	.half	.L156-.L155
	.byte	3,2,1,5,106,9
	.half	.L157-.L156
	.byte	3,1,1,5,55,9
	.half	.L158-.L157
	.byte	3,127,1,5,62,9
	.half	.L159-.L158
	.byte	3,3,1,5,60,9
	.half	.L160-.L159
	.byte	1,5,62,9
	.half	.L161-.L160
	.byte	3,1,1,5,60,9
	.half	.L162-.L161
	.byte	1,5,62,9
	.half	.L163-.L162
	.byte	3,1,1,5,60,9
	.half	.L164-.L163
	.byte	1,5,13,9
	.half	.L165-.L164
	.byte	3,3,1,5,27,9
	.half	.L166-.L165
	.byte	1,5,25,9
	.half	.L167-.L166
	.byte	1,5,13,9
	.half	.L168-.L167
	.byte	3,1,1,5,38,9
	.half	.L169-.L168
	.byte	1,5,36,9
	.half	.L170-.L169
	.byte	1,5,13,9
	.half	.L171-.L170
	.byte	3,1,1,5,30,9
	.half	.L172-.L171
	.byte	1,5,28,9
	.half	.L173-.L172
	.byte	1,5,13,9
	.half	.L174-.L173
	.byte	3,3,1,5,30,9
	.half	.L175-.L174
	.byte	1,5,28,9
	.half	.L176-.L175
	.byte	1,5,49,9
	.half	.L177-.L176
	.byte	3,9,1,5,47,9
	.half	.L178-.L177
	.byte	1,5,61,9
	.half	.L3-.L178
	.byte	3,103,1,5,44,9
	.half	.L179-.L3
	.byte	1,5,13,9
	.half	.L180-.L179
	.byte	3,127,1,9
	.half	.L181-.L180
	.byte	3,17,1,5,77,9
	.half	.L182-.L181
	.byte	3,22,1,5,76,9
	.half	.L183-.L182
	.byte	1,5,96,9
	.half	.L184-.L183
	.byte	1,5,61,9
	.half	.L185-.L184
	.byte	3,1,1,5,60,9
	.half	.L186-.L185
	.byte	3,2,1,5,22,9
	.half	.L113-.L186
	.byte	3,5,1,9
	.half	.L187-.L113
	.byte	3,8,1,9
	.half	.L188-.L187
	.byte	3,152,2,1,9
	.half	.L189-.L188
	.byte	3,180,127,1,9
	.half	.L190-.L189
	.byte	3,202,0,1,9
	.half	.L191-.L190
	.byte	3,1,1,9
	.half	.L192-.L191
	.byte	3,115,1,9
	.half	.L193-.L192
	.byte	3,11,1,9
	.half	.L194-.L193
	.byte	3,4,1,5,17,9
	.half	.L10-.L194
	.byte	3,228,125,1,5,54,9
	.half	.L11-.L10
	.byte	3,18,1,5,68,9
	.half	.L195-.L11
	.byte	1,5,25,9
	.half	.L196-.L195
	.byte	1,5,48,7,9
	.half	.L197-.L196
	.byte	3,1,1,5,47,9
	.half	.L198-.L197
	.byte	1,5,67,9
	.half	.L199-.L198
	.byte	1,5,76,9
	.half	.L200-.L199
	.byte	1,5,48,7,9
	.half	.L21-.L200
	.byte	1,5,47,9
	.half	.L201-.L21
	.byte	1,5,67,9
	.half	.L202-.L201
	.byte	1,5,29,9
	.half	.L203-.L202
	.byte	3,3,1,5,80,7,9
	.half	.L204-.L203
	.byte	3,1,1,5,40,7,9
	.half	.L205-.L204
	.byte	3,7,1,5,29,9
	.half	.L206-.L205
	.byte	3,2,1,5,37,9
	.half	.L23-.L206
	.byte	3,11,1,5,96,9
	.half	.L207-.L23
	.byte	1,5,59,9
	.half	.L208-.L207
	.byte	1,5,56,9
	.half	.L209-.L208
	.byte	3,127,1,5,114,9
	.half	.L210-.L209
	.byte	3,1,1,5,71,9
	.half	.L211-.L210
	.byte	3,127,1,5,54,9
	.half	.L212-.L211
	.byte	3,104,1,5,125,9
	.half	.L213-.L212
	.byte	3,25,1,5,40,9
	.half	.L22-.L213
	.byte	3,163,127,1,5,21,9
	.half	.L214-.L22
	.byte	3,127,1,9
	.half	.L26-.L214
	.byte	3,233,0,1,5,66,7,9
	.half	.L215-.L26
	.byte	3,3,1,5,69,9
	.half	.L216-.L215
	.byte	3,3,1,5,67,9
	.half	.L217-.L216
	.byte	1,5,97,9
	.half	.L218-.L217
	.byte	3,125,1,5,66,9
	.half	.L27-.L218
	.byte	3,8,1,5,46,9
	.half	.L28-.L27
	.byte	3,33,1,5,71,9
	.half	.L219-.L28
	.byte	1,5,98,9
	.half	.L220-.L219
	.byte	1,5,52,9
	.half	.L114-.L220
	.byte	3,7,1,5,65,9
	.half	.L221-.L114
	.byte	3,125,1,5,64,9
	.half	.L222-.L221
	.byte	1,5,84,9
	.half	.L223-.L222
	.byte	1,5,47,9
	.half	.L224-.L223
	.byte	1,5,102,9
	.half	.L225-.L224
	.byte	1,5,21,9
	.half	.L226-.L225
	.byte	1,5,66,7,9
	.half	.L227-.L226
	.byte	3,3,1,5,91,9
	.half	.L228-.L227
	.byte	1,5,66,9
	.half	.L29-.L228
	.byte	3,5,1,5,52,9
	.half	.L30-.L29
	.byte	3,6,1,5,21,9
	.half	.L229-.L30
	.byte	3,125,1,5,66,7,9
	.half	.L230-.L229
	.byte	3,3,1,5,91,9
	.half	.L231-.L230
	.byte	1,5,66,9
	.half	.L31-.L231
	.byte	3,5,1,5,52,9
	.half	.L32-.L31
	.byte	3,7,1,5,21,9
	.half	.L232-.L32
	.byte	3,125,1,5,66,7,9
	.half	.L233-.L232
	.byte	3,3,1,5,88,9
	.half	.L234-.L233
	.byte	3,2,1,5,25,9
	.half	.L235-.L234
	.byte	1,5,114,7,9
	.half	.L236-.L235
	.byte	3,5,1,5,71,9
	.half	.L237-.L236
	.byte	3,127,1,5,25,9
	.half	.L34-.L237
	.byte	3,124,1,5,66,9
	.half	.L33-.L34
	.byte	3,12,1,5,56,9
	.half	.L35-.L33
	.byte	3,5,1,5,21,9
	.half	.L238-.L35
	.byte	3,3,1,5,71,9
	.half	.L239-.L238
	.byte	1,5,88,9
	.half	.L240-.L239
	.byte	1,5,86,9
	.half	.L241-.L240
	.byte	1,5,33,9
	.half	.L242-.L241
	.byte	1,5,13,9
	.half	.L243-.L242
	.byte	3,196,126,1,5,69,9
	.half	.L244-.L243
	.byte	3,197,1,1,5,68,9
	.half	.L245-.L244
	.byte	3,123,1,5,67,9
	.half	.L246-.L245
	.byte	1,5,87,9
	.half	.L247-.L246
	.byte	1,5,50,9
	.half	.L248-.L247
	.byte	1,5,105,9
	.half	.L249-.L248
	.byte	1,5,116,9
	.half	.L250-.L249
	.byte	1,5,64,9
	.half	.L251-.L250
	.byte	3,1,1,5,25,9
	.half	.L252-.L251
	.byte	3,127,1,5,58,7,9
	.half	.L253-.L252
	.byte	3,2,1,5,104,9
	.half	.L254-.L253
	.byte	1,5,84,7,9
	.half	.L255-.L254
	.byte	3,3,1,5,40,9
	.half	.L256-.L255
	.byte	1,5,106,9
	.half	.L257-.L256
	.byte	1,5,40,9
	.half	.L36-.L257
	.byte	3,6,1,5,61,9
	.half	.L38-.L36
	.byte	3,36,1,5,59,9
	.half	.L258-.L38
	.byte	1,5,21,9
	.half	.L259-.L258
	.byte	3,3,1,5,69,9
	.half	.L13-.L259
	.byte	3,10,1,5,68,9
	.half	.L260-.L13
	.byte	1,5,29,9
	.half	.L261-.L260
	.byte	1,5,88,9
	.half	.L262-.L261
	.byte	1,5,51,9
	.half	.L263-.L262
	.byte	1,5,106,9
	.half	.L264-.L263
	.byte	1,5,63,9
	.half	.L265-.L264
	.byte	3,127,1,5,48,9
	.half	.L266-.L265
	.byte	3,2,1,5,106,9
	.half	.L267-.L266
	.byte	3,1,1,5,63,9
	.half	.L268-.L267
	.byte	3,127,1,5,48,9
	.half	.L269-.L268
	.byte	3,2,1,5,114,9
	.half	.L270-.L269
	.byte	3,1,1,5,63,9
	.half	.L271-.L270
	.byte	3,127,1,5,68,9
	.half	.L272-.L271
	.byte	3,5,1,5,66,9
	.half	.L273-.L272
	.byte	1,5,68,9
	.half	.L274-.L273
	.byte	3,4,1,5,66,9
	.half	.L275-.L274
	.byte	1,5,60,9
	.half	.L276-.L275
	.byte	3,3,1,5,21,9
	.half	.L277-.L276
	.byte	1,5,52,7,9
	.half	.L278-.L277
	.byte	3,3,1,5,66,9
	.half	.L279-.L278
	.byte	1,5,69,9
	.half	.L280-.L279
	.byte	3,3,1,5,67,9
	.half	.L281-.L280
	.byte	1,5,45,9
	.half	.L40-.L281
	.byte	3,4,1,5,70,9
	.half	.L282-.L40
	.byte	1,5,96,9
	.half	.L283-.L282
	.byte	1,5,56,9
	.half	.L115-.L283
	.byte	3,3,1,5,21,9
	.half	.L284-.L115
	.byte	3,3,1,5,71,9
	.half	.L285-.L284
	.byte	1,5,88,9
	.half	.L286-.L285
	.byte	1,5,86,9
	.half	.L287-.L286
	.byte	1,5,33,9
	.half	.L288-.L287
	.byte	1,5,13,9
	.half	.L289-.L288
	.byte	3,229,125,1,5,69,9
	.half	.L290-.L289
	.byte	3,164,2,1,5,67,9
	.half	.L291-.L290
	.byte	3,123,1,5,66,9
	.half	.L292-.L291
	.byte	1,5,86,9
	.half	.L293-.L292
	.byte	1,5,49,9
	.half	.L294-.L293
	.byte	1,5,104,9
	.half	.L295-.L294
	.byte	1,5,115,9
	.half	.L296-.L295
	.byte	1,5,91,9
	.half	.L297-.L296
	.byte	3,1,1,5,24,9
	.half	.L298-.L297
	.byte	3,127,1,5,54,7,9
	.half	.L299-.L298
	.byte	3,2,1,5,99,9
	.half	.L300-.L299
	.byte	1,5,84,7,9
	.half	.L301-.L300
	.byte	3,3,1,5,40,9
	.half	.L302-.L301
	.byte	1,5,106,9
	.half	.L303-.L302
	.byte	1,5,40,9
	.half	.L41-.L303
	.byte	3,6,1,5,57,9
	.half	.L43-.L41
	.byte	3,4,1,5,55,9
	.half	.L304-.L43
	.byte	1,5,17,9
	.half	.L305-.L304
	.byte	3,2,1,5,39,9
	.half	.L16-.L305
	.byte	3,5,1,5,37,9
	.half	.L306-.L16
	.byte	1,5,17,9
	.half	.L307-.L306
	.byte	3,5,1,5,32,9
	.half	.L19-.L307
	.byte	3,12,1,5,17,9
	.half	.L308-.L19
	.byte	3,2,1,5,9,9
	.half	.L20-.L308
	.byte	3,3,1,5,55,9
	.half	.L4-.L20
	.byte	3,6,1,5,38,9
	.half	.L309-.L4
	.byte	1,5,53,9
	.half	.L310-.L309
	.byte	1,5,29,9
	.half	.L311-.L310
	.byte	1,5,32,9
	.half	.L116-.L311
	.byte	3,3,1,5,13,9
	.half	.L312-.L116
	.byte	1,5,31,9
	.half	.L313-.L312
	.byte	3,3,1,5,61,9
	.half	.L48-.L313
	.byte	3,156,125,1,5,44,9
	.half	.L314-.L48
	.byte	1,5,61,9
	.half	.L315-.L314
	.byte	1,5,60,9
	.half	.L316-.L315
	.byte	1,5,13,9
	.half	.L317-.L316
	.byte	3,11,1,9
	.half	.L318-.L317
	.byte	3,221,2,1,5,95,7,9
	.half	.L319-.L318
	.byte	3,3,1,5,113,9
	.half	.L320-.L319
	.byte	1,5,50,9
	.half	.L321-.L320
	.byte	3,2,1,9
	.half	.L322-.L321
	.byte	3,1,1,5,29,9
	.half	.L118-.L322
	.byte	3,125,1,5,17,9
	.half	.L323-.L118
	.byte	3,6,1,5,40,9
	.half	.L324-.L323
	.byte	1,5,56,9
	.half	.L325-.L324
	.byte	3,125,1,9
	.half	.L49-.L325
	.byte	3,10,1,5,17,9
	.half	.L326-.L49
	.byte	1,5,64,7,9
	.half	.L327-.L326
	.byte	3,5,1,5,99,9
	.half	.L328-.L327
	.byte	3,126,1,5,91,9
	.half	.L329-.L328
	.byte	3,2,1,5,108,9
	.half	.L330-.L329
	.byte	1,5,106,9
	.half	.L331-.L330
	.byte	1,5,55,9
	.half	.L332-.L331
	.byte	3,1,1,5,33,9
	.half	.L120-.L332
	.byte	3,125,1,5,13,9
	.half	.L51-.L120
	.byte	3,132,125,1,5,21,9
	.half	.L333-.L51
	.byte	3,131,3,1,5,63,9
	.half	.L334-.L333
	.byte	1,5,20,9
	.half	.L335-.L334
	.byte	1,5,48,7,9
	.half	.L336-.L335
	.byte	3,1,1,5,66,9
	.half	.L337-.L336
	.byte	1,5,57,7,9
	.half	.L338-.L337
	.byte	3,5,1,5,55,9
	.half	.L339-.L338
	.byte	1,5,78,9
	.half	.L340-.L339
	.byte	1,5,57,9
	.half	.L52-.L340
	.byte	3,6,1,5,55,9
	.half	.L341-.L52
	.byte	1,5,97,9
	.half	.L54-.L341
	.byte	3,5,1,5,96,9
	.half	.L342-.L54
	.byte	1,5,116,9
	.half	.L343-.L342
	.byte	1,5,139,1,9
	.half	.L344-.L343
	.byte	1,5,9,9
	.half	.L50-.L344
	.byte	3,3,1,5,68,9
	.half	.L5-.L50
	.byte	3,7,1,5,51,9
	.half	.L345-.L5
	.byte	1,5,68,9
	.half	.L346-.L345
	.byte	1,5,67,9
	.half	.L347-.L346
	.byte	1,5,51,9
	.half	.L348-.L347
	.byte	3,127,1,5,87,9
	.half	.L349-.L348
	.byte	3,1,1,5,105,9
	.half	.L350-.L349
	.byte	1,5,13,9
	.half	.L121-.L350
	.byte	3,3,1,5,17,9
	.half	.L58-.L121
	.byte	3,8,1,5,32,9
	.half	.L59-.L58
	.byte	3,24,1,5,17,9
	.half	.L351-.L59
	.byte	3,2,1,5,57,9
	.half	.L61-.L351
	.byte	3,7,1,5,55,9
	.half	.L352-.L61
	.byte	1,5,17,9
	.half	.L353-.L352
	.byte	3,2,1,5,32,9
	.half	.L57-.L353
	.byte	3,13,1,5,17,9
	.half	.L354-.L57
	.byte	3,2,1,5,9,9
	.half	.L68-.L354
	.byte	3,3,1,5,63,9
	.half	.L8-.L68
	.byte	3,7,1,5,46,9
	.half	.L355-.L8
	.byte	1,5,63,9
	.half	.L356-.L355
	.byte	1,5,62,9
	.half	.L357-.L356
	.byte	1,5,47,9
	.half	.L358-.L357
	.byte	3,127,1,5,82,9
	.half	.L359-.L358
	.byte	3,1,1,5,22,9
	.half	.L122-.L359
	.byte	3,6,1,9
	.half	.L360-.L122
	.byte	3,36,1,9
	.half	.L361-.L360
	.byte	3,100,1,9
	.half	.L362-.L361
	.byte	3,29,1,9
	.half	.L363-.L362
	.byte	3,121,1,9
	.half	.L364-.L363
	.byte	3,107,1,5,17,9
	.half	.L73-.L364
	.byte	3,124,1,5,24,9
	.half	.L78-.L73
	.byte	3,8,1,5,46,9
	.half	.L365-.L78
	.byte	1,5,21,9
	.half	.L366-.L365
	.byte	1,5,64,7,9
	.half	.L367-.L366
	.byte	3,3,1,5,61,9
	.half	.L368-.L367
	.byte	3,3,1,5,59,9
	.half	.L369-.L368
	.byte	1,5,66,9
	.half	.L370-.L369
	.byte	3,125,1,5,36,9
	.half	.L81-.L370
	.byte	3,7,1,5,17,9
	.half	.L82-.L81
	.byte	3,4,1,5,32,9
	.half	.L77-.L82
	.byte	3,5,1,5,17,9
	.half	.L371-.L77
	.byte	3,1,1,5,32,9
	.half	.L76-.L371
	.byte	3,7,1,5,17,9
	.half	.L372-.L76
	.byte	3,2,1,5,32,9
	.half	.L79-.L372
	.byte	3,6,1,5,17,9
	.half	.L373-.L79
	.byte	3,2,1,5,9,9
	.half	.L80-.L373
	.byte	3,3,1,5,24,9
	.half	.L9-.L80
	.byte	3,8,1,5,9,9
	.half	.L374-.L9
	.byte	3,2,1,5,5,9
	.half	.L47-.L374
	.byte	3,5,1,5,9,7,9
	.half	.L375-.L47
	.byte	3,3,1,5,31,9
	.half	.L376-.L375
	.byte	1,5,51,9
	.half	.L377-.L376
	.byte	1,5,49,9
	.half	.L378-.L377
	.byte	1,5,45,9
	.half	.L379-.L378
	.byte	3,3,1,5,43,9
	.half	.L380-.L379
	.byte	1,5,5,9
	.half	.L89-.L380
	.byte	3,3,1,5,1,9
	.half	.L90-.L89
	.byte	3,1,1,7,9
	.half	.L101-.L90
	.byte	0,1,1
.L130:
	.sdecl	'.debug_ranges',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_ranges'
.L100:
	.word	-1,.L92,0,.L101-.L92,0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L110-.L92
	.half	2
	.byte	138,0
	.word	.L110-.L92,.L103-.L92
	.half	2
	.byte	138,16
	.word	.L103-.L92,.L103-.L92
	.half	2
	.byte	138,0
	.word	0,0
.L107:
	.word	-1,.L92,.L116-.L92,.L5-.L92
	.half	1
	.byte	89
	.word	.L117-.L92,.L118-.L92
	.half	1
	.byte	84
	.word	.L119-.L92,.L120-.L92
	.half	1
	.byte	84
	.word	0,0
.L104:
	.word	-1,.L92,.L111-.L92,.L112-.L92
	.half	1
	.byte	88
	.word	.L58-.L92,.L103-.L92
	.half	1
	.byte	88
	.word	.L123-.L92,.L103-.L92
	.half	1
	.byte	82
	.word	0,0
.L105:
	.word	-1,.L92,.L113-.L92,.L114-.L92
	.half	1
	.byte	82
	.word	.L13-.L92,.L115-.L92
	.half	1
	.byte	82
	.word	.L16-.L92,.L20-.L92
	.half	1
	.byte	82
	.word	.L121-.L92,.L112-.L92
	.half	1
	.byte	82
	.word	.L58-.L92,.L8-.L92
	.half	1
	.byte	82
	.word	.L122-.L92,.L9-.L92
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L381:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Fee_HLWriteBlock')
	.sect	'.debug_frame'
	.word	36
	.word	.L381,.L92,.L103-.L92
	.byte	4
	.word	(.L110-.L92)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L103-.L110)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   655  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   656  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   657  /* FEE_PRESENT == 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   658  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   659  /* 1 == FEE_PRV_CFG_SELECTED_FS */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   660  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   661  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   662  /*<BASDKey>
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   663  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   664  * $History__:$
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   665  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_HlWriteBlock.c	   666  </BASDKey>*/

	; Module end
